
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013fd0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08014270  08014270  00024270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014704  08014704  00024704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801470c  0801470c  0002470c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014710  08014710  00024710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08014714  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000050f0  24000100  08014814  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240051f0  08014814  000351f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   000371d7  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000689d  00000000  00000000  00067305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002738  00000000  00000000  0006dba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002480  00000000  00000000  000702e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004339b  00000000  00000000  00072760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00038e14  00000000  00000000  000b5afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194740  00000000  00000000  000ee90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028304f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000abf8  00000000  00000000  002830a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014258 	.word	0x08014258

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08014258 	.word	0x08014258

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f002 ff6f 	bl	800354c <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fae2 	bl	8001c3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f004 f88a 	bl	800479c <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fad5 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f003 f9cd 	bl	8003a54 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fabc 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f003 f9bf 	bl	8003a54 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 faae 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f003 f9b1 	bl	8003a54 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 faa0 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f003 f9a3 	bl	8003a54 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fa92 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f003 f994 	bl	8003a54 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fa83 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f003 f985 	bl	8003a54 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fa74 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f003 f976 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fa65 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f003 f967 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fa56 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f003 f958 	bl	8003a54 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fa47 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f003 f949 	bl	8003a54 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fa38 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f003 f93a 	bl	8003a54 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fa29 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f002 fe57 	bl	800354c <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 f9ca 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f003 f8c2 	bl	8003a54 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 f9b1 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f003 f8b4 	bl	8003a54 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 f9a3 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f003 f8a6 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 f995 	bl	8001c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f003 f898 	bl	8003a54 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 f987 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f007 face 	bl	8007f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f007 fac2 	bl	8007f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f007 fab6 	bl	8007f9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f004 fc55 	bl	8005324 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 f8dc 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f002 fb10 	bl	8003104 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f002 fb0a 	bl	8003104 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f004 fbf5 	bl	8005324 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 f87c 	bl	8001c3c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f012 fe5d 	bl	801384c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f003 ffbd 	bl	8004b18 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 f84a 	bl	8001c3c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f004 f9d8 	bl	8004f78 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 f835 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f007 f9a1 	bl	8007f9c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f004 fb40 	bl	8005324 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f000 ffc7 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f003 ff02 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f003 ff19 	bl	8004afc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f003 fed9 	bl	8004ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f003 fef0 	bl	8004afc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f003 fed1 	bl	8004ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f003 fee8 	bl	8004afc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f003 fec9 	bl	8004ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f003 fee0 	bl	8004afc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f003 fec1 	bl	8004ac8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f003 fed8 	bl	8004afc <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d6c:	4a28      	ldr	r2, [pc, #160]	; (8000e10 <MX_FREERTOS_Init+0xa8>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4828      	ldr	r0, [pc, #160]	; (8000e14 <MX_FREERTOS_Init+0xac>)
 8000d72:	f00f fd73 	bl	801085c <osThreadNew>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <MX_FREERTOS_Init+0xb0>)
 8000d7a:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000d7c:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <MX_FREERTOS_Init+0xb4>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4827      	ldr	r0, [pc, #156]	; (8000e20 <MX_FREERTOS_Init+0xb8>)
 8000d82:	f00f fd6b 	bl	801085c <osThreadNew>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <MX_FREERTOS_Init+0xbc>)
 8000d8a:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000d8c:	4a26      	ldr	r2, [pc, #152]	; (8000e28 <MX_FREERTOS_Init+0xc0>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4826      	ldr	r0, [pc, #152]	; (8000e2c <MX_FREERTOS_Init+0xc4>)
 8000d92:	f00f fd63 	bl	801085c <osThreadNew>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <MX_FREERTOS_Init+0xc8>)
 8000d9a:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000d9c:	4a25      	ldr	r2, [pc, #148]	; (8000e34 <MX_FREERTOS_Init+0xcc>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4825      	ldr	r0, [pc, #148]	; (8000e38 <MX_FREERTOS_Init+0xd0>)
 8000da2:	f00f fd5b 	bl	801085c <osThreadNew>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a24      	ldr	r2, [pc, #144]	; (8000e3c <MX_FREERTOS_Init+0xd4>)
 8000daa:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000dac:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <MX_FREERTOS_Init+0xd8>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4824      	ldr	r0, [pc, #144]	; (8000e44 <MX_FREERTOS_Init+0xdc>)
 8000db2:	f00f fd53 	bl	801085c <osThreadNew>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <MX_FREERTOS_Init+0xe0>)
 8000dba:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000dbc:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <MX_FREERTOS_Init+0xe4>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4823      	ldr	r0, [pc, #140]	; (8000e50 <MX_FREERTOS_Init+0xe8>)
 8000dc2:	f00f fd4b 	bl	801085c <osThreadNew>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <MX_FREERTOS_Init+0xec>)
 8000dca:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <MX_FREERTOS_Init+0xf0>)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4822      	ldr	r0, [pc, #136]	; (8000e5c <MX_FREERTOS_Init+0xf4>)
 8000dd2:	f00f fd43 	bl	801085c <osThreadNew>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <MX_FREERTOS_Init+0xf8>)
 8000dda:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <MX_FREERTOS_Init+0xfc>)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4821      	ldr	r0, [pc, #132]	; (8000e68 <MX_FREERTOS_Init+0x100>)
 8000de2:	f00f fd3b 	bl	801085c <osThreadNew>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <MX_FREERTOS_Init+0x104>)
 8000dea:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000dec:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <MX_FREERTOS_Init+0x108>)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4820      	ldr	r0, [pc, #128]	; (8000e74 <MX_FREERTOS_Init+0x10c>)
 8000df2:	f00f fd33 	bl	801085c <osThreadNew>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <MX_FREERTOS_Init+0x110>)
 8000dfa:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000dfc:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <MX_FREERTOS_Init+0x114>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	481f      	ldr	r0, [pc, #124]	; (8000e80 <MX_FREERTOS_Init+0x118>)
 8000e02:	f00f fd2b 	bl	801085c <osThreadNew>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <MX_FREERTOS_Init+0x11c>)
 8000e0a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	080144b0 	.word	0x080144b0
 8000e14:	08000e89 	.word	0x08000e89
 8000e18:	24000360 	.word	0x24000360
 8000e1c:	080144d4 	.word	0x080144d4
 8000e20:	08000e99 	.word	0x08000e99
 8000e24:	24000364 	.word	0x24000364
 8000e28:	080144f8 	.word	0x080144f8
 8000e2c:	08000ea9 	.word	0x08000ea9
 8000e30:	24000368 	.word	0x24000368
 8000e34:	0801451c 	.word	0x0801451c
 8000e38:	08000eb9 	.word	0x08000eb9
 8000e3c:	2400036c 	.word	0x2400036c
 8000e40:	08014540 	.word	0x08014540
 8000e44:	08000ec9 	.word	0x08000ec9
 8000e48:	24000370 	.word	0x24000370
 8000e4c:	08014564 	.word	0x08014564
 8000e50:	08000ed9 	.word	0x08000ed9
 8000e54:	24000374 	.word	0x24000374
 8000e58:	08014588 	.word	0x08014588
 8000e5c:	08000ee9 	.word	0x08000ee9
 8000e60:	24000378 	.word	0x24000378
 8000e64:	080145ac 	.word	0x080145ac
 8000e68:	08000ef9 	.word	0x08000ef9
 8000e6c:	2400037c 	.word	0x2400037c
 8000e70:	080145d0 	.word	0x080145d0
 8000e74:	08000f09 	.word	0x08000f09
 8000e78:	24000380 	.word	0x24000380
 8000e7c:	080145f4 	.word	0x080145f4
 8000e80:	08000f19 	.word	0x08000f19
 8000e84:	24000384 	.word	0x24000384

08000e88 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f00f fd75 	bl	8010980 <osDelay>
 8000e96:	e7fb      	b.n	8000e90 <PMT_init+0x8>

08000e98 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f00f fd6d 	bl	8010980 <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <ERPA_init+0x8>

08000ea8 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f00f fd65 	bl	8010980 <osDelay>
 8000eb6:	e7fb      	b.n	8000eb0 <HK_init+0x8>

08000eb8 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f00f fd5d 	bl	8010980 <osDelay>
 8000ec6:	e7fb      	b.n	8000ec0 <AUTOINIT_init+0x8>

08000ec8 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f00f fd55 	bl	8010980 <osDelay>
 8000ed6:	e7fb      	b.n	8000ed0 <AUTODEINIT_init+0x8>

08000ed8 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	for (;;) {
		osDelay(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f00f fd4d 	bl	8010980 <osDelay>
 8000ee6:	e7fb      	b.n	8000ee0 <UART_TX_init+0x8>

08000ee8 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	for (;;) {
		osDelay(1);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f00f fd45 	bl	8010980 <osDelay>
 8000ef6:	e7fb      	b.n	8000ef0 <Voltage_Monitor_init+0x8>

08000ef8 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f00f fd3d 	bl	8010980 <osDelay>
 8000f06:	e7fb      	b.n	8000f00 <STOP_init+0x8>

08000f08 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f00f fd35 	bl	8010980 <osDelay>
 8000f16:	e7fb      	b.n	8000f10 <Science_init+0x8>

08000f18 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f00f fd2d 	bl	8010980 <osDelay>
 8000f26:	e7fb      	b.n	8000f20 <Idle_init+0x8>

08000f28 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	4a32      	ldr	r2, [pc, #200]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f46:	f043 0304 	orr.w	r3, r3, #4
 8000f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f62:	4a2b      	ldr	r2, [pc, #172]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f80:	4a23      	ldr	r2, [pc, #140]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa8:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_GPIO_Init+0xe8>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8000fbc:	4815      	ldr	r0, [pc, #84]	; (8001014 <MX_GPIO_Init+0xec>)
 8000fbe:	f007 f99d 	bl	80082fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2164      	movs	r1, #100	; 0x64
 8000fc6:	4814      	ldr	r0, [pc, #80]	; (8001018 <MX_GPIO_Init+0xf0>)
 8000fc8:	f007 f998 	bl	80082fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000fcc:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8000fd0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <MX_GPIO_Init+0xec>)
 8000fe6:	f006 ffd9 	bl	8007f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_GPIO_Init+0xf0>)
 8001002:	f006 ffcb 	bl	8007f9c <HAL_GPIO_Init>

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	58024400 	.word	0x58024400
 8001014:	58020800 	.word	0x58020800
 8001018:	58020400 	.word	0x58020400

0800101c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_I2C1_Init+0x78>)
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <MX_I2C1_Init+0x7c>)
 8001024:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_I2C1_Init+0x78>)
 8001028:	4a1c      	ldr	r2, [pc, #112]	; (800109c <MX_I2C1_Init+0x80>)
 800102a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_I2C1_Init+0x78>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <MX_I2C1_Init+0x78>)
 8001034:	2201      	movs	r2, #1
 8001036:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001038:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_I2C1_Init+0x78>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_I2C1_Init+0x78>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001044:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_I2C1_Init+0x78>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_I2C1_Init+0x78>)
 800104c:	2200      	movs	r2, #0
 800104e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_I2C1_Init+0x78>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001056:	480f      	ldr	r0, [pc, #60]	; (8001094 <MX_I2C1_Init+0x78>)
 8001058:	f007 f96a 	bl	8008330 <HAL_I2C_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001062:	f000 fdeb 	bl	8001c3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	480a      	ldr	r0, [pc, #40]	; (8001094 <MX_I2C1_Init+0x78>)
 800106a:	f007 f9fd 	bl	8008468 <HAL_I2CEx_ConfigAnalogFilter>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001074:	f000 fde2 	bl	8001c3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001078:	2100      	movs	r1, #0
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_I2C1_Init+0x78>)
 800107c:	f007 fa3f 	bl	80084fe <HAL_I2CEx_ConfigDigitalFilter>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001086:	f000 fdd9 	bl	8001c3c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800108a:	2001      	movs	r0, #1
 800108c:	f007 fa84 	bl	8008598 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	24000388 	.word	0x24000388
 8001098:	40005400 	.word	0x40005400
 800109c:	0020081f 	.word	0x0020081f

080010a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b0ba      	sub	sp, #232	; 0xe8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	22c0      	movs	r2, #192	; 0xc0
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f012 fbc3 	bl	801384c <memset>
  if(i2cHandle->Instance==I2C1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a27      	ldr	r2, [pc, #156]	; (8001168 <HAL_I2C_MspInit+0xc8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d146      	bne.n	800115e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d0:	f04f 0208 	mov.w	r2, #8
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4618      	mov	r0, r3
 80010e8:	f008 fadc 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80010f2:	f000 fda3 	bl	8001c3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_I2C_MspInit+0xcc>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <HAL_I2C_MspInit+0xcc>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001114:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001118:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111c:	2312      	movs	r3, #18
 800111e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800112e:	2304      	movs	r3, #4
 8001130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <HAL_I2C_MspInit+0xd0>)
 800113c:	f006 ff2e 	bl	8007f9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800114c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_I2C_MspInit+0xcc>)
 8001152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800115e:	bf00      	nop
 8001160:	37e8      	adds	r7, #232	; 0xe8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40005400 	.word	0x40005400
 800116c:	58024400 	.word	0x58024400
 8001170:	58020400 	.word	0x58020400

08001174 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af02      	add	r7, sp, #8
 800117a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800117c:	2201      	movs	r2, #1
 800117e:	49f2      	ldr	r1, [pc, #968]	; (8001548 <HAL_UART_RxCpltCallback+0x3d4>)
 8001180:	48f2      	ldr	r0, [pc, #968]	; (800154c <HAL_UART_RxCpltCallback+0x3d8>)
 8001182:	f00c ff8d 	bl	800e0a0 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8001186:	4bf0      	ldr	r3, [pc, #960]	; (8001548 <HAL_UART_RxCpltCallback+0x3d4>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2be0      	cmp	r3, #224	; 0xe0
 8001190:	f200 83fc 	bhi.w	800198c <HAL_UART_RxCpltCallback+0x818>
 8001194:	a201      	add	r2, pc, #4	; (adr r2, 800119c <HAL_UART_RxCpltCallback+0x28>)
 8001196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119a:	bf00      	nop
 800119c:	08001535 	.word	0x08001535
 80011a0:	08001579 	.word	0x08001579
 80011a4:	080015e9 	.word	0x080015e9
 80011a8:	08001623 	.word	0x08001623
 80011ac:	0800165b 	.word	0x0800165b
 80011b0:	08001695 	.word	0x08001695
 80011b4:	080016d1 	.word	0x080016d1
 80011b8:	0800170d 	.word	0x0800170d
 80011bc:	08001747 	.word	0x08001747
 80011c0:	0800177b 	.word	0x0800177b
 80011c4:	080017a7 	.word	0x080017a7
 80011c8:	080017d3 	.word	0x080017d3
 80011cc:	080017fd 	.word	0x080017fd
 80011d0:	080018d9 	.word	0x080018d9
 80011d4:	08001941 	.word	0x08001941
 80011d8:	08001969 	.word	0x08001969
 80011dc:	08001521 	.word	0x08001521
 80011e0:	0800155d 	.word	0x0800155d
 80011e4:	080015cb 	.word	0x080015cb
 80011e8:	08001607 	.word	0x08001607
 80011ec:	0800163f 	.word	0x0800163f
 80011f0:	08001677 	.word	0x08001677
 80011f4:	080016b3 	.word	0x080016b3
 80011f8:	080016ef 	.word	0x080016ef
 80011fc:	0800172b 	.word	0x0800172b
 8001200:	08001763 	.word	0x08001763
 8001204:	0800178b 	.word	0x0800178b
 8001208:	080017b7 	.word	0x080017b7
 800120c:	080017e3 	.word	0x080017e3
 8001210:	0800180b 	.word	0x0800180b
 8001214:	08001919 	.word	0x08001919
 8001218:	0800198d 	.word	0x0800198d
 800121c:	0800198d 	.word	0x0800198d
 8001220:	0800198d 	.word	0x0800198d
 8001224:	0800198d 	.word	0x0800198d
 8001228:	0800198d 	.word	0x0800198d
 800122c:	0800198d 	.word	0x0800198d
 8001230:	0800198d 	.word	0x0800198d
 8001234:	0800198d 	.word	0x0800198d
 8001238:	0800198d 	.word	0x0800198d
 800123c:	0800198d 	.word	0x0800198d
 8001240:	0800198d 	.word	0x0800198d
 8001244:	0800198d 	.word	0x0800198d
 8001248:	0800198d 	.word	0x0800198d
 800124c:	0800198d 	.word	0x0800198d
 8001250:	0800198d 	.word	0x0800198d
 8001254:	0800198d 	.word	0x0800198d
 8001258:	0800198d 	.word	0x0800198d
 800125c:	0800198d 	.word	0x0800198d
 8001260:	0800198d 	.word	0x0800198d
 8001264:	0800198d 	.word	0x0800198d
 8001268:	0800198d 	.word	0x0800198d
 800126c:	0800198d 	.word	0x0800198d
 8001270:	0800198d 	.word	0x0800198d
 8001274:	0800198d 	.word	0x0800198d
 8001278:	0800198d 	.word	0x0800198d
 800127c:	0800198d 	.word	0x0800198d
 8001280:	0800198d 	.word	0x0800198d
 8001284:	0800198d 	.word	0x0800198d
 8001288:	0800198d 	.word	0x0800198d
 800128c:	0800198d 	.word	0x0800198d
 8001290:	0800198d 	.word	0x0800198d
 8001294:	0800198d 	.word	0x0800198d
 8001298:	0800198d 	.word	0x0800198d
 800129c:	0800198d 	.word	0x0800198d
 80012a0:	0800198d 	.word	0x0800198d
 80012a4:	0800198d 	.word	0x0800198d
 80012a8:	0800198d 	.word	0x0800198d
 80012ac:	0800198d 	.word	0x0800198d
 80012b0:	0800198d 	.word	0x0800198d
 80012b4:	0800198d 	.word	0x0800198d
 80012b8:	0800198d 	.word	0x0800198d
 80012bc:	0800198d 	.word	0x0800198d
 80012c0:	0800198d 	.word	0x0800198d
 80012c4:	0800198d 	.word	0x0800198d
 80012c8:	0800198d 	.word	0x0800198d
 80012cc:	0800198d 	.word	0x0800198d
 80012d0:	0800198d 	.word	0x0800198d
 80012d4:	0800198d 	.word	0x0800198d
 80012d8:	0800198d 	.word	0x0800198d
 80012dc:	0800198d 	.word	0x0800198d
 80012e0:	0800198d 	.word	0x0800198d
 80012e4:	0800198d 	.word	0x0800198d
 80012e8:	0800198d 	.word	0x0800198d
 80012ec:	0800198d 	.word	0x0800198d
 80012f0:	0800198d 	.word	0x0800198d
 80012f4:	0800198d 	.word	0x0800198d
 80012f8:	0800198d 	.word	0x0800198d
 80012fc:	0800198d 	.word	0x0800198d
 8001300:	0800198d 	.word	0x0800198d
 8001304:	0800198d 	.word	0x0800198d
 8001308:	0800198d 	.word	0x0800198d
 800130c:	0800198d 	.word	0x0800198d
 8001310:	0800198d 	.word	0x0800198d
 8001314:	0800198d 	.word	0x0800198d
 8001318:	0800198d 	.word	0x0800198d
 800131c:	0800198d 	.word	0x0800198d
 8001320:	0800198d 	.word	0x0800198d
 8001324:	0800198d 	.word	0x0800198d
 8001328:	0800198d 	.word	0x0800198d
 800132c:	0800198d 	.word	0x0800198d
 8001330:	0800198d 	.word	0x0800198d
 8001334:	0800198d 	.word	0x0800198d
 8001338:	0800198d 	.word	0x0800198d
 800133c:	0800198d 	.word	0x0800198d
 8001340:	0800198d 	.word	0x0800198d
 8001344:	0800198d 	.word	0x0800198d
 8001348:	0800198d 	.word	0x0800198d
 800134c:	0800198d 	.word	0x0800198d
 8001350:	0800198d 	.word	0x0800198d
 8001354:	0800198d 	.word	0x0800198d
 8001358:	0800198d 	.word	0x0800198d
 800135c:	0800198d 	.word	0x0800198d
 8001360:	0800198d 	.word	0x0800198d
 8001364:	0800198d 	.word	0x0800198d
 8001368:	0800198d 	.word	0x0800198d
 800136c:	0800198d 	.word	0x0800198d
 8001370:	0800198d 	.word	0x0800198d
 8001374:	0800198d 	.word	0x0800198d
 8001378:	0800198d 	.word	0x0800198d
 800137c:	0800198d 	.word	0x0800198d
 8001380:	0800198d 	.word	0x0800198d
 8001384:	0800198d 	.word	0x0800198d
 8001388:	0800198d 	.word	0x0800198d
 800138c:	0800198d 	.word	0x0800198d
 8001390:	0800198d 	.word	0x0800198d
 8001394:	0800198d 	.word	0x0800198d
 8001398:	0800198d 	.word	0x0800198d
 800139c:	0800198d 	.word	0x0800198d
 80013a0:	0800198d 	.word	0x0800198d
 80013a4:	0800198d 	.word	0x0800198d
 80013a8:	0800198d 	.word	0x0800198d
 80013ac:	0800198d 	.word	0x0800198d
 80013b0:	0800198d 	.word	0x0800198d
 80013b4:	0800198d 	.word	0x0800198d
 80013b8:	0800198d 	.word	0x0800198d
 80013bc:	0800198d 	.word	0x0800198d
 80013c0:	0800198d 	.word	0x0800198d
 80013c4:	0800198d 	.word	0x0800198d
 80013c8:	0800198d 	.word	0x0800198d
 80013cc:	0800198d 	.word	0x0800198d
 80013d0:	0800198d 	.word	0x0800198d
 80013d4:	0800198d 	.word	0x0800198d
 80013d8:	0800198d 	.word	0x0800198d
 80013dc:	0800198d 	.word	0x0800198d
 80013e0:	0800198d 	.word	0x0800198d
 80013e4:	0800198d 	.word	0x0800198d
 80013e8:	0800198d 	.word	0x0800198d
 80013ec:	0800198d 	.word	0x0800198d
 80013f0:	0800198d 	.word	0x0800198d
 80013f4:	0800198d 	.word	0x0800198d
 80013f8:	0800198d 	.word	0x0800198d
 80013fc:	0800198d 	.word	0x0800198d
 8001400:	0800198d 	.word	0x0800198d
 8001404:	0800198d 	.word	0x0800198d
 8001408:	0800198d 	.word	0x0800198d
 800140c:	0800198d 	.word	0x0800198d
 8001410:	0800198d 	.word	0x0800198d
 8001414:	0800198d 	.word	0x0800198d
 8001418:	0800198d 	.word	0x0800198d
 800141c:	0800198d 	.word	0x0800198d
 8001420:	0800198d 	.word	0x0800198d
 8001424:	0800198d 	.word	0x0800198d
 8001428:	0800198d 	.word	0x0800198d
 800142c:	0800198d 	.word	0x0800198d
 8001430:	0800198d 	.word	0x0800198d
 8001434:	0800198d 	.word	0x0800198d
 8001438:	0800198d 	.word	0x0800198d
 800143c:	0800198d 	.word	0x0800198d
 8001440:	0800198d 	.word	0x0800198d
 8001444:	0800198d 	.word	0x0800198d
 8001448:	0800198d 	.word	0x0800198d
 800144c:	0800198d 	.word	0x0800198d
 8001450:	0800198d 	.word	0x0800198d
 8001454:	0800198d 	.word	0x0800198d
 8001458:	08001995 	.word	0x08001995
 800145c:	0800198d 	.word	0x0800198d
 8001460:	0800198d 	.word	0x0800198d
 8001464:	0800198d 	.word	0x0800198d
 8001468:	0800198d 	.word	0x0800198d
 800146c:	0800198d 	.word	0x0800198d
 8001470:	0800198d 	.word	0x0800198d
 8001474:	0800198d 	.word	0x0800198d
 8001478:	0800198d 	.word	0x0800198d
 800147c:	0800198d 	.word	0x0800198d
 8001480:	0800198d 	.word	0x0800198d
 8001484:	0800198d 	.word	0x0800198d
 8001488:	0800198d 	.word	0x0800198d
 800148c:	0800198d 	.word	0x0800198d
 8001490:	0800198d 	.word	0x0800198d
 8001494:	0800198d 	.word	0x0800198d
 8001498:	08001995 	.word	0x08001995
 800149c:	0800198d 	.word	0x0800198d
 80014a0:	0800198d 	.word	0x0800198d
 80014a4:	0800198d 	.word	0x0800198d
 80014a8:	0800198d 	.word	0x0800198d
 80014ac:	0800198d 	.word	0x0800198d
 80014b0:	0800198d 	.word	0x0800198d
 80014b4:	0800198d 	.word	0x0800198d
 80014b8:	0800198d 	.word	0x0800198d
 80014bc:	0800198d 	.word	0x0800198d
 80014c0:	0800198d 	.word	0x0800198d
 80014c4:	0800198d 	.word	0x0800198d
 80014c8:	0800198d 	.word	0x0800198d
 80014cc:	0800198d 	.word	0x0800198d
 80014d0:	0800198d 	.word	0x0800198d
 80014d4:	0800198d 	.word	0x0800198d
 80014d8:	08001995 	.word	0x08001995
 80014dc:	08001985 	.word	0x08001985
 80014e0:	0800198d 	.word	0x0800198d
 80014e4:	0800198d 	.word	0x0800198d
 80014e8:	0800198d 	.word	0x0800198d
 80014ec:	0800198d 	.word	0x0800198d
 80014f0:	0800198d 	.word	0x0800198d
 80014f4:	0800198d 	.word	0x0800198d
 80014f8:	0800198d 	.word	0x0800198d
 80014fc:	0800198d 	.word	0x0800198d
 8001500:	0800198d 	.word	0x0800198d
 8001504:	0800198d 	.word	0x0800198d
 8001508:	0800198d 	.word	0x0800198d
 800150c:	0800198d 	.word	0x0800198d
 8001510:	0800198d 	.word	0x0800198d
 8001514:	0800198d 	.word	0x0800198d
 8001518:	0800198d 	.word	0x0800198d
 800151c:	0800197d 	.word	0x0800197d
	case 0x10: {
		printf("SDN1 ON\n");
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <HAL_UART_RxCpltCallback+0x3dc>)
 8001522:	f012 fa09 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_UART_RxCpltCallback+0x3e0>)
 8001528:	2104      	movs	r1, #4
 800152a:	2201      	movs	r2, #1
 800152c:	4618      	mov	r0, r3
 800152e:	f006 fee5 	bl	80082fc <HAL_GPIO_WritePin>
		break;
 8001532:	e238      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8001534:	4808      	ldr	r0, [pc, #32]	; (8001558 <HAL_UART_RxCpltCallback+0x3e4>)
 8001536:	f012 f9ff 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_UART_RxCpltCallback+0x3e0>)
 800153c:	2104      	movs	r1, #4
 800153e:	2200      	movs	r2, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f006 fedb 	bl	80082fc <HAL_GPIO_WritePin>
		break;
 8001546:	e22e      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
 8001548:	240003e4 	.word	0x240003e4
 800154c:	240006cc 	.word	0x240006cc
 8001550:	080142f8 	.word	0x080142f8
 8001554:	58020400 	.word	0x58020400
 8001558:	08014300 	.word	0x08014300
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 800155c:	48bb      	ldr	r0, [pc, #748]	; (800184c <HAL_UART_RxCpltCallback+0x6d8>)
 800155e:	f012 f9eb 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8001562:	4bbb      	ldr	r3, [pc, #748]	; (8001850 <HAL_UART_RxCpltCallback+0x6dc>)
 8001564:	2120      	movs	r1, #32
 8001566:	2201      	movs	r2, #1
 8001568:	4618      	mov	r0, r3
 800156a:	f006 fec7 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 800156e:	2101      	movs	r1, #1
 8001570:	2008      	movs	r0, #8
 8001572:	f001 fd15 	bl	8002fa0 <set_rail_monitor_enable>
		break;
 8001576:	e216      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8001578:	48b6      	ldr	r0, [pc, #728]	; (8001854 <HAL_UART_RxCpltCallback+0x6e0>)
 800157a:	f012 f9dd 	bl	8013938 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 800157e:	2308      	movs	r3, #8
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e00f      	b.n	80015a4 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001584:	4ab4      	ldr	r2, [pc, #720]	; (8001858 <HAL_UART_RxCpltCallback+0x6e4>)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800158c:	4ab2      	ldr	r2, [pc, #712]	; (8001858 <HAL_UART_RxCpltCallback+0x6e4>)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	889b      	ldrh	r3, [r3, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	4619      	mov	r1, r3
 800159a:	f006 feaf 	bl	80082fc <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	dcec      	bgt.n	8001584 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80015aa:	2310      	movs	r3, #16
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	e008      	b.n	80015c2 <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 fcf2 	bl	8002fa0 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	3b01      	subs	r3, #1
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	2b07      	cmp	r3, #7
 80015c6:	dcf3      	bgt.n	80015b0 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 80015c8:	e1ed      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80015ca:	48a4      	ldr	r0, [pc, #656]	; (800185c <HAL_UART_RxCpltCallback+0x6e8>)
 80015cc:	f012 f9b4 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80015d0:	4ba3      	ldr	r3, [pc, #652]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 80015d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d6:	2201      	movs	r2, #1
 80015d8:	4618      	mov	r0, r3
 80015da:	f006 fe8f 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80015de:	2101      	movs	r1, #1
 80015e0:	2009      	movs	r0, #9
 80015e2:	f001 fcdd 	bl	8002fa0 <set_rail_monitor_enable>

		break;
 80015e6:	e1de      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80015e8:	489e      	ldr	r0, [pc, #632]	; (8001864 <HAL_UART_RxCpltCallback+0x6f0>)
 80015ea:	f012 f9a5 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80015ee:	4b9c      	ldr	r3, [pc, #624]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 80015f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f4:	2200      	movs	r2, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f006 fe80 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80015fc:	2100      	movs	r1, #0
 80015fe:	2009      	movs	r0, #9
 8001600:	f001 fcce 	bl	8002fa0 <set_rail_monitor_enable>
		break;
 8001604:	e1cf      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8001606:	4898      	ldr	r0, [pc, #608]	; (8001868 <HAL_UART_RxCpltCallback+0x6f4>)
 8001608:	f012 f996 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 800160c:	4b94      	ldr	r3, [pc, #592]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	2201      	movs	r2, #1
 8001612:	4618      	mov	r0, r3
 8001614:	f006 fe72 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8001618:	2101      	movs	r1, #1
 800161a:	200a      	movs	r0, #10
 800161c:	f001 fcc0 	bl	8002fa0 <set_rail_monitor_enable>

		break;
 8001620:	e1c1      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001622:	4892      	ldr	r0, [pc, #584]	; (800186c <HAL_UART_RxCpltCallback+0x6f8>)
 8001624:	f012 f988 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8001628:	4b8d      	ldr	r3, [pc, #564]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	2200      	movs	r2, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f006 fe64 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001634:	2100      	movs	r1, #0
 8001636:	200a      	movs	r0, #10
 8001638:	f001 fcb2 	bl	8002fa0 <set_rail_monitor_enable>
		break;
 800163c:	e1b3      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 800163e:	488c      	ldr	r0, [pc, #560]	; (8001870 <HAL_UART_RxCpltCallback+0x6fc>)
 8001640:	f012 f97a 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001644:	4b86      	ldr	r3, [pc, #536]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 8001646:	2140      	movs	r1, #64	; 0x40
 8001648:	2201      	movs	r2, #1
 800164a:	4618      	mov	r0, r3
 800164c:	f006 fe56 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001650:	2101      	movs	r1, #1
 8001652:	200b      	movs	r0, #11
 8001654:	f001 fca4 	bl	8002fa0 <set_rail_monitor_enable>

		break;
 8001658:	e1a5      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 800165a:	4886      	ldr	r0, [pc, #536]	; (8001874 <HAL_UART_RxCpltCallback+0x700>)
 800165c:	f012 f96c 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001660:	4b7f      	ldr	r3, [pc, #508]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 8001662:	2140      	movs	r1, #64	; 0x40
 8001664:	2200      	movs	r2, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f006 fe48 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 800166c:	2100      	movs	r1, #0
 800166e:	200b      	movs	r0, #11
 8001670:	f001 fc96 	bl	8002fa0 <set_rail_monitor_enable>
		break;
 8001674:	e197      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001676:	4880      	ldr	r0, [pc, #512]	; (8001878 <HAL_UART_RxCpltCallback+0x704>)
 8001678:	f012 f95e 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 800167c:	4b78      	ldr	r3, [pc, #480]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 800167e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001682:	2201      	movs	r2, #1
 8001684:	4618      	mov	r0, r3
 8001686:	f006 fe39 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 800168a:	2101      	movs	r1, #1
 800168c:	200c      	movs	r0, #12
 800168e:	f001 fc87 	bl	8002fa0 <set_rail_monitor_enable>

		break;
 8001692:	e188      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001694:	4879      	ldr	r0, [pc, #484]	; (800187c <HAL_UART_RxCpltCallback+0x708>)
 8001696:	f012 f94f 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 800169a:	4b71      	ldr	r3, [pc, #452]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	2200      	movs	r2, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f006 fe2a 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 80016a8:	2100      	movs	r1, #0
 80016aa:	200c      	movs	r0, #12
 80016ac:	f001 fc78 	bl	8002fa0 <set_rail_monitor_enable>
		break;
 80016b0:	e179      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 80016b2:	4873      	ldr	r0, [pc, #460]	; (8001880 <HAL_UART_RxCpltCallback+0x70c>)
 80016b4:	f012 f940 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80016b8:	4b69      	ldr	r3, [pc, #420]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 80016ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016be:	2201      	movs	r2, #1
 80016c0:	4618      	mov	r0, r3
 80016c2:	f006 fe1b 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 80016c6:	2101      	movs	r1, #1
 80016c8:	200d      	movs	r0, #13
 80016ca:	f001 fc69 	bl	8002fa0 <set_rail_monitor_enable>

		break;
 80016ce:	e16a      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 80016d0:	486c      	ldr	r0, [pc, #432]	; (8001884 <HAL_UART_RxCpltCallback+0x710>)
 80016d2:	f012 f931 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 80016d6:	4b62      	ldr	r3, [pc, #392]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 80016d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016dc:	2200      	movs	r2, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f006 fe0c 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 80016e4:	2100      	movs	r1, #0
 80016e6:	200d      	movs	r0, #13
 80016e8:	f001 fc5a 	bl	8002fa0 <set_rail_monitor_enable>
		break;
 80016ec:	e15b      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 80016ee:	4866      	ldr	r0, [pc, #408]	; (8001888 <HAL_UART_RxCpltCallback+0x714>)
 80016f0:	f012 f922 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 80016f4:	4b5a      	ldr	r3, [pc, #360]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 80016f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fa:	2201      	movs	r2, #1
 80016fc:	4618      	mov	r0, r3
 80016fe:	f006 fdfd 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8001702:	2101      	movs	r1, #1
 8001704:	200f      	movs	r0, #15
 8001706:	f001 fc4b 	bl	8002fa0 <set_rail_monitor_enable>

		break;
 800170a:	e14c      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 800170c:	485f      	ldr	r0, [pc, #380]	; (800188c <HAL_UART_RxCpltCallback+0x718>)
 800170e:	f012 f913 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001712:	4b53      	ldr	r3, [pc, #332]	; (8001860 <HAL_UART_RxCpltCallback+0x6ec>)
 8001714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001718:	2200      	movs	r2, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f006 fdee 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001720:	2100      	movs	r1, #0
 8001722:	200f      	movs	r0, #15
 8001724:	f001 fc3c 	bl	8002fa0 <set_rail_monitor_enable>
		break;
 8001728:	e13d      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 800172a:	4859      	ldr	r0, [pc, #356]	; (8001890 <HAL_UART_RxCpltCallback+0x71c>)
 800172c:	f012 f904 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001730:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_UART_RxCpltCallback+0x6dc>)
 8001732:	2140      	movs	r1, #64	; 0x40
 8001734:	2201      	movs	r2, #1
 8001736:	4618      	mov	r0, r3
 8001738:	f006 fde0 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 800173c:	2101      	movs	r1, #1
 800173e:	2010      	movs	r0, #16
 8001740:	f001 fc2e 	bl	8002fa0 <set_rail_monitor_enable>

		break;
 8001744:	e12f      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001746:	4853      	ldr	r0, [pc, #332]	; (8001894 <HAL_UART_RxCpltCallback+0x720>)
 8001748:	f012 f8f6 	bl	8013938 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 800174c:	4b40      	ldr	r3, [pc, #256]	; (8001850 <HAL_UART_RxCpltCallback+0x6dc>)
 800174e:	2140      	movs	r1, #64	; 0x40
 8001750:	2200      	movs	r2, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f006 fdd2 	bl	80082fc <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001758:	2100      	movs	r1, #0
 800175a:	2010      	movs	r0, #16
 800175c:	f001 fc20 	bl	8002fa0 <set_rail_monitor_enable>
		break;
 8001760:	e121      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001762:	484d      	ldr	r0, [pc, #308]	; (8001898 <HAL_UART_RxCpltCallback+0x724>)
 8001764:	f012 f8e8 	bl	8013938 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001768:	2300      	movs	r3, #0
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2320      	movs	r3, #32
 800176e:	4a4b      	ldr	r2, [pc, #300]	; (800189c <HAL_UART_RxCpltCallback+0x728>)
 8001770:	2100      	movs	r1, #0
 8001772:	484b      	ldr	r0, [pc, #300]	; (80018a0 <HAL_UART_RxCpltCallback+0x72c>)
 8001774:	f003 fa4a 	bl	8004c0c <HAL_DAC_Start_DMA>
		break;
 8001778:	e115      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 800177a:	484a      	ldr	r0, [pc, #296]	; (80018a4 <HAL_UART_RxCpltCallback+0x730>)
 800177c:	f012 f8dc 	bl	8013938 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001780:	2100      	movs	r1, #0
 8001782:	4847      	ldr	r0, [pc, #284]	; (80018a0 <HAL_UART_RxCpltCallback+0x72c>)
 8001784:	f003 fb02 	bl	8004d8c <HAL_DAC_Stop_DMA>
		break;
 8001788:	e10d      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 800178a:	4847      	ldr	r0, [pc, #284]	; (80018a8 <HAL_UART_RxCpltCallback+0x734>)
 800178c:	f012 f8d4 	bl	8013938 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001790:	210c      	movs	r1, #12
 8001792:	4846      	ldr	r0, [pc, #280]	; (80018ac <HAL_UART_RxCpltCallback+0x738>)
 8001794:	f00b f8f0 	bl	800c978 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8001798:	4b45      	ldr	r3, [pc, #276]	; (80018b0 <HAL_UART_RxCpltCallback+0x73c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2102      	movs	r1, #2
 800179e:	4618      	mov	r0, r3
 80017a0:	f00f f948 	bl	8010a34 <osEventFlagsSet>
		break;
 80017a4:	e0ff      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 80017a6:	4843      	ldr	r0, [pc, #268]	; (80018b4 <HAL_UART_RxCpltCallback+0x740>)
 80017a8:	f012 f8c6 	bl	8013938 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 80017ac:	210c      	movs	r1, #12
 80017ae:	483f      	ldr	r0, [pc, #252]	; (80018ac <HAL_UART_RxCpltCallback+0x738>)
 80017b0:	f00b fa3c 	bl	800cc2c <HAL_TIM_OC_Stop_IT>
		break;
 80017b4:	e0f7      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x1B: {
		printf("PMT ON\n");
 80017b6:	4840      	ldr	r0, [pc, #256]	; (80018b8 <HAL_UART_RxCpltCallback+0x744>)
 80017b8:	f012 f8be 	bl	8013938 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 80017bc:	2100      	movs	r1, #0
 80017be:	483f      	ldr	r0, [pc, #252]	; (80018bc <HAL_UART_RxCpltCallback+0x748>)
 80017c0:	f00b f8da 	bl	800c978 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80017c4:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <HAL_UART_RxCpltCallback+0x73c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00f f932 	bl	8010a34 <osEventFlagsSet>
		break;
 80017d0:	e0e9      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 80017d2:	483b      	ldr	r0, [pc, #236]	; (80018c0 <HAL_UART_RxCpltCallback+0x74c>)
 80017d4:	f012 f8b0 	bl	8013938 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80017d8:	2100      	movs	r1, #0
 80017da:	4838      	ldr	r0, [pc, #224]	; (80018bc <HAL_UART_RxCpltCallback+0x748>)
 80017dc:	f00b fa26 	bl	800cc2c <HAL_TIM_OC_Stop_IT>
		break;
 80017e0:	e0e1      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x1C: {
		printf("HK ON \n");
 80017e2:	4838      	ldr	r0, [pc, #224]	; (80018c4 <HAL_UART_RxCpltCallback+0x750>)
 80017e4:	f012 f8a8 	bl	8013938 <puts>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_UART_RxCpltCallback+0x73c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2104      	movs	r1, #4
 80017ee:	4618      	mov	r0, r3
 80017f0:	f00f f920 	bl	8010a34 <osEventFlagsSet>
		HK_ENABLED = 1;
 80017f4:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <HAL_UART_RxCpltCallback+0x754>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
		break;
 80017fa:	e0d4      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x0C: {
		printf("HK OFF\n");
 80017fc:	4833      	ldr	r0, [pc, #204]	; (80018cc <HAL_UART_RxCpltCallback+0x758>)
 80017fe:	f012 f89b 	bl	8013938 <puts>
		HK_ENABLED = 0;
 8001802:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <HAL_UART_RxCpltCallback+0x754>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
		break;
 8001808:	e0cd      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0x1D: {
		printf("Step Up\n");
 800180a:	4831      	ldr	r0, [pc, #196]	; (80018d0 <HAL_UART_RxCpltCallback+0x75c>)
 800180c:	f012 f894 	bl	8013938 <puts>
		if (step < 17) {
 8001810:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <HAL_UART_RxCpltCallback+0x760>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b10      	cmp	r3, #16
 8001818:	f200 80be 	bhi.w	8001998 <HAL_UART_RxCpltCallback+0x824>
			step += 2;
 800181c:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <HAL_UART_RxCpltCallback+0x760>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	3302      	adds	r3, #2
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_UART_RxCpltCallback+0x760>)
 8001828:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_UART_RxCpltCallback+0x760>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_UART_RxCpltCallback+0x728>)
 8001834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	4818      	ldr	r0, [pc, #96]	; (80018a0 <HAL_UART_RxCpltCallback+0x72c>)
 800183e:	f003 fb48 	bl	8004ed2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001842:	2100      	movs	r1, #0
 8001844:	4816      	ldr	r0, [pc, #88]	; (80018a0 <HAL_UART_RxCpltCallback+0x72c>)
 8001846:	f003 f989 	bl	8004b5c <HAL_DAC_Start>
		}
		break;
 800184a:	e0a5      	b.n	8001998 <HAL_UART_RxCpltCallback+0x824>
 800184c:	0801430c 	.word	0x0801430c
 8001850:	58020400 	.word	0x58020400
 8001854:	08014318 	.word	0x08014318
 8001858:	08014618 	.word	0x08014618
 800185c:	08014324 	.word	0x08014324
 8001860:	58020800 	.word	0x58020800
 8001864:	08014330 	.word	0x08014330
 8001868:	08014340 	.word	0x08014340
 800186c:	0801434c 	.word	0x0801434c
 8001870:	08014358 	.word	0x08014358
 8001874:	08014364 	.word	0x08014364
 8001878:	08014374 	.word	0x08014374
 800187c:	08014380 	.word	0x08014380
 8001880:	0801438c 	.word	0x0801438c
 8001884:	08014398 	.word	0x08014398
 8001888:	080143a4 	.word	0x080143a4
 800188c:	080143b4 	.word	0x080143b4
 8001890:	080143c4 	.word	0x080143c4
 8001894:	080143d0 	.word	0x080143d0
 8001898:	080143e0 	.word	0x080143e0
 800189c:	24000000 	.word	0x24000000
 80018a0:	240002d4 	.word	0x240002d4
 80018a4:	080143f0 	.word	0x080143f0
 80018a8:	08014400 	.word	0x08014400
 80018ac:	24000634 	.word	0x24000634
 80018b0:	240003dc 	.word	0x240003dc
 80018b4:	08014408 	.word	0x08014408
 80018b8:	08014414 	.word	0x08014414
 80018bc:	240005e8 	.word	0x240005e8
 80018c0:	0801441c 	.word	0x0801441c
 80018c4:	08014424 	.word	0x08014424
 80018c8:	24000424 	.word	0x24000424
 80018cc:	0801442c 	.word	0x0801442c
 80018d0:	08014434 	.word	0x08014434
 80018d4:	24000080 	.word	0x24000080
	}
	case 0x0D: {
		printf("Step Down\n");
 80018d8:	4835      	ldr	r0, [pc, #212]	; (80019b0 <HAL_UART_RxCpltCallback+0x83c>)
 80018da:	f012 f82d 	bl	8013938 <puts>
		if (step > 3) {
 80018de:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <HAL_UART_RxCpltCallback+0x840>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d959      	bls.n	800199c <HAL_UART_RxCpltCallback+0x828>
			step -= 2;
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_UART_RxCpltCallback+0x840>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	3b02      	subs	r3, #2
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <HAL_UART_RxCpltCallback+0x840>)
 80018f4:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <HAL_UART_RxCpltCallback+0x840>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b2e      	ldr	r3, [pc, #184]	; (80019b8 <HAL_UART_RxCpltCallback+0x844>)
 8001900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	482c      	ldr	r0, [pc, #176]	; (80019bc <HAL_UART_RxCpltCallback+0x848>)
 800190a:	f003 fae2 	bl	8004ed2 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800190e:	2100      	movs	r1, #0
 8001910:	482a      	ldr	r0, [pc, #168]	; (80019bc <HAL_UART_RxCpltCallback+0x848>)
 8001912:	f003 f923 	bl	8004b5c <HAL_DAC_Start>
		}
		break;
 8001916:	e041      	b.n	800199c <HAL_UART_RxCpltCallback+0x828>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001918:	4829      	ldr	r0, [pc, #164]	; (80019c0 <HAL_UART_RxCpltCallback+0x84c>)
 800191a:	f012 f80d 	bl	8013938 <puts>
		if (cadence <= 50000) {
 800191e:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <HAL_UART_RxCpltCallback+0x850>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001926:	4293      	cmp	r3, r2
 8001928:	d83a      	bhi.n	80019a0 <HAL_UART_RxCpltCallback+0x82c>
			cadence *= 2;
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_UART_RxCpltCallback+0x850>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4a24      	ldr	r2, [pc, #144]	; (80019c4 <HAL_UART_RxCpltCallback+0x850>)
 8001932:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <HAL_UART_RxCpltCallback+0x850>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 800193e:	e02f      	b.n	80019a0 <HAL_UART_RxCpltCallback+0x82c>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001940:	4821      	ldr	r0, [pc, #132]	; (80019c8 <HAL_UART_RxCpltCallback+0x854>)
 8001942:	f011 fff9 	bl	8013938 <puts>
		if (cadence >= 6250) {
 8001946:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <HAL_UART_RxCpltCallback+0x850>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f641 0269 	movw	r2, #6249	; 0x1869
 800194e:	4293      	cmp	r3, r2
 8001950:	d928      	bls.n	80019a4 <HAL_UART_RxCpltCallback+0x830>
			cadence /= 2;
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <HAL_UART_RxCpltCallback+0x850>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <HAL_UART_RxCpltCallback+0x850>)
 800195a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800195c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_UART_RxCpltCallback+0x850>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001966:	e01d      	b.n	80019a4 <HAL_UART_RxCpltCallback+0x830>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001968:	4818      	ldr	r0, [pc, #96]	; (80019cc <HAL_UART_RxCpltCallback+0x858>)
 800196a:	f011 ffe5 	bl	8013938 <puts>
		osEventFlagsSet(event_flags, STOP_FLAG);
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_UART_RxCpltCallback+0x85c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2116      	movs	r1, #22
 8001974:	4618      	mov	r0, r3
 8001976:	f00f f85d 	bl	8010a34 <osEventFlagsSet>
		break;
 800197a:	e014      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0xE0: {
		printf("Auto Init\n");
 800197c:	4815      	ldr	r0, [pc, #84]	; (80019d4 <HAL_UART_RxCpltCallback+0x860>)
 800197e:	f011 ffdb 	bl	8013938 <puts>
		// TODO: set a flag to start it
		break;
 8001982:	e010      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001984:	4814      	ldr	r0, [pc, #80]	; (80019d8 <HAL_UART_RxCpltCallback+0x864>)
 8001986:	f011 ffd7 	bl	8013938 <puts>
		// TODO: set a flag to start it
		break;
 800198a:	e00c      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
	case 0xCF: {
		// TODO: set a flag to start idle mode
		break;
	}
	default: {
		printf("Unknown Command\n");
 800198c:	4813      	ldr	r0, [pc, #76]	; (80019dc <HAL_UART_RxCpltCallback+0x868>)
 800198e:	f011 ffd3 	bl	8013938 <puts>
		break;
 8001992:	e008      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
		break;
 8001994:	bf00      	nop
 8001996:	e006      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
		break;
 8001998:	bf00      	nop
 800199a:	e004      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
		break;
 800199c:	bf00      	nop
 800199e:	e002      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
		break;
 80019a0:	bf00      	nop
 80019a2:	e000      	b.n	80019a6 <HAL_UART_RxCpltCallback+0x832>
		break;
 80019a4:	bf00      	nop
	}
	}
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	0801443c 	.word	0x0801443c
 80019b4:	24000080 	.word	0x24000080
 80019b8:	24000000 	.word	0x24000000
 80019bc:	240002d4 	.word	0x240002d4
 80019c0:	08014448 	.word	0x08014448
 80019c4:	24000084 	.word	0x24000084
 80019c8:	08014454 	.word	0x08014454
 80019cc:	08014460 	.word	0x08014460
 80019d0:	240003dc 	.word	0x240003dc
 80019d4:	08014470 	.word	0x08014470
 80019d8:	0801447c 	.word	0x0801447c
 80019dc:	08014488 	.word	0x08014488

080019e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e4:	f001 fb26 	bl	8003034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e8:	f000 f826 	bl	8001a38 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019ec:	f000 f8a4 	bl	8001b38 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f0:	f7ff fa9a 	bl	8000f28 <MX_GPIO_Init>
  MX_DMA_Init();
 80019f4:	f7ff f978 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 80019f8:	f000 fef8 	bl	80027ec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80019fc:	f001 f824 	bl	8002a48 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001a00:	f7ff fb0c 	bl	800101c <MX_I2C1_Init>
  MX_SPI2_Init();
 8001a04:	f000 fa4a 	bl	8001e9c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001a08:	f000 fe7a 	bl	8002700 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001a0c:	f000 fdca 	bl	80025a4 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001a10:	f7fe ff0a 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001a14:	f7fe fde6 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001a18:	f7ff f8b2 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001a1c:	f000 f9e6 	bl	8001dec <MX_SPI1_Init>
  MX_RTC_Init();
 8001a20:	f000 f912 	bl	8001c48 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001a24:	f000 f8b8 	bl	8001b98 <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001a28:	f00e fece 	bl	80107c8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001a2c:	f7ff f99c 	bl	8000d68 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a30:	f00e feee 	bl	8010810 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001a34:	e7fe      	b.n	8001a34 <main+0x54>
	...

08001a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b09c      	sub	sp, #112	; 0x70
 8001a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a42:	224c      	movs	r2, #76	; 0x4c
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f011 ff00 	bl	801384c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2220      	movs	r2, #32
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f011 fefa 	bl	801384c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a58:	2002      	movs	r0, #2
 8001a5a:	f006 fdc1 	bl	80085e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <SystemClock_Config+0xf8>)
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	4a32      	ldr	r2, [pc, #200]	; (8001b30 <SystemClock_Config+0xf8>)
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001a6e:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <SystemClock_Config+0xf8>)
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <SystemClock_Config+0xfc>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a80:	4a2c      	ldr	r2, [pc, #176]	; (8001b34 <SystemClock_Config+0xfc>)
 8001a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <SystemClock_Config+0xfc>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a94:	bf00      	nop
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <SystemClock_Config+0xfc>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aa2:	d1f8      	bne.n	8001a96 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001aae:	2309      	movs	r3, #9
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab2:	2340      	movs	r3, #64	; 0x40
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aba:	2302      	movs	r3, #2
 8001abc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001aca:	2304      	movs	r3, #4
 8001acc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001ad2:	2308      	movs	r3, #8
 8001ad4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f006 fdb6 	bl	8008654 <HAL_RCC_OscConfig>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001aee:	f000 f8a5 	bl	8001c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af2:	233f      	movs	r3, #63	; 0x3f
 8001af4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001af6:	2303      	movs	r3, #3
 8001af8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2101      	movs	r1, #1
 8001b16:	4618      	mov	r0, r3
 8001b18:	f007 f9f6 	bl	8008f08 <HAL_RCC_ClockConfig>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001b22:	f000 f88b 	bl	8001c3c <Error_Handler>
  }
}
 8001b26:	bf00      	nop
 8001b28:	3770      	adds	r7, #112	; 0x70
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	58000400 	.word	0x58000400
 8001b34:	58024800 	.word	0x58024800

08001b38 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b0b0      	sub	sp, #192	; 0xc0
 8001b3c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b3e:	463b      	mov	r3, r7
 8001b40:	22c0      	movs	r2, #192	; 0xc0
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f011 fe81 	bl	801384c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b4a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b56:	2304      	movs	r3, #4
 8001b58:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001b5e:	2308      	movs	r3, #8
 8001b60:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001b62:	2304      	movs	r3, #4
 8001b64:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b66:	2302      	movs	r3, #2
 8001b68:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f007 fd90 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001b8a:	f000 f857 	bl	8001c3c <Error_Handler>
  }
}
 8001b8e:	bf00      	nop
 8001b90:	37c0      	adds	r7, #192	; 0xc0
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	event_flags = osEventFlagsNew(NULL);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f00e ff0a 	bl	80109b6 <osEventFlagsNew>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4a17      	ldr	r2, [pc, #92]	; (8001c04 <system_setup+0x6c>)
 8001ba6:	6013      	str	r3, [r2, #0]
    if (event_flags == NULL) {
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <system_setup+0x6c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d100      	bne.n	8001bb2 <system_setup+0x1a>
        while (1);
 8001bb0:	e7fe      	b.n	8001bb0 <system_setup+0x18>
    }

	// ---- 2 ---- //
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_SIZE, sizeof(packet_t), NULL);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2108      	movs	r1, #8
 8001bb6:	2080      	movs	r0, #128	; 0x80
 8001bb8:	f00e ff80 	bl	8010abc <osMessageQueueNew>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <system_setup+0x70>)
 8001bc0:	6013      	str	r3, [r2, #0]
	if (mid_MsgQueue == NULL) {
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <system_setup+0x70>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d100      	bne.n	8001bcc <system_setup+0x34>
		while (1);
 8001bca:	e7fe      	b.n	8001bca <system_setup+0x32>
	}

	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8001bcc:	f001 f82a 	bl	8002c24 <voltage_monitor_init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d100      	bne.n	8001bd8 <system_setup+0x40>
		while (1);
 8001bd6:	e7fe      	b.n	8001bd6 <system_setup+0x3e>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001bd8:	2100      	movs	r1, #0
 8001bda:	480c      	ldr	r0, [pc, #48]	; (8001c0c <system_setup+0x74>)
 8001bdc:	f00a fecc 	bl	800c978 <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8001be0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001be4:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 8001bea:	f000 f8bf 	bl	8001d6c <init_adc_dma>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <system_setup+0x5e>
		while (1);
 8001bf4:	e7fe      	b.n	8001bf4 <system_setup+0x5c>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4905      	ldr	r1, [pc, #20]	; (8001c10 <system_setup+0x78>)
 8001bfa:	4806      	ldr	r0, [pc, #24]	; (8001c14 <system_setup+0x7c>)
 8001bfc:	f00c fa50 	bl	800e0a0 <HAL_UART_Receive_IT>

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	240003dc 	.word	0x240003dc
 8001c08:	240003e0 	.word	0x240003e0
 8001c0c:	24000680 	.word	0x24000680
 8001c10:	240003e4 	.word	0x240003e4
 8001c14:	240006cc 	.word	0x240006cc

08001c18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c2a:	f001 fa3f 	bl	80030ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40001000 	.word	0x40001000

08001c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c40:	b672      	cpsid	i
}
 8001c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c44:	e7fe      	b.n	8001c44 <Error_Handler+0x8>
	...

08001c48 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c60:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <MX_RTC_Init+0xb4>)
 8001c62:	4a27      	ldr	r2, [pc, #156]	; (8001d00 <MX_RTC_Init+0xb8>)
 8001c64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <MX_RTC_Init+0xb4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8001c6c:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <MX_RTC_Init+0xb4>)
 8001c6e:	2263      	movs	r2, #99	; 0x63
 8001c70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8001c72:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <MX_RTC_Init+0xb4>)
 8001c74:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c78:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <MX_RTC_Init+0xb4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c80:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <MX_RTC_Init+0xb4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c86:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <MX_RTC_Init+0xb4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <MX_RTC_Init+0xb4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c92:	481a      	ldr	r0, [pc, #104]	; (8001cfc <MX_RTC_Init+0xb4>)
 8001c94:	f00a fa04 	bl	800c0a0 <HAL_RTC_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001c9e:	f7ff ffcd 	bl	8001c3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480f      	ldr	r0, [pc, #60]	; (8001cfc <MX_RTC_Init+0xb4>)
 8001cbe:	f00a fa71 	bl	800c1a4 <HAL_RTC_SetTime>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001cc8:	f7ff ffb8 	bl	8001c3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cdc:	463b      	mov	r3, r7
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4806      	ldr	r0, [pc, #24]	; (8001cfc <MX_RTC_Init+0xb4>)
 8001ce4:	f00a fafc 	bl	800c2e0 <HAL_RTC_SetDate>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001cee:	f7ff ffa5 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	24000428 	.word	0x24000428
 8001d00:	58004000 	.word	0x58004000

08001d04 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b0b2      	sub	sp, #200	; 0xc8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d0c:	f107 0308 	add.w	r3, r7, #8
 8001d10:	22c0      	movs	r2, #192	; 0xc0
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f011 fd99 	bl	801384c <memset>
  if(rtcHandle->Instance==RTC)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <HAL_RTC_MspInit+0x5c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d118      	bne.n	8001d56 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_RTC_MspInit+0x60>)
 8001d32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f007 fcb2 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8001d46:	f7ff ff79 	bl	8001c3c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <HAL_RTC_MspInit+0x64>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <HAL_RTC_MspInit+0x64>)
 8001d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d54:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d56:	bf00      	nop
 8001d58:	37c8      	adds	r7, #200	; 0xc8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	58004000 	.word	0x58004000
 8001d64:	00019300 	.word	0x00019300
 8001d68:	58024400 	.word	0x58024400

08001d6c <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001d76:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d7e:	4817      	ldr	r0, [pc, #92]	; (8001ddc <init_adc_dma+0x70>)
 8001d80:	f002 fca8 	bl	80046d4 <HAL_ADCEx_Calibration_Start>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8001d8a:	f7ff ff57 	bl	8001c3c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001d8e:	220b      	movs	r2, #11
 8001d90:	4913      	ldr	r1, [pc, #76]	; (8001de0 <init_adc_dma+0x74>)
 8001d92:	4812      	ldr	r0, [pc, #72]	; (8001ddc <init_adc_dma+0x70>)
 8001d94:	f001 fd7c 	bl	8003890 <HAL_ADC_Start_DMA>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001d9e:	f7ff ff4d 	bl	8001c3c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001da2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001da6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001daa:	480e      	ldr	r0, [pc, #56]	; (8001de4 <init_adc_dma+0x78>)
 8001dac:	f002 fc92 	bl	80046d4 <HAL_ADCEx_Calibration_Start>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8001db6:	f7ff ff41 	bl	8001c3c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8001dba:	2204      	movs	r2, #4
 8001dbc:	490a      	ldr	r1, [pc, #40]	; (8001de8 <init_adc_dma+0x7c>)
 8001dbe:	4809      	ldr	r0, [pc, #36]	; (8001de4 <init_adc_dma+0x78>)
 8001dc0:	f001 fd66 	bl	8003890 <HAL_ADC_Start_DMA>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001dca:	f7ff ff37 	bl	8001c3c <Error_Handler>
	}
	status = 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	71fb      	strb	r3, [r7, #7]

	return status;
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2400011c 	.word	0x2400011c
 8001de0:	24000460 	.word	0x24000460
 8001de4:	24000180 	.word	0x24000180
 8001de8:	24000480 	.word	0x24000480

08001dec <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001df2:	4a29      	ldr	r2, [pc, #164]	; (8001e98 <MX_SPI1_Init+0xac>)
 8001df4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001df6:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001df8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001dfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e00:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e04:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001e06:	4b23      	ldr	r3, [pc, #140]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e08:	220f      	movs	r2, #15
 8001e0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e1a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e22:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001e26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e28:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e34:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001e3a:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e46:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_SPI1_Init+0xa8>)
 8001e80:	f00a fb6c 	bl	800c55c <HAL_SPI_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001e8a:	f7ff fed7 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	24000488 	.word	0x24000488
 8001e98:	40013000 	.word	0x40013000

08001e9c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ea0:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001ea2:	4a29      	ldr	r2, [pc, #164]	; (8001f48 <MX_SPI2_Init+0xac>)
 8001ea4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ea6:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001ea8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001eac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001eae:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001eb0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001eb4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001eb8:	220f      	movs	r2, #15
 8001eba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001eca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ece:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001ed0:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001ed2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001ed6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001ef2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ef8:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <MX_SPI2_Init+0xa8>)
 8001f30:	f00a fb14 	bl	800c55c <HAL_SPI_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001f3a:	f7ff fe7f 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	24000510 	.word	0x24000510
 8001f48:	40003800 	.word	0x40003800

08001f4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b0bc      	sub	sp, #240	; 0xf0
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f64:	f107 0318 	add.w	r3, r7, #24
 8001f68:	22c0      	movs	r2, #192	; 0xc0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f011 fc6d 	bl	801384c <memset>
  if(spiHandle->Instance==SPI1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a4c      	ldr	r2, [pc, #304]	; (80020a8 <HAL_SPI_MspInit+0x15c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d145      	bne.n	8002008 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001f7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f8c:	f107 0318 	add.w	r3, r7, #24
 8001f90:	4618      	mov	r0, r3
 8001f92:	f007 fb87 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001f9c:	f7ff fe4e 	bl	8001c3c <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fa0:	4b42      	ldr	r3, [pc, #264]	; (80020ac <HAL_SPI_MspInit+0x160>)
 8001fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fa6:	4a41      	ldr	r2, [pc, #260]	; (80020ac <HAL_SPI_MspInit+0x160>)
 8001fa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fb0:	4b3e      	ldr	r3, [pc, #248]	; (80020ac <HAL_SPI_MspInit+0x160>)
 8001fb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	4b3b      	ldr	r3, [pc, #236]	; (80020ac <HAL_SPI_MspInit+0x160>)
 8001fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc4:	4a39      	ldr	r2, [pc, #228]	; (80020ac <HAL_SPI_MspInit+0x160>)
 8001fc6:	f043 0302 	orr.w	r3, r3, #2
 8001fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fce:	4b37      	ldr	r3, [pc, #220]	; (80020ac <HAL_SPI_MspInit+0x160>)
 8001fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001fdc:	2318      	movs	r3, #24
 8001fde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ffe:	4619      	mov	r1, r3
 8002000:	482b      	ldr	r0, [pc, #172]	; (80020b0 <HAL_SPI_MspInit+0x164>)
 8002002:	f005 ffcb 	bl	8007f9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002006:	e04a      	b.n	800209e <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <HAL_SPI_MspInit+0x168>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d145      	bne.n	800209e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002012:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800201e:	2300      	movs	r3, #0
 8002020:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002022:	f107 0318 	add.w	r3, r7, #24
 8002026:	4618      	mov	r0, r3
 8002028:	f007 fb3c 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002032:	f7ff fe03 	bl	8001c3c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002036:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <HAL_SPI_MspInit+0x160>)
 8002038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800203c:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <HAL_SPI_MspInit+0x160>)
 800203e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002042:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_SPI_MspInit+0x160>)
 8002048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800204c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002054:	4b15      	ldr	r3, [pc, #84]	; (80020ac <HAL_SPI_MspInit+0x160>)
 8002056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205a:	4a14      	ldr	r2, [pc, #80]	; (80020ac <HAL_SPI_MspInit+0x160>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_SPI_MspInit+0x160>)
 8002066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002072:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800208c:	2305      	movs	r3, #5
 800208e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002092:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	; (80020b0 <HAL_SPI_MspInit+0x164>)
 800209a:	f005 ff7f 	bl	8007f9c <HAL_GPIO_Init>
}
 800209e:	bf00      	nop
 80020a0:	37f0      	adds	r7, #240	; 0xf0
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40013000 	.word	0x40013000
 80020ac:	58024400 	.word	0x58024400
 80020b0:	58020400 	.word	0x58020400
 80020b4:	40003800 	.word	0x40003800

080020b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <HAL_MspInit+0x38>)
 80020c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_MspInit+0x38>)
 80020c6:	f043 0302 	orr.w	r3, r3, #2
 80020ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_MspInit+0x38>)
 80020d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	210f      	movs	r1, #15
 80020e0:	f06f 0001 	mvn.w	r0, #1
 80020e4:	f002 fcf0 	bl	8004ac8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	58024400 	.word	0x58024400

080020f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b090      	sub	sp, #64	; 0x40
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	d827      	bhi.n	8002152 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002102:	2200      	movs	r2, #0
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	2036      	movs	r0, #54	; 0x36
 8002108:	f002 fcde 	bl	8004ac8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800210c:	2036      	movs	r0, #54	; 0x36
 800210e:	f002 fcf5 	bl	8004afc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002112:	4a29      	ldr	r2, [pc, #164]	; (80021b8 <HAL_InitTick+0xc4>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_InitTick+0xc8>)
 800211a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800211e:	4a27      	ldr	r2, [pc, #156]	; (80021bc <HAL_InitTick+0xc8>)
 8002120:	f043 0310 	orr.w	r3, r3, #16
 8002124:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_InitTick+0xc8>)
 800212a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002136:	f107 0210 	add.w	r2, r7, #16
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f007 fa6d 	bl	8009620 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002148:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800214a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214c:	2b00      	cmp	r3, #0
 800214e:	d106      	bne.n	800215e <HAL_InitTick+0x6a>
 8002150:	e001      	b.n	8002156 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e02b      	b.n	80021ae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002156:	f007 fa37 	bl	80095c8 <HAL_RCC_GetPCLK1Freq>
 800215a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800215c:	e004      	b.n	8002168 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800215e:	f007 fa33 	bl	80095c8 <HAL_RCC_GetPCLK1Freq>
 8002162:	4603      	mov	r3, r0
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <HAL_InitTick+0xcc>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	0c9b      	lsrs	r3, r3, #18
 8002172:	3b01      	subs	r3, #1
 8002174:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_InitTick+0xd0>)
 8002178:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <HAL_InitTick+0xd4>)
 800217a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_InitTick+0xd0>)
 800217e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002182:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002184:	4a0f      	ldr	r2, [pc, #60]	; (80021c4 <HAL_InitTick+0xd0>)
 8002186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002188:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <HAL_InitTick+0xd0>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <HAL_InitTick+0xd0>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002196:	480b      	ldr	r0, [pc, #44]	; (80021c4 <HAL_InitTick+0xd0>)
 8002198:	f00a fb1f 	bl	800c7da <HAL_TIM_Base_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d104      	bne.n	80021ac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80021a2:	4808      	ldr	r0, [pc, #32]	; (80021c4 <HAL_InitTick+0xd0>)
 80021a4:	f00a fb70 	bl	800c888 <HAL_TIM_Base_Start_IT>
 80021a8:	4603      	mov	r3, r0
 80021aa:	e000      	b.n	80021ae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3740      	adds	r7, #64	; 0x40
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	24000090 	.word	0x24000090
 80021bc:	58024400 	.word	0x58024400
 80021c0:	431bde83 	.word	0x431bde83
 80021c4:	24000598 	.word	0x24000598
 80021c8:	40001000 	.word	0x40001000

080021cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80021d0:	e7fe      	b.n	80021d0 <NMI_Handler+0x4>

080021d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <HardFault_Handler+0x4>

080021d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <MemManage_Handler+0x4>

080021de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021e2:	e7fe      	b.n	80021e2 <BusFault_Handler+0x4>

080021e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e8:	e7fe      	b.n	80021e8 <UsageFault_Handler+0x4>

080021ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <DMA1_Stream0_IRQHandler+0x10>)
 80021fe:	f004 fbbb 	bl	8006978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	240001e4 	.word	0x240001e4

0800220c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <DMA1_Stream1_IRQHandler+0x10>)
 8002212:	f004 fbb1 	bl	8006978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	2400025c 	.word	0x2400025c

08002220 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <DMA1_Stream2_IRQHandler+0x10>)
 8002226:	f004 fba7 	bl	8006978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	24000760 	.word	0x24000760

08002234 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <DMA1_Stream5_IRQHandler+0x10>)
 800223a:	f004 fb9d 	bl	8006978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	240002e8 	.word	0x240002e8

08002248 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <TIM1_BRK_IRQHandler+0x10>)
 800224e:	f00a fe32 	bl	800ceb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	240005e8 	.word	0x240005e8

0800225c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <TIM1_UP_IRQHandler+0x10>)
 8002262:	f00a fe28 	bl	800ceb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	240005e8 	.word	0x240005e8

08002270 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002274:	4802      	ldr	r0, [pc, #8]	; (8002280 <TIM1_TRG_COM_IRQHandler+0x10>)
 8002276:	f00a fe1e 	bl	800ceb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	240005e8 	.word	0x240005e8

08002284 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002288:	4802      	ldr	r0, [pc, #8]	; (8002294 <TIM1_CC_IRQHandler+0x10>)
 800228a:	f00a fe14 	bl	800ceb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	240005e8 	.word	0x240005e8

08002298 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <TIM2_IRQHandler+0x10>)
 800229e:	f00a fe0a 	bl	800ceb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	24000634 	.word	0x24000634

080022ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM3_IRQHandler+0x10>)
 80022b2:	f00a fe00 	bl	800ceb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	24000680 	.word	0x24000680

080022c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <USART1_IRQHandler+0x10>)
 80022c6:	f00b ff37 	bl	800e138 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	240006cc 	.word	0x240006cc

080022d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <TIM6_DAC_IRQHandler+0x20>)
 80022da:	791b      	ldrb	r3, [r3, #4]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80022e2:	4804      	ldr	r0, [pc, #16]	; (80022f4 <TIM6_DAC_IRQHandler+0x20>)
 80022e4:	f002 fd9f 	bl	8004e26 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80022e8:	4803      	ldr	r0, [pc, #12]	; (80022f8 <TIM6_DAC_IRQHandler+0x24>)
 80022ea:	f00a fde4 	bl	800ceb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	240002d4 	.word	0x240002d4
 80022f8:	24000598 	.word	0x24000598

080022fc <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <ITM_SendChar+0x48>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a0e      	ldr	r2, [pc, #56]	; (8002344 <ITM_SendChar+0x48>)
 800230c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002310:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <ITM_SendChar+0x4c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <ITM_SendChar+0x4c>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800231e:	bf00      	nop
 8002320:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f8      	beq.n	8002320 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800232e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	6013      	str	r3, [r2, #0]
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000edfc 	.word	0xe000edfc
 8002348:	e0000e00 	.word	0xe0000e00

0800234c <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e00a      	b.n	8002374 <_read+0x28>
		*ptr++ = __io_getchar();
 800235e:	f3af 8000 	nop.w
 8002362:	4601      	mov	r1, r0
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	60ba      	str	r2, [r7, #8]
 800236a:	b2ca      	uxtb	r2, r1
 800236c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	dbf0      	blt.n	800235e <_read+0x12>
	}

	return len;
 800237c:	687b      	ldr	r3, [r7, #4]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e009      	b.n	80023ac <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	60ba      	str	r2, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ffab 	bl	80022fc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf1      	blt.n	8002398 <_write+0x12>
	}
	return len;
 80023b4:	687b      	ldr	r3, [r7, #4]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_close>:

int _close(int file) {
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_fstat>:

int _fstat(int file, struct stat *st) {
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e6:	605a      	str	r2, [r3, #4]
	return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <_isatty>:

int _isatty(int file) {
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <_sbrk+0x64>)
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <_sbrk+0x68>)
 8002448:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d207      	bcs.n	8002468 <_sbrk+0x40>
		errno = ENOMEM;
 8002458:	f011 f9c0 	bl	80137dc <__errno>
 800245c:	4603      	mov	r3, r0
 800245e:	220c      	movs	r2, #12
 8002460:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002466:	e009      	b.n	800247c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <_sbrk+0x64>)
 8002478:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	24080000 	.word	0x24080000
 8002488:	00000400 	.word	0x00000400
 800248c:	240005e4 	.word	0x240005e4
 8002490:	240051f0 	.word	0x240051f0

08002494 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002498:	4b37      	ldr	r3, [pc, #220]	; (8002578 <SystemInit+0xe4>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	4a36      	ldr	r2, [pc, #216]	; (8002578 <SystemInit+0xe4>)
 80024a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80024a8:	4b34      	ldr	r3, [pc, #208]	; (800257c <SystemInit+0xe8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	2b06      	cmp	r3, #6
 80024b2:	d807      	bhi.n	80024c4 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80024b4:	4b31      	ldr	r3, [pc, #196]	; (800257c <SystemInit+0xe8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 030f 	bic.w	r3, r3, #15
 80024bc:	4a2f      	ldr	r2, [pc, #188]	; (800257c <SystemInit+0xe8>)
 80024be:	f043 0307 	orr.w	r3, r3, #7
 80024c2:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <SystemInit+0xec>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a2d      	ldr	r2, [pc, #180]	; (8002580 <SystemInit+0xec>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <SystemInit+0xec>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80024d6:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <SystemInit+0xec>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	4929      	ldr	r1, [pc, #164]	; (8002580 <SystemInit+0xec>)
 80024dc:	4b29      	ldr	r3, [pc, #164]	; (8002584 <SystemInit+0xf0>)
 80024de:	4013      	ands	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80024e2:	4b26      	ldr	r3, [pc, #152]	; (800257c <SystemInit+0xe8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <SystemInit+0xe8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 030f 	bic.w	r3, r3, #15
 80024f6:	4a21      	ldr	r2, [pc, #132]	; (800257c <SystemInit+0xe8>)
 80024f8:	f043 0307 	orr.w	r3, r3, #7
 80024fc:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <SystemInit+0xec>)
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002504:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <SystemInit+0xec>)
 8002506:	2200      	movs	r2, #0
 8002508:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <SystemInit+0xec>)
 800250c:	2200      	movs	r2, #0
 800250e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002510:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <SystemInit+0xec>)
 8002512:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <SystemInit+0xf4>)
 8002514:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002516:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <SystemInit+0xec>)
 8002518:	4a1c      	ldr	r2, [pc, #112]	; (800258c <SystemInit+0xf8>)
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <SystemInit+0xec>)
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <SystemInit+0xfc>)
 8002520:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <SystemInit+0xec>)
 8002524:	2200      	movs	r2, #0
 8002526:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002528:	4b15      	ldr	r3, [pc, #84]	; (8002580 <SystemInit+0xec>)
 800252a:	4a19      	ldr	r2, [pc, #100]	; (8002590 <SystemInit+0xfc>)
 800252c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800252e:	4b14      	ldr	r3, [pc, #80]	; (8002580 <SystemInit+0xec>)
 8002530:	2200      	movs	r2, #0
 8002532:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <SystemInit+0xec>)
 8002536:	4a16      	ldr	r2, [pc, #88]	; (8002590 <SystemInit+0xfc>)
 8002538:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <SystemInit+0xec>)
 800253c:	2200      	movs	r2, #0
 800253e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <SystemInit+0xec>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <SystemInit+0xec>)
 8002546:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <SystemInit+0xec>)
 800254e:	2200      	movs	r2, #0
 8002550:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8002552:	4b10      	ldr	r3, [pc, #64]	; (8002594 <SystemInit+0x100>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	4b10      	ldr	r3, [pc, #64]	; (8002598 <SystemInit+0x104>)
 8002558:	4013      	ands	r3, r2
 800255a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800255e:	d202      	bcs.n	8002566 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002560:	4b0e      	ldr	r3, [pc, #56]	; (800259c <SystemInit+0x108>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002566:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <SystemInit+0x10c>)
 8002568:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800256c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00
 800257c:	52002000 	.word	0x52002000
 8002580:	58024400 	.word	0x58024400
 8002584:	eaf6ed7f 	.word	0xeaf6ed7f
 8002588:	02020200 	.word	0x02020200
 800258c:	01ff0000 	.word	0x01ff0000
 8002590:	01010280 	.word	0x01010280
 8002594:	5c001000 	.word	0x5c001000
 8002598:	ffff0000 	.word	0xffff0000
 800259c:	51008108 	.word	0x51008108
 80025a0:	52004000 	.word	0x52004000

080025a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b09a      	sub	sp, #104	; 0x68
 80025a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
 80025d4:	615a      	str	r2, [r3, #20]
 80025d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	222c      	movs	r2, #44	; 0x2c
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f011 f934 	bl	801384c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025e4:	4b44      	ldr	r3, [pc, #272]	; (80026f8 <MX_TIM1_Init+0x154>)
 80025e6:	4a45      	ldr	r2, [pc, #276]	; (80026fc <MX_TIM1_Init+0x158>)
 80025e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80025ea:	4b43      	ldr	r3, [pc, #268]	; (80026f8 <MX_TIM1_Init+0x154>)
 80025ec:	2231      	movs	r2, #49	; 0x31
 80025ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f0:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <MX_TIM1_Init+0x154>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80025f6:	4b40      	ldr	r3, [pc, #256]	; (80026f8 <MX_TIM1_Init+0x154>)
 80025f8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80025fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fe:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <MX_TIM1_Init+0x154>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002604:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <MX_TIM1_Init+0x154>)
 8002606:	2200      	movs	r2, #0
 8002608:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260a:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <MX_TIM1_Init+0x154>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002610:	4839      	ldr	r0, [pc, #228]	; (80026f8 <MX_TIM1_Init+0x154>)
 8002612:	f00a f8e2 	bl	800c7da <HAL_TIM_Base_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800261c:	f7ff fb0e 	bl	8001c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002624:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002626:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800262a:	4619      	mov	r1, r3
 800262c:	4832      	ldr	r0, [pc, #200]	; (80026f8 <MX_TIM1_Init+0x154>)
 800262e:	f00a fe5d 	bl	800d2ec <HAL_TIM_ConfigClockSource>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002638:	f7ff fb00 	bl	8001c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800263c:	482e      	ldr	r0, [pc, #184]	; (80026f8 <MX_TIM1_Init+0x154>)
 800263e:	f00a fbd9 	bl	800cdf4 <HAL_TIM_PWM_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002648:	f7ff faf8 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800264c:	2300      	movs	r3, #0
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002650:	2300      	movs	r3, #0
 8002652:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002658:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800265c:	4619      	mov	r1, r3
 800265e:	4826      	ldr	r0, [pc, #152]	; (80026f8 <MX_TIM1_Init+0x154>)
 8002660:	f00b fba4 	bl	800ddac <HAL_TIMEx_MasterConfigSynchronization>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800266a:	f7ff fae7 	bl	8001c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800266e:	2360      	movs	r3, #96	; 0x60
 8002670:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8002672:	f240 13df 	movw	r3, #479	; 0x1df
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002678:	2300      	movs	r3, #0
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800267c:	2300      	movs	r3, #0
 800267e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800268c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002690:	2200      	movs	r2, #0
 8002692:	4619      	mov	r1, r3
 8002694:	4818      	ldr	r0, [pc, #96]	; (80026f8 <MX_TIM1_Init+0x154>)
 8002696:	f00a fd15 	bl	800d0c4 <HAL_TIM_PWM_ConfigChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80026a0:	f7ff facc 	bl	8001c3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80026c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4807      	ldr	r0, [pc, #28]	; (80026f8 <MX_TIM1_Init+0x154>)
 80026da:	f00b fbf5 	bl	800dec8 <HAL_TIMEx_ConfigBreakDeadTime>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80026e4:	f7ff faaa 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80026e8:	4803      	ldr	r0, [pc, #12]	; (80026f8 <MX_TIM1_Init+0x154>)
 80026ea:	f000 f949 	bl	8002980 <HAL_TIM_MspPostInit>

}
 80026ee:	bf00      	nop
 80026f0:	3768      	adds	r7, #104	; 0x68
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	240005e8 	.word	0x240005e8
 80026fc:	40010000 	.word	0x40010000

08002700 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08e      	sub	sp, #56	; 0x38
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002714:	f107 031c 	add.w	r3, r7, #28
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002720:	463b      	mov	r3, r7
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
 800272c:	611a      	str	r2, [r3, #16]
 800272e:	615a      	str	r2, [r3, #20]
 8002730:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <MX_TIM2_Init+0xe8>)
 8002734:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002738:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 800273a:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <MX_TIM2_Init+0xe8>)
 800273c:	2231      	movs	r2, #49	; 0x31
 800273e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002740:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <MX_TIM2_Init+0xe8>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8002746:	4b28      	ldr	r3, [pc, #160]	; (80027e8 <MX_TIM2_Init+0xe8>)
 8002748:	f640 4234 	movw	r2, #3124	; 0xc34
 800274c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <MX_TIM2_Init+0xe8>)
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002754:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <MX_TIM2_Init+0xe8>)
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800275a:	4823      	ldr	r0, [pc, #140]	; (80027e8 <MX_TIM2_Init+0xe8>)
 800275c:	f00a f83d 	bl	800c7da <HAL_TIM_Base_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002766:	f7ff fa69 	bl	8001c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800276a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002774:	4619      	mov	r1, r3
 8002776:	481c      	ldr	r0, [pc, #112]	; (80027e8 <MX_TIM2_Init+0xe8>)
 8002778:	f00a fdb8 	bl	800d2ec <HAL_TIM_ConfigClockSource>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002782:	f7ff fa5b 	bl	8001c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002786:	4818      	ldr	r0, [pc, #96]	; (80027e8 <MX_TIM2_Init+0xe8>)
 8002788:	f00a fb34 	bl	800cdf4 <HAL_TIM_PWM_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002792:	f7ff fa53 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002796:	2320      	movs	r3, #32
 8002798:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800279e:	f107 031c 	add.w	r3, r7, #28
 80027a2:	4619      	mov	r1, r3
 80027a4:	4810      	ldr	r0, [pc, #64]	; (80027e8 <MX_TIM2_Init+0xe8>)
 80027a6:	f00b fb01 	bl	800ddac <HAL_TIMEx_MasterConfigSynchronization>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80027b0:	f7ff fa44 	bl	8001c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027b4:	2360      	movs	r3, #96	; 0x60
 80027b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027bc:	2300      	movs	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027c4:	463b      	mov	r3, r7
 80027c6:	220c      	movs	r2, #12
 80027c8:	4619      	mov	r1, r3
 80027ca:	4807      	ldr	r0, [pc, #28]	; (80027e8 <MX_TIM2_Init+0xe8>)
 80027cc:	f00a fc7a 	bl	800d0c4 <HAL_TIM_PWM_ConfigChannel>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80027d6:	f7ff fa31 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80027da:	4803      	ldr	r0, [pc, #12]	; (80027e8 <MX_TIM2_Init+0xe8>)
 80027dc:	f000 f8d0 	bl	8002980 <HAL_TIM_MspPostInit>

}
 80027e0:	bf00      	nop
 80027e2:	3738      	adds	r7, #56	; 0x38
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	24000634 	.word	0x24000634

080027ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027f2:	f107 0310 	add.w	r3, r7, #16
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <MX_TIM3_Init+0x94>)
 800280c:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <MX_TIM3_Init+0x98>)
 800280e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8002810:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <MX_TIM3_Init+0x94>)
 8002812:	2263      	movs	r2, #99	; 0x63
 8002814:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002816:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <MX_TIM3_Init+0x94>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <MX_TIM3_Init+0x94>)
 800281e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002822:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <MX_TIM3_Init+0x94>)
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <MX_TIM3_Init+0x94>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002830:	4813      	ldr	r0, [pc, #76]	; (8002880 <MX_TIM3_Init+0x94>)
 8002832:	f009 ffd2 	bl	800c7da <HAL_TIM_Base_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800283c:	f7ff f9fe 	bl	8001c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002844:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002846:	f107 0310 	add.w	r3, r7, #16
 800284a:	4619      	mov	r1, r3
 800284c:	480c      	ldr	r0, [pc, #48]	; (8002880 <MX_TIM3_Init+0x94>)
 800284e:	f00a fd4d 	bl	800d2ec <HAL_TIM_ConfigClockSource>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002858:	f7ff f9f0 	bl	8001c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800285c:	2300      	movs	r3, #0
 800285e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	4619      	mov	r1, r3
 8002868:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_TIM3_Init+0x94>)
 800286a:	f00b fa9f 	bl	800ddac <HAL_TIMEx_MasterConfigSynchronization>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002874:	f7ff f9e2 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002878:	bf00      	nop
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	24000680 	.word	0x24000680
 8002884:	40000400 	.word	0x40000400

08002888 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a37      	ldr	r2, [pc, #220]	; (8002974 <HAL_TIM_Base_MspInit+0xec>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d12f      	bne.n	80028fa <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800289a:	4b37      	ldr	r3, [pc, #220]	; (8002978 <HAL_TIM_Base_MspInit+0xf0>)
 800289c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028a0:	4a35      	ldr	r2, [pc, #212]	; (8002978 <HAL_TIM_Base_MspInit+0xf0>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028aa:	4b33      	ldr	r3, [pc, #204]	; (8002978 <HAL_TIM_Base_MspInit+0xf0>)
 80028ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80028b8:	2200      	movs	r2, #0
 80028ba:	2105      	movs	r1, #5
 80028bc:	2018      	movs	r0, #24
 80028be:	f002 f903 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80028c2:	2018      	movs	r0, #24
 80028c4:	f002 f91a 	bl	8004afc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2105      	movs	r1, #5
 80028cc:	2019      	movs	r0, #25
 80028ce:	f002 f8fb 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80028d2:	2019      	movs	r0, #25
 80028d4:	f002 f912 	bl	8004afc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80028d8:	2200      	movs	r2, #0
 80028da:	2105      	movs	r1, #5
 80028dc:	201a      	movs	r0, #26
 80028de:	f002 f8f3 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80028e2:	201a      	movs	r0, #26
 80028e4:	f002 f90a 	bl	8004afc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80028e8:	2200      	movs	r2, #0
 80028ea:	2105      	movs	r1, #5
 80028ec:	201b      	movs	r0, #27
 80028ee:	f002 f8eb 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80028f2:	201b      	movs	r0, #27
 80028f4:	f002 f902 	bl	8004afc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028f8:	e038      	b.n	800296c <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002902:	d117      	bne.n	8002934 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002904:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <HAL_TIM_Base_MspInit+0xf0>)
 8002906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800290a:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <HAL_TIM_Base_MspInit+0xf0>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002914:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_TIM_Base_MspInit+0xf0>)
 8002916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2105      	movs	r1, #5
 8002926:	201c      	movs	r0, #28
 8002928:	f002 f8ce 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800292c:	201c      	movs	r0, #28
 800292e:	f002 f8e5 	bl	8004afc <HAL_NVIC_EnableIRQ>
}
 8002932:	e01b      	b.n	800296c <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a10      	ldr	r2, [pc, #64]	; (800297c <HAL_TIM_Base_MspInit+0xf4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d116      	bne.n	800296c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_TIM_Base_MspInit+0xf0>)
 8002940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002944:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <HAL_TIM_Base_MspInit+0xf0>)
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_TIM_Base_MspInit+0xf0>)
 8002950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	2105      	movs	r1, #5
 8002960:	201d      	movs	r0, #29
 8002962:	f002 f8b1 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002966:	201d      	movs	r0, #29
 8002968:	f002 f8c8 	bl	8004afc <HAL_NVIC_EnableIRQ>
}
 800296c:	bf00      	nop
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40010000 	.word	0x40010000
 8002978:	58024400 	.word	0x58024400
 800297c:	40000400 	.word	0x40000400

08002980 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a26      	ldr	r2, [pc, #152]	; (8002a38 <HAL_TIM_MspPostInit+0xb8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d120      	bne.n	80029e4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <HAL_TIM_MspPostInit+0xbc>)
 80029a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029a8:	4a24      	ldr	r2, [pc, #144]	; (8002a3c <HAL_TIM_MspPostInit+0xbc>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029b2:	4b22      	ldr	r3, [pc, #136]	; (8002a3c <HAL_TIM_MspPostInit+0xbc>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029d2:	2301      	movs	r3, #1
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d6:	f107 0314 	add.w	r3, r7, #20
 80029da:	4619      	mov	r1, r3
 80029dc:	4818      	ldr	r0, [pc, #96]	; (8002a40 <HAL_TIM_MspPostInit+0xc0>)
 80029de:	f005 fadd 	bl	8007f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029e2:	e024      	b.n	8002a2e <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d11f      	bne.n	8002a2e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ee:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <HAL_TIM_MspPostInit+0xbc>)
 80029f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f4:	4a11      	ldr	r2, [pc, #68]	; (8002a3c <HAL_TIM_MspPostInit+0xbc>)
 80029f6:	f043 0302 	orr.w	r3, r3, #2
 80029fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029fe:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <HAL_TIM_MspPostInit+0xbc>)
 8002a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a22:	f107 0314 	add.w	r3, r7, #20
 8002a26:	4619      	mov	r1, r3
 8002a28:	4806      	ldr	r0, [pc, #24]	; (8002a44 <HAL_TIM_MspPostInit+0xc4>)
 8002a2a:	f005 fab7 	bl	8007f9c <HAL_GPIO_Init>
}
 8002a2e:	bf00      	nop
 8002a30:	3728      	adds	r7, #40	; 0x28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40010000 	.word	0x40010000
 8002a3c:	58024400 	.word	0x58024400
 8002a40:	58020000 	.word	0x58020000
 8002a44:	58020400 	.word	0x58020400

08002a48 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a4c:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002a4e:	4a23      	ldr	r2, [pc, #140]	; (8002adc <MX_USART1_UART_Init+0x94>)
 8002a50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8002a52:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002a54:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002a58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a66:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a6c:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002a6e:	220c      	movs	r2, #12
 8002a70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a72:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a78:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a8a:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a90:	4811      	ldr	r0, [pc, #68]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002a92:	f00b fab5 	bl	800e000 <HAL_UART_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a9c:	f7ff f8ce 	bl	8001c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	480d      	ldr	r0, [pc, #52]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002aa4:	f00d fd81 	bl	80105aa <HAL_UARTEx_SetTxFifoThreshold>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002aae:	f7ff f8c5 	bl	8001c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4808      	ldr	r0, [pc, #32]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002ab6:	f00d fdb6 	bl	8010626 <HAL_UARTEx_SetRxFifoThreshold>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002ac0:	f7ff f8bc 	bl	8001c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002ac4:	4804      	ldr	r0, [pc, #16]	; (8002ad8 <MX_USART1_UART_Init+0x90>)
 8002ac6:	f00d fd37 	bl	8010538 <HAL_UARTEx_DisableFifoMode>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002ad0:	f7ff f8b4 	bl	8001c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ad4:	bf00      	nop
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	240006cc 	.word	0x240006cc
 8002adc:	40011000 	.word	0x40011000

08002ae0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b0ba      	sub	sp, #232	; 0xe8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002af8:	f107 0310 	add.w	r3, r7, #16
 8002afc:	22c0      	movs	r2, #192	; 0xc0
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f010 fea3 	bl	801384c <memset>
  if(uartHandle->Instance==USART1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a41      	ldr	r2, [pc, #260]	; (8002c10 <HAL_UART_MspInit+0x130>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d17b      	bne.n	8002c08 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b10:	f04f 0201 	mov.w	r2, #1
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8002b1c:	2318      	movs	r3, #24
 8002b1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b22:	f107 0310 	add.w	r3, r7, #16
 8002b26:	4618      	mov	r0, r3
 8002b28:	f006 fdbc 	bl	80096a4 <HAL_RCCEx_PeriphCLKConfig>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002b32:	f7ff f883 	bl	8001c3c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b36:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_UART_MspInit+0x134>)
 8002b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b3c:	4a35      	ldr	r2, [pc, #212]	; (8002c14 <HAL_UART_MspInit+0x134>)
 8002b3e:	f043 0310 	orr.w	r3, r3, #16
 8002b42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002b46:	4b33      	ldr	r3, [pc, #204]	; (8002c14 <HAL_UART_MspInit+0x134>)
 8002b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b54:	4b2f      	ldr	r3, [pc, #188]	; (8002c14 <HAL_UART_MspInit+0x134>)
 8002b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5a:	4a2e      	ldr	r2, [pc, #184]	; (8002c14 <HAL_UART_MspInit+0x134>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b64:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_UART_MspInit+0x134>)
 8002b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b8c:	2307      	movs	r3, #7
 8002b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b92:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b96:	4619      	mov	r1, r3
 8002b98:	481f      	ldr	r0, [pc, #124]	; (8002c18 <HAL_UART_MspInit+0x138>)
 8002b9a:	f005 f9ff 	bl	8007f9c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8002b9e:	4b1f      	ldr	r3, [pc, #124]	; (8002c1c <HAL_UART_MspInit+0x13c>)
 8002ba0:	4a1f      	ldr	r2, [pc, #124]	; (8002c20 <HAL_UART_MspInit+0x140>)
 8002ba2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_UART_MspInit+0x13c>)
 8002ba6:	222a      	movs	r2, #42	; 0x2a
 8002ba8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <HAL_UART_MspInit+0x13c>)
 8002bac:	2240      	movs	r2, #64	; 0x40
 8002bae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <HAL_UART_MspInit+0x13c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bb6:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_UART_MspInit+0x13c>)
 8002bb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bbc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_UART_MspInit+0x13c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_UART_MspInit+0x13c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <HAL_UART_MspInit+0x13c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_UART_MspInit+0x13c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bd6:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <HAL_UART_MspInit+0x13c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002bdc:	480f      	ldr	r0, [pc, #60]	; (8002c1c <HAL_UART_MspInit+0x13c>)
 8002bde:	f002 fba1 	bl	8005324 <HAL_DMA_Init>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002be8:	f7ff f828 	bl	8001c3c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a0b      	ldr	r2, [pc, #44]	; (8002c1c <HAL_UART_MspInit+0x13c>)
 8002bf0:	67da      	str	r2, [r3, #124]	; 0x7c
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <HAL_UART_MspInit+0x13c>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2105      	movs	r1, #5
 8002bfc:	2025      	movs	r0, #37	; 0x25
 8002bfe:	f001 ff63 	bl	8004ac8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c02:	2025      	movs	r0, #37	; 0x25
 8002c04:	f001 ff7a 	bl	8004afc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c08:	bf00      	nop
 8002c0a:	37e8      	adds	r7, #232	; 0xe8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40011000 	.word	0x40011000
 8002c14:	58024400 	.word	0x58024400
 8002c18:	58020000 	.word	0x58020000
 8002c1c:	24000760 	.word	0x24000760
 8002c20:	40020040 	.word	0x40020040

08002c24 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8002c2e:	4bc2      	ldr	r3, [pc, #776]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8002c34:	4bc0      	ldr	r3, [pc, #768]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8002c3a:	4bbf      	ldr	r3, [pc, #764]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8002c40:	4bbd      	ldr	r3, [pc, #756]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002c46:	4bbc      	ldr	r3, [pc, #752]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c48:	f242 7210 	movw	r2, #10000	; 0x2710
 8002c4c:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8002c4e:	4bba      	ldr	r3, [pc, #744]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8002c54:	4bb8      	ldr	r3, [pc, #736]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8002c5a:	4bb7      	ldr	r3, [pc, #732]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8002c60:	4bb5      	ldr	r3, [pc, #724]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8002c66:	4bb4      	ldr	r3, [pc, #720]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002c6c:	4bb2      	ldr	r3, [pc, #712]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002c72:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8002c74:	4bb0      	ldr	r3, [pc, #704]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8002c7a:	4baf      	ldr	r3, [pc, #700]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8002c80:	4bad      	ldr	r3, [pc, #692]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8002c86:	4bac      	ldr	r3, [pc, #688]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8002c8c:	4baa      	ldr	r3, [pc, #680]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002c92:	4ba9      	ldr	r3, [pc, #676]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c94:	f242 7210 	movw	r2, #10000	; 0x2710
 8002c98:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8002c9a:	4ba7      	ldr	r3, [pc, #668]	; (8002f38 <voltage_monitor_init+0x314>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8002ca0:	4ba5      	ldr	r3, [pc, #660]	; (8002f38 <voltage_monitor_init+0x314>)
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8002ca6:	4ba4      	ldr	r3, [pc, #656]	; (8002f38 <voltage_monitor_init+0x314>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8002cac:	4ba2      	ldr	r3, [pc, #648]	; (8002f38 <voltage_monitor_init+0x314>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8002cb4:	4ba0      	ldr	r3, [pc, #640]	; (8002f38 <voltage_monitor_init+0x314>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002cba:	4b9f      	ldr	r3, [pc, #636]	; (8002f38 <voltage_monitor_init+0x314>)
 8002cbc:	f242 7210 	movw	r2, #10000	; 0x2710
 8002cc0:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8002cc2:	4b9d      	ldr	r3, [pc, #628]	; (8002f38 <voltage_monitor_init+0x314>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8002cc8:	4b9b      	ldr	r3, [pc, #620]	; (8002f38 <voltage_monitor_init+0x314>)
 8002cca:	2204      	movs	r2, #4
 8002ccc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8002cd0:	4b99      	ldr	r3, [pc, #612]	; (8002f38 <voltage_monitor_init+0x314>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8002cd8:	4b97      	ldr	r3, [pc, #604]	; (8002f38 <voltage_monitor_init+0x314>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8002ce0:	4b95      	ldr	r3, [pc, #596]	; (8002f38 <voltage_monitor_init+0x314>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002ce6:	4b94      	ldr	r3, [pc, #592]	; (8002f38 <voltage_monitor_init+0x314>)
 8002ce8:	f242 7210 	movw	r2, #10000	; 0x2710
 8002cec:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8002cee:	4b92      	ldr	r3, [pc, #584]	; (8002f38 <voltage_monitor_init+0x314>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8002cf4:	4b90      	ldr	r3, [pc, #576]	; (8002f38 <voltage_monitor_init+0x314>)
 8002cf6:	2205      	movs	r2, #5
 8002cf8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8002cfc:	4b8e      	ldr	r3, [pc, #568]	; (8002f38 <voltage_monitor_init+0x314>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8002d04:	4b8c      	ldr	r3, [pc, #560]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8002d0c:	4b8a      	ldr	r3, [pc, #552]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002d12:	4b89      	ldr	r3, [pc, #548]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d14:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d18:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8002d1a:	4b87      	ldr	r3, [pc, #540]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8002d20:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d22:	2206      	movs	r2, #6
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8002d28:	4b83      	ldr	r3, [pc, #524]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8002d30:	4b81      	ldr	r3, [pc, #516]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8002d38:	4b7f      	ldr	r3, [pc, #508]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002d40:	4b7d      	ldr	r3, [pc, #500]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d42:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d46:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8002d4a:	4b7b      	ldr	r3, [pc, #492]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8002d52:	4b79      	ldr	r3, [pc, #484]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d54:	2207      	movs	r2, #7
 8002d56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8002d5a:	4b77      	ldr	r3, [pc, #476]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8002d62:	4b75      	ldr	r3, [pc, #468]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8002d6a:	4b73      	ldr	r3, [pc, #460]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002d72:	4b71      	ldr	r3, [pc, #452]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d74:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8002d7c:	4b6e      	ldr	r3, [pc, #440]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8002d84:	4b6c      	ldr	r3, [pc, #432]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d86:	2208      	movs	r2, #8
 8002d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8002d8c:	4b6a      	ldr	r3, [pc, #424]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8002d94:	4b68      	ldr	r3, [pc, #416]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8002d9c:	4b66      	ldr	r3, [pc, #408]	; (8002f38 <voltage_monitor_init+0x314>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8002da4:	4b64      	ldr	r3, [pc, #400]	; (8002f38 <voltage_monitor_init+0x314>)
 8002da6:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8002daa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8002dae:	4b62      	ldr	r3, [pc, #392]	; (8002f38 <voltage_monitor_init+0x314>)
 8002db0:	f640 3283 	movw	r2, #2947	; 0xb83
 8002db4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8002db8:	4b5f      	ldr	r3, [pc, #380]	; (8002f38 <voltage_monitor_init+0x314>)
 8002dba:	2209      	movs	r2, #9
 8002dbc:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8002dc0:	4b5d      	ldr	r3, [pc, #372]	; (8002f38 <voltage_monitor_init+0x314>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8002dc8:	4b5b      	ldr	r3, [pc, #364]	; (8002f38 <voltage_monitor_init+0x314>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8002dd0:	4b59      	ldr	r3, [pc, #356]	; (8002f38 <voltage_monitor_init+0x314>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8002dd8:	4b57      	ldr	r3, [pc, #348]	; (8002f38 <voltage_monitor_init+0x314>)
 8002dda:	f640 7245 	movw	r2, #3909	; 0xf45
 8002dde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8002de2:	4b55      	ldr	r3, [pc, #340]	; (8002f38 <voltage_monitor_init+0x314>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8002dea:	4b53      	ldr	r3, [pc, #332]	; (8002f38 <voltage_monitor_init+0x314>)
 8002dec:	220a      	movs	r2, #10
 8002dee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8002df2:	4b51      	ldr	r3, [pc, #324]	; (8002f38 <voltage_monitor_init+0x314>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8002dfa:	4b4f      	ldr	r3, [pc, #316]	; (8002f38 <voltage_monitor_init+0x314>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8002e02:	4b4d      	ldr	r3, [pc, #308]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8002e0a:	4b4b      	ldr	r3, [pc, #300]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e0c:	f640 7245 	movw	r2, #3909	; 0xf45
 8002e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8002e14:	4b48      	ldr	r3, [pc, #288]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e16:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8002e1a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8002e1e:	4b46      	ldr	r3, [pc, #280]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e20:	220b      	movs	r2, #11
 8002e22:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8002e26:	4b44      	ldr	r3, [pc, #272]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8002e2e:	4b42      	ldr	r3, [pc, #264]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8002e36:	4b40      	ldr	r3, [pc, #256]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8002e3e:	4b3e      	ldr	r3, [pc, #248]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e40:	f640 72fb 	movw	r2, #4091	; 0xffb
 8002e44:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8002e48:	4b3b      	ldr	r3, [pc, #236]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e4a:	f640 6276 	movw	r2, #3702	; 0xe76
 8002e4e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8002e52:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e54:	220c      	movs	r2, #12
 8002e56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8002e5a:	4b37      	ldr	r3, [pc, #220]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8002e62:	4b35      	ldr	r3, [pc, #212]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8002e6a:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e74:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002e78:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8002e7c:	4b2e      	ldr	r3, [pc, #184]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8002e84:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e86:	220d      	movs	r2, #13
 8002e88:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8002e8c:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8002e94:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8002e9c:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <voltage_monitor_init+0x314>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8002ea4:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <voltage_monitor_init+0x314>)
 8002ea6:	f640 7238 	movw	r2, #3896	; 0xf38
 8002eaa:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8002eae:	4b22      	ldr	r3, [pc, #136]	; (8002f38 <voltage_monitor_init+0x314>)
 8002eb0:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8002eb4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8002eb8:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <voltage_monitor_init+0x314>)
 8002eba:	220e      	movs	r2, #14
 8002ebc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <voltage_monitor_init+0x314>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <voltage_monitor_init+0x314>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8002ed0:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <voltage_monitor_init+0x314>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8002ed8:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <voltage_monitor_init+0x314>)
 8002eda:	f640 7245 	movw	r2, #3909	; 0xf45
 8002ede:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <voltage_monitor_init+0x314>)
 8002ee4:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8002ee8:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <voltage_monitor_init+0x314>)
 8002eee:	220f      	movs	r2, #15
 8002ef0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <voltage_monitor_init+0x314>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <voltage_monitor_init+0x314>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <voltage_monitor_init+0x314>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <voltage_monitor_init+0x314>)
 8002f0e:	f241 0264 	movw	r2, #4196	; 0x1064
 8002f12:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8002f16:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <voltage_monitor_init+0x314>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <voltage_monitor_init+0x314>)
 8002f20:	2210      	movs	r2, #16
 8002f22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8002f26:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <voltage_monitor_init+0x314>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8002f2e:	4b02      	ldr	r3, [pc, #8]	; (8002f38 <voltage_monitor_init+0x314>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8002f36:	e001      	b.n	8002f3c <voltage_monitor_init+0x318>
 8002f38:	240007d8 	.word	0x240007d8
	rail_monitor[RAIL_n800v].data = 0;
 8002f3c:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <voltage_monitor_init+0x378>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8002f44:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <voltage_monitor_init+0x378>)
 8002f46:	f640 5208 	movw	r2, #3336	; 0xd08
 8002f4a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8002f4e:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <voltage_monitor_init+0x378>)
 8002f50:	f640 32ca 	movw	r2, #3018	; 0xbca
 8002f54:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8002f58:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <voltage_monitor_init+0x378>)
 8002f5a:	2211      	movs	r2, #17
 8002f5c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <voltage_monitor_init+0x378>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <voltage_monitor_init+0x378>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8002f70:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <voltage_monitor_init+0x378>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <voltage_monitor_init+0x378>)
 8002f7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002f7e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <voltage_monitor_init+0x378>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	71fb      	strb	r3, [r7, #7]

	return status;
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	240007d8 	.word	0x240007d8

08002fa0 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	460a      	mov	r2, r1
 8002faa:	71fb      	strb	r3, [r7, #7]
 8002fac:	4613      	mov	r3, r2
 8002fae:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8002fb4:	79fa      	ldrb	r2, [r7, #7]
 8002fb6:	4909      	ldr	r1, [pc, #36]	; (8002fdc <set_rail_monitor_enable+0x3c>)
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	79ba      	ldrb	r2, [r7, #6]
 8002fc6:	701a      	strb	r2, [r3, #0]
	status = 1;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]

	return status;
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	240007d8 	.word	0x240007d8

08002fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003018 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fe4:	f7ff fa56 	bl	8002494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe8:	480c      	ldr	r0, [pc, #48]	; (800301c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fea:	490d      	ldr	r1, [pc, #52]	; (8003020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003000:	4c0a      	ldr	r4, [pc, #40]	; (800302c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800300e:	f010 fbeb 	bl	80137e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003012:	f7fe fce5 	bl	80019e0 <main>
  bx  lr
 8003016:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003018:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800301c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003020:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8003024:	08014714 	.word	0x08014714
  ldr r2, =_sbss
 8003028:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 800302c:	240051f0 	.word	0x240051f0

08003030 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003030:	e7fe      	b.n	8003030 <ADC3_IRQHandler>
	...

08003034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303a:	2003      	movs	r0, #3
 800303c:	f001 fd39 	bl	8004ab2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003040:	f006 f918 	bl	8009274 <HAL_RCC_GetSysClockFreq>
 8003044:	4602      	mov	r2, r0
 8003046:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_Init+0x68>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	0a1b      	lsrs	r3, r3, #8
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	4913      	ldr	r1, [pc, #76]	; (80030a0 <HAL_Init+0x6c>)
 8003052:	5ccb      	ldrb	r3, [r1, r3]
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
 800305c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800305e:	4b0f      	ldr	r3, [pc, #60]	; (800309c <HAL_Init+0x68>)
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <HAL_Init+0x6c>)
 8003068:	5cd3      	ldrb	r3, [r2, r3]
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
 8003074:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <HAL_Init+0x70>)
 8003076:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003078:	4a0b      	ldr	r2, [pc, #44]	; (80030a8 <HAL_Init+0x74>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800307e:	2005      	movs	r0, #5
 8003080:	f7ff f838 	bl	80020f4 <HAL_InitTick>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e002      	b.n	8003094 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800308e:	f7ff f813 	bl	80020b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	58024400 	.word	0x58024400
 80030a0:	08014660 	.word	0x08014660
 80030a4:	2400008c 	.word	0x2400008c
 80030a8:	24000088 	.word	0x24000088

080030ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <HAL_IncTick+0x20>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_IncTick+0x24>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <HAL_IncTick+0x24>)
 80030be:	6013      	str	r3, [r2, #0]
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	24000094 	.word	0x24000094
 80030d0:	2400088c 	.word	0x2400088c

080030d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  return uwTick;
 80030d8:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <HAL_GetTick+0x14>)
 80030da:	681b      	ldr	r3, [r3, #0]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	2400088c 	.word	0x2400088c

080030ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <HAL_GetREVID+0x14>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0c1b      	lsrs	r3, r3, #16
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	5c001000 	.word	0x5c001000

08003104 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	43db      	mvns	r3, r3
 8003116:	401a      	ands	r2, r3
 8003118:	4904      	ldr	r1, [pc, #16]	; (800312c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	58000400 	.word	0x58000400

08003130 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	609a      	str	r2, [r3, #8]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	609a      	str	r2, [r3, #8]
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3360      	adds	r3, #96	; 0x60
 80031aa:	461a      	mov	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	431a      	orrs	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80031cc:	bf00      	nop
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	611a      	str	r2, [r3, #16]
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800320a:	b480      	push	{r7}
 800320c:	b087      	sub	sp, #28
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3360      	adds	r3, #96	; 0x60
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	431a      	orrs	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	601a      	str	r2, [r3, #0]
  }
}
 8003234:	bf00      	nop
 8003236:	371c      	adds	r7, #28
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003266:	b480      	push	{r7}
 8003268:	b087      	sub	sp, #28
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3330      	adds	r3, #48	; 0x30
 8003276:	461a      	mov	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	0a1b      	lsrs	r3, r3, #8
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	f003 030c 	and.w	r3, r3, #12
 8003282:	4413      	add	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	211f      	movs	r1, #31
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	401a      	ands	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	0e9b      	lsrs	r3, r3, #26
 800329e:	f003 011f 	and.w	r1, r3, #31
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	431a      	orrs	r2, r3
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f023 0203 	bic.w	r2, r3, #3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	60da      	str	r2, [r3, #12]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3314      	adds	r3, #20
 80032f4:	461a      	mov	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	0e5b      	lsrs	r3, r3, #25
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	4413      	add	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	0d1b      	lsrs	r3, r3, #20
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	2107      	movs	r1, #7
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	401a      	ands	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	0d1b      	lsrs	r3, r3, #20
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	431a      	orrs	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800332e:	bf00      	nop
 8003330:	371c      	adds	r7, #28
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003354:	43db      	mvns	r3, r3
 8003356:	401a      	ands	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0318 	and.w	r3, r3, #24
 800335e:	4908      	ldr	r1, [pc, #32]	; (8003380 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003360:	40d9      	lsrs	r1, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	400b      	ands	r3, r1
 8003366:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800336a:	431a      	orrs	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	000fffff 	.word	0x000fffff

08003384 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 031f 	and.w	r3, r3, #31
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6093      	str	r3, [r2, #8]
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	5fffffc0 	.word	0x5fffffc0

080033c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033d8:	d101      	bne.n	80033de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <LL_ADC_EnableInternalRegulator+0x24>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	6fffffc0 	.word	0x6fffffc0

08003414 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003428:	d101      	bne.n	800342e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <LL_ADC_Enable+0x24>)
 800344a:	4013      	ands	r3, r2
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	7fffffc0 	.word	0x7fffffc0

08003464 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <LL_ADC_Disable+0x24>)
 8003472:	4013      	ands	r3, r2
 8003474:	f043 0202 	orr.w	r2, r3, #2
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	7fffffc0 	.word	0x7fffffc0

0800348c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <LL_ADC_IsEnabled+0x18>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <LL_ADC_IsEnabled+0x1a>
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d101      	bne.n	80034ca <LL_ADC_IsDisableOngoing+0x18>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <LL_ADC_IsDisableOngoing+0x1a>
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <LL_ADC_REG_StartConversion+0x24>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	f043 0204 	orr.w	r2, r3, #4
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	7fffffc0 	.word	0x7fffffc0

08003500 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b04      	cmp	r3, #4
 8003512:	d101      	bne.n	8003518 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b08      	cmp	r3, #8
 8003538:	d101      	bne.n	800353e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b089      	sub	sp, #36	; 0x24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003558:	2300      	movs	r3, #0
 800355a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e18f      	b.n	8003886 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	2b00      	cmp	r3, #0
 8003572:	d109      	bne.n	8003588 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7fd f9e9 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff19 	bl	80033c4 <LL_ADC_IsDeepPowerDownEnabled>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d004      	beq.n	80035a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff feff 	bl	80033a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ff34 	bl	8003414 <LL_ADC_IsInternalRegulatorEnabled>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d114      	bne.n	80035dc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff18 	bl	80033ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035bc:	4b87      	ldr	r3, [pc, #540]	; (80037dc <HAL_ADC_Init+0x290>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	4a87      	ldr	r2, [pc, #540]	; (80037e0 <HAL_ADC_Init+0x294>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	099b      	lsrs	r3, r3, #6
 80035ca:	3301      	adds	r3, #1
 80035cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035ce:	e002      	b.n	80035d6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f9      	bne.n	80035d0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff17 	bl	8003414 <LL_ADC_IsInternalRegulatorEnabled>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10d      	bne.n	8003608 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f0:	f043 0210 	orr.w	r2, r3, #16
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff77 	bl	8003500 <LL_ADC_REG_IsConversionOngoing>
 8003612:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	f040 8129 	bne.w	8003874 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f040 8125 	bne.w	8003874 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003632:	f043 0202 	orr.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff24 	bl	800348c <LL_ADC_IsEnabled>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d136      	bne.n	80036b8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a65      	ldr	r2, [pc, #404]	; (80037e4 <HAL_ADC_Init+0x298>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_ADC_Init+0x112>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a63      	ldr	r2, [pc, #396]	; (80037e8 <HAL_ADC_Init+0x29c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d10e      	bne.n	800367c <HAL_ADC_Init+0x130>
 800365e:	4861      	ldr	r0, [pc, #388]	; (80037e4 <HAL_ADC_Init+0x298>)
 8003660:	f7ff ff14 	bl	800348c <LL_ADC_IsEnabled>
 8003664:	4604      	mov	r4, r0
 8003666:	4860      	ldr	r0, [pc, #384]	; (80037e8 <HAL_ADC_Init+0x29c>)
 8003668:	f7ff ff10 	bl	800348c <LL_ADC_IsEnabled>
 800366c:	4603      	mov	r3, r0
 800366e:	4323      	orrs	r3, r4
 8003670:	2b00      	cmp	r3, #0
 8003672:	bf0c      	ite	eq
 8003674:	2301      	moveq	r3, #1
 8003676:	2300      	movne	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e008      	b.n	800368e <HAL_ADC_Init+0x142>
 800367c:	485b      	ldr	r0, [pc, #364]	; (80037ec <HAL_ADC_Init+0x2a0>)
 800367e:	f7ff ff05 	bl	800348c <LL_ADC_IsEnabled>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a53      	ldr	r2, [pc, #332]	; (80037e4 <HAL_ADC_Init+0x298>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_ADC_Init+0x15a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a51      	ldr	r2, [pc, #324]	; (80037e8 <HAL_ADC_Init+0x29c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_Init+0x15e>
 80036a6:	4a52      	ldr	r2, [pc, #328]	; (80037f0 <HAL_ADC_Init+0x2a4>)
 80036a8:	e000      	b.n	80036ac <HAL_ADC_Init+0x160>
 80036aa:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_ADC_Init+0x2a8>)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f7ff fd3c 	bl	8003130 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80036b8:	f7ff fd18 	bl	80030ec <HAL_GetREVID>
 80036bc:	4603      	mov	r3, r0
 80036be:	f241 0203 	movw	r2, #4099	; 0x1003
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d914      	bls.n	80036f0 <HAL_ADC_Init+0x1a4>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d110      	bne.n	80036f0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7d5b      	ldrb	r3, [r3, #21]
 80036d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036d8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80036de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	7f1b      	ldrb	r3, [r3, #28]
 80036e4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80036e6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036e8:	f043 030c 	orr.w	r3, r3, #12
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e00d      	b.n	800370c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	7d5b      	ldrb	r3, [r3, #21]
 80036f4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036fa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003700:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	7f1b      	ldrb	r3, [r3, #28]
 8003706:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	7f1b      	ldrb	r3, [r3, #28]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d106      	bne.n	8003722 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	3b01      	subs	r3, #1
 800371a:	045b      	lsls	r3, r3, #17
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <HAL_ADC_Init+0x2ac>)
 8003746:	4013      	ands	r3, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	69b9      	ldr	r1, [r7, #24]
 800374e:	430b      	orrs	r3, r1
 8003750:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fed2 	bl	8003500 <LL_ADC_REG_IsConversionOngoing>
 800375c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fedf 	bl	8003526 <LL_ADC_INJ_IsConversionOngoing>
 8003768:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d15f      	bne.n	8003830 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d15c      	bne.n	8003830 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7d1b      	ldrb	r3, [r3, #20]
 800377a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <HAL_ADC_Init+0x2b0>)
 800378c:	4013      	ands	r3, r2
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	69b9      	ldr	r1, [r7, #24]
 8003794:	430b      	orrs	r3, r1
 8003796:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d130      	bne.n	8003804 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	4b14      	ldr	r3, [pc, #80]	; (8003800 <HAL_ADC_Init+0x2b4>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80037b6:	3a01      	subs	r2, #1
 80037b8:	0411      	lsls	r1, r2, #16
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037be:	4311      	orrs	r1, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037c4:	4311      	orrs	r1, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037ca:	430a      	orrs	r2, r1
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0201 	orr.w	r2, r2, #1
 80037d6:	611a      	str	r2, [r3, #16]
 80037d8:	e01c      	b.n	8003814 <HAL_ADC_Init+0x2c8>
 80037da:	bf00      	nop
 80037dc:	24000088 	.word	0x24000088
 80037e0:	053e2d63 	.word	0x053e2d63
 80037e4:	40022000 	.word	0x40022000
 80037e8:	40022100 	.word	0x40022100
 80037ec:	58026000 	.word	0x58026000
 80037f0:	40022300 	.word	0x40022300
 80037f4:	58026300 	.word	0x58026300
 80037f8:	fff0c003 	.word	0xfff0c003
 80037fc:	ffffbffc 	.word	0xffffbffc
 8003800:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fdec 	bl	8004408 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d10c      	bne.n	8003852 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f023 010f 	bic.w	r1, r3, #15
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	1e5a      	subs	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
 8003850:	e007      	b.n	8003862 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 020f 	bic.w	r2, r2, #15
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	f043 0201 	orr.w	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	655a      	str	r2, [r3, #84]	; 0x54
 8003872:	e007      	b.n	8003884 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	f043 0210 	orr.w	r2, r3, #16
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003884:	7ffb      	ldrb	r3, [r7, #31]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3724      	adds	r7, #36	; 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	bf00      	nop

08003890 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a55      	ldr	r2, [pc, #340]	; (80039f8 <HAL_ADC_Start_DMA+0x168>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_ADC_Start_DMA+0x20>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a54      	ldr	r2, [pc, #336]	; (80039fc <HAL_ADC_Start_DMA+0x16c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_Start_DMA+0x24>
 80038b0:	4b53      	ldr	r3, [pc, #332]	; (8003a00 <HAL_ADC_Start_DMA+0x170>)
 80038b2:	e000      	b.n	80038b6 <HAL_ADC_Start_DMA+0x26>
 80038b4:	4b53      	ldr	r3, [pc, #332]	; (8003a04 <HAL_ADC_Start_DMA+0x174>)
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fd64 	bl	8003384 <LL_ADC_GetMultimode>
 80038bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff fe1c 	bl	8003500 <LL_ADC_REG_IsConversionOngoing>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f040 808c 	bne.w	80039e8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_ADC_Start_DMA+0x4e>
 80038da:	2302      	movs	r3, #2
 80038dc:	e087      	b.n	80039ee <HAL_ADC_Start_DMA+0x15e>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	d002      	beq.n	80038f8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b09      	cmp	r3, #9
 80038f6:	d170      	bne.n	80039da <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fc07 	bl	800410c <ADC_Enable>
 80038fe:	4603      	mov	r3, r0
 8003900:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003902:	7dfb      	ldrb	r3, [r7, #23]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d163      	bne.n	80039d0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800390c:	4b3e      	ldr	r3, [pc, #248]	; (8003a08 <HAL_ADC_Start_DMA+0x178>)
 800390e:	4013      	ands	r3, r2
 8003910:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a37      	ldr	r2, [pc, #220]	; (80039fc <HAL_ADC_Start_DMA+0x16c>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d002      	beq.n	8003928 <HAL_ADC_Start_DMA+0x98>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	e000      	b.n	800392a <HAL_ADC_Start_DMA+0x9a>
 8003928:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <HAL_ADC_Start_DMA+0x168>)
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	6812      	ldr	r2, [r2, #0]
 800392e:	4293      	cmp	r3, r2
 8003930:	d002      	beq.n	8003938 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d006      	beq.n	800395e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003954:	f023 0206 	bic.w	r2, r3, #6
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	659a      	str	r2, [r3, #88]	; 0x58
 800395c:	e002      	b.n	8003964 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003968:	4a28      	ldr	r2, [pc, #160]	; (8003a0c <HAL_ADC_Start_DMA+0x17c>)
 800396a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <HAL_ADC_Start_DMA+0x180>)
 8003972:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003978:	4a26      	ldr	r2, [pc, #152]	; (8003a14 <HAL_ADC_Start_DMA+0x184>)
 800397a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	221c      	movs	r2, #28
 8003982:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0210 	orr.w	r2, r2, #16
 800399a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f7ff fc89 	bl	80032be <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3340      	adds	r3, #64	; 0x40
 80039b6:	4619      	mov	r1, r3
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f002 f80e 	bl	80059dc <HAL_DMA_Start_IT>
 80039c0:	4603      	mov	r3, r0
 80039c2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff fd85 	bl	80034d8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80039ce:	e00d      	b.n	80039ec <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80039d8:	e008      	b.n	80039ec <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80039e6:	e001      	b.n	80039ec <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
 80039ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40022000 	.word	0x40022000
 80039fc:	40022100 	.word	0x40022100
 8003a00:	40022300 	.word	0x40022300
 8003a04:	58026300 	.word	0x58026300
 8003a08:	fffff0fe 	.word	0xfffff0fe
 8003a0c:	080042df 	.word	0x080042df
 8003a10:	080043b7 	.word	0x080043b7
 8003a14:	080043d3 	.word	0x080043d3

08003a18 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b0a1      	sub	sp, #132	; 0x84
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4a65      	ldr	r2, [pc, #404]	; (8003c04 <HAL_ADC_ConfigChannel+0x1b0>)
 8003a6e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x2a>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e32e      	b.n	80040dc <HAL_ADC_ConfigChannel+0x688>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fd38 	bl	8003500 <LL_ADC_REG_IsConversionOngoing>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 8313 	bne.w	80040be <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	db2c      	blt.n	8003afa <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d108      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x6a>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	0e9b      	lsrs	r3, r3, #26
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	e016      	b.n	8003aec <HAL_ADC_ConfigChannel+0x98>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ace:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003ad6:	2320      	movs	r3, #32
 8003ad8:	e003      	b.n	8003ae2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003adc:	fab3 f383 	clz	r3, r3
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	69d1      	ldr	r1, [r2, #28]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	430b      	orrs	r3, r1
 8003af8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f7ff fbad 	bl	8003266 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff fcf5 	bl	8003500 <LL_ADC_REG_IsConversionOngoing>
 8003b16:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fd02 	bl	8003526 <LL_ADC_INJ_IsConversionOngoing>
 8003b22:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f040 80b8 	bne.w	8003c9c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f040 80b4 	bne.w	8003c9c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	6819      	ldr	r1, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	461a      	mov	r2, r3
 8003b42:	f7ff fbcf 	bl	80032e4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <HAL_ADC_ConfigChannel+0x1b4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b52:	d10b      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x118>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	695a      	ldr	r2, [r3, #20]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	089b      	lsrs	r3, r3, #2
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	e01d      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x154>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10b      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x13e>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	089b      	lsrs	r3, r3, #2
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	e00a      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x154>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	089b      	lsrs	r3, r3, #2
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d02c      	beq.n	8003c0c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6919      	ldr	r1, [r3, #16]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bc0:	f7ff faea 	bl	8003198 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	6919      	ldr	r1, [r3, #16]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	7e5b      	ldrb	r3, [r3, #25]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d102      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x186>
 8003bd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bd8:	e000      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x188>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f7ff fb14 	bl	800320a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6919      	ldr	r1, [r3, #16]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	7e1b      	ldrb	r3, [r3, #24]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d102      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x1a4>
 8003bf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bf6:	e000      	b.n	8003bfa <HAL_ADC_ConfigChannel+0x1a6>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f7ff faec 	bl	80031d8 <LL_ADC_SetDataRightShift>
 8003c00:	e04c      	b.n	8003c9c <HAL_ADC_ConfigChannel+0x248>
 8003c02:	bf00      	nop
 8003c04:	47ff0000 	.word	0x47ff0000
 8003c08:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	069b      	lsls	r3, r3, #26
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d107      	bne.n	8003c30 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c2e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	069b      	lsls	r3, r3, #26
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d107      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c52:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	069b      	lsls	r3, r3, #26
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d107      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c76:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	069b      	lsls	r3, r3, #26
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d107      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003c9a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fbf3 	bl	800348c <LL_ADC_IsEnabled>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f040 8211 	bne.w	80040d0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6819      	ldr	r1, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f7ff fb3e 	bl	800333c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4aa1      	ldr	r2, [pc, #644]	; (8003f4c <HAL_ADC_ConfigChannel+0x4f8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	f040 812e 	bne.w	8003f28 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <HAL_ADC_ConfigChannel+0x2a0>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	0e9b      	lsrs	r3, r3, #26
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f003 031f 	and.w	r3, r3, #31
 8003ce8:	2b09      	cmp	r3, #9
 8003cea:	bf94      	ite	ls
 8003cec:	2301      	movls	r3, #1
 8003cee:	2300      	movhi	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e019      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x2d4>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	e003      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	2b09      	cmp	r3, #9
 8003d20:	bf94      	ite	ls
 8003d22:	2301      	movls	r3, #1
 8003d24:	2300      	movhi	r3, #0
 8003d26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d079      	beq.n	8003e20 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d107      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x2f4>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0e9b      	lsrs	r3, r3, #26
 8003d3e:	3301      	adds	r3, #1
 8003d40:	069b      	lsls	r3, r3, #26
 8003d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d46:	e015      	b.n	8003d74 <HAL_ADC_ConfigChannel+0x320>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d58:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003d5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003d60:	2320      	movs	r3, #32
 8003d62:	e003      	b.n	8003d6c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003d64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d66:	fab3 f383 	clz	r3, r3
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	069b      	lsls	r3, r3, #26
 8003d70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d109      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x340>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0e9b      	lsrs	r3, r3, #26
 8003d86:	3301      	adds	r3, #1
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	e017      	b.n	8003dc4 <HAL_ADC_ConfigChannel+0x370>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003dac:	2320      	movs	r3, #32
 8003dae:	e003      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db2:	fab3 f383 	clz	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	ea42 0103 	orr.w	r1, r2, r3
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <HAL_ADC_ConfigChannel+0x396>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	0e9b      	lsrs	r3, r3, #26
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f003 021f 	and.w	r2, r3, #31
 8003de0:	4613      	mov	r3, r2
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	4413      	add	r3, r2
 8003de6:	051b      	lsls	r3, r3, #20
 8003de8:	e018      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x3c8>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003e02:	2320      	movs	r3, #32
 8003e04:	e003      	b.n	8003e0e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	fab3 f383 	clz	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	f003 021f 	and.w	r2, r3, #31
 8003e14:	4613      	mov	r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4413      	add	r3, r2
 8003e1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	e07e      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d107      	bne.n	8003e3c <HAL_ADC_ConfigChannel+0x3e8>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	0e9b      	lsrs	r3, r3, #26
 8003e32:	3301      	adds	r3, #1
 8003e34:	069b      	lsls	r3, r3, #26
 8003e36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e3a:	e015      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x414>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e44:	fa93 f3a3 	rbit	r3, r3
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003e54:	2320      	movs	r3, #32
 8003e56:	e003      	b.n	8003e60 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	fab3 f383 	clz	r3, r3
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	3301      	adds	r3, #1
 8003e62:	069b      	lsls	r3, r3, #26
 8003e64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x434>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	0e9b      	lsrs	r3, r3, #26
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2101      	movs	r1, #1
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	e017      	b.n	8003eb8 <HAL_ADC_ConfigChannel+0x464>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	fa93 f3a3 	rbit	r3, r3
 8003e94:	61bb      	str	r3, [r7, #24]
  return result;
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003ea0:	2320      	movs	r3, #32
 8003ea2:	e003      	b.n	8003eac <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb8:	ea42 0103 	orr.w	r1, r2, r3
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10d      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0x490>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	0e9b      	lsrs	r3, r3, #26
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f003 021f 	and.w	r2, r3, #31
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	4413      	add	r3, r2
 8003eda:	3b1e      	subs	r3, #30
 8003edc:	051b      	lsls	r3, r3, #20
 8003ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	e01b      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x4c8>
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	60fb      	str	r3, [r7, #12]
  return result;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003efc:	2320      	movs	r3, #32
 8003efe:	e003      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	3301      	adds	r3, #1
 8003f0a:	f003 021f 	and.w	r2, r3, #31
 8003f0e:	4613      	mov	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	3b1e      	subs	r3, #30
 8003f16:	051b      	lsls	r3, r3, #20
 8003f18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	6892      	ldr	r2, [r2, #8]
 8003f22:	4619      	mov	r1, r3
 8003f24:	f7ff f9de 	bl	80032e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f280 80cf 	bge.w	80040d0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a06      	ldr	r2, [pc, #24]	; (8003f50 <HAL_ADC_ConfigChannel+0x4fc>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_ADC_ConfigChannel+0x4f2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <HAL_ADC_ConfigChannel+0x500>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d10a      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x508>
 8003f46:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <HAL_ADC_ConfigChannel+0x504>)
 8003f48:	e009      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x50a>
 8003f4a:	bf00      	nop
 8003f4c:	47ff0000 	.word	0x47ff0000
 8003f50:	40022000 	.word	0x40022000
 8003f54:	40022100 	.word	0x40022100
 8003f58:	40022300 	.word	0x40022300
 8003f5c:	4b61      	ldr	r3, [pc, #388]	; (80040e4 <HAL_ADC_ConfigChannel+0x690>)
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff f90c 	bl	800317c <LL_ADC_GetCommonPathInternalCh>
 8003f64:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a5f      	ldr	r2, [pc, #380]	; (80040e8 <HAL_ADC_ConfigChannel+0x694>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <HAL_ADC_ConfigChannel+0x526>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a5d      	ldr	r2, [pc, #372]	; (80040ec <HAL_ADC_ConfigChannel+0x698>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d10e      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x544>
 8003f7a:	485b      	ldr	r0, [pc, #364]	; (80040e8 <HAL_ADC_ConfigChannel+0x694>)
 8003f7c:	f7ff fa86 	bl	800348c <LL_ADC_IsEnabled>
 8003f80:	4604      	mov	r4, r0
 8003f82:	485a      	ldr	r0, [pc, #360]	; (80040ec <HAL_ADC_ConfigChannel+0x698>)
 8003f84:	f7ff fa82 	bl	800348c <LL_ADC_IsEnabled>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	4323      	orrs	r3, r4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e008      	b.n	8003faa <HAL_ADC_ConfigChannel+0x556>
 8003f98:	4855      	ldr	r0, [pc, #340]	; (80040f0 <HAL_ADC_ConfigChannel+0x69c>)
 8003f9a:	f7ff fa77 	bl	800348c <LL_ADC_IsEnabled>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d07d      	beq.n	80040aa <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a50      	ldr	r2, [pc, #320]	; (80040f4 <HAL_ADC_ConfigChannel+0x6a0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d130      	bne.n	800401a <HAL_ADC_ConfigChannel+0x5c6>
 8003fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d12b      	bne.n	800401a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a4a      	ldr	r2, [pc, #296]	; (80040f0 <HAL_ADC_ConfigChannel+0x69c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	f040 8081 	bne.w	80040d0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a45      	ldr	r2, [pc, #276]	; (80040e8 <HAL_ADC_ConfigChannel+0x694>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <HAL_ADC_ConfigChannel+0x58e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a43      	ldr	r2, [pc, #268]	; (80040ec <HAL_ADC_ConfigChannel+0x698>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x592>
 8003fe2:	4a45      	ldr	r2, [pc, #276]	; (80040f8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003fe4:	e000      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0x594>
 8003fe6:	4a3f      	ldr	r2, [pc, #252]	; (80040e4 <HAL_ADC_ConfigChannel+0x690>)
 8003fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f7ff f8b0 	bl	8003156 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <HAL_ADC_ConfigChannel+0x6a8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	099b      	lsrs	r3, r3, #6
 8003ffc:	4a40      	ldr	r2, [pc, #256]	; (8004100 <HAL_ADC_ConfigChannel+0x6ac>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	099b      	lsrs	r3, r3, #6
 8004004:	3301      	adds	r3, #1
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800400a:	e002      	b.n	8004012 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	3b01      	subs	r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1f9      	bne.n	800400c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004018:	e05a      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a39      	ldr	r2, [pc, #228]	; (8004104 <HAL_ADC_ConfigChannel+0x6b0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d11e      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x60e>
 8004024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d119      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a2f      	ldr	r2, [pc, #188]	; (80040f0 <HAL_ADC_ConfigChannel+0x69c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d14b      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2a      	ldr	r2, [pc, #168]	; (80040e8 <HAL_ADC_ConfigChannel+0x694>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d004      	beq.n	800404c <HAL_ADC_ConfigChannel+0x5f8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a29      	ldr	r2, [pc, #164]	; (80040ec <HAL_ADC_ConfigChannel+0x698>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d101      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x5fc>
 800404c:	4a2a      	ldr	r2, [pc, #168]	; (80040f8 <HAL_ADC_ConfigChannel+0x6a4>)
 800404e:	e000      	b.n	8004052 <HAL_ADC_ConfigChannel+0x5fe>
 8004050:	4a24      	ldr	r2, [pc, #144]	; (80040e4 <HAL_ADC_ConfigChannel+0x690>)
 8004052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004054:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004058:	4619      	mov	r1, r3
 800405a:	4610      	mov	r0, r2
 800405c:	f7ff f87b 	bl	8003156 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004060:	e036      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a28      	ldr	r2, [pc, #160]	; (8004108 <HAL_ADC_ConfigChannel+0x6b4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d131      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
 800406c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d12c      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <HAL_ADC_ConfigChannel+0x69c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d127      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_ADC_ConfigChannel+0x694>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d004      	beq.n	8004094 <HAL_ADC_ConfigChannel+0x640>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a17      	ldr	r2, [pc, #92]	; (80040ec <HAL_ADC_ConfigChannel+0x698>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x644>
 8004094:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <HAL_ADC_ConfigChannel+0x6a4>)
 8004096:	e000      	b.n	800409a <HAL_ADC_ConfigChannel+0x646>
 8004098:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <HAL_ADC_ConfigChannel+0x690>)
 800409a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f7ff f857 	bl	8003156 <LL_ADC_SetCommonPathInternalCh>
 80040a8:	e012      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	f043 0220 	orr.w	r2, r3, #32
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80040bc:	e008      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f043 0220 	orr.w	r2, r3, #32
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3784      	adds	r7, #132	; 0x84
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd90      	pop	{r4, r7, pc}
 80040e4:	58026300 	.word	0x58026300
 80040e8:	40022000 	.word	0x40022000
 80040ec:	40022100 	.word	0x40022100
 80040f0:	58026000 	.word	0x58026000
 80040f4:	cb840000 	.word	0xcb840000
 80040f8:	40022300 	.word	0x40022300
 80040fc:	24000088 	.word	0x24000088
 8004100:	053e2d63 	.word	0x053e2d63
 8004104:	c7520000 	.word	0xc7520000
 8004108:	cfb80000 	.word	0xcfb80000

0800410c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff f9b7 	bl	800348c <LL_ADC_IsEnabled>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d16e      	bne.n	8004202 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	4b38      	ldr	r3, [pc, #224]	; (800420c <ADC_Enable+0x100>)
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00d      	beq.n	800414e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	f043 0210 	orr.w	r2, r3, #16
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	f043 0201 	orr.w	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e05a      	b.n	8004204 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff f972 	bl	800343c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004158:	f7fe ffbc 	bl	80030d4 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a2b      	ldr	r2, [pc, #172]	; (8004210 <ADC_Enable+0x104>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d004      	beq.n	8004172 <ADC_Enable+0x66>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a29      	ldr	r2, [pc, #164]	; (8004214 <ADC_Enable+0x108>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d101      	bne.n	8004176 <ADC_Enable+0x6a>
 8004172:	4b29      	ldr	r3, [pc, #164]	; (8004218 <ADC_Enable+0x10c>)
 8004174:	e000      	b.n	8004178 <ADC_Enable+0x6c>
 8004176:	4b29      	ldr	r3, [pc, #164]	; (800421c <ADC_Enable+0x110>)
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff f903 	bl	8003384 <LL_ADC_GetMultimode>
 800417e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a23      	ldr	r2, [pc, #140]	; (8004214 <ADC_Enable+0x108>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d002      	beq.n	8004190 <ADC_Enable+0x84>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	e000      	b.n	8004192 <ADC_Enable+0x86>
 8004190:	4b1f      	ldr	r3, [pc, #124]	; (8004210 <ADC_Enable+0x104>)
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	4293      	cmp	r3, r2
 8004198:	d02c      	beq.n	80041f4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d130      	bne.n	8004202 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041a0:	e028      	b.n	80041f4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff f970 	bl	800348c <LL_ADC_IsEnabled>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d104      	bne.n	80041bc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff f940 	bl	800343c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041bc:	f7fe ff8a 	bl	80030d4 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d914      	bls.n	80041f4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d00d      	beq.n	80041f4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041dc:	f043 0210 	orr.w	r2, r3, #16
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e8:	f043 0201 	orr.w	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e007      	b.n	8004204 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d1cf      	bne.n	80041a2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	8000003f 	.word	0x8000003f
 8004210:	40022000 	.word	0x40022000
 8004214:	40022100 	.word	0x40022100
 8004218:	40022300 	.word	0x40022300
 800421c:	58026300 	.word	0x58026300

08004220 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff f940 	bl	80034b2 <LL_ADC_IsDisableOngoing>
 8004232:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff f927 	bl	800348c <LL_ADC_IsEnabled>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d047      	beq.n	80042d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d144      	bne.n	80042d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 030d 	and.w	r3, r3, #13
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10c      	bne.n	8004272 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff f901 	bl	8003464 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2203      	movs	r2, #3
 8004268:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800426a:	f7fe ff33 	bl	80030d4 <HAL_GetTick>
 800426e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004270:	e029      	b.n	80042c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f043 0210 	orr.w	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e023      	b.n	80042d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800428e:	f7fe ff21 	bl	80030d4 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d914      	bls.n	80042c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00d      	beq.n	80042c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ae:	f043 0210 	orr.w	r2, r3, #16
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	f043 0201 	orr.w	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e007      	b.n	80042d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1dc      	bne.n	800428e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d14b      	bne.n	8004390 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d021      	beq.n	8004356 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe ff92 	bl	8003240 <LL_ADC_REG_IsTriggerSourceSWStart>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d032      	beq.n	8004388 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d12b      	bne.n	8004388 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004334:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d11f      	bne.n	8004388 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	f043 0201 	orr.w	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	655a      	str	r2, [r3, #84]	; 0x54
 8004354:	e018      	b.n	8004388 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d111      	bne.n	8004388 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d105      	bne.n	8004388 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	f043 0201 	orr.w	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff fb45 	bl	8003a18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800438e:	e00e      	b.n	80043ae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fb4f 	bl	8003a40 <HAL_ADC_ErrorCallback>
}
 80043a2:	e004      	b.n	80043ae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043c4:	68f8      	ldr	r0, [r7, #12]
 80043c6:	f7ff fb31 	bl	8003a2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f0:	f043 0204 	orr.w	r2, r3, #4
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff fb21 	bl	8003a40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a7a      	ldr	r2, [pc, #488]	; (8004600 <ADC_ConfigureBoostMode+0x1f8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <ADC_ConfigureBoostMode+0x1c>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a79      	ldr	r2, [pc, #484]	; (8004604 <ADC_ConfigureBoostMode+0x1fc>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d109      	bne.n	8004438 <ADC_ConfigureBoostMode+0x30>
 8004424:	4b78      	ldr	r3, [pc, #480]	; (8004608 <ADC_ConfigureBoostMode+0x200>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800442c:	2b00      	cmp	r3, #0
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	e008      	b.n	800444a <ADC_ConfigureBoostMode+0x42>
 8004438:	4b74      	ldr	r3, [pc, #464]	; (800460c <ADC_ConfigureBoostMode+0x204>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01c      	beq.n	8004488 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800444e:	f005 f88b 	bl	8009568 <HAL_RCC_GetHCLKFreq>
 8004452:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800445c:	d010      	beq.n	8004480 <ADC_ConfigureBoostMode+0x78>
 800445e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004462:	d873      	bhi.n	800454c <ADC_ConfigureBoostMode+0x144>
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d002      	beq.n	8004470 <ADC_ConfigureBoostMode+0x68>
 800446a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800446e:	d16d      	bne.n	800454c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	0c1b      	lsrs	r3, r3, #16
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	60fb      	str	r3, [r7, #12]
        break;
 800447e:	e068      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	60fb      	str	r3, [r7, #12]
        break;
 8004486:	e064      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004488:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	f006 fb12 	bl	800aab8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004494:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800449e:	d051      	beq.n	8004544 <ADC_ConfigureBoostMode+0x13c>
 80044a0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80044a4:	d854      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044a6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044aa:	d047      	beq.n	800453c <ADC_ConfigureBoostMode+0x134>
 80044ac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80044b0:	d84e      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044b2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044b6:	d03d      	beq.n	8004534 <ADC_ConfigureBoostMode+0x12c>
 80044b8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80044bc:	d848      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044c2:	d033      	beq.n	800452c <ADC_ConfigureBoostMode+0x124>
 80044c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044c8:	d842      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044ca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044ce:	d029      	beq.n	8004524 <ADC_ConfigureBoostMode+0x11c>
 80044d0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80044d4:	d83c      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044d6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044da:	d01a      	beq.n	8004512 <ADC_ConfigureBoostMode+0x10a>
 80044dc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044e0:	d836      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044e2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044e6:	d014      	beq.n	8004512 <ADC_ConfigureBoostMode+0x10a>
 80044e8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80044ec:	d830      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f2:	d00e      	beq.n	8004512 <ADC_ConfigureBoostMode+0x10a>
 80044f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f8:	d82a      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 80044fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80044fe:	d008      	beq.n	8004512 <ADC_ConfigureBoostMode+0x10a>
 8004500:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004504:	d824      	bhi.n	8004550 <ADC_ConfigureBoostMode+0x148>
 8004506:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800450a:	d002      	beq.n	8004512 <ADC_ConfigureBoostMode+0x10a>
 800450c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004510:	d11e      	bne.n	8004550 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	0c9b      	lsrs	r3, r3, #18
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	60fb      	str	r3, [r7, #12]
        break;
 8004522:	e016      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	60fb      	str	r3, [r7, #12]
        break;
 800452a:	e012      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	60fb      	str	r3, [r7, #12]
        break;
 8004532:	e00e      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	099b      	lsrs	r3, r3, #6
 8004538:	60fb      	str	r3, [r7, #12]
        break;
 800453a:	e00a      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	09db      	lsrs	r3, r3, #7
 8004540:	60fb      	str	r3, [r7, #12]
        break;
 8004542:	e006      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	60fb      	str	r3, [r7, #12]
        break;
 800454a:	e002      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
        break;
 800454c:	bf00      	nop
 800454e:	e000      	b.n	8004552 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004550:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004552:	f7fe fdcb 	bl	80030ec <HAL_GetREVID>
 8004556:	4603      	mov	r3, r0
 8004558:	f241 0203 	movw	r2, #4099	; 0x1003
 800455c:	4293      	cmp	r3, r2
 800455e:	d815      	bhi.n	800458c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a2b      	ldr	r2, [pc, #172]	; (8004610 <ADC_ConfigureBoostMode+0x208>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d908      	bls.n	800457a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004576:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004578:	e03e      	b.n	80045f8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004588:	609a      	str	r2, [r3, #8]
}
 800458a:	e035      	b.n	80045f8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a1f      	ldr	r2, [pc, #124]	; (8004614 <ADC_ConfigureBoostMode+0x20c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d808      	bhi.n	80045ac <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045a8:	609a      	str	r2, [r3, #8]
}
 80045aa:	e025      	b.n	80045f8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a1a      	ldr	r2, [pc, #104]	; (8004618 <ADC_ConfigureBoostMode+0x210>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d80a      	bhi.n	80045ca <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c6:	609a      	str	r2, [r3, #8]
}
 80045c8:	e016      	b.n	80045f8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a13      	ldr	r2, [pc, #76]	; (800461c <ADC_ConfigureBoostMode+0x214>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d80a      	bhi.n	80045e8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e4:	609a      	str	r2, [r3, #8]
}
 80045e6:	e007      	b.n	80045f8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40022000 	.word	0x40022000
 8004604:	40022100 	.word	0x40022100
 8004608:	40022300 	.word	0x40022300
 800460c:	58026300 	.word	0x58026300
 8004610:	01312d00 	.word	0x01312d00
 8004614:	005f5e10 	.word	0x005f5e10
 8004618:	00bebc20 	.word	0x00bebc20
 800461c:	017d7840 	.word	0x017d7840

08004620 <LL_ADC_IsEnabled>:
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <LL_ADC_IsEnabled+0x18>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <LL_ADC_IsEnabled+0x1a>
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <LL_ADC_StartCalibration>:
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <LL_ADC_StartCalibration+0x38>)
 800465a:	4013      	ands	r3, r2
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004668:	430a      	orrs	r2, r1
 800466a:	4313      	orrs	r3, r2
 800466c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	609a      	str	r2, [r3, #8]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	3ffeffc0 	.word	0x3ffeffc0

08004684 <LL_ADC_IsCalibrationOnGoing>:
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004698:	d101      	bne.n	800469e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <LL_ADC_REG_IsConversionOngoing>:
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d101      	bne.n	80046c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
	...

080046d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_ADCEx_Calibration_Start+0x1e>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e04c      	b.n	800478c <HAL_ADCEx_Calibration_Start+0xb8>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fd90 	bl	8004220 <ADC_Disable>
 8004700:	4603      	mov	r3, r0
 8004702:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004704:	7dfb      	ldrb	r3, [r7, #23]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d135      	bne.n	8004776 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800470e:	4b21      	ldr	r3, [pc, #132]	; (8004794 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004710:	4013      	ands	r3, r2
 8004712:	f043 0202 	orr.w	r2, r3, #2
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ff90 	bl	8004648 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004728:	e014      	b.n	8004754 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3301      	adds	r3, #1
 800472e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4a19      	ldr	r2, [pc, #100]	; (8004798 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d30d      	bcc.n	8004754 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473c:	f023 0312 	bic.w	r3, r3, #18
 8004740:	f043 0210 	orr.w	r2, r3, #16
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e01b      	b.n	800478c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff ff93 	bl	8004684 <LL_ADC_IsCalibrationOnGoing>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e2      	bne.n	800472a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	f023 0303 	bic.w	r3, r3, #3
 800476c:	f043 0201 	orr.w	r2, r3, #1
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	655a      	str	r2, [r3, #84]	; 0x54
 8004774:	e005      	b.n	8004782 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477a:	f043 0210 	orr.w	r2, r3, #16
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800478a:	7dfb      	ldrb	r3, [r7, #23]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	ffffeefd 	.word	0xffffeefd
 8004798:	25c3f800 	.word	0x25c3f800

0800479c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800479c:	b590      	push	{r4, r7, lr}
 800479e:	b09f      	sub	sp, #124	; 0x7c
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e0be      	b.n	8004938 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80047c2:	2300      	movs	r3, #0
 80047c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a5c      	ldr	r2, [pc, #368]	; (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d102      	bne.n	80047da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047d4:	4b5b      	ldr	r3, [pc, #364]	; (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	e001      	b.n	80047de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10b      	bne.n	80047fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e8:	f043 0220 	orr.w	r2, r3, #32
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e09d      	b.n	8004938 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff ff54 	bl	80046ac <LL_ADC_REG_IsConversionOngoing>
 8004804:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff ff4e 	bl	80046ac <LL_ADC_REG_IsConversionOngoing>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d17f      	bne.n	8004916 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004818:	2b00      	cmp	r3, #0
 800481a:	d17c      	bne.n	8004916 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a47      	ldr	r2, [pc, #284]	; (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a46      	ldr	r2, [pc, #280]	; (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d101      	bne.n	8004834 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004830:	4b45      	ldr	r3, [pc, #276]	; (8004948 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004832:	e000      	b.n	8004836 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004834:	4b45      	ldr	r3, [pc, #276]	; (800494c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004836:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d039      	beq.n	80048b4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	431a      	orrs	r2, r3
 800484e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004850:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a3a      	ldr	r2, [pc, #232]	; (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a38      	ldr	r2, [pc, #224]	; (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10e      	bne.n	8004884 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004866:	4836      	ldr	r0, [pc, #216]	; (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004868:	f7ff feda 	bl	8004620 <LL_ADC_IsEnabled>
 800486c:	4604      	mov	r4, r0
 800486e:	4835      	ldr	r0, [pc, #212]	; (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004870:	f7ff fed6 	bl	8004620 <LL_ADC_IsEnabled>
 8004874:	4603      	mov	r3, r0
 8004876:	4323      	orrs	r3, r4
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e008      	b.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004884:	4832      	ldr	r0, [pc, #200]	; (8004950 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004886:	f7ff fecb 	bl	8004620 <LL_ADC_IsEnabled>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d047      	beq.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800489a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	4b2d      	ldr	r3, [pc, #180]	; (8004954 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	6811      	ldr	r1, [r2, #0]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	6892      	ldr	r2, [r2, #8]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	431a      	orrs	r2, r3
 80048ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048b2:	e03a      	b.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80048b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1e      	ldr	r2, [pc, #120]	; (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1d      	ldr	r2, [pc, #116]	; (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d10e      	bne.n	80048f2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80048d4:	481a      	ldr	r0, [pc, #104]	; (8004940 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048d6:	f7ff fea3 	bl	8004620 <LL_ADC_IsEnabled>
 80048da:	4604      	mov	r4, r0
 80048dc:	4819      	ldr	r0, [pc, #100]	; (8004944 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048de:	f7ff fe9f 	bl	8004620 <LL_ADC_IsEnabled>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4323      	orrs	r3, r4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	e008      	b.n	8004904 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80048f2:	4817      	ldr	r0, [pc, #92]	; (8004950 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048f4:	f7ff fe94 	bl	8004620 <LL_ADC_IsEnabled>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d010      	beq.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800490e:	4013      	ands	r3, r2
 8004910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004912:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004914:	e009      	b.n	800492a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491a:	f043 0220 	orr.w	r2, r3, #32
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004928:	e000      	b.n	800492c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800492a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004934:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004938:	4618      	mov	r0, r3
 800493a:	377c      	adds	r7, #124	; 0x7c
 800493c:	46bd      	mov	sp, r7
 800493e:	bd90      	pop	{r4, r7, pc}
 8004940:	40022000 	.word	0x40022000
 8004944:	40022100 	.word	0x40022100
 8004948:	40022300 	.word	0x40022300
 800494c:	58026300 	.word	0x58026300
 8004950:	58026000 	.word	0x58026000
 8004954:	fffff0e0 	.word	0xfffff0e0

08004958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <__NVIC_SetPriorityGrouping+0x40>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004974:	4013      	ands	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <__NVIC_SetPriorityGrouping+0x44>)
 8004982:	4313      	orrs	r3, r2
 8004984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004986:	4a04      	ldr	r2, [pc, #16]	; (8004998 <__NVIC_SetPriorityGrouping+0x40>)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	60d3      	str	r3, [r2, #12]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000ed00 	.word	0xe000ed00
 800499c:	05fa0000 	.word	0x05fa0000

080049a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a4:	4b04      	ldr	r3, [pc, #16]	; (80049b8 <__NVIC_GetPriorityGrouping+0x18>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 0307 	and.w	r3, r3, #7
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	e000ed00 	.word	0xe000ed00

080049bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	db0b      	blt.n	80049e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ce:	88fb      	ldrh	r3, [r7, #6]
 80049d0:	f003 021f 	and.w	r2, r3, #31
 80049d4:	4907      	ldr	r1, [pc, #28]	; (80049f4 <__NVIC_EnableIRQ+0x38>)
 80049d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	2001      	movs	r0, #1
 80049de:	fa00 f202 	lsl.w	r2, r0, r2
 80049e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	e000e100 	.word	0xe000e100

080049f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	6039      	str	r1, [r7, #0]
 8004a02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	db0a      	blt.n	8004a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	490c      	ldr	r1, [pc, #48]	; (8004a44 <__NVIC_SetPriority+0x4c>)
 8004a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a16:	0112      	lsls	r2, r2, #4
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a20:	e00a      	b.n	8004a38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	4908      	ldr	r1, [pc, #32]	; (8004a48 <__NVIC_SetPriority+0x50>)
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	3b04      	subs	r3, #4
 8004a30:	0112      	lsls	r2, r2, #4
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	440b      	add	r3, r1
 8004a36:	761a      	strb	r2, [r3, #24]
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	e000e100 	.word	0xe000e100
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b089      	sub	sp, #36	; 0x24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f1c3 0307 	rsb	r3, r3, #7
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	bf28      	it	cs
 8004a6a:	2304      	movcs	r3, #4
 8004a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3304      	adds	r3, #4
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d902      	bls.n	8004a7c <NVIC_EncodePriority+0x30>
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3b03      	subs	r3, #3
 8004a7a:	e000      	b.n	8004a7e <NVIC_EncodePriority+0x32>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	43da      	mvns	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	401a      	ands	r2, r3
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9e:	43d9      	mvns	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa4:	4313      	orrs	r3, r2
         );
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3724      	adds	r7, #36	; 0x24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff ff4c 	bl	8004958 <__NVIC_SetPriorityGrouping>
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ad6:	f7ff ff63 	bl	80049a0 <__NVIC_GetPriorityGrouping>
 8004ada:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	6978      	ldr	r0, [r7, #20]
 8004ae2:	f7ff ffb3 	bl	8004a4c <NVIC_EncodePriority>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004aec:	4611      	mov	r1, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff ff82 	bl	80049f8 <__NVIC_SetPriority>
}
 8004af4:	bf00      	nop
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff ff56 	bl	80049bc <__NVIC_EnableIRQ>
}
 8004b10:	bf00      	nop
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e014      	b.n	8004b54 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	791b      	ldrb	r3, [r3, #4]
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d105      	bne.n	8004b40 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fc f852 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e046      	b.n	8004bfe <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	795b      	ldrb	r3, [r3, #5]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_DAC_Start+0x20>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e040      	b.n	8004bfe <HAL_DAC_Start+0xa2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6819      	ldr	r1, [r3, #0]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f003 0310 	and.w	r3, r3, #16
 8004b94:	2201      	movs	r2, #1
 8004b96:	409a      	lsls	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d11d      	bne.n	8004bf0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	605a      	str	r2, [r3, #4]
 8004bc4:	e014      	b.n	8004bf0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f003 0310 	and.w	r3, r3, #16
 8004bd6:	2102      	movs	r1, #2
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d107      	bne.n	8004bf0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0202 	orr.w	r2, r2, #2
 8004bee:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0a2      	b.n	8004d6a <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	795b      	ldrb	r3, [r3, #5]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d101      	bne.n	8004c30 <HAL_DAC_Start_DMA+0x24>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	e09c      	b.n	8004d6a <HAL_DAC_Start_DMA+0x15e>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2201      	movs	r2, #1
 8004c34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d129      	bne.n	8004c96 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4a4b      	ldr	r2, [pc, #300]	; (8004d74 <HAL_DAC_Start_DMA+0x168>)
 8004c48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4a4a      	ldr	r2, [pc, #296]	; (8004d78 <HAL_DAC_Start_DMA+0x16c>)
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	4a49      	ldr	r2, [pc, #292]	; (8004d7c <HAL_DAC_Start_DMA+0x170>)
 8004c58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c68:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_DAC_Start_DMA+0x6c>
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d005      	beq.n	8004c82 <HAL_DAC_Start_DMA+0x76>
 8004c76:	e009      	b.n	8004c8c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	613b      	str	r3, [r7, #16]
        break;
 8004c80:	e033      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	330c      	adds	r3, #12
 8004c88:	613b      	str	r3, [r7, #16]
        break;
 8004c8a:	e02e      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3310      	adds	r3, #16
 8004c92:	613b      	str	r3, [r7, #16]
        break;
 8004c94:	e029      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4a39      	ldr	r2, [pc, #228]	; (8004d80 <HAL_DAC_Start_DMA+0x174>)
 8004c9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	4a38      	ldr	r2, [pc, #224]	; (8004d84 <HAL_DAC_Start_DMA+0x178>)
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	4a37      	ldr	r2, [pc, #220]	; (8004d88 <HAL_DAC_Start_DMA+0x17c>)
 8004cac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004cbc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_DAC_Start_DMA+0xc0>
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d005      	beq.n	8004cd6 <HAL_DAC_Start_DMA+0xca>
 8004cca:	e009      	b.n	8004ce0 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3314      	adds	r3, #20
 8004cd2:	613b      	str	r3, [r7, #16]
        break;
 8004cd4:	e009      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3318      	adds	r3, #24
 8004cdc:	613b      	str	r3, [r7, #16]
        break;
 8004cde:	e004      	b.n	8004cea <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	331c      	adds	r3, #28
 8004ce6:	613b      	str	r3, [r7, #16]
        break;
 8004ce8:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d111      	bne.n	8004d14 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cfe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6898      	ldr	r0, [r3, #8]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	f000 fe67 	bl	80059dc <HAL_DMA_Start_IT>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	75fb      	strb	r3, [r7, #23]
 8004d12:	e010      	b.n	8004d36 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004d22:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	68d8      	ldr	r0, [r3, #12]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	f000 fe55 	bl	80059dc <HAL_DMA_Start_IT>
 8004d32:	4603      	mov	r3, r0
 8004d34:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10c      	bne.n	8004d5c <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6819      	ldr	r1, [r3, #0]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0310 	and.w	r3, r3, #16
 8004d4e:	2201      	movs	r2, #1
 8004d50:	409a      	lsls	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	e005      	b.n	8004d68 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f043 0204 	orr.w	r2, r3, #4
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	080051fd 	.word	0x080051fd
 8004d78:	0800521f 	.word	0x0800521f
 8004d7c:	0800523b 	.word	0x0800523b
 8004d80:	080052b9 	.word	0x080052b9
 8004d84:	080052db 	.word	0x080052db
 8004d88:	080052f7 	.word	0x080052f7

08004d8c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e03e      	b.n	8004e1e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43da      	mvns	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	400a      	ands	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6819      	ldr	r1, [r3, #0]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2201      	movs	r2, #1
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43da      	mvns	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	400a      	ands	r2, r1
 8004dd8:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10d      	bne.n	8004dfc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 f863 	bl	8005eb0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e00c      	b.n	8004e16 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 f855 	bl	8005eb0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004e14:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3c:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01d      	beq.n	8004e84 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d018      	beq.n	8004e84 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2204      	movs	r2, #4
 8004e56:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	f043 0201 	orr.w	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e7c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f86f 	bl	8004f62 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01d      	beq.n	8004eca <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d018      	beq.n	8004eca <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f043 0202 	orr.w	r2, r3, #2
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f9ed 	bl	80052a4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b087      	sub	sp, #28
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
 8004ede:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e015      	b.n	8004f1a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d105      	bne.n	8004f06 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4413      	add	r3, r2
 8004f00:	3308      	adds	r3, #8
 8004f02:	617b      	str	r3, [r7, #20]
 8004f04:	e004      	b.n	8004f10 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	461a      	mov	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_DAC_ConfigChannel+0x1e>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e12a      	b.n	80051f0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	795b      	ldrb	r3, [r3, #5]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_DAC_ConfigChannel+0x2e>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e124      	b.n	80051f0 <HAL_DAC_ConfigChannel+0x278>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d17a      	bne.n	80050b0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004fba:	f7fe f88b 	bl	80030d4 <HAL_GetTick>
 8004fbe:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d13d      	bne.n	8005042 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004fc6:	e018      	b.n	8004ffa <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004fc8:	f7fe f884 	bl	80030d4 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d911      	bls.n	8004ffa <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fdc:	4b86      	ldr	r3, [pc, #536]	; (80051f8 <HAL_DAC_ConfigChannel+0x280>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f043 0208 	orr.w	r2, r3, #8
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2203      	movs	r2, #3
 8004ff4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e0fa      	b.n	80051f0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005000:	4b7d      	ldr	r3, [pc, #500]	; (80051f8 <HAL_DAC_ConfigChannel+0x280>)
 8005002:	4013      	ands	r3, r2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1df      	bne.n	8004fc8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	6992      	ldr	r2, [r2, #24]
 8005010:	641a      	str	r2, [r3, #64]	; 0x40
 8005012:	e020      	b.n	8005056 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005014:	f7fe f85e 	bl	80030d4 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b01      	cmp	r3, #1
 8005020:	d90f      	bls.n	8005042 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005028:	2b00      	cmp	r3, #0
 800502a:	da0a      	bge.n	8005042 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f043 0208 	orr.w	r2, r3, #8
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2203      	movs	r2, #3
 800503c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e0d6      	b.n	80051f0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	2b00      	cmp	r3, #0
 800504a:	dbe3      	blt.n	8005014 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	6992      	ldr	r2, [r2, #24]
 8005054:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005066:	fa01 f303 	lsl.w	r3, r1, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	ea02 0103 	and.w	r1, r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	409a      	lsls	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	21ff      	movs	r1, #255	; 0xff
 8005092:	fa01 f303 	lsl.w	r3, r1, r3
 8005096:	43db      	mvns	r3, r3
 8005098:	ea02 0103 	and.w	r1, r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	6a1a      	ldr	r2, [r3, #32]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	409a      	lsls	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d11d      	bne.n	80050f4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	221f      	movs	r2, #31
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4013      	ands	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2207      	movs	r2, #7
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4013      	ands	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d102      	bne.n	800511e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005118:	2300      	movs	r3, #0
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
 800511c:	e00f      	b.n	800513e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	2b02      	cmp	r3, #2
 8005124:	d102      	bne.n	800512c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005126:	2301      	movs	r3, #1
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
 800512a:	e008      	b.n	800513e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d102      	bne.n	800513a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005134:	2301      	movs	r3, #1
 8005136:	627b      	str	r3, [r7, #36]	; 0x24
 8005138:	e001      	b.n	800513e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800513a:	2300      	movs	r3, #0
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	4313      	orrs	r3, r2
 8005148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f003 0310 	and.w	r3, r3, #16
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4313      	orrs	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6819      	ldr	r1, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	43da      	mvns	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	400a      	ands	r2, r1
 8005184:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4013      	ands	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6819      	ldr	r1, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	22c0      	movs	r2, #192	; 0xc0
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	43da      	mvns	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	400a      	ands	r2, r1
 80051de:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80051ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3728      	adds	r7, #40	; 0x28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20008000 	.word	0x20008000

080051fc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f7ff fe8b 	bl	8004f26 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2201      	movs	r2, #1
 8005214:	711a      	strb	r2, [r3, #4]
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f7ff fe84 	bl	8004f3a <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f043 0204 	orr.w	r2, r3, #4
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff fe7a 	bl	8004f4e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	711a      	strb	r2, [r3, #4]
}
 8005260:	bf00      	nop
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f7ff ffce 	bl	8005268 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	711a      	strb	r2, [r3, #4]
}
 80052d2:	bf00      	nop
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f7ff ffc7 	bl	800527c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80052ee:	bf00      	nop
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b084      	sub	sp, #16
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	f043 0204 	orr.w	r2, r3, #4
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f7ff ffbd 	bl	8005290 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2201      	movs	r2, #1
 800531a:	711a      	strb	r2, [r3, #4]
}
 800531c:	bf00      	nop
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800532c:	f7fd fed2 	bl	80030d4 <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e316      	b.n	800596a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a66      	ldr	r2, [pc, #408]	; (80054dc <HAL_DMA_Init+0x1b8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d04a      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a65      	ldr	r2, [pc, #404]	; (80054e0 <HAL_DMA_Init+0x1bc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d045      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a63      	ldr	r2, [pc, #396]	; (80054e4 <HAL_DMA_Init+0x1c0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d040      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a62      	ldr	r2, [pc, #392]	; (80054e8 <HAL_DMA_Init+0x1c4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d03b      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a60      	ldr	r2, [pc, #384]	; (80054ec <HAL_DMA_Init+0x1c8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d036      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a5f      	ldr	r2, [pc, #380]	; (80054f0 <HAL_DMA_Init+0x1cc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d031      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a5d      	ldr	r2, [pc, #372]	; (80054f4 <HAL_DMA_Init+0x1d0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d02c      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a5c      	ldr	r2, [pc, #368]	; (80054f8 <HAL_DMA_Init+0x1d4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d027      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a5a      	ldr	r2, [pc, #360]	; (80054fc <HAL_DMA_Init+0x1d8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d022      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a59      	ldr	r2, [pc, #356]	; (8005500 <HAL_DMA_Init+0x1dc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d01d      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a57      	ldr	r2, [pc, #348]	; (8005504 <HAL_DMA_Init+0x1e0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d018      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a56      	ldr	r2, [pc, #344]	; (8005508 <HAL_DMA_Init+0x1e4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d013      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a54      	ldr	r2, [pc, #336]	; (800550c <HAL_DMA_Init+0x1e8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00e      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a53      	ldr	r2, [pc, #332]	; (8005510 <HAL_DMA_Init+0x1ec>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d009      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a51      	ldr	r2, [pc, #324]	; (8005514 <HAL_DMA_Init+0x1f0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <HAL_DMA_Init+0xb8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a50      	ldr	r2, [pc, #320]	; (8005518 <HAL_DMA_Init+0x1f4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d101      	bne.n	80053e0 <HAL_DMA_Init+0xbc>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <HAL_DMA_Init+0xbe>
 80053e0:	2300      	movs	r3, #0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 813b 	beq.w	800565e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a37      	ldr	r2, [pc, #220]	; (80054dc <HAL_DMA_Init+0x1b8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d04a      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a36      	ldr	r2, [pc, #216]	; (80054e0 <HAL_DMA_Init+0x1bc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d045      	beq.n	8005498 <HAL_DMA_Init+0x174>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a34      	ldr	r2, [pc, #208]	; (80054e4 <HAL_DMA_Init+0x1c0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d040      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a33      	ldr	r2, [pc, #204]	; (80054e8 <HAL_DMA_Init+0x1c4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d03b      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a31      	ldr	r2, [pc, #196]	; (80054ec <HAL_DMA_Init+0x1c8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d036      	beq.n	8005498 <HAL_DMA_Init+0x174>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a30      	ldr	r2, [pc, #192]	; (80054f0 <HAL_DMA_Init+0x1cc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d031      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a2e      	ldr	r2, [pc, #184]	; (80054f4 <HAL_DMA_Init+0x1d0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d02c      	beq.n	8005498 <HAL_DMA_Init+0x174>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a2d      	ldr	r2, [pc, #180]	; (80054f8 <HAL_DMA_Init+0x1d4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d027      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2b      	ldr	r2, [pc, #172]	; (80054fc <HAL_DMA_Init+0x1d8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d022      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a2a      	ldr	r2, [pc, #168]	; (8005500 <HAL_DMA_Init+0x1dc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d01d      	beq.n	8005498 <HAL_DMA_Init+0x174>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a28      	ldr	r2, [pc, #160]	; (8005504 <HAL_DMA_Init+0x1e0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d018      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a27      	ldr	r2, [pc, #156]	; (8005508 <HAL_DMA_Init+0x1e4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d013      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a25      	ldr	r2, [pc, #148]	; (800550c <HAL_DMA_Init+0x1e8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00e      	beq.n	8005498 <HAL_DMA_Init+0x174>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a24      	ldr	r2, [pc, #144]	; (8005510 <HAL_DMA_Init+0x1ec>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d009      	beq.n	8005498 <HAL_DMA_Init+0x174>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a22      	ldr	r2, [pc, #136]	; (8005514 <HAL_DMA_Init+0x1f0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d004      	beq.n	8005498 <HAL_DMA_Init+0x174>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a21      	ldr	r2, [pc, #132]	; (8005518 <HAL_DMA_Init+0x1f4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d108      	bne.n	80054aa <HAL_DMA_Init+0x186>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0201 	bic.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	e007      	b.n	80054ba <HAL_DMA_Init+0x196>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0201 	bic.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054ba:	e02f      	b.n	800551c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054bc:	f7fd fe0a 	bl	80030d4 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d928      	bls.n	800551c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2220      	movs	r2, #32
 80054ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2203      	movs	r2, #3
 80054d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e246      	b.n	800596a <HAL_DMA_Init+0x646>
 80054dc:	40020010 	.word	0x40020010
 80054e0:	40020028 	.word	0x40020028
 80054e4:	40020040 	.word	0x40020040
 80054e8:	40020058 	.word	0x40020058
 80054ec:	40020070 	.word	0x40020070
 80054f0:	40020088 	.word	0x40020088
 80054f4:	400200a0 	.word	0x400200a0
 80054f8:	400200b8 	.word	0x400200b8
 80054fc:	40020410 	.word	0x40020410
 8005500:	40020428 	.word	0x40020428
 8005504:	40020440 	.word	0x40020440
 8005508:	40020458 	.word	0x40020458
 800550c:	40020470 	.word	0x40020470
 8005510:	40020488 	.word	0x40020488
 8005514:	400204a0 	.word	0x400204a0
 8005518:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d1c8      	bne.n	80054bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4b83      	ldr	r3, [pc, #524]	; (8005744 <HAL_DMA_Init+0x420>)
 8005536:	4013      	ands	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005542:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800554e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800555a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	2b04      	cmp	r3, #4
 800556e:	d107      	bne.n	8005580 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	4313      	orrs	r3, r2
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005580:	4b71      	ldr	r3, [pc, #452]	; (8005748 <HAL_DMA_Init+0x424>)
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	4b71      	ldr	r3, [pc, #452]	; (800574c <HAL_DMA_Init+0x428>)
 8005586:	4013      	ands	r3, r2
 8005588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800558c:	d328      	bcc.n	80055e0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b28      	cmp	r3, #40	; 0x28
 8005594:	d903      	bls.n	800559e <HAL_DMA_Init+0x27a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b2e      	cmp	r3, #46	; 0x2e
 800559c:	d917      	bls.n	80055ce <HAL_DMA_Init+0x2aa>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b3e      	cmp	r3, #62	; 0x3e
 80055a4:	d903      	bls.n	80055ae <HAL_DMA_Init+0x28a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2b42      	cmp	r3, #66	; 0x42
 80055ac:	d90f      	bls.n	80055ce <HAL_DMA_Init+0x2aa>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2b46      	cmp	r3, #70	; 0x46
 80055b4:	d903      	bls.n	80055be <HAL_DMA_Init+0x29a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b48      	cmp	r3, #72	; 0x48
 80055bc:	d907      	bls.n	80055ce <HAL_DMA_Init+0x2aa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b4e      	cmp	r3, #78	; 0x4e
 80055c4:	d905      	bls.n	80055d2 <HAL_DMA_Init+0x2ae>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	2b52      	cmp	r3, #82	; 0x52
 80055cc:	d801      	bhi.n	80055d2 <HAL_DMA_Init+0x2ae>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <HAL_DMA_Init+0x2b0>
 80055d2:	2300      	movs	r3, #0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055de:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f023 0307 	bic.w	r3, r3, #7
 80055f6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b04      	cmp	r3, #4
 8005608:	d117      	bne.n	800563a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00e      	beq.n	800563a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f002 fb33 	bl	8007c88 <DMA_CheckFifoParam>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2240      	movs	r2, #64	; 0x40
 800562c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e197      	b.n	800596a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f002 fa6e 	bl	8007b24 <DMA_CalcBaseAndBitshift>
 8005648:	4603      	mov	r3, r0
 800564a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	223f      	movs	r2, #63	; 0x3f
 8005656:	409a      	lsls	r2, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	609a      	str	r2, [r3, #8]
 800565c:	e0cd      	b.n	80057fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a3b      	ldr	r2, [pc, #236]	; (8005750 <HAL_DMA_Init+0x42c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d022      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a39      	ldr	r2, [pc, #228]	; (8005754 <HAL_DMA_Init+0x430>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01d      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a38      	ldr	r2, [pc, #224]	; (8005758 <HAL_DMA_Init+0x434>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d018      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a36      	ldr	r2, [pc, #216]	; (800575c <HAL_DMA_Init+0x438>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a35      	ldr	r2, [pc, #212]	; (8005760 <HAL_DMA_Init+0x43c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00e      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a33      	ldr	r2, [pc, #204]	; (8005764 <HAL_DMA_Init+0x440>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d009      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a32      	ldr	r2, [pc, #200]	; (8005768 <HAL_DMA_Init+0x444>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d004      	beq.n	80056ae <HAL_DMA_Init+0x38a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a30      	ldr	r2, [pc, #192]	; (800576c <HAL_DMA_Init+0x448>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d101      	bne.n	80056b2 <HAL_DMA_Init+0x38e>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <HAL_DMA_Init+0x390>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8097 	beq.w	80057e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a24      	ldr	r2, [pc, #144]	; (8005750 <HAL_DMA_Init+0x42c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d021      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a22      	ldr	r2, [pc, #136]	; (8005754 <HAL_DMA_Init+0x430>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d01c      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a21      	ldr	r2, [pc, #132]	; (8005758 <HAL_DMA_Init+0x434>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d017      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1f      	ldr	r2, [pc, #124]	; (800575c <HAL_DMA_Init+0x438>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d012      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <HAL_DMA_Init+0x43c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00d      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1c      	ldr	r2, [pc, #112]	; (8005764 <HAL_DMA_Init+0x440>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d008      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1b      	ldr	r2, [pc, #108]	; (8005768 <HAL_DMA_Init+0x444>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <HAL_DMA_Init+0x3e4>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a19      	ldr	r2, [pc, #100]	; (800576c <HAL_DMA_Init+0x448>)
 8005706:	4293      	cmp	r3, r2
 8005708:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2202      	movs	r2, #2
 800570e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4b12      	ldr	r3, [pc, #72]	; (8005770 <HAL_DMA_Init+0x44c>)
 8005726:	4013      	ands	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d020      	beq.n	8005774 <HAL_DMA_Init+0x450>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	2b80      	cmp	r3, #128	; 0x80
 8005738:	d102      	bne.n	8005740 <HAL_DMA_Init+0x41c>
 800573a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800573e:	e01a      	b.n	8005776 <HAL_DMA_Init+0x452>
 8005740:	2300      	movs	r3, #0
 8005742:	e018      	b.n	8005776 <HAL_DMA_Init+0x452>
 8005744:	fe10803f 	.word	0xfe10803f
 8005748:	5c001000 	.word	0x5c001000
 800574c:	ffff0000 	.word	0xffff0000
 8005750:	58025408 	.word	0x58025408
 8005754:	5802541c 	.word	0x5802541c
 8005758:	58025430 	.word	0x58025430
 800575c:	58025444 	.word	0x58025444
 8005760:	58025458 	.word	0x58025458
 8005764:	5802546c 	.word	0x5802546c
 8005768:	58025480 	.word	0x58025480
 800576c:	58025494 	.word	0x58025494
 8005770:	fffe000f 	.word	0xfffe000f
 8005774:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	68d2      	ldr	r2, [r2, #12]
 800577a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800577c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005784:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800578c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005794:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800579c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	697a      	ldr	r2, [r7, #20]
 80057b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	4b6e      	ldr	r3, [pc, #440]	; (8005974 <HAL_DMA_Init+0x650>)
 80057bc:	4413      	add	r3, r2
 80057be:	4a6e      	ldr	r2, [pc, #440]	; (8005978 <HAL_DMA_Init+0x654>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	091b      	lsrs	r3, r3, #4
 80057c6:	009a      	lsls	r2, r3, #2
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f002 f9a9 	bl	8007b24 <DMA_CalcBaseAndBitshift>
 80057d2:	4603      	mov	r3, r0
 80057d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057da:	f003 031f 	and.w	r3, r3, #31
 80057de:	2201      	movs	r2, #1
 80057e0:	409a      	lsls	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	605a      	str	r2, [r3, #4]
 80057e6:	e008      	b.n	80057fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2240      	movs	r2, #64	; 0x40
 80057ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2203      	movs	r2, #3
 80057f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e0b7      	b.n	800596a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a5f      	ldr	r2, [pc, #380]	; (800597c <HAL_DMA_Init+0x658>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d072      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a5d      	ldr	r2, [pc, #372]	; (8005980 <HAL_DMA_Init+0x65c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d06d      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a5c      	ldr	r2, [pc, #368]	; (8005984 <HAL_DMA_Init+0x660>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d068      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a5a      	ldr	r2, [pc, #360]	; (8005988 <HAL_DMA_Init+0x664>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d063      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a59      	ldr	r2, [pc, #356]	; (800598c <HAL_DMA_Init+0x668>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d05e      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a57      	ldr	r2, [pc, #348]	; (8005990 <HAL_DMA_Init+0x66c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d059      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a56      	ldr	r2, [pc, #344]	; (8005994 <HAL_DMA_Init+0x670>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d054      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a54      	ldr	r2, [pc, #336]	; (8005998 <HAL_DMA_Init+0x674>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d04f      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a53      	ldr	r2, [pc, #332]	; (800599c <HAL_DMA_Init+0x678>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d04a      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a51      	ldr	r2, [pc, #324]	; (80059a0 <HAL_DMA_Init+0x67c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d045      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a50      	ldr	r2, [pc, #320]	; (80059a4 <HAL_DMA_Init+0x680>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d040      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a4e      	ldr	r2, [pc, #312]	; (80059a8 <HAL_DMA_Init+0x684>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d03b      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a4d      	ldr	r2, [pc, #308]	; (80059ac <HAL_DMA_Init+0x688>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d036      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a4b      	ldr	r2, [pc, #300]	; (80059b0 <HAL_DMA_Init+0x68c>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d031      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a4a      	ldr	r2, [pc, #296]	; (80059b4 <HAL_DMA_Init+0x690>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d02c      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a48      	ldr	r2, [pc, #288]	; (80059b8 <HAL_DMA_Init+0x694>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d027      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a47      	ldr	r2, [pc, #284]	; (80059bc <HAL_DMA_Init+0x698>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d022      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a45      	ldr	r2, [pc, #276]	; (80059c0 <HAL_DMA_Init+0x69c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01d      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a44      	ldr	r2, [pc, #272]	; (80059c4 <HAL_DMA_Init+0x6a0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d018      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a42      	ldr	r2, [pc, #264]	; (80059c8 <HAL_DMA_Init+0x6a4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a41      	ldr	r2, [pc, #260]	; (80059cc <HAL_DMA_Init+0x6a8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a3f      	ldr	r2, [pc, #252]	; (80059d0 <HAL_DMA_Init+0x6ac>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a3e      	ldr	r2, [pc, #248]	; (80059d4 <HAL_DMA_Init+0x6b0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_DMA_Init+0x5c6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a3c      	ldr	r2, [pc, #240]	; (80059d8 <HAL_DMA_Init+0x6b4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d101      	bne.n	80058ee <HAL_DMA_Init+0x5ca>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <HAL_DMA_Init+0x5cc>
 80058ee:	2300      	movs	r3, #0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d032      	beq.n	800595a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f002 fa43 	bl	8007d80 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	2b80      	cmp	r3, #128	; 0x80
 8005900:	d102      	bne.n	8005908 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800591c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d010      	beq.n	8005948 <HAL_DMA_Init+0x624>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b08      	cmp	r3, #8
 800592c:	d80c      	bhi.n	8005948 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f002 fac0 	bl	8007eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005944:	605a      	str	r2, [r3, #4]
 8005946:	e008      	b.n	800595a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	a7fdabf8 	.word	0xa7fdabf8
 8005978:	cccccccd 	.word	0xcccccccd
 800597c:	40020010 	.word	0x40020010
 8005980:	40020028 	.word	0x40020028
 8005984:	40020040 	.word	0x40020040
 8005988:	40020058 	.word	0x40020058
 800598c:	40020070 	.word	0x40020070
 8005990:	40020088 	.word	0x40020088
 8005994:	400200a0 	.word	0x400200a0
 8005998:	400200b8 	.word	0x400200b8
 800599c:	40020410 	.word	0x40020410
 80059a0:	40020428 	.word	0x40020428
 80059a4:	40020440 	.word	0x40020440
 80059a8:	40020458 	.word	0x40020458
 80059ac:	40020470 	.word	0x40020470
 80059b0:	40020488 	.word	0x40020488
 80059b4:	400204a0 	.word	0x400204a0
 80059b8:	400204b8 	.word	0x400204b8
 80059bc:	58025408 	.word	0x58025408
 80059c0:	5802541c 	.word	0x5802541c
 80059c4:	58025430 	.word	0x58025430
 80059c8:	58025444 	.word	0x58025444
 80059cc:	58025458 	.word	0x58025458
 80059d0:	5802546c 	.word	0x5802546c
 80059d4:	58025480 	.word	0x58025480
 80059d8:	58025494 	.word	0x58025494

080059dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b086      	sub	sp, #24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d101      	bne.n	80059f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e226      	b.n	8005e46 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d101      	bne.n	8005a06 <HAL_DMA_Start_IT+0x2a>
 8005a02:	2302      	movs	r3, #2
 8005a04:	e21f      	b.n	8005e46 <HAL_DMA_Start_IT+0x46a>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	f040 820a 	bne.w	8005e30 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a68      	ldr	r2, [pc, #416]	; (8005bd0 <HAL_DMA_Start_IT+0x1f4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d04a      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a66      	ldr	r2, [pc, #408]	; (8005bd4 <HAL_DMA_Start_IT+0x1f8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d045      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a65      	ldr	r2, [pc, #404]	; (8005bd8 <HAL_DMA_Start_IT+0x1fc>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d040      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a63      	ldr	r2, [pc, #396]	; (8005bdc <HAL_DMA_Start_IT+0x200>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d03b      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a62      	ldr	r2, [pc, #392]	; (8005be0 <HAL_DMA_Start_IT+0x204>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d036      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a60      	ldr	r2, [pc, #384]	; (8005be4 <HAL_DMA_Start_IT+0x208>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d031      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a5f      	ldr	r2, [pc, #380]	; (8005be8 <HAL_DMA_Start_IT+0x20c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d02c      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a5d      	ldr	r2, [pc, #372]	; (8005bec <HAL_DMA_Start_IT+0x210>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d027      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a5c      	ldr	r2, [pc, #368]	; (8005bf0 <HAL_DMA_Start_IT+0x214>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d022      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a5a      	ldr	r2, [pc, #360]	; (8005bf4 <HAL_DMA_Start_IT+0x218>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d01d      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a59      	ldr	r2, [pc, #356]	; (8005bf8 <HAL_DMA_Start_IT+0x21c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d018      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a57      	ldr	r2, [pc, #348]	; (8005bfc <HAL_DMA_Start_IT+0x220>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d013      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a56      	ldr	r2, [pc, #344]	; (8005c00 <HAL_DMA_Start_IT+0x224>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00e      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a54      	ldr	r2, [pc, #336]	; (8005c04 <HAL_DMA_Start_IT+0x228>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d009      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a53      	ldr	r2, [pc, #332]	; (8005c08 <HAL_DMA_Start_IT+0x22c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d004      	beq.n	8005aca <HAL_DMA_Start_IT+0xee>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a51      	ldr	r2, [pc, #324]	; (8005c0c <HAL_DMA_Start_IT+0x230>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d108      	bne.n	8005adc <HAL_DMA_Start_IT+0x100>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f022 0201 	bic.w	r2, r2, #1
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	e007      	b.n	8005aec <HAL_DMA_Start_IT+0x110>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0201 	bic.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f001 fe6a 	bl	80077cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a34      	ldr	r2, [pc, #208]	; (8005bd0 <HAL_DMA_Start_IT+0x1f4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d04a      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a33      	ldr	r2, [pc, #204]	; (8005bd4 <HAL_DMA_Start_IT+0x1f8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d045      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a31      	ldr	r2, [pc, #196]	; (8005bd8 <HAL_DMA_Start_IT+0x1fc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d040      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a30      	ldr	r2, [pc, #192]	; (8005bdc <HAL_DMA_Start_IT+0x200>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d03b      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a2e      	ldr	r2, [pc, #184]	; (8005be0 <HAL_DMA_Start_IT+0x204>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d036      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a2d      	ldr	r2, [pc, #180]	; (8005be4 <HAL_DMA_Start_IT+0x208>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d031      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a2b      	ldr	r2, [pc, #172]	; (8005be8 <HAL_DMA_Start_IT+0x20c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d02c      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a2a      	ldr	r2, [pc, #168]	; (8005bec <HAL_DMA_Start_IT+0x210>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d027      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a28      	ldr	r2, [pc, #160]	; (8005bf0 <HAL_DMA_Start_IT+0x214>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d022      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a27      	ldr	r2, [pc, #156]	; (8005bf4 <HAL_DMA_Start_IT+0x218>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d01d      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a25      	ldr	r2, [pc, #148]	; (8005bf8 <HAL_DMA_Start_IT+0x21c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d018      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a24      	ldr	r2, [pc, #144]	; (8005bfc <HAL_DMA_Start_IT+0x220>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d013      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a22      	ldr	r2, [pc, #136]	; (8005c00 <HAL_DMA_Start_IT+0x224>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00e      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a21      	ldr	r2, [pc, #132]	; (8005c04 <HAL_DMA_Start_IT+0x228>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d009      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a1f      	ldr	r2, [pc, #124]	; (8005c08 <HAL_DMA_Start_IT+0x22c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d004      	beq.n	8005b98 <HAL_DMA_Start_IT+0x1bc>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1e      	ldr	r2, [pc, #120]	; (8005c0c <HAL_DMA_Start_IT+0x230>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d101      	bne.n	8005b9c <HAL_DMA_Start_IT+0x1c0>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_DMA_Start_IT+0x1c2>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d036      	beq.n	8005c10 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f023 021e 	bic.w	r2, r3, #30
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0216 	orr.w	r2, r2, #22
 8005bb4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d03e      	beq.n	8005c3c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f042 0208 	orr.w	r2, r2, #8
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	e035      	b.n	8005c3c <HAL_DMA_Start_IT+0x260>
 8005bd0:	40020010 	.word	0x40020010
 8005bd4:	40020028 	.word	0x40020028
 8005bd8:	40020040 	.word	0x40020040
 8005bdc:	40020058 	.word	0x40020058
 8005be0:	40020070 	.word	0x40020070
 8005be4:	40020088 	.word	0x40020088
 8005be8:	400200a0 	.word	0x400200a0
 8005bec:	400200b8 	.word	0x400200b8
 8005bf0:	40020410 	.word	0x40020410
 8005bf4:	40020428 	.word	0x40020428
 8005bf8:	40020440 	.word	0x40020440
 8005bfc:	40020458 	.word	0x40020458
 8005c00:	40020470 	.word	0x40020470
 8005c04:	40020488 	.word	0x40020488
 8005c08:	400204a0 	.word	0x400204a0
 8005c0c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 020e 	bic.w	r2, r3, #14
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 020a 	orr.w	r2, r2, #10
 8005c22:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d007      	beq.n	8005c3c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0204 	orr.w	r2, r2, #4
 8005c3a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a83      	ldr	r2, [pc, #524]	; (8005e50 <HAL_DMA_Start_IT+0x474>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d072      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a82      	ldr	r2, [pc, #520]	; (8005e54 <HAL_DMA_Start_IT+0x478>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d06d      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a80      	ldr	r2, [pc, #512]	; (8005e58 <HAL_DMA_Start_IT+0x47c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d068      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a7f      	ldr	r2, [pc, #508]	; (8005e5c <HAL_DMA_Start_IT+0x480>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d063      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a7d      	ldr	r2, [pc, #500]	; (8005e60 <HAL_DMA_Start_IT+0x484>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d05e      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a7c      	ldr	r2, [pc, #496]	; (8005e64 <HAL_DMA_Start_IT+0x488>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d059      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a7a      	ldr	r2, [pc, #488]	; (8005e68 <HAL_DMA_Start_IT+0x48c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d054      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a79      	ldr	r2, [pc, #484]	; (8005e6c <HAL_DMA_Start_IT+0x490>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d04f      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a77      	ldr	r2, [pc, #476]	; (8005e70 <HAL_DMA_Start_IT+0x494>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d04a      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a76      	ldr	r2, [pc, #472]	; (8005e74 <HAL_DMA_Start_IT+0x498>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d045      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a74      	ldr	r2, [pc, #464]	; (8005e78 <HAL_DMA_Start_IT+0x49c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d040      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a73      	ldr	r2, [pc, #460]	; (8005e7c <HAL_DMA_Start_IT+0x4a0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d03b      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a71      	ldr	r2, [pc, #452]	; (8005e80 <HAL_DMA_Start_IT+0x4a4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d036      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a70      	ldr	r2, [pc, #448]	; (8005e84 <HAL_DMA_Start_IT+0x4a8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d031      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a6e      	ldr	r2, [pc, #440]	; (8005e88 <HAL_DMA_Start_IT+0x4ac>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d02c      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a6d      	ldr	r2, [pc, #436]	; (8005e8c <HAL_DMA_Start_IT+0x4b0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d027      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a6b      	ldr	r2, [pc, #428]	; (8005e90 <HAL_DMA_Start_IT+0x4b4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d022      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a6a      	ldr	r2, [pc, #424]	; (8005e94 <HAL_DMA_Start_IT+0x4b8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d01d      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a68      	ldr	r2, [pc, #416]	; (8005e98 <HAL_DMA_Start_IT+0x4bc>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d018      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a67      	ldr	r2, [pc, #412]	; (8005e9c <HAL_DMA_Start_IT+0x4c0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d013      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a65      	ldr	r2, [pc, #404]	; (8005ea0 <HAL_DMA_Start_IT+0x4c4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00e      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a64      	ldr	r2, [pc, #400]	; (8005ea4 <HAL_DMA_Start_IT+0x4c8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d009      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a62      	ldr	r2, [pc, #392]	; (8005ea8 <HAL_DMA_Start_IT+0x4cc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d004      	beq.n	8005d2c <HAL_DMA_Start_IT+0x350>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a61      	ldr	r2, [pc, #388]	; (8005eac <HAL_DMA_Start_IT+0x4d0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d101      	bne.n	8005d30 <HAL_DMA_Start_IT+0x354>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <HAL_DMA_Start_IT+0x356>
 8005d30:	2300      	movs	r3, #0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d01a      	beq.n	8005d6c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d52:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d007      	beq.n	8005d6c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d6a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a37      	ldr	r2, [pc, #220]	; (8005e50 <HAL_DMA_Start_IT+0x474>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d04a      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a36      	ldr	r2, [pc, #216]	; (8005e54 <HAL_DMA_Start_IT+0x478>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d045      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a34      	ldr	r2, [pc, #208]	; (8005e58 <HAL_DMA_Start_IT+0x47c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d040      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a33      	ldr	r2, [pc, #204]	; (8005e5c <HAL_DMA_Start_IT+0x480>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d03b      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a31      	ldr	r2, [pc, #196]	; (8005e60 <HAL_DMA_Start_IT+0x484>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d036      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a30      	ldr	r2, [pc, #192]	; (8005e64 <HAL_DMA_Start_IT+0x488>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d031      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a2e      	ldr	r2, [pc, #184]	; (8005e68 <HAL_DMA_Start_IT+0x48c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d02c      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a2d      	ldr	r2, [pc, #180]	; (8005e6c <HAL_DMA_Start_IT+0x490>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d027      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a2b      	ldr	r2, [pc, #172]	; (8005e70 <HAL_DMA_Start_IT+0x494>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d022      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a2a      	ldr	r2, [pc, #168]	; (8005e74 <HAL_DMA_Start_IT+0x498>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d01d      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a28      	ldr	r2, [pc, #160]	; (8005e78 <HAL_DMA_Start_IT+0x49c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d018      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a27      	ldr	r2, [pc, #156]	; (8005e7c <HAL_DMA_Start_IT+0x4a0>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <HAL_DMA_Start_IT+0x4a4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00e      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a24      	ldr	r2, [pc, #144]	; (8005e84 <HAL_DMA_Start_IT+0x4a8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d009      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a22      	ldr	r2, [pc, #136]	; (8005e88 <HAL_DMA_Start_IT+0x4ac>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_DMA_Start_IT+0x430>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a21      	ldr	r2, [pc, #132]	; (8005e8c <HAL_DMA_Start_IT+0x4b0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d108      	bne.n	8005e1e <HAL_DMA_Start_IT+0x442>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e012      	b.n	8005e44 <HAL_DMA_Start_IT+0x468>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f042 0201 	orr.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e009      	b.n	8005e44 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40020010 	.word	0x40020010
 8005e54:	40020028 	.word	0x40020028
 8005e58:	40020040 	.word	0x40020040
 8005e5c:	40020058 	.word	0x40020058
 8005e60:	40020070 	.word	0x40020070
 8005e64:	40020088 	.word	0x40020088
 8005e68:	400200a0 	.word	0x400200a0
 8005e6c:	400200b8 	.word	0x400200b8
 8005e70:	40020410 	.word	0x40020410
 8005e74:	40020428 	.word	0x40020428
 8005e78:	40020440 	.word	0x40020440
 8005e7c:	40020458 	.word	0x40020458
 8005e80:	40020470 	.word	0x40020470
 8005e84:	40020488 	.word	0x40020488
 8005e88:	400204a0 	.word	0x400204a0
 8005e8c:	400204b8 	.word	0x400204b8
 8005e90:	58025408 	.word	0x58025408
 8005e94:	5802541c 	.word	0x5802541c
 8005e98:	58025430 	.word	0x58025430
 8005e9c:	58025444 	.word	0x58025444
 8005ea0:	58025458 	.word	0x58025458
 8005ea4:	5802546c 	.word	0x5802546c
 8005ea8:	58025480 	.word	0x58025480
 8005eac:	58025494 	.word	0x58025494

08005eb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005eb8:	f7fd f90c 	bl	80030d4 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e2dc      	b.n	8006482 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d008      	beq.n	8005ee6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e2cd      	b.n	8006482 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a76      	ldr	r2, [pc, #472]	; (80060c4 <HAL_DMA_Abort+0x214>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d04a      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a74      	ldr	r2, [pc, #464]	; (80060c8 <HAL_DMA_Abort+0x218>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d045      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a73      	ldr	r2, [pc, #460]	; (80060cc <HAL_DMA_Abort+0x21c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d040      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a71      	ldr	r2, [pc, #452]	; (80060d0 <HAL_DMA_Abort+0x220>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d03b      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a70      	ldr	r2, [pc, #448]	; (80060d4 <HAL_DMA_Abort+0x224>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d036      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a6e      	ldr	r2, [pc, #440]	; (80060d8 <HAL_DMA_Abort+0x228>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d031      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a6d      	ldr	r2, [pc, #436]	; (80060dc <HAL_DMA_Abort+0x22c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d02c      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a6b      	ldr	r2, [pc, #428]	; (80060e0 <HAL_DMA_Abort+0x230>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d027      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a6a      	ldr	r2, [pc, #424]	; (80060e4 <HAL_DMA_Abort+0x234>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d022      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a68      	ldr	r2, [pc, #416]	; (80060e8 <HAL_DMA_Abort+0x238>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d01d      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a67      	ldr	r2, [pc, #412]	; (80060ec <HAL_DMA_Abort+0x23c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d018      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a65      	ldr	r2, [pc, #404]	; (80060f0 <HAL_DMA_Abort+0x240>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d013      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a64      	ldr	r2, [pc, #400]	; (80060f4 <HAL_DMA_Abort+0x244>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00e      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a62      	ldr	r2, [pc, #392]	; (80060f8 <HAL_DMA_Abort+0x248>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d009      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a61      	ldr	r2, [pc, #388]	; (80060fc <HAL_DMA_Abort+0x24c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d004      	beq.n	8005f86 <HAL_DMA_Abort+0xd6>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a5f      	ldr	r2, [pc, #380]	; (8006100 <HAL_DMA_Abort+0x250>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d101      	bne.n	8005f8a <HAL_DMA_Abort+0xda>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <HAL_DMA_Abort+0xdc>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d013      	beq.n	8005fb8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 021e 	bic.w	r2, r2, #30
 8005f9e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695a      	ldr	r2, [r3, #20]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	e00a      	b.n	8005fce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 020e 	bic.w	r2, r2, #14
 8005fc6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a3c      	ldr	r2, [pc, #240]	; (80060c4 <HAL_DMA_Abort+0x214>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d072      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a3a      	ldr	r2, [pc, #232]	; (80060c8 <HAL_DMA_Abort+0x218>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d06d      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a39      	ldr	r2, [pc, #228]	; (80060cc <HAL_DMA_Abort+0x21c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d068      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a37      	ldr	r2, [pc, #220]	; (80060d0 <HAL_DMA_Abort+0x220>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d063      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a36      	ldr	r2, [pc, #216]	; (80060d4 <HAL_DMA_Abort+0x224>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d05e      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a34      	ldr	r2, [pc, #208]	; (80060d8 <HAL_DMA_Abort+0x228>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d059      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a33      	ldr	r2, [pc, #204]	; (80060dc <HAL_DMA_Abort+0x22c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d054      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a31      	ldr	r2, [pc, #196]	; (80060e0 <HAL_DMA_Abort+0x230>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d04f      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a30      	ldr	r2, [pc, #192]	; (80060e4 <HAL_DMA_Abort+0x234>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d04a      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a2e      	ldr	r2, [pc, #184]	; (80060e8 <HAL_DMA_Abort+0x238>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d045      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a2d      	ldr	r2, [pc, #180]	; (80060ec <HAL_DMA_Abort+0x23c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d040      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a2b      	ldr	r2, [pc, #172]	; (80060f0 <HAL_DMA_Abort+0x240>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d03b      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a2a      	ldr	r2, [pc, #168]	; (80060f4 <HAL_DMA_Abort+0x244>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d036      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a28      	ldr	r2, [pc, #160]	; (80060f8 <HAL_DMA_Abort+0x248>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d031      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a27      	ldr	r2, [pc, #156]	; (80060fc <HAL_DMA_Abort+0x24c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d02c      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a25      	ldr	r2, [pc, #148]	; (8006100 <HAL_DMA_Abort+0x250>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d027      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a24      	ldr	r2, [pc, #144]	; (8006104 <HAL_DMA_Abort+0x254>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d022      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a22      	ldr	r2, [pc, #136]	; (8006108 <HAL_DMA_Abort+0x258>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01d      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a21      	ldr	r2, [pc, #132]	; (800610c <HAL_DMA_Abort+0x25c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d018      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1f      	ldr	r2, [pc, #124]	; (8006110 <HAL_DMA_Abort+0x260>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1e      	ldr	r2, [pc, #120]	; (8006114 <HAL_DMA_Abort+0x264>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00e      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <HAL_DMA_Abort+0x268>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a1b      	ldr	r2, [pc, #108]	; (800611c <HAL_DMA_Abort+0x26c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <HAL_DMA_Abort+0x20e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a19      	ldr	r2, [pc, #100]	; (8006120 <HAL_DMA_Abort+0x270>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d132      	bne.n	8006124 <HAL_DMA_Abort+0x274>
 80060be:	2301      	movs	r3, #1
 80060c0:	e031      	b.n	8006126 <HAL_DMA_Abort+0x276>
 80060c2:	bf00      	nop
 80060c4:	40020010 	.word	0x40020010
 80060c8:	40020028 	.word	0x40020028
 80060cc:	40020040 	.word	0x40020040
 80060d0:	40020058 	.word	0x40020058
 80060d4:	40020070 	.word	0x40020070
 80060d8:	40020088 	.word	0x40020088
 80060dc:	400200a0 	.word	0x400200a0
 80060e0:	400200b8 	.word	0x400200b8
 80060e4:	40020410 	.word	0x40020410
 80060e8:	40020428 	.word	0x40020428
 80060ec:	40020440 	.word	0x40020440
 80060f0:	40020458 	.word	0x40020458
 80060f4:	40020470 	.word	0x40020470
 80060f8:	40020488 	.word	0x40020488
 80060fc:	400204a0 	.word	0x400204a0
 8006100:	400204b8 	.word	0x400204b8
 8006104:	58025408 	.word	0x58025408
 8006108:	5802541c 	.word	0x5802541c
 800610c:	58025430 	.word	0x58025430
 8006110:	58025444 	.word	0x58025444
 8006114:	58025458 	.word	0x58025458
 8006118:	5802546c 	.word	0x5802546c
 800611c:	58025480 	.word	0x58025480
 8006120:	58025494 	.word	0x58025494
 8006124:	2300      	movs	r3, #0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d007      	beq.n	800613a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006138:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a6d      	ldr	r2, [pc, #436]	; (80062f4 <HAL_DMA_Abort+0x444>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d04a      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a6b      	ldr	r2, [pc, #428]	; (80062f8 <HAL_DMA_Abort+0x448>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d045      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a6a      	ldr	r2, [pc, #424]	; (80062fc <HAL_DMA_Abort+0x44c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d040      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a68      	ldr	r2, [pc, #416]	; (8006300 <HAL_DMA_Abort+0x450>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d03b      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a67      	ldr	r2, [pc, #412]	; (8006304 <HAL_DMA_Abort+0x454>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d036      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a65      	ldr	r2, [pc, #404]	; (8006308 <HAL_DMA_Abort+0x458>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d031      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a64      	ldr	r2, [pc, #400]	; (800630c <HAL_DMA_Abort+0x45c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d02c      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a62      	ldr	r2, [pc, #392]	; (8006310 <HAL_DMA_Abort+0x460>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d027      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a61      	ldr	r2, [pc, #388]	; (8006314 <HAL_DMA_Abort+0x464>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d022      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a5f      	ldr	r2, [pc, #380]	; (8006318 <HAL_DMA_Abort+0x468>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d01d      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a5e      	ldr	r2, [pc, #376]	; (800631c <HAL_DMA_Abort+0x46c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d018      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a5c      	ldr	r2, [pc, #368]	; (8006320 <HAL_DMA_Abort+0x470>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d013      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a5b      	ldr	r2, [pc, #364]	; (8006324 <HAL_DMA_Abort+0x474>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00e      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a59      	ldr	r2, [pc, #356]	; (8006328 <HAL_DMA_Abort+0x478>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d009      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a58      	ldr	r2, [pc, #352]	; (800632c <HAL_DMA_Abort+0x47c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d004      	beq.n	80061da <HAL_DMA_Abort+0x32a>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a56      	ldr	r2, [pc, #344]	; (8006330 <HAL_DMA_Abort+0x480>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d108      	bne.n	80061ec <HAL_DMA_Abort+0x33c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	e007      	b.n	80061fc <HAL_DMA_Abort+0x34c>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 0201 	bic.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80061fc:	e013      	b.n	8006226 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061fe:	f7fc ff69 	bl	80030d4 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b05      	cmp	r3, #5
 800620a:	d90c      	bls.n	8006226 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2220      	movs	r2, #32
 8006210:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2203      	movs	r2, #3
 8006216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e12d      	b.n	8006482 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e5      	bne.n	80061fe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a2f      	ldr	r2, [pc, #188]	; (80062f4 <HAL_DMA_Abort+0x444>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d04a      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a2d      	ldr	r2, [pc, #180]	; (80062f8 <HAL_DMA_Abort+0x448>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d045      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a2c      	ldr	r2, [pc, #176]	; (80062fc <HAL_DMA_Abort+0x44c>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d040      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a2a      	ldr	r2, [pc, #168]	; (8006300 <HAL_DMA_Abort+0x450>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d03b      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a29      	ldr	r2, [pc, #164]	; (8006304 <HAL_DMA_Abort+0x454>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d036      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a27      	ldr	r2, [pc, #156]	; (8006308 <HAL_DMA_Abort+0x458>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d031      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a26      	ldr	r2, [pc, #152]	; (800630c <HAL_DMA_Abort+0x45c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d02c      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a24      	ldr	r2, [pc, #144]	; (8006310 <HAL_DMA_Abort+0x460>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d027      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a23      	ldr	r2, [pc, #140]	; (8006314 <HAL_DMA_Abort+0x464>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d022      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a21      	ldr	r2, [pc, #132]	; (8006318 <HAL_DMA_Abort+0x468>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01d      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a20      	ldr	r2, [pc, #128]	; (800631c <HAL_DMA_Abort+0x46c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d018      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1e      	ldr	r2, [pc, #120]	; (8006320 <HAL_DMA_Abort+0x470>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1d      	ldr	r2, [pc, #116]	; (8006324 <HAL_DMA_Abort+0x474>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00e      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1b      	ldr	r2, [pc, #108]	; (8006328 <HAL_DMA_Abort+0x478>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d009      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1a      	ldr	r2, [pc, #104]	; (800632c <HAL_DMA_Abort+0x47c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d004      	beq.n	80062d2 <HAL_DMA_Abort+0x422>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a18      	ldr	r2, [pc, #96]	; (8006330 <HAL_DMA_Abort+0x480>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d101      	bne.n	80062d6 <HAL_DMA_Abort+0x426>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <HAL_DMA_Abort+0x428>
 80062d6:	2300      	movs	r3, #0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d02b      	beq.n	8006334 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	223f      	movs	r2, #63	; 0x3f
 80062ec:	409a      	lsls	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	609a      	str	r2, [r3, #8]
 80062f2:	e02a      	b.n	800634a <HAL_DMA_Abort+0x49a>
 80062f4:	40020010 	.word	0x40020010
 80062f8:	40020028 	.word	0x40020028
 80062fc:	40020040 	.word	0x40020040
 8006300:	40020058 	.word	0x40020058
 8006304:	40020070 	.word	0x40020070
 8006308:	40020088 	.word	0x40020088
 800630c:	400200a0 	.word	0x400200a0
 8006310:	400200b8 	.word	0x400200b8
 8006314:	40020410 	.word	0x40020410
 8006318:	40020428 	.word	0x40020428
 800631c:	40020440 	.word	0x40020440
 8006320:	40020458 	.word	0x40020458
 8006324:	40020470 	.word	0x40020470
 8006328:	40020488 	.word	0x40020488
 800632c:	400204a0 	.word	0x400204a0
 8006330:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006338:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633e:	f003 031f 	and.w	r3, r3, #31
 8006342:	2201      	movs	r2, #1
 8006344:	409a      	lsls	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a4f      	ldr	r2, [pc, #316]	; (800648c <HAL_DMA_Abort+0x5dc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d072      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a4d      	ldr	r2, [pc, #308]	; (8006490 <HAL_DMA_Abort+0x5e0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d06d      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a4c      	ldr	r2, [pc, #304]	; (8006494 <HAL_DMA_Abort+0x5e4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d068      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a4a      	ldr	r2, [pc, #296]	; (8006498 <HAL_DMA_Abort+0x5e8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d063      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a49      	ldr	r2, [pc, #292]	; (800649c <HAL_DMA_Abort+0x5ec>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d05e      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a47      	ldr	r2, [pc, #284]	; (80064a0 <HAL_DMA_Abort+0x5f0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d059      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a46      	ldr	r2, [pc, #280]	; (80064a4 <HAL_DMA_Abort+0x5f4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d054      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a44      	ldr	r2, [pc, #272]	; (80064a8 <HAL_DMA_Abort+0x5f8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d04f      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a43      	ldr	r2, [pc, #268]	; (80064ac <HAL_DMA_Abort+0x5fc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d04a      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a41      	ldr	r2, [pc, #260]	; (80064b0 <HAL_DMA_Abort+0x600>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d045      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a40      	ldr	r2, [pc, #256]	; (80064b4 <HAL_DMA_Abort+0x604>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d040      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a3e      	ldr	r2, [pc, #248]	; (80064b8 <HAL_DMA_Abort+0x608>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d03b      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a3d      	ldr	r2, [pc, #244]	; (80064bc <HAL_DMA_Abort+0x60c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d036      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a3b      	ldr	r2, [pc, #236]	; (80064c0 <HAL_DMA_Abort+0x610>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d031      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a3a      	ldr	r2, [pc, #232]	; (80064c4 <HAL_DMA_Abort+0x614>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d02c      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a38      	ldr	r2, [pc, #224]	; (80064c8 <HAL_DMA_Abort+0x618>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d027      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a37      	ldr	r2, [pc, #220]	; (80064cc <HAL_DMA_Abort+0x61c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d022      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <HAL_DMA_Abort+0x620>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d01d      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a34      	ldr	r2, [pc, #208]	; (80064d4 <HAL_DMA_Abort+0x624>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d018      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a32      	ldr	r2, [pc, #200]	; (80064d8 <HAL_DMA_Abort+0x628>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d013      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a31      	ldr	r2, [pc, #196]	; (80064dc <HAL_DMA_Abort+0x62c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00e      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a2f      	ldr	r2, [pc, #188]	; (80064e0 <HAL_DMA_Abort+0x630>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d009      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a2e      	ldr	r2, [pc, #184]	; (80064e4 <HAL_DMA_Abort+0x634>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d004      	beq.n	800643a <HAL_DMA_Abort+0x58a>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a2c      	ldr	r2, [pc, #176]	; (80064e8 <HAL_DMA_Abort+0x638>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d101      	bne.n	800643e <HAL_DMA_Abort+0x58e>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <HAL_DMA_Abort+0x590>
 800643e:	2300      	movs	r3, #0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d015      	beq.n	8006470 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800644c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00c      	beq.n	8006470 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006464:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800646e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	40020010 	.word	0x40020010
 8006490:	40020028 	.word	0x40020028
 8006494:	40020040 	.word	0x40020040
 8006498:	40020058 	.word	0x40020058
 800649c:	40020070 	.word	0x40020070
 80064a0:	40020088 	.word	0x40020088
 80064a4:	400200a0 	.word	0x400200a0
 80064a8:	400200b8 	.word	0x400200b8
 80064ac:	40020410 	.word	0x40020410
 80064b0:	40020428 	.word	0x40020428
 80064b4:	40020440 	.word	0x40020440
 80064b8:	40020458 	.word	0x40020458
 80064bc:	40020470 	.word	0x40020470
 80064c0:	40020488 	.word	0x40020488
 80064c4:	400204a0 	.word	0x400204a0
 80064c8:	400204b8 	.word	0x400204b8
 80064cc:	58025408 	.word	0x58025408
 80064d0:	5802541c 	.word	0x5802541c
 80064d4:	58025430 	.word	0x58025430
 80064d8:	58025444 	.word	0x58025444
 80064dc:	58025458 	.word	0x58025458
 80064e0:	5802546c 	.word	0x5802546c
 80064e4:	58025480 	.word	0x58025480
 80064e8:	58025494 	.word	0x58025494

080064ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e237      	b.n	800696e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006504:	b2db      	uxtb	r3, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d004      	beq.n	8006514 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2280      	movs	r2, #128	; 0x80
 800650e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e22c      	b.n	800696e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a5c      	ldr	r2, [pc, #368]	; (800668c <HAL_DMA_Abort_IT+0x1a0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d04a      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a5b      	ldr	r2, [pc, #364]	; (8006690 <HAL_DMA_Abort_IT+0x1a4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d045      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a59      	ldr	r2, [pc, #356]	; (8006694 <HAL_DMA_Abort_IT+0x1a8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d040      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a58      	ldr	r2, [pc, #352]	; (8006698 <HAL_DMA_Abort_IT+0x1ac>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d03b      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a56      	ldr	r2, [pc, #344]	; (800669c <HAL_DMA_Abort_IT+0x1b0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d036      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a55      	ldr	r2, [pc, #340]	; (80066a0 <HAL_DMA_Abort_IT+0x1b4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d031      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a53      	ldr	r2, [pc, #332]	; (80066a4 <HAL_DMA_Abort_IT+0x1b8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d02c      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a52      	ldr	r2, [pc, #328]	; (80066a8 <HAL_DMA_Abort_IT+0x1bc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d027      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a50      	ldr	r2, [pc, #320]	; (80066ac <HAL_DMA_Abort_IT+0x1c0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d022      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a4f      	ldr	r2, [pc, #316]	; (80066b0 <HAL_DMA_Abort_IT+0x1c4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d01d      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a4d      	ldr	r2, [pc, #308]	; (80066b4 <HAL_DMA_Abort_IT+0x1c8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d018      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a4c      	ldr	r2, [pc, #304]	; (80066b8 <HAL_DMA_Abort_IT+0x1cc>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d013      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a4a      	ldr	r2, [pc, #296]	; (80066bc <HAL_DMA_Abort_IT+0x1d0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00e      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a49      	ldr	r2, [pc, #292]	; (80066c0 <HAL_DMA_Abort_IT+0x1d4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d009      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a47      	ldr	r2, [pc, #284]	; (80066c4 <HAL_DMA_Abort_IT+0x1d8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_DMA_Abort_IT+0xc8>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a46      	ldr	r2, [pc, #280]	; (80066c8 <HAL_DMA_Abort_IT+0x1dc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d101      	bne.n	80065b8 <HAL_DMA_Abort_IT+0xcc>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e000      	b.n	80065ba <HAL_DMA_Abort_IT+0xce>
 80065b8:	2300      	movs	r3, #0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 8086 	beq.w	80066cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2204      	movs	r2, #4
 80065c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a2f      	ldr	r2, [pc, #188]	; (800668c <HAL_DMA_Abort_IT+0x1a0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d04a      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a2e      	ldr	r2, [pc, #184]	; (8006690 <HAL_DMA_Abort_IT+0x1a4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d045      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a2c      	ldr	r2, [pc, #176]	; (8006694 <HAL_DMA_Abort_IT+0x1a8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d040      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a2b      	ldr	r2, [pc, #172]	; (8006698 <HAL_DMA_Abort_IT+0x1ac>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d03b      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a29      	ldr	r2, [pc, #164]	; (800669c <HAL_DMA_Abort_IT+0x1b0>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d036      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a28      	ldr	r2, [pc, #160]	; (80066a0 <HAL_DMA_Abort_IT+0x1b4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d031      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a26      	ldr	r2, [pc, #152]	; (80066a4 <HAL_DMA_Abort_IT+0x1b8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d02c      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a25      	ldr	r2, [pc, #148]	; (80066a8 <HAL_DMA_Abort_IT+0x1bc>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d027      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a23      	ldr	r2, [pc, #140]	; (80066ac <HAL_DMA_Abort_IT+0x1c0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d022      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a22      	ldr	r2, [pc, #136]	; (80066b0 <HAL_DMA_Abort_IT+0x1c4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d01d      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a20      	ldr	r2, [pc, #128]	; (80066b4 <HAL_DMA_Abort_IT+0x1c8>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d018      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a1f      	ldr	r2, [pc, #124]	; (80066b8 <HAL_DMA_Abort_IT+0x1cc>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d013      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1d      	ldr	r2, [pc, #116]	; (80066bc <HAL_DMA_Abort_IT+0x1d0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00e      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <HAL_DMA_Abort_IT+0x1d4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d009      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1a      	ldr	r2, [pc, #104]	; (80066c4 <HAL_DMA_Abort_IT+0x1d8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_DMA_Abort_IT+0x17c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a19      	ldr	r2, [pc, #100]	; (80066c8 <HAL_DMA_Abort_IT+0x1dc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d108      	bne.n	800667a <HAL_DMA_Abort_IT+0x18e>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0201 	bic.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	e178      	b.n	800696c <HAL_DMA_Abort_IT+0x480>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0201 	bic.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	e16f      	b.n	800696c <HAL_DMA_Abort_IT+0x480>
 800668c:	40020010 	.word	0x40020010
 8006690:	40020028 	.word	0x40020028
 8006694:	40020040 	.word	0x40020040
 8006698:	40020058 	.word	0x40020058
 800669c:	40020070 	.word	0x40020070
 80066a0:	40020088 	.word	0x40020088
 80066a4:	400200a0 	.word	0x400200a0
 80066a8:	400200b8 	.word	0x400200b8
 80066ac:	40020410 	.word	0x40020410
 80066b0:	40020428 	.word	0x40020428
 80066b4:	40020440 	.word	0x40020440
 80066b8:	40020458 	.word	0x40020458
 80066bc:	40020470 	.word	0x40020470
 80066c0:	40020488 	.word	0x40020488
 80066c4:	400204a0 	.word	0x400204a0
 80066c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 020e 	bic.w	r2, r2, #14
 80066da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a6c      	ldr	r2, [pc, #432]	; (8006894 <HAL_DMA_Abort_IT+0x3a8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d04a      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a6b      	ldr	r2, [pc, #428]	; (8006898 <HAL_DMA_Abort_IT+0x3ac>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d045      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a69      	ldr	r2, [pc, #420]	; (800689c <HAL_DMA_Abort_IT+0x3b0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d040      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a68      	ldr	r2, [pc, #416]	; (80068a0 <HAL_DMA_Abort_IT+0x3b4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d03b      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a66      	ldr	r2, [pc, #408]	; (80068a4 <HAL_DMA_Abort_IT+0x3b8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d036      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a65      	ldr	r2, [pc, #404]	; (80068a8 <HAL_DMA_Abort_IT+0x3bc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d031      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a63      	ldr	r2, [pc, #396]	; (80068ac <HAL_DMA_Abort_IT+0x3c0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d02c      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a62      	ldr	r2, [pc, #392]	; (80068b0 <HAL_DMA_Abort_IT+0x3c4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d027      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a60      	ldr	r2, [pc, #384]	; (80068b4 <HAL_DMA_Abort_IT+0x3c8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d022      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a5f      	ldr	r2, [pc, #380]	; (80068b8 <HAL_DMA_Abort_IT+0x3cc>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d01d      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a5d      	ldr	r2, [pc, #372]	; (80068bc <HAL_DMA_Abort_IT+0x3d0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d018      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a5c      	ldr	r2, [pc, #368]	; (80068c0 <HAL_DMA_Abort_IT+0x3d4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d013      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a5a      	ldr	r2, [pc, #360]	; (80068c4 <HAL_DMA_Abort_IT+0x3d8>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d00e      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a59      	ldr	r2, [pc, #356]	; (80068c8 <HAL_DMA_Abort_IT+0x3dc>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d009      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a57      	ldr	r2, [pc, #348]	; (80068cc <HAL_DMA_Abort_IT+0x3e0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d004      	beq.n	800677c <HAL_DMA_Abort_IT+0x290>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a56      	ldr	r2, [pc, #344]	; (80068d0 <HAL_DMA_Abort_IT+0x3e4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d108      	bne.n	800678e <HAL_DMA_Abort_IT+0x2a2>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e007      	b.n	800679e <HAL_DMA_Abort_IT+0x2b2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0201 	bic.w	r2, r2, #1
 800679c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a3c      	ldr	r2, [pc, #240]	; (8006894 <HAL_DMA_Abort_IT+0x3a8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d072      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a3a      	ldr	r2, [pc, #232]	; (8006898 <HAL_DMA_Abort_IT+0x3ac>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d06d      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a39      	ldr	r2, [pc, #228]	; (800689c <HAL_DMA_Abort_IT+0x3b0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d068      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a37      	ldr	r2, [pc, #220]	; (80068a0 <HAL_DMA_Abort_IT+0x3b4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d063      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a36      	ldr	r2, [pc, #216]	; (80068a4 <HAL_DMA_Abort_IT+0x3b8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d05e      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a34      	ldr	r2, [pc, #208]	; (80068a8 <HAL_DMA_Abort_IT+0x3bc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d059      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a33      	ldr	r2, [pc, #204]	; (80068ac <HAL_DMA_Abort_IT+0x3c0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d054      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a31      	ldr	r2, [pc, #196]	; (80068b0 <HAL_DMA_Abort_IT+0x3c4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d04f      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a30      	ldr	r2, [pc, #192]	; (80068b4 <HAL_DMA_Abort_IT+0x3c8>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d04a      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a2e      	ldr	r2, [pc, #184]	; (80068b8 <HAL_DMA_Abort_IT+0x3cc>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d045      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a2d      	ldr	r2, [pc, #180]	; (80068bc <HAL_DMA_Abort_IT+0x3d0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d040      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a2b      	ldr	r2, [pc, #172]	; (80068c0 <HAL_DMA_Abort_IT+0x3d4>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d03b      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a2a      	ldr	r2, [pc, #168]	; (80068c4 <HAL_DMA_Abort_IT+0x3d8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d036      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a28      	ldr	r2, [pc, #160]	; (80068c8 <HAL_DMA_Abort_IT+0x3dc>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d031      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a27      	ldr	r2, [pc, #156]	; (80068cc <HAL_DMA_Abort_IT+0x3e0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d02c      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a25      	ldr	r2, [pc, #148]	; (80068d0 <HAL_DMA_Abort_IT+0x3e4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d027      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a24      	ldr	r2, [pc, #144]	; (80068d4 <HAL_DMA_Abort_IT+0x3e8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d022      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a22      	ldr	r2, [pc, #136]	; (80068d8 <HAL_DMA_Abort_IT+0x3ec>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d01d      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a21      	ldr	r2, [pc, #132]	; (80068dc <HAL_DMA_Abort_IT+0x3f0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d018      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a1f      	ldr	r2, [pc, #124]	; (80068e0 <HAL_DMA_Abort_IT+0x3f4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d013      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a1e      	ldr	r2, [pc, #120]	; (80068e4 <HAL_DMA_Abort_IT+0x3f8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00e      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a1c      	ldr	r2, [pc, #112]	; (80068e8 <HAL_DMA_Abort_IT+0x3fc>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d009      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1b      	ldr	r2, [pc, #108]	; (80068ec <HAL_DMA_Abort_IT+0x400>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d004      	beq.n	800688e <HAL_DMA_Abort_IT+0x3a2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a19      	ldr	r2, [pc, #100]	; (80068f0 <HAL_DMA_Abort_IT+0x404>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d132      	bne.n	80068f4 <HAL_DMA_Abort_IT+0x408>
 800688e:	2301      	movs	r3, #1
 8006890:	e031      	b.n	80068f6 <HAL_DMA_Abort_IT+0x40a>
 8006892:	bf00      	nop
 8006894:	40020010 	.word	0x40020010
 8006898:	40020028 	.word	0x40020028
 800689c:	40020040 	.word	0x40020040
 80068a0:	40020058 	.word	0x40020058
 80068a4:	40020070 	.word	0x40020070
 80068a8:	40020088 	.word	0x40020088
 80068ac:	400200a0 	.word	0x400200a0
 80068b0:	400200b8 	.word	0x400200b8
 80068b4:	40020410 	.word	0x40020410
 80068b8:	40020428 	.word	0x40020428
 80068bc:	40020440 	.word	0x40020440
 80068c0:	40020458 	.word	0x40020458
 80068c4:	40020470 	.word	0x40020470
 80068c8:	40020488 	.word	0x40020488
 80068cc:	400204a0 	.word	0x400204a0
 80068d0:	400204b8 	.word	0x400204b8
 80068d4:	58025408 	.word	0x58025408
 80068d8:	5802541c 	.word	0x5802541c
 80068dc:	58025430 	.word	0x58025430
 80068e0:	58025444 	.word	0x58025444
 80068e4:	58025458 	.word	0x58025458
 80068e8:	5802546c 	.word	0x5802546c
 80068ec:	58025480 	.word	0x58025480
 80068f0:	58025494 	.word	0x58025494
 80068f4:	2300      	movs	r3, #0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d028      	beq.n	800694c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006908:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	2201      	movs	r2, #1
 800691a:	409a      	lsls	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006928:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00c      	beq.n	800694c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800693c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006940:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800694a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006960:	2b00      	cmp	r3, #0
 8006962:	d003      	beq.n	800696c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop

08006978 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006984:	4b67      	ldr	r3, [pc, #412]	; (8006b24 <HAL_DMA_IRQHandler+0x1ac>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a67      	ldr	r2, [pc, #412]	; (8006b28 <HAL_DMA_IRQHandler+0x1b0>)
 800698a:	fba2 2303 	umull	r2, r3, r2, r3
 800698e:	0a9b      	lsrs	r3, r3, #10
 8006990:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006996:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800699c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a5f      	ldr	r2, [pc, #380]	; (8006b2c <HAL_DMA_IRQHandler+0x1b4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d04a      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a5d      	ldr	r2, [pc, #372]	; (8006b30 <HAL_DMA_IRQHandler+0x1b8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d045      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a5c      	ldr	r2, [pc, #368]	; (8006b34 <HAL_DMA_IRQHandler+0x1bc>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d040      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a5a      	ldr	r2, [pc, #360]	; (8006b38 <HAL_DMA_IRQHandler+0x1c0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d03b      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a59      	ldr	r2, [pc, #356]	; (8006b3c <HAL_DMA_IRQHandler+0x1c4>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d036      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a57      	ldr	r2, [pc, #348]	; (8006b40 <HAL_DMA_IRQHandler+0x1c8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d031      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a56      	ldr	r2, [pc, #344]	; (8006b44 <HAL_DMA_IRQHandler+0x1cc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d02c      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a54      	ldr	r2, [pc, #336]	; (8006b48 <HAL_DMA_IRQHandler+0x1d0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d027      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a53      	ldr	r2, [pc, #332]	; (8006b4c <HAL_DMA_IRQHandler+0x1d4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d022      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a51      	ldr	r2, [pc, #324]	; (8006b50 <HAL_DMA_IRQHandler+0x1d8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d01d      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a50      	ldr	r2, [pc, #320]	; (8006b54 <HAL_DMA_IRQHandler+0x1dc>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d018      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a4e      	ldr	r2, [pc, #312]	; (8006b58 <HAL_DMA_IRQHandler+0x1e0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a4d      	ldr	r2, [pc, #308]	; (8006b5c <HAL_DMA_IRQHandler+0x1e4>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00e      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a4b      	ldr	r2, [pc, #300]	; (8006b60 <HAL_DMA_IRQHandler+0x1e8>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d009      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a4a      	ldr	r2, [pc, #296]	; (8006b64 <HAL_DMA_IRQHandler+0x1ec>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d004      	beq.n	8006a4a <HAL_DMA_IRQHandler+0xd2>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a48      	ldr	r2, [pc, #288]	; (8006b68 <HAL_DMA_IRQHandler+0x1f0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d101      	bne.n	8006a4e <HAL_DMA_IRQHandler+0xd6>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e000      	b.n	8006a50 <HAL_DMA_IRQHandler+0xd8>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 842b 	beq.w	80072ac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5a:	f003 031f 	and.w	r3, r3, #31
 8006a5e:	2208      	movs	r2, #8
 8006a60:	409a      	lsls	r2, r3
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	4013      	ands	r3, r2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 80a2 	beq.w	8006bb0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a2e      	ldr	r2, [pc, #184]	; (8006b2c <HAL_DMA_IRQHandler+0x1b4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d04a      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a2d      	ldr	r2, [pc, #180]	; (8006b30 <HAL_DMA_IRQHandler+0x1b8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d045      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a2b      	ldr	r2, [pc, #172]	; (8006b34 <HAL_DMA_IRQHandler+0x1bc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d040      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a2a      	ldr	r2, [pc, #168]	; (8006b38 <HAL_DMA_IRQHandler+0x1c0>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d03b      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a28      	ldr	r2, [pc, #160]	; (8006b3c <HAL_DMA_IRQHandler+0x1c4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d036      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a27      	ldr	r2, [pc, #156]	; (8006b40 <HAL_DMA_IRQHandler+0x1c8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d031      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a25      	ldr	r2, [pc, #148]	; (8006b44 <HAL_DMA_IRQHandler+0x1cc>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d02c      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a24      	ldr	r2, [pc, #144]	; (8006b48 <HAL_DMA_IRQHandler+0x1d0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d027      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a22      	ldr	r2, [pc, #136]	; (8006b4c <HAL_DMA_IRQHandler+0x1d4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d022      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a21      	ldr	r2, [pc, #132]	; (8006b50 <HAL_DMA_IRQHandler+0x1d8>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d01d      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1f      	ldr	r2, [pc, #124]	; (8006b54 <HAL_DMA_IRQHandler+0x1dc>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d018      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1e      	ldr	r2, [pc, #120]	; (8006b58 <HAL_DMA_IRQHandler+0x1e0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d013      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1c      	ldr	r2, [pc, #112]	; (8006b5c <HAL_DMA_IRQHandler+0x1e4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d00e      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1b      	ldr	r2, [pc, #108]	; (8006b60 <HAL_DMA_IRQHandler+0x1e8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a19      	ldr	r2, [pc, #100]	; (8006b64 <HAL_DMA_IRQHandler+0x1ec>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_DMA_IRQHandler+0x194>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a18      	ldr	r2, [pc, #96]	; (8006b68 <HAL_DMA_IRQHandler+0x1f0>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d12f      	bne.n	8006b6c <HAL_DMA_IRQHandler+0x1f4>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bf14      	ite	ne
 8006b1a:	2301      	movne	r3, #1
 8006b1c:	2300      	moveq	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	e02e      	b.n	8006b80 <HAL_DMA_IRQHandler+0x208>
 8006b22:	bf00      	nop
 8006b24:	24000088 	.word	0x24000088
 8006b28:	1b4e81b5 	.word	0x1b4e81b5
 8006b2c:	40020010 	.word	0x40020010
 8006b30:	40020028 	.word	0x40020028
 8006b34:	40020040 	.word	0x40020040
 8006b38:	40020058 	.word	0x40020058
 8006b3c:	40020070 	.word	0x40020070
 8006b40:	40020088 	.word	0x40020088
 8006b44:	400200a0 	.word	0x400200a0
 8006b48:	400200b8 	.word	0x400200b8
 8006b4c:	40020410 	.word	0x40020410
 8006b50:	40020428 	.word	0x40020428
 8006b54:	40020440 	.word	0x40020440
 8006b58:	40020458 	.word	0x40020458
 8006b5c:	40020470 	.word	0x40020470
 8006b60:	40020488 	.word	0x40020488
 8006b64:	400204a0 	.word	0x400204a0
 8006b68:	400204b8 	.word	0x400204b8
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0308 	and.w	r3, r3, #8
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bf14      	ite	ne
 8006b7a:	2301      	movne	r3, #1
 8006b7c:	2300      	moveq	r3, #0
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d015      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0204 	bic.w	r2, r2, #4
 8006b92:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	2208      	movs	r2, #8
 8006b9e:	409a      	lsls	r2, r3
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba8:	f043 0201 	orr.w	r2, r3, #1
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb4:	f003 031f 	and.w	r3, r3, #31
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	fa22 f303 	lsr.w	r3, r2, r3
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d06e      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a69      	ldr	r2, [pc, #420]	; (8006d70 <HAL_DMA_IRQHandler+0x3f8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d04a      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a67      	ldr	r2, [pc, #412]	; (8006d74 <HAL_DMA_IRQHandler+0x3fc>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d045      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a66      	ldr	r2, [pc, #408]	; (8006d78 <HAL_DMA_IRQHandler+0x400>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d040      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a64      	ldr	r2, [pc, #400]	; (8006d7c <HAL_DMA_IRQHandler+0x404>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d03b      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a63      	ldr	r2, [pc, #396]	; (8006d80 <HAL_DMA_IRQHandler+0x408>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d036      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a61      	ldr	r2, [pc, #388]	; (8006d84 <HAL_DMA_IRQHandler+0x40c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d031      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a60      	ldr	r2, [pc, #384]	; (8006d88 <HAL_DMA_IRQHandler+0x410>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d02c      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a5e      	ldr	r2, [pc, #376]	; (8006d8c <HAL_DMA_IRQHandler+0x414>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d027      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a5d      	ldr	r2, [pc, #372]	; (8006d90 <HAL_DMA_IRQHandler+0x418>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d022      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a5b      	ldr	r2, [pc, #364]	; (8006d94 <HAL_DMA_IRQHandler+0x41c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d01d      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a5a      	ldr	r2, [pc, #360]	; (8006d98 <HAL_DMA_IRQHandler+0x420>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d018      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a58      	ldr	r2, [pc, #352]	; (8006d9c <HAL_DMA_IRQHandler+0x424>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d013      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a57      	ldr	r2, [pc, #348]	; (8006da0 <HAL_DMA_IRQHandler+0x428>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d00e      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a55      	ldr	r2, [pc, #340]	; (8006da4 <HAL_DMA_IRQHandler+0x42c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d009      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a54      	ldr	r2, [pc, #336]	; (8006da8 <HAL_DMA_IRQHandler+0x430>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d004      	beq.n	8006c66 <HAL_DMA_IRQHandler+0x2ee>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a52      	ldr	r2, [pc, #328]	; (8006dac <HAL_DMA_IRQHandler+0x434>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d10a      	bne.n	8006c7c <HAL_DMA_IRQHandler+0x304>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	bf14      	ite	ne
 8006c74:	2301      	movne	r3, #1
 8006c76:	2300      	moveq	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	e003      	b.n	8006c84 <HAL_DMA_IRQHandler+0x30c>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2300      	movs	r3, #0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00d      	beq.n	8006ca4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	2201      	movs	r2, #1
 8006c92:	409a      	lsls	r2, r3
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	f043 0202 	orr.w	r2, r3, #2
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca8:	f003 031f 	and.w	r3, r3, #31
 8006cac:	2204      	movs	r2, #4
 8006cae:	409a      	lsls	r2, r3
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 808f 	beq.w	8006dd8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a2c      	ldr	r2, [pc, #176]	; (8006d70 <HAL_DMA_IRQHandler+0x3f8>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d04a      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a2a      	ldr	r2, [pc, #168]	; (8006d74 <HAL_DMA_IRQHandler+0x3fc>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d045      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a29      	ldr	r2, [pc, #164]	; (8006d78 <HAL_DMA_IRQHandler+0x400>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d040      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a27      	ldr	r2, [pc, #156]	; (8006d7c <HAL_DMA_IRQHandler+0x404>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d03b      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a26      	ldr	r2, [pc, #152]	; (8006d80 <HAL_DMA_IRQHandler+0x408>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d036      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a24      	ldr	r2, [pc, #144]	; (8006d84 <HAL_DMA_IRQHandler+0x40c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d031      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a23      	ldr	r2, [pc, #140]	; (8006d88 <HAL_DMA_IRQHandler+0x410>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d02c      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a21      	ldr	r2, [pc, #132]	; (8006d8c <HAL_DMA_IRQHandler+0x414>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d027      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a20      	ldr	r2, [pc, #128]	; (8006d90 <HAL_DMA_IRQHandler+0x418>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d022      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a1e      	ldr	r2, [pc, #120]	; (8006d94 <HAL_DMA_IRQHandler+0x41c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d01d      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1d      	ldr	r2, [pc, #116]	; (8006d98 <HAL_DMA_IRQHandler+0x420>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d018      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1b      	ldr	r2, [pc, #108]	; (8006d9c <HAL_DMA_IRQHandler+0x424>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1a      	ldr	r2, [pc, #104]	; (8006da0 <HAL_DMA_IRQHandler+0x428>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00e      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a18      	ldr	r2, [pc, #96]	; (8006da4 <HAL_DMA_IRQHandler+0x42c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d009      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <HAL_DMA_IRQHandler+0x430>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d004      	beq.n	8006d5a <HAL_DMA_IRQHandler+0x3e2>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a15      	ldr	r2, [pc, #84]	; (8006dac <HAL_DMA_IRQHandler+0x434>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d12a      	bne.n	8006db0 <HAL_DMA_IRQHandler+0x438>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bf14      	ite	ne
 8006d68:	2301      	movne	r3, #1
 8006d6a:	2300      	moveq	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	e023      	b.n	8006db8 <HAL_DMA_IRQHandler+0x440>
 8006d70:	40020010 	.word	0x40020010
 8006d74:	40020028 	.word	0x40020028
 8006d78:	40020040 	.word	0x40020040
 8006d7c:	40020058 	.word	0x40020058
 8006d80:	40020070 	.word	0x40020070
 8006d84:	40020088 	.word	0x40020088
 8006d88:	400200a0 	.word	0x400200a0
 8006d8c:	400200b8 	.word	0x400200b8
 8006d90:	40020410 	.word	0x40020410
 8006d94:	40020428 	.word	0x40020428
 8006d98:	40020440 	.word	0x40020440
 8006d9c:	40020458 	.word	0x40020458
 8006da0:	40020470 	.word	0x40020470
 8006da4:	40020488 	.word	0x40020488
 8006da8:	400204a0 	.word	0x400204a0
 8006dac:	400204b8 	.word	0x400204b8
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2300      	movs	r3, #0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00d      	beq.n	8006dd8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc0:	f003 031f 	and.w	r3, r3, #31
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	409a      	lsls	r2, r3
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd0:	f043 0204 	orr.w	r2, r3, #4
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	2210      	movs	r2, #16
 8006de2:	409a      	lsls	r2, r3
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80a6 	beq.w	8006f3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a85      	ldr	r2, [pc, #532]	; (8007008 <HAL_DMA_IRQHandler+0x690>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d04a      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a83      	ldr	r2, [pc, #524]	; (800700c <HAL_DMA_IRQHandler+0x694>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d045      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a82      	ldr	r2, [pc, #520]	; (8007010 <HAL_DMA_IRQHandler+0x698>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d040      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a80      	ldr	r2, [pc, #512]	; (8007014 <HAL_DMA_IRQHandler+0x69c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d03b      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a7f      	ldr	r2, [pc, #508]	; (8007018 <HAL_DMA_IRQHandler+0x6a0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d036      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a7d      	ldr	r2, [pc, #500]	; (800701c <HAL_DMA_IRQHandler+0x6a4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d031      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a7c      	ldr	r2, [pc, #496]	; (8007020 <HAL_DMA_IRQHandler+0x6a8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d02c      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a7a      	ldr	r2, [pc, #488]	; (8007024 <HAL_DMA_IRQHandler+0x6ac>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d027      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a79      	ldr	r2, [pc, #484]	; (8007028 <HAL_DMA_IRQHandler+0x6b0>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d022      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a77      	ldr	r2, [pc, #476]	; (800702c <HAL_DMA_IRQHandler+0x6b4>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d01d      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a76      	ldr	r2, [pc, #472]	; (8007030 <HAL_DMA_IRQHandler+0x6b8>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d018      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a74      	ldr	r2, [pc, #464]	; (8007034 <HAL_DMA_IRQHandler+0x6bc>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d013      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a73      	ldr	r2, [pc, #460]	; (8007038 <HAL_DMA_IRQHandler+0x6c0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00e      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a71      	ldr	r2, [pc, #452]	; (800703c <HAL_DMA_IRQHandler+0x6c4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d009      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a70      	ldr	r2, [pc, #448]	; (8007040 <HAL_DMA_IRQHandler+0x6c8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d004      	beq.n	8006e8e <HAL_DMA_IRQHandler+0x516>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a6e      	ldr	r2, [pc, #440]	; (8007044 <HAL_DMA_IRQHandler+0x6cc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d10a      	bne.n	8006ea4 <HAL_DMA_IRQHandler+0x52c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	bf14      	ite	ne
 8006e9c:	2301      	movne	r3, #1
 8006e9e:	2300      	moveq	r3, #0
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	e009      	b.n	8006eb8 <HAL_DMA_IRQHandler+0x540>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0304 	and.w	r3, r3, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bf14      	ite	ne
 8006eb2:	2301      	movne	r3, #1
 8006eb4:	2300      	moveq	r3, #0
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d03e      	beq.n	8006f3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ec0:	f003 031f 	and.w	r3, r3, #31
 8006ec4:	2210      	movs	r2, #16
 8006ec6:	409a      	lsls	r2, r3
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d018      	beq.n	8006f0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d108      	bne.n	8006efa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d024      	beq.n	8006f3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	4798      	blx	r3
 8006ef8:	e01f      	b.n	8006f3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d01b      	beq.n	8006f3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	4798      	blx	r3
 8006f0a:	e016      	b.n	8006f3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d107      	bne.n	8006f2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0208 	bic.w	r2, r2, #8
 8006f28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f3e:	f003 031f 	and.w	r3, r3, #31
 8006f42:	2220      	movs	r2, #32
 8006f44:	409a      	lsls	r2, r3
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4013      	ands	r3, r2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 8110 	beq.w	8007170 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a2c      	ldr	r2, [pc, #176]	; (8007008 <HAL_DMA_IRQHandler+0x690>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d04a      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a2b      	ldr	r2, [pc, #172]	; (800700c <HAL_DMA_IRQHandler+0x694>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d045      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a29      	ldr	r2, [pc, #164]	; (8007010 <HAL_DMA_IRQHandler+0x698>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d040      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a28      	ldr	r2, [pc, #160]	; (8007014 <HAL_DMA_IRQHandler+0x69c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d03b      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a26      	ldr	r2, [pc, #152]	; (8007018 <HAL_DMA_IRQHandler+0x6a0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d036      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a25      	ldr	r2, [pc, #148]	; (800701c <HAL_DMA_IRQHandler+0x6a4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d031      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a23      	ldr	r2, [pc, #140]	; (8007020 <HAL_DMA_IRQHandler+0x6a8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d02c      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a22      	ldr	r2, [pc, #136]	; (8007024 <HAL_DMA_IRQHandler+0x6ac>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d027      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a20      	ldr	r2, [pc, #128]	; (8007028 <HAL_DMA_IRQHandler+0x6b0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d022      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1f      	ldr	r2, [pc, #124]	; (800702c <HAL_DMA_IRQHandler+0x6b4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d01d      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1d      	ldr	r2, [pc, #116]	; (8007030 <HAL_DMA_IRQHandler+0x6b8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d018      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1c      	ldr	r2, [pc, #112]	; (8007034 <HAL_DMA_IRQHandler+0x6bc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d013      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1a      	ldr	r2, [pc, #104]	; (8007038 <HAL_DMA_IRQHandler+0x6c0>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00e      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a19      	ldr	r2, [pc, #100]	; (800703c <HAL_DMA_IRQHandler+0x6c4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d009      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a17      	ldr	r2, [pc, #92]	; (8007040 <HAL_DMA_IRQHandler+0x6c8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_DMA_IRQHandler+0x678>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a16      	ldr	r2, [pc, #88]	; (8007044 <HAL_DMA_IRQHandler+0x6cc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d12b      	bne.n	8007048 <HAL_DMA_IRQHandler+0x6d0>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0310 	and.w	r3, r3, #16
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf14      	ite	ne
 8006ffe:	2301      	movne	r3, #1
 8007000:	2300      	moveq	r3, #0
 8007002:	b2db      	uxtb	r3, r3
 8007004:	e02a      	b.n	800705c <HAL_DMA_IRQHandler+0x6e4>
 8007006:	bf00      	nop
 8007008:	40020010 	.word	0x40020010
 800700c:	40020028 	.word	0x40020028
 8007010:	40020040 	.word	0x40020040
 8007014:	40020058 	.word	0x40020058
 8007018:	40020070 	.word	0x40020070
 800701c:	40020088 	.word	0x40020088
 8007020:	400200a0 	.word	0x400200a0
 8007024:	400200b8 	.word	0x400200b8
 8007028:	40020410 	.word	0x40020410
 800702c:	40020428 	.word	0x40020428
 8007030:	40020440 	.word	0x40020440
 8007034:	40020458 	.word	0x40020458
 8007038:	40020470 	.word	0x40020470
 800703c:	40020488 	.word	0x40020488
 8007040:	400204a0 	.word	0x400204a0
 8007044:	400204b8 	.word	0x400204b8
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	bf14      	ite	ne
 8007056:	2301      	movne	r3, #1
 8007058:	2300      	moveq	r3, #0
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8087 	beq.w	8007170 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007066:	f003 031f 	and.w	r3, r3, #31
 800706a:	2220      	movs	r2, #32
 800706c:	409a      	lsls	r2, r3
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b04      	cmp	r3, #4
 800707c:	d139      	bne.n	80070f2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0216 	bic.w	r2, r2, #22
 800708c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	695a      	ldr	r2, [r3, #20]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800709c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d103      	bne.n	80070ae <HAL_DMA_IRQHandler+0x736>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d007      	beq.n	80070be <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0208 	bic.w	r2, r2, #8
 80070bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	223f      	movs	r2, #63	; 0x3f
 80070c8:	409a      	lsls	r2, r3
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 834a 	beq.w	800777c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	4798      	blx	r3
          }
          return;
 80070f0:	e344      	b.n	800777c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d018      	beq.n	8007132 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d108      	bne.n	8007120 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007112:	2b00      	cmp	r3, #0
 8007114:	d02c      	beq.n	8007170 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
 800711e:	e027      	b.n	8007170 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007124:	2b00      	cmp	r3, #0
 8007126:	d023      	beq.n	8007170 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	4798      	blx	r3
 8007130:	e01e      	b.n	8007170 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10f      	bne.n	8007160 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0210 	bic.w	r2, r2, #16
 800714e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8306 	beq.w	8007786 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 8088 	beq.w	8007298 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2204      	movs	r2, #4
 800718c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a7a      	ldr	r2, [pc, #488]	; (8007380 <HAL_DMA_IRQHandler+0xa08>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d04a      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a79      	ldr	r2, [pc, #484]	; (8007384 <HAL_DMA_IRQHandler+0xa0c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d045      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a77      	ldr	r2, [pc, #476]	; (8007388 <HAL_DMA_IRQHandler+0xa10>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d040      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a76      	ldr	r2, [pc, #472]	; (800738c <HAL_DMA_IRQHandler+0xa14>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d03b      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a74      	ldr	r2, [pc, #464]	; (8007390 <HAL_DMA_IRQHandler+0xa18>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d036      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a73      	ldr	r2, [pc, #460]	; (8007394 <HAL_DMA_IRQHandler+0xa1c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d031      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a71      	ldr	r2, [pc, #452]	; (8007398 <HAL_DMA_IRQHandler+0xa20>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d02c      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a70      	ldr	r2, [pc, #448]	; (800739c <HAL_DMA_IRQHandler+0xa24>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d027      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a6e      	ldr	r2, [pc, #440]	; (80073a0 <HAL_DMA_IRQHandler+0xa28>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d022      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a6d      	ldr	r2, [pc, #436]	; (80073a4 <HAL_DMA_IRQHandler+0xa2c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d01d      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a6b      	ldr	r2, [pc, #428]	; (80073a8 <HAL_DMA_IRQHandler+0xa30>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d018      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a6a      	ldr	r2, [pc, #424]	; (80073ac <HAL_DMA_IRQHandler+0xa34>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d013      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a68      	ldr	r2, [pc, #416]	; (80073b0 <HAL_DMA_IRQHandler+0xa38>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00e      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a67      	ldr	r2, [pc, #412]	; (80073b4 <HAL_DMA_IRQHandler+0xa3c>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d009      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a65      	ldr	r2, [pc, #404]	; (80073b8 <HAL_DMA_IRQHandler+0xa40>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d004      	beq.n	8007230 <HAL_DMA_IRQHandler+0x8b8>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a64      	ldr	r2, [pc, #400]	; (80073bc <HAL_DMA_IRQHandler+0xa44>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d108      	bne.n	8007242 <HAL_DMA_IRQHandler+0x8ca>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0201 	bic.w	r2, r2, #1
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	e007      	b.n	8007252 <HAL_DMA_IRQHandler+0x8da>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3301      	adds	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]
 8007258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800725a:	429a      	cmp	r2, r3
 800725c:	d307      	bcc.n	800726e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1f2      	bne.n	8007252 <HAL_DMA_IRQHandler+0x8da>
 800726c:	e000      	b.n	8007270 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800726e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b00      	cmp	r3, #0
 800727c:	d004      	beq.n	8007288 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2203      	movs	r2, #3
 8007282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007286:	e003      	b.n	8007290 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 8272 	beq.w	8007786 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
 80072aa:	e26c      	b.n	8007786 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a43      	ldr	r2, [pc, #268]	; (80073c0 <HAL_DMA_IRQHandler+0xa48>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d022      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a42      	ldr	r2, [pc, #264]	; (80073c4 <HAL_DMA_IRQHandler+0xa4c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d01d      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a40      	ldr	r2, [pc, #256]	; (80073c8 <HAL_DMA_IRQHandler+0xa50>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d018      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a3f      	ldr	r2, [pc, #252]	; (80073cc <HAL_DMA_IRQHandler+0xa54>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d013      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a3d      	ldr	r2, [pc, #244]	; (80073d0 <HAL_DMA_IRQHandler+0xa58>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d00e      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a3c      	ldr	r2, [pc, #240]	; (80073d4 <HAL_DMA_IRQHandler+0xa5c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d009      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a3a      	ldr	r2, [pc, #232]	; (80073d8 <HAL_DMA_IRQHandler+0xa60>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d004      	beq.n	80072fc <HAL_DMA_IRQHandler+0x984>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a39      	ldr	r2, [pc, #228]	; (80073dc <HAL_DMA_IRQHandler+0xa64>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d101      	bne.n	8007300 <HAL_DMA_IRQHandler+0x988>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e000      	b.n	8007302 <HAL_DMA_IRQHandler+0x98a>
 8007300:	2300      	movs	r3, #0
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 823f 	beq.w	8007786 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	2204      	movs	r2, #4
 800731a:	409a      	lsls	r2, r3
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	4013      	ands	r3, r2
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 80cd 	beq.w	80074c0 <HAL_DMA_IRQHandler+0xb48>
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 80c7 	beq.w	80074c0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007336:	f003 031f 	and.w	r3, r3, #31
 800733a:	2204      	movs	r2, #4
 800733c:	409a      	lsls	r2, r3
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d049      	beq.n	80073e0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 8210 	beq.w	8007780 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007368:	e20a      	b.n	8007780 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 8206 	beq.w	8007780 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800737c:	e200      	b.n	8007780 <HAL_DMA_IRQHandler+0xe08>
 800737e:	bf00      	nop
 8007380:	40020010 	.word	0x40020010
 8007384:	40020028 	.word	0x40020028
 8007388:	40020040 	.word	0x40020040
 800738c:	40020058 	.word	0x40020058
 8007390:	40020070 	.word	0x40020070
 8007394:	40020088 	.word	0x40020088
 8007398:	400200a0 	.word	0x400200a0
 800739c:	400200b8 	.word	0x400200b8
 80073a0:	40020410 	.word	0x40020410
 80073a4:	40020428 	.word	0x40020428
 80073a8:	40020440 	.word	0x40020440
 80073ac:	40020458 	.word	0x40020458
 80073b0:	40020470 	.word	0x40020470
 80073b4:	40020488 	.word	0x40020488
 80073b8:	400204a0 	.word	0x400204a0
 80073bc:	400204b8 	.word	0x400204b8
 80073c0:	58025408 	.word	0x58025408
 80073c4:	5802541c 	.word	0x5802541c
 80073c8:	58025430 	.word	0x58025430
 80073cc:	58025444 	.word	0x58025444
 80073d0:	58025458 	.word	0x58025458
 80073d4:	5802546c 	.word	0x5802546c
 80073d8:	58025480 	.word	0x58025480
 80073dc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d160      	bne.n	80074ac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a7f      	ldr	r2, [pc, #508]	; (80075ec <HAL_DMA_IRQHandler+0xc74>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d04a      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a7d      	ldr	r2, [pc, #500]	; (80075f0 <HAL_DMA_IRQHandler+0xc78>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d045      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a7c      	ldr	r2, [pc, #496]	; (80075f4 <HAL_DMA_IRQHandler+0xc7c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d040      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a7a      	ldr	r2, [pc, #488]	; (80075f8 <HAL_DMA_IRQHandler+0xc80>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d03b      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a79      	ldr	r2, [pc, #484]	; (80075fc <HAL_DMA_IRQHandler+0xc84>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d036      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a77      	ldr	r2, [pc, #476]	; (8007600 <HAL_DMA_IRQHandler+0xc88>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d031      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a76      	ldr	r2, [pc, #472]	; (8007604 <HAL_DMA_IRQHandler+0xc8c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d02c      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a74      	ldr	r2, [pc, #464]	; (8007608 <HAL_DMA_IRQHandler+0xc90>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d027      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a73      	ldr	r2, [pc, #460]	; (800760c <HAL_DMA_IRQHandler+0xc94>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d022      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a71      	ldr	r2, [pc, #452]	; (8007610 <HAL_DMA_IRQHandler+0xc98>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d01d      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a70      	ldr	r2, [pc, #448]	; (8007614 <HAL_DMA_IRQHandler+0xc9c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d018      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a6e      	ldr	r2, [pc, #440]	; (8007618 <HAL_DMA_IRQHandler+0xca0>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d013      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a6d      	ldr	r2, [pc, #436]	; (800761c <HAL_DMA_IRQHandler+0xca4>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00e      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a6b      	ldr	r2, [pc, #428]	; (8007620 <HAL_DMA_IRQHandler+0xca8>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d009      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a6a      	ldr	r2, [pc, #424]	; (8007624 <HAL_DMA_IRQHandler+0xcac>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <HAL_DMA_IRQHandler+0xb12>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a68      	ldr	r2, [pc, #416]	; (8007628 <HAL_DMA_IRQHandler+0xcb0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d108      	bne.n	800749c <HAL_DMA_IRQHandler+0xb24>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0208 	bic.w	r2, r2, #8
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	e007      	b.n	80074ac <HAL_DMA_IRQHandler+0xb34>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0204 	bic.w	r2, r2, #4
 80074aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8165 	beq.w	8007780 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074be:	e15f      	b.n	8007780 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c4:	f003 031f 	and.w	r3, r3, #31
 80074c8:	2202      	movs	r2, #2
 80074ca:	409a      	lsls	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	4013      	ands	r3, r2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f000 80c5 	beq.w	8007660 <HAL_DMA_IRQHandler+0xce8>
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 80bf 	beq.w	8007660 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e6:	f003 031f 	and.w	r3, r3, #31
 80074ea:	2202      	movs	r2, #2
 80074ec:	409a      	lsls	r2, r3
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d018      	beq.n	800752e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 813a 	beq.w	8007784 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007518:	e134      	b.n	8007784 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 8130 	beq.w	8007784 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800752c:	e12a      	b.n	8007784 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f003 0320 	and.w	r3, r3, #32
 8007534:	2b00      	cmp	r3, #0
 8007536:	f040 8089 	bne.w	800764c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a2b      	ldr	r2, [pc, #172]	; (80075ec <HAL_DMA_IRQHandler+0xc74>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d04a      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a29      	ldr	r2, [pc, #164]	; (80075f0 <HAL_DMA_IRQHandler+0xc78>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d045      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a28      	ldr	r2, [pc, #160]	; (80075f4 <HAL_DMA_IRQHandler+0xc7c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d040      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a26      	ldr	r2, [pc, #152]	; (80075f8 <HAL_DMA_IRQHandler+0xc80>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d03b      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a25      	ldr	r2, [pc, #148]	; (80075fc <HAL_DMA_IRQHandler+0xc84>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d036      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a23      	ldr	r2, [pc, #140]	; (8007600 <HAL_DMA_IRQHandler+0xc88>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d031      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a22      	ldr	r2, [pc, #136]	; (8007604 <HAL_DMA_IRQHandler+0xc8c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d02c      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a20      	ldr	r2, [pc, #128]	; (8007608 <HAL_DMA_IRQHandler+0xc90>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d027      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1f      	ldr	r2, [pc, #124]	; (800760c <HAL_DMA_IRQHandler+0xc94>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d022      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1d      	ldr	r2, [pc, #116]	; (8007610 <HAL_DMA_IRQHandler+0xc98>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d01d      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1c      	ldr	r2, [pc, #112]	; (8007614 <HAL_DMA_IRQHandler+0xc9c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d018      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a1a      	ldr	r2, [pc, #104]	; (8007618 <HAL_DMA_IRQHandler+0xca0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d013      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a19      	ldr	r2, [pc, #100]	; (800761c <HAL_DMA_IRQHandler+0xca4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00e      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a17      	ldr	r2, [pc, #92]	; (8007620 <HAL_DMA_IRQHandler+0xca8>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d009      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a16      	ldr	r2, [pc, #88]	; (8007624 <HAL_DMA_IRQHandler+0xcac>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d004      	beq.n	80075da <HAL_DMA_IRQHandler+0xc62>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a14      	ldr	r2, [pc, #80]	; (8007628 <HAL_DMA_IRQHandler+0xcb0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d128      	bne.n	800762c <HAL_DMA_IRQHandler+0xcb4>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0214 	bic.w	r2, r2, #20
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	e027      	b.n	800763c <HAL_DMA_IRQHandler+0xcc4>
 80075ec:	40020010 	.word	0x40020010
 80075f0:	40020028 	.word	0x40020028
 80075f4:	40020040 	.word	0x40020040
 80075f8:	40020058 	.word	0x40020058
 80075fc:	40020070 	.word	0x40020070
 8007600:	40020088 	.word	0x40020088
 8007604:	400200a0 	.word	0x400200a0
 8007608:	400200b8 	.word	0x400200b8
 800760c:	40020410 	.word	0x40020410
 8007610:	40020428 	.word	0x40020428
 8007614:	40020440 	.word	0x40020440
 8007618:	40020458 	.word	0x40020458
 800761c:	40020470 	.word	0x40020470
 8007620:	40020488 	.word	0x40020488
 8007624:	400204a0 	.word	0x400204a0
 8007628:	400204b8 	.word	0x400204b8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 020a 	bic.w	r2, r2, #10
 800763a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 8097 	beq.w	8007784 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800765e:	e091      	b.n	8007784 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007664:	f003 031f 	and.w	r3, r3, #31
 8007668:	2208      	movs	r2, #8
 800766a:	409a      	lsls	r2, r3
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	4013      	ands	r3, r2
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 8088 	beq.w	8007786 <HAL_DMA_IRQHandler+0xe0e>
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 8082 	beq.w	8007786 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a41      	ldr	r2, [pc, #260]	; (800778c <HAL_DMA_IRQHandler+0xe14>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d04a      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a3f      	ldr	r2, [pc, #252]	; (8007790 <HAL_DMA_IRQHandler+0xe18>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d045      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a3e      	ldr	r2, [pc, #248]	; (8007794 <HAL_DMA_IRQHandler+0xe1c>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d040      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a3c      	ldr	r2, [pc, #240]	; (8007798 <HAL_DMA_IRQHandler+0xe20>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d03b      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a3b      	ldr	r2, [pc, #236]	; (800779c <HAL_DMA_IRQHandler+0xe24>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d036      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a39      	ldr	r2, [pc, #228]	; (80077a0 <HAL_DMA_IRQHandler+0xe28>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d031      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a38      	ldr	r2, [pc, #224]	; (80077a4 <HAL_DMA_IRQHandler+0xe2c>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d02c      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a36      	ldr	r2, [pc, #216]	; (80077a8 <HAL_DMA_IRQHandler+0xe30>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d027      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a35      	ldr	r2, [pc, #212]	; (80077ac <HAL_DMA_IRQHandler+0xe34>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d022      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a33      	ldr	r2, [pc, #204]	; (80077b0 <HAL_DMA_IRQHandler+0xe38>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d01d      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a32      	ldr	r2, [pc, #200]	; (80077b4 <HAL_DMA_IRQHandler+0xe3c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d018      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a30      	ldr	r2, [pc, #192]	; (80077b8 <HAL_DMA_IRQHandler+0xe40>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a2f      	ldr	r2, [pc, #188]	; (80077bc <HAL_DMA_IRQHandler+0xe44>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00e      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a2d      	ldr	r2, [pc, #180]	; (80077c0 <HAL_DMA_IRQHandler+0xe48>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d009      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a2c      	ldr	r2, [pc, #176]	; (80077c4 <HAL_DMA_IRQHandler+0xe4c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d004      	beq.n	8007722 <HAL_DMA_IRQHandler+0xdaa>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a2a      	ldr	r2, [pc, #168]	; (80077c8 <HAL_DMA_IRQHandler+0xe50>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d108      	bne.n	8007734 <HAL_DMA_IRQHandler+0xdbc>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 021c 	bic.w	r2, r2, #28
 8007730:	601a      	str	r2, [r3, #0]
 8007732:	e007      	b.n	8007744 <HAL_DMA_IRQHandler+0xdcc>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 020e 	bic.w	r2, r2, #14
 8007742:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007748:	f003 031f 	and.w	r3, r3, #31
 800774c:	2201      	movs	r2, #1
 800774e:	409a      	lsls	r2, r3
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d009      	beq.n	8007786 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4798      	blx	r3
 800777a:	e004      	b.n	8007786 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800777c:	bf00      	nop
 800777e:	e002      	b.n	8007786 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007780:	bf00      	nop
 8007782:	e000      	b.n	8007786 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007784:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007786:	3728      	adds	r7, #40	; 0x28
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	40020010 	.word	0x40020010
 8007790:	40020028 	.word	0x40020028
 8007794:	40020040 	.word	0x40020040
 8007798:	40020058 	.word	0x40020058
 800779c:	40020070 	.word	0x40020070
 80077a0:	40020088 	.word	0x40020088
 80077a4:	400200a0 	.word	0x400200a0
 80077a8:	400200b8 	.word	0x400200b8
 80077ac:	40020410 	.word	0x40020410
 80077b0:	40020428 	.word	0x40020428
 80077b4:	40020440 	.word	0x40020440
 80077b8:	40020458 	.word	0x40020458
 80077bc:	40020470 	.word	0x40020470
 80077c0:	40020488 	.word	0x40020488
 80077c4:	400204a0 	.word	0x400204a0
 80077c8:	400204b8 	.word	0x400204b8

080077cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a7f      	ldr	r2, [pc, #508]	; (80079e8 <DMA_SetConfig+0x21c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d072      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a7d      	ldr	r2, [pc, #500]	; (80079ec <DMA_SetConfig+0x220>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d06d      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a7c      	ldr	r2, [pc, #496]	; (80079f0 <DMA_SetConfig+0x224>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d068      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a7a      	ldr	r2, [pc, #488]	; (80079f4 <DMA_SetConfig+0x228>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d063      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a79      	ldr	r2, [pc, #484]	; (80079f8 <DMA_SetConfig+0x22c>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d05e      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a77      	ldr	r2, [pc, #476]	; (80079fc <DMA_SetConfig+0x230>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d059      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a76      	ldr	r2, [pc, #472]	; (8007a00 <DMA_SetConfig+0x234>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d054      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a74      	ldr	r2, [pc, #464]	; (8007a04 <DMA_SetConfig+0x238>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d04f      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a73      	ldr	r2, [pc, #460]	; (8007a08 <DMA_SetConfig+0x23c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d04a      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a71      	ldr	r2, [pc, #452]	; (8007a0c <DMA_SetConfig+0x240>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d045      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a70      	ldr	r2, [pc, #448]	; (8007a10 <DMA_SetConfig+0x244>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d040      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a6e      	ldr	r2, [pc, #440]	; (8007a14 <DMA_SetConfig+0x248>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d03b      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a6d      	ldr	r2, [pc, #436]	; (8007a18 <DMA_SetConfig+0x24c>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d036      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a6b      	ldr	r2, [pc, #428]	; (8007a1c <DMA_SetConfig+0x250>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d031      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a6a      	ldr	r2, [pc, #424]	; (8007a20 <DMA_SetConfig+0x254>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d02c      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a68      	ldr	r2, [pc, #416]	; (8007a24 <DMA_SetConfig+0x258>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d027      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a67      	ldr	r2, [pc, #412]	; (8007a28 <DMA_SetConfig+0x25c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d022      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a65      	ldr	r2, [pc, #404]	; (8007a2c <DMA_SetConfig+0x260>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d01d      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a64      	ldr	r2, [pc, #400]	; (8007a30 <DMA_SetConfig+0x264>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d018      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a62      	ldr	r2, [pc, #392]	; (8007a34 <DMA_SetConfig+0x268>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d013      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a61      	ldr	r2, [pc, #388]	; (8007a38 <DMA_SetConfig+0x26c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00e      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a5f      	ldr	r2, [pc, #380]	; (8007a3c <DMA_SetConfig+0x270>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d009      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a5e      	ldr	r2, [pc, #376]	; (8007a40 <DMA_SetConfig+0x274>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d004      	beq.n	80078d6 <DMA_SetConfig+0x10a>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a5c      	ldr	r2, [pc, #368]	; (8007a44 <DMA_SetConfig+0x278>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d101      	bne.n	80078da <DMA_SetConfig+0x10e>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <DMA_SetConfig+0x110>
 80078da:	2300      	movs	r3, #0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00d      	beq.n	80078fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80078e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a39      	ldr	r2, [pc, #228]	; (80079e8 <DMA_SetConfig+0x21c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d04a      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a38      	ldr	r2, [pc, #224]	; (80079ec <DMA_SetConfig+0x220>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d045      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a36      	ldr	r2, [pc, #216]	; (80079f0 <DMA_SetConfig+0x224>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d040      	beq.n	800799c <DMA_SetConfig+0x1d0>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a35      	ldr	r2, [pc, #212]	; (80079f4 <DMA_SetConfig+0x228>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d03b      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a33      	ldr	r2, [pc, #204]	; (80079f8 <DMA_SetConfig+0x22c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d036      	beq.n	800799c <DMA_SetConfig+0x1d0>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a32      	ldr	r2, [pc, #200]	; (80079fc <DMA_SetConfig+0x230>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d031      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a30      	ldr	r2, [pc, #192]	; (8007a00 <DMA_SetConfig+0x234>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d02c      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a2f      	ldr	r2, [pc, #188]	; (8007a04 <DMA_SetConfig+0x238>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d027      	beq.n	800799c <DMA_SetConfig+0x1d0>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a2d      	ldr	r2, [pc, #180]	; (8007a08 <DMA_SetConfig+0x23c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d022      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a2c      	ldr	r2, [pc, #176]	; (8007a0c <DMA_SetConfig+0x240>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d01d      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a2a      	ldr	r2, [pc, #168]	; (8007a10 <DMA_SetConfig+0x244>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d018      	beq.n	800799c <DMA_SetConfig+0x1d0>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a29      	ldr	r2, [pc, #164]	; (8007a14 <DMA_SetConfig+0x248>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d013      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a27      	ldr	r2, [pc, #156]	; (8007a18 <DMA_SetConfig+0x24c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d00e      	beq.n	800799c <DMA_SetConfig+0x1d0>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a26      	ldr	r2, [pc, #152]	; (8007a1c <DMA_SetConfig+0x250>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d009      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a24      	ldr	r2, [pc, #144]	; (8007a20 <DMA_SetConfig+0x254>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d004      	beq.n	800799c <DMA_SetConfig+0x1d0>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a23      	ldr	r2, [pc, #140]	; (8007a24 <DMA_SetConfig+0x258>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d101      	bne.n	80079a0 <DMA_SetConfig+0x1d4>
 800799c:	2301      	movs	r3, #1
 800799e:	e000      	b.n	80079a2 <DMA_SetConfig+0x1d6>
 80079a0:	2300      	movs	r3, #0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d059      	beq.n	8007a5a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079aa:	f003 031f 	and.w	r3, r3, #31
 80079ae:	223f      	movs	r2, #63	; 0x3f
 80079b0:	409a      	lsls	r2, r3
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b40      	cmp	r3, #64	; 0x40
 80079d4:	d138      	bne.n	8007a48 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80079e6:	e086      	b.n	8007af6 <DMA_SetConfig+0x32a>
 80079e8:	40020010 	.word	0x40020010
 80079ec:	40020028 	.word	0x40020028
 80079f0:	40020040 	.word	0x40020040
 80079f4:	40020058 	.word	0x40020058
 80079f8:	40020070 	.word	0x40020070
 80079fc:	40020088 	.word	0x40020088
 8007a00:	400200a0 	.word	0x400200a0
 8007a04:	400200b8 	.word	0x400200b8
 8007a08:	40020410 	.word	0x40020410
 8007a0c:	40020428 	.word	0x40020428
 8007a10:	40020440 	.word	0x40020440
 8007a14:	40020458 	.word	0x40020458
 8007a18:	40020470 	.word	0x40020470
 8007a1c:	40020488 	.word	0x40020488
 8007a20:	400204a0 	.word	0x400204a0
 8007a24:	400204b8 	.word	0x400204b8
 8007a28:	58025408 	.word	0x58025408
 8007a2c:	5802541c 	.word	0x5802541c
 8007a30:	58025430 	.word	0x58025430
 8007a34:	58025444 	.word	0x58025444
 8007a38:	58025458 	.word	0x58025458
 8007a3c:	5802546c 	.word	0x5802546c
 8007a40:	58025480 	.word	0x58025480
 8007a44:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	60da      	str	r2, [r3, #12]
}
 8007a58:	e04d      	b.n	8007af6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a29      	ldr	r2, [pc, #164]	; (8007b04 <DMA_SetConfig+0x338>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d022      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a27      	ldr	r2, [pc, #156]	; (8007b08 <DMA_SetConfig+0x33c>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d01d      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a26      	ldr	r2, [pc, #152]	; (8007b0c <DMA_SetConfig+0x340>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d018      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a24      	ldr	r2, [pc, #144]	; (8007b10 <DMA_SetConfig+0x344>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d013      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a23      	ldr	r2, [pc, #140]	; (8007b14 <DMA_SetConfig+0x348>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d00e      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a21      	ldr	r2, [pc, #132]	; (8007b18 <DMA_SetConfig+0x34c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d009      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a20      	ldr	r2, [pc, #128]	; (8007b1c <DMA_SetConfig+0x350>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d004      	beq.n	8007aaa <DMA_SetConfig+0x2de>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1e      	ldr	r2, [pc, #120]	; (8007b20 <DMA_SetConfig+0x354>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d101      	bne.n	8007aae <DMA_SetConfig+0x2e2>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e000      	b.n	8007ab0 <DMA_SetConfig+0x2e4>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d020      	beq.n	8007af6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab8:	f003 031f 	and.w	r3, r3, #31
 8007abc:	2201      	movs	r2, #1
 8007abe:	409a      	lsls	r2, r3
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2b40      	cmp	r3, #64	; 0x40
 8007ad2:	d108      	bne.n	8007ae6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	60da      	str	r2, [r3, #12]
}
 8007ae4:	e007      	b.n	8007af6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	60da      	str	r2, [r3, #12]
}
 8007af6:	bf00      	nop
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	58025408 	.word	0x58025408
 8007b08:	5802541c 	.word	0x5802541c
 8007b0c:	58025430 	.word	0x58025430
 8007b10:	58025444 	.word	0x58025444
 8007b14:	58025458 	.word	0x58025458
 8007b18:	5802546c 	.word	0x5802546c
 8007b1c:	58025480 	.word	0x58025480
 8007b20:	58025494 	.word	0x58025494

08007b24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a42      	ldr	r2, [pc, #264]	; (8007c3c <DMA_CalcBaseAndBitshift+0x118>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d04a      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a41      	ldr	r2, [pc, #260]	; (8007c40 <DMA_CalcBaseAndBitshift+0x11c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d045      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a3f      	ldr	r2, [pc, #252]	; (8007c44 <DMA_CalcBaseAndBitshift+0x120>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d040      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a3e      	ldr	r2, [pc, #248]	; (8007c48 <DMA_CalcBaseAndBitshift+0x124>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d03b      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a3c      	ldr	r2, [pc, #240]	; (8007c4c <DMA_CalcBaseAndBitshift+0x128>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d036      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a3b      	ldr	r2, [pc, #236]	; (8007c50 <DMA_CalcBaseAndBitshift+0x12c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d031      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a39      	ldr	r2, [pc, #228]	; (8007c54 <DMA_CalcBaseAndBitshift+0x130>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d02c      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a38      	ldr	r2, [pc, #224]	; (8007c58 <DMA_CalcBaseAndBitshift+0x134>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d027      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a36      	ldr	r2, [pc, #216]	; (8007c5c <DMA_CalcBaseAndBitshift+0x138>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d022      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a35      	ldr	r2, [pc, #212]	; (8007c60 <DMA_CalcBaseAndBitshift+0x13c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d01d      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a33      	ldr	r2, [pc, #204]	; (8007c64 <DMA_CalcBaseAndBitshift+0x140>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d018      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a32      	ldr	r2, [pc, #200]	; (8007c68 <DMA_CalcBaseAndBitshift+0x144>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d013      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a30      	ldr	r2, [pc, #192]	; (8007c6c <DMA_CalcBaseAndBitshift+0x148>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00e      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a2f      	ldr	r2, [pc, #188]	; (8007c70 <DMA_CalcBaseAndBitshift+0x14c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d009      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a2d      	ldr	r2, [pc, #180]	; (8007c74 <DMA_CalcBaseAndBitshift+0x150>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d004      	beq.n	8007bcc <DMA_CalcBaseAndBitshift+0xa8>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a2c      	ldr	r2, [pc, #176]	; (8007c78 <DMA_CalcBaseAndBitshift+0x154>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d101      	bne.n	8007bd0 <DMA_CalcBaseAndBitshift+0xac>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	e000      	b.n	8007bd2 <DMA_CalcBaseAndBitshift+0xae>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d024      	beq.n	8007c20 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	3b10      	subs	r3, #16
 8007bde:	4a27      	ldr	r2, [pc, #156]	; (8007c7c <DMA_CalcBaseAndBitshift+0x158>)
 8007be0:	fba2 2303 	umull	r2, r3, r2, r3
 8007be4:	091b      	lsrs	r3, r3, #4
 8007be6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f003 0307 	and.w	r3, r3, #7
 8007bee:	4a24      	ldr	r2, [pc, #144]	; (8007c80 <DMA_CalcBaseAndBitshift+0x15c>)
 8007bf0:	5cd3      	ldrb	r3, [r2, r3]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d908      	bls.n	8007c10 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	4b1f      	ldr	r3, [pc, #124]	; (8007c84 <DMA_CalcBaseAndBitshift+0x160>)
 8007c06:	4013      	ands	r3, r2
 8007c08:	1d1a      	adds	r2, r3, #4
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	659a      	str	r2, [r3, #88]	; 0x58
 8007c0e:	e00d      	b.n	8007c2c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	461a      	mov	r2, r3
 8007c16:	4b1b      	ldr	r3, [pc, #108]	; (8007c84 <DMA_CalcBaseAndBitshift+0x160>)
 8007c18:	4013      	ands	r3, r2
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c1e:	e005      	b.n	8007c2c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	40020010 	.word	0x40020010
 8007c40:	40020028 	.word	0x40020028
 8007c44:	40020040 	.word	0x40020040
 8007c48:	40020058 	.word	0x40020058
 8007c4c:	40020070 	.word	0x40020070
 8007c50:	40020088 	.word	0x40020088
 8007c54:	400200a0 	.word	0x400200a0
 8007c58:	400200b8 	.word	0x400200b8
 8007c5c:	40020410 	.word	0x40020410
 8007c60:	40020428 	.word	0x40020428
 8007c64:	40020440 	.word	0x40020440
 8007c68:	40020458 	.word	0x40020458
 8007c6c:	40020470 	.word	0x40020470
 8007c70:	40020488 	.word	0x40020488
 8007c74:	400204a0 	.word	0x400204a0
 8007c78:	400204b8 	.word	0x400204b8
 8007c7c:	aaaaaaab 	.word	0xaaaaaaab
 8007c80:	08014670 	.word	0x08014670
 8007c84:	fffffc00 	.word	0xfffffc00

08007c88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d120      	bne.n	8007cde <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d858      	bhi.n	8007d56 <DMA_CheckFifoParam+0xce>
 8007ca4:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <DMA_CheckFifoParam+0x24>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007cbd 	.word	0x08007cbd
 8007cb0:	08007ccf 	.word	0x08007ccf
 8007cb4:	08007cbd 	.word	0x08007cbd
 8007cb8:	08007d57 	.word	0x08007d57
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d048      	beq.n	8007d5a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ccc:	e045      	b.n	8007d5a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cd6:	d142      	bne.n	8007d5e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007cdc:	e03f      	b.n	8007d5e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce6:	d123      	bne.n	8007d30 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d838      	bhi.n	8007d62 <DMA_CheckFifoParam+0xda>
 8007cf0:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <DMA_CheckFifoParam+0x70>)
 8007cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007d09 	.word	0x08007d09
 8007cfc:	08007d0f 	.word	0x08007d0f
 8007d00:	08007d09 	.word	0x08007d09
 8007d04:	08007d21 	.word	0x08007d21
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	73fb      	strb	r3, [r7, #15]
        break;
 8007d0c:	e030      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d025      	beq.n	8007d66 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d1e:	e022      	b.n	8007d66 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d28:	d11f      	bne.n	8007d6a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007d2e:	e01c      	b.n	8007d6a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d902      	bls.n	8007d3e <DMA_CheckFifoParam+0xb6>
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d003      	beq.n	8007d44 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007d3c:	e018      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	73fb      	strb	r3, [r7, #15]
        break;
 8007d42:	e015      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00e      	beq.n	8007d6e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	73fb      	strb	r3, [r7, #15]
    break;
 8007d54:	e00b      	b.n	8007d6e <DMA_CheckFifoParam+0xe6>
        break;
 8007d56:	bf00      	nop
 8007d58:	e00a      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        break;
 8007d5a:	bf00      	nop
 8007d5c:	e008      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        break;
 8007d5e:	bf00      	nop
 8007d60:	e006      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        break;
 8007d62:	bf00      	nop
 8007d64:	e004      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        break;
 8007d66:	bf00      	nop
 8007d68:	e002      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
        break;
 8007d6a:	bf00      	nop
 8007d6c:	e000      	b.n	8007d70 <DMA_CheckFifoParam+0xe8>
    break;
 8007d6e:	bf00      	nop
    }
  }

  return status;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop

08007d80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a38      	ldr	r2, [pc, #224]	; (8007e74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d022      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a36      	ldr	r2, [pc, #216]	; (8007e78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d01d      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a35      	ldr	r2, [pc, #212]	; (8007e7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d018      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a33      	ldr	r2, [pc, #204]	; (8007e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d013      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a32      	ldr	r2, [pc, #200]	; (8007e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d00e      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a30      	ldr	r2, [pc, #192]	; (8007e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d009      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a2f      	ldr	r2, [pc, #188]	; (8007e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d004      	beq.n	8007dde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a2d      	ldr	r2, [pc, #180]	; (8007e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d101      	bne.n	8007de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e000      	b.n	8007de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007de2:	2300      	movs	r3, #0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d01a      	beq.n	8007e1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	3b08      	subs	r3, #8
 8007df0:	4a28      	ldr	r2, [pc, #160]	; (8007e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007df2:	fba2 2303 	umull	r2, r3, r2, r3
 8007df6:	091b      	lsrs	r3, r3, #4
 8007df8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4b26      	ldr	r3, [pc, #152]	; (8007e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	461a      	mov	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a24      	ldr	r2, [pc, #144]	; (8007e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007e0c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f003 031f 	and.w	r3, r3, #31
 8007e14:	2201      	movs	r2, #1
 8007e16:	409a      	lsls	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007e1c:	e024      	b.n	8007e68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	3b10      	subs	r3, #16
 8007e26:	4a1e      	ldr	r2, [pc, #120]	; (8007ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007e28:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2c:	091b      	lsrs	r3, r3, #4
 8007e2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	4a1c      	ldr	r2, [pc, #112]	; (8007ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d806      	bhi.n	8007e46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	4a1b      	ldr	r2, [pc, #108]	; (8007ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d902      	bls.n	8007e46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3308      	adds	r3, #8
 8007e44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	4b18      	ldr	r3, [pc, #96]	; (8007eac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	461a      	mov	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a16      	ldr	r2, [pc, #88]	; (8007eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007e58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f003 031f 	and.w	r3, r3, #31
 8007e60:	2201      	movs	r2, #1
 8007e62:	409a      	lsls	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e68:	bf00      	nop
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	58025408 	.word	0x58025408
 8007e78:	5802541c 	.word	0x5802541c
 8007e7c:	58025430 	.word	0x58025430
 8007e80:	58025444 	.word	0x58025444
 8007e84:	58025458 	.word	0x58025458
 8007e88:	5802546c 	.word	0x5802546c
 8007e8c:	58025480 	.word	0x58025480
 8007e90:	58025494 	.word	0x58025494
 8007e94:	cccccccd 	.word	0xcccccccd
 8007e98:	16009600 	.word	0x16009600
 8007e9c:	58025880 	.word	0x58025880
 8007ea0:	aaaaaaab 	.word	0xaaaaaaab
 8007ea4:	400204b8 	.word	0x400204b8
 8007ea8:	4002040f 	.word	0x4002040f
 8007eac:	10008200 	.word	0x10008200
 8007eb0:	40020880 	.word	0x40020880

08007eb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d04a      	beq.n	8007f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d847      	bhi.n	8007f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a25      	ldr	r2, [pc, #148]	; (8007f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d022      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a24      	ldr	r2, [pc, #144]	; (8007f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d01d      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a22      	ldr	r2, [pc, #136]	; (8007f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d018      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a21      	ldr	r2, [pc, #132]	; (8007f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d013      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a1f      	ldr	r2, [pc, #124]	; (8007f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d00e      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1e      	ldr	r2, [pc, #120]	; (8007f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d009      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a1c      	ldr	r2, [pc, #112]	; (8007f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d004      	beq.n	8007f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1b      	ldr	r2, [pc, #108]	; (8007f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d101      	bne.n	8007f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e000      	b.n	8007f26 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007f24:	2300      	movs	r3, #0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	4b17      	ldr	r3, [pc, #92]	; (8007f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a15      	ldr	r2, [pc, #84]	; (8007f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007f3c:	671a      	str	r2, [r3, #112]	; 0x70
 8007f3e:	e009      	b.n	8007f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4b14      	ldr	r3, [pc, #80]	; (8007f94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007f44:	4413      	add	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	461a      	mov	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a11      	ldr	r2, [pc, #68]	; (8007f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007f52:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	2201      	movs	r2, #1
 8007f5a:	409a      	lsls	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007f60:	bf00      	nop
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	58025408 	.word	0x58025408
 8007f70:	5802541c 	.word	0x5802541c
 8007f74:	58025430 	.word	0x58025430
 8007f78:	58025444 	.word	0x58025444
 8007f7c:	58025458 	.word	0x58025458
 8007f80:	5802546c 	.word	0x5802546c
 8007f84:	58025480 	.word	0x58025480
 8007f88:	58025494 	.word	0x58025494
 8007f8c:	1600963f 	.word	0x1600963f
 8007f90:	58025940 	.word	0x58025940
 8007f94:	1000823f 	.word	0x1000823f
 8007f98:	40020940 	.word	0x40020940

08007f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b089      	sub	sp, #36	; 0x24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007faa:	4b89      	ldr	r3, [pc, #548]	; (80081d0 <HAL_GPIO_Init+0x234>)
 8007fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fae:	e194      	b.n	80082da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f000 8186 	beq.w	80082d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d005      	beq.n	8007fe0 <HAL_GPIO_Init+0x44>
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f003 0303 	and.w	r3, r3, #3
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d130      	bne.n	8008042 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	2203      	movs	r2, #3
 8007fec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff0:	43db      	mvns	r3, r3
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	fa02 f303 	lsl.w	r3, r2, r3
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	4313      	orrs	r3, r2
 8008008:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008016:	2201      	movs	r2, #1
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	fa02 f303 	lsl.w	r3, r2, r3
 800801e:	43db      	mvns	r3, r3
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	4013      	ands	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	091b      	lsrs	r3, r3, #4
 800802c:	f003 0201 	and.w	r2, r3, #1
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	fa02 f303 	lsl.w	r3, r2, r3
 8008036:	69ba      	ldr	r2, [r7, #24]
 8008038:	4313      	orrs	r3, r2
 800803a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f003 0303 	and.w	r3, r3, #3
 800804a:	2b03      	cmp	r3, #3
 800804c:	d017      	beq.n	800807e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	2203      	movs	r2, #3
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	43db      	mvns	r3, r3
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	4013      	ands	r3, r2
 8008064:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	fa02 f303 	lsl.w	r3, r2, r3
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	4313      	orrs	r3, r2
 8008076:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	2b02      	cmp	r3, #2
 8008088:	d123      	bne.n	80080d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	08da      	lsrs	r2, r3, #3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	3208      	adds	r2, #8
 8008092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	220f      	movs	r2, #15
 80080a2:	fa02 f303 	lsl.w	r3, r2, r3
 80080a6:	43db      	mvns	r3, r3
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	4013      	ands	r3, r2
 80080ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	691a      	ldr	r2, [r3, #16]
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	f003 0307 	and.w	r3, r3, #7
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	fa02 f303 	lsl.w	r3, r2, r3
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	08da      	lsrs	r2, r3, #3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3208      	adds	r2, #8
 80080cc:	69b9      	ldr	r1, [r7, #24]
 80080ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	2203      	movs	r2, #3
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	43db      	mvns	r3, r3
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	4013      	ands	r3, r2
 80080e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	f003 0203 	and.w	r2, r3, #3
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	fa02 f303 	lsl.w	r3, r2, r3
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 80e0 	beq.w	80082d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008114:	4b2f      	ldr	r3, [pc, #188]	; (80081d4 <HAL_GPIO_Init+0x238>)
 8008116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800811a:	4a2e      	ldr	r2, [pc, #184]	; (80081d4 <HAL_GPIO_Init+0x238>)
 800811c:	f043 0302 	orr.w	r3, r3, #2
 8008120:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008124:	4b2b      	ldr	r3, [pc, #172]	; (80081d4 <HAL_GPIO_Init+0x238>)
 8008126:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008132:	4a29      	ldr	r2, [pc, #164]	; (80081d8 <HAL_GPIO_Init+0x23c>)
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	089b      	lsrs	r3, r3, #2
 8008138:	3302      	adds	r3, #2
 800813a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800813e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	220f      	movs	r2, #15
 800814a:	fa02 f303 	lsl.w	r3, r2, r3
 800814e:	43db      	mvns	r3, r3
 8008150:	69ba      	ldr	r2, [r7, #24]
 8008152:	4013      	ands	r3, r2
 8008154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a20      	ldr	r2, [pc, #128]	; (80081dc <HAL_GPIO_Init+0x240>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d052      	beq.n	8008204 <HAL_GPIO_Init+0x268>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a1f      	ldr	r2, [pc, #124]	; (80081e0 <HAL_GPIO_Init+0x244>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d031      	beq.n	80081ca <HAL_GPIO_Init+0x22e>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a1e      	ldr	r2, [pc, #120]	; (80081e4 <HAL_GPIO_Init+0x248>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d02b      	beq.n	80081c6 <HAL_GPIO_Init+0x22a>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a1d      	ldr	r2, [pc, #116]	; (80081e8 <HAL_GPIO_Init+0x24c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d025      	beq.n	80081c2 <HAL_GPIO_Init+0x226>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a1c      	ldr	r2, [pc, #112]	; (80081ec <HAL_GPIO_Init+0x250>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d01f      	beq.n	80081be <HAL_GPIO_Init+0x222>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a1b      	ldr	r2, [pc, #108]	; (80081f0 <HAL_GPIO_Init+0x254>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d019      	beq.n	80081ba <HAL_GPIO_Init+0x21e>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a1a      	ldr	r2, [pc, #104]	; (80081f4 <HAL_GPIO_Init+0x258>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d013      	beq.n	80081b6 <HAL_GPIO_Init+0x21a>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a19      	ldr	r2, [pc, #100]	; (80081f8 <HAL_GPIO_Init+0x25c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00d      	beq.n	80081b2 <HAL_GPIO_Init+0x216>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a18      	ldr	r2, [pc, #96]	; (80081fc <HAL_GPIO_Init+0x260>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d007      	beq.n	80081ae <HAL_GPIO_Init+0x212>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a17      	ldr	r2, [pc, #92]	; (8008200 <HAL_GPIO_Init+0x264>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d101      	bne.n	80081aa <HAL_GPIO_Init+0x20e>
 80081a6:	2309      	movs	r3, #9
 80081a8:	e02d      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081aa:	230a      	movs	r3, #10
 80081ac:	e02b      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081ae:	2308      	movs	r3, #8
 80081b0:	e029      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081b2:	2307      	movs	r3, #7
 80081b4:	e027      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081b6:	2306      	movs	r3, #6
 80081b8:	e025      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081ba:	2305      	movs	r3, #5
 80081bc:	e023      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081be:	2304      	movs	r3, #4
 80081c0:	e021      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081c2:	2303      	movs	r3, #3
 80081c4:	e01f      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e01d      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e01b      	b.n	8008206 <HAL_GPIO_Init+0x26a>
 80081ce:	bf00      	nop
 80081d0:	58000080 	.word	0x58000080
 80081d4:	58024400 	.word	0x58024400
 80081d8:	58000400 	.word	0x58000400
 80081dc:	58020000 	.word	0x58020000
 80081e0:	58020400 	.word	0x58020400
 80081e4:	58020800 	.word	0x58020800
 80081e8:	58020c00 	.word	0x58020c00
 80081ec:	58021000 	.word	0x58021000
 80081f0:	58021400 	.word	0x58021400
 80081f4:	58021800 	.word	0x58021800
 80081f8:	58021c00 	.word	0x58021c00
 80081fc:	58022000 	.word	0x58022000
 8008200:	58022400 	.word	0x58022400
 8008204:	2300      	movs	r3, #0
 8008206:	69fa      	ldr	r2, [r7, #28]
 8008208:	f002 0203 	and.w	r2, r2, #3
 800820c:	0092      	lsls	r2, r2, #2
 800820e:	4093      	lsls	r3, r2
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	4313      	orrs	r3, r2
 8008214:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008216:	4938      	ldr	r1, [pc, #224]	; (80082f8 <HAL_GPIO_Init+0x35c>)
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	089b      	lsrs	r3, r3, #2
 800821c:	3302      	adds	r3, #2
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	43db      	mvns	r3, r3
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	4013      	ands	r3, r2
 8008234:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008242:	69ba      	ldr	r2, [r7, #24]
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800824a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	43db      	mvns	r3, r3
 800825e:	69ba      	ldr	r2, [r7, #24]
 8008260:	4013      	ands	r3, r2
 8008262:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	4313      	orrs	r3, r2
 8008276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	43db      	mvns	r3, r3
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	4013      	ands	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	43db      	mvns	r3, r3
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	4013      	ands	r3, r2
 80082b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	3301      	adds	r3, #1
 80082d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	fa22 f303 	lsr.w	r3, r2, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f47f ae63 	bne.w	8007fb0 <HAL_GPIO_Init+0x14>
  }
}
 80082ea:	bf00      	nop
 80082ec:	bf00      	nop
 80082ee:	3724      	adds	r7, #36	; 0x24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	58000400 	.word	0x58000400

080082fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	807b      	strh	r3, [r7, #2]
 8008308:	4613      	mov	r3, r2
 800830a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800830c:	787b      	ldrb	r3, [r7, #1]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008312:	887a      	ldrh	r2, [r7, #2]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008318:	e003      	b.n	8008322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800831a:	887b      	ldrh	r3, [r7, #2]
 800831c:	041a      	lsls	r2, r3, #16
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	619a      	str	r2, [r3, #24]
}
 8008322:	bf00      	nop
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
	...

08008330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d101      	bne.n	8008342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e08b      	b.n	800845a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d106      	bne.n	800835c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7f8 fea2 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2224      	movs	r2, #36	; 0x24
 8008360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 0201 	bic.w	r2, r2, #1
 8008372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008380:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008390:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d107      	bne.n	80083aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083a6:	609a      	str	r2, [r3, #8]
 80083a8:	e006      	b.n	80083b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80083b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d108      	bne.n	80083d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ce:	605a      	str	r2, [r3, #4]
 80083d0:	e007      	b.n	80083e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6859      	ldr	r1, [r3, #4]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	4b1d      	ldr	r3, [pc, #116]	; (8008464 <HAL_I2C_Init+0x134>)
 80083ee:	430b      	orrs	r3, r1
 80083f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68da      	ldr	r2, [r3, #12]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008400:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691a      	ldr	r2, [r3, #16]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	69d9      	ldr	r1, [r3, #28]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a1a      	ldr	r2, [r3, #32]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	430a      	orrs	r2, r1
 800842a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2220      	movs	r2, #32
 8008446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	02008000 	.word	0x02008000

08008468 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b20      	cmp	r3, #32
 800847c:	d138      	bne.n	80084f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008484:	2b01      	cmp	r3, #1
 8008486:	d101      	bne.n	800848c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008488:	2302      	movs	r3, #2
 800848a:	e032      	b.n	80084f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2224      	movs	r2, #36	; 0x24
 8008498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f022 0201 	bic.w	r2, r2, #1
 80084aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6819      	ldr	r1, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f042 0201 	orr.w	r2, r2, #1
 80084da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2220      	movs	r2, #32
 80084e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	e000      	b.n	80084f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084f0:	2302      	movs	r3, #2
  }
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b20      	cmp	r3, #32
 8008512:	d139      	bne.n	8008588 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800851a:	2b01      	cmp	r3, #1
 800851c:	d101      	bne.n	8008522 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800851e:	2302      	movs	r3, #2
 8008520:	e033      	b.n	800858a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2224      	movs	r2, #36	; 0x24
 800852e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f022 0201 	bic.w	r2, r2, #1
 8008540:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008550:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	4313      	orrs	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f042 0201 	orr.w	r2, r2, #1
 8008572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2220      	movs	r2, #32
 8008578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	e000      	b.n	800858a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008588:	2302      	movs	r3, #2
  }
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
	...

08008598 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085a0:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80085a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085a6:	4a0c      	ldr	r2, [pc, #48]	; (80085d8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80085a8:	f043 0302 	orr.w	r3, r3, #2
 80085ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80085b0:	4b09      	ldr	r3, [pc, #36]	; (80085d8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80085b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80085be:	4b07      	ldr	r3, [pc, #28]	; (80085dc <HAL_I2CEx_EnableFastModePlus+0x44>)
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	4906      	ldr	r1, [pc, #24]	; (80085dc <HAL_I2CEx_EnableFastModePlus+0x44>)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	604b      	str	r3, [r1, #4]
}
 80085ca:	bf00      	nop
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	58024400 	.word	0x58024400
 80085dc:	58000400 	.word	0x58000400

080085e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80085e8:	4b19      	ldr	r3, [pc, #100]	; (8008650 <HAL_PWREx_ConfigSupply+0x70>)
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f003 0304 	and.w	r3, r3, #4
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	d00a      	beq.n	800860a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80085f4:	4b16      	ldr	r3, [pc, #88]	; (8008650 <HAL_PWREx_ConfigSupply+0x70>)
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f003 0307 	and.w	r3, r3, #7
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d001      	beq.n	8008606 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e01f      	b.n	8008646 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	e01d      	b.n	8008646 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800860a:	4b11      	ldr	r3, [pc, #68]	; (8008650 <HAL_PWREx_ConfigSupply+0x70>)
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f023 0207 	bic.w	r2, r3, #7
 8008612:	490f      	ldr	r1, [pc, #60]	; (8008650 <HAL_PWREx_ConfigSupply+0x70>)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4313      	orrs	r3, r2
 8008618:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800861a:	f7fa fd5b 	bl	80030d4 <HAL_GetTick>
 800861e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008620:	e009      	b.n	8008636 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008622:	f7fa fd57 	bl	80030d4 <HAL_GetTick>
 8008626:	4602      	mov	r2, r0
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	1ad3      	subs	r3, r2, r3
 800862c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008630:	d901      	bls.n	8008636 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e007      	b.n	8008646 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008636:	4b06      	ldr	r3, [pc, #24]	; (8008650 <HAL_PWREx_ConfigSupply+0x70>)
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800863e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008642:	d1ee      	bne.n	8008622 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	58024800 	.word	0x58024800

08008654 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08c      	sub	sp, #48	; 0x30
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d102      	bne.n	8008668 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	f000 bc48 	b.w	8008ef8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 8088 	beq.w	8008786 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008676:	4b99      	ldr	r3, [pc, #612]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800867e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008680:	4b96      	ldr	r3, [pc, #600]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008684:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008688:	2b10      	cmp	r3, #16
 800868a:	d007      	beq.n	800869c <HAL_RCC_OscConfig+0x48>
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	2b18      	cmp	r3, #24
 8008690:	d111      	bne.n	80086b6 <HAL_RCC_OscConfig+0x62>
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	2b02      	cmp	r3, #2
 800869a:	d10c      	bne.n	80086b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800869c:	4b8f      	ldr	r3, [pc, #572]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d06d      	beq.n	8008784 <HAL_RCC_OscConfig+0x130>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d169      	bne.n	8008784 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	f000 bc21 	b.w	8008ef8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086be:	d106      	bne.n	80086ce <HAL_RCC_OscConfig+0x7a>
 80086c0:	4b86      	ldr	r3, [pc, #536]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a85      	ldr	r2, [pc, #532]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80086c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086ca:	6013      	str	r3, [r2, #0]
 80086cc:	e02e      	b.n	800872c <HAL_RCC_OscConfig+0xd8>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10c      	bne.n	80086f0 <HAL_RCC_OscConfig+0x9c>
 80086d6:	4b81      	ldr	r3, [pc, #516]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a80      	ldr	r2, [pc, #512]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80086dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	4b7e      	ldr	r3, [pc, #504]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a7d      	ldr	r2, [pc, #500]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80086e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086ec:	6013      	str	r3, [r2, #0]
 80086ee:	e01d      	b.n	800872c <HAL_RCC_OscConfig+0xd8>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086f8:	d10c      	bne.n	8008714 <HAL_RCC_OscConfig+0xc0>
 80086fa:	4b78      	ldr	r3, [pc, #480]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a77      	ldr	r2, [pc, #476]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	4b75      	ldr	r3, [pc, #468]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a74      	ldr	r2, [pc, #464]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 800870c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008710:	6013      	str	r3, [r2, #0]
 8008712:	e00b      	b.n	800872c <HAL_RCC_OscConfig+0xd8>
 8008714:	4b71      	ldr	r3, [pc, #452]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a70      	ldr	r2, [pc, #448]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 800871a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800871e:	6013      	str	r3, [r2, #0]
 8008720:	4b6e      	ldr	r3, [pc, #440]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a6d      	ldr	r2, [pc, #436]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800872a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d013      	beq.n	800875c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008734:	f7fa fcce 	bl	80030d4 <HAL_GetTick>
 8008738:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800873a:	e008      	b.n	800874e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800873c:	f7fa fcca 	bl	80030d4 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b64      	cmp	r3, #100	; 0x64
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e3d4      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800874e:	4b63      	ldr	r3, [pc, #396]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0f0      	beq.n	800873c <HAL_RCC_OscConfig+0xe8>
 800875a:	e014      	b.n	8008786 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800875c:	f7fa fcba 	bl	80030d4 <HAL_GetTick>
 8008760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008762:	e008      	b.n	8008776 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008764:	f7fa fcb6 	bl	80030d4 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	2b64      	cmp	r3, #100	; 0x64
 8008770:	d901      	bls.n	8008776 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e3c0      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008776:	4b59      	ldr	r3, [pc, #356]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1f0      	bne.n	8008764 <HAL_RCC_OscConfig+0x110>
 8008782:	e000      	b.n	8008786 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 80ca 	beq.w	8008928 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008794:	4b51      	ldr	r3, [pc, #324]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800879c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800879e:	4b4f      	ldr	r3, [pc, #316]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80087a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d007      	beq.n	80087ba <HAL_RCC_OscConfig+0x166>
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	2b18      	cmp	r3, #24
 80087ae:	d156      	bne.n	800885e <HAL_RCC_OscConfig+0x20a>
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	f003 0303 	and.w	r3, r3, #3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d151      	bne.n	800885e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087ba:	4b48      	ldr	r3, [pc, #288]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0304 	and.w	r3, r3, #4
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d005      	beq.n	80087d2 <HAL_RCC_OscConfig+0x17e>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e392      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80087d2:	4b42      	ldr	r3, [pc, #264]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f023 0219 	bic.w	r2, r3, #25
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	493f      	ldr	r1, [pc, #252]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e4:	f7fa fc76 	bl	80030d4 <HAL_GetTick>
 80087e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087ea:	e008      	b.n	80087fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087ec:	f7fa fc72 	bl	80030d4 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d901      	bls.n	80087fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e37c      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087fe:	4b37      	ldr	r3, [pc, #220]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0304 	and.w	r3, r3, #4
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0f0      	beq.n	80087ec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800880a:	f7fa fc6f 	bl	80030ec <HAL_GetREVID>
 800880e:	4603      	mov	r3, r0
 8008810:	f241 0203 	movw	r2, #4099	; 0x1003
 8008814:	4293      	cmp	r3, r2
 8008816:	d817      	bhi.n	8008848 <HAL_RCC_OscConfig+0x1f4>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	2b40      	cmp	r3, #64	; 0x40
 800881e:	d108      	bne.n	8008832 <HAL_RCC_OscConfig+0x1de>
 8008820:	4b2e      	ldr	r3, [pc, #184]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008828:	4a2c      	ldr	r2, [pc, #176]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 800882a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800882e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008830:	e07a      	b.n	8008928 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008832:	4b2a      	ldr	r3, [pc, #168]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	031b      	lsls	r3, r3, #12
 8008840:	4926      	ldr	r1, [pc, #152]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008842:	4313      	orrs	r3, r2
 8008844:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008846:	e06f      	b.n	8008928 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008848:	4b24      	ldr	r3, [pc, #144]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	061b      	lsls	r3, r3, #24
 8008856:	4921      	ldr	r1, [pc, #132]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008858:	4313      	orrs	r3, r2
 800885a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800885c:	e064      	b.n	8008928 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d047      	beq.n	80088f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008866:	4b1d      	ldr	r3, [pc, #116]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f023 0219 	bic.w	r2, r3, #25
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	491a      	ldr	r1, [pc, #104]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008874:	4313      	orrs	r3, r2
 8008876:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008878:	f7fa fc2c 	bl	80030d4 <HAL_GetTick>
 800887c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800887e:	e008      	b.n	8008892 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008880:	f7fa fc28 	bl	80030d4 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b02      	cmp	r3, #2
 800888c:	d901      	bls.n	8008892 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	e332      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008892:	4b12      	ldr	r3, [pc, #72]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0304 	and.w	r3, r3, #4
 800889a:	2b00      	cmp	r3, #0
 800889c:	d0f0      	beq.n	8008880 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800889e:	f7fa fc25 	bl	80030ec <HAL_GetREVID>
 80088a2:	4603      	mov	r3, r0
 80088a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d819      	bhi.n	80088e0 <HAL_RCC_OscConfig+0x28c>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	2b40      	cmp	r3, #64	; 0x40
 80088b2:	d108      	bne.n	80088c6 <HAL_RCC_OscConfig+0x272>
 80088b4:	4b09      	ldr	r3, [pc, #36]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80088bc:	4a07      	ldr	r2, [pc, #28]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80088be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088c2:	6053      	str	r3, [r2, #4]
 80088c4:	e030      	b.n	8008928 <HAL_RCC_OscConfig+0x2d4>
 80088c6:	4b05      	ldr	r3, [pc, #20]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	031b      	lsls	r3, r3, #12
 80088d4:	4901      	ldr	r1, [pc, #4]	; (80088dc <HAL_RCC_OscConfig+0x288>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	604b      	str	r3, [r1, #4]
 80088da:	e025      	b.n	8008928 <HAL_RCC_OscConfig+0x2d4>
 80088dc:	58024400 	.word	0x58024400
 80088e0:	4b9a      	ldr	r3, [pc, #616]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	061b      	lsls	r3, r3, #24
 80088ee:	4997      	ldr	r1, [pc, #604]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	604b      	str	r3, [r1, #4]
 80088f4:	e018      	b.n	8008928 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088f6:	4b95      	ldr	r3, [pc, #596]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a94      	ldr	r2, [pc, #592]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008902:	f7fa fbe7 	bl	80030d4 <HAL_GetTick>
 8008906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008908:	e008      	b.n	800891c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800890a:	f7fa fbe3 	bl	80030d4 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	d901      	bls.n	800891c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e2ed      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800891c:	4b8b      	ldr	r3, [pc, #556]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1f0      	bne.n	800890a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0310 	and.w	r3, r3, #16
 8008930:	2b00      	cmp	r3, #0
 8008932:	f000 80a9 	beq.w	8008a88 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008936:	4b85      	ldr	r3, [pc, #532]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800893e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008940:	4b82      	ldr	r3, [pc, #520]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008944:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2b08      	cmp	r3, #8
 800894a:	d007      	beq.n	800895c <HAL_RCC_OscConfig+0x308>
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	2b18      	cmp	r3, #24
 8008950:	d13a      	bne.n	80089c8 <HAL_RCC_OscConfig+0x374>
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f003 0303 	and.w	r3, r3, #3
 8008958:	2b01      	cmp	r3, #1
 800895a:	d135      	bne.n	80089c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800895c:	4b7b      	ldr	r3, [pc, #492]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008964:	2b00      	cmp	r3, #0
 8008966:	d005      	beq.n	8008974 <HAL_RCC_OscConfig+0x320>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	2b80      	cmp	r3, #128	; 0x80
 800896e:	d001      	beq.n	8008974 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e2c1      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008974:	f7fa fbba 	bl	80030ec <HAL_GetREVID>
 8008978:	4603      	mov	r3, r0
 800897a:	f241 0203 	movw	r2, #4099	; 0x1003
 800897e:	4293      	cmp	r3, r2
 8008980:	d817      	bhi.n	80089b2 <HAL_RCC_OscConfig+0x35e>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a1b      	ldr	r3, [r3, #32]
 8008986:	2b20      	cmp	r3, #32
 8008988:	d108      	bne.n	800899c <HAL_RCC_OscConfig+0x348>
 800898a:	4b70      	ldr	r3, [pc, #448]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008992:	4a6e      	ldr	r2, [pc, #440]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008994:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008998:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800899a:	e075      	b.n	8008a88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800899c:	4b6b      	ldr	r3, [pc, #428]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	069b      	lsls	r3, r3, #26
 80089aa:	4968      	ldr	r1, [pc, #416]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089b0:	e06a      	b.n	8008a88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80089b2:	4b66      	ldr	r3, [pc, #408]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 80089b4:	68db      	ldr	r3, [r3, #12]
 80089b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	061b      	lsls	r3, r3, #24
 80089c0:	4962      	ldr	r1, [pc, #392]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80089c6:	e05f      	b.n	8008a88 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d042      	beq.n	8008a56 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80089d0:	4b5e      	ldr	r3, [pc, #376]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a5d      	ldr	r2, [pc, #372]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 80089d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089dc:	f7fa fb7a 	bl	80030d4 <HAL_GetTick>
 80089e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089e2:	e008      	b.n	80089f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80089e4:	f7fa fb76 	bl	80030d4 <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d901      	bls.n	80089f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e280      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80089f6:	4b55      	ldr	r3, [pc, #340]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d0f0      	beq.n	80089e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008a02:	f7fa fb73 	bl	80030ec <HAL_GetREVID>
 8008a06:	4603      	mov	r3, r0
 8008a08:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d817      	bhi.n	8008a40 <HAL_RCC_OscConfig+0x3ec>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	d108      	bne.n	8008a2a <HAL_RCC_OscConfig+0x3d6>
 8008a18:	4b4c      	ldr	r3, [pc, #304]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008a20:	4a4a      	ldr	r2, [pc, #296]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008a22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a26:	6053      	str	r3, [r2, #4]
 8008a28:	e02e      	b.n	8008a88 <HAL_RCC_OscConfig+0x434>
 8008a2a:	4b48      	ldr	r3, [pc, #288]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	069b      	lsls	r3, r3, #26
 8008a38:	4944      	ldr	r1, [pc, #272]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	604b      	str	r3, [r1, #4]
 8008a3e:	e023      	b.n	8008a88 <HAL_RCC_OscConfig+0x434>
 8008a40:	4b42      	ldr	r3, [pc, #264]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a1b      	ldr	r3, [r3, #32]
 8008a4c:	061b      	lsls	r3, r3, #24
 8008a4e:	493f      	ldr	r1, [pc, #252]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	60cb      	str	r3, [r1, #12]
 8008a54:	e018      	b.n	8008a88 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008a56:	4b3d      	ldr	r3, [pc, #244]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a3c      	ldr	r2, [pc, #240]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a62:	f7fa fb37 	bl	80030d4 <HAL_GetTick>
 8008a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a68:	e008      	b.n	8008a7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008a6a:	f7fa fb33 	bl	80030d4 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d901      	bls.n	8008a7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e23d      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008a7c:	4b33      	ldr	r3, [pc, #204]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1f0      	bne.n	8008a6a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0308 	and.w	r3, r3, #8
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d036      	beq.n	8008b02 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d019      	beq.n	8008ad0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a9c:	4b2b      	ldr	r3, [pc, #172]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aa0:	4a2a      	ldr	r2, [pc, #168]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008aa2:	f043 0301 	orr.w	r3, r3, #1
 8008aa6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa8:	f7fa fb14 	bl	80030d4 <HAL_GetTick>
 8008aac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008aae:	e008      	b.n	8008ac2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ab0:	f7fa fb10 	bl	80030d4 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d901      	bls.n	8008ac2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e21a      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ac2:	4b22      	ldr	r3, [pc, #136]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d0f0      	beq.n	8008ab0 <HAL_RCC_OscConfig+0x45c>
 8008ace:	e018      	b.n	8008b02 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ad0:	4b1e      	ldr	r3, [pc, #120]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ad4:	4a1d      	ldr	r2, [pc, #116]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008ad6:	f023 0301 	bic.w	r3, r3, #1
 8008ada:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008adc:	f7fa fafa 	bl	80030d4 <HAL_GetTick>
 8008ae0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ae2:	e008      	b.n	8008af6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ae4:	f7fa faf6 	bl	80030d4 <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e200      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008af6:	4b15      	ldr	r3, [pc, #84]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1f0      	bne.n	8008ae4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0320 	and.w	r3, r3, #32
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d039      	beq.n	8008b82 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d01c      	beq.n	8008b50 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b16:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a0c      	ldr	r2, [pc, #48]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b22:	f7fa fad7 	bl	80030d4 <HAL_GetTick>
 8008b26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b28:	e008      	b.n	8008b3c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b2a:	f7fa fad3 	bl	80030d4 <HAL_GetTick>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d901      	bls.n	8008b3c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e1dd      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008b3c:	4b03      	ldr	r3, [pc, #12]	; (8008b4c <HAL_RCC_OscConfig+0x4f8>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d0f0      	beq.n	8008b2a <HAL_RCC_OscConfig+0x4d6>
 8008b48:	e01b      	b.n	8008b82 <HAL_RCC_OscConfig+0x52e>
 8008b4a:	bf00      	nop
 8008b4c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b50:	4b9b      	ldr	r3, [pc, #620]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a9a      	ldr	r2, [pc, #616]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008b5c:	f7fa faba 	bl	80030d4 <HAL_GetTick>
 8008b60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b62:	e008      	b.n	8008b76 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b64:	f7fa fab6 	bl	80030d4 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d901      	bls.n	8008b76 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e1c0      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008b76:	4b92      	ldr	r3, [pc, #584]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1f0      	bne.n	8008b64 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 0304 	and.w	r3, r3, #4
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 8081 	beq.w	8008c92 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008b90:	4b8c      	ldr	r3, [pc, #560]	; (8008dc4 <HAL_RCC_OscConfig+0x770>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a8b      	ldr	r2, [pc, #556]	; (8008dc4 <HAL_RCC_OscConfig+0x770>)
 8008b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b9c:	f7fa fa9a 	bl	80030d4 <HAL_GetTick>
 8008ba0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ba2:	e008      	b.n	8008bb6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ba4:	f7fa fa96 	bl	80030d4 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	2b64      	cmp	r3, #100	; 0x64
 8008bb0:	d901      	bls.n	8008bb6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e1a0      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008bb6:	4b83      	ldr	r3, [pc, #524]	; (8008dc4 <HAL_RCC_OscConfig+0x770>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0f0      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d106      	bne.n	8008bd8 <HAL_RCC_OscConfig+0x584>
 8008bca:	4b7d      	ldr	r3, [pc, #500]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bce:	4a7c      	ldr	r2, [pc, #496]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008bd0:	f043 0301 	orr.w	r3, r3, #1
 8008bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8008bd6:	e02d      	b.n	8008c34 <HAL_RCC_OscConfig+0x5e0>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10c      	bne.n	8008bfa <HAL_RCC_OscConfig+0x5a6>
 8008be0:	4b77      	ldr	r3, [pc, #476]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be4:	4a76      	ldr	r2, [pc, #472]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008be6:	f023 0301 	bic.w	r3, r3, #1
 8008bea:	6713      	str	r3, [r2, #112]	; 0x70
 8008bec:	4b74      	ldr	r3, [pc, #464]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf0:	4a73      	ldr	r2, [pc, #460]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008bf2:	f023 0304 	bic.w	r3, r3, #4
 8008bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8008bf8:	e01c      	b.n	8008c34 <HAL_RCC_OscConfig+0x5e0>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	2b05      	cmp	r3, #5
 8008c00:	d10c      	bne.n	8008c1c <HAL_RCC_OscConfig+0x5c8>
 8008c02:	4b6f      	ldr	r3, [pc, #444]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c06:	4a6e      	ldr	r2, [pc, #440]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008c08:	f043 0304 	orr.w	r3, r3, #4
 8008c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c0e:	4b6c      	ldr	r3, [pc, #432]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c12:	4a6b      	ldr	r2, [pc, #428]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008c14:	f043 0301 	orr.w	r3, r3, #1
 8008c18:	6713      	str	r3, [r2, #112]	; 0x70
 8008c1a:	e00b      	b.n	8008c34 <HAL_RCC_OscConfig+0x5e0>
 8008c1c:	4b68      	ldr	r3, [pc, #416]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c20:	4a67      	ldr	r2, [pc, #412]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008c22:	f023 0301 	bic.w	r3, r3, #1
 8008c26:	6713      	str	r3, [r2, #112]	; 0x70
 8008c28:	4b65      	ldr	r3, [pc, #404]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2c:	4a64      	ldr	r2, [pc, #400]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008c2e:	f023 0304 	bic.w	r3, r3, #4
 8008c32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d015      	beq.n	8008c68 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c3c:	f7fa fa4a 	bl	80030d4 <HAL_GetTick>
 8008c40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c42:	e00a      	b.n	8008c5a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c44:	f7fa fa46 	bl	80030d4 <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e14e      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008c5a:	4b59      	ldr	r3, [pc, #356]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0ee      	beq.n	8008c44 <HAL_RCC_OscConfig+0x5f0>
 8008c66:	e014      	b.n	8008c92 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c68:	f7fa fa34 	bl	80030d4 <HAL_GetTick>
 8008c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c6e:	e00a      	b.n	8008c86 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c70:	f7fa fa30 	bl	80030d4 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d901      	bls.n	8008c86 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e138      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008c86:	4b4e      	ldr	r3, [pc, #312]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8a:	f003 0302 	and.w	r3, r3, #2
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1ee      	bne.n	8008c70 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 812d 	beq.w	8008ef6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008c9c:	4b48      	ldr	r3, [pc, #288]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ca4:	2b18      	cmp	r3, #24
 8008ca6:	f000 80bd 	beq.w	8008e24 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	f040 809e 	bne.w	8008df0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cb4:	4b42      	ldr	r3, [pc, #264]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a41      	ldr	r2, [pc, #260]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008cba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc0:	f7fa fa08 	bl	80030d4 <HAL_GetTick>
 8008cc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cc6:	e008      	b.n	8008cda <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cc8:	f7fa fa04 	bl	80030d4 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d901      	bls.n	8008cda <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e10e      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008cda:	4b39      	ldr	r3, [pc, #228]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1f0      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ce6:	4b36      	ldr	r3, [pc, #216]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cea:	4b37      	ldr	r3, [pc, #220]	; (8008dc8 <HAL_RCC_OscConfig+0x774>)
 8008cec:	4013      	ands	r3, r2
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008cf6:	0112      	lsls	r2, r2, #4
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	4931      	ldr	r1, [pc, #196]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	628b      	str	r3, [r1, #40]	; 0x28
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d04:	3b01      	subs	r3, #1
 8008d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	025b      	lsls	r3, r3, #9
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	431a      	orrs	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	041b      	lsls	r3, r3, #16
 8008d1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d22:	431a      	orrs	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	061b      	lsls	r3, r3, #24
 8008d2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d30:	4923      	ldr	r1, [pc, #140]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008d36:	4b22      	ldr	r3, [pc, #136]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3a:	4a21      	ldr	r2, [pc, #132]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d3c:	f023 0301 	bic.w	r3, r3, #1
 8008d40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008d42:	4b1f      	ldr	r3, [pc, #124]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d46:	4b21      	ldr	r3, [pc, #132]	; (8008dcc <HAL_RCC_OscConfig+0x778>)
 8008d48:	4013      	ands	r3, r2
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008d4e:	00d2      	lsls	r2, r2, #3
 8008d50:	491b      	ldr	r1, [pc, #108]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008d56:	4b1a      	ldr	r3, [pc, #104]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5a:	f023 020c 	bic.w	r2, r3, #12
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	4917      	ldr	r1, [pc, #92]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d64:	4313      	orrs	r3, r2
 8008d66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008d68:	4b15      	ldr	r3, [pc, #84]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6c:	f023 0202 	bic.w	r2, r3, #2
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d74:	4912      	ldr	r1, [pc, #72]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008d7a:	4b11      	ldr	r3, [pc, #68]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	4a10      	ldr	r2, [pc, #64]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d86:	4b0e      	ldr	r3, [pc, #56]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8a:	4a0d      	ldr	r2, [pc, #52]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008d92:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d96:	4a0a      	ldr	r2, [pc, #40]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008d9e:	4b08      	ldr	r3, [pc, #32]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da2:	4a07      	ldr	r2, [pc, #28]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008da4:	f043 0301 	orr.w	r3, r3, #1
 8008da8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008daa:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a04      	ldr	r2, [pc, #16]	; (8008dc0 <HAL_RCC_OscConfig+0x76c>)
 8008db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db6:	f7fa f98d 	bl	80030d4 <HAL_GetTick>
 8008dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dbc:	e011      	b.n	8008de2 <HAL_RCC_OscConfig+0x78e>
 8008dbe:	bf00      	nop
 8008dc0:	58024400 	.word	0x58024400
 8008dc4:	58024800 	.word	0x58024800
 8008dc8:	fffffc0c 	.word	0xfffffc0c
 8008dcc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dd0:	f7fa f980 	bl	80030d4 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d901      	bls.n	8008de2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e08a      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008de2:	4b47      	ldr	r3, [pc, #284]	; (8008f00 <HAL_RCC_OscConfig+0x8ac>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0f0      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x77c>
 8008dee:	e082      	b.n	8008ef6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008df0:	4b43      	ldr	r3, [pc, #268]	; (8008f00 <HAL_RCC_OscConfig+0x8ac>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a42      	ldr	r2, [pc, #264]	; (8008f00 <HAL_RCC_OscConfig+0x8ac>)
 8008df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dfc:	f7fa f96a 	bl	80030d4 <HAL_GetTick>
 8008e00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e02:	e008      	b.n	8008e16 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e04:	f7fa f966 	bl	80030d4 <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d901      	bls.n	8008e16 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e070      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e16:	4b3a      	ldr	r3, [pc, #232]	; (8008f00 <HAL_RCC_OscConfig+0x8ac>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1f0      	bne.n	8008e04 <HAL_RCC_OscConfig+0x7b0>
 8008e22:	e068      	b.n	8008ef6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008e24:	4b36      	ldr	r3, [pc, #216]	; (8008f00 <HAL_RCC_OscConfig+0x8ac>)
 8008e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008e2a:	4b35      	ldr	r3, [pc, #212]	; (8008f00 <HAL_RCC_OscConfig+0x8ac>)
 8008e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d031      	beq.n	8008e9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	f003 0203 	and.w	r2, r3, #3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d12a      	bne.n	8008e9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	091b      	lsrs	r3, r3, #4
 8008e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d122      	bne.n	8008e9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e60:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d11a      	bne.n	8008e9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	0a5b      	lsrs	r3, r3, #9
 8008e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d111      	bne.n	8008e9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	0c1b      	lsrs	r3, r3, #16
 8008e7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e84:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d108      	bne.n	8008e9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	0e1b      	lsrs	r3, r3, #24
 8008e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e96:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d001      	beq.n	8008ea0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e02b      	b.n	8008ef8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008ea0:	4b17      	ldr	r3, [pc, #92]	; (8008f00 <HAL_RCC_OscConfig+0x8ac>)
 8008ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ea4:	08db      	lsrs	r3, r3, #3
 8008ea6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008eaa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d01f      	beq.n	8008ef6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008eb6:	4b12      	ldr	r3, [pc, #72]	; (8008f00 <HAL_RCC_OscConfig+0x8ac>)
 8008eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eba:	4a11      	ldr	r2, [pc, #68]	; (8008f00 <HAL_RCC_OscConfig+0x8ac>)
 8008ebc:	f023 0301 	bic.w	r3, r3, #1
 8008ec0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ec2:	f7fa f907 	bl	80030d4 <HAL_GetTick>
 8008ec6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008ec8:	bf00      	nop
 8008eca:	f7fa f903 	bl	80030d4 <HAL_GetTick>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d0f9      	beq.n	8008eca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ed6:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <HAL_RCC_OscConfig+0x8ac>)
 8008ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eda:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <HAL_RCC_OscConfig+0x8b0>)
 8008edc:	4013      	ands	r3, r2
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ee2:	00d2      	lsls	r2, r2, #3
 8008ee4:	4906      	ldr	r1, [pc, #24]	; (8008f00 <HAL_RCC_OscConfig+0x8ac>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008eea:	4b05      	ldr	r3, [pc, #20]	; (8008f00 <HAL_RCC_OscConfig+0x8ac>)
 8008eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eee:	4a04      	ldr	r2, [pc, #16]	; (8008f00 <HAL_RCC_OscConfig+0x8ac>)
 8008ef0:	f043 0301 	orr.w	r3, r3, #1
 8008ef4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3730      	adds	r7, #48	; 0x30
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	58024400 	.word	0x58024400
 8008f04:	ffff0007 	.word	0xffff0007

08008f08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d101      	bne.n	8008f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e19c      	b.n	8009256 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f1c:	4b8a      	ldr	r3, [pc, #552]	; (8009148 <HAL_RCC_ClockConfig+0x240>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 030f 	and.w	r3, r3, #15
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d910      	bls.n	8008f4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f2a:	4b87      	ldr	r3, [pc, #540]	; (8009148 <HAL_RCC_ClockConfig+0x240>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f023 020f 	bic.w	r2, r3, #15
 8008f32:	4985      	ldr	r1, [pc, #532]	; (8009148 <HAL_RCC_ClockConfig+0x240>)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f3a:	4b83      	ldr	r3, [pc, #524]	; (8009148 <HAL_RCC_ClockConfig+0x240>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 030f 	and.w	r3, r3, #15
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d001      	beq.n	8008f4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e184      	b.n	8009256 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d010      	beq.n	8008f7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	691a      	ldr	r2, [r3, #16]
 8008f5c:	4b7b      	ldr	r3, [pc, #492]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d908      	bls.n	8008f7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008f68:	4b78      	ldr	r3, [pc, #480]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	4975      	ldr	r1, [pc, #468]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0308 	and.w	r3, r3, #8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d010      	beq.n	8008fa8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	695a      	ldr	r2, [r3, #20]
 8008f8a:	4b70      	ldr	r3, [pc, #448]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d908      	bls.n	8008fa8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f96:	4b6d      	ldr	r3, [pc, #436]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8008f98:	69db      	ldr	r3, [r3, #28]
 8008f9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	496a      	ldr	r1, [pc, #424]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0310 	and.w	r3, r3, #16
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d010      	beq.n	8008fd6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	699a      	ldr	r2, [r3, #24]
 8008fb8:	4b64      	ldr	r3, [pc, #400]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d908      	bls.n	8008fd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008fc4:	4b61      	ldr	r3, [pc, #388]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8008fc6:	69db      	ldr	r3, [r3, #28]
 8008fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	495e      	ldr	r1, [pc, #376]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0320 	and.w	r3, r3, #32
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d010      	beq.n	8009004 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	69da      	ldr	r2, [r3, #28]
 8008fe6:	4b59      	ldr	r3, [pc, #356]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d908      	bls.n	8009004 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ff2:	4b56      	ldr	r3, [pc, #344]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	4953      	ldr	r1, [pc, #332]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8009000:	4313      	orrs	r3, r2
 8009002:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0302 	and.w	r3, r3, #2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d010      	beq.n	8009032 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68da      	ldr	r2, [r3, #12]
 8009014:	4b4d      	ldr	r3, [pc, #308]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	f003 030f 	and.w	r3, r3, #15
 800901c:	429a      	cmp	r2, r3
 800901e:	d908      	bls.n	8009032 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009020:	4b4a      	ldr	r3, [pc, #296]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	f023 020f 	bic.w	r2, r3, #15
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	4947      	ldr	r1, [pc, #284]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 800902e:	4313      	orrs	r3, r2
 8009030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d055      	beq.n	80090ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800903e:	4b43      	ldr	r3, [pc, #268]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	4940      	ldr	r1, [pc, #256]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 800904c:	4313      	orrs	r3, r2
 800904e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	2b02      	cmp	r3, #2
 8009056:	d107      	bne.n	8009068 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009058:	4b3c      	ldr	r3, [pc, #240]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d121      	bne.n	80090a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e0f6      	b.n	8009256 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	2b03      	cmp	r3, #3
 800906e:	d107      	bne.n	8009080 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009070:	4b36      	ldr	r3, [pc, #216]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d115      	bne.n	80090a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e0ea      	b.n	8009256 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d107      	bne.n	8009098 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009088:	4b30      	ldr	r3, [pc, #192]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009090:	2b00      	cmp	r3, #0
 8009092:	d109      	bne.n	80090a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e0de      	b.n	8009256 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009098:	4b2c      	ldr	r3, [pc, #176]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f003 0304 	and.w	r3, r3, #4
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e0d6      	b.n	8009256 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80090a8:	4b28      	ldr	r3, [pc, #160]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	f023 0207 	bic.w	r2, r3, #7
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	4925      	ldr	r1, [pc, #148]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090ba:	f7fa f80b 	bl	80030d4 <HAL_GetTick>
 80090be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090c0:	e00a      	b.n	80090d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090c2:	f7fa f807 	bl	80030d4 <HAL_GetTick>
 80090c6:	4602      	mov	r2, r0
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d901      	bls.n	80090d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e0be      	b.n	8009256 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090d8:	4b1c      	ldr	r3, [pc, #112]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 80090da:	691b      	ldr	r3, [r3, #16]
 80090dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	00db      	lsls	r3, r3, #3
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d1eb      	bne.n	80090c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0302 	and.w	r3, r3, #2
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d010      	beq.n	8009118 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	4b14      	ldr	r3, [pc, #80]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	429a      	cmp	r2, r3
 8009104:	d208      	bcs.n	8009118 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009106:	4b11      	ldr	r3, [pc, #68]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	f023 020f 	bic.w	r2, r3, #15
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	490e      	ldr	r1, [pc, #56]	; (800914c <HAL_RCC_ClockConfig+0x244>)
 8009114:	4313      	orrs	r3, r2
 8009116:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009118:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <HAL_RCC_ClockConfig+0x240>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	429a      	cmp	r2, r3
 8009124:	d214      	bcs.n	8009150 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009126:	4b08      	ldr	r3, [pc, #32]	; (8009148 <HAL_RCC_ClockConfig+0x240>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f023 020f 	bic.w	r2, r3, #15
 800912e:	4906      	ldr	r1, [pc, #24]	; (8009148 <HAL_RCC_ClockConfig+0x240>)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	4313      	orrs	r3, r2
 8009134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009136:	4b04      	ldr	r3, [pc, #16]	; (8009148 <HAL_RCC_ClockConfig+0x240>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 030f 	and.w	r3, r3, #15
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	429a      	cmp	r2, r3
 8009142:	d005      	beq.n	8009150 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e086      	b.n	8009256 <HAL_RCC_ClockConfig+0x34e>
 8009148:	52002000 	.word	0x52002000
 800914c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0304 	and.w	r3, r3, #4
 8009158:	2b00      	cmp	r3, #0
 800915a:	d010      	beq.n	800917e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	691a      	ldr	r2, [r3, #16]
 8009160:	4b3f      	ldr	r3, [pc, #252]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009168:	429a      	cmp	r2, r3
 800916a:	d208      	bcs.n	800917e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800916c:	4b3c      	ldr	r3, [pc, #240]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	4939      	ldr	r1, [pc, #228]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 800917a:	4313      	orrs	r3, r2
 800917c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0308 	and.w	r3, r3, #8
 8009186:	2b00      	cmp	r3, #0
 8009188:	d010      	beq.n	80091ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	695a      	ldr	r2, [r3, #20]
 800918e:	4b34      	ldr	r3, [pc, #208]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009196:	429a      	cmp	r2, r3
 8009198:	d208      	bcs.n	80091ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800919a:	4b31      	ldr	r3, [pc, #196]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 800919c:	69db      	ldr	r3, [r3, #28]
 800919e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	492e      	ldr	r1, [pc, #184]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 80091a8:	4313      	orrs	r3, r2
 80091aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0310 	and.w	r3, r3, #16
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d010      	beq.n	80091da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	699a      	ldr	r2, [r3, #24]
 80091bc:	4b28      	ldr	r3, [pc, #160]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 80091be:	69db      	ldr	r3, [r3, #28]
 80091c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d208      	bcs.n	80091da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80091c8:	4b25      	ldr	r3, [pc, #148]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	699b      	ldr	r3, [r3, #24]
 80091d4:	4922      	ldr	r1, [pc, #136]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0320 	and.w	r3, r3, #32
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d010      	beq.n	8009208 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	69da      	ldr	r2, [r3, #28]
 80091ea:	4b1d      	ldr	r3, [pc, #116]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d208      	bcs.n	8009208 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80091f6:	4b1a      	ldr	r3, [pc, #104]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 80091f8:	6a1b      	ldr	r3, [r3, #32]
 80091fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	4917      	ldr	r1, [pc, #92]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 8009204:	4313      	orrs	r3, r2
 8009206:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009208:	f000 f834 	bl	8009274 <HAL_RCC_GetSysClockFreq>
 800920c:	4602      	mov	r2, r0
 800920e:	4b14      	ldr	r3, [pc, #80]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	0a1b      	lsrs	r3, r3, #8
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	4912      	ldr	r1, [pc, #72]	; (8009264 <HAL_RCC_ClockConfig+0x35c>)
 800921a:	5ccb      	ldrb	r3, [r1, r3]
 800921c:	f003 031f 	and.w	r3, r3, #31
 8009220:	fa22 f303 	lsr.w	r3, r2, r3
 8009224:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009226:	4b0e      	ldr	r3, [pc, #56]	; (8009260 <HAL_RCC_ClockConfig+0x358>)
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	f003 030f 	and.w	r3, r3, #15
 800922e:	4a0d      	ldr	r2, [pc, #52]	; (8009264 <HAL_RCC_ClockConfig+0x35c>)
 8009230:	5cd3      	ldrb	r3, [r2, r3]
 8009232:	f003 031f 	and.w	r3, r3, #31
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	fa22 f303 	lsr.w	r3, r2, r3
 800923c:	4a0a      	ldr	r2, [pc, #40]	; (8009268 <HAL_RCC_ClockConfig+0x360>)
 800923e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009240:	4a0a      	ldr	r2, [pc, #40]	; (800926c <HAL_RCC_ClockConfig+0x364>)
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009246:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <HAL_RCC_ClockConfig+0x368>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4618      	mov	r0, r3
 800924c:	f7f8 ff52 	bl	80020f4 <HAL_InitTick>
 8009250:	4603      	mov	r3, r0
 8009252:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009254:	7bfb      	ldrb	r3, [r7, #15]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3718      	adds	r7, #24
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	58024400 	.word	0x58024400
 8009264:	08014660 	.word	0x08014660
 8009268:	2400008c 	.word	0x2400008c
 800926c:	24000088 	.word	0x24000088
 8009270:	24000090 	.word	0x24000090

08009274 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009274:	b480      	push	{r7}
 8009276:	b089      	sub	sp, #36	; 0x24
 8009278:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800927a:	4bb3      	ldr	r3, [pc, #716]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009282:	2b18      	cmp	r3, #24
 8009284:	f200 8155 	bhi.w	8009532 <HAL_RCC_GetSysClockFreq+0x2be>
 8009288:	a201      	add	r2, pc, #4	; (adr r2, 8009290 <HAL_RCC_GetSysClockFreq+0x1c>)
 800928a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928e:	bf00      	nop
 8009290:	080092f5 	.word	0x080092f5
 8009294:	08009533 	.word	0x08009533
 8009298:	08009533 	.word	0x08009533
 800929c:	08009533 	.word	0x08009533
 80092a0:	08009533 	.word	0x08009533
 80092a4:	08009533 	.word	0x08009533
 80092a8:	08009533 	.word	0x08009533
 80092ac:	08009533 	.word	0x08009533
 80092b0:	0800931b 	.word	0x0800931b
 80092b4:	08009533 	.word	0x08009533
 80092b8:	08009533 	.word	0x08009533
 80092bc:	08009533 	.word	0x08009533
 80092c0:	08009533 	.word	0x08009533
 80092c4:	08009533 	.word	0x08009533
 80092c8:	08009533 	.word	0x08009533
 80092cc:	08009533 	.word	0x08009533
 80092d0:	08009321 	.word	0x08009321
 80092d4:	08009533 	.word	0x08009533
 80092d8:	08009533 	.word	0x08009533
 80092dc:	08009533 	.word	0x08009533
 80092e0:	08009533 	.word	0x08009533
 80092e4:	08009533 	.word	0x08009533
 80092e8:	08009533 	.word	0x08009533
 80092ec:	08009533 	.word	0x08009533
 80092f0:	08009327 	.word	0x08009327
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092f4:	4b94      	ldr	r3, [pc, #592]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0320 	and.w	r3, r3, #32
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d009      	beq.n	8009314 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009300:	4b91      	ldr	r3, [pc, #580]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	08db      	lsrs	r3, r3, #3
 8009306:	f003 0303 	and.w	r3, r3, #3
 800930a:	4a90      	ldr	r2, [pc, #576]	; (800954c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800930c:	fa22 f303 	lsr.w	r3, r2, r3
 8009310:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009312:	e111      	b.n	8009538 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009314:	4b8d      	ldr	r3, [pc, #564]	; (800954c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009316:	61bb      	str	r3, [r7, #24]
      break;
 8009318:	e10e      	b.n	8009538 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800931a:	4b8d      	ldr	r3, [pc, #564]	; (8009550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800931c:	61bb      	str	r3, [r7, #24]
      break;
 800931e:	e10b      	b.n	8009538 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009320:	4b8c      	ldr	r3, [pc, #560]	; (8009554 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009322:	61bb      	str	r3, [r7, #24]
      break;
 8009324:	e108      	b.n	8009538 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009326:	4b88      	ldr	r3, [pc, #544]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932a:	f003 0303 	and.w	r3, r3, #3
 800932e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009330:	4b85      	ldr	r3, [pc, #532]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009334:	091b      	lsrs	r3, r3, #4
 8009336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800933a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800933c:	4b82      	ldr	r3, [pc, #520]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	f003 0301 	and.w	r3, r3, #1
 8009344:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009346:	4b80      	ldr	r3, [pc, #512]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934a:	08db      	lsrs	r3, r3, #3
 800934c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	fb02 f303 	mul.w	r3, r2, r3
 8009356:	ee07 3a90 	vmov	s15, r3
 800935a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 80e1 	beq.w	800952c <HAL_RCC_GetSysClockFreq+0x2b8>
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b02      	cmp	r3, #2
 800936e:	f000 8083 	beq.w	8009478 <HAL_RCC_GetSysClockFreq+0x204>
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2b02      	cmp	r3, #2
 8009376:	f200 80a1 	bhi.w	80094bc <HAL_RCC_GetSysClockFreq+0x248>
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d003      	beq.n	8009388 <HAL_RCC_GetSysClockFreq+0x114>
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d056      	beq.n	8009434 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009386:	e099      	b.n	80094bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009388:	4b6f      	ldr	r3, [pc, #444]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0320 	and.w	r3, r3, #32
 8009390:	2b00      	cmp	r3, #0
 8009392:	d02d      	beq.n	80093f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009394:	4b6c      	ldr	r3, [pc, #432]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	08db      	lsrs	r3, r3, #3
 800939a:	f003 0303 	and.w	r3, r3, #3
 800939e:	4a6b      	ldr	r2, [pc, #428]	; (800954c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80093a0:	fa22 f303 	lsr.w	r3, r2, r3
 80093a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	ee07 3a90 	vmov	s15, r3
 80093ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093be:	4b62      	ldr	r3, [pc, #392]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80093c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c6:	ee07 3a90 	vmov	s15, r3
 80093ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80093d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009558 <HAL_RCC_GetSysClockFreq+0x2e4>
 80093d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80093ee:	e087      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	ee07 3a90 	vmov	s15, r3
 80093f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800955c <HAL_RCC_GetSysClockFreq+0x2e8>
 80093fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009402:	4b51      	ldr	r3, [pc, #324]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800940a:	ee07 3a90 	vmov	s15, r3
 800940e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009412:	ed97 6a02 	vldr	s12, [r7, #8]
 8009416:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800941a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800941e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800942a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800942e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009432:	e065      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	ee07 3a90 	vmov	s15, r3
 800943a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009560 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009446:	4b40      	ldr	r3, [pc, #256]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800944e:	ee07 3a90 	vmov	s15, r3
 8009452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009456:	ed97 6a02 	vldr	s12, [r7, #8]
 800945a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009558 <HAL_RCC_GetSysClockFreq+0x2e4>
 800945e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800946a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800946e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009476:	e043      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	ee07 3a90 	vmov	s15, r3
 800947e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009482:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009564 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800948a:	4b2f      	ldr	r3, [pc, #188]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800948c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800949a:	ed97 6a02 	vldr	s12, [r7, #8]
 800949e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009558 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094ba:	e021      	b.n	8009500 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	ee07 3a90 	vmov	s15, r3
 80094c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009560 <HAL_RCC_GetSysClockFreq+0x2ec>
 80094ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ce:	4b1e      	ldr	r3, [pc, #120]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d6:	ee07 3a90 	vmov	s15, r3
 80094da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094de:	ed97 6a02 	vldr	s12, [r7, #8]
 80094e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009558 <HAL_RCC_GetSysClockFreq+0x2e4>
 80094e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80094fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009500:	4b11      	ldr	r3, [pc, #68]	; (8009548 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009504:	0a5b      	lsrs	r3, r3, #9
 8009506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800950a:	3301      	adds	r3, #1
 800950c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	ee07 3a90 	vmov	s15, r3
 8009514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009518:	edd7 6a07 	vldr	s13, [r7, #28]
 800951c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009520:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009524:	ee17 3a90 	vmov	r3, s15
 8009528:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800952a:	e005      	b.n	8009538 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800952c:	2300      	movs	r3, #0
 800952e:	61bb      	str	r3, [r7, #24]
      break;
 8009530:	e002      	b.n	8009538 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009532:	4b07      	ldr	r3, [pc, #28]	; (8009550 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009534:	61bb      	str	r3, [r7, #24]
      break;
 8009536:	bf00      	nop
  }

  return sysclockfreq;
 8009538:	69bb      	ldr	r3, [r7, #24]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3724      	adds	r7, #36	; 0x24
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	58024400 	.word	0x58024400
 800954c:	03d09000 	.word	0x03d09000
 8009550:	003d0900 	.word	0x003d0900
 8009554:	017d7840 	.word	0x017d7840
 8009558:	46000000 	.word	0x46000000
 800955c:	4c742400 	.word	0x4c742400
 8009560:	4a742400 	.word	0x4a742400
 8009564:	4bbebc20 	.word	0x4bbebc20

08009568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800956e:	f7ff fe81 	bl	8009274 <HAL_RCC_GetSysClockFreq>
 8009572:	4602      	mov	r2, r0
 8009574:	4b10      	ldr	r3, [pc, #64]	; (80095b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	0a1b      	lsrs	r3, r3, #8
 800957a:	f003 030f 	and.w	r3, r3, #15
 800957e:	490f      	ldr	r1, [pc, #60]	; (80095bc <HAL_RCC_GetHCLKFreq+0x54>)
 8009580:	5ccb      	ldrb	r3, [r1, r3]
 8009582:	f003 031f 	and.w	r3, r3, #31
 8009586:	fa22 f303 	lsr.w	r3, r2, r3
 800958a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800958c:	4b0a      	ldr	r3, [pc, #40]	; (80095b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	f003 030f 	and.w	r3, r3, #15
 8009594:	4a09      	ldr	r2, [pc, #36]	; (80095bc <HAL_RCC_GetHCLKFreq+0x54>)
 8009596:	5cd3      	ldrb	r3, [r2, r3]
 8009598:	f003 031f 	and.w	r3, r3, #31
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	fa22 f303 	lsr.w	r3, r2, r3
 80095a2:	4a07      	ldr	r2, [pc, #28]	; (80095c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80095a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80095a6:	4a07      	ldr	r2, [pc, #28]	; (80095c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80095ac:	4b04      	ldr	r3, [pc, #16]	; (80095c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80095ae:	681b      	ldr	r3, [r3, #0]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	58024400 	.word	0x58024400
 80095bc:	08014660 	.word	0x08014660
 80095c0:	2400008c 	.word	0x2400008c
 80095c4:	24000088 	.word	0x24000088

080095c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80095cc:	f7ff ffcc 	bl	8009568 <HAL_RCC_GetHCLKFreq>
 80095d0:	4602      	mov	r2, r0
 80095d2:	4b06      	ldr	r3, [pc, #24]	; (80095ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80095d4:	69db      	ldr	r3, [r3, #28]
 80095d6:	091b      	lsrs	r3, r3, #4
 80095d8:	f003 0307 	and.w	r3, r3, #7
 80095dc:	4904      	ldr	r1, [pc, #16]	; (80095f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80095de:	5ccb      	ldrb	r3, [r1, r3]
 80095e0:	f003 031f 	and.w	r3, r3, #31
 80095e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	58024400 	.word	0x58024400
 80095f0:	08014660 	.word	0x08014660

080095f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80095f8:	f7ff ffb6 	bl	8009568 <HAL_RCC_GetHCLKFreq>
 80095fc:	4602      	mov	r2, r0
 80095fe:	4b06      	ldr	r3, [pc, #24]	; (8009618 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009600:	69db      	ldr	r3, [r3, #28]
 8009602:	0a1b      	lsrs	r3, r3, #8
 8009604:	f003 0307 	and.w	r3, r3, #7
 8009608:	4904      	ldr	r1, [pc, #16]	; (800961c <HAL_RCC_GetPCLK2Freq+0x28>)
 800960a:	5ccb      	ldrb	r3, [r1, r3]
 800960c:	f003 031f 	and.w	r3, r3, #31
 8009610:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009614:	4618      	mov	r0, r3
 8009616:	bd80      	pop	{r7, pc}
 8009618:	58024400 	.word	0x58024400
 800961c:	08014660 	.word	0x08014660

08009620 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	223f      	movs	r2, #63	; 0x3f
 800962e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009630:	4b1a      	ldr	r3, [pc, #104]	; (800969c <HAL_RCC_GetClockConfig+0x7c>)
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	f003 0207 	and.w	r2, r3, #7
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800963c:	4b17      	ldr	r3, [pc, #92]	; (800969c <HAL_RCC_GetClockConfig+0x7c>)
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009648:	4b14      	ldr	r3, [pc, #80]	; (800969c <HAL_RCC_GetClockConfig+0x7c>)
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	f003 020f 	and.w	r2, r3, #15
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009654:	4b11      	ldr	r3, [pc, #68]	; (800969c <HAL_RCC_GetClockConfig+0x7c>)
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009660:	4b0e      	ldr	r3, [pc, #56]	; (800969c <HAL_RCC_GetClockConfig+0x7c>)
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800966c:	4b0b      	ldr	r3, [pc, #44]	; (800969c <HAL_RCC_GetClockConfig+0x7c>)
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009678:	4b08      	ldr	r3, [pc, #32]	; (800969c <HAL_RCC_GetClockConfig+0x7c>)
 800967a:	6a1b      	ldr	r3, [r3, #32]
 800967c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009684:	4b06      	ldr	r3, [pc, #24]	; (80096a0 <HAL_RCC_GetClockConfig+0x80>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 020f 	and.w	r2, r3, #15
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	601a      	str	r2, [r3, #0]
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	58024400 	.word	0x58024400
 80096a0:	52002000 	.word	0x52002000

080096a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096a8:	b0ca      	sub	sp, #296	; 0x128
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096b0:	2300      	movs	r3, #0
 80096b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096b6:	2300      	movs	r3, #0
 80096b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80096bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80096c8:	2500      	movs	r5, #0
 80096ca:	ea54 0305 	orrs.w	r3, r4, r5
 80096ce:	d049      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80096d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096da:	d02f      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80096dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096e0:	d828      	bhi.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80096e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096e6:	d01a      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80096e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096ec:	d822      	bhi.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d003      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80096f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096f6:	d007      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80096f8:	e01c      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096fa:	4bb8      	ldr	r3, [pc, #736]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80096fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fe:	4ab7      	ldr	r2, [pc, #732]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009704:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009706:	e01a      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800970c:	3308      	adds	r3, #8
 800970e:	2102      	movs	r1, #2
 8009710:	4618      	mov	r0, r3
 8009712:	f002 fb61 	bl	800bdd8 <RCCEx_PLL2_Config>
 8009716:	4603      	mov	r3, r0
 8009718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800971c:	e00f      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800971e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009722:	3328      	adds	r3, #40	; 0x28
 8009724:	2102      	movs	r1, #2
 8009726:	4618      	mov	r0, r3
 8009728:	f002 fc08 	bl	800bf3c <RCCEx_PLL3_Config>
 800972c:	4603      	mov	r3, r0
 800972e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009732:	e004      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800973a:	e000      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800973c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800973e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10a      	bne.n	800975c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009746:	4ba5      	ldr	r3, [pc, #660]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800974a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800974e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009754:	4aa1      	ldr	r2, [pc, #644]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009756:	430b      	orrs	r3, r1
 8009758:	6513      	str	r3, [r2, #80]	; 0x50
 800975a:	e003      	b.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800975c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009760:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009770:	f04f 0900 	mov.w	r9, #0
 8009774:	ea58 0309 	orrs.w	r3, r8, r9
 8009778:	d047      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800977a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800977e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009780:	2b04      	cmp	r3, #4
 8009782:	d82a      	bhi.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009784:	a201      	add	r2, pc, #4	; (adr r2, 800978c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978a:	bf00      	nop
 800978c:	080097a1 	.word	0x080097a1
 8009790:	080097af 	.word	0x080097af
 8009794:	080097c5 	.word	0x080097c5
 8009798:	080097e3 	.word	0x080097e3
 800979c:	080097e3 	.word	0x080097e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097a0:	4b8e      	ldr	r3, [pc, #568]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	4a8d      	ldr	r2, [pc, #564]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097ac:	e01a      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b2:	3308      	adds	r3, #8
 80097b4:	2100      	movs	r1, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f002 fb0e 	bl	800bdd8 <RCCEx_PLL2_Config>
 80097bc:	4603      	mov	r3, r0
 80097be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097c2:	e00f      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80097c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c8:	3328      	adds	r3, #40	; 0x28
 80097ca:	2100      	movs	r1, #0
 80097cc:	4618      	mov	r0, r3
 80097ce:	f002 fbb5 	bl	800bf3c <RCCEx_PLL3_Config>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80097d8:	e004      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097e0:	e000      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80097e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10a      	bne.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80097ec:	4b7b      	ldr	r3, [pc, #492]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097f0:	f023 0107 	bic.w	r1, r3, #7
 80097f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097fa:	4a78      	ldr	r2, [pc, #480]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80097fc:	430b      	orrs	r3, r1
 80097fe:	6513      	str	r3, [r2, #80]	; 0x50
 8009800:	e003      	b.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009806:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800980a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009816:	f04f 0b00 	mov.w	fp, #0
 800981a:	ea5a 030b 	orrs.w	r3, sl, fp
 800981e:	d04c      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800982a:	d030      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800982c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009830:	d829      	bhi.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009832:	2bc0      	cmp	r3, #192	; 0xc0
 8009834:	d02d      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009836:	2bc0      	cmp	r3, #192	; 0xc0
 8009838:	d825      	bhi.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800983a:	2b80      	cmp	r3, #128	; 0x80
 800983c:	d018      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800983e:	2b80      	cmp	r3, #128	; 0x80
 8009840:	d821      	bhi.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009842:	2b00      	cmp	r3, #0
 8009844:	d002      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009846:	2b40      	cmp	r3, #64	; 0x40
 8009848:	d007      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800984a:	e01c      	b.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800984c:	4b63      	ldr	r3, [pc, #396]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800984e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009850:	4a62      	ldr	r2, [pc, #392]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009858:	e01c      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800985a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800985e:	3308      	adds	r3, #8
 8009860:	2100      	movs	r1, #0
 8009862:	4618      	mov	r0, r3
 8009864:	f002 fab8 	bl	800bdd8 <RCCEx_PLL2_Config>
 8009868:	4603      	mov	r3, r0
 800986a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800986e:	e011      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009874:	3328      	adds	r3, #40	; 0x28
 8009876:	2100      	movs	r1, #0
 8009878:	4618      	mov	r0, r3
 800987a:	f002 fb5f 	bl	800bf3c <RCCEx_PLL3_Config>
 800987e:	4603      	mov	r3, r0
 8009880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009884:	e006      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800988c:	e002      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800988e:	bf00      	nop
 8009890:	e000      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10a      	bne.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800989c:	4b4f      	ldr	r3, [pc, #316]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800989e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098a0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80098a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098aa:	4a4c      	ldr	r2, [pc, #304]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098ac:	430b      	orrs	r3, r1
 80098ae:	6513      	str	r3, [r2, #80]	; 0x50
 80098b0:	e003      	b.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80098ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80098c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80098ca:	2300      	movs	r3, #0
 80098cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80098d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80098d4:	460b      	mov	r3, r1
 80098d6:	4313      	orrs	r3, r2
 80098d8:	d053      	beq.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80098da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80098e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098e6:	d035      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80098e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098ec:	d82e      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80098ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098f2:	d031      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80098f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80098f8:	d828      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80098fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80098fe:	d01a      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009900:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009904:	d822      	bhi.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800990a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800990e:	d007      	beq.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009910:	e01c      	b.n	800994c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009912:	4b32      	ldr	r3, [pc, #200]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009916:	4a31      	ldr	r2, [pc, #196]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800991c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800991e:	e01c      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009924:	3308      	adds	r3, #8
 8009926:	2100      	movs	r1, #0
 8009928:	4618      	mov	r0, r3
 800992a:	f002 fa55 	bl	800bdd8 <RCCEx_PLL2_Config>
 800992e:	4603      	mov	r3, r0
 8009930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009934:	e011      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800993a:	3328      	adds	r3, #40	; 0x28
 800993c:	2100      	movs	r1, #0
 800993e:	4618      	mov	r0, r3
 8009940:	f002 fafc 	bl	800bf3c <RCCEx_PLL3_Config>
 8009944:	4603      	mov	r3, r0
 8009946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800994a:	e006      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009952:	e002      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009954:	bf00      	nop
 8009956:	e000      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800995a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10b      	bne.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009962:	4b1e      	ldr	r3, [pc, #120]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009966:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800996a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800996e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009972:	4a1a      	ldr	r2, [pc, #104]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009974:	430b      	orrs	r3, r1
 8009976:	6593      	str	r3, [r2, #88]	; 0x58
 8009978:	e003      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800997a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800997e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800998e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009992:	2300      	movs	r3, #0
 8009994:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009998:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800999c:	460b      	mov	r3, r1
 800999e:	4313      	orrs	r3, r2
 80099a0:	d056      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80099a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099ae:	d038      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80099b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80099b4:	d831      	bhi.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099ba:	d034      	beq.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80099bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80099c0:	d82b      	bhi.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099c6:	d01d      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80099c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099cc:	d825      	bhi.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d006      	beq.n	80099e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80099d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099d6:	d00a      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80099d8:	e01f      	b.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80099da:	bf00      	nop
 80099dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099e0:	4ba2      	ldr	r3, [pc, #648]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e4:	4aa1      	ldr	r2, [pc, #644]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80099e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099ec:	e01c      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f2:	3308      	adds	r3, #8
 80099f4:	2100      	movs	r1, #0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f002 f9ee 	bl	800bdd8 <RCCEx_PLL2_Config>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a02:	e011      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a08:	3328      	adds	r3, #40	; 0x28
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f002 fa95 	bl	800bf3c <RCCEx_PLL3_Config>
 8009a12:	4603      	mov	r3, r0
 8009a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a18:	e006      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a20:	e002      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009a22:	bf00      	nop
 8009a24:	e000      	b.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10b      	bne.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009a30:	4b8e      	ldr	r3, [pc, #568]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a34:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a40:	4a8a      	ldr	r2, [pc, #552]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a42:	430b      	orrs	r3, r1
 8009a44:	6593      	str	r3, [r2, #88]	; 0x58
 8009a46:	e003      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a58:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a60:	2300      	movs	r3, #0
 8009a62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009a66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	d03a      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a76:	2b30      	cmp	r3, #48	; 0x30
 8009a78:	d01f      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009a7a:	2b30      	cmp	r3, #48	; 0x30
 8009a7c:	d819      	bhi.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009a7e:	2b20      	cmp	r3, #32
 8009a80:	d00c      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009a82:	2b20      	cmp	r3, #32
 8009a84:	d815      	bhi.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d019      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009a8a:	2b10      	cmp	r3, #16
 8009a8c:	d111      	bne.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a8e:	4b77      	ldr	r3, [pc, #476]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a92:	4a76      	ldr	r2, [pc, #472]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009a9a:	e011      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	2102      	movs	r1, #2
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f002 f997 	bl	800bdd8 <RCCEx_PLL2_Config>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009ab0:	e006      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ab8:	e002      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009aba:	bf00      	nop
 8009abc:	e000      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10a      	bne.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009ac8:	4b68      	ldr	r3, [pc, #416]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009acc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad6:	4a65      	ldr	r2, [pc, #404]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009ad8:	430b      	orrs	r3, r1
 8009ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009adc:	e003      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009af2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009af6:	2300      	movs	r3, #0
 8009af8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009afc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009b00:	460b      	mov	r3, r1
 8009b02:	4313      	orrs	r3, r2
 8009b04:	d051      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b10:	d035      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009b12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b16:	d82e      	bhi.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b1c:	d031      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009b1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b22:	d828      	bhi.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b28:	d01a      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b2e:	d822      	bhi.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b38:	d007      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009b3a:	e01c      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b3c:	4b4b      	ldr	r3, [pc, #300]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b40:	4a4a      	ldr	r2, [pc, #296]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b48:	e01c      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b4e:	3308      	adds	r3, #8
 8009b50:	2100      	movs	r1, #0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f002 f940 	bl	800bdd8 <RCCEx_PLL2_Config>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b5e:	e011      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b64:	3328      	adds	r3, #40	; 0x28
 8009b66:	2100      	movs	r1, #0
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f002 f9e7 	bl	800bf3c <RCCEx_PLL3_Config>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009b74:	e006      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b7c:	e002      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009b7e:	bf00      	nop
 8009b80:	e000      	b.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10a      	bne.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009b8c:	4b37      	ldr	r3, [pc, #220]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b90:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b9a:	4a34      	ldr	r2, [pc, #208]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b9c:	430b      	orrs	r3, r1
 8009b9e:	6513      	str	r3, [r2, #80]	; 0x50
 8009ba0:	e003      	b.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ba6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009bc0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	d056      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bd4:	d033      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009bd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bda:	d82c      	bhi.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009bdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009be0:	d02f      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009be2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009be6:	d826      	bhi.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009be8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009bec:	d02b      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009bee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009bf2:	d820      	bhi.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bf8:	d012      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009bfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bfe:	d81a      	bhi.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d022      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c08:	d115      	bne.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c0e:	3308      	adds	r3, #8
 8009c10:	2101      	movs	r1, #1
 8009c12:	4618      	mov	r0, r3
 8009c14:	f002 f8e0 	bl	800bdd8 <RCCEx_PLL2_Config>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009c1e:	e015      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c24:	3328      	adds	r3, #40	; 0x28
 8009c26:	2101      	movs	r1, #1
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f002 f987 	bl	800bf3c <RCCEx_PLL3_Config>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009c34:	e00a      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c3c:	e006      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c3e:	bf00      	nop
 8009c40:	e004      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c42:	bf00      	nop
 8009c44:	e002      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c46:	bf00      	nop
 8009c48:	e000      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10d      	bne.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c58:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c62:	4a02      	ldr	r2, [pc, #8]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c64:	430b      	orrs	r3, r1
 8009c66:	6513      	str	r3, [r2, #80]	; 0x50
 8009c68:	e006      	b.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009c6a:	bf00      	nop
 8009c6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c8e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009c92:	460b      	mov	r3, r1
 8009c94:	4313      	orrs	r3, r2
 8009c96:	d055      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ca4:	d033      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009caa:	d82c      	bhi.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cb0:	d02f      	beq.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cb6:	d826      	bhi.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009cb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cbc:	d02b      	beq.n	8009d16 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009cbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cc2:	d820      	bhi.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cc8:	d012      	beq.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cce:	d81a      	bhi.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d022      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009cd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cd8:	d115      	bne.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cde:	3308      	adds	r3, #8
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f002 f878 	bl	800bdd8 <RCCEx_PLL2_Config>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009cee:	e015      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf4:	3328      	adds	r3, #40	; 0x28
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f002 f91f 	bl	800bf3c <RCCEx_PLL3_Config>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d04:	e00a      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d0c:	e006      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d0e:	bf00      	nop
 8009d10:	e004      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d12:	bf00      	nop
 8009d14:	e002      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d16:	bf00      	nop
 8009d18:	e000      	b.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10b      	bne.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009d24:	4ba3      	ldr	r3, [pc, #652]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d28:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009d34:	4a9f      	ldr	r2, [pc, #636]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d36:	430b      	orrs	r3, r1
 8009d38:	6593      	str	r3, [r2, #88]	; 0x58
 8009d3a:	e003      	b.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009d50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d54:	2300      	movs	r3, #0
 8009d56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d5e:	460b      	mov	r3, r1
 8009d60:	4313      	orrs	r3, r2
 8009d62:	d037      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d6e:	d00e      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d74:	d816      	bhi.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d018      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d7e:	d111      	bne.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d80:	4b8c      	ldr	r3, [pc, #560]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d84:	4a8b      	ldr	r2, [pc, #556]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009d8c:	e00f      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d92:	3308      	adds	r3, #8
 8009d94:	2101      	movs	r1, #1
 8009d96:	4618      	mov	r0, r3
 8009d98:	f002 f81e 	bl	800bdd8 <RCCEx_PLL2_Config>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009da2:	e004      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009daa:	e000      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10a      	bne.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009db6:	4b7f      	ldr	r3, [pc, #508]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc4:	4a7b      	ldr	r2, [pc, #492]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009dc6:	430b      	orrs	r3, r1
 8009dc8:	6513      	str	r3, [r2, #80]	; 0x50
 8009dca:	e003      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ddc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009de4:	2300      	movs	r3, #0
 8009de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009dea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009dee:	460b      	mov	r3, r1
 8009df0:	4313      	orrs	r3, r2
 8009df2:	d039      	beq.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d81c      	bhi.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009dfe:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009e41 	.word	0x08009e41
 8009e08:	08009e15 	.word	0x08009e15
 8009e0c:	08009e23 	.word	0x08009e23
 8009e10:	08009e41 	.word	0x08009e41
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e14:	4b67      	ldr	r3, [pc, #412]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e18:	4a66      	ldr	r2, [pc, #408]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009e20:	e00f      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e26:	3308      	adds	r3, #8
 8009e28:	2102      	movs	r1, #2
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 ffd4 	bl	800bdd8 <RCCEx_PLL2_Config>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009e36:	e004      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e3e:	e000      	b.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009e40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10a      	bne.n	8009e60 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009e4a:	4b5a      	ldr	r3, [pc, #360]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e4e:	f023 0103 	bic.w	r1, r3, #3
 8009e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e58:	4a56      	ldr	r2, [pc, #344]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009e5a:	430b      	orrs	r3, r1
 8009e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e5e:	e003      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e70:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009e74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e7e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009e82:	460b      	mov	r3, r1
 8009e84:	4313      	orrs	r3, r2
 8009e86:	f000 809f 	beq.w	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e8a:	4b4b      	ldr	r3, [pc, #300]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a4a      	ldr	r2, [pc, #296]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e96:	f7f9 f91d 	bl	80030d4 <HAL_GetTick>
 8009e9a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e9e:	e00b      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ea0:	f7f9 f918 	bl	80030d4 <HAL_GetTick>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	2b64      	cmp	r3, #100	; 0x64
 8009eae:	d903      	bls.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009eb6:	e005      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009eb8:	4b3f      	ldr	r3, [pc, #252]	; (8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d0ed      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d179      	bne.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009ecc:	4b39      	ldr	r3, [pc, #228]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ece:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ed8:	4053      	eors	r3, r2
 8009eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d015      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ee2:	4b34      	ldr	r3, [pc, #208]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009eee:	4b31      	ldr	r3, [pc, #196]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef2:	4a30      	ldr	r2, [pc, #192]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ef8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009efa:	4b2e      	ldr	r3, [pc, #184]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009efe:	4a2d      	ldr	r2, [pc, #180]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f04:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009f06:	4a2b      	ldr	r2, [pc, #172]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f0c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f1a:	d118      	bne.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f1c:	f7f9 f8da 	bl	80030d4 <HAL_GetTick>
 8009f20:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f24:	e00d      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f26:	f7f9 f8d5 	bl	80030d4 <HAL_GetTick>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009f30:	1ad2      	subs	r2, r2, r3
 8009f32:	f241 3388 	movw	r3, #5000	; 0x1388
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d903      	bls.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009f40:	e005      	b.n	8009f4e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f42:	4b1c      	ldr	r3, [pc, #112]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f46:	f003 0302 	and.w	r3, r3, #2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0eb      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d129      	bne.n	8009faa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f66:	d10e      	bne.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009f68:	4b12      	ldr	r3, [pc, #72]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f78:	091a      	lsrs	r2, r3, #4
 8009f7a:	4b10      	ldr	r3, [pc, #64]	; (8009fbc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	4a0d      	ldr	r2, [pc, #52]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f80:	430b      	orrs	r3, r1
 8009f82:	6113      	str	r3, [r2, #16]
 8009f84:	e005      	b.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009f86:	4b0b      	ldr	r3, [pc, #44]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	4a0a      	ldr	r2, [pc, #40]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f90:	6113      	str	r3, [r2, #16]
 8009f92:	4b08      	ldr	r3, [pc, #32]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f94:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fa2:	4a04      	ldr	r2, [pc, #16]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fa4:	430b      	orrs	r3, r1
 8009fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8009fa8:	e00e      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009fb2:	e009      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009fb4:	58024400 	.word	0x58024400
 8009fb8:	58024800 	.word	0x58024800
 8009fbc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	f002 0301 	and.w	r3, r2, #1
 8009fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009fde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	f000 8089 	beq.w	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ff0:	2b28      	cmp	r3, #40	; 0x28
 8009ff2:	d86b      	bhi.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009ff4:	a201      	add	r2, pc, #4	; (adr r2, 8009ffc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffa:	bf00      	nop
 8009ffc:	0800a0d5 	.word	0x0800a0d5
 800a000:	0800a0cd 	.word	0x0800a0cd
 800a004:	0800a0cd 	.word	0x0800a0cd
 800a008:	0800a0cd 	.word	0x0800a0cd
 800a00c:	0800a0cd 	.word	0x0800a0cd
 800a010:	0800a0cd 	.word	0x0800a0cd
 800a014:	0800a0cd 	.word	0x0800a0cd
 800a018:	0800a0cd 	.word	0x0800a0cd
 800a01c:	0800a0a1 	.word	0x0800a0a1
 800a020:	0800a0cd 	.word	0x0800a0cd
 800a024:	0800a0cd 	.word	0x0800a0cd
 800a028:	0800a0cd 	.word	0x0800a0cd
 800a02c:	0800a0cd 	.word	0x0800a0cd
 800a030:	0800a0cd 	.word	0x0800a0cd
 800a034:	0800a0cd 	.word	0x0800a0cd
 800a038:	0800a0cd 	.word	0x0800a0cd
 800a03c:	0800a0b7 	.word	0x0800a0b7
 800a040:	0800a0cd 	.word	0x0800a0cd
 800a044:	0800a0cd 	.word	0x0800a0cd
 800a048:	0800a0cd 	.word	0x0800a0cd
 800a04c:	0800a0cd 	.word	0x0800a0cd
 800a050:	0800a0cd 	.word	0x0800a0cd
 800a054:	0800a0cd 	.word	0x0800a0cd
 800a058:	0800a0cd 	.word	0x0800a0cd
 800a05c:	0800a0d5 	.word	0x0800a0d5
 800a060:	0800a0cd 	.word	0x0800a0cd
 800a064:	0800a0cd 	.word	0x0800a0cd
 800a068:	0800a0cd 	.word	0x0800a0cd
 800a06c:	0800a0cd 	.word	0x0800a0cd
 800a070:	0800a0cd 	.word	0x0800a0cd
 800a074:	0800a0cd 	.word	0x0800a0cd
 800a078:	0800a0cd 	.word	0x0800a0cd
 800a07c:	0800a0d5 	.word	0x0800a0d5
 800a080:	0800a0cd 	.word	0x0800a0cd
 800a084:	0800a0cd 	.word	0x0800a0cd
 800a088:	0800a0cd 	.word	0x0800a0cd
 800a08c:	0800a0cd 	.word	0x0800a0cd
 800a090:	0800a0cd 	.word	0x0800a0cd
 800a094:	0800a0cd 	.word	0x0800a0cd
 800a098:	0800a0cd 	.word	0x0800a0cd
 800a09c:	0800a0d5 	.word	0x0800a0d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f001 fe95 	bl	800bdd8 <RCCEx_PLL2_Config>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a0b4:	e00f      	b.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ba:	3328      	adds	r3, #40	; 0x28
 800a0bc:	2101      	movs	r1, #1
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f001 ff3c 	bl	800bf3c <RCCEx_PLL3_Config>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a0ca:	e004      	b.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0d2:	e000      	b.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a0d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d10a      	bne.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a0de:	4bbf      	ldr	r3, [pc, #764]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0ec:	4abb      	ldr	r2, [pc, #748]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0ee:	430b      	orrs	r3, r1
 800a0f0:	6553      	str	r3, [r2, #84]	; 0x54
 800a0f2:	e003      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	f002 0302 	and.w	r3, r2, #2
 800a108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a10c:	2300      	movs	r3, #0
 800a10e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a112:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a116:	460b      	mov	r3, r1
 800a118:	4313      	orrs	r3, r2
 800a11a:	d041      	beq.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a122:	2b05      	cmp	r3, #5
 800a124:	d824      	bhi.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a126:	a201      	add	r2, pc, #4	; (adr r2, 800a12c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12c:	0800a179 	.word	0x0800a179
 800a130:	0800a145 	.word	0x0800a145
 800a134:	0800a15b 	.word	0x0800a15b
 800a138:	0800a179 	.word	0x0800a179
 800a13c:	0800a179 	.word	0x0800a179
 800a140:	0800a179 	.word	0x0800a179
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a148:	3308      	adds	r3, #8
 800a14a:	2101      	movs	r1, #1
 800a14c:	4618      	mov	r0, r3
 800a14e:	f001 fe43 	bl	800bdd8 <RCCEx_PLL2_Config>
 800a152:	4603      	mov	r3, r0
 800a154:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a158:	e00f      	b.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a15e:	3328      	adds	r3, #40	; 0x28
 800a160:	2101      	movs	r1, #1
 800a162:	4618      	mov	r0, r3
 800a164:	f001 feea 	bl	800bf3c <RCCEx_PLL3_Config>
 800a168:	4603      	mov	r3, r0
 800a16a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a16e:	e004      	b.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a176:	e000      	b.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a17a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10a      	bne.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a182:	4b96      	ldr	r3, [pc, #600]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a186:	f023 0107 	bic.w	r1, r3, #7
 800a18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a18e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a190:	4a92      	ldr	r2, [pc, #584]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a192:	430b      	orrs	r3, r1
 800a194:	6553      	str	r3, [r2, #84]	; 0x54
 800a196:	e003      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a198:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a19c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a1a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a8:	f002 0304 	and.w	r3, r2, #4
 800a1ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a1ba:	460b      	mov	r3, r1
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	d044      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a1c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a1c8:	2b05      	cmp	r3, #5
 800a1ca:	d825      	bhi.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a1cc:	a201      	add	r2, pc, #4	; (adr r2, 800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d2:	bf00      	nop
 800a1d4:	0800a221 	.word	0x0800a221
 800a1d8:	0800a1ed 	.word	0x0800a1ed
 800a1dc:	0800a203 	.word	0x0800a203
 800a1e0:	0800a221 	.word	0x0800a221
 800a1e4:	0800a221 	.word	0x0800a221
 800a1e8:	0800a221 	.word	0x0800a221
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	2101      	movs	r1, #1
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f001 fdef 	bl	800bdd8 <RCCEx_PLL2_Config>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a200:	e00f      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a206:	3328      	adds	r3, #40	; 0x28
 800a208:	2101      	movs	r1, #1
 800a20a:	4618      	mov	r0, r3
 800a20c:	f001 fe96 	bl	800bf3c <RCCEx_PLL3_Config>
 800a210:	4603      	mov	r3, r0
 800a212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a216:	e004      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a21e:	e000      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a220:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10b      	bne.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a22a:	4b6c      	ldr	r3, [pc, #432]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a22c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a22e:	f023 0107 	bic.w	r1, r3, #7
 800a232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a23a:	4a68      	ldr	r2, [pc, #416]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a23c:	430b      	orrs	r3, r1
 800a23e:	6593      	str	r3, [r2, #88]	; 0x58
 800a240:	e003      	b.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a246:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a252:	f002 0320 	and.w	r3, r2, #32
 800a256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a25a:	2300      	movs	r3, #0
 800a25c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a264:	460b      	mov	r3, r1
 800a266:	4313      	orrs	r3, r2
 800a268:	d055      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a276:	d033      	beq.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a27c:	d82c      	bhi.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a282:	d02f      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a288:	d826      	bhi.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a28a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a28e:	d02b      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a290:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a294:	d820      	bhi.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a29a:	d012      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a29c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2a0:	d81a      	bhi.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d022      	beq.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a2a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2aa:	d115      	bne.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2b0:	3308      	adds	r3, #8
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f001 fd8f 	bl	800bdd8 <RCCEx_PLL2_Config>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a2c0:	e015      	b.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2c6:	3328      	adds	r3, #40	; 0x28
 800a2c8:	2102      	movs	r1, #2
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f001 fe36 	bl	800bf3c <RCCEx_PLL3_Config>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a2d6:	e00a      	b.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2de:	e006      	b.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a2e0:	bf00      	nop
 800a2e2:	e004      	b.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a2e4:	bf00      	nop
 800a2e6:	e002      	b.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a2e8:	bf00      	nop
 800a2ea:	e000      	b.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a2ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10b      	bne.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2f6:	4b39      	ldr	r3, [pc, #228]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2fa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a2fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a306:	4a35      	ldr	r2, [pc, #212]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a308:	430b      	orrs	r3, r1
 800a30a:	6553      	str	r3, [r2, #84]	; 0x54
 800a30c:	e003      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a30e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a312:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a326:	2300      	movs	r3, #0
 800a328:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a32c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a330:	460b      	mov	r3, r1
 800a332:	4313      	orrs	r3, r2
 800a334:	d058      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a33a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a33e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a342:	d033      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a344:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a348:	d82c      	bhi.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a34a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a34e:	d02f      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a354:	d826      	bhi.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a356:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a35a:	d02b      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a35c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a360:	d820      	bhi.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a366:	d012      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a36c:	d81a      	bhi.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d022      	beq.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a376:	d115      	bne.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37c:	3308      	adds	r3, #8
 800a37e:	2100      	movs	r1, #0
 800a380:	4618      	mov	r0, r3
 800a382:	f001 fd29 	bl	800bdd8 <RCCEx_PLL2_Config>
 800a386:	4603      	mov	r3, r0
 800a388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a38c:	e015      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a392:	3328      	adds	r3, #40	; 0x28
 800a394:	2102      	movs	r1, #2
 800a396:	4618      	mov	r0, r3
 800a398:	f001 fdd0 	bl	800bf3c <RCCEx_PLL3_Config>
 800a39c:	4603      	mov	r3, r0
 800a39e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a3a2:	e00a      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3aa:	e006      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3ac:	bf00      	nop
 800a3ae:	e004      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3b0:	bf00      	nop
 800a3b2:	e002      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3b4:	bf00      	nop
 800a3b6:	e000      	b.n	800a3ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a3b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10e      	bne.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a3c2:	4b06      	ldr	r3, [pc, #24]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3c6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3d2:	4a02      	ldr	r2, [pc, #8]	; (800a3dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3d4:	430b      	orrs	r3, r1
 800a3d6:	6593      	str	r3, [r2, #88]	; 0x58
 800a3d8:	e006      	b.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a3da:	bf00      	nop
 800a3dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a3e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a3f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a402:	460b      	mov	r3, r1
 800a404:	4313      	orrs	r3, r2
 800a406:	d055      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a40c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a410:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a414:	d033      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a416:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a41a:	d82c      	bhi.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a41c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a420:	d02f      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a426:	d826      	bhi.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a428:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a42c:	d02b      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a42e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a432:	d820      	bhi.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a438:	d012      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a43a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a43e:	d81a      	bhi.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a440:	2b00      	cmp	r3, #0
 800a442:	d022      	beq.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a448:	d115      	bne.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a44e:	3308      	adds	r3, #8
 800a450:	2100      	movs	r1, #0
 800a452:	4618      	mov	r0, r3
 800a454:	f001 fcc0 	bl	800bdd8 <RCCEx_PLL2_Config>
 800a458:	4603      	mov	r3, r0
 800a45a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a45e:	e015      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a464:	3328      	adds	r3, #40	; 0x28
 800a466:	2102      	movs	r1, #2
 800a468:	4618      	mov	r0, r3
 800a46a:	f001 fd67 	bl	800bf3c <RCCEx_PLL3_Config>
 800a46e:	4603      	mov	r3, r0
 800a470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a474:	e00a      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a47c:	e006      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a47e:	bf00      	nop
 800a480:	e004      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a482:	bf00      	nop
 800a484:	e002      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a486:	bf00      	nop
 800a488:	e000      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a48a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a48c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10b      	bne.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a494:	4ba1      	ldr	r3, [pc, #644]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a498:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a4a4:	4a9d      	ldr	r2, [pc, #628]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4a6:	430b      	orrs	r3, r1
 800a4a8:	6593      	str	r3, [r2, #88]	; 0x58
 800a4aa:	e003      	b.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f002 0308 	and.w	r3, r2, #8
 800a4c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a4ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a4ce:	460b      	mov	r3, r1
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	d01e      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4e0:	d10c      	bne.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a4e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4e6:	3328      	adds	r3, #40	; 0x28
 800a4e8:	2102      	movs	r1, #2
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f001 fd26 	bl	800bf3c <RCCEx_PLL3_Config>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d002      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a4fc:	4b87      	ldr	r3, [pc, #540]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a4fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a500:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a50c:	4a83      	ldr	r2, [pc, #524]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a50e:	430b      	orrs	r3, r1
 800a510:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51a:	f002 0310 	and.w	r3, r2, #16
 800a51e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a522:	2300      	movs	r3, #0
 800a524:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a528:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a52c:	460b      	mov	r3, r1
 800a52e:	4313      	orrs	r3, r2
 800a530:	d01e      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a536:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a53a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a53e:	d10c      	bne.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a544:	3328      	adds	r3, #40	; 0x28
 800a546:	2102      	movs	r1, #2
 800a548:	4618      	mov	r0, r3
 800a54a:	f001 fcf7 	bl	800bf3c <RCCEx_PLL3_Config>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a55a:	4b70      	ldr	r3, [pc, #448]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a55e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a56a:	4a6c      	ldr	r2, [pc, #432]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a56c:	430b      	orrs	r3, r1
 800a56e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a57c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a580:	2300      	movs	r3, #0
 800a582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a586:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a58a:	460b      	mov	r3, r1
 800a58c:	4313      	orrs	r3, r2
 800a58e:	d03e      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a594:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a59c:	d022      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a59e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5a2:	d81b      	bhi.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d003      	beq.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a5a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5ac:	d00b      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a5ae:	e015      	b.n	800a5dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	2100      	movs	r1, #0
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f001 fc0d 	bl	800bdd8 <RCCEx_PLL2_Config>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a5c4:	e00f      	b.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5ca:	3328      	adds	r3, #40	; 0x28
 800a5cc:	2102      	movs	r1, #2
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f001 fcb4 	bl	800bf3c <RCCEx_PLL3_Config>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a5da:	e004      	b.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5e2:	e000      	b.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a5e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10b      	bne.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a5ee:	4b4b      	ldr	r3, [pc, #300]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a5f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a5fe:	4a47      	ldr	r2, [pc, #284]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a600:	430b      	orrs	r3, r1
 800a602:	6593      	str	r3, [r2, #88]	; 0x58
 800a604:	e003      	b.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a60a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a616:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a61a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a61c:	2300      	movs	r3, #0
 800a61e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a620:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a624:	460b      	mov	r3, r1
 800a626:	4313      	orrs	r3, r2
 800a628:	d03b      	beq.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a62e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a632:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a636:	d01f      	beq.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a63c:	d818      	bhi.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a63e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a642:	d003      	beq.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a648:	d007      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a64a:	e011      	b.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a64c:	4b33      	ldr	r3, [pc, #204]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a650:	4a32      	ldr	r2, [pc, #200]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a658:	e00f      	b.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a65e:	3328      	adds	r3, #40	; 0x28
 800a660:	2101      	movs	r1, #1
 800a662:	4618      	mov	r0, r3
 800a664:	f001 fc6a 	bl	800bf3c <RCCEx_PLL3_Config>
 800a668:	4603      	mov	r3, r0
 800a66a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a66e:	e004      	b.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a676:	e000      	b.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a67a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10b      	bne.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a682:	4b26      	ldr	r3, [pc, #152]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a686:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a68e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a692:	4a22      	ldr	r2, [pc, #136]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a694:	430b      	orrs	r3, r1
 800a696:	6553      	str	r3, [r2, #84]	; 0x54
 800a698:	e003      	b.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a69a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a69e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6aa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a6ae:	673b      	str	r3, [r7, #112]	; 0x70
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	677b      	str	r3, [r7, #116]	; 0x74
 800a6b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	d034      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d003      	beq.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a6c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6cc:	d007      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a6ce:	e011      	b.n	800a6f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6d0:	4b12      	ldr	r3, [pc, #72]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d4:	4a11      	ldr	r2, [pc, #68]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a6dc:	e00e      	b.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	2102      	movs	r1, #2
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f001 fb76 	bl	800bdd8 <RCCEx_PLL2_Config>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a6f2:	e003      	b.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a6fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10d      	bne.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a704:	4b05      	ldr	r3, [pc, #20]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a70c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a712:	4a02      	ldr	r2, [pc, #8]	; (800a71c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a714:	430b      	orrs	r3, r1
 800a716:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a718:	e006      	b.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a71a:	bf00      	nop
 800a71c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a724:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a734:	66bb      	str	r3, [r7, #104]	; 0x68
 800a736:	2300      	movs	r3, #0
 800a738:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a73a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a73e:	460b      	mov	r3, r1
 800a740:	4313      	orrs	r3, r2
 800a742:	d00c      	beq.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a748:	3328      	adds	r3, #40	; 0x28
 800a74a:	2102      	movs	r1, #2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f001 fbf5 	bl	800bf3c <RCCEx_PLL3_Config>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d002      	beq.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a75e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a76a:	663b      	str	r3, [r7, #96]	; 0x60
 800a76c:	2300      	movs	r3, #0
 800a76e:	667b      	str	r3, [r7, #100]	; 0x64
 800a770:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a774:	460b      	mov	r3, r1
 800a776:	4313      	orrs	r3, r2
 800a778:	d038      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a786:	d018      	beq.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a78c:	d811      	bhi.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a78e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a792:	d014      	beq.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a798:	d80b      	bhi.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d011      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a79e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7a2:	d106      	bne.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7a4:	4bc3      	ldr	r3, [pc, #780]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a8:	4ac2      	ldr	r2, [pc, #776]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a7b0:	e008      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7b8:	e004      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7ba:	bf00      	nop
 800a7bc:	e002      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7be:	bf00      	nop
 800a7c0:	e000      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a7c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10b      	bne.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a7cc:	4bb9      	ldr	r3, [pc, #740]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a7d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7dc:	4ab5      	ldr	r2, [pc, #724]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a7de:	430b      	orrs	r3, r1
 800a7e0:	6553      	str	r3, [r2, #84]	; 0x54
 800a7e2:	e003      	b.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a7f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a802:	460b      	mov	r3, r1
 800a804:	4313      	orrs	r3, r2
 800a806:	d009      	beq.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a808:	4baa      	ldr	r3, [pc, #680]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a80a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a80c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a816:	4aa7      	ldr	r2, [pc, #668]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a818:	430b      	orrs	r3, r1
 800a81a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a824:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a828:	653b      	str	r3, [r7, #80]	; 0x50
 800a82a:	2300      	movs	r3, #0
 800a82c:	657b      	str	r3, [r7, #84]	; 0x54
 800a82e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a832:	460b      	mov	r3, r1
 800a834:	4313      	orrs	r3, r2
 800a836:	d00a      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a838:	4b9e      	ldr	r3, [pc, #632]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a844:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a848:	4a9a      	ldr	r2, [pc, #616]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a84a:	430b      	orrs	r3, r1
 800a84c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a85a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a85c:	2300      	movs	r3, #0
 800a85e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a860:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a864:	460b      	mov	r3, r1
 800a866:	4313      	orrs	r3, r2
 800a868:	d009      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a86a:	4b92      	ldr	r3, [pc, #584]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a86c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a86e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a878:	4a8e      	ldr	r2, [pc, #568]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a87a:	430b      	orrs	r3, r1
 800a87c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a886:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a88a:	643b      	str	r3, [r7, #64]	; 0x40
 800a88c:	2300      	movs	r3, #0
 800a88e:	647b      	str	r3, [r7, #68]	; 0x44
 800a890:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a894:	460b      	mov	r3, r1
 800a896:	4313      	orrs	r3, r2
 800a898:	d00e      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a89a:	4b86      	ldr	r3, [pc, #536]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	4a85      	ldr	r2, [pc, #532]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8a4:	6113      	str	r3, [r2, #16]
 800a8a6:	4b83      	ldr	r3, [pc, #524]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8a8:	6919      	ldr	r1, [r3, #16]
 800a8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a8b2:	4a80      	ldr	r2, [pc, #512]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8b4:	430b      	orrs	r3, r1
 800a8b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a8c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	d009      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a8d4:	4b77      	ldr	r3, [pc, #476]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a8dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e2:	4a74      	ldr	r2, [pc, #464]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a8e4:	430b      	orrs	r3, r1
 800a8e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a8f4:	633b      	str	r3, [r7, #48]	; 0x30
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a8fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a8fe:	460b      	mov	r3, r1
 800a900:	4313      	orrs	r3, r2
 800a902:	d00a      	beq.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a904:	4b6b      	ldr	r3, [pc, #428]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a908:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a914:	4a67      	ldr	r2, [pc, #412]	; (800aab4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a916:	430b      	orrs	r3, r1
 800a918:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	2100      	movs	r1, #0
 800a924:	62b9      	str	r1, [r7, #40]	; 0x28
 800a926:	f003 0301 	and.w	r3, r3, #1
 800a92a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a92c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a930:	460b      	mov	r3, r1
 800a932:	4313      	orrs	r3, r2
 800a934:	d011      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a93a:	3308      	adds	r3, #8
 800a93c:	2100      	movs	r1, #0
 800a93e:	4618      	mov	r0, r3
 800a940:	f001 fa4a 	bl	800bdd8 <RCCEx_PLL2_Config>
 800a944:	4603      	mov	r3, r0
 800a946:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a94a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a956:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a95a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a962:	2100      	movs	r1, #0
 800a964:	6239      	str	r1, [r7, #32]
 800a966:	f003 0302 	and.w	r3, r3, #2
 800a96a:	627b      	str	r3, [r7, #36]	; 0x24
 800a96c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a970:	460b      	mov	r3, r1
 800a972:	4313      	orrs	r3, r2
 800a974:	d011      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a97a:	3308      	adds	r3, #8
 800a97c:	2101      	movs	r1, #1
 800a97e:	4618      	mov	r0, r3
 800a980:	f001 fa2a 	bl	800bdd8 <RCCEx_PLL2_Config>
 800a984:	4603      	mov	r3, r0
 800a986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a98a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d003      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a996:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a99a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	61b9      	str	r1, [r7, #24]
 800a9a6:	f003 0304 	and.w	r3, r3, #4
 800a9aa:	61fb      	str	r3, [r7, #28]
 800a9ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	d011      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ba:	3308      	adds	r3, #8
 800a9bc:	2102      	movs	r1, #2
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f001 fa0a 	bl	800bdd8 <RCCEx_PLL2_Config>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a9ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	6139      	str	r1, [r7, #16]
 800a9e6:	f003 0308 	and.w	r3, r3, #8
 800a9ea:	617b      	str	r3, [r7, #20]
 800a9ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	d011      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fa:	3328      	adds	r3, #40	; 0x28
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f001 fa9c 	bl	800bf3c <RCCEx_PLL3_Config>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800aa0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d003      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aa1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	2100      	movs	r1, #0
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	f003 0310 	and.w	r3, r3, #16
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aa30:	460b      	mov	r3, r1
 800aa32:	4313      	orrs	r3, r2
 800aa34:	d011      	beq.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3a:	3328      	adds	r3, #40	; 0x28
 800aa3c:	2101      	movs	r1, #1
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f001 fa7c 	bl	800bf3c <RCCEx_PLL3_Config>
 800aa44:	4603      	mov	r3, r0
 800aa46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d003      	beq.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aa5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	2100      	movs	r1, #0
 800aa64:	6039      	str	r1, [r7, #0]
 800aa66:	f003 0320 	and.w	r3, r3, #32
 800aa6a:	607b      	str	r3, [r7, #4]
 800aa6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aa70:	460b      	mov	r3, r1
 800aa72:	4313      	orrs	r3, r2
 800aa74:	d011      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa7a:	3328      	adds	r3, #40	; 0x28
 800aa7c:	2102      	movs	r1, #2
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f001 fa5c 	bl	800bf3c <RCCEx_PLL3_Config>
 800aa84:	4603      	mov	r3, r0
 800aa86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aa8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d003      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800aa9a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	e000      	b.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800aaae:	46bd      	mov	sp, r7
 800aab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aab4:	58024400 	.word	0x58024400

0800aab8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b090      	sub	sp, #64	; 0x40
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800aaca:	430b      	orrs	r3, r1
 800aacc:	f040 8094 	bne.w	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800aad0:	4b9e      	ldr	r3, [pc, #632]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aad4:	f003 0307 	and.w	r3, r3, #7
 800aad8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	2b04      	cmp	r3, #4
 800aade:	f200 8087 	bhi.w	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800aae2:	a201      	add	r2, pc, #4	; (adr r2, 800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800aae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae8:	0800aafd 	.word	0x0800aafd
 800aaec:	0800ab25 	.word	0x0800ab25
 800aaf0:	0800ab4d 	.word	0x0800ab4d
 800aaf4:	0800abe9 	.word	0x0800abe9
 800aaf8:	0800ab75 	.word	0x0800ab75
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aafc:	4b93      	ldr	r3, [pc, #588]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab08:	d108      	bne.n	800ab1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f001 f810 	bl	800bb34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab18:	f000 bd45 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab20:	f000 bd41 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab24:	4b89      	ldr	r3, [pc, #548]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab30:	d108      	bne.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab32:	f107 0318 	add.w	r3, r7, #24
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 fd54 	bl	800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab40:	f000 bd31 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab44:	2300      	movs	r3, #0
 800ab46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab48:	f000 bd2d 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab4c:	4b7f      	ldr	r3, [pc, #508]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab58:	d108      	bne.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab5a:	f107 030c 	add.w	r3, r7, #12
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f000 fe94 	bl	800b88c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab68:	f000 bd1d 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab70:	f000 bd19 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab74:	4b75      	ldr	r3, [pc, #468]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab7c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab7e:	4b73      	ldr	r3, [pc, #460]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f003 0304 	and.w	r3, r3, #4
 800ab86:	2b04      	cmp	r3, #4
 800ab88:	d10c      	bne.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ab8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d109      	bne.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab90:	4b6e      	ldr	r3, [pc, #440]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	08db      	lsrs	r3, r3, #3
 800ab96:	f003 0303 	and.w	r3, r3, #3
 800ab9a:	4a6d      	ldr	r2, [pc, #436]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ab9c:	fa22 f303 	lsr.w	r3, r2, r3
 800aba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aba2:	e01f      	b.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aba4:	4b69      	ldr	r3, [pc, #420]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abb0:	d106      	bne.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800abb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abb8:	d102      	bne.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800abba:	4b66      	ldr	r3, [pc, #408]	; (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800abbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abbe:	e011      	b.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abc0:	4b62      	ldr	r3, [pc, #392]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abcc:	d106      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800abce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abd4:	d102      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abd6:	4b60      	ldr	r3, [pc, #384]	; (800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800abd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abda:	e003      	b.n	800abe4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800abe0:	f000 bce1 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abe4:	f000 bcdf 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800abe8:	4b5c      	ldr	r3, [pc, #368]	; (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800abea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abec:	f000 bcdb 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abf4:	f000 bcd7 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800abf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abfc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ac00:	430b      	orrs	r3, r1
 800ac02:	f040 80ad 	bne.w	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ac06:	4b51      	ldr	r3, [pc, #324]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac0a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ac0e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac16:	d056      	beq.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac1e:	f200 8090 	bhi.w	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	2bc0      	cmp	r3, #192	; 0xc0
 800ac26:	f000 8088 	beq.w	800ad3a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	2bc0      	cmp	r3, #192	; 0xc0
 800ac2e:	f200 8088 	bhi.w	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	2b80      	cmp	r3, #128	; 0x80
 800ac36:	d032      	beq.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ac38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3a:	2b80      	cmp	r3, #128	; 0x80
 800ac3c:	f200 8081 	bhi.w	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d003      	beq.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ac46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac48:	2b40      	cmp	r3, #64	; 0x40
 800ac4a:	d014      	beq.n	800ac76 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ac4c:	e079      	b.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac4e:	4b3f      	ldr	r3, [pc, #252]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac5a:	d108      	bne.n	800ac6e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 ff67 	bl	800bb34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac6a:	f000 bc9c 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac72:	f000 bc98 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac76:	4b35      	ldr	r3, [pc, #212]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac82:	d108      	bne.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac84:	f107 0318 	add.w	r3, r7, #24
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f000 fcab 	bl	800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac92:	f000 bc88 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac9a:	f000 bc84 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac9e:	4b2b      	ldr	r3, [pc, #172]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acaa:	d108      	bne.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acac:	f107 030c 	add.w	r3, r7, #12
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 fdeb 	bl	800b88c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acba:	f000 bc74 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acbe:	2300      	movs	r3, #0
 800acc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acc2:	f000 bc70 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acc6:	4b21      	ldr	r3, [pc, #132]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800acce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acd0:	4b1e      	ldr	r3, [pc, #120]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 0304 	and.w	r3, r3, #4
 800acd8:	2b04      	cmp	r3, #4
 800acda:	d10c      	bne.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800acdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d109      	bne.n	800acf6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ace2:	4b1a      	ldr	r3, [pc, #104]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	08db      	lsrs	r3, r3, #3
 800ace8:	f003 0303 	and.w	r3, r3, #3
 800acec:	4a18      	ldr	r2, [pc, #96]	; (800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800acee:	fa22 f303 	lsr.w	r3, r2, r3
 800acf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acf4:	e01f      	b.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acf6:	4b15      	ldr	r3, [pc, #84]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad02:	d106      	bne.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ad04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad0a:	d102      	bne.n	800ad12 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad0c:	4b11      	ldr	r3, [pc, #68]	; (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ad0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad10:	e011      	b.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad12:	4b0e      	ldr	r3, [pc, #56]	; (800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad1e:	d106      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ad20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad26:	d102      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad28:	4b0b      	ldr	r3, [pc, #44]	; (800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ad2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad2c:	e003      	b.n	800ad36 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad32:	f000 bc38 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad36:	f000 bc36 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad3a:	4b08      	ldr	r3, [pc, #32]	; (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ad3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad3e:	f000 bc32 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad46:	f000 bc2e 	b.w	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad4a:	bf00      	nop
 800ad4c:	58024400 	.word	0x58024400
 800ad50:	03d09000 	.word	0x03d09000
 800ad54:	003d0900 	.word	0x003d0900
 800ad58:	017d7840 	.word	0x017d7840
 800ad5c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ad60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad64:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ad68:	430b      	orrs	r3, r1
 800ad6a:	f040 809c 	bne.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ad6e:	4b9e      	ldr	r3, [pc, #632]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad72:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ad76:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ad78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad7e:	d054      	beq.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ad80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad86:	f200 808b 	bhi.w	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad90:	f000 8083 	beq.w	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad9a:	f200 8081 	bhi.w	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ada4:	d02f      	beq.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adac:	d878      	bhi.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800adae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d004      	beq.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800adb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adba:	d012      	beq.n	800ade2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800adbc:	e070      	b.n	800aea0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adbe:	4b8a      	ldr	r3, [pc, #552]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adca:	d107      	bne.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800add0:	4618      	mov	r0, r3
 800add2:	f000 feaf 	bl	800bb34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800add6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adda:	e3e4      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800addc:	2300      	movs	r3, #0
 800adde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ade0:	e3e1      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ade2:	4b81      	ldr	r3, [pc, #516]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800adee:	d107      	bne.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adf0:	f107 0318 	add.w	r3, r7, #24
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 fbf5 	bl	800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800adfa:	69bb      	ldr	r3, [r7, #24]
 800adfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adfe:	e3d2      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae04:	e3cf      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae06:	4b78      	ldr	r3, [pc, #480]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae12:	d107      	bne.n	800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae14:	f107 030c 	add.w	r3, r7, #12
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f000 fd37 	bl	800b88c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae22:	e3c0      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae28:	e3bd      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae2a:	4b6f      	ldr	r3, [pc, #444]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae32:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae34:	4b6c      	ldr	r3, [pc, #432]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f003 0304 	and.w	r3, r3, #4
 800ae3c:	2b04      	cmp	r3, #4
 800ae3e:	d10c      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ae40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d109      	bne.n	800ae5a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae46:	4b68      	ldr	r3, [pc, #416]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	08db      	lsrs	r3, r3, #3
 800ae4c:	f003 0303 	and.w	r3, r3, #3
 800ae50:	4a66      	ldr	r2, [pc, #408]	; (800afec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ae52:	fa22 f303 	lsr.w	r3, r2, r3
 800ae56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae58:	e01e      	b.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae5a:	4b63      	ldr	r3, [pc, #396]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae66:	d106      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ae68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae6e:	d102      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae70:	4b5f      	ldr	r3, [pc, #380]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ae72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae74:	e010      	b.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae76:	4b5c      	ldr	r3, [pc, #368]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae82:	d106      	bne.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ae84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae8a:	d102      	bne.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae8c:	4b59      	ldr	r3, [pc, #356]	; (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ae8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae90:	e002      	b.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ae96:	e386      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae98:	e385      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae9a:	4b57      	ldr	r3, [pc, #348]	; (800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ae9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae9e:	e382      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aea0:	2300      	movs	r3, #0
 800aea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea4:	e37f      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeaa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800aeae:	430b      	orrs	r3, r1
 800aeb0:	f040 80a7 	bne.w	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800aeb4:	4b4c      	ldr	r3, [pc, #304]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aeb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeb8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800aebc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aec4:	d055      	beq.n	800af72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800aec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aecc:	f200 8096 	bhi.w	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aed6:	f000 8084 	beq.w	800afe2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800aeda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aedc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aee0:	f200 808c 	bhi.w	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aeea:	d030      	beq.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aef2:	f200 8083 	bhi.w	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d004      	beq.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af02:	d012      	beq.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800af04:	e07a      	b.n	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af06:	4b38      	ldr	r3, [pc, #224]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af12:	d107      	bne.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 fe0b 	bl	800bb34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af22:	e340      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af24:	2300      	movs	r3, #0
 800af26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af28:	e33d      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af2a:	4b2f      	ldr	r3, [pc, #188]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af36:	d107      	bne.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af38:	f107 0318 	add.w	r3, r7, #24
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 fb51 	bl	800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af46:	e32e      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af48:	2300      	movs	r3, #0
 800af4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af4c:	e32b      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af4e:	4b26      	ldr	r3, [pc, #152]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af5a:	d107      	bne.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af5c:	f107 030c 	add.w	r3, r7, #12
 800af60:	4618      	mov	r0, r3
 800af62:	f000 fc93 	bl	800b88c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af6a:	e31c      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af6c:	2300      	movs	r3, #0
 800af6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af70:	e319      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af72:	4b1d      	ldr	r3, [pc, #116]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800af7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800af7c:	4b1a      	ldr	r3, [pc, #104]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 0304 	and.w	r3, r3, #4
 800af84:	2b04      	cmp	r3, #4
 800af86:	d10c      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800af88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d109      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af8e:	4b16      	ldr	r3, [pc, #88]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	08db      	lsrs	r3, r3, #3
 800af94:	f003 0303 	and.w	r3, r3, #3
 800af98:	4a14      	ldr	r2, [pc, #80]	; (800afec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800af9a:	fa22 f303 	lsr.w	r3, r2, r3
 800af9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afa0:	e01e      	b.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afa2:	4b11      	ldr	r3, [pc, #68]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afae:	d106      	bne.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800afb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afb6:	d102      	bne.n	800afbe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800afb8:	4b0d      	ldr	r3, [pc, #52]	; (800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800afba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afbc:	e010      	b.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afbe:	4b0a      	ldr	r3, [pc, #40]	; (800afe8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afca:	d106      	bne.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800afcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afd2:	d102      	bne.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800afd4:	4b07      	ldr	r3, [pc, #28]	; (800aff4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800afd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afd8:	e002      	b.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800afda:	2300      	movs	r3, #0
 800afdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800afde:	e2e2      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afe0:	e2e1      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800afe2:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800afe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afe6:	e2de      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800afe8:	58024400 	.word	0x58024400
 800afec:	03d09000 	.word	0x03d09000
 800aff0:	003d0900 	.word	0x003d0900
 800aff4:	017d7840 	.word	0x017d7840
 800aff8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800affc:	2300      	movs	r3, #0
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b000:	e2d1      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b002:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b006:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b00a:	430b      	orrs	r3, r1
 800b00c:	f040 809c 	bne.w	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b010:	4b93      	ldr	r3, [pc, #588]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b014:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b018:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b020:	d054      	beq.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b028:	f200 808b 	bhi.w	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b032:	f000 8083 	beq.w	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b03c:	f200 8081 	bhi.w	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b046:	d02f      	beq.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b04e:	d878      	bhi.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b052:	2b00      	cmp	r3, #0
 800b054:	d004      	beq.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b05c:	d012      	beq.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b05e:	e070      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b060:	4b7f      	ldr	r3, [pc, #508]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b06c:	d107      	bne.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b06e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b072:	4618      	mov	r0, r3
 800b074:	f000 fd5e 	bl	800bb34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b07c:	e293      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b082:	e290      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b084:	4b76      	ldr	r3, [pc, #472]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b08c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b090:	d107      	bne.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b092:	f107 0318 	add.w	r3, r7, #24
 800b096:	4618      	mov	r0, r3
 800b098:	f000 faa4 	bl	800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0a0:	e281      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0a6:	e27e      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0a8:	4b6d      	ldr	r3, [pc, #436]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0b4:	d107      	bne.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0b6:	f107 030c 	add.w	r3, r7, #12
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f000 fbe6 	bl	800b88c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0c4:	e26f      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0ca:	e26c      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0cc:	4b64      	ldr	r3, [pc, #400]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b0d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0d6:	4b62      	ldr	r3, [pc, #392]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 0304 	and.w	r3, r3, #4
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	d10c      	bne.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d109      	bne.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0e8:	4b5d      	ldr	r3, [pc, #372]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	08db      	lsrs	r3, r3, #3
 800b0ee:	f003 0303 	and.w	r3, r3, #3
 800b0f2:	4a5c      	ldr	r2, [pc, #368]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b0f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0fa:	e01e      	b.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0fc:	4b58      	ldr	r3, [pc, #352]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b108:	d106      	bne.n	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b10c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b110:	d102      	bne.n	800b118 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b112:	4b55      	ldr	r3, [pc, #340]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b114:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b116:	e010      	b.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b118:	4b51      	ldr	r3, [pc, #324]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b124:	d106      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b12c:	d102      	bne.n	800b134 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b12e:	4b4f      	ldr	r3, [pc, #316]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b130:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b132:	e002      	b.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b138:	e235      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b13a:	e234      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b13c:	4b4c      	ldr	r3, [pc, #304]	; (800b270 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b140:	e231      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b142:	2300      	movs	r3, #0
 800b144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b146:	e22e      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b14c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b150:	430b      	orrs	r3, r1
 800b152:	f040 808f 	bne.w	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b156:	4b42      	ldr	r3, [pc, #264]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b15a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b15e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b162:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b166:	d06b      	beq.n	800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b16e:	d874      	bhi.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b172:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b176:	d056      	beq.n	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b17e:	d86c      	bhi.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b182:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b186:	d03b      	beq.n	800b200 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b18e:	d864      	bhi.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b192:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b196:	d021      	beq.n	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b19e:	d85c      	bhi.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d004      	beq.n	800b1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1ac:	d004      	beq.n	800b1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b1ae:	e054      	b.n	800b25a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b1b0:	f7fe fa0a 	bl	80095c8 <HAL_RCC_GetPCLK1Freq>
 800b1b4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1b6:	e1f6      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1b8:	4b29      	ldr	r3, [pc, #164]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1c4:	d107      	bne.n	800b1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1c6:	f107 0318 	add.w	r3, r7, #24
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 fa0a 	bl	800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1d4:	e1e7      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1da:	e1e4      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1dc:	4b20      	ldr	r3, [pc, #128]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1e8:	d107      	bne.n	800b1fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1ea:	f107 030c 	add.w	r3, r7, #12
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f000 fb4c 	bl	800b88c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1f8:	e1d5      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1fe:	e1d2      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b200:	4b17      	ldr	r3, [pc, #92]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0304 	and.w	r3, r3, #4
 800b208:	2b04      	cmp	r3, #4
 800b20a:	d109      	bne.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b20c:	4b14      	ldr	r3, [pc, #80]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	08db      	lsrs	r3, r3, #3
 800b212:	f003 0303 	and.w	r3, r3, #3
 800b216:	4a13      	ldr	r2, [pc, #76]	; (800b264 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b218:	fa22 f303 	lsr.w	r3, r2, r3
 800b21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b21e:	e1c2      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b220:	2300      	movs	r3, #0
 800b222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b224:	e1bf      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b226:	4b0e      	ldr	r3, [pc, #56]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b22e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b232:	d102      	bne.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b234:	4b0c      	ldr	r3, [pc, #48]	; (800b268 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b236:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b238:	e1b5      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b23e:	e1b2      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b240:	4b07      	ldr	r3, [pc, #28]	; (800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b24c:	d102      	bne.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b24e:	4b07      	ldr	r3, [pc, #28]	; (800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b250:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b252:	e1a8      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b258:	e1a5      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b25a:	2300      	movs	r3, #0
 800b25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b25e:	e1a2      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b260:	58024400 	.word	0x58024400
 800b264:	03d09000 	.word	0x03d09000
 800b268:	003d0900 	.word	0x003d0900
 800b26c:	017d7840 	.word	0x017d7840
 800b270:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b274:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b278:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b27c:	430b      	orrs	r3, r1
 800b27e:	d173      	bne.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b280:	4b9c      	ldr	r3, [pc, #624]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b288:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b290:	d02f      	beq.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b298:	d863      	bhi.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d004      	beq.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2a6:	d012      	beq.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b2a8:	e05b      	b.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2aa:	4b92      	ldr	r3, [pc, #584]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2b6:	d107      	bne.n	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2b8:	f107 0318 	add.w	r3, r7, #24
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 f991 	bl	800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2c6:	e16e      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2cc:	e16b      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2ce:	4b89      	ldr	r3, [pc, #548]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2da:	d107      	bne.n	800b2ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2dc:	f107 030c 	add.w	r3, r7, #12
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 fad3 	bl	800b88c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2ea:	e15c      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2f0:	e159      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2f2:	4b80      	ldr	r3, [pc, #512]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2fc:	4b7d      	ldr	r3, [pc, #500]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 0304 	and.w	r3, r3, #4
 800b304:	2b04      	cmp	r3, #4
 800b306:	d10c      	bne.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d109      	bne.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b30e:	4b79      	ldr	r3, [pc, #484]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	08db      	lsrs	r3, r3, #3
 800b314:	f003 0303 	and.w	r3, r3, #3
 800b318:	4a77      	ldr	r2, [pc, #476]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b31a:	fa22 f303 	lsr.w	r3, r2, r3
 800b31e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b320:	e01e      	b.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b322:	4b74      	ldr	r3, [pc, #464]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b32a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b32e:	d106      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b336:	d102      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b338:	4b70      	ldr	r3, [pc, #448]	; (800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b33a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b33c:	e010      	b.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b33e:	4b6d      	ldr	r3, [pc, #436]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b34a:	d106      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b34e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b352:	d102      	bne.n	800b35a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b354:	4b6a      	ldr	r3, [pc, #424]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b356:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b358:	e002      	b.n	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b35e:	e122      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b360:	e121      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b366:	e11e      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b36c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b370:	430b      	orrs	r3, r1
 800b372:	d133      	bne.n	800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b374:	4b5f      	ldr	r3, [pc, #380]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b37c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b380:	2b00      	cmp	r3, #0
 800b382:	d004      	beq.n	800b38e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b38a:	d012      	beq.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b38c:	e023      	b.n	800b3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b38e:	4b59      	ldr	r3, [pc, #356]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b39a:	d107      	bne.n	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b39c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 fbc7 	bl	800bb34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3aa:	e0fc      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3b0:	e0f9      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3b2:	4b50      	ldr	r3, [pc, #320]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3be:	d107      	bne.n	800b3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3c0:	f107 0318 	add.w	r3, r7, #24
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f000 f90d 	bl	800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ce:	e0ea      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3d4:	e0e7      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3da:	e0e4      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b3dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b3e4:	430b      	orrs	r3, r1
 800b3e6:	f040 808d 	bne.w	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b3ea:	4b42      	ldr	r3, [pc, #264]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b3ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b3f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3fa:	d06b      	beq.n	800b4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b402:	d874      	bhi.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b40a:	d056      	beq.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b412:	d86c      	bhi.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b416:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b41a:	d03b      	beq.n	800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b422:	d864      	bhi.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b42a:	d021      	beq.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b432:	d85c      	bhi.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b436:	2b00      	cmp	r3, #0
 800b438:	d004      	beq.n	800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b440:	d004      	beq.n	800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b442:	e054      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b444:	f000 f8b8 	bl	800b5b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b448:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b44a:	e0ac      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b44c:	4b29      	ldr	r3, [pc, #164]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b458:	d107      	bne.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b45a:	f107 0318 	add.w	r3, r7, #24
 800b45e:	4618      	mov	r0, r3
 800b460:	f000 f8c0 	bl	800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b468:	e09d      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b46e:	e09a      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b470:	4b20      	ldr	r3, [pc, #128]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b47c:	d107      	bne.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b47e:	f107 030c 	add.w	r3, r7, #12
 800b482:	4618      	mov	r0, r3
 800b484:	f000 fa02 	bl	800b88c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b48c:	e08b      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b492:	e088      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b494:	4b17      	ldr	r3, [pc, #92]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0304 	and.w	r3, r3, #4
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d109      	bne.n	800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4a0:	4b14      	ldr	r3, [pc, #80]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	08db      	lsrs	r3, r3, #3
 800b4a6:	f003 0303 	and.w	r3, r3, #3
 800b4aa:	4a13      	ldr	r2, [pc, #76]	; (800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4b2:	e078      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4b8:	e075      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b4ba:	4b0e      	ldr	r3, [pc, #56]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4c6:	d102      	bne.n	800b4ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b4c8:	4b0c      	ldr	r3, [pc, #48]	; (800b4fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4cc:	e06b      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4d2:	e068      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b4d4:	4b07      	ldr	r3, [pc, #28]	; (800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4e0:	d102      	bne.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b4e2:	4b07      	ldr	r3, [pc, #28]	; (800b500 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4e6:	e05e      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4ec:	e05b      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4f2:	e058      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4f4:	58024400 	.word	0x58024400
 800b4f8:	03d09000 	.word	0x03d09000
 800b4fc:	003d0900 	.word	0x003d0900
 800b500:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b504:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b508:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b50c:	430b      	orrs	r3, r1
 800b50e:	d148      	bne.n	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b510:	4b27      	ldr	r3, [pc, #156]	; (800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b518:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b520:	d02a      	beq.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b528:	d838      	bhi.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d004      	beq.n	800b53a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b536:	d00d      	beq.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b538:	e030      	b.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b53a:	4b1d      	ldr	r3, [pc, #116]	; (800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b542:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b546:	d102      	bne.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b548:	4b1a      	ldr	r3, [pc, #104]	; (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b54c:	e02b      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b552:	e028      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b554:	4b16      	ldr	r3, [pc, #88]	; (800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b55c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b560:	d107      	bne.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b566:	4618      	mov	r0, r3
 800b568:	f000 fae4 	bl	800bb34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b570:	e019      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b572:	2300      	movs	r3, #0
 800b574:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b576:	e016      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b578:	4b0d      	ldr	r3, [pc, #52]	; (800b5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b584:	d107      	bne.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b586:	f107 0318 	add.w	r3, r7, #24
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 f82a 	bl	800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b594:	e007      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b59a:	e004      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b59c:	2300      	movs	r3, #0
 800b59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5a0:	e001      	b.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3740      	adds	r7, #64	; 0x40
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	58024400 	.word	0x58024400
 800b5b4:	017d7840 	.word	0x017d7840

0800b5b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b5bc:	f7fd ffd4 	bl	8009568 <HAL_RCC_GetHCLKFreq>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	4b06      	ldr	r3, [pc, #24]	; (800b5dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b5c4:	6a1b      	ldr	r3, [r3, #32]
 800b5c6:	091b      	lsrs	r3, r3, #4
 800b5c8:	f003 0307 	and.w	r3, r3, #7
 800b5cc:	4904      	ldr	r1, [pc, #16]	; (800b5e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b5ce:	5ccb      	ldrb	r3, [r1, r3]
 800b5d0:	f003 031f 	and.w	r3, r3, #31
 800b5d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	58024400 	.word	0x58024400
 800b5e0:	08014660 	.word	0x08014660

0800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b089      	sub	sp, #36	; 0x24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5ec:	4ba1      	ldr	r3, [pc, #644]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f0:	f003 0303 	and.w	r3, r3, #3
 800b5f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b5f6:	4b9f      	ldr	r3, [pc, #636]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fa:	0b1b      	lsrs	r3, r3, #12
 800b5fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b600:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b602:	4b9c      	ldr	r3, [pc, #624]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b606:	091b      	lsrs	r3, r3, #4
 800b608:	f003 0301 	and.w	r3, r3, #1
 800b60c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b60e:	4b99      	ldr	r3, [pc, #612]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b612:	08db      	lsrs	r3, r3, #3
 800b614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b618:	693a      	ldr	r2, [r7, #16]
 800b61a:	fb02 f303 	mul.w	r3, r2, r3
 800b61e:	ee07 3a90 	vmov	s15, r3
 800b622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b626:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f000 8111 	beq.w	800b854 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	2b02      	cmp	r3, #2
 800b636:	f000 8083 	beq.w	800b740 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	f200 80a1 	bhi.w	800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b642:	69bb      	ldr	r3, [r7, #24]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d003      	beq.n	800b650 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d056      	beq.n	800b6fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b64e:	e099      	b.n	800b784 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b650:	4b88      	ldr	r3, [pc, #544]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 0320 	and.w	r3, r3, #32
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d02d      	beq.n	800b6b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b65c:	4b85      	ldr	r3, [pc, #532]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	08db      	lsrs	r3, r3, #3
 800b662:	f003 0303 	and.w	r3, r3, #3
 800b666:	4a84      	ldr	r2, [pc, #528]	; (800b878 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b668:	fa22 f303 	lsr.w	r3, r2, r3
 800b66c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	ee07 3a90 	vmov	s15, r3
 800b674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	ee07 3a90 	vmov	s15, r3
 800b67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b686:	4b7b      	ldr	r3, [pc, #492]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b68e:	ee07 3a90 	vmov	s15, r3
 800b692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b696:	ed97 6a03 	vldr	s12, [r7, #12]
 800b69a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b87c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b69e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b6b6:	e087      	b.n	800b7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	ee07 3a90 	vmov	s15, r3
 800b6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b880 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ca:	4b6a      	ldr	r3, [pc, #424]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6d2:	ee07 3a90 	vmov	s15, r3
 800b6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b87c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6fa:	e065      	b.n	800b7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	ee07 3a90 	vmov	s15, r3
 800b702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b706:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b884 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b70e:	4b59      	ldr	r3, [pc, #356]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b716:	ee07 3a90 	vmov	s15, r3
 800b71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b71e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b722:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b87c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b73a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b73e:	e043      	b.n	800b7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	ee07 3a90 	vmov	s15, r3
 800b746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b74a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b752:	4b48      	ldr	r3, [pc, #288]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b75a:	ee07 3a90 	vmov	s15, r3
 800b75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b762:	ed97 6a03 	vldr	s12, [r7, #12]
 800b766:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b87c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b782:	e021      	b.n	800b7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b884 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b796:	4b37      	ldr	r3, [pc, #220]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b87c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b7c8:	4b2a      	ldr	r3, [pc, #168]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7cc:	0a5b      	lsrs	r3, r3, #9
 800b7ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7d2:	ee07 3a90 	vmov	s15, r3
 800b7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ee:	ee17 2a90 	vmov	r2, s15
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b7f6:	4b1f      	ldr	r3, [pc, #124]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fa:	0c1b      	lsrs	r3, r3, #16
 800b7fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b800:	ee07 3a90 	vmov	s15, r3
 800b804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b80c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b810:	edd7 6a07 	vldr	s13, [r7, #28]
 800b814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b81c:	ee17 2a90 	vmov	r2, s15
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b824:	4b13      	ldr	r3, [pc, #76]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b828:	0e1b      	lsrs	r3, r3, #24
 800b82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b82e:	ee07 3a90 	vmov	s15, r3
 800b832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b83a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b83e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b84a:	ee17 2a90 	vmov	r2, s15
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b852:	e008      	b.n	800b866 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2200      	movs	r2, #0
 800b85e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	609a      	str	r2, [r3, #8]
}
 800b866:	bf00      	nop
 800b868:	3724      	adds	r7, #36	; 0x24
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr
 800b872:	bf00      	nop
 800b874:	58024400 	.word	0x58024400
 800b878:	03d09000 	.word	0x03d09000
 800b87c:	46000000 	.word	0x46000000
 800b880:	4c742400 	.word	0x4c742400
 800b884:	4a742400 	.word	0x4a742400
 800b888:	4bbebc20 	.word	0x4bbebc20

0800b88c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b089      	sub	sp, #36	; 0x24
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b894:	4ba1      	ldr	r3, [pc, #644]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b898:	f003 0303 	and.w	r3, r3, #3
 800b89c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b89e:	4b9f      	ldr	r3, [pc, #636]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8a2:	0d1b      	lsrs	r3, r3, #20
 800b8a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b8aa:	4b9c      	ldr	r3, [pc, #624]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ae:	0a1b      	lsrs	r3, r3, #8
 800b8b0:	f003 0301 	and.w	r3, r3, #1
 800b8b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b8b6:	4b99      	ldr	r3, [pc, #612]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8ba:	08db      	lsrs	r3, r3, #3
 800b8bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	fb02 f303 	mul.w	r3, r2, r3
 800b8c6:	ee07 3a90 	vmov	s15, r3
 800b8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f000 8111 	beq.w	800bafc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	f000 8083 	beq.w	800b9e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	f200 80a1 	bhi.w	800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d003      	beq.n	800b8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d056      	beq.n	800b9a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b8f6:	e099      	b.n	800ba2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8f8:	4b88      	ldr	r3, [pc, #544]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 0320 	and.w	r3, r3, #32
 800b900:	2b00      	cmp	r3, #0
 800b902:	d02d      	beq.n	800b960 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b904:	4b85      	ldr	r3, [pc, #532]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	08db      	lsrs	r3, r3, #3
 800b90a:	f003 0303 	and.w	r3, r3, #3
 800b90e:	4a84      	ldr	r2, [pc, #528]	; (800bb20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b910:	fa22 f303 	lsr.w	r3, r2, r3
 800b914:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	ee07 3a90 	vmov	s15, r3
 800b91c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	ee07 3a90 	vmov	s15, r3
 800b926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b92a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b92e:	4b7b      	ldr	r3, [pc, #492]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b936:	ee07 3a90 	vmov	s15, r3
 800b93a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b93e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b942:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bb24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b94a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b94e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b95a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b95e:	e087      	b.n	800ba70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	ee07 3a90 	vmov	s15, r3
 800b966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bb28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b96e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b972:	4b6a      	ldr	r3, [pc, #424]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b97a:	ee07 3a90 	vmov	s15, r3
 800b97e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b982:	ed97 6a03 	vldr	s12, [r7, #12]
 800b986:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bb24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b98a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b98e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b99a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b99e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9a2:	e065      	b.n	800ba70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	ee07 3a90 	vmov	s15, r3
 800b9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bb2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b9b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9b6:	4b59      	ldr	r3, [pc, #356]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9be:	ee07 3a90 	vmov	s15, r3
 800b9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bb24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9e6:	e043      	b.n	800ba70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	ee07 3a90 	vmov	s15, r3
 800b9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bb30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b9f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9fa:	4b48      	ldr	r3, [pc, #288]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba02:	ee07 3a90 	vmov	s15, r3
 800ba06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bb24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba2a:	e021      	b.n	800ba70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	ee07 3a90 	vmov	s15, r3
 800ba32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bb2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba3e:	4b37      	ldr	r3, [pc, #220]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba46:	ee07 3a90 	vmov	s15, r3
 800ba4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba52:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bb24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ba70:	4b2a      	ldr	r3, [pc, #168]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba74:	0a5b      	lsrs	r3, r3, #9
 800ba76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba7a:	ee07 3a90 	vmov	s15, r3
 800ba7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba96:	ee17 2a90 	vmov	r2, s15
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ba9e:	4b1f      	ldr	r3, [pc, #124]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa2:	0c1b      	lsrs	r3, r3, #16
 800baa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baa8:	ee07 3a90 	vmov	s15, r3
 800baac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bab4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bab8:	edd7 6a07 	vldr	s13, [r7, #28]
 800babc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bac4:	ee17 2a90 	vmov	r2, s15
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bacc:	4b13      	ldr	r3, [pc, #76]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad0:	0e1b      	lsrs	r3, r3, #24
 800bad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bad6:	ee07 3a90 	vmov	s15, r3
 800bada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bae6:	edd7 6a07 	vldr	s13, [r7, #28]
 800baea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baf2:	ee17 2a90 	vmov	r2, s15
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bafa:	e008      	b.n	800bb0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	609a      	str	r2, [r3, #8]
}
 800bb0e:	bf00      	nop
 800bb10:	3724      	adds	r7, #36	; 0x24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	58024400 	.word	0x58024400
 800bb20:	03d09000 	.word	0x03d09000
 800bb24:	46000000 	.word	0x46000000
 800bb28:	4c742400 	.word	0x4c742400
 800bb2c:	4a742400 	.word	0x4a742400
 800bb30:	4bbebc20 	.word	0x4bbebc20

0800bb34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b089      	sub	sp, #36	; 0x24
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb3c:	4ba0      	ldr	r3, [pc, #640]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb40:	f003 0303 	and.w	r3, r3, #3
 800bb44:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bb46:	4b9e      	ldr	r3, [pc, #632]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb4a:	091b      	lsrs	r3, r3, #4
 800bb4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb50:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bb52:	4b9b      	ldr	r3, [pc, #620]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb56:	f003 0301 	and.w	r3, r3, #1
 800bb5a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bb5c:	4b98      	ldr	r3, [pc, #608]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb60:	08db      	lsrs	r3, r3, #3
 800bb62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb66:	693a      	ldr	r2, [r7, #16]
 800bb68:	fb02 f303 	mul.w	r3, r2, r3
 800bb6c:	ee07 3a90 	vmov	s15, r3
 800bb70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb74:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f000 8111 	beq.w	800bda2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	f000 8083 	beq.w	800bc8e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	f200 80a1 	bhi.w	800bcd2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d003      	beq.n	800bb9e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d056      	beq.n	800bc4a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bb9c:	e099      	b.n	800bcd2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb9e:	4b88      	ldr	r3, [pc, #544]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 0320 	and.w	r3, r3, #32
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d02d      	beq.n	800bc06 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bbaa:	4b85      	ldr	r3, [pc, #532]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	08db      	lsrs	r3, r3, #3
 800bbb0:	f003 0303 	and.w	r3, r3, #3
 800bbb4:	4a83      	ldr	r2, [pc, #524]	; (800bdc4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bbb6:	fa22 f303 	lsr.w	r3, r2, r3
 800bbba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	ee07 3a90 	vmov	s15, r3
 800bbc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	ee07 3a90 	vmov	s15, r3
 800bbcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbd4:	4b7a      	ldr	r3, [pc, #488]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbdc:	ee07 3a90 	vmov	s15, r3
 800bbe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbe4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbe8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bdc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc00:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc04:	e087      	b.n	800bd16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	ee07 3a90 	vmov	s15, r3
 800bc0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc10:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bdcc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bc14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc18:	4b69      	ldr	r3, [pc, #420]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc20:	ee07 3a90 	vmov	s15, r3
 800bc24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc28:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc2c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bdc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc48:	e065      	b.n	800bd16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	ee07 3a90 	vmov	s15, r3
 800bc50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc54:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bdd0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bc58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc5c:	4b58      	ldr	r3, [pc, #352]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc64:	ee07 3a90 	vmov	s15, r3
 800bc68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc70:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bdc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bc74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc8c:	e043      	b.n	800bd16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	ee07 3a90 	vmov	s15, r3
 800bc94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc98:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bdd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bc9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bca0:	4b47      	ldr	r3, [pc, #284]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca8:	ee07 3a90 	vmov	s15, r3
 800bcac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcb4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bdc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bccc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcd0:	e021      	b.n	800bd16 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	ee07 3a90 	vmov	s15, r3
 800bcd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcdc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bdcc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bce4:	4b36      	ldr	r3, [pc, #216]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcec:	ee07 3a90 	vmov	s15, r3
 800bcf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcf8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bdc8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd14:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bd16:	4b2a      	ldr	r3, [pc, #168]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd1a:	0a5b      	lsrs	r3, r3, #9
 800bd1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd20:	ee07 3a90 	vmov	s15, r3
 800bd24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd30:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd3c:	ee17 2a90 	vmov	r2, s15
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bd44:	4b1e      	ldr	r3, [pc, #120]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd48:	0c1b      	lsrs	r3, r3, #16
 800bd4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd4e:	ee07 3a90 	vmov	s15, r3
 800bd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd5e:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd6a:	ee17 2a90 	vmov	r2, s15
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bd72:	4b13      	ldr	r3, [pc, #76]	; (800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd76:	0e1b      	lsrs	r3, r3, #24
 800bd78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd7c:	ee07 3a90 	vmov	s15, r3
 800bd80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bd88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bd8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bd90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd98:	ee17 2a90 	vmov	r2, s15
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bda0:	e008      	b.n	800bdb4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	609a      	str	r2, [r3, #8]
}
 800bdb4:	bf00      	nop
 800bdb6:	3724      	adds	r7, #36	; 0x24
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr
 800bdc0:	58024400 	.word	0x58024400
 800bdc4:	03d09000 	.word	0x03d09000
 800bdc8:	46000000 	.word	0x46000000
 800bdcc:	4c742400 	.word	0x4c742400
 800bdd0:	4a742400 	.word	0x4a742400
 800bdd4:	4bbebc20 	.word	0x4bbebc20

0800bdd8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bde6:	4b53      	ldr	r3, [pc, #332]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800bde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdea:	f003 0303 	and.w	r3, r3, #3
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	d101      	bne.n	800bdf6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e099      	b.n	800bf2a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bdf6:	4b4f      	ldr	r3, [pc, #316]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a4e      	ldr	r2, [pc, #312]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800bdfc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be02:	f7f7 f967 	bl	80030d4 <HAL_GetTick>
 800be06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be08:	e008      	b.n	800be1c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800be0a:	f7f7 f963 	bl	80030d4 <HAL_GetTick>
 800be0e:	4602      	mov	r2, r0
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	2b02      	cmp	r3, #2
 800be16:	d901      	bls.n	800be1c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be18:	2303      	movs	r3, #3
 800be1a:	e086      	b.n	800bf2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800be1c:	4b45      	ldr	r3, [pc, #276]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1f0      	bne.n	800be0a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800be28:	4b42      	ldr	r3, [pc, #264]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800be2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	031b      	lsls	r3, r3, #12
 800be36:	493f      	ldr	r1, [pc, #252]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800be38:	4313      	orrs	r3, r2
 800be3a:	628b      	str	r3, [r1, #40]	; 0x28
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	3b01      	subs	r3, #1
 800be42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	3b01      	subs	r3, #1
 800be4c:	025b      	lsls	r3, r3, #9
 800be4e:	b29b      	uxth	r3, r3
 800be50:	431a      	orrs	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	3b01      	subs	r3, #1
 800be58:	041b      	lsls	r3, r3, #16
 800be5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be5e:	431a      	orrs	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	3b01      	subs	r3, #1
 800be66:	061b      	lsls	r3, r3, #24
 800be68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be6c:	4931      	ldr	r1, [pc, #196]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800be6e:	4313      	orrs	r3, r2
 800be70:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800be72:	4b30      	ldr	r3, [pc, #192]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800be74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	695b      	ldr	r3, [r3, #20]
 800be7e:	492d      	ldr	r1, [pc, #180]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800be80:	4313      	orrs	r3, r2
 800be82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800be84:	4b2b      	ldr	r3, [pc, #172]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800be86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be88:	f023 0220 	bic.w	r2, r3, #32
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	699b      	ldr	r3, [r3, #24]
 800be90:	4928      	ldr	r1, [pc, #160]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800be92:	4313      	orrs	r3, r2
 800be94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800be96:	4b27      	ldr	r3, [pc, #156]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800be98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be9a:	4a26      	ldr	r2, [pc, #152]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800be9c:	f023 0310 	bic.w	r3, r3, #16
 800bea0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bea2:	4b24      	ldr	r3, [pc, #144]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800bea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bea6:	4b24      	ldr	r3, [pc, #144]	; (800bf38 <RCCEx_PLL2_Config+0x160>)
 800bea8:	4013      	ands	r3, r2
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	69d2      	ldr	r2, [r2, #28]
 800beae:	00d2      	lsls	r2, r2, #3
 800beb0:	4920      	ldr	r1, [pc, #128]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800beb2:	4313      	orrs	r3, r2
 800beb4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800beb6:	4b1f      	ldr	r3, [pc, #124]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800beb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beba:	4a1e      	ldr	r2, [pc, #120]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800bebc:	f043 0310 	orr.w	r3, r3, #16
 800bec0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d106      	bne.n	800bed6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bec8:	4b1a      	ldr	r3, [pc, #104]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800beca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800becc:	4a19      	ldr	r2, [pc, #100]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800bece:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bed2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bed4:	e00f      	b.n	800bef6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d106      	bne.n	800beea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bedc:	4b15      	ldr	r3, [pc, #84]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800bede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee0:	4a14      	ldr	r2, [pc, #80]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800bee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bee6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bee8:	e005      	b.n	800bef6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800beea:	4b12      	ldr	r3, [pc, #72]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800beec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beee:	4a11      	ldr	r2, [pc, #68]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800bef0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bef4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bef6:	4b0f      	ldr	r3, [pc, #60]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a0e      	ldr	r2, [pc, #56]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800befc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf02:	f7f7 f8e7 	bl	80030d4 <HAL_GetTick>
 800bf06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf08:	e008      	b.n	800bf1c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bf0a:	f7f7 f8e3 	bl	80030d4 <HAL_GetTick>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d901      	bls.n	800bf1c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	e006      	b.n	800bf2a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bf1c:	4b05      	ldr	r3, [pc, #20]	; (800bf34 <RCCEx_PLL2_Config+0x15c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d0f0      	beq.n	800bf0a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bf28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	58024400 	.word	0x58024400
 800bf38:	ffff0007 	.word	0xffff0007

0800bf3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf4a:	4b53      	ldr	r3, [pc, #332]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800bf4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf4e:	f003 0303 	and.w	r3, r3, #3
 800bf52:	2b03      	cmp	r3, #3
 800bf54:	d101      	bne.n	800bf5a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	e099      	b.n	800c08e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bf5a:	4b4f      	ldr	r3, [pc, #316]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a4e      	ldr	r2, [pc, #312]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800bf60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf66:	f7f7 f8b5 	bl	80030d4 <HAL_GetTick>
 800bf6a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf6c:	e008      	b.n	800bf80 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf6e:	f7f7 f8b1 	bl	80030d4 <HAL_GetTick>
 800bf72:	4602      	mov	r2, r0
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	1ad3      	subs	r3, r2, r3
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	d901      	bls.n	800bf80 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bf7c:	2303      	movs	r3, #3
 800bf7e:	e086      	b.n	800c08e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bf80:	4b45      	ldr	r3, [pc, #276]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1f0      	bne.n	800bf6e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bf8c:	4b42      	ldr	r3, [pc, #264]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800bf8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf90:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	051b      	lsls	r3, r3, #20
 800bf9a:	493f      	ldr	r1, [pc, #252]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	628b      	str	r3, [r1, #40]	; 0x28
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	3b01      	subs	r3, #1
 800bfb0:	025b      	lsls	r3, r3, #9
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	431a      	orrs	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	041b      	lsls	r3, r3, #16
 800bfbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bfc2:	431a      	orrs	r2, r3
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	3b01      	subs	r3, #1
 800bfca:	061b      	lsls	r3, r3, #24
 800bfcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bfd0:	4931      	ldr	r1, [pc, #196]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800bfd2:	4313      	orrs	r3, r2
 800bfd4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bfd6:	4b30      	ldr	r3, [pc, #192]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	695b      	ldr	r3, [r3, #20]
 800bfe2:	492d      	ldr	r1, [pc, #180]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bfe8:	4b2b      	ldr	r3, [pc, #172]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800bfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	699b      	ldr	r3, [r3, #24]
 800bff4:	4928      	ldr	r1, [pc, #160]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800bff6:	4313      	orrs	r3, r2
 800bff8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bffa:	4b27      	ldr	r3, [pc, #156]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800bffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffe:	4a26      	ldr	r2, [pc, #152]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c004:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c006:	4b24      	ldr	r3, [pc, #144]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c00a:	4b24      	ldr	r3, [pc, #144]	; (800c09c <RCCEx_PLL3_Config+0x160>)
 800c00c:	4013      	ands	r3, r2
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	69d2      	ldr	r2, [r2, #28]
 800c012:	00d2      	lsls	r2, r2, #3
 800c014:	4920      	ldr	r1, [pc, #128]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c016:	4313      	orrs	r3, r2
 800c018:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c01a:	4b1f      	ldr	r3, [pc, #124]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c01e:	4a1e      	ldr	r2, [pc, #120]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c024:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d106      	bne.n	800c03a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c02c:	4b1a      	ldr	r3, [pc, #104]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	4a19      	ldr	r2, [pc, #100]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c032:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c036:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c038:	e00f      	b.n	800c05a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d106      	bne.n	800c04e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c040:	4b15      	ldr	r3, [pc, #84]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c044:	4a14      	ldr	r2, [pc, #80]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c046:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c04a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c04c:	e005      	b.n	800c05a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c04e:	4b12      	ldr	r3, [pc, #72]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c052:	4a11      	ldr	r2, [pc, #68]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c054:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c058:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c05a:	4b0f      	ldr	r3, [pc, #60]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a0e      	ldr	r2, [pc, #56]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c066:	f7f7 f835 	bl	80030d4 <HAL_GetTick>
 800c06a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c06c:	e008      	b.n	800c080 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c06e:	f7f7 f831 	bl	80030d4 <HAL_GetTick>
 800c072:	4602      	mov	r2, r0
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	1ad3      	subs	r3, r2, r3
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d901      	bls.n	800c080 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c07c:	2303      	movs	r3, #3
 800c07e:	e006      	b.n	800c08e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c080:	4b05      	ldr	r3, [pc, #20]	; (800c098 <RCCEx_PLL3_Config+0x15c>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d0f0      	beq.n	800c06e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	58024400 	.word	0x58024400
 800c09c:	ffff0007 	.word	0xffff0007

0800c0a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d071      	beq.n	800c196 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c0b8:	b2db      	uxtb	r3, r3
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d106      	bne.n	800c0cc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7f5 fe1c 	bl	8001d04 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	f003 0310 	and.w	r3, r3, #16
 800c0de:	2b10      	cmp	r3, #16
 800c0e0:	d050      	beq.n	800c184 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	22ca      	movs	r2, #202	; 0xca
 800c0e8:	625a      	str	r2, [r3, #36]	; 0x24
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	2253      	movs	r2, #83	; 0x53
 800c0f0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f9a0 	bl	800c438 <RTC_EnterInitMode>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d124      	bne.n	800c14c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	6899      	ldr	r1, [r3, #8]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	4b24      	ldr	r3, [pc, #144]	; (800c1a0 <HAL_RTC_Init+0x100>)
 800c10e:	400b      	ands	r3, r1
 800c110:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	6899      	ldr	r1, [r3, #8]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	431a      	orrs	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	431a      	orrs	r2, r3
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	430a      	orrs	r2, r1
 800c12e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	0419      	lsls	r1, r3, #16
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	68da      	ldr	r2, [r3, #12]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	430a      	orrs	r2, r1
 800c140:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 f9ac 	bl	800c4a0 <RTC_ExitInitMode>
 800c148:	4603      	mov	r3, r0
 800c14a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c14c:	7bfb      	ldrb	r3, [r7, #15]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d113      	bne.n	800c17a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f022 0203 	bic.w	r2, r2, #3
 800c160:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	69da      	ldr	r2, [r3, #28]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	695b      	ldr	r3, [r3, #20]
 800c170:	431a      	orrs	r2, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	430a      	orrs	r2, r1
 800c178:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	22ff      	movs	r2, #255	; 0xff
 800c180:	625a      	str	r2, [r3, #36]	; 0x24
 800c182:	e001      	b.n	800c188 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c184:	2300      	movs	r3, #0
 800c186:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c188:	7bfb      	ldrb	r3, [r7, #15]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d103      	bne.n	800c196 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c196:	7bfb      	ldrb	r3, [r7, #15]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	ff8fffbf 	.word	0xff8fffbf

0800c1a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c1a4:	b590      	push	{r4, r7, lr}
 800c1a6:	b087      	sub	sp, #28
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d101      	bne.n	800c1be <HAL_RTC_SetTime+0x1a>
 800c1ba:	2302      	movs	r3, #2
 800c1bc:	e089      	b.n	800c2d2 <HAL_RTC_SetTime+0x12e>
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2201      	movs	r2, #1
 800c1c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2202      	movs	r2, #2
 800c1ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	22ca      	movs	r2, #202	; 0xca
 800c1d4:	625a      	str	r2, [r3, #36]	; 0x24
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2253      	movs	r2, #83	; 0x53
 800c1dc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f000 f92a 	bl	800c438 <RTC_EnterInitMode>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c1e8:	7cfb      	ldrb	r3, [r7, #19]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d161      	bne.n	800c2b2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d126      	bne.n	800c242 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d102      	bne.n	800c208 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	2200      	movs	r2, #0
 800c206:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f000 f985 	bl	800c51c <RTC_ByteToBcd2>
 800c212:	4603      	mov	r3, r0
 800c214:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	785b      	ldrb	r3, [r3, #1]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f000 f97e 	bl	800c51c <RTC_ByteToBcd2>
 800c220:	4603      	mov	r3, r0
 800c222:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c224:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	789b      	ldrb	r3, [r3, #2]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 f976 	bl	800c51c <RTC_ByteToBcd2>
 800c230:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c232:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	78db      	ldrb	r3, [r3, #3]
 800c23a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c23c:	4313      	orrs	r3, r2
 800c23e:	617b      	str	r3, [r7, #20]
 800c240:	e018      	b.n	800c274 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d102      	bne.n	800c256 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	2200      	movs	r2, #0
 800c254:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	785b      	ldrb	r3, [r3, #1]
 800c260:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c262:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c268:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	78db      	ldrb	r3, [r3, #3]
 800c26e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c270:	4313      	orrs	r3, r2
 800c272:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	6979      	ldr	r1, [r7, #20]
 800c27a:	4b18      	ldr	r3, [pc, #96]	; (800c2dc <HAL_RTC_SetTime+0x138>)
 800c27c:	400b      	ands	r3, r1
 800c27e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	689a      	ldr	r2, [r3, #8]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c28e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	6899      	ldr	r1, [r3, #8]
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	68da      	ldr	r2, [r3, #12]
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	691b      	ldr	r3, [r3, #16]
 800c29e:	431a      	orrs	r2, r3
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	430a      	orrs	r2, r1
 800c2a6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c2a8:	68f8      	ldr	r0, [r7, #12]
 800c2aa:	f000 f8f9 	bl	800c4a0 <RTC_ExitInitMode>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	22ff      	movs	r2, #255	; 0xff
 800c2b8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c2ba:	7cfb      	ldrb	r3, [r7, #19]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d103      	bne.n	800c2c8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c2d0:	7cfb      	ldrb	r3, [r7, #19]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	371c      	adds	r7, #28
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd90      	pop	{r4, r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	007f7f7f 	.word	0x007f7f7f

0800c2e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c2e0:	b590      	push	{r4, r7, lr}
 800c2e2:	b087      	sub	sp, #28
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d101      	bne.n	800c2fa <HAL_RTC_SetDate+0x1a>
 800c2f6:	2302      	movs	r3, #2
 800c2f8:	e073      	b.n	800c3e2 <HAL_RTC_SetDate+0x102>
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2202      	movs	r2, #2
 800c306:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d10e      	bne.n	800c32e <HAL_RTC_SetDate+0x4e>
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	785b      	ldrb	r3, [r3, #1]
 800c314:	f003 0310 	and.w	r3, r3, #16
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d008      	beq.n	800c32e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	785b      	ldrb	r3, [r3, #1]
 800c320:	f023 0310 	bic.w	r3, r3, #16
 800c324:	b2db      	uxtb	r3, r3
 800c326:	330a      	adds	r3, #10
 800c328:	b2da      	uxtb	r2, r3
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d11c      	bne.n	800c36e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	78db      	ldrb	r3, [r3, #3]
 800c338:	4618      	mov	r0, r3
 800c33a:	f000 f8ef 	bl	800c51c <RTC_ByteToBcd2>
 800c33e:	4603      	mov	r3, r0
 800c340:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	785b      	ldrb	r3, [r3, #1]
 800c346:	4618      	mov	r0, r3
 800c348:	f000 f8e8 	bl	800c51c <RTC_ByteToBcd2>
 800c34c:	4603      	mov	r3, r0
 800c34e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c350:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	789b      	ldrb	r3, [r3, #2]
 800c356:	4618      	mov	r0, r3
 800c358:	f000 f8e0 	bl	800c51c <RTC_ByteToBcd2>
 800c35c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c35e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c368:	4313      	orrs	r3, r2
 800c36a:	617b      	str	r3, [r7, #20]
 800c36c:	e00e      	b.n	800c38c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	78db      	ldrb	r3, [r3, #3]
 800c372:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	785b      	ldrb	r3, [r3, #1]
 800c378:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c37a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c37c:	68ba      	ldr	r2, [r7, #8]
 800c37e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c380:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c388:	4313      	orrs	r3, r2
 800c38a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	22ca      	movs	r2, #202	; 0xca
 800c392:	625a      	str	r2, [r3, #36]	; 0x24
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2253      	movs	r2, #83	; 0x53
 800c39a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f000 f84b 	bl	800c438 <RTC_EnterInitMode>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c3a6:	7cfb      	ldrb	r3, [r7, #19]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10a      	bne.n	800c3c2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	6979      	ldr	r1, [r7, #20]
 800c3b2:	4b0e      	ldr	r3, [pc, #56]	; (800c3ec <HAL_RTC_SetDate+0x10c>)
 800c3b4:	400b      	ands	r3, r1
 800c3b6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f000 f871 	bl	800c4a0 <RTC_ExitInitMode>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	22ff      	movs	r2, #255	; 0xff
 800c3c8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c3ca:	7cfb      	ldrb	r3, [r7, #19]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d103      	bne.n	800c3d8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c3e0:	7cfb      	ldrb	r3, [r7, #19]


}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	371c      	adds	r7, #28
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd90      	pop	{r4, r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	00ffff3f 	.word	0x00ffff3f

0800c3f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a0d      	ldr	r2, [pc, #52]	; (800c434 <HAL_RTC_WaitForSynchro+0x44>)
 800c3fe:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c400:	f7f6 fe68 	bl	80030d4 <HAL_GetTick>
 800c404:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c406:	e009      	b.n	800c41c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c408:	f7f6 fe64 	bl	80030d4 <HAL_GetTick>
 800c40c:	4602      	mov	r2, r0
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c416:	d901      	bls.n	800c41c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c418:	2303      	movs	r3, #3
 800c41a:	e007      	b.n	800c42c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	f003 0320 	and.w	r3, r3, #32
 800c426:	2b00      	cmp	r3, #0
 800c428:	d0ee      	beq.n	800c408 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c42a:	2300      	movs	r3, #0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3710      	adds	r7, #16
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}
 800c434:	0003ff5f 	.word	0x0003ff5f

0800c438 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c440:	2300      	movs	r3, #0
 800c442:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d120      	bne.n	800c494 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c45a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c45c:	f7f6 fe3a 	bl	80030d4 <HAL_GetTick>
 800c460:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c462:	e00d      	b.n	800c480 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c464:	f7f6 fe36 	bl	80030d4 <HAL_GetTick>
 800c468:	4602      	mov	r2, r0
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c472:	d905      	bls.n	800c480 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c474:	2303      	movs	r3, #3
 800c476:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2203      	movs	r2, #3
 800c47c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d102      	bne.n	800c494 <RTC_EnterInitMode+0x5c>
 800c48e:	7bfb      	ldrb	r3, [r7, #15]
 800c490:	2b03      	cmp	r3, #3
 800c492:	d1e7      	bne.n	800c464 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800c494:	7bfb      	ldrb	r3, [r7, #15]
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
	...

0800c4a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c4ac:	4b1a      	ldr	r3, [pc, #104]	; (800c518 <RTC_ExitInitMode+0x78>)
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	4a19      	ldr	r2, [pc, #100]	; (800c518 <RTC_ExitInitMode+0x78>)
 800c4b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4b6:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c4b8:	4b17      	ldr	r3, [pc, #92]	; (800c518 <RTC_ExitInitMode+0x78>)
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	f003 0320 	and.w	r3, r3, #32
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10c      	bne.n	800c4de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f7ff ff93 	bl	800c3f0 <HAL_RTC_WaitForSynchro>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d01e      	beq.n	800c50e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2203      	movs	r2, #3
 800c4d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	73fb      	strb	r3, [r7, #15]
 800c4dc:	e017      	b.n	800c50e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c4de:	4b0e      	ldr	r3, [pc, #56]	; (800c518 <RTC_ExitInitMode+0x78>)
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	4a0d      	ldr	r2, [pc, #52]	; (800c518 <RTC_ExitInitMode+0x78>)
 800c4e4:	f023 0320 	bic.w	r3, r3, #32
 800c4e8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f7ff ff80 	bl	800c3f0 <HAL_RTC_WaitForSynchro>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d005      	beq.n	800c502 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2203      	movs	r2, #3
 800c4fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c4fe:	2303      	movs	r3, #3
 800c500:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c502:	4b05      	ldr	r3, [pc, #20]	; (800c518 <RTC_ExitInitMode+0x78>)
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	4a04      	ldr	r2, [pc, #16]	; (800c518 <RTC_ExitInitMode+0x78>)
 800c508:	f043 0320 	orr.w	r3, r3, #32
 800c50c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	58004000 	.word	0x58004000

0800c51c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c526:	2300      	movs	r3, #0
 800c528:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c52a:	79fb      	ldrb	r3, [r7, #7]
 800c52c:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c52e:	e005      	b.n	800c53c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	3301      	adds	r3, #1
 800c534:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c536:	7afb      	ldrb	r3, [r7, #11]
 800c538:	3b0a      	subs	r3, #10
 800c53a:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c53c:	7afb      	ldrb	r3, [r7, #11]
 800c53e:	2b09      	cmp	r3, #9
 800c540:	d8f6      	bhi.n	800c530 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	b2db      	uxtb	r3, r3
 800c546:	011b      	lsls	r3, r3, #4
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	7afb      	ldrb	r3, [r7, #11]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	b2db      	uxtb	r3, r3
}
 800c550:	4618      	mov	r0, r3
 800c552:	3714      	adds	r7, #20
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d101      	bne.n	800c56e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c56a:	2301      	movs	r3, #1
 800c56c:	e10f      	b.n	800c78e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a87      	ldr	r2, [pc, #540]	; (800c798 <HAL_SPI_Init+0x23c>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d00f      	beq.n	800c59e <HAL_SPI_Init+0x42>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a86      	ldr	r2, [pc, #536]	; (800c79c <HAL_SPI_Init+0x240>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d00a      	beq.n	800c59e <HAL_SPI_Init+0x42>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a84      	ldr	r2, [pc, #528]	; (800c7a0 <HAL_SPI_Init+0x244>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d005      	beq.n	800c59e <HAL_SPI_Init+0x42>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	2b0f      	cmp	r3, #15
 800c598:	d901      	bls.n	800c59e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	e0f7      	b.n	800c78e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f900 	bl	800c7a4 <SPI_GetPacketSize>
 800c5a4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a7b      	ldr	r2, [pc, #492]	; (800c798 <HAL_SPI_Init+0x23c>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d00c      	beq.n	800c5ca <HAL_SPI_Init+0x6e>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a79      	ldr	r2, [pc, #484]	; (800c79c <HAL_SPI_Init+0x240>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d007      	beq.n	800c5ca <HAL_SPI_Init+0x6e>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a78      	ldr	r2, [pc, #480]	; (800c7a0 <HAL_SPI_Init+0x244>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d002      	beq.n	800c5ca <HAL_SPI_Init+0x6e>
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2b08      	cmp	r3, #8
 800c5c8:	d811      	bhi.n	800c5ee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c5ce:	4a72      	ldr	r2, [pc, #456]	; (800c798 <HAL_SPI_Init+0x23c>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d009      	beq.n	800c5e8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a70      	ldr	r2, [pc, #448]	; (800c79c <HAL_SPI_Init+0x240>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d004      	beq.n	800c5e8 <HAL_SPI_Init+0x8c>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a6f      	ldr	r2, [pc, #444]	; (800c7a0 <HAL_SPI_Init+0x244>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d104      	bne.n	800c5f2 <HAL_SPI_Init+0x96>
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2b10      	cmp	r3, #16
 800c5ec:	d901      	bls.n	800c5f2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e0cd      	b.n	800c78e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c5f8:	b2db      	uxtb	r3, r3
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d106      	bne.n	800c60c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2200      	movs	r2, #0
 800c602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7f5 fca0 	bl	8001f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2202      	movs	r2, #2
 800c610:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f022 0201 	bic.w	r2, r2, #1
 800c622:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c62e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	699b      	ldr	r3, [r3, #24]
 800c634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c638:	d119      	bne.n	800c66e <HAL_SPI_Init+0x112>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c642:	d103      	bne.n	800c64c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d008      	beq.n	800c65e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c650:	2b00      	cmp	r3, #0
 800c652:	d10c      	bne.n	800c66e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c65c:	d107      	bne.n	800c66e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c66c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00f      	beq.n	800c69a <HAL_SPI_Init+0x13e>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	2b06      	cmp	r3, #6
 800c680:	d90b      	bls.n	800c69a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	430a      	orrs	r2, r1
 800c696:	601a      	str	r2, [r3, #0]
 800c698:	e007      	b.n	800c6aa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c6a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	69da      	ldr	r2, [r3, #28]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b2:	431a      	orrs	r2, r3
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	431a      	orrs	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6bc:	ea42 0103 	orr.w	r1, r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68da      	ldr	r2, [r3, #12]
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	430a      	orrs	r2, r1
 800c6ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d4:	431a      	orrs	r2, r3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6da:	431a      	orrs	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	699b      	ldr	r3, [r3, #24]
 800c6e0:	431a      	orrs	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	431a      	orrs	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	695b      	ldr	r3, [r3, #20]
 800c6ec:	431a      	orrs	r2, r3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6a1b      	ldr	r3, [r3, #32]
 800c6f2:	431a      	orrs	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	431a      	orrs	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6fe:	431a      	orrs	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	431a      	orrs	r2, r3
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c70a:	ea42 0103 	orr.w	r1, r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	430a      	orrs	r2, r1
 800c718:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	685b      	ldr	r3, [r3, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d113      	bne.n	800c74a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c734:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c748:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f022 0201 	bic.w	r2, r2, #1
 800c758:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00a      	beq.n	800c77c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	430a      	orrs	r2, r1
 800c77a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	40013000 	.word	0x40013000
 800c79c:	40003800 	.word	0x40003800
 800c7a0:	40003c00 	.word	0x40003c00

0800c7a4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7b0:	095b      	lsrs	r3, r3, #5
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	3307      	adds	r3, #7
 800c7c2:	08db      	lsrs	r3, r3, #3
 800c7c4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	fb02 f303 	mul.w	r3, r2, r3
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3714      	adds	r7, #20
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr

0800c7da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b082      	sub	sp, #8
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d101      	bne.n	800c7ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	e049      	b.n	800c880 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d106      	bne.n	800c806 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7f6 f841 	bl	8002888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2202      	movs	r2, #2
 800c80a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3304      	adds	r3, #4
 800c816:	4619      	mov	r1, r3
 800c818:	4610      	mov	r0, r2
 800c81a:	f000 fe87 	bl	800d52c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2201      	movs	r2, #1
 800c822:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2201      	movs	r2, #1
 800c82a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2201      	movs	r2, #1
 800c832:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2201      	movs	r2, #1
 800c842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2201      	movs	r2, #1
 800c86a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2201      	movs	r2, #1
 800c87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c87e:	2300      	movs	r3, #0
}
 800c880:	4618      	mov	r0, r3
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d001      	beq.n	800c8a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c89c:	2301      	movs	r3, #1
 800c89e:	e054      	b.n	800c94a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2202      	movs	r2, #2
 800c8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68da      	ldr	r2, [r3, #12]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f042 0201 	orr.w	r2, r2, #1
 800c8b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a26      	ldr	r2, [pc, #152]	; (800c958 <HAL_TIM_Base_Start_IT+0xd0>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d022      	beq.n	800c908 <HAL_TIM_Base_Start_IT+0x80>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8ca:	d01d      	beq.n	800c908 <HAL_TIM_Base_Start_IT+0x80>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a22      	ldr	r2, [pc, #136]	; (800c95c <HAL_TIM_Base_Start_IT+0xd4>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d018      	beq.n	800c908 <HAL_TIM_Base_Start_IT+0x80>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	4a21      	ldr	r2, [pc, #132]	; (800c960 <HAL_TIM_Base_Start_IT+0xd8>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d013      	beq.n	800c908 <HAL_TIM_Base_Start_IT+0x80>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	4a1f      	ldr	r2, [pc, #124]	; (800c964 <HAL_TIM_Base_Start_IT+0xdc>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d00e      	beq.n	800c908 <HAL_TIM_Base_Start_IT+0x80>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a1e      	ldr	r2, [pc, #120]	; (800c968 <HAL_TIM_Base_Start_IT+0xe0>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d009      	beq.n	800c908 <HAL_TIM_Base_Start_IT+0x80>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a1c      	ldr	r2, [pc, #112]	; (800c96c <HAL_TIM_Base_Start_IT+0xe4>)
 800c8fa:	4293      	cmp	r3, r2
 800c8fc:	d004      	beq.n	800c908 <HAL_TIM_Base_Start_IT+0x80>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	4a1b      	ldr	r2, [pc, #108]	; (800c970 <HAL_TIM_Base_Start_IT+0xe8>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d115      	bne.n	800c934 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	689a      	ldr	r2, [r3, #8]
 800c90e:	4b19      	ldr	r3, [pc, #100]	; (800c974 <HAL_TIM_Base_Start_IT+0xec>)
 800c910:	4013      	ands	r3, r2
 800c912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b06      	cmp	r3, #6
 800c918:	d015      	beq.n	800c946 <HAL_TIM_Base_Start_IT+0xbe>
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c920:	d011      	beq.n	800c946 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f042 0201 	orr.w	r2, r2, #1
 800c930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c932:	e008      	b.n	800c946 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f042 0201 	orr.w	r2, r2, #1
 800c942:	601a      	str	r2, [r3, #0]
 800c944:	e000      	b.n	800c948 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c946:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3714      	adds	r7, #20
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	40010000 	.word	0x40010000
 800c95c:	40000400 	.word	0x40000400
 800c960:	40000800 	.word	0x40000800
 800c964:	40000c00 	.word	0x40000c00
 800c968:	40010400 	.word	0x40010400
 800c96c:	40001800 	.word	0x40001800
 800c970:	40014000 	.word	0x40014000
 800c974:	00010007 	.word	0x00010007

0800c978 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c982:	2300      	movs	r3, #0
 800c984:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d109      	bne.n	800c9a0 <HAL_TIM_OC_Start_IT+0x28>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c992:	b2db      	uxtb	r3, r3
 800c994:	2b01      	cmp	r3, #1
 800c996:	bf14      	ite	ne
 800c998:	2301      	movne	r3, #1
 800c99a:	2300      	moveq	r3, #0
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	e03c      	b.n	800ca1a <HAL_TIM_OC_Start_IT+0xa2>
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	2b04      	cmp	r3, #4
 800c9a4:	d109      	bne.n	800c9ba <HAL_TIM_OC_Start_IT+0x42>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	bf14      	ite	ne
 800c9b2:	2301      	movne	r3, #1
 800c9b4:	2300      	moveq	r3, #0
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	e02f      	b.n	800ca1a <HAL_TIM_OC_Start_IT+0xa2>
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	2b08      	cmp	r3, #8
 800c9be:	d109      	bne.n	800c9d4 <HAL_TIM_OC_Start_IT+0x5c>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c9c6:	b2db      	uxtb	r3, r3
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	bf14      	ite	ne
 800c9cc:	2301      	movne	r3, #1
 800c9ce:	2300      	moveq	r3, #0
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	e022      	b.n	800ca1a <HAL_TIM_OC_Start_IT+0xa2>
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	2b0c      	cmp	r3, #12
 800c9d8:	d109      	bne.n	800c9ee <HAL_TIM_OC_Start_IT+0x76>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	bf14      	ite	ne
 800c9e6:	2301      	movne	r3, #1
 800c9e8:	2300      	moveq	r3, #0
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	e015      	b.n	800ca1a <HAL_TIM_OC_Start_IT+0xa2>
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	2b10      	cmp	r3, #16
 800c9f2:	d109      	bne.n	800ca08 <HAL_TIM_OC_Start_IT+0x90>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	bf14      	ite	ne
 800ca00:	2301      	movne	r3, #1
 800ca02:	2300      	moveq	r3, #0
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	e008      	b.n	800ca1a <HAL_TIM_OC_Start_IT+0xa2>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	bf14      	ite	ne
 800ca14:	2301      	movne	r3, #1
 800ca16:	2300      	moveq	r3, #0
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d001      	beq.n	800ca22 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e0ec      	b.n	800cbfc <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d104      	bne.n	800ca32 <HAL_TIM_OC_Start_IT+0xba>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2202      	movs	r2, #2
 800ca2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca30:	e023      	b.n	800ca7a <HAL_TIM_OC_Start_IT+0x102>
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	2b04      	cmp	r3, #4
 800ca36:	d104      	bne.n	800ca42 <HAL_TIM_OC_Start_IT+0xca>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2202      	movs	r2, #2
 800ca3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca40:	e01b      	b.n	800ca7a <HAL_TIM_OC_Start_IT+0x102>
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2b08      	cmp	r3, #8
 800ca46:	d104      	bne.n	800ca52 <HAL_TIM_OC_Start_IT+0xda>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2202      	movs	r2, #2
 800ca4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca50:	e013      	b.n	800ca7a <HAL_TIM_OC_Start_IT+0x102>
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	2b0c      	cmp	r3, #12
 800ca56:	d104      	bne.n	800ca62 <HAL_TIM_OC_Start_IT+0xea>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca60:	e00b      	b.n	800ca7a <HAL_TIM_OC_Start_IT+0x102>
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	2b10      	cmp	r3, #16
 800ca66:	d104      	bne.n	800ca72 <HAL_TIM_OC_Start_IT+0xfa>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2202      	movs	r2, #2
 800ca6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca70:	e003      	b.n	800ca7a <HAL_TIM_OC_Start_IT+0x102>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2202      	movs	r2, #2
 800ca76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2b0c      	cmp	r3, #12
 800ca7e:	d841      	bhi.n	800cb04 <HAL_TIM_OC_Start_IT+0x18c>
 800ca80:	a201      	add	r2, pc, #4	; (adr r2, 800ca88 <HAL_TIM_OC_Start_IT+0x110>)
 800ca82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca86:	bf00      	nop
 800ca88:	0800cabd 	.word	0x0800cabd
 800ca8c:	0800cb05 	.word	0x0800cb05
 800ca90:	0800cb05 	.word	0x0800cb05
 800ca94:	0800cb05 	.word	0x0800cb05
 800ca98:	0800cacf 	.word	0x0800cacf
 800ca9c:	0800cb05 	.word	0x0800cb05
 800caa0:	0800cb05 	.word	0x0800cb05
 800caa4:	0800cb05 	.word	0x0800cb05
 800caa8:	0800cae1 	.word	0x0800cae1
 800caac:	0800cb05 	.word	0x0800cb05
 800cab0:	0800cb05 	.word	0x0800cb05
 800cab4:	0800cb05 	.word	0x0800cb05
 800cab8:	0800caf3 	.word	0x0800caf3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	68da      	ldr	r2, [r3, #12]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f042 0202 	orr.w	r2, r2, #2
 800caca:	60da      	str	r2, [r3, #12]
      break;
 800cacc:	e01d      	b.n	800cb0a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	68da      	ldr	r2, [r3, #12]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f042 0204 	orr.w	r2, r2, #4
 800cadc:	60da      	str	r2, [r3, #12]
      break;
 800cade:	e014      	b.n	800cb0a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68da      	ldr	r2, [r3, #12]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f042 0208 	orr.w	r2, r2, #8
 800caee:	60da      	str	r2, [r3, #12]
      break;
 800caf0:	e00b      	b.n	800cb0a <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68da      	ldr	r2, [r3, #12]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f042 0210 	orr.w	r2, r2, #16
 800cb00:	60da      	str	r2, [r3, #12]
      break;
 800cb02:	e002      	b.n	800cb0a <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cb04:	2301      	movs	r3, #1
 800cb06:	73fb      	strb	r3, [r7, #15]
      break;
 800cb08:	bf00      	nop
  }

  if (status == HAL_OK)
 800cb0a:	7bfb      	ldrb	r3, [r7, #15]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d174      	bne.n	800cbfa <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	2201      	movs	r2, #1
 800cb16:	6839      	ldr	r1, [r7, #0]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f001 f921 	bl	800dd60 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4a38      	ldr	r2, [pc, #224]	; (800cc04 <HAL_TIM_OC_Start_IT+0x28c>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d013      	beq.n	800cb50 <HAL_TIM_OC_Start_IT+0x1d8>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a36      	ldr	r2, [pc, #216]	; (800cc08 <HAL_TIM_OC_Start_IT+0x290>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d00e      	beq.n	800cb50 <HAL_TIM_OC_Start_IT+0x1d8>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a35      	ldr	r2, [pc, #212]	; (800cc0c <HAL_TIM_OC_Start_IT+0x294>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d009      	beq.n	800cb50 <HAL_TIM_OC_Start_IT+0x1d8>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a33      	ldr	r2, [pc, #204]	; (800cc10 <HAL_TIM_OC_Start_IT+0x298>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d004      	beq.n	800cb50 <HAL_TIM_OC_Start_IT+0x1d8>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4a32      	ldr	r2, [pc, #200]	; (800cc14 <HAL_TIM_OC_Start_IT+0x29c>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d101      	bne.n	800cb54 <HAL_TIM_OC_Start_IT+0x1dc>
 800cb50:	2301      	movs	r3, #1
 800cb52:	e000      	b.n	800cb56 <HAL_TIM_OC_Start_IT+0x1de>
 800cb54:	2300      	movs	r3, #0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d007      	beq.n	800cb6a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4a25      	ldr	r2, [pc, #148]	; (800cc04 <HAL_TIM_OC_Start_IT+0x28c>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d022      	beq.n	800cbba <HAL_TIM_OC_Start_IT+0x242>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb7c:	d01d      	beq.n	800cbba <HAL_TIM_OC_Start_IT+0x242>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a25      	ldr	r2, [pc, #148]	; (800cc18 <HAL_TIM_OC_Start_IT+0x2a0>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d018      	beq.n	800cbba <HAL_TIM_OC_Start_IT+0x242>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a23      	ldr	r2, [pc, #140]	; (800cc1c <HAL_TIM_OC_Start_IT+0x2a4>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d013      	beq.n	800cbba <HAL_TIM_OC_Start_IT+0x242>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a22      	ldr	r2, [pc, #136]	; (800cc20 <HAL_TIM_OC_Start_IT+0x2a8>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d00e      	beq.n	800cbba <HAL_TIM_OC_Start_IT+0x242>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a19      	ldr	r2, [pc, #100]	; (800cc08 <HAL_TIM_OC_Start_IT+0x290>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d009      	beq.n	800cbba <HAL_TIM_OC_Start_IT+0x242>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a1e      	ldr	r2, [pc, #120]	; (800cc24 <HAL_TIM_OC_Start_IT+0x2ac>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d004      	beq.n	800cbba <HAL_TIM_OC_Start_IT+0x242>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a15      	ldr	r2, [pc, #84]	; (800cc0c <HAL_TIM_OC_Start_IT+0x294>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d115      	bne.n	800cbe6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	689a      	ldr	r2, [r3, #8]
 800cbc0:	4b19      	ldr	r3, [pc, #100]	; (800cc28 <HAL_TIM_OC_Start_IT+0x2b0>)
 800cbc2:	4013      	ands	r3, r2
 800cbc4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	2b06      	cmp	r3, #6
 800cbca:	d015      	beq.n	800cbf8 <HAL_TIM_OC_Start_IT+0x280>
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbd2:	d011      	beq.n	800cbf8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f042 0201 	orr.w	r2, r2, #1
 800cbe2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbe4:	e008      	b.n	800cbf8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	681a      	ldr	r2, [r3, #0]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f042 0201 	orr.w	r2, r2, #1
 800cbf4:	601a      	str	r2, [r3, #0]
 800cbf6:	e000      	b.n	800cbfa <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cbf8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	40010000 	.word	0x40010000
 800cc08:	40010400 	.word	0x40010400
 800cc0c:	40014000 	.word	0x40014000
 800cc10:	40014400 	.word	0x40014400
 800cc14:	40014800 	.word	0x40014800
 800cc18:	40000400 	.word	0x40000400
 800cc1c:	40000800 	.word	0x40000800
 800cc20:	40000c00 	.word	0x40000c00
 800cc24:	40001800 	.word	0x40001800
 800cc28:	00010007 	.word	0x00010007

0800cc2c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	2b0c      	cmp	r3, #12
 800cc3e:	d841      	bhi.n	800ccc4 <HAL_TIM_OC_Stop_IT+0x98>
 800cc40:	a201      	add	r2, pc, #4	; (adr r2, 800cc48 <HAL_TIM_OC_Stop_IT+0x1c>)
 800cc42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc46:	bf00      	nop
 800cc48:	0800cc7d 	.word	0x0800cc7d
 800cc4c:	0800ccc5 	.word	0x0800ccc5
 800cc50:	0800ccc5 	.word	0x0800ccc5
 800cc54:	0800ccc5 	.word	0x0800ccc5
 800cc58:	0800cc8f 	.word	0x0800cc8f
 800cc5c:	0800ccc5 	.word	0x0800ccc5
 800cc60:	0800ccc5 	.word	0x0800ccc5
 800cc64:	0800ccc5 	.word	0x0800ccc5
 800cc68:	0800cca1 	.word	0x0800cca1
 800cc6c:	0800ccc5 	.word	0x0800ccc5
 800cc70:	0800ccc5 	.word	0x0800ccc5
 800cc74:	0800ccc5 	.word	0x0800ccc5
 800cc78:	0800ccb3 	.word	0x0800ccb3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68da      	ldr	r2, [r3, #12]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f022 0202 	bic.w	r2, r2, #2
 800cc8a:	60da      	str	r2, [r3, #12]
      break;
 800cc8c:	e01d      	b.n	800ccca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	68da      	ldr	r2, [r3, #12]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f022 0204 	bic.w	r2, r2, #4
 800cc9c:	60da      	str	r2, [r3, #12]
      break;
 800cc9e:	e014      	b.n	800ccca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	68da      	ldr	r2, [r3, #12]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f022 0208 	bic.w	r2, r2, #8
 800ccae:	60da      	str	r2, [r3, #12]
      break;
 800ccb0:	e00b      	b.n	800ccca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	68da      	ldr	r2, [r3, #12]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f022 0210 	bic.w	r2, r2, #16
 800ccc0:	60da      	str	r2, [r3, #12]
      break;
 800ccc2:	e002      	b.n	800ccca <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	73fb      	strb	r3, [r7, #15]
      break;
 800ccc8:	bf00      	nop
  }

  if (status == HAL_OK)
 800ccca:	7bfb      	ldrb	r3, [r7, #15]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f040 8081 	bne.w	800cdd4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	6839      	ldr	r1, [r7, #0]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f001 f840 	bl	800dd60 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a3e      	ldr	r2, [pc, #248]	; (800cde0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d013      	beq.n	800cd12 <HAL_TIM_OC_Stop_IT+0xe6>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a3d      	ldr	r2, [pc, #244]	; (800cde4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d00e      	beq.n	800cd12 <HAL_TIM_OC_Stop_IT+0xe6>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a3b      	ldr	r2, [pc, #236]	; (800cde8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d009      	beq.n	800cd12 <HAL_TIM_OC_Stop_IT+0xe6>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a3a      	ldr	r2, [pc, #232]	; (800cdec <HAL_TIM_OC_Stop_IT+0x1c0>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d004      	beq.n	800cd12 <HAL_TIM_OC_Stop_IT+0xe6>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a38      	ldr	r2, [pc, #224]	; (800cdf0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d101      	bne.n	800cd16 <HAL_TIM_OC_Stop_IT+0xea>
 800cd12:	2301      	movs	r3, #1
 800cd14:	e000      	b.n	800cd18 <HAL_TIM_OC_Stop_IT+0xec>
 800cd16:	2300      	movs	r3, #0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d017      	beq.n	800cd4c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	6a1a      	ldr	r2, [r3, #32]
 800cd22:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd26:	4013      	ands	r3, r2
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10f      	bne.n	800cd4c <HAL_TIM_OC_Stop_IT+0x120>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	6a1a      	ldr	r2, [r3, #32]
 800cd32:	f240 4344 	movw	r3, #1092	; 0x444
 800cd36:	4013      	ands	r3, r2
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d107      	bne.n	800cd4c <HAL_TIM_OC_Stop_IT+0x120>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd4a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	6a1a      	ldr	r2, [r3, #32]
 800cd52:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd56:	4013      	ands	r3, r2
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10f      	bne.n	800cd7c <HAL_TIM_OC_Stop_IT+0x150>
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	6a1a      	ldr	r2, [r3, #32]
 800cd62:	f240 4344 	movw	r3, #1092	; 0x444
 800cd66:	4013      	ands	r3, r2
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d107      	bne.n	800cd7c <HAL_TIM_OC_Stop_IT+0x150>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f022 0201 	bic.w	r2, r2, #1
 800cd7a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d104      	bne.n	800cd8c <HAL_TIM_OC_Stop_IT+0x160>
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2201      	movs	r2, #1
 800cd86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cd8a:	e023      	b.n	800cdd4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	2b04      	cmp	r3, #4
 800cd90:	d104      	bne.n	800cd9c <HAL_TIM_OC_Stop_IT+0x170>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2201      	movs	r2, #1
 800cd96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cd9a:	e01b      	b.n	800cdd4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	2b08      	cmp	r3, #8
 800cda0:	d104      	bne.n	800cdac <HAL_TIM_OC_Stop_IT+0x180>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2201      	movs	r2, #1
 800cda6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cdaa:	e013      	b.n	800cdd4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2b0c      	cmp	r3, #12
 800cdb0:	d104      	bne.n	800cdbc <HAL_TIM_OC_Stop_IT+0x190>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cdba:	e00b      	b.n	800cdd4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	2b10      	cmp	r3, #16
 800cdc0:	d104      	bne.n	800cdcc <HAL_TIM_OC_Stop_IT+0x1a0>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cdca:	e003      	b.n	800cdd4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800cdd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	40010000 	.word	0x40010000
 800cde4:	40010400 	.word	0x40010400
 800cde8:	40014000 	.word	0x40014000
 800cdec:	40014400 	.word	0x40014400
 800cdf0:	40014800 	.word	0x40014800

0800cdf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d101      	bne.n	800ce06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	e049      	b.n	800ce9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce0c:	b2db      	uxtb	r3, r3
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d106      	bne.n	800ce20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 f841 	bl	800cea2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2202      	movs	r2, #2
 800ce24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	3304      	adds	r3, #4
 800ce30:	4619      	mov	r1, r3
 800ce32:	4610      	mov	r0, r2
 800ce34:	f000 fb7a 	bl	800d52c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2201      	movs	r2, #1
 800ce84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2201      	movs	r2, #1
 800ce94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cea2:	b480      	push	{r7}
 800cea4:	b083      	sub	sp, #12
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ceaa:	bf00      	nop
 800ceac:	370c      	adds	r7, #12
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr

0800ceb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ceb6:	b580      	push	{r7, lr}
 800ceb8:	b084      	sub	sp, #16
 800ceba:	af00      	add	r7, sp, #0
 800cebc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	691b      	ldr	r3, [r3, #16]
 800cecc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	f003 0302 	and.w	r3, r3, #2
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d020      	beq.n	800cf1a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f003 0302 	and.w	r3, r3, #2
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d01b      	beq.n	800cf1a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f06f 0202 	mvn.w	r2, #2
 800ceea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2201      	movs	r2, #1
 800cef0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	699b      	ldr	r3, [r3, #24]
 800cef8:	f003 0303 	and.w	r3, r3, #3
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d003      	beq.n	800cf08 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 faf5 	bl	800d4f0 <HAL_TIM_IC_CaptureCallback>
 800cf06:	e005      	b.n	800cf14 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 fae7 	bl	800d4dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 faf8 	bl	800d504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	f003 0304 	and.w	r3, r3, #4
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d020      	beq.n	800cf66 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f003 0304 	and.w	r3, r3, #4
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d01b      	beq.n	800cf66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f06f 0204 	mvn.w	r2, #4
 800cf36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2202      	movs	r2, #2
 800cf3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	699b      	ldr	r3, [r3, #24]
 800cf44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d003      	beq.n	800cf54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f000 facf 	bl	800d4f0 <HAL_TIM_IC_CaptureCallback>
 800cf52:	e005      	b.n	800cf60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fac1 	bl	800d4dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 fad2 	bl	800d504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	2200      	movs	r2, #0
 800cf64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	f003 0308 	and.w	r3, r3, #8
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d020      	beq.n	800cfb2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f003 0308 	and.w	r3, r3, #8
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d01b      	beq.n	800cfb2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f06f 0208 	mvn.w	r2, #8
 800cf82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2204      	movs	r2, #4
 800cf88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	69db      	ldr	r3, [r3, #28]
 800cf90:	f003 0303 	and.w	r3, r3, #3
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d003      	beq.n	800cfa0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 faa9 	bl	800d4f0 <HAL_TIM_IC_CaptureCallback>
 800cf9e:	e005      	b.n	800cfac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 fa9b 	bl	800d4dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 faac 	bl	800d504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	f003 0310 	and.w	r3, r3, #16
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d020      	beq.n	800cffe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f003 0310 	and.w	r3, r3, #16
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d01b      	beq.n	800cffe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f06f 0210 	mvn.w	r2, #16
 800cfce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2208      	movs	r2, #8
 800cfd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	69db      	ldr	r3, [r3, #28]
 800cfdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d003      	beq.n	800cfec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 fa83 	bl	800d4f0 <HAL_TIM_IC_CaptureCallback>
 800cfea:	e005      	b.n	800cff8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 fa75 	bl	800d4dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fa86 	bl	800d504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	f003 0301 	and.w	r3, r3, #1
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00c      	beq.n	800d022 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f003 0301 	and.w	r3, r3, #1
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d007      	beq.n	800d022 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f06f 0201 	mvn.w	r2, #1
 800d01a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f7f4 fdfb 	bl	8001c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d104      	bne.n	800d036 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00c      	beq.n	800d050 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d007      	beq.n	800d050 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 ffc4 	bl	800dfd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00c      	beq.n	800d074 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d060:	2b00      	cmp	r3, #0
 800d062:	d007      	beq.n	800d074 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d06c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 ffbc 	bl	800dfec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d00c      	beq.n	800d098 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d084:	2b00      	cmp	r3, #0
 800d086:	d007      	beq.n	800d098 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 fa40 	bl	800d518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	f003 0320 	and.w	r3, r3, #32
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00c      	beq.n	800d0bc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f003 0320 	and.w	r3, r3, #32
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d007      	beq.n	800d0bc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f06f 0220 	mvn.w	r2, #32
 800d0b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 ff84 	bl	800dfc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d0bc:	bf00      	nop
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d101      	bne.n	800d0e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d0de:	2302      	movs	r3, #2
 800d0e0:	e0ff      	b.n	800d2e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b14      	cmp	r3, #20
 800d0ee:	f200 80f0 	bhi.w	800d2d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d0f2:	a201      	add	r2, pc, #4	; (adr r2, 800d0f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f8:	0800d14d 	.word	0x0800d14d
 800d0fc:	0800d2d3 	.word	0x0800d2d3
 800d100:	0800d2d3 	.word	0x0800d2d3
 800d104:	0800d2d3 	.word	0x0800d2d3
 800d108:	0800d18d 	.word	0x0800d18d
 800d10c:	0800d2d3 	.word	0x0800d2d3
 800d110:	0800d2d3 	.word	0x0800d2d3
 800d114:	0800d2d3 	.word	0x0800d2d3
 800d118:	0800d1cf 	.word	0x0800d1cf
 800d11c:	0800d2d3 	.word	0x0800d2d3
 800d120:	0800d2d3 	.word	0x0800d2d3
 800d124:	0800d2d3 	.word	0x0800d2d3
 800d128:	0800d20f 	.word	0x0800d20f
 800d12c:	0800d2d3 	.word	0x0800d2d3
 800d130:	0800d2d3 	.word	0x0800d2d3
 800d134:	0800d2d3 	.word	0x0800d2d3
 800d138:	0800d251 	.word	0x0800d251
 800d13c:	0800d2d3 	.word	0x0800d2d3
 800d140:	0800d2d3 	.word	0x0800d2d3
 800d144:	0800d2d3 	.word	0x0800d2d3
 800d148:	0800d291 	.word	0x0800d291
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	68b9      	ldr	r1, [r7, #8]
 800d152:	4618      	mov	r0, r3
 800d154:	f000 fa90 	bl	800d678 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	699a      	ldr	r2, [r3, #24]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f042 0208 	orr.w	r2, r2, #8
 800d166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	699a      	ldr	r2, [r3, #24]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f022 0204 	bic.w	r2, r2, #4
 800d176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	6999      	ldr	r1, [r3, #24]
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	691a      	ldr	r2, [r3, #16]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	430a      	orrs	r2, r1
 800d188:	619a      	str	r2, [r3, #24]
      break;
 800d18a:	e0a5      	b.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	68b9      	ldr	r1, [r7, #8]
 800d192:	4618      	mov	r0, r3
 800d194:	f000 fb00 	bl	800d798 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	699a      	ldr	r2, [r3, #24]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	699a      	ldr	r2, [r3, #24]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	6999      	ldr	r1, [r3, #24]
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	021a      	lsls	r2, r3, #8
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	430a      	orrs	r2, r1
 800d1ca:	619a      	str	r2, [r3, #24]
      break;
 800d1cc:	e084      	b.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	68b9      	ldr	r1, [r7, #8]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f000 fb69 	bl	800d8ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	69da      	ldr	r2, [r3, #28]
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f042 0208 	orr.w	r2, r2, #8
 800d1e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	69da      	ldr	r2, [r3, #28]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f022 0204 	bic.w	r2, r2, #4
 800d1f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	69d9      	ldr	r1, [r3, #28]
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	691a      	ldr	r2, [r3, #16]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	430a      	orrs	r2, r1
 800d20a:	61da      	str	r2, [r3, #28]
      break;
 800d20c:	e064      	b.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	68b9      	ldr	r1, [r7, #8]
 800d214:	4618      	mov	r0, r3
 800d216:	f000 fbd1 	bl	800d9bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	69da      	ldr	r2, [r3, #28]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	69da      	ldr	r2, [r3, #28]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	69d9      	ldr	r1, [r3, #28]
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	021a      	lsls	r2, r3, #8
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	430a      	orrs	r2, r1
 800d24c:	61da      	str	r2, [r3, #28]
      break;
 800d24e:	e043      	b.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	68b9      	ldr	r1, [r7, #8]
 800d256:	4618      	mov	r0, r3
 800d258:	f000 fc1a 	bl	800da90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f042 0208 	orr.w	r2, r2, #8
 800d26a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f022 0204 	bic.w	r2, r2, #4
 800d27a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	691a      	ldr	r2, [r3, #16]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	430a      	orrs	r2, r1
 800d28c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d28e:	e023      	b.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	68b9      	ldr	r1, [r7, #8]
 800d296:	4618      	mov	r0, r3
 800d298:	f000 fc5e 	bl	800db58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	691b      	ldr	r3, [r3, #16]
 800d2c6:	021a      	lsls	r2, r3, #8
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	430a      	orrs	r2, r1
 800d2ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d2d0:	e002      	b.n	800d2d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	75fb      	strb	r3, [r7, #23]
      break;
 800d2d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d2e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3718      	adds	r7, #24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop

0800d2ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d300:	2b01      	cmp	r3, #1
 800d302:	d101      	bne.n	800d308 <HAL_TIM_ConfigClockSource+0x1c>
 800d304:	2302      	movs	r3, #2
 800d306:	e0dc      	b.n	800d4c2 <HAL_TIM_ConfigClockSource+0x1d6>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2201      	movs	r2, #1
 800d30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2202      	movs	r2, #2
 800d314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d320:	68ba      	ldr	r2, [r7, #8]
 800d322:	4b6a      	ldr	r3, [pc, #424]	; (800d4cc <HAL_TIM_ConfigClockSource+0x1e0>)
 800d324:	4013      	ands	r3, r2
 800d326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d32e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a64      	ldr	r2, [pc, #400]	; (800d4d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	f000 80a9 	beq.w	800d496 <HAL_TIM_ConfigClockSource+0x1aa>
 800d344:	4a62      	ldr	r2, [pc, #392]	; (800d4d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d346:	4293      	cmp	r3, r2
 800d348:	f200 80ae 	bhi.w	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d34c:	4a61      	ldr	r2, [pc, #388]	; (800d4d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	f000 80a1 	beq.w	800d496 <HAL_TIM_ConfigClockSource+0x1aa>
 800d354:	4a5f      	ldr	r2, [pc, #380]	; (800d4d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d356:	4293      	cmp	r3, r2
 800d358:	f200 80a6 	bhi.w	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d35c:	4a5e      	ldr	r2, [pc, #376]	; (800d4d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	f000 8099 	beq.w	800d496 <HAL_TIM_ConfigClockSource+0x1aa>
 800d364:	4a5c      	ldr	r2, [pc, #368]	; (800d4d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d366:	4293      	cmp	r3, r2
 800d368:	f200 809e 	bhi.w	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d36c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d370:	f000 8091 	beq.w	800d496 <HAL_TIM_ConfigClockSource+0x1aa>
 800d374:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d378:	f200 8096 	bhi.w	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d37c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d380:	f000 8089 	beq.w	800d496 <HAL_TIM_ConfigClockSource+0x1aa>
 800d384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d388:	f200 808e 	bhi.w	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d38c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d390:	d03e      	beq.n	800d410 <HAL_TIM_ConfigClockSource+0x124>
 800d392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d396:	f200 8087 	bhi.w	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d39a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d39e:	f000 8086 	beq.w	800d4ae <HAL_TIM_ConfigClockSource+0x1c2>
 800d3a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3a6:	d87f      	bhi.n	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3a8:	2b70      	cmp	r3, #112	; 0x70
 800d3aa:	d01a      	beq.n	800d3e2 <HAL_TIM_ConfigClockSource+0xf6>
 800d3ac:	2b70      	cmp	r3, #112	; 0x70
 800d3ae:	d87b      	bhi.n	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3b0:	2b60      	cmp	r3, #96	; 0x60
 800d3b2:	d050      	beq.n	800d456 <HAL_TIM_ConfigClockSource+0x16a>
 800d3b4:	2b60      	cmp	r3, #96	; 0x60
 800d3b6:	d877      	bhi.n	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3b8:	2b50      	cmp	r3, #80	; 0x50
 800d3ba:	d03c      	beq.n	800d436 <HAL_TIM_ConfigClockSource+0x14a>
 800d3bc:	2b50      	cmp	r3, #80	; 0x50
 800d3be:	d873      	bhi.n	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3c0:	2b40      	cmp	r3, #64	; 0x40
 800d3c2:	d058      	beq.n	800d476 <HAL_TIM_ConfigClockSource+0x18a>
 800d3c4:	2b40      	cmp	r3, #64	; 0x40
 800d3c6:	d86f      	bhi.n	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3c8:	2b30      	cmp	r3, #48	; 0x30
 800d3ca:	d064      	beq.n	800d496 <HAL_TIM_ConfigClockSource+0x1aa>
 800d3cc:	2b30      	cmp	r3, #48	; 0x30
 800d3ce:	d86b      	bhi.n	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3d0:	2b20      	cmp	r3, #32
 800d3d2:	d060      	beq.n	800d496 <HAL_TIM_ConfigClockSource+0x1aa>
 800d3d4:	2b20      	cmp	r3, #32
 800d3d6:	d867      	bhi.n	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d05c      	beq.n	800d496 <HAL_TIM_ConfigClockSource+0x1aa>
 800d3dc:	2b10      	cmp	r3, #16
 800d3de:	d05a      	beq.n	800d496 <HAL_TIM_ConfigClockSource+0x1aa>
 800d3e0:	e062      	b.n	800d4a8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6818      	ldr	r0, [r3, #0]
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	6899      	ldr	r1, [r3, #8]
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	68db      	ldr	r3, [r3, #12]
 800d3f2:	f000 fc95 	bl	800dd20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	689b      	ldr	r3, [r3, #8]
 800d3fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d3fe:	68bb      	ldr	r3, [r7, #8]
 800d400:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d404:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	68ba      	ldr	r2, [r7, #8]
 800d40c:	609a      	str	r2, [r3, #8]
      break;
 800d40e:	e04f      	b.n	800d4b0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6818      	ldr	r0, [r3, #0]
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	6899      	ldr	r1, [r3, #8]
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	f000 fc7e 	bl	800dd20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	689a      	ldr	r2, [r3, #8]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d432:	609a      	str	r2, [r3, #8]
      break;
 800d434:	e03c      	b.n	800d4b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6818      	ldr	r0, [r3, #0]
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	6859      	ldr	r1, [r3, #4]
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	461a      	mov	r2, r3
 800d444:	f000 fbee 	bl	800dc24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	2150      	movs	r1, #80	; 0x50
 800d44e:	4618      	mov	r0, r3
 800d450:	f000 fc48 	bl	800dce4 <TIM_ITRx_SetConfig>
      break;
 800d454:	e02c      	b.n	800d4b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6818      	ldr	r0, [r3, #0]
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	6859      	ldr	r1, [r3, #4]
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	461a      	mov	r2, r3
 800d464:	f000 fc0d 	bl	800dc82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2160      	movs	r1, #96	; 0x60
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 fc38 	bl	800dce4 <TIM_ITRx_SetConfig>
      break;
 800d474:	e01c      	b.n	800d4b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6818      	ldr	r0, [r3, #0]
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	6859      	ldr	r1, [r3, #4]
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	461a      	mov	r2, r3
 800d484:	f000 fbce 	bl	800dc24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2140      	movs	r1, #64	; 0x40
 800d48e:	4618      	mov	r0, r3
 800d490:	f000 fc28 	bl	800dce4 <TIM_ITRx_SetConfig>
      break;
 800d494:	e00c      	b.n	800d4b0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4619      	mov	r1, r3
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	f000 fc1f 	bl	800dce4 <TIM_ITRx_SetConfig>
      break;
 800d4a6:	e003      	b.n	800d4b0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d4ac:	e000      	b.n	800d4b0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d4ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	ffceff88 	.word	0xffceff88
 800d4d0:	00100040 	.word	0x00100040
 800d4d4:	00100030 	.word	0x00100030
 800d4d8:	00100020 	.word	0x00100020

0800d4dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b083      	sub	sp, #12
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d4f8:	bf00      	nop
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr

0800d504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d504:	b480      	push	{r7}
 800d506:	b083      	sub	sp, #12
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d50c:	bf00      	nop
 800d50e:	370c      	adds	r7, #12
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d520:	bf00      	nop
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr

0800d52c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b085      	sub	sp, #20
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	4a46      	ldr	r2, [pc, #280]	; (800d658 <TIM_Base_SetConfig+0x12c>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d013      	beq.n	800d56c <TIM_Base_SetConfig+0x40>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d54a:	d00f      	beq.n	800d56c <TIM_Base_SetConfig+0x40>
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	4a43      	ldr	r2, [pc, #268]	; (800d65c <TIM_Base_SetConfig+0x130>)
 800d550:	4293      	cmp	r3, r2
 800d552:	d00b      	beq.n	800d56c <TIM_Base_SetConfig+0x40>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	4a42      	ldr	r2, [pc, #264]	; (800d660 <TIM_Base_SetConfig+0x134>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d007      	beq.n	800d56c <TIM_Base_SetConfig+0x40>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a41      	ldr	r2, [pc, #260]	; (800d664 <TIM_Base_SetConfig+0x138>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d003      	beq.n	800d56c <TIM_Base_SetConfig+0x40>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	4a40      	ldr	r2, [pc, #256]	; (800d668 <TIM_Base_SetConfig+0x13c>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d108      	bne.n	800d57e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	68fa      	ldr	r2, [r7, #12]
 800d57a:	4313      	orrs	r3, r2
 800d57c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4a35      	ldr	r2, [pc, #212]	; (800d658 <TIM_Base_SetConfig+0x12c>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d01f      	beq.n	800d5c6 <TIM_Base_SetConfig+0x9a>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d58c:	d01b      	beq.n	800d5c6 <TIM_Base_SetConfig+0x9a>
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4a32      	ldr	r2, [pc, #200]	; (800d65c <TIM_Base_SetConfig+0x130>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d017      	beq.n	800d5c6 <TIM_Base_SetConfig+0x9a>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	4a31      	ldr	r2, [pc, #196]	; (800d660 <TIM_Base_SetConfig+0x134>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d013      	beq.n	800d5c6 <TIM_Base_SetConfig+0x9a>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4a30      	ldr	r2, [pc, #192]	; (800d664 <TIM_Base_SetConfig+0x138>)
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d00f      	beq.n	800d5c6 <TIM_Base_SetConfig+0x9a>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4a2f      	ldr	r2, [pc, #188]	; (800d668 <TIM_Base_SetConfig+0x13c>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d00b      	beq.n	800d5c6 <TIM_Base_SetConfig+0x9a>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4a2e      	ldr	r2, [pc, #184]	; (800d66c <TIM_Base_SetConfig+0x140>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d007      	beq.n	800d5c6 <TIM_Base_SetConfig+0x9a>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4a2d      	ldr	r2, [pc, #180]	; (800d670 <TIM_Base_SetConfig+0x144>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d003      	beq.n	800d5c6 <TIM_Base_SetConfig+0x9a>
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4a2c      	ldr	r2, [pc, #176]	; (800d674 <TIM_Base_SetConfig+0x148>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d108      	bne.n	800d5d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	68db      	ldr	r3, [r3, #12]
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	695b      	ldr	r3, [r3, #20]
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	68fa      	ldr	r2, [r7, #12]
 800d5ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	689a      	ldr	r2, [r3, #8]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	681a      	ldr	r2, [r3, #0]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	4a16      	ldr	r2, [pc, #88]	; (800d658 <TIM_Base_SetConfig+0x12c>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d00f      	beq.n	800d624 <TIM_Base_SetConfig+0xf8>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	4a18      	ldr	r2, [pc, #96]	; (800d668 <TIM_Base_SetConfig+0x13c>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d00b      	beq.n	800d624 <TIM_Base_SetConfig+0xf8>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	4a17      	ldr	r2, [pc, #92]	; (800d66c <TIM_Base_SetConfig+0x140>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d007      	beq.n	800d624 <TIM_Base_SetConfig+0xf8>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4a16      	ldr	r2, [pc, #88]	; (800d670 <TIM_Base_SetConfig+0x144>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d003      	beq.n	800d624 <TIM_Base_SetConfig+0xf8>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a15      	ldr	r2, [pc, #84]	; (800d674 <TIM_Base_SetConfig+0x148>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d103      	bne.n	800d62c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	691a      	ldr	r2, [r3, #16]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	691b      	ldr	r3, [r3, #16]
 800d636:	f003 0301 	and.w	r3, r3, #1
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d105      	bne.n	800d64a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	691b      	ldr	r3, [r3, #16]
 800d642:	f023 0201 	bic.w	r2, r3, #1
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	611a      	str	r2, [r3, #16]
  }
}
 800d64a:	bf00      	nop
 800d64c:	3714      	adds	r7, #20
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr
 800d656:	bf00      	nop
 800d658:	40010000 	.word	0x40010000
 800d65c:	40000400 	.word	0x40000400
 800d660:	40000800 	.word	0x40000800
 800d664:	40000c00 	.word	0x40000c00
 800d668:	40010400 	.word	0x40010400
 800d66c:	40014000 	.word	0x40014000
 800d670:	40014400 	.word	0x40014400
 800d674:	40014800 	.word	0x40014800

0800d678 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d678:	b480      	push	{r7}
 800d67a:	b087      	sub	sp, #28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6a1b      	ldr	r3, [r3, #32]
 800d686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6a1b      	ldr	r3, [r3, #32]
 800d68c:	f023 0201 	bic.w	r2, r3, #1
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	685b      	ldr	r3, [r3, #4]
 800d698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	699b      	ldr	r3, [r3, #24]
 800d69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d6a0:	68fa      	ldr	r2, [r7, #12]
 800d6a2:	4b37      	ldr	r3, [pc, #220]	; (800d780 <TIM_OC1_SetConfig+0x108>)
 800d6a4:	4013      	ands	r3, r2
 800d6a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f023 0303 	bic.w	r3, r3, #3
 800d6ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	68fa      	ldr	r2, [r7, #12]
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	f023 0302 	bic.w	r3, r3, #2
 800d6c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	689b      	ldr	r3, [r3, #8]
 800d6c6:	697a      	ldr	r2, [r7, #20]
 800d6c8:	4313      	orrs	r3, r2
 800d6ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4a2d      	ldr	r2, [pc, #180]	; (800d784 <TIM_OC1_SetConfig+0x10c>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d00f      	beq.n	800d6f4 <TIM_OC1_SetConfig+0x7c>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4a2c      	ldr	r2, [pc, #176]	; (800d788 <TIM_OC1_SetConfig+0x110>)
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d00b      	beq.n	800d6f4 <TIM_OC1_SetConfig+0x7c>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	4a2b      	ldr	r2, [pc, #172]	; (800d78c <TIM_OC1_SetConfig+0x114>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d007      	beq.n	800d6f4 <TIM_OC1_SetConfig+0x7c>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	4a2a      	ldr	r2, [pc, #168]	; (800d790 <TIM_OC1_SetConfig+0x118>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d003      	beq.n	800d6f4 <TIM_OC1_SetConfig+0x7c>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	4a29      	ldr	r2, [pc, #164]	; (800d794 <TIM_OC1_SetConfig+0x11c>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d10c      	bne.n	800d70e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	f023 0308 	bic.w	r3, r3, #8
 800d6fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	697a      	ldr	r2, [r7, #20]
 800d702:	4313      	orrs	r3, r2
 800d704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	f023 0304 	bic.w	r3, r3, #4
 800d70c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4a1c      	ldr	r2, [pc, #112]	; (800d784 <TIM_OC1_SetConfig+0x10c>)
 800d712:	4293      	cmp	r3, r2
 800d714:	d00f      	beq.n	800d736 <TIM_OC1_SetConfig+0xbe>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	4a1b      	ldr	r2, [pc, #108]	; (800d788 <TIM_OC1_SetConfig+0x110>)
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d00b      	beq.n	800d736 <TIM_OC1_SetConfig+0xbe>
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4a1a      	ldr	r2, [pc, #104]	; (800d78c <TIM_OC1_SetConfig+0x114>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d007      	beq.n	800d736 <TIM_OC1_SetConfig+0xbe>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	4a19      	ldr	r2, [pc, #100]	; (800d790 <TIM_OC1_SetConfig+0x118>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d003      	beq.n	800d736 <TIM_OC1_SetConfig+0xbe>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	4a18      	ldr	r2, [pc, #96]	; (800d794 <TIM_OC1_SetConfig+0x11c>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d111      	bne.n	800d75a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d73c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	695b      	ldr	r3, [r3, #20]
 800d74a:	693a      	ldr	r2, [r7, #16]
 800d74c:	4313      	orrs	r3, r2
 800d74e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	699b      	ldr	r3, [r3, #24]
 800d754:	693a      	ldr	r2, [r7, #16]
 800d756:	4313      	orrs	r3, r2
 800d758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	693a      	ldr	r2, [r7, #16]
 800d75e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	68fa      	ldr	r2, [r7, #12]
 800d764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	685a      	ldr	r2, [r3, #4]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	697a      	ldr	r2, [r7, #20]
 800d772:	621a      	str	r2, [r3, #32]
}
 800d774:	bf00      	nop
 800d776:	371c      	adds	r7, #28
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr
 800d780:	fffeff8f 	.word	0xfffeff8f
 800d784:	40010000 	.word	0x40010000
 800d788:	40010400 	.word	0x40010400
 800d78c:	40014000 	.word	0x40014000
 800d790:	40014400 	.word	0x40014400
 800d794:	40014800 	.word	0x40014800

0800d798 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d798:	b480      	push	{r7}
 800d79a:	b087      	sub	sp, #28
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a1b      	ldr	r3, [r3, #32]
 800d7a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6a1b      	ldr	r3, [r3, #32]
 800d7ac:	f023 0210 	bic.w	r2, r3, #16
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	699b      	ldr	r3, [r3, #24]
 800d7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d7c0:	68fa      	ldr	r2, [r7, #12]
 800d7c2:	4b34      	ldr	r3, [pc, #208]	; (800d894 <TIM_OC2_SetConfig+0xfc>)
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	021b      	lsls	r3, r3, #8
 800d7d6:	68fa      	ldr	r2, [r7, #12]
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	f023 0320 	bic.w	r3, r3, #32
 800d7e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	011b      	lsls	r3, r3, #4
 800d7ea:	697a      	ldr	r2, [r7, #20]
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	4a29      	ldr	r2, [pc, #164]	; (800d898 <TIM_OC2_SetConfig+0x100>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d003      	beq.n	800d800 <TIM_OC2_SetConfig+0x68>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4a28      	ldr	r2, [pc, #160]	; (800d89c <TIM_OC2_SetConfig+0x104>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d10d      	bne.n	800d81c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	011b      	lsls	r3, r3, #4
 800d80e:	697a      	ldr	r2, [r7, #20]
 800d810:	4313      	orrs	r3, r2
 800d812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d81a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	4a1e      	ldr	r2, [pc, #120]	; (800d898 <TIM_OC2_SetConfig+0x100>)
 800d820:	4293      	cmp	r3, r2
 800d822:	d00f      	beq.n	800d844 <TIM_OC2_SetConfig+0xac>
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	4a1d      	ldr	r2, [pc, #116]	; (800d89c <TIM_OC2_SetConfig+0x104>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d00b      	beq.n	800d844 <TIM_OC2_SetConfig+0xac>
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	4a1c      	ldr	r2, [pc, #112]	; (800d8a0 <TIM_OC2_SetConfig+0x108>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d007      	beq.n	800d844 <TIM_OC2_SetConfig+0xac>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	4a1b      	ldr	r2, [pc, #108]	; (800d8a4 <TIM_OC2_SetConfig+0x10c>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d003      	beq.n	800d844 <TIM_OC2_SetConfig+0xac>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	4a1a      	ldr	r2, [pc, #104]	; (800d8a8 <TIM_OC2_SetConfig+0x110>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d113      	bne.n	800d86c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d84a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	693a      	ldr	r2, [r7, #16]
 800d85c:	4313      	orrs	r3, r2
 800d85e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	699b      	ldr	r3, [r3, #24]
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	693a      	ldr	r2, [r7, #16]
 800d868:	4313      	orrs	r3, r2
 800d86a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	693a      	ldr	r2, [r7, #16]
 800d870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	685a      	ldr	r2, [r3, #4]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	697a      	ldr	r2, [r7, #20]
 800d884:	621a      	str	r2, [r3, #32]
}
 800d886:	bf00      	nop
 800d888:	371c      	adds	r7, #28
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr
 800d892:	bf00      	nop
 800d894:	feff8fff 	.word	0xfeff8fff
 800d898:	40010000 	.word	0x40010000
 800d89c:	40010400 	.word	0x40010400
 800d8a0:	40014000 	.word	0x40014000
 800d8a4:	40014400 	.word	0x40014400
 800d8a8:	40014800 	.word	0x40014800

0800d8ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b087      	sub	sp, #28
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6a1b      	ldr	r3, [r3, #32]
 800d8ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6a1b      	ldr	r3, [r3, #32]
 800d8c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	69db      	ldr	r3, [r3, #28]
 800d8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	4b33      	ldr	r3, [pc, #204]	; (800d9a4 <TIM_OC3_SetConfig+0xf8>)
 800d8d8:	4013      	ands	r3, r2
 800d8da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f023 0303 	bic.w	r3, r3, #3
 800d8e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	68fa      	ldr	r2, [r7, #12]
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d8f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	689b      	ldr	r3, [r3, #8]
 800d8fa:	021b      	lsls	r3, r3, #8
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	4a28      	ldr	r2, [pc, #160]	; (800d9a8 <TIM_OC3_SetConfig+0xfc>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d003      	beq.n	800d912 <TIM_OC3_SetConfig+0x66>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	4a27      	ldr	r2, [pc, #156]	; (800d9ac <TIM_OC3_SetConfig+0x100>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d10d      	bne.n	800d92e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	68db      	ldr	r3, [r3, #12]
 800d91e:	021b      	lsls	r3, r3, #8
 800d920:	697a      	ldr	r2, [r7, #20]
 800d922:	4313      	orrs	r3, r2
 800d924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d92c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	4a1d      	ldr	r2, [pc, #116]	; (800d9a8 <TIM_OC3_SetConfig+0xfc>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d00f      	beq.n	800d956 <TIM_OC3_SetConfig+0xaa>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	4a1c      	ldr	r2, [pc, #112]	; (800d9ac <TIM_OC3_SetConfig+0x100>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d00b      	beq.n	800d956 <TIM_OC3_SetConfig+0xaa>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	4a1b      	ldr	r2, [pc, #108]	; (800d9b0 <TIM_OC3_SetConfig+0x104>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d007      	beq.n	800d956 <TIM_OC3_SetConfig+0xaa>
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	4a1a      	ldr	r2, [pc, #104]	; (800d9b4 <TIM_OC3_SetConfig+0x108>)
 800d94a:	4293      	cmp	r3, r2
 800d94c:	d003      	beq.n	800d956 <TIM_OC3_SetConfig+0xaa>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	4a19      	ldr	r2, [pc, #100]	; (800d9b8 <TIM_OC3_SetConfig+0x10c>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d113      	bne.n	800d97e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d95c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	695b      	ldr	r3, [r3, #20]
 800d96a:	011b      	lsls	r3, r3, #4
 800d96c:	693a      	ldr	r2, [r7, #16]
 800d96e:	4313      	orrs	r3, r2
 800d970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	699b      	ldr	r3, [r3, #24]
 800d976:	011b      	lsls	r3, r3, #4
 800d978:	693a      	ldr	r2, [r7, #16]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	693a      	ldr	r2, [r7, #16]
 800d982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	685a      	ldr	r2, [r3, #4]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	697a      	ldr	r2, [r7, #20]
 800d996:	621a      	str	r2, [r3, #32]
}
 800d998:	bf00      	nop
 800d99a:	371c      	adds	r7, #28
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr
 800d9a4:	fffeff8f 	.word	0xfffeff8f
 800d9a8:	40010000 	.word	0x40010000
 800d9ac:	40010400 	.word	0x40010400
 800d9b0:	40014000 	.word	0x40014000
 800d9b4:	40014400 	.word	0x40014400
 800d9b8:	40014800 	.word	0x40014800

0800d9bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b087      	sub	sp, #28
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6a1b      	ldr	r3, [r3, #32]
 800d9ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6a1b      	ldr	r3, [r3, #32]
 800d9d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	69db      	ldr	r3, [r3, #28]
 800d9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d9e4:	68fa      	ldr	r2, [r7, #12]
 800d9e6:	4b24      	ldr	r3, [pc, #144]	; (800da78 <TIM_OC4_SetConfig+0xbc>)
 800d9e8:	4013      	ands	r3, r2
 800d9ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d9f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	021b      	lsls	r3, r3, #8
 800d9fa:	68fa      	ldr	r2, [r7, #12]
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	031b      	lsls	r3, r3, #12
 800da0e:	693a      	ldr	r2, [r7, #16]
 800da10:	4313      	orrs	r3, r2
 800da12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4a19      	ldr	r2, [pc, #100]	; (800da7c <TIM_OC4_SetConfig+0xc0>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d00f      	beq.n	800da3c <TIM_OC4_SetConfig+0x80>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	4a18      	ldr	r2, [pc, #96]	; (800da80 <TIM_OC4_SetConfig+0xc4>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d00b      	beq.n	800da3c <TIM_OC4_SetConfig+0x80>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	4a17      	ldr	r2, [pc, #92]	; (800da84 <TIM_OC4_SetConfig+0xc8>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d007      	beq.n	800da3c <TIM_OC4_SetConfig+0x80>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4a16      	ldr	r2, [pc, #88]	; (800da88 <TIM_OC4_SetConfig+0xcc>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d003      	beq.n	800da3c <TIM_OC4_SetConfig+0x80>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4a15      	ldr	r2, [pc, #84]	; (800da8c <TIM_OC4_SetConfig+0xd0>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d109      	bne.n	800da50 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	695b      	ldr	r3, [r3, #20]
 800da48:	019b      	lsls	r3, r3, #6
 800da4a:	697a      	ldr	r2, [r7, #20]
 800da4c:	4313      	orrs	r3, r2
 800da4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	697a      	ldr	r2, [r7, #20]
 800da54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	685a      	ldr	r2, [r3, #4]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	621a      	str	r2, [r3, #32]
}
 800da6a:	bf00      	nop
 800da6c:	371c      	adds	r7, #28
 800da6e:	46bd      	mov	sp, r7
 800da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da74:	4770      	bx	lr
 800da76:	bf00      	nop
 800da78:	feff8fff 	.word	0xfeff8fff
 800da7c:	40010000 	.word	0x40010000
 800da80:	40010400 	.word	0x40010400
 800da84:	40014000 	.word	0x40014000
 800da88:	40014400 	.word	0x40014400
 800da8c:	40014800 	.word	0x40014800

0800da90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800da90:	b480      	push	{r7}
 800da92:	b087      	sub	sp, #28
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a1b      	ldr	r3, [r3, #32]
 800da9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a1b      	ldr	r3, [r3, #32]
 800daa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	4b21      	ldr	r3, [pc, #132]	; (800db40 <TIM_OC5_SetConfig+0xb0>)
 800dabc:	4013      	ands	r3, r2
 800dabe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dad0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	689b      	ldr	r3, [r3, #8]
 800dad6:	041b      	lsls	r3, r3, #16
 800dad8:	693a      	ldr	r2, [r7, #16]
 800dada:	4313      	orrs	r3, r2
 800dadc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a18      	ldr	r2, [pc, #96]	; (800db44 <TIM_OC5_SetConfig+0xb4>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d00f      	beq.n	800db06 <TIM_OC5_SetConfig+0x76>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a17      	ldr	r2, [pc, #92]	; (800db48 <TIM_OC5_SetConfig+0xb8>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d00b      	beq.n	800db06 <TIM_OC5_SetConfig+0x76>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a16      	ldr	r2, [pc, #88]	; (800db4c <TIM_OC5_SetConfig+0xbc>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d007      	beq.n	800db06 <TIM_OC5_SetConfig+0x76>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4a15      	ldr	r2, [pc, #84]	; (800db50 <TIM_OC5_SetConfig+0xc0>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d003      	beq.n	800db06 <TIM_OC5_SetConfig+0x76>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a14      	ldr	r2, [pc, #80]	; (800db54 <TIM_OC5_SetConfig+0xc4>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d109      	bne.n	800db1a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800db0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	695b      	ldr	r3, [r3, #20]
 800db12:	021b      	lsls	r3, r3, #8
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	4313      	orrs	r3, r2
 800db18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	697a      	ldr	r2, [r7, #20]
 800db1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	68fa      	ldr	r2, [r7, #12]
 800db24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	685a      	ldr	r2, [r3, #4]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	693a      	ldr	r2, [r7, #16]
 800db32:	621a      	str	r2, [r3, #32]
}
 800db34:	bf00      	nop
 800db36:	371c      	adds	r7, #28
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr
 800db40:	fffeff8f 	.word	0xfffeff8f
 800db44:	40010000 	.word	0x40010000
 800db48:	40010400 	.word	0x40010400
 800db4c:	40014000 	.word	0x40014000
 800db50:	40014400 	.word	0x40014400
 800db54:	40014800 	.word	0x40014800

0800db58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800db58:	b480      	push	{r7}
 800db5a:	b087      	sub	sp, #28
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6a1b      	ldr	r3, [r3, #32]
 800db66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6a1b      	ldr	r3, [r3, #32]
 800db6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	4b22      	ldr	r3, [pc, #136]	; (800dc0c <TIM_OC6_SetConfig+0xb4>)
 800db84:	4013      	ands	r3, r2
 800db86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	021b      	lsls	r3, r3, #8
 800db8e:	68fa      	ldr	r2, [r7, #12]
 800db90:	4313      	orrs	r3, r2
 800db92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800db9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	689b      	ldr	r3, [r3, #8]
 800dba0:	051b      	lsls	r3, r3, #20
 800dba2:	693a      	ldr	r2, [r7, #16]
 800dba4:	4313      	orrs	r3, r2
 800dba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4a19      	ldr	r2, [pc, #100]	; (800dc10 <TIM_OC6_SetConfig+0xb8>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d00f      	beq.n	800dbd0 <TIM_OC6_SetConfig+0x78>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4a18      	ldr	r2, [pc, #96]	; (800dc14 <TIM_OC6_SetConfig+0xbc>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d00b      	beq.n	800dbd0 <TIM_OC6_SetConfig+0x78>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a17      	ldr	r2, [pc, #92]	; (800dc18 <TIM_OC6_SetConfig+0xc0>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d007      	beq.n	800dbd0 <TIM_OC6_SetConfig+0x78>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a16      	ldr	r2, [pc, #88]	; (800dc1c <TIM_OC6_SetConfig+0xc4>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d003      	beq.n	800dbd0 <TIM_OC6_SetConfig+0x78>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a15      	ldr	r2, [pc, #84]	; (800dc20 <TIM_OC6_SetConfig+0xc8>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d109      	bne.n	800dbe4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dbd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	695b      	ldr	r3, [r3, #20]
 800dbdc:	029b      	lsls	r3, r3, #10
 800dbde:	697a      	ldr	r2, [r7, #20]
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	697a      	ldr	r2, [r7, #20]
 800dbe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	685a      	ldr	r2, [r3, #4]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	693a      	ldr	r2, [r7, #16]
 800dbfc:	621a      	str	r2, [r3, #32]
}
 800dbfe:	bf00      	nop
 800dc00:	371c      	adds	r7, #28
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	feff8fff 	.word	0xfeff8fff
 800dc10:	40010000 	.word	0x40010000
 800dc14:	40010400 	.word	0x40010400
 800dc18:	40014000 	.word	0x40014000
 800dc1c:	40014400 	.word	0x40014400
 800dc20:	40014800 	.word	0x40014800

0800dc24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc24:	b480      	push	{r7}
 800dc26:	b087      	sub	sp, #28
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	6a1b      	ldr	r3, [r3, #32]
 800dc34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6a1b      	ldr	r3, [r3, #32]
 800dc3a:	f023 0201 	bic.w	r2, r3, #1
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dc4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	011b      	lsls	r3, r3, #4
 800dc54:	693a      	ldr	r2, [r7, #16]
 800dc56:	4313      	orrs	r3, r2
 800dc58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	f023 030a 	bic.w	r3, r3, #10
 800dc60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dc62:	697a      	ldr	r2, [r7, #20]
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	4313      	orrs	r3, r2
 800dc68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	693a      	ldr	r2, [r7, #16]
 800dc6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	697a      	ldr	r2, [r7, #20]
 800dc74:	621a      	str	r2, [r3, #32]
}
 800dc76:	bf00      	nop
 800dc78:	371c      	adds	r7, #28
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr

0800dc82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dc82:	b480      	push	{r7}
 800dc84:	b087      	sub	sp, #28
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	60f8      	str	r0, [r7, #12]
 800dc8a:	60b9      	str	r1, [r7, #8]
 800dc8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6a1b      	ldr	r3, [r3, #32]
 800dc92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6a1b      	ldr	r3, [r3, #32]
 800dc98:	f023 0210 	bic.w	r2, r3, #16
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	699b      	ldr	r3, [r3, #24]
 800dca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dcac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	031b      	lsls	r3, r3, #12
 800dcb2:	693a      	ldr	r2, [r7, #16]
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dcbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	011b      	lsls	r3, r3, #4
 800dcc4:	697a      	ldr	r2, [r7, #20]
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	693a      	ldr	r2, [r7, #16]
 800dcce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	697a      	ldr	r2, [r7, #20]
 800dcd4:	621a      	str	r2, [r3, #32]
}
 800dcd6:	bf00      	nop
 800dcd8:	371c      	adds	r7, #28
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr
	...

0800dce4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	4b09      	ldr	r3, [pc, #36]	; (800dd1c <TIM_ITRx_SetConfig+0x38>)
 800dcf8:	4013      	ands	r3, r2
 800dcfa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dcfc:	683a      	ldr	r2, [r7, #0]
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	f043 0307 	orr.w	r3, r3, #7
 800dd06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	68fa      	ldr	r2, [r7, #12]
 800dd0c:	609a      	str	r2, [r3, #8]
}
 800dd0e:	bf00      	nop
 800dd10:	3714      	adds	r7, #20
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	ffcfff8f 	.word	0xffcfff8f

0800dd20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b087      	sub	sp, #28
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
 800dd2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dd3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	021a      	lsls	r2, r3, #8
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	431a      	orrs	r2, r3
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	4313      	orrs	r3, r2
 800dd48:	697a      	ldr	r2, [r7, #20]
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	697a      	ldr	r2, [r7, #20]
 800dd52:	609a      	str	r2, [r3, #8]
}
 800dd54:	bf00      	nop
 800dd56:	371c      	adds	r7, #28
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b087      	sub	sp, #28
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	f003 031f 	and.w	r3, r3, #31
 800dd72:	2201      	movs	r2, #1
 800dd74:	fa02 f303 	lsl.w	r3, r2, r3
 800dd78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	6a1a      	ldr	r2, [r3, #32]
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	43db      	mvns	r3, r3
 800dd82:	401a      	ands	r2, r3
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6a1a      	ldr	r2, [r3, #32]
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	f003 031f 	and.w	r3, r3, #31
 800dd92:	6879      	ldr	r1, [r7, #4]
 800dd94:	fa01 f303 	lsl.w	r3, r1, r3
 800dd98:	431a      	orrs	r2, r3
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	621a      	str	r2, [r3, #32]
}
 800dd9e:	bf00      	nop
 800dda0:	371c      	adds	r7, #28
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr
	...

0800ddac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b085      	sub	sp, #20
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d101      	bne.n	800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	e06d      	b.n	800dea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2202      	movs	r2, #2
 800ddd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a30      	ldr	r2, [pc, #192]	; (800deac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d004      	beq.n	800ddf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4a2f      	ldr	r2, [pc, #188]	; (800deb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d108      	bne.n	800de0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ddfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	4313      	orrs	r3, r2
 800de08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	68fa      	ldr	r2, [r7, #12]
 800de18:	4313      	orrs	r3, r2
 800de1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4a20      	ldr	r2, [pc, #128]	; (800deac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d022      	beq.n	800de74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de36:	d01d      	beq.n	800de74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4a1d      	ldr	r2, [pc, #116]	; (800deb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d018      	beq.n	800de74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4a1c      	ldr	r2, [pc, #112]	; (800deb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d013      	beq.n	800de74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4a1a      	ldr	r2, [pc, #104]	; (800debc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800de52:	4293      	cmp	r3, r2
 800de54:	d00e      	beq.n	800de74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4a15      	ldr	r2, [pc, #84]	; (800deb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d009      	beq.n	800de74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a16      	ldr	r2, [pc, #88]	; (800dec0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800de66:	4293      	cmp	r3, r2
 800de68:	d004      	beq.n	800de74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	4a15      	ldr	r2, [pc, #84]	; (800dec4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800de70:	4293      	cmp	r3, r2
 800de72:	d10c      	bne.n	800de8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	689b      	ldr	r3, [r3, #8]
 800de80:	68ba      	ldr	r2, [r7, #8]
 800de82:	4313      	orrs	r3, r2
 800de84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	68ba      	ldr	r2, [r7, #8]
 800de8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2201      	movs	r2, #1
 800de92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2200      	movs	r2, #0
 800de9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3714      	adds	r7, #20
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr
 800deac:	40010000 	.word	0x40010000
 800deb0:	40010400 	.word	0x40010400
 800deb4:	40000400 	.word	0x40000400
 800deb8:	40000800 	.word	0x40000800
 800debc:	40000c00 	.word	0x40000c00
 800dec0:	40001800 	.word	0x40001800
 800dec4:	40014000 	.word	0x40014000

0800dec8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ded2:	2300      	movs	r3, #0
 800ded4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d101      	bne.n	800dee4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dee0:	2302      	movs	r3, #2
 800dee2:	e065      	b.n	800dfb0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2201      	movs	r2, #1
 800dee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	4313      	orrs	r3, r2
 800def8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	689b      	ldr	r3, [r3, #8]
 800df04:	4313      	orrs	r3, r2
 800df06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	4313      	orrs	r3, r2
 800df14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4313      	orrs	r3, r2
 800df22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	691b      	ldr	r3, [r3, #16]
 800df2e:	4313      	orrs	r3, r2
 800df30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	695b      	ldr	r3, [r3, #20]
 800df3c:	4313      	orrs	r3, r2
 800df3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df4a:	4313      	orrs	r3, r2
 800df4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	699b      	ldr	r3, [r3, #24]
 800df58:	041b      	lsls	r3, r3, #16
 800df5a:	4313      	orrs	r3, r2
 800df5c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a16      	ldr	r2, [pc, #88]	; (800dfbc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d004      	beq.n	800df72 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a14      	ldr	r2, [pc, #80]	; (800dfc0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d115      	bne.n	800df9e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df7c:	051b      	lsls	r3, r3, #20
 800df7e:	4313      	orrs	r3, r2
 800df80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	69db      	ldr	r3, [r3, #28]
 800df8c:	4313      	orrs	r3, r2
 800df8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	6a1b      	ldr	r3, [r3, #32]
 800df9a:	4313      	orrs	r3, r2
 800df9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3714      	adds	r7, #20
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr
 800dfbc:	40010000 	.word	0x40010000
 800dfc0:	40010400 	.word	0x40010400

0800dfc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dfcc:	bf00      	nop
 800dfce:	370c      	adds	r7, #12
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr

0800dfd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dfe0:	bf00      	nop
 800dfe2:	370c      	adds	r7, #12
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr

0800dfec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dff4:	bf00      	nop
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d101      	bne.n	800e012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e042      	b.n	800e098 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d106      	bne.n	800e02a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2200      	movs	r2, #0
 800e020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7f4 fd5b 	bl	8002ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2224      	movs	r2, #36	; 0x24
 800e02e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f022 0201 	bic.w	r2, r2, #1
 800e040:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e046:	2b00      	cmp	r3, #0
 800e048:	d002      	beq.n	800e050 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f001 f9b6 	bl	800f3bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 fc4b 	bl	800e8ec <UART_SetConfig>
 800e056:	4603      	mov	r3, r0
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d101      	bne.n	800e060 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e05c:	2301      	movs	r3, #1
 800e05e:	e01b      	b.n	800e098 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	685a      	ldr	r2, [r3, #4]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e06e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	689a      	ldr	r2, [r3, #8]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e07e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f042 0201 	orr.w	r2, r2, #1
 800e08e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f001 fa35 	bl	800f500 <UART_CheckIdleState>
 800e096:	4603      	mov	r3, r0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b08a      	sub	sp, #40	; 0x28
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0b4:	2b20      	cmp	r3, #32
 800e0b6:	d137      	bne.n	800e128 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d002      	beq.n	800e0c4 <HAL_UART_Receive_IT+0x24>
 800e0be:	88fb      	ldrh	r3, [r7, #6]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d101      	bne.n	800e0c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	e030      	b.n	800e12a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	4a18      	ldr	r2, [pc, #96]	; (800e134 <HAL_UART_Receive_IT+0x94>)
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d01f      	beq.n	800e118 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d018      	beq.n	800e118 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	e853 3f00 	ldrex	r3, [r3]
 800e0f2:	613b      	str	r3, [r7, #16]
   return(result);
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e0fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	461a      	mov	r2, r3
 800e102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e104:	623b      	str	r3, [r7, #32]
 800e106:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e108:	69f9      	ldr	r1, [r7, #28]
 800e10a:	6a3a      	ldr	r2, [r7, #32]
 800e10c:	e841 2300 	strex	r3, r2, [r1]
 800e110:	61bb      	str	r3, [r7, #24]
   return(result);
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1e6      	bne.n	800e0e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e118:	88fb      	ldrh	r3, [r7, #6]
 800e11a:	461a      	mov	r2, r3
 800e11c:	68b9      	ldr	r1, [r7, #8]
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f001 fb06 	bl	800f730 <UART_Start_Receive_IT>
 800e124:	4603      	mov	r3, r0
 800e126:	e000      	b.n	800e12a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e128:	2302      	movs	r3, #2
  }
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3728      	adds	r7, #40	; 0x28
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	58000c00 	.word	0x58000c00

0800e138 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b0ba      	sub	sp, #232	; 0xe8
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	69db      	ldr	r3, [r3, #28]
 800e146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	689b      	ldr	r3, [r3, #8]
 800e15a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e15e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e162:	f640 030f 	movw	r3, #2063	; 0x80f
 800e166:	4013      	ands	r3, r2
 800e168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e16c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e170:	2b00      	cmp	r3, #0
 800e172:	d11b      	bne.n	800e1ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e178:	f003 0320 	and.w	r3, r3, #32
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d015      	beq.n	800e1ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e184:	f003 0320 	and.w	r3, r3, #32
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d105      	bne.n	800e198 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e18c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e194:	2b00      	cmp	r3, #0
 800e196:	d009      	beq.n	800e1ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	f000 8377 	beq.w	800e890 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	4798      	blx	r3
      }
      return;
 800e1aa:	e371      	b.n	800e890 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e1ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f000 8123 	beq.w	800e3fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e1b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e1ba:	4b8d      	ldr	r3, [pc, #564]	; (800e3f0 <HAL_UART_IRQHandler+0x2b8>)
 800e1bc:	4013      	ands	r3, r2
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d106      	bne.n	800e1d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e1c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e1c6:	4b8b      	ldr	r3, [pc, #556]	; (800e3f4 <HAL_UART_IRQHandler+0x2bc>)
 800e1c8:	4013      	ands	r3, r2
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f000 8116 	beq.w	800e3fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e1d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e1d4:	f003 0301 	and.w	r3, r3, #1
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d011      	beq.n	800e200 <HAL_UART_IRQHandler+0xc8>
 800e1dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e1e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00b      	beq.n	800e200 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1f6:	f043 0201 	orr.w	r2, r3, #1
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e204:	f003 0302 	and.w	r3, r3, #2
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d011      	beq.n	800e230 <HAL_UART_IRQHandler+0xf8>
 800e20c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e210:	f003 0301 	and.w	r3, r3, #1
 800e214:	2b00      	cmp	r3, #0
 800e216:	d00b      	beq.n	800e230 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2202      	movs	r2, #2
 800e21e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e226:	f043 0204 	orr.w	r2, r3, #4
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e234:	f003 0304 	and.w	r3, r3, #4
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d011      	beq.n	800e260 <HAL_UART_IRQHandler+0x128>
 800e23c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e240:	f003 0301 	and.w	r3, r3, #1
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00b      	beq.n	800e260 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2204      	movs	r2, #4
 800e24e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e256:	f043 0202 	orr.w	r2, r3, #2
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e264:	f003 0308 	and.w	r3, r3, #8
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d017      	beq.n	800e29c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e270:	f003 0320 	and.w	r3, r3, #32
 800e274:	2b00      	cmp	r3, #0
 800e276:	d105      	bne.n	800e284 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e278:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e27c:	4b5c      	ldr	r3, [pc, #368]	; (800e3f0 <HAL_UART_IRQHandler+0x2b8>)
 800e27e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00b      	beq.n	800e29c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2208      	movs	r2, #8
 800e28a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e292:	f043 0208 	orr.w	r2, r3, #8
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e29c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d012      	beq.n	800e2ce <HAL_UART_IRQHandler+0x196>
 800e2a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d00c      	beq.n	800e2ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2c4:	f043 0220 	orr.w	r2, r3, #32
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 82dd 	beq.w	800e894 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e2da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2de:	f003 0320 	and.w	r3, r3, #32
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d013      	beq.n	800e30e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e2e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2ea:	f003 0320 	and.w	r3, r3, #32
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d105      	bne.n	800e2fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e2f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e2f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d007      	beq.n	800e30e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e302:	2b00      	cmp	r3, #0
 800e304:	d003      	beq.n	800e30e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e314:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e322:	2b40      	cmp	r3, #64	; 0x40
 800e324:	d005      	beq.n	800e332 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e32a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d054      	beq.n	800e3dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f001 fb1e 	bl	800f974 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e342:	2b40      	cmp	r3, #64	; 0x40
 800e344:	d146      	bne.n	800e3d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	3308      	adds	r3, #8
 800e34c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e350:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e354:	e853 3f00 	ldrex	r3, [r3]
 800e358:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e35c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e364:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	3308      	adds	r3, #8
 800e36e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e372:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e376:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e37e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e382:	e841 2300 	strex	r3, r2, [r1]
 800e386:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e38a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d1d9      	bne.n	800e346 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d017      	beq.n	800e3cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3a2:	4a15      	ldr	r2, [pc, #84]	; (800e3f8 <HAL_UART_IRQHandler+0x2c0>)
 800e3a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f7f8 f89d 	bl	80064ec <HAL_DMA_Abort_IT>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d019      	beq.n	800e3ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e3c6:	4610      	mov	r0, r2
 800e3c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3ca:	e00f      	b.n	800e3ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 fa77 	bl	800e8c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3d2:	e00b      	b.n	800e3ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 fa73 	bl	800e8c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3da:	e007      	b.n	800e3ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fa6f 	bl	800e8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e3ea:	e253      	b.n	800e894 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e3ec:	bf00      	nop
    return;
 800e3ee:	e251      	b.n	800e894 <HAL_UART_IRQHandler+0x75c>
 800e3f0:	10000001 	.word	0x10000001
 800e3f4:	04000120 	.word	0x04000120
 800e3f8:	0800fa41 	.word	0x0800fa41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e400:	2b01      	cmp	r3, #1
 800e402:	f040 81e7 	bne.w	800e7d4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e40a:	f003 0310 	and.w	r3, r3, #16
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f000 81e0 	beq.w	800e7d4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e418:	f003 0310 	and.w	r3, r3, #16
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f000 81d9 	beq.w	800e7d4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2210      	movs	r2, #16
 800e428:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	689b      	ldr	r3, [r3, #8]
 800e430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e434:	2b40      	cmp	r3, #64	; 0x40
 800e436:	f040 8151 	bne.w	800e6dc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4a96      	ldr	r2, [pc, #600]	; (800e69c <HAL_UART_IRQHandler+0x564>)
 800e444:	4293      	cmp	r3, r2
 800e446:	d068      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a93      	ldr	r2, [pc, #588]	; (800e6a0 <HAL_UART_IRQHandler+0x568>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d061      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	4a91      	ldr	r2, [pc, #580]	; (800e6a4 <HAL_UART_IRQHandler+0x56c>)
 800e460:	4293      	cmp	r3, r2
 800e462:	d05a      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	4a8e      	ldr	r2, [pc, #568]	; (800e6a8 <HAL_UART_IRQHandler+0x570>)
 800e46e:	4293      	cmp	r3, r2
 800e470:	d053      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	4a8c      	ldr	r2, [pc, #560]	; (800e6ac <HAL_UART_IRQHandler+0x574>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d04c      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	4a89      	ldr	r2, [pc, #548]	; (800e6b0 <HAL_UART_IRQHandler+0x578>)
 800e48a:	4293      	cmp	r3, r2
 800e48c:	d045      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4a87      	ldr	r2, [pc, #540]	; (800e6b4 <HAL_UART_IRQHandler+0x57c>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d03e      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4a84      	ldr	r2, [pc, #528]	; (800e6b8 <HAL_UART_IRQHandler+0x580>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d037      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	4a82      	ldr	r2, [pc, #520]	; (800e6bc <HAL_UART_IRQHandler+0x584>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d030      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a7f      	ldr	r2, [pc, #508]	; (800e6c0 <HAL_UART_IRQHandler+0x588>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d029      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4a7d      	ldr	r2, [pc, #500]	; (800e6c4 <HAL_UART_IRQHandler+0x58c>)
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d022      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4a7a      	ldr	r2, [pc, #488]	; (800e6c8 <HAL_UART_IRQHandler+0x590>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d01b      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4a78      	ldr	r2, [pc, #480]	; (800e6cc <HAL_UART_IRQHandler+0x594>)
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	d014      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4a75      	ldr	r2, [pc, #468]	; (800e6d0 <HAL_UART_IRQHandler+0x598>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d00d      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a73      	ldr	r2, [pc, #460]	; (800e6d4 <HAL_UART_IRQHandler+0x59c>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d006      	beq.n	800e51a <HAL_UART_IRQHandler+0x3e2>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a70      	ldr	r2, [pc, #448]	; (800e6d8 <HAL_UART_IRQHandler+0x5a0>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d106      	bne.n	800e528 <HAL_UART_IRQHandler+0x3f0>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	b29b      	uxth	r3, r3
 800e526:	e005      	b.n	800e534 <HAL_UART_IRQHandler+0x3fc>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	b29b      	uxth	r3, r3
 800e534:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e538:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	f000 81ab 	beq.w	800e898 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e548:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e54c:	429a      	cmp	r2, r3
 800e54e:	f080 81a3 	bcs.w	800e898 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e558:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e562:	69db      	ldr	r3, [r3, #28]
 800e564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e568:	f000 8087 	beq.w	800e67a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e574:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e578:	e853 3f00 	ldrex	r3, [r3]
 800e57c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	461a      	mov	r2, r3
 800e592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e59a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e5a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e5a6:	e841 2300 	strex	r3, r2, [r1]
 800e5aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e5ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1da      	bne.n	800e56c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	3308      	adds	r3, #8
 800e5bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5c0:	e853 3f00 	ldrex	r3, [r3]
 800e5c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e5c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e5c8:	f023 0301 	bic.w	r3, r3, #1
 800e5cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3308      	adds	r3, #8
 800e5d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e5da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e5de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e5e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e5e6:	e841 2300 	strex	r3, r2, [r1]
 800e5ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e5ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d1e1      	bne.n	800e5b6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	3308      	adds	r3, #8
 800e5f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e5fc:	e853 3f00 	ldrex	r3, [r3]
 800e600:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	3308      	adds	r3, #8
 800e612:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e616:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e618:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e61a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e61c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e61e:	e841 2300 	strex	r3, r2, [r1]
 800e622:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e626:	2b00      	cmp	r3, #0
 800e628:	d1e3      	bne.n	800e5f2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2220      	movs	r2, #32
 800e62e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2200      	movs	r2, #0
 800e636:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e63e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e640:	e853 3f00 	ldrex	r3, [r3]
 800e644:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e648:	f023 0310 	bic.w	r3, r3, #16
 800e64c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	461a      	mov	r2, r3
 800e656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e65a:	65bb      	str	r3, [r7, #88]	; 0x58
 800e65c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e65e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e660:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e662:	e841 2300 	strex	r3, r2, [r1]
 800e666:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d1e4      	bne.n	800e638 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e674:	4618      	mov	r0, r3
 800e676:	f7f7 fc1b 	bl	8005eb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2202      	movs	r2, #2
 800e67e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	1ad3      	subs	r3, r2, r3
 800e690:	b29b      	uxth	r3, r3
 800e692:	4619      	mov	r1, r3
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	f000 f91d 	bl	800e8d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e69a:	e0fd      	b.n	800e898 <HAL_UART_IRQHandler+0x760>
 800e69c:	40020010 	.word	0x40020010
 800e6a0:	40020028 	.word	0x40020028
 800e6a4:	40020040 	.word	0x40020040
 800e6a8:	40020058 	.word	0x40020058
 800e6ac:	40020070 	.word	0x40020070
 800e6b0:	40020088 	.word	0x40020088
 800e6b4:	400200a0 	.word	0x400200a0
 800e6b8:	400200b8 	.word	0x400200b8
 800e6bc:	40020410 	.word	0x40020410
 800e6c0:	40020428 	.word	0x40020428
 800e6c4:	40020440 	.word	0x40020440
 800e6c8:	40020458 	.word	0x40020458
 800e6cc:	40020470 	.word	0x40020470
 800e6d0:	40020488 	.word	0x40020488
 800e6d4:	400204a0 	.word	0x400204a0
 800e6d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	1ad3      	subs	r3, r2, r3
 800e6ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6f6:	b29b      	uxth	r3, r3
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	f000 80cf 	beq.w	800e89c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800e6fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e702:	2b00      	cmp	r3, #0
 800e704:	f000 80ca 	beq.w	800e89c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e710:	e853 3f00 	ldrex	r3, [r3]
 800e714:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e71c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	461a      	mov	r2, r3
 800e726:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e72a:	647b      	str	r3, [r7, #68]	; 0x44
 800e72c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e72e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e732:	e841 2300 	strex	r3, r2, [r1]
 800e736:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1e4      	bne.n	800e708 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	3308      	adds	r3, #8
 800e744:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e748:	e853 3f00 	ldrex	r3, [r3]
 800e74c:	623b      	str	r3, [r7, #32]
   return(result);
 800e74e:	6a3a      	ldr	r2, [r7, #32]
 800e750:	4b55      	ldr	r3, [pc, #340]	; (800e8a8 <HAL_UART_IRQHandler+0x770>)
 800e752:	4013      	ands	r3, r2
 800e754:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	3308      	adds	r3, #8
 800e75e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e762:	633a      	str	r2, [r7, #48]	; 0x30
 800e764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e76a:	e841 2300 	strex	r3, r2, [r1]
 800e76e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e772:	2b00      	cmp	r3, #0
 800e774:	d1e3      	bne.n	800e73e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2220      	movs	r2, #32
 800e77a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2200      	movs	r2, #0
 800e788:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e790:	693b      	ldr	r3, [r7, #16]
 800e792:	e853 3f00 	ldrex	r3, [r3]
 800e796:	60fb      	str	r3, [r7, #12]
   return(result);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f023 0310 	bic.w	r3, r3, #16
 800e79e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e7ac:	61fb      	str	r3, [r7, #28]
 800e7ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b0:	69b9      	ldr	r1, [r7, #24]
 800e7b2:	69fa      	ldr	r2, [r7, #28]
 800e7b4:	e841 2300 	strex	r3, r2, [r1]
 800e7b8:	617b      	str	r3, [r7, #20]
   return(result);
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d1e4      	bne.n	800e78a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e7c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f000 f881 	bl	800e8d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e7d2:	e063      	b.n	800e89c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e7d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d00e      	beq.n	800e7fe <HAL_UART_IRQHandler+0x6c6>
 800e7e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e7e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d008      	beq.n	800e7fe <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e7f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f001 fe80 	bl	80104fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e7fc:	e051      	b.n	800e8a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e7fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e806:	2b00      	cmp	r3, #0
 800e808:	d014      	beq.n	800e834 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e80a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e812:	2b00      	cmp	r3, #0
 800e814:	d105      	bne.n	800e822 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e81a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d008      	beq.n	800e834 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e826:	2b00      	cmp	r3, #0
 800e828:	d03a      	beq.n	800e8a0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	4798      	blx	r3
    }
    return;
 800e832:	e035      	b.n	800e8a0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d009      	beq.n	800e854 <HAL_UART_IRQHandler+0x71c>
 800e840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d003      	beq.n	800e854 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f001 f90d 	bl	800fa6c <UART_EndTransmit_IT>
    return;
 800e852:	e026      	b.n	800e8a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d009      	beq.n	800e874 <HAL_UART_IRQHandler+0x73c>
 800e860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e864:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d003      	beq.n	800e874 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f001 fe59 	bl	8010524 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e872:	e016      	b.n	800e8a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d010      	beq.n	800e8a2 <HAL_UART_IRQHandler+0x76a>
 800e880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e884:	2b00      	cmp	r3, #0
 800e886:	da0c      	bge.n	800e8a2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f001 fe41 	bl	8010510 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e88e:	e008      	b.n	800e8a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e890:	bf00      	nop
 800e892:	e006      	b.n	800e8a2 <HAL_UART_IRQHandler+0x76a>
    return;
 800e894:	bf00      	nop
 800e896:	e004      	b.n	800e8a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e898:	bf00      	nop
 800e89a:	e002      	b.n	800e8a2 <HAL_UART_IRQHandler+0x76a>
      return;
 800e89c:	bf00      	nop
 800e89e:	e000      	b.n	800e8a2 <HAL_UART_IRQHandler+0x76a>
    return;
 800e8a0:	bf00      	nop
  }
}
 800e8a2:	37e8      	adds	r7, #232	; 0xe8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	effffffe 	.word	0xeffffffe

0800e8ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b083      	sub	sp, #12
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e8b4:	bf00      	nop
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e8c8:	bf00      	nop
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	460b      	mov	r3, r1
 800e8de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e8e0:	bf00      	nop
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e8ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e8f0:	b092      	sub	sp, #72	; 0x48
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	689a      	ldr	r2, [r3, #8]
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	691b      	ldr	r3, [r3, #16]
 800e904:	431a      	orrs	r2, r3
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	695b      	ldr	r3, [r3, #20]
 800e90a:	431a      	orrs	r2, r3
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	69db      	ldr	r3, [r3, #28]
 800e910:	4313      	orrs	r3, r2
 800e912:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	4bbe      	ldr	r3, [pc, #760]	; (800ec14 <UART_SetConfig+0x328>)
 800e91c:	4013      	ands	r3, r2
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	6812      	ldr	r2, [r2, #0]
 800e922:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e924:	430b      	orrs	r3, r1
 800e926:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	68da      	ldr	r2, [r3, #12]
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	430a      	orrs	r2, r1
 800e93c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	699b      	ldr	r3, [r3, #24]
 800e942:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4ab3      	ldr	r2, [pc, #716]	; (800ec18 <UART_SetConfig+0x32c>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d004      	beq.n	800e958 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	6a1b      	ldr	r3, [r3, #32]
 800e952:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e954:	4313      	orrs	r3, r2
 800e956:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	689a      	ldr	r2, [r3, #8]
 800e95e:	4baf      	ldr	r3, [pc, #700]	; (800ec1c <UART_SetConfig+0x330>)
 800e960:	4013      	ands	r3, r2
 800e962:	697a      	ldr	r2, [r7, #20]
 800e964:	6812      	ldr	r2, [r2, #0]
 800e966:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e968:	430b      	orrs	r3, r1
 800e96a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e972:	f023 010f 	bic.w	r1, r3, #15
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	430a      	orrs	r2, r1
 800e980:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4aa6      	ldr	r2, [pc, #664]	; (800ec20 <UART_SetConfig+0x334>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d177      	bne.n	800ea7c <UART_SetConfig+0x190>
 800e98c:	4ba5      	ldr	r3, [pc, #660]	; (800ec24 <UART_SetConfig+0x338>)
 800e98e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e990:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e994:	2b28      	cmp	r3, #40	; 0x28
 800e996:	d86d      	bhi.n	800ea74 <UART_SetConfig+0x188>
 800e998:	a201      	add	r2, pc, #4	; (adr r2, 800e9a0 <UART_SetConfig+0xb4>)
 800e99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e99e:	bf00      	nop
 800e9a0:	0800ea45 	.word	0x0800ea45
 800e9a4:	0800ea75 	.word	0x0800ea75
 800e9a8:	0800ea75 	.word	0x0800ea75
 800e9ac:	0800ea75 	.word	0x0800ea75
 800e9b0:	0800ea75 	.word	0x0800ea75
 800e9b4:	0800ea75 	.word	0x0800ea75
 800e9b8:	0800ea75 	.word	0x0800ea75
 800e9bc:	0800ea75 	.word	0x0800ea75
 800e9c0:	0800ea4d 	.word	0x0800ea4d
 800e9c4:	0800ea75 	.word	0x0800ea75
 800e9c8:	0800ea75 	.word	0x0800ea75
 800e9cc:	0800ea75 	.word	0x0800ea75
 800e9d0:	0800ea75 	.word	0x0800ea75
 800e9d4:	0800ea75 	.word	0x0800ea75
 800e9d8:	0800ea75 	.word	0x0800ea75
 800e9dc:	0800ea75 	.word	0x0800ea75
 800e9e0:	0800ea55 	.word	0x0800ea55
 800e9e4:	0800ea75 	.word	0x0800ea75
 800e9e8:	0800ea75 	.word	0x0800ea75
 800e9ec:	0800ea75 	.word	0x0800ea75
 800e9f0:	0800ea75 	.word	0x0800ea75
 800e9f4:	0800ea75 	.word	0x0800ea75
 800e9f8:	0800ea75 	.word	0x0800ea75
 800e9fc:	0800ea75 	.word	0x0800ea75
 800ea00:	0800ea5d 	.word	0x0800ea5d
 800ea04:	0800ea75 	.word	0x0800ea75
 800ea08:	0800ea75 	.word	0x0800ea75
 800ea0c:	0800ea75 	.word	0x0800ea75
 800ea10:	0800ea75 	.word	0x0800ea75
 800ea14:	0800ea75 	.word	0x0800ea75
 800ea18:	0800ea75 	.word	0x0800ea75
 800ea1c:	0800ea75 	.word	0x0800ea75
 800ea20:	0800ea65 	.word	0x0800ea65
 800ea24:	0800ea75 	.word	0x0800ea75
 800ea28:	0800ea75 	.word	0x0800ea75
 800ea2c:	0800ea75 	.word	0x0800ea75
 800ea30:	0800ea75 	.word	0x0800ea75
 800ea34:	0800ea75 	.word	0x0800ea75
 800ea38:	0800ea75 	.word	0x0800ea75
 800ea3c:	0800ea75 	.word	0x0800ea75
 800ea40:	0800ea6d 	.word	0x0800ea6d
 800ea44:	2301      	movs	r3, #1
 800ea46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea4a:	e222      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ea4c:	2304      	movs	r3, #4
 800ea4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea52:	e21e      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ea54:	2308      	movs	r3, #8
 800ea56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea5a:	e21a      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ea5c:	2310      	movs	r3, #16
 800ea5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea62:	e216      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ea64:	2320      	movs	r3, #32
 800ea66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea6a:	e212      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ea6c:	2340      	movs	r3, #64	; 0x40
 800ea6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea72:	e20e      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ea74:	2380      	movs	r3, #128	; 0x80
 800ea76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ea7a:	e20a      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a69      	ldr	r2, [pc, #420]	; (800ec28 <UART_SetConfig+0x33c>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d130      	bne.n	800eae8 <UART_SetConfig+0x1fc>
 800ea86:	4b67      	ldr	r3, [pc, #412]	; (800ec24 <UART_SetConfig+0x338>)
 800ea88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea8a:	f003 0307 	and.w	r3, r3, #7
 800ea8e:	2b05      	cmp	r3, #5
 800ea90:	d826      	bhi.n	800eae0 <UART_SetConfig+0x1f4>
 800ea92:	a201      	add	r2, pc, #4	; (adr r2, 800ea98 <UART_SetConfig+0x1ac>)
 800ea94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea98:	0800eab1 	.word	0x0800eab1
 800ea9c:	0800eab9 	.word	0x0800eab9
 800eaa0:	0800eac1 	.word	0x0800eac1
 800eaa4:	0800eac9 	.word	0x0800eac9
 800eaa8:	0800ead1 	.word	0x0800ead1
 800eaac:	0800ead9 	.word	0x0800ead9
 800eab0:	2300      	movs	r3, #0
 800eab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eab6:	e1ec      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eab8:	2304      	movs	r3, #4
 800eaba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eabe:	e1e8      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eac0:	2308      	movs	r3, #8
 800eac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eac6:	e1e4      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eac8:	2310      	movs	r3, #16
 800eaca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eace:	e1e0      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ead0:	2320      	movs	r3, #32
 800ead2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ead6:	e1dc      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ead8:	2340      	movs	r3, #64	; 0x40
 800eada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eade:	e1d8      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eae0:	2380      	movs	r3, #128	; 0x80
 800eae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eae6:	e1d4      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4a4f      	ldr	r2, [pc, #316]	; (800ec2c <UART_SetConfig+0x340>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d130      	bne.n	800eb54 <UART_SetConfig+0x268>
 800eaf2:	4b4c      	ldr	r3, [pc, #304]	; (800ec24 <UART_SetConfig+0x338>)
 800eaf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaf6:	f003 0307 	and.w	r3, r3, #7
 800eafa:	2b05      	cmp	r3, #5
 800eafc:	d826      	bhi.n	800eb4c <UART_SetConfig+0x260>
 800eafe:	a201      	add	r2, pc, #4	; (adr r2, 800eb04 <UART_SetConfig+0x218>)
 800eb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb04:	0800eb1d 	.word	0x0800eb1d
 800eb08:	0800eb25 	.word	0x0800eb25
 800eb0c:	0800eb2d 	.word	0x0800eb2d
 800eb10:	0800eb35 	.word	0x0800eb35
 800eb14:	0800eb3d 	.word	0x0800eb3d
 800eb18:	0800eb45 	.word	0x0800eb45
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb22:	e1b6      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eb24:	2304      	movs	r3, #4
 800eb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb2a:	e1b2      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eb2c:	2308      	movs	r3, #8
 800eb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb32:	e1ae      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eb34:	2310      	movs	r3, #16
 800eb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb3a:	e1aa      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eb3c:	2320      	movs	r3, #32
 800eb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb42:	e1a6      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eb44:	2340      	movs	r3, #64	; 0x40
 800eb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb4a:	e1a2      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eb4c:	2380      	movs	r3, #128	; 0x80
 800eb4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb52:	e19e      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4a35      	ldr	r2, [pc, #212]	; (800ec30 <UART_SetConfig+0x344>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d130      	bne.n	800ebc0 <UART_SetConfig+0x2d4>
 800eb5e:	4b31      	ldr	r3, [pc, #196]	; (800ec24 <UART_SetConfig+0x338>)
 800eb60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb62:	f003 0307 	and.w	r3, r3, #7
 800eb66:	2b05      	cmp	r3, #5
 800eb68:	d826      	bhi.n	800ebb8 <UART_SetConfig+0x2cc>
 800eb6a:	a201      	add	r2, pc, #4	; (adr r2, 800eb70 <UART_SetConfig+0x284>)
 800eb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb70:	0800eb89 	.word	0x0800eb89
 800eb74:	0800eb91 	.word	0x0800eb91
 800eb78:	0800eb99 	.word	0x0800eb99
 800eb7c:	0800eba1 	.word	0x0800eba1
 800eb80:	0800eba9 	.word	0x0800eba9
 800eb84:	0800ebb1 	.word	0x0800ebb1
 800eb88:	2300      	movs	r3, #0
 800eb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb8e:	e180      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eb90:	2304      	movs	r3, #4
 800eb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb96:	e17c      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eb98:	2308      	movs	r3, #8
 800eb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eb9e:	e178      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eba0:	2310      	movs	r3, #16
 800eba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eba6:	e174      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eba8:	2320      	movs	r3, #32
 800ebaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebae:	e170      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ebb0:	2340      	movs	r3, #64	; 0x40
 800ebb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebb6:	e16c      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ebb8:	2380      	movs	r3, #128	; 0x80
 800ebba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebbe:	e168      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4a1b      	ldr	r2, [pc, #108]	; (800ec34 <UART_SetConfig+0x348>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d142      	bne.n	800ec50 <UART_SetConfig+0x364>
 800ebca:	4b16      	ldr	r3, [pc, #88]	; (800ec24 <UART_SetConfig+0x338>)
 800ebcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebce:	f003 0307 	and.w	r3, r3, #7
 800ebd2:	2b05      	cmp	r3, #5
 800ebd4:	d838      	bhi.n	800ec48 <UART_SetConfig+0x35c>
 800ebd6:	a201      	add	r2, pc, #4	; (adr r2, 800ebdc <UART_SetConfig+0x2f0>)
 800ebd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebdc:	0800ebf5 	.word	0x0800ebf5
 800ebe0:	0800ebfd 	.word	0x0800ebfd
 800ebe4:	0800ec05 	.word	0x0800ec05
 800ebe8:	0800ec0d 	.word	0x0800ec0d
 800ebec:	0800ec39 	.word	0x0800ec39
 800ebf0:	0800ec41 	.word	0x0800ec41
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ebfa:	e14a      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ebfc:	2304      	movs	r3, #4
 800ebfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec02:	e146      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ec04:	2308      	movs	r3, #8
 800ec06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec0a:	e142      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ec0c:	2310      	movs	r3, #16
 800ec0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec12:	e13e      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ec14:	cfff69f3 	.word	0xcfff69f3
 800ec18:	58000c00 	.word	0x58000c00
 800ec1c:	11fff4ff 	.word	0x11fff4ff
 800ec20:	40011000 	.word	0x40011000
 800ec24:	58024400 	.word	0x58024400
 800ec28:	40004400 	.word	0x40004400
 800ec2c:	40004800 	.word	0x40004800
 800ec30:	40004c00 	.word	0x40004c00
 800ec34:	40005000 	.word	0x40005000
 800ec38:	2320      	movs	r3, #32
 800ec3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3e:	e128      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ec40:	2340      	movs	r3, #64	; 0x40
 800ec42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec46:	e124      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ec48:	2380      	movs	r3, #128	; 0x80
 800ec4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4e:	e120      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	4acb      	ldr	r2, [pc, #812]	; (800ef84 <UART_SetConfig+0x698>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d176      	bne.n	800ed48 <UART_SetConfig+0x45c>
 800ec5a:	4bcb      	ldr	r3, [pc, #812]	; (800ef88 <UART_SetConfig+0x69c>)
 800ec5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec62:	2b28      	cmp	r3, #40	; 0x28
 800ec64:	d86c      	bhi.n	800ed40 <UART_SetConfig+0x454>
 800ec66:	a201      	add	r2, pc, #4	; (adr r2, 800ec6c <UART_SetConfig+0x380>)
 800ec68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec6c:	0800ed11 	.word	0x0800ed11
 800ec70:	0800ed41 	.word	0x0800ed41
 800ec74:	0800ed41 	.word	0x0800ed41
 800ec78:	0800ed41 	.word	0x0800ed41
 800ec7c:	0800ed41 	.word	0x0800ed41
 800ec80:	0800ed41 	.word	0x0800ed41
 800ec84:	0800ed41 	.word	0x0800ed41
 800ec88:	0800ed41 	.word	0x0800ed41
 800ec8c:	0800ed19 	.word	0x0800ed19
 800ec90:	0800ed41 	.word	0x0800ed41
 800ec94:	0800ed41 	.word	0x0800ed41
 800ec98:	0800ed41 	.word	0x0800ed41
 800ec9c:	0800ed41 	.word	0x0800ed41
 800eca0:	0800ed41 	.word	0x0800ed41
 800eca4:	0800ed41 	.word	0x0800ed41
 800eca8:	0800ed41 	.word	0x0800ed41
 800ecac:	0800ed21 	.word	0x0800ed21
 800ecb0:	0800ed41 	.word	0x0800ed41
 800ecb4:	0800ed41 	.word	0x0800ed41
 800ecb8:	0800ed41 	.word	0x0800ed41
 800ecbc:	0800ed41 	.word	0x0800ed41
 800ecc0:	0800ed41 	.word	0x0800ed41
 800ecc4:	0800ed41 	.word	0x0800ed41
 800ecc8:	0800ed41 	.word	0x0800ed41
 800eccc:	0800ed29 	.word	0x0800ed29
 800ecd0:	0800ed41 	.word	0x0800ed41
 800ecd4:	0800ed41 	.word	0x0800ed41
 800ecd8:	0800ed41 	.word	0x0800ed41
 800ecdc:	0800ed41 	.word	0x0800ed41
 800ece0:	0800ed41 	.word	0x0800ed41
 800ece4:	0800ed41 	.word	0x0800ed41
 800ece8:	0800ed41 	.word	0x0800ed41
 800ecec:	0800ed31 	.word	0x0800ed31
 800ecf0:	0800ed41 	.word	0x0800ed41
 800ecf4:	0800ed41 	.word	0x0800ed41
 800ecf8:	0800ed41 	.word	0x0800ed41
 800ecfc:	0800ed41 	.word	0x0800ed41
 800ed00:	0800ed41 	.word	0x0800ed41
 800ed04:	0800ed41 	.word	0x0800ed41
 800ed08:	0800ed41 	.word	0x0800ed41
 800ed0c:	0800ed39 	.word	0x0800ed39
 800ed10:	2301      	movs	r3, #1
 800ed12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed16:	e0bc      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ed18:	2304      	movs	r3, #4
 800ed1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed1e:	e0b8      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ed20:	2308      	movs	r3, #8
 800ed22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed26:	e0b4      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ed28:	2310      	movs	r3, #16
 800ed2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed2e:	e0b0      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ed30:	2320      	movs	r3, #32
 800ed32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed36:	e0ac      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ed38:	2340      	movs	r3, #64	; 0x40
 800ed3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed3e:	e0a8      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ed40:	2380      	movs	r3, #128	; 0x80
 800ed42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed46:	e0a4      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	4a8f      	ldr	r2, [pc, #572]	; (800ef8c <UART_SetConfig+0x6a0>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d130      	bne.n	800edb4 <UART_SetConfig+0x4c8>
 800ed52:	4b8d      	ldr	r3, [pc, #564]	; (800ef88 <UART_SetConfig+0x69c>)
 800ed54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed56:	f003 0307 	and.w	r3, r3, #7
 800ed5a:	2b05      	cmp	r3, #5
 800ed5c:	d826      	bhi.n	800edac <UART_SetConfig+0x4c0>
 800ed5e:	a201      	add	r2, pc, #4	; (adr r2, 800ed64 <UART_SetConfig+0x478>)
 800ed60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed64:	0800ed7d 	.word	0x0800ed7d
 800ed68:	0800ed85 	.word	0x0800ed85
 800ed6c:	0800ed8d 	.word	0x0800ed8d
 800ed70:	0800ed95 	.word	0x0800ed95
 800ed74:	0800ed9d 	.word	0x0800ed9d
 800ed78:	0800eda5 	.word	0x0800eda5
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed82:	e086      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ed84:	2304      	movs	r3, #4
 800ed86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed8a:	e082      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ed8c:	2308      	movs	r3, #8
 800ed8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed92:	e07e      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ed94:	2310      	movs	r3, #16
 800ed96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed9a:	e07a      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ed9c:	2320      	movs	r3, #32
 800ed9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eda2:	e076      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800eda4:	2340      	movs	r3, #64	; 0x40
 800eda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edaa:	e072      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800edac:	2380      	movs	r3, #128	; 0x80
 800edae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edb2:	e06e      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a75      	ldr	r2, [pc, #468]	; (800ef90 <UART_SetConfig+0x6a4>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d130      	bne.n	800ee20 <UART_SetConfig+0x534>
 800edbe:	4b72      	ldr	r3, [pc, #456]	; (800ef88 <UART_SetConfig+0x69c>)
 800edc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edc2:	f003 0307 	and.w	r3, r3, #7
 800edc6:	2b05      	cmp	r3, #5
 800edc8:	d826      	bhi.n	800ee18 <UART_SetConfig+0x52c>
 800edca:	a201      	add	r2, pc, #4	; (adr r2, 800edd0 <UART_SetConfig+0x4e4>)
 800edcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd0:	0800ede9 	.word	0x0800ede9
 800edd4:	0800edf1 	.word	0x0800edf1
 800edd8:	0800edf9 	.word	0x0800edf9
 800eddc:	0800ee01 	.word	0x0800ee01
 800ede0:	0800ee09 	.word	0x0800ee09
 800ede4:	0800ee11 	.word	0x0800ee11
 800ede8:	2300      	movs	r3, #0
 800edea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edee:	e050      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800edf0:	2304      	movs	r3, #4
 800edf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edf6:	e04c      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800edf8:	2308      	movs	r3, #8
 800edfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edfe:	e048      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ee00:	2310      	movs	r3, #16
 800ee02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee06:	e044      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ee08:	2320      	movs	r3, #32
 800ee0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee0e:	e040      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ee10:	2340      	movs	r3, #64	; 0x40
 800ee12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee16:	e03c      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ee18:	2380      	movs	r3, #128	; 0x80
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee1e:	e038      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4a5b      	ldr	r2, [pc, #364]	; (800ef94 <UART_SetConfig+0x6a8>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d130      	bne.n	800ee8c <UART_SetConfig+0x5a0>
 800ee2a:	4b57      	ldr	r3, [pc, #348]	; (800ef88 <UART_SetConfig+0x69c>)
 800ee2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee2e:	f003 0307 	and.w	r3, r3, #7
 800ee32:	2b05      	cmp	r3, #5
 800ee34:	d826      	bhi.n	800ee84 <UART_SetConfig+0x598>
 800ee36:	a201      	add	r2, pc, #4	; (adr r2, 800ee3c <UART_SetConfig+0x550>)
 800ee38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3c:	0800ee55 	.word	0x0800ee55
 800ee40:	0800ee5d 	.word	0x0800ee5d
 800ee44:	0800ee65 	.word	0x0800ee65
 800ee48:	0800ee6d 	.word	0x0800ee6d
 800ee4c:	0800ee75 	.word	0x0800ee75
 800ee50:	0800ee7d 	.word	0x0800ee7d
 800ee54:	2302      	movs	r3, #2
 800ee56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee5a:	e01a      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ee5c:	2304      	movs	r3, #4
 800ee5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee62:	e016      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ee64:	2308      	movs	r3, #8
 800ee66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee6a:	e012      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ee6c:	2310      	movs	r3, #16
 800ee6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee72:	e00e      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ee74:	2320      	movs	r3, #32
 800ee76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee7a:	e00a      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ee7c:	2340      	movs	r3, #64	; 0x40
 800ee7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee82:	e006      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ee84:	2380      	movs	r3, #128	; 0x80
 800ee86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee8a:	e002      	b.n	800ee92 <UART_SetConfig+0x5a6>
 800ee8c:	2380      	movs	r3, #128	; 0x80
 800ee8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	4a3f      	ldr	r2, [pc, #252]	; (800ef94 <UART_SetConfig+0x6a8>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	f040 80f8 	bne.w	800f08e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ee9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eea2:	2b20      	cmp	r3, #32
 800eea4:	dc46      	bgt.n	800ef34 <UART_SetConfig+0x648>
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	f2c0 8082 	blt.w	800efb0 <UART_SetConfig+0x6c4>
 800eeac:	3b02      	subs	r3, #2
 800eeae:	2b1e      	cmp	r3, #30
 800eeb0:	d87e      	bhi.n	800efb0 <UART_SetConfig+0x6c4>
 800eeb2:	a201      	add	r2, pc, #4	; (adr r2, 800eeb8 <UART_SetConfig+0x5cc>)
 800eeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb8:	0800ef3b 	.word	0x0800ef3b
 800eebc:	0800efb1 	.word	0x0800efb1
 800eec0:	0800ef43 	.word	0x0800ef43
 800eec4:	0800efb1 	.word	0x0800efb1
 800eec8:	0800efb1 	.word	0x0800efb1
 800eecc:	0800efb1 	.word	0x0800efb1
 800eed0:	0800ef53 	.word	0x0800ef53
 800eed4:	0800efb1 	.word	0x0800efb1
 800eed8:	0800efb1 	.word	0x0800efb1
 800eedc:	0800efb1 	.word	0x0800efb1
 800eee0:	0800efb1 	.word	0x0800efb1
 800eee4:	0800efb1 	.word	0x0800efb1
 800eee8:	0800efb1 	.word	0x0800efb1
 800eeec:	0800efb1 	.word	0x0800efb1
 800eef0:	0800ef63 	.word	0x0800ef63
 800eef4:	0800efb1 	.word	0x0800efb1
 800eef8:	0800efb1 	.word	0x0800efb1
 800eefc:	0800efb1 	.word	0x0800efb1
 800ef00:	0800efb1 	.word	0x0800efb1
 800ef04:	0800efb1 	.word	0x0800efb1
 800ef08:	0800efb1 	.word	0x0800efb1
 800ef0c:	0800efb1 	.word	0x0800efb1
 800ef10:	0800efb1 	.word	0x0800efb1
 800ef14:	0800efb1 	.word	0x0800efb1
 800ef18:	0800efb1 	.word	0x0800efb1
 800ef1c:	0800efb1 	.word	0x0800efb1
 800ef20:	0800efb1 	.word	0x0800efb1
 800ef24:	0800efb1 	.word	0x0800efb1
 800ef28:	0800efb1 	.word	0x0800efb1
 800ef2c:	0800efb1 	.word	0x0800efb1
 800ef30:	0800efa3 	.word	0x0800efa3
 800ef34:	2b40      	cmp	r3, #64	; 0x40
 800ef36:	d037      	beq.n	800efa8 <UART_SetConfig+0x6bc>
 800ef38:	e03a      	b.n	800efb0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ef3a:	f7fc fb3d 	bl	800b5b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ef3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ef40:	e03c      	b.n	800efbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7fc fb4c 	bl	800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ef4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef50:	e034      	b.n	800efbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef52:	f107 0318 	add.w	r3, r7, #24
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7fc fc98 	bl	800b88c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef60:	e02c      	b.n	800efbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef62:	4b09      	ldr	r3, [pc, #36]	; (800ef88 <UART_SetConfig+0x69c>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f003 0320 	and.w	r3, r3, #32
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d016      	beq.n	800ef9c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ef6e:	4b06      	ldr	r3, [pc, #24]	; (800ef88 <UART_SetConfig+0x69c>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	08db      	lsrs	r3, r3, #3
 800ef74:	f003 0303 	and.w	r3, r3, #3
 800ef78:	4a07      	ldr	r2, [pc, #28]	; (800ef98 <UART_SetConfig+0x6ac>)
 800ef7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ef7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ef80:	e01c      	b.n	800efbc <UART_SetConfig+0x6d0>
 800ef82:	bf00      	nop
 800ef84:	40011400 	.word	0x40011400
 800ef88:	58024400 	.word	0x58024400
 800ef8c:	40007800 	.word	0x40007800
 800ef90:	40007c00 	.word	0x40007c00
 800ef94:	58000c00 	.word	0x58000c00
 800ef98:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ef9c:	4b9d      	ldr	r3, [pc, #628]	; (800f214 <UART_SetConfig+0x928>)
 800ef9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efa0:	e00c      	b.n	800efbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800efa2:	4b9d      	ldr	r3, [pc, #628]	; (800f218 <UART_SetConfig+0x92c>)
 800efa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efa6:	e009      	b.n	800efbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800efa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800efac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efae:	e005      	b.n	800efbc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800efb0:	2300      	movs	r3, #0
 800efb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800efb4:	2301      	movs	r3, #1
 800efb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800efba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800efbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f000 81de 	beq.w	800f380 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efc8:	4a94      	ldr	r2, [pc, #592]	; (800f21c <UART_SetConfig+0x930>)
 800efca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efce:	461a      	mov	r2, r3
 800efd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efd2:	fbb3 f3f2 	udiv	r3, r3, r2
 800efd6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	685a      	ldr	r2, [r3, #4]
 800efdc:	4613      	mov	r3, r2
 800efde:	005b      	lsls	r3, r3, #1
 800efe0:	4413      	add	r3, r2
 800efe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d305      	bcc.n	800eff4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800efee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d903      	bls.n	800effc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800eff4:	2301      	movs	r3, #1
 800eff6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800effa:	e1c1      	b.n	800f380 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800effc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800effe:	2200      	movs	r2, #0
 800f000:	60bb      	str	r3, [r7, #8]
 800f002:	60fa      	str	r2, [r7, #12]
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f008:	4a84      	ldr	r2, [pc, #528]	; (800f21c <UART_SetConfig+0x930>)
 800f00a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f00e:	b29b      	uxth	r3, r3
 800f010:	2200      	movs	r2, #0
 800f012:	603b      	str	r3, [r7, #0]
 800f014:	607a      	str	r2, [r7, #4]
 800f016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f01a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f01e:	f7f1 f95f 	bl	80002e0 <__aeabi_uldivmod>
 800f022:	4602      	mov	r2, r0
 800f024:	460b      	mov	r3, r1
 800f026:	4610      	mov	r0, r2
 800f028:	4619      	mov	r1, r3
 800f02a:	f04f 0200 	mov.w	r2, #0
 800f02e:	f04f 0300 	mov.w	r3, #0
 800f032:	020b      	lsls	r3, r1, #8
 800f034:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f038:	0202      	lsls	r2, r0, #8
 800f03a:	6979      	ldr	r1, [r7, #20]
 800f03c:	6849      	ldr	r1, [r1, #4]
 800f03e:	0849      	lsrs	r1, r1, #1
 800f040:	2000      	movs	r0, #0
 800f042:	460c      	mov	r4, r1
 800f044:	4605      	mov	r5, r0
 800f046:	eb12 0804 	adds.w	r8, r2, r4
 800f04a:	eb43 0905 	adc.w	r9, r3, r5
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	2200      	movs	r2, #0
 800f054:	469a      	mov	sl, r3
 800f056:	4693      	mov	fp, r2
 800f058:	4652      	mov	r2, sl
 800f05a:	465b      	mov	r3, fp
 800f05c:	4640      	mov	r0, r8
 800f05e:	4649      	mov	r1, r9
 800f060:	f7f1 f93e 	bl	80002e0 <__aeabi_uldivmod>
 800f064:	4602      	mov	r2, r0
 800f066:	460b      	mov	r3, r1
 800f068:	4613      	mov	r3, r2
 800f06a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f072:	d308      	bcc.n	800f086 <UART_SetConfig+0x79a>
 800f074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f07a:	d204      	bcs.n	800f086 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f082:	60da      	str	r2, [r3, #12]
 800f084:	e17c      	b.n	800f380 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f086:	2301      	movs	r3, #1
 800f088:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f08c:	e178      	b.n	800f380 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	69db      	ldr	r3, [r3, #28]
 800f092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f096:	f040 80c5 	bne.w	800f224 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f09a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f09e:	2b20      	cmp	r3, #32
 800f0a0:	dc48      	bgt.n	800f134 <UART_SetConfig+0x848>
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	db7b      	blt.n	800f19e <UART_SetConfig+0x8b2>
 800f0a6:	2b20      	cmp	r3, #32
 800f0a8:	d879      	bhi.n	800f19e <UART_SetConfig+0x8b2>
 800f0aa:	a201      	add	r2, pc, #4	; (adr r2, 800f0b0 <UART_SetConfig+0x7c4>)
 800f0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0b0:	0800f13b 	.word	0x0800f13b
 800f0b4:	0800f143 	.word	0x0800f143
 800f0b8:	0800f19f 	.word	0x0800f19f
 800f0bc:	0800f19f 	.word	0x0800f19f
 800f0c0:	0800f14b 	.word	0x0800f14b
 800f0c4:	0800f19f 	.word	0x0800f19f
 800f0c8:	0800f19f 	.word	0x0800f19f
 800f0cc:	0800f19f 	.word	0x0800f19f
 800f0d0:	0800f15b 	.word	0x0800f15b
 800f0d4:	0800f19f 	.word	0x0800f19f
 800f0d8:	0800f19f 	.word	0x0800f19f
 800f0dc:	0800f19f 	.word	0x0800f19f
 800f0e0:	0800f19f 	.word	0x0800f19f
 800f0e4:	0800f19f 	.word	0x0800f19f
 800f0e8:	0800f19f 	.word	0x0800f19f
 800f0ec:	0800f19f 	.word	0x0800f19f
 800f0f0:	0800f16b 	.word	0x0800f16b
 800f0f4:	0800f19f 	.word	0x0800f19f
 800f0f8:	0800f19f 	.word	0x0800f19f
 800f0fc:	0800f19f 	.word	0x0800f19f
 800f100:	0800f19f 	.word	0x0800f19f
 800f104:	0800f19f 	.word	0x0800f19f
 800f108:	0800f19f 	.word	0x0800f19f
 800f10c:	0800f19f 	.word	0x0800f19f
 800f110:	0800f19f 	.word	0x0800f19f
 800f114:	0800f19f 	.word	0x0800f19f
 800f118:	0800f19f 	.word	0x0800f19f
 800f11c:	0800f19f 	.word	0x0800f19f
 800f120:	0800f19f 	.word	0x0800f19f
 800f124:	0800f19f 	.word	0x0800f19f
 800f128:	0800f19f 	.word	0x0800f19f
 800f12c:	0800f19f 	.word	0x0800f19f
 800f130:	0800f191 	.word	0x0800f191
 800f134:	2b40      	cmp	r3, #64	; 0x40
 800f136:	d02e      	beq.n	800f196 <UART_SetConfig+0x8aa>
 800f138:	e031      	b.n	800f19e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f13a:	f7fa fa45 	bl	80095c8 <HAL_RCC_GetPCLK1Freq>
 800f13e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f140:	e033      	b.n	800f1aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f142:	f7fa fa57 	bl	80095f4 <HAL_RCC_GetPCLK2Freq>
 800f146:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f148:	e02f      	b.n	800f1aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f14a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f14e:	4618      	mov	r0, r3
 800f150:	f7fc fa48 	bl	800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f158:	e027      	b.n	800f1aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f15a:	f107 0318 	add.w	r3, r7, #24
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fc fb94 	bl	800b88c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f168:	e01f      	b.n	800f1aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f16a:	4b2d      	ldr	r3, [pc, #180]	; (800f220 <UART_SetConfig+0x934>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f003 0320 	and.w	r3, r3, #32
 800f172:	2b00      	cmp	r3, #0
 800f174:	d009      	beq.n	800f18a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f176:	4b2a      	ldr	r3, [pc, #168]	; (800f220 <UART_SetConfig+0x934>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	08db      	lsrs	r3, r3, #3
 800f17c:	f003 0303 	and.w	r3, r3, #3
 800f180:	4a24      	ldr	r2, [pc, #144]	; (800f214 <UART_SetConfig+0x928>)
 800f182:	fa22 f303 	lsr.w	r3, r2, r3
 800f186:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f188:	e00f      	b.n	800f1aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f18a:	4b22      	ldr	r3, [pc, #136]	; (800f214 <UART_SetConfig+0x928>)
 800f18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f18e:	e00c      	b.n	800f1aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f190:	4b21      	ldr	r3, [pc, #132]	; (800f218 <UART_SetConfig+0x92c>)
 800f192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f194:	e009      	b.n	800f1aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f19c:	e005      	b.n	800f1aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f1a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	f000 80e7 	beq.w	800f380 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b6:	4a19      	ldr	r2, [pc, #100]	; (800f21c <UART_SetConfig+0x930>)
 800f1b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1bc:	461a      	mov	r2, r3
 800f1be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1c4:	005a      	lsls	r2, r3, #1
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	685b      	ldr	r3, [r3, #4]
 800f1ca:	085b      	lsrs	r3, r3, #1
 800f1cc:	441a      	add	r2, r3
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1da:	2b0f      	cmp	r3, #15
 800f1dc:	d916      	bls.n	800f20c <UART_SetConfig+0x920>
 800f1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1e4:	d212      	bcs.n	800f20c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	f023 030f 	bic.w	r3, r3, #15
 800f1ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f2:	085b      	lsrs	r3, r3, #1
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	f003 0307 	and.w	r3, r3, #7
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f1fe:	4313      	orrs	r3, r2
 800f200:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f208:	60da      	str	r2, [r3, #12]
 800f20a:	e0b9      	b.n	800f380 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f20c:	2301      	movs	r3, #1
 800f20e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f212:	e0b5      	b.n	800f380 <UART_SetConfig+0xa94>
 800f214:	03d09000 	.word	0x03d09000
 800f218:	003d0900 	.word	0x003d0900
 800f21c:	08014678 	.word	0x08014678
 800f220:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f224:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f228:	2b20      	cmp	r3, #32
 800f22a:	dc49      	bgt.n	800f2c0 <UART_SetConfig+0x9d4>
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	db7c      	blt.n	800f32a <UART_SetConfig+0xa3e>
 800f230:	2b20      	cmp	r3, #32
 800f232:	d87a      	bhi.n	800f32a <UART_SetConfig+0xa3e>
 800f234:	a201      	add	r2, pc, #4	; (adr r2, 800f23c <UART_SetConfig+0x950>)
 800f236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f23a:	bf00      	nop
 800f23c:	0800f2c7 	.word	0x0800f2c7
 800f240:	0800f2cf 	.word	0x0800f2cf
 800f244:	0800f32b 	.word	0x0800f32b
 800f248:	0800f32b 	.word	0x0800f32b
 800f24c:	0800f2d7 	.word	0x0800f2d7
 800f250:	0800f32b 	.word	0x0800f32b
 800f254:	0800f32b 	.word	0x0800f32b
 800f258:	0800f32b 	.word	0x0800f32b
 800f25c:	0800f2e7 	.word	0x0800f2e7
 800f260:	0800f32b 	.word	0x0800f32b
 800f264:	0800f32b 	.word	0x0800f32b
 800f268:	0800f32b 	.word	0x0800f32b
 800f26c:	0800f32b 	.word	0x0800f32b
 800f270:	0800f32b 	.word	0x0800f32b
 800f274:	0800f32b 	.word	0x0800f32b
 800f278:	0800f32b 	.word	0x0800f32b
 800f27c:	0800f2f7 	.word	0x0800f2f7
 800f280:	0800f32b 	.word	0x0800f32b
 800f284:	0800f32b 	.word	0x0800f32b
 800f288:	0800f32b 	.word	0x0800f32b
 800f28c:	0800f32b 	.word	0x0800f32b
 800f290:	0800f32b 	.word	0x0800f32b
 800f294:	0800f32b 	.word	0x0800f32b
 800f298:	0800f32b 	.word	0x0800f32b
 800f29c:	0800f32b 	.word	0x0800f32b
 800f2a0:	0800f32b 	.word	0x0800f32b
 800f2a4:	0800f32b 	.word	0x0800f32b
 800f2a8:	0800f32b 	.word	0x0800f32b
 800f2ac:	0800f32b 	.word	0x0800f32b
 800f2b0:	0800f32b 	.word	0x0800f32b
 800f2b4:	0800f32b 	.word	0x0800f32b
 800f2b8:	0800f32b 	.word	0x0800f32b
 800f2bc:	0800f31d 	.word	0x0800f31d
 800f2c0:	2b40      	cmp	r3, #64	; 0x40
 800f2c2:	d02e      	beq.n	800f322 <UART_SetConfig+0xa36>
 800f2c4:	e031      	b.n	800f32a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f2c6:	f7fa f97f 	bl	80095c8 <HAL_RCC_GetPCLK1Freq>
 800f2ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f2cc:	e033      	b.n	800f336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f2ce:	f7fa f991 	bl	80095f4 <HAL_RCC_GetPCLK2Freq>
 800f2d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f2d4:	e02f      	b.n	800f336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7fc f982 	bl	800b5e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2e4:	e027      	b.n	800f336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2e6:	f107 0318 	add.w	r3, r7, #24
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fc face 	bl	800b88c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f2f0:	69fb      	ldr	r3, [r7, #28]
 800f2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2f4:	e01f      	b.n	800f336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f2f6:	4b2d      	ldr	r3, [pc, #180]	; (800f3ac <UART_SetConfig+0xac0>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f003 0320 	and.w	r3, r3, #32
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d009      	beq.n	800f316 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f302:	4b2a      	ldr	r3, [pc, #168]	; (800f3ac <UART_SetConfig+0xac0>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	08db      	lsrs	r3, r3, #3
 800f308:	f003 0303 	and.w	r3, r3, #3
 800f30c:	4a28      	ldr	r2, [pc, #160]	; (800f3b0 <UART_SetConfig+0xac4>)
 800f30e:	fa22 f303 	lsr.w	r3, r2, r3
 800f312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f314:	e00f      	b.n	800f336 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f316:	4b26      	ldr	r3, [pc, #152]	; (800f3b0 <UART_SetConfig+0xac4>)
 800f318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f31a:	e00c      	b.n	800f336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f31c:	4b25      	ldr	r3, [pc, #148]	; (800f3b4 <UART_SetConfig+0xac8>)
 800f31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f320:	e009      	b.n	800f336 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f328:	e005      	b.n	800f336 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f32a:	2300      	movs	r3, #0
 800f32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f32e:	2301      	movs	r3, #1
 800f330:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f334:	bf00      	nop
    }

    if (pclk != 0U)
 800f336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d021      	beq.n	800f380 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f340:	4a1d      	ldr	r2, [pc, #116]	; (800f3b8 <UART_SetConfig+0xacc>)
 800f342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f346:	461a      	mov	r2, r3
 800f348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f34a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	085b      	lsrs	r3, r3, #1
 800f354:	441a      	add	r2, r3
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	685b      	ldr	r3, [r3, #4]
 800f35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f35e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f362:	2b0f      	cmp	r3, #15
 800f364:	d909      	bls.n	800f37a <UART_SetConfig+0xa8e>
 800f366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f36c:	d205      	bcs.n	800f37a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f370:	b29a      	uxth	r2, r3
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	60da      	str	r2, [r3, #12]
 800f378:	e002      	b.n	800f380 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f37a:	2301      	movs	r3, #1
 800f37c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	2201      	movs	r2, #1
 800f384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	2201      	movs	r2, #1
 800f38c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	2200      	movs	r2, #0
 800f394:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	2200      	movs	r2, #0
 800f39a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f39c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3748      	adds	r7, #72	; 0x48
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f3aa:	bf00      	nop
 800f3ac:	58024400 	.word	0x58024400
 800f3b0:	03d09000 	.word	0x03d09000
 800f3b4:	003d0900 	.word	0x003d0900
 800f3b8:	08014678 	.word	0x08014678

0800f3bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3c8:	f003 0308 	and.w	r3, r3, #8
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d00a      	beq.n	800f3e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	430a      	orrs	r2, r1
 800f3e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ea:	f003 0301 	and.w	r3, r3, #1
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d00a      	beq.n	800f408 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	430a      	orrs	r2, r1
 800f406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f40c:	f003 0302 	and.w	r3, r3, #2
 800f410:	2b00      	cmp	r3, #0
 800f412:	d00a      	beq.n	800f42a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	430a      	orrs	r2, r1
 800f428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f42e:	f003 0304 	and.w	r3, r3, #4
 800f432:	2b00      	cmp	r3, #0
 800f434:	d00a      	beq.n	800f44c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	685b      	ldr	r3, [r3, #4]
 800f43c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	430a      	orrs	r2, r1
 800f44a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f450:	f003 0310 	and.w	r3, r3, #16
 800f454:	2b00      	cmp	r3, #0
 800f456:	d00a      	beq.n	800f46e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	689b      	ldr	r3, [r3, #8]
 800f45e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	430a      	orrs	r2, r1
 800f46c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f472:	f003 0320 	and.w	r3, r3, #32
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00a      	beq.n	800f490 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	689b      	ldr	r3, [r3, #8]
 800f480:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	430a      	orrs	r2, r1
 800f48e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d01a      	beq.n	800f4d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	430a      	orrs	r2, r1
 800f4b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4ba:	d10a      	bne.n	800f4d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	430a      	orrs	r2, r1
 800f4d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00a      	beq.n	800f4f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	430a      	orrs	r2, r1
 800f4f2:	605a      	str	r2, [r3, #4]
  }
}
 800f4f4:	bf00      	nop
 800f4f6:	370c      	adds	r7, #12
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fe:	4770      	bx	lr

0800f500 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b098      	sub	sp, #96	; 0x60
 800f504:	af02      	add	r7, sp, #8
 800f506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2200      	movs	r2, #0
 800f50c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f510:	f7f3 fde0 	bl	80030d4 <HAL_GetTick>
 800f514:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f003 0308 	and.w	r3, r3, #8
 800f520:	2b08      	cmp	r3, #8
 800f522:	d12f      	bne.n	800f584 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f528:	9300      	str	r3, [sp, #0]
 800f52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f52c:	2200      	movs	r2, #0
 800f52e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f000 f88e 	bl	800f654 <UART_WaitOnFlagUntilTimeout>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d022      	beq.n	800f584 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f546:	e853 3f00 	ldrex	r3, [r3]
 800f54a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f54e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f552:	653b      	str	r3, [r7, #80]	; 0x50
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	461a      	mov	r2, r3
 800f55a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f55c:	647b      	str	r3, [r7, #68]	; 0x44
 800f55e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f560:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f564:	e841 2300 	strex	r3, r2, [r1]
 800f568:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1e6      	bne.n	800f53e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2220      	movs	r2, #32
 800f574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f580:	2303      	movs	r3, #3
 800f582:	e063      	b.n	800f64c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f003 0304 	and.w	r3, r3, #4
 800f58e:	2b04      	cmp	r3, #4
 800f590:	d149      	bne.n	800f626 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f592:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f59a:	2200      	movs	r2, #0
 800f59c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f000 f857 	bl	800f654 <UART_WaitOnFlagUntilTimeout>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d03c      	beq.n	800f626 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b4:	e853 3f00 	ldrex	r3, [r3]
 800f5b8:	623b      	str	r3, [r7, #32]
   return(result);
 800f5ba:	6a3b      	ldr	r3, [r7, #32]
 800f5bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f5c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ca:	633b      	str	r3, [r7, #48]	; 0x30
 800f5cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5d2:	e841 2300 	strex	r3, r2, [r1]
 800f5d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d1e6      	bne.n	800f5ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	3308      	adds	r3, #8
 800f5e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	e853 3f00 	ldrex	r3, [r3]
 800f5ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f023 0301 	bic.w	r3, r3, #1
 800f5f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	3308      	adds	r3, #8
 800f5fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f5fe:	61fa      	str	r2, [r7, #28]
 800f600:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f602:	69b9      	ldr	r1, [r7, #24]
 800f604:	69fa      	ldr	r2, [r7, #28]
 800f606:	e841 2300 	strex	r3, r2, [r1]
 800f60a:	617b      	str	r3, [r7, #20]
   return(result);
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d1e5      	bne.n	800f5de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2220      	movs	r2, #32
 800f616:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f622:	2303      	movs	r3, #3
 800f624:	e012      	b.n	800f64c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2220      	movs	r2, #32
 800f62a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2220      	movs	r2, #32
 800f632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2200      	movs	r2, #0
 800f63a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2200      	movs	r2, #0
 800f646:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f64a:	2300      	movs	r3, #0
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3758      	adds	r7, #88	; 0x58
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b084      	sub	sp, #16
 800f658:	af00      	add	r7, sp, #0
 800f65a:	60f8      	str	r0, [r7, #12]
 800f65c:	60b9      	str	r1, [r7, #8]
 800f65e:	603b      	str	r3, [r7, #0]
 800f660:	4613      	mov	r3, r2
 800f662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f664:	e04f      	b.n	800f706 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f66c:	d04b      	beq.n	800f706 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f66e:	f7f3 fd31 	bl	80030d4 <HAL_GetTick>
 800f672:	4602      	mov	r2, r0
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	1ad3      	subs	r3, r2, r3
 800f678:	69ba      	ldr	r2, [r7, #24]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d302      	bcc.n	800f684 <UART_WaitOnFlagUntilTimeout+0x30>
 800f67e:	69bb      	ldr	r3, [r7, #24]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d101      	bne.n	800f688 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f684:	2303      	movs	r3, #3
 800f686:	e04e      	b.n	800f726 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f003 0304 	and.w	r3, r3, #4
 800f692:	2b00      	cmp	r3, #0
 800f694:	d037      	beq.n	800f706 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	2b80      	cmp	r3, #128	; 0x80
 800f69a:	d034      	beq.n	800f706 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f69c:	68bb      	ldr	r3, [r7, #8]
 800f69e:	2b40      	cmp	r3, #64	; 0x40
 800f6a0:	d031      	beq.n	800f706 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	69db      	ldr	r3, [r3, #28]
 800f6a8:	f003 0308 	and.w	r3, r3, #8
 800f6ac:	2b08      	cmp	r3, #8
 800f6ae:	d110      	bne.n	800f6d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	2208      	movs	r2, #8
 800f6b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f6b8:	68f8      	ldr	r0, [r7, #12]
 800f6ba:	f000 f95b 	bl	800f974 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2208      	movs	r2, #8
 800f6c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e029      	b.n	800f726 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	69db      	ldr	r3, [r3, #28]
 800f6d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6e0:	d111      	bne.n	800f706 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f6ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f6ec:	68f8      	ldr	r0, [r7, #12]
 800f6ee:	f000 f941 	bl	800f974 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2220      	movs	r2, #32
 800f6f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f702:	2303      	movs	r3, #3
 800f704:	e00f      	b.n	800f726 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	69da      	ldr	r2, [r3, #28]
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	4013      	ands	r3, r2
 800f710:	68ba      	ldr	r2, [r7, #8]
 800f712:	429a      	cmp	r2, r3
 800f714:	bf0c      	ite	eq
 800f716:	2301      	moveq	r3, #1
 800f718:	2300      	movne	r3, #0
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	461a      	mov	r2, r3
 800f71e:	79fb      	ldrb	r3, [r7, #7]
 800f720:	429a      	cmp	r2, r3
 800f722:	d0a0      	beq.n	800f666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
	...

0800f730 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f730:	b480      	push	{r7}
 800f732:	b0a3      	sub	sp, #140	; 0x8c
 800f734:	af00      	add	r7, sp, #0
 800f736:	60f8      	str	r0, [r7, #12]
 800f738:	60b9      	str	r1, [r7, #8]
 800f73a:	4613      	mov	r3, r2
 800f73c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	68ba      	ldr	r2, [r7, #8]
 800f742:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	88fa      	ldrh	r2, [r7, #6]
 800f748:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	88fa      	ldrh	r2, [r7, #6]
 800f750:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2200      	movs	r2, #0
 800f758:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	689b      	ldr	r3, [r3, #8]
 800f75e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f762:	d10e      	bne.n	800f782 <UART_Start_Receive_IT+0x52>
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	691b      	ldr	r3, [r3, #16]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d105      	bne.n	800f778 <UART_Start_Receive_IT+0x48>
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f772:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f776:	e02d      	b.n	800f7d4 <UART_Start_Receive_IT+0xa4>
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	22ff      	movs	r2, #255	; 0xff
 800f77c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f780:	e028      	b.n	800f7d4 <UART_Start_Receive_IT+0xa4>
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	689b      	ldr	r3, [r3, #8]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d10d      	bne.n	800f7a6 <UART_Start_Receive_IT+0x76>
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	691b      	ldr	r3, [r3, #16]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d104      	bne.n	800f79c <UART_Start_Receive_IT+0x6c>
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	22ff      	movs	r2, #255	; 0xff
 800f796:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f79a:	e01b      	b.n	800f7d4 <UART_Start_Receive_IT+0xa4>
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	227f      	movs	r2, #127	; 0x7f
 800f7a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f7a4:	e016      	b.n	800f7d4 <UART_Start_Receive_IT+0xa4>
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f7ae:	d10d      	bne.n	800f7cc <UART_Start_Receive_IT+0x9c>
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	691b      	ldr	r3, [r3, #16]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d104      	bne.n	800f7c2 <UART_Start_Receive_IT+0x92>
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	227f      	movs	r2, #127	; 0x7f
 800f7bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f7c0:	e008      	b.n	800f7d4 <UART_Start_Receive_IT+0xa4>
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	223f      	movs	r2, #63	; 0x3f
 800f7c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f7ca:	e003      	b.n	800f7d4 <UART_Start_Receive_IT+0xa4>
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2222      	movs	r2, #34	; 0x22
 800f7e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	3308      	adds	r3, #8
 800f7ea:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7ee:	e853 3f00 	ldrex	r3, [r3]
 800f7f2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f7f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7f6:	f043 0301 	orr.w	r3, r3, #1
 800f7fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	3308      	adds	r3, #8
 800f804:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f808:	673a      	str	r2, [r7, #112]	; 0x70
 800f80a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f80c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f80e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f810:	e841 2300 	strex	r3, r2, [r1]
 800f814:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f816:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d1e3      	bne.n	800f7e4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f824:	d14f      	bne.n	800f8c6 <UART_Start_Receive_IT+0x196>
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f82c:	88fa      	ldrh	r2, [r7, #6]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d349      	bcc.n	800f8c6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	689b      	ldr	r3, [r3, #8]
 800f836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f83a:	d107      	bne.n	800f84c <UART_Start_Receive_IT+0x11c>
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	691b      	ldr	r3, [r3, #16]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d103      	bne.n	800f84c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	4a47      	ldr	r2, [pc, #284]	; (800f964 <UART_Start_Receive_IT+0x234>)
 800f848:	675a      	str	r2, [r3, #116]	; 0x74
 800f84a:	e002      	b.n	800f852 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	4a46      	ldr	r2, [pc, #280]	; (800f968 <UART_Start_Receive_IT+0x238>)
 800f850:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	691b      	ldr	r3, [r3, #16]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d01a      	beq.n	800f890 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f862:	e853 3f00 	ldrex	r3, [r3]
 800f866:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f86a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f86e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	461a      	mov	r2, r3
 800f878:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f87c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f87e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f880:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f882:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f884:	e841 2300 	strex	r3, r2, [r1]
 800f888:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f88a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d1e4      	bne.n	800f85a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	3308      	adds	r3, #8
 800f896:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f89a:	e853 3f00 	ldrex	r3, [r3]
 800f89e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	3308      	adds	r3, #8
 800f8ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f8b0:	64ba      	str	r2, [r7, #72]	; 0x48
 800f8b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8b8:	e841 2300 	strex	r3, r2, [r1]
 800f8bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f8be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d1e5      	bne.n	800f890 <UART_Start_Receive_IT+0x160>
 800f8c4:	e046      	b.n	800f954 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	689b      	ldr	r3, [r3, #8]
 800f8ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8ce:	d107      	bne.n	800f8e0 <UART_Start_Receive_IT+0x1b0>
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	691b      	ldr	r3, [r3, #16]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d103      	bne.n	800f8e0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	4a24      	ldr	r2, [pc, #144]	; (800f96c <UART_Start_Receive_IT+0x23c>)
 800f8dc:	675a      	str	r2, [r3, #116]	; 0x74
 800f8de:	e002      	b.n	800f8e6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	4a23      	ldr	r2, [pc, #140]	; (800f970 <UART_Start_Receive_IT+0x240>)
 800f8e4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	691b      	ldr	r3, [r3, #16]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d019      	beq.n	800f922 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f6:	e853 3f00 	ldrex	r3, [r3]
 800f8fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f902:	677b      	str	r3, [r7, #116]	; 0x74
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	461a      	mov	r2, r3
 800f90a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f90c:	637b      	str	r3, [r7, #52]	; 0x34
 800f90e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f910:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f914:	e841 2300 	strex	r3, r2, [r1]
 800f918:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d1e6      	bne.n	800f8ee <UART_Start_Receive_IT+0x1be>
 800f920:	e018      	b.n	800f954 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	e853 3f00 	ldrex	r3, [r3]
 800f92e:	613b      	str	r3, [r7, #16]
   return(result);
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	f043 0320 	orr.w	r3, r3, #32
 800f936:	67bb      	str	r3, [r7, #120]	; 0x78
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	461a      	mov	r2, r3
 800f93e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f940:	623b      	str	r3, [r7, #32]
 800f942:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f944:	69f9      	ldr	r1, [r7, #28]
 800f946:	6a3a      	ldr	r2, [r7, #32]
 800f948:	e841 2300 	strex	r3, r2, [r1]
 800f94c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d1e6      	bne.n	800f922 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f954:	2300      	movs	r3, #0
}
 800f956:	4618      	mov	r0, r3
 800f958:	378c      	adds	r7, #140	; 0x8c
 800f95a:	46bd      	mov	sp, r7
 800f95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f960:	4770      	bx	lr
 800f962:	bf00      	nop
 800f964:	08010195 	.word	0x08010195
 800f968:	0800fe35 	.word	0x0800fe35
 800f96c:	0800fc7d 	.word	0x0800fc7d
 800f970:	0800fac5 	.word	0x0800fac5

0800f974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f974:	b480      	push	{r7}
 800f976:	b095      	sub	sp, #84	; 0x54
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f984:	e853 3f00 	ldrex	r3, [r3]
 800f988:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f98c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f990:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	461a      	mov	r2, r3
 800f998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f99a:	643b      	str	r3, [r7, #64]	; 0x40
 800f99c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f99e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f9a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f9a2:	e841 2300 	strex	r3, r2, [r1]
 800f9a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d1e6      	bne.n	800f97c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	3308      	adds	r3, #8
 800f9b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b6:	6a3b      	ldr	r3, [r7, #32]
 800f9b8:	e853 3f00 	ldrex	r3, [r3]
 800f9bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800f9be:	69fa      	ldr	r2, [r7, #28]
 800f9c0:	4b1e      	ldr	r3, [pc, #120]	; (800fa3c <UART_EndRxTransfer+0xc8>)
 800f9c2:	4013      	ands	r3, r2
 800f9c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	3308      	adds	r3, #8
 800f9cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f9d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f9d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9d6:	e841 2300 	strex	r3, r2, [r1]
 800f9da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d1e5      	bne.n	800f9ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9e6:	2b01      	cmp	r3, #1
 800f9e8:	d118      	bne.n	800fa1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	e853 3f00 	ldrex	r3, [r3]
 800f9f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	f023 0310 	bic.w	r3, r3, #16
 800f9fe:	647b      	str	r3, [r7, #68]	; 0x44
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	461a      	mov	r2, r3
 800fa06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa08:	61bb      	str	r3, [r7, #24]
 800fa0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa0c:	6979      	ldr	r1, [r7, #20]
 800fa0e:	69ba      	ldr	r2, [r7, #24]
 800fa10:	e841 2300 	strex	r3, r2, [r1]
 800fa14:	613b      	str	r3, [r7, #16]
   return(result);
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d1e6      	bne.n	800f9ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2220      	movs	r2, #32
 800fa20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800fa30:	bf00      	nop
 800fa32:	3754      	adds	r7, #84	; 0x54
 800fa34:	46bd      	mov	sp, r7
 800fa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3a:	4770      	bx	lr
 800fa3c:	effffffe 	.word	0xeffffffe

0800fa40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b084      	sub	sp, #16
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2200      	movs	r2, #0
 800fa52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f7fe ff2e 	bl	800e8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa64:	bf00      	nop
 800fa66:	3710      	adds	r7, #16
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}

0800fa6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b088      	sub	sp, #32
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	e853 3f00 	ldrex	r3, [r3]
 800fa80:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa88:	61fb      	str	r3, [r7, #28]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	461a      	mov	r2, r3
 800fa90:	69fb      	ldr	r3, [r7, #28]
 800fa92:	61bb      	str	r3, [r7, #24]
 800fa94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa96:	6979      	ldr	r1, [r7, #20]
 800fa98:	69ba      	ldr	r2, [r7, #24]
 800fa9a:	e841 2300 	strex	r3, r2, [r1]
 800fa9e:	613b      	str	r3, [r7, #16]
   return(result);
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d1e6      	bne.n	800fa74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2220      	movs	r2, #32
 800faaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2200      	movs	r2, #0
 800fab2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f7fe fef9 	bl	800e8ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800faba:	bf00      	nop
 800fabc:	3720      	adds	r7, #32
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
	...

0800fac4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b09c      	sub	sp, #112	; 0x70
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fad2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fadc:	2b22      	cmp	r3, #34	; 0x22
 800fade:	f040 80be 	bne.w	800fc5e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800faec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800faf0:	b2d9      	uxtb	r1, r3
 800faf2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800faf6:	b2da      	uxtb	r2, r3
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fafc:	400a      	ands	r2, r1
 800fafe:	b2d2      	uxtb	r2, r2
 800fb00:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb06:	1c5a      	adds	r2, r3, #1
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb12:	b29b      	uxth	r3, r3
 800fb14:	3b01      	subs	r3, #1
 800fb16:	b29a      	uxth	r2, r3
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb24:	b29b      	uxth	r3, r3
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	f040 80a1 	bne.w	800fc6e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb34:	e853 3f00 	ldrex	r3, [r3]
 800fb38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fb3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fb40:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	461a      	mov	r2, r3
 800fb48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb4a:	65bb      	str	r3, [r7, #88]	; 0x58
 800fb4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fb50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fb52:	e841 2300 	strex	r3, r2, [r1]
 800fb56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fb58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d1e6      	bne.n	800fb2c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	3308      	adds	r3, #8
 800fb64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb68:	e853 3f00 	ldrex	r3, [r3]
 800fb6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb70:	f023 0301 	bic.w	r3, r3, #1
 800fb74:	667b      	str	r3, [r7, #100]	; 0x64
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	3308      	adds	r3, #8
 800fb7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fb7e:	647a      	str	r2, [r7, #68]	; 0x44
 800fb80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fb84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb86:	e841 2300 	strex	r3, r2, [r1]
 800fb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fb8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d1e5      	bne.n	800fb5e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2220      	movs	r2, #32
 800fb96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2200      	movs	r2, #0
 800fba4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4a33      	ldr	r2, [pc, #204]	; (800fc78 <UART_RxISR_8BIT+0x1b4>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d01f      	beq.n	800fbf0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d018      	beq.n	800fbf0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc6:	e853 3f00 	ldrex	r3, [r3]
 800fbca:	623b      	str	r3, [r7, #32]
   return(result);
 800fbcc:	6a3b      	ldr	r3, [r7, #32]
 800fbce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fbd2:	663b      	str	r3, [r7, #96]	; 0x60
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	461a      	mov	r2, r3
 800fbda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fbdc:	633b      	str	r3, [r7, #48]	; 0x30
 800fbde:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbe4:	e841 2300 	strex	r3, r2, [r1]
 800fbe8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1e6      	bne.n	800fbbe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	d12e      	bne.n	800fc56 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	e853 3f00 	ldrex	r3, [r3]
 800fc0a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f023 0310 	bic.w	r3, r3, #16
 800fc12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	461a      	mov	r2, r3
 800fc1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc1c:	61fb      	str	r3, [r7, #28]
 800fc1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc20:	69b9      	ldr	r1, [r7, #24]
 800fc22:	69fa      	ldr	r2, [r7, #28]
 800fc24:	e841 2300 	strex	r3, r2, [r1]
 800fc28:	617b      	str	r3, [r7, #20]
   return(result);
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d1e6      	bne.n	800fbfe <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	69db      	ldr	r3, [r3, #28]
 800fc36:	f003 0310 	and.w	r3, r3, #16
 800fc3a:	2b10      	cmp	r3, #16
 800fc3c:	d103      	bne.n	800fc46 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2210      	movs	r2, #16
 800fc44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f7fe fe40 	bl	800e8d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fc54:	e00b      	b.n	800fc6e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f7f1 fa8c 	bl	8001174 <HAL_UART_RxCpltCallback>
}
 800fc5c:	e007      	b.n	800fc6e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	699a      	ldr	r2, [r3, #24]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f042 0208 	orr.w	r2, r2, #8
 800fc6c:	619a      	str	r2, [r3, #24]
}
 800fc6e:	bf00      	nop
 800fc70:	3770      	adds	r7, #112	; 0x70
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	58000c00 	.word	0x58000c00

0800fc7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b09c      	sub	sp, #112	; 0x70
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc8a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc94:	2b22      	cmp	r3, #34	; 0x22
 800fc96:	f040 80be 	bne.w	800fe16 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fca8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800fcaa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800fcae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800fcb2:	4013      	ands	r3, r2
 800fcb4:	b29a      	uxth	r2, r3
 800fcb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fcb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcbe:	1c9a      	adds	r2, r3, #2
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	3b01      	subs	r3, #1
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fcdc:	b29b      	uxth	r3, r3
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	f040 80a1 	bne.w	800fe26 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcec:	e853 3f00 	ldrex	r3, [r3]
 800fcf0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fcf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fcf8:	667b      	str	r3, [r7, #100]	; 0x64
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd02:	657b      	str	r3, [r7, #84]	; 0x54
 800fd04:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fd0a:	e841 2300 	strex	r3, r2, [r1]
 800fd0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fd10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d1e6      	bne.n	800fce4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	3308      	adds	r3, #8
 800fd1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd20:	e853 3f00 	ldrex	r3, [r3]
 800fd24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd28:	f023 0301 	bic.w	r3, r3, #1
 800fd2c:	663b      	str	r3, [r7, #96]	; 0x60
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	3308      	adds	r3, #8
 800fd34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fd36:	643a      	str	r2, [r7, #64]	; 0x40
 800fd38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd3e:	e841 2300 	strex	r3, r2, [r1]
 800fd42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d1e5      	bne.n	800fd16 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2220      	movs	r2, #32
 800fd4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2200      	movs	r2, #0
 800fd56:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	4a33      	ldr	r2, [pc, #204]	; (800fe30 <UART_RxISR_16BIT+0x1b4>)
 800fd64:	4293      	cmp	r3, r2
 800fd66:	d01f      	beq.n	800fda8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d018      	beq.n	800fda8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd7c:	6a3b      	ldr	r3, [r7, #32]
 800fd7e:	e853 3f00 	ldrex	r3, [r3]
 800fd82:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fd8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	461a      	mov	r2, r3
 800fd92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd94:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd96:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd9c:	e841 2300 	strex	r3, r2, [r1]
 800fda0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d1e6      	bne.n	800fd76 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d12e      	bne.n	800fe0e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	e853 3f00 	ldrex	r3, [r3]
 800fdc2:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	f023 0310 	bic.w	r3, r3, #16
 800fdca:	65bb      	str	r3, [r7, #88]	; 0x58
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fdd4:	61bb      	str	r3, [r7, #24]
 800fdd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdd8:	6979      	ldr	r1, [r7, #20]
 800fdda:	69ba      	ldr	r2, [r7, #24]
 800fddc:	e841 2300 	strex	r3, r2, [r1]
 800fde0:	613b      	str	r3, [r7, #16]
   return(result);
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d1e6      	bne.n	800fdb6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	69db      	ldr	r3, [r3, #28]
 800fdee:	f003 0310 	and.w	r3, r3, #16
 800fdf2:	2b10      	cmp	r3, #16
 800fdf4:	d103      	bne.n	800fdfe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	2210      	movs	r2, #16
 800fdfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fe04:	4619      	mov	r1, r3
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f7fe fd64 	bl	800e8d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fe0c:	e00b      	b.n	800fe26 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f7f1 f9b0 	bl	8001174 <HAL_UART_RxCpltCallback>
}
 800fe14:	e007      	b.n	800fe26 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	699a      	ldr	r2, [r3, #24]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f042 0208 	orr.w	r2, r2, #8
 800fe24:	619a      	str	r2, [r3, #24]
}
 800fe26:	bf00      	nop
 800fe28:	3770      	adds	r7, #112	; 0x70
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	58000c00 	.word	0x58000c00

0800fe34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b0ac      	sub	sp, #176	; 0xb0
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fe42:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	69db      	ldr	r3, [r3, #28]
 800fe4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe6a:	2b22      	cmp	r3, #34	; 0x22
 800fe6c:	f040 8180 	bne.w	8010170 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fe76:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fe7a:	e123      	b.n	80100c4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe82:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800fe86:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800fe8a:	b2d9      	uxtb	r1, r3
 800fe8c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800fe90:	b2da      	uxtb	r2, r3
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe96:	400a      	ands	r2, r1
 800fe98:	b2d2      	uxtb	r2, r2
 800fe9a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fea0:	1c5a      	adds	r2, r3, #1
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800feac:	b29b      	uxth	r3, r3
 800feae:	3b01      	subs	r3, #1
 800feb0:	b29a      	uxth	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	69db      	ldr	r3, [r3, #28]
 800febe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fec6:	f003 0307 	and.w	r3, r3, #7
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d053      	beq.n	800ff76 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fed2:	f003 0301 	and.w	r3, r3, #1
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d011      	beq.n	800fefe <UART_RxISR_8BIT_FIFOEN+0xca>
 800feda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00b      	beq.n	800fefe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	2201      	movs	r2, #1
 800feec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fef4:	f043 0201 	orr.w	r2, r3, #1
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fefe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ff02:	f003 0302 	and.w	r3, r3, #2
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d011      	beq.n	800ff2e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ff0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ff0e:	f003 0301 	and.w	r3, r3, #1
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d00b      	beq.n	800ff2e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2202      	movs	r2, #2
 800ff1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff24:	f043 0204 	orr.w	r2, r3, #4
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ff32:	f003 0304 	and.w	r3, r3, #4
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d011      	beq.n	800ff5e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ff3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ff3e:	f003 0301 	and.w	r3, r3, #1
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d00b      	beq.n	800ff5e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	2204      	movs	r2, #4
 800ff4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff54:	f043 0202 	orr.w	r2, r3, #2
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d006      	beq.n	800ff76 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f7fe fca9 	bl	800e8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2200      	movs	r2, #0
 800ff72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff7c:	b29b      	uxth	r3, r3
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	f040 80a0 	bne.w	80100c4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ff8c:	e853 3f00 	ldrex	r3, [r3]
 800ff90:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800ff92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ffa6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ffa8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffaa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ffac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ffae:	e841 2300 	strex	r3, r2, [r1]
 800ffb2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800ffb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d1e4      	bne.n	800ff84 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	3308      	adds	r3, #8
 800ffc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffc4:	e853 3f00 	ldrex	r3, [r3]
 800ffc8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800ffca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ffcc:	4b6e      	ldr	r3, [pc, #440]	; (8010188 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ffce:	4013      	ands	r3, r2
 800ffd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	3308      	adds	r3, #8
 800ffda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ffde:	66ba      	str	r2, [r7, #104]	; 0x68
 800ffe0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffe2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ffe4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ffe6:	e841 2300 	strex	r3, r2, [r1]
 800ffea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ffec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d1e3      	bne.n	800ffba <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2220      	movs	r2, #32
 800fff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2200      	movs	r2, #0
 800fffe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4a60      	ldr	r2, [pc, #384]	; (801018c <UART_RxISR_8BIT_FIFOEN+0x358>)
 801000c:	4293      	cmp	r3, r2
 801000e:	d021      	beq.n	8010054 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801001a:	2b00      	cmp	r3, #0
 801001c:	d01a      	beq.n	8010054 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010026:	e853 3f00 	ldrex	r3, [r3]
 801002a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801002c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801002e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010032:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	461a      	mov	r2, r3
 801003c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010040:	657b      	str	r3, [r7, #84]	; 0x54
 8010042:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010044:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010046:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010048:	e841 2300 	strex	r3, r2, [r1]
 801004c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801004e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010050:	2b00      	cmp	r3, #0
 8010052:	d1e4      	bne.n	801001e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010058:	2b01      	cmp	r3, #1
 801005a:	d130      	bne.n	80100be <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801006a:	e853 3f00 	ldrex	r3, [r3]
 801006e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010072:	f023 0310 	bic.w	r3, r3, #16
 8010076:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	461a      	mov	r2, r3
 8010080:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010084:	643b      	str	r3, [r7, #64]	; 0x40
 8010086:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010088:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801008a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801008c:	e841 2300 	strex	r3, r2, [r1]
 8010090:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010094:	2b00      	cmp	r3, #0
 8010096:	d1e4      	bne.n	8010062 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	69db      	ldr	r3, [r3, #28]
 801009e:	f003 0310 	and.w	r3, r3, #16
 80100a2:	2b10      	cmp	r3, #16
 80100a4:	d103      	bne.n	80100ae <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2210      	movs	r2, #16
 80100ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80100b4:	4619      	mov	r1, r3
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f7fe fc0c 	bl	800e8d4 <HAL_UARTEx_RxEventCallback>
 80100bc:	e002      	b.n	80100c4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7f1 f858 	bl	8001174 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80100c4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d006      	beq.n	80100da <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80100cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80100d0:	f003 0320 	and.w	r3, r3, #32
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	f47f aed1 	bne.w	800fe7c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80100e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d049      	beq.n	8010180 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80100f2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d242      	bcs.n	8010180 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	3308      	adds	r3, #8
 8010100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010102:	6a3b      	ldr	r3, [r7, #32]
 8010104:	e853 3f00 	ldrex	r3, [r3]
 8010108:	61fb      	str	r3, [r7, #28]
   return(result);
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	3308      	adds	r3, #8
 801011a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801011e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010120:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010126:	e841 2300 	strex	r3, r2, [r1]
 801012a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801012c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801012e:	2b00      	cmp	r3, #0
 8010130:	d1e3      	bne.n	80100fa <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	4a16      	ldr	r2, [pc, #88]	; (8010190 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010136:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	e853 3f00 	ldrex	r3, [r3]
 8010144:	60bb      	str	r3, [r7, #8]
   return(result);
 8010146:	68bb      	ldr	r3, [r7, #8]
 8010148:	f043 0320 	orr.w	r3, r3, #32
 801014c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	461a      	mov	r2, r3
 8010156:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801015a:	61bb      	str	r3, [r7, #24]
 801015c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801015e:	6979      	ldr	r1, [r7, #20]
 8010160:	69ba      	ldr	r2, [r7, #24]
 8010162:	e841 2300 	strex	r3, r2, [r1]
 8010166:	613b      	str	r3, [r7, #16]
   return(result);
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d1e4      	bne.n	8010138 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801016e:	e007      	b.n	8010180 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	699a      	ldr	r2, [r3, #24]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f042 0208 	orr.w	r2, r2, #8
 801017e:	619a      	str	r2, [r3, #24]
}
 8010180:	bf00      	nop
 8010182:	37b0      	adds	r7, #176	; 0xb0
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	effffffe 	.word	0xeffffffe
 801018c:	58000c00 	.word	0x58000c00
 8010190:	0800fac5 	.word	0x0800fac5

08010194 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b0ae      	sub	sp, #184	; 0xb8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101a2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	69db      	ldr	r3, [r3, #28]
 80101ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80101ca:	2b22      	cmp	r3, #34	; 0x22
 80101cc:	f040 8184 	bne.w	80104d8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80101d6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80101da:	e127      	b.n	801042c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80101ee:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80101f2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80101f6:	4013      	ands	r3, r2
 80101f8:	b29a      	uxth	r2, r3
 80101fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80101fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010204:	1c9a      	adds	r2, r3, #2
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010210:	b29b      	uxth	r3, r3
 8010212:	3b01      	subs	r3, #1
 8010214:	b29a      	uxth	r2, r3
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	69db      	ldr	r3, [r3, #28]
 8010222:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010226:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801022a:	f003 0307 	and.w	r3, r3, #7
 801022e:	2b00      	cmp	r3, #0
 8010230:	d053      	beq.n	80102da <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010232:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010236:	f003 0301 	and.w	r3, r3, #1
 801023a:	2b00      	cmp	r3, #0
 801023c:	d011      	beq.n	8010262 <UART_RxISR_16BIT_FIFOEN+0xce>
 801023e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00b      	beq.n	8010262 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	2201      	movs	r2, #1
 8010250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010258:	f043 0201 	orr.w	r2, r3, #1
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010266:	f003 0302 	and.w	r3, r3, #2
 801026a:	2b00      	cmp	r3, #0
 801026c:	d011      	beq.n	8010292 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801026e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010272:	f003 0301 	and.w	r3, r3, #1
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00b      	beq.n	8010292 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2202      	movs	r2, #2
 8010280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010288:	f043 0204 	orr.w	r2, r3, #4
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010292:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010296:	f003 0304 	and.w	r3, r3, #4
 801029a:	2b00      	cmp	r3, #0
 801029c:	d011      	beq.n	80102c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801029e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80102a2:	f003 0301 	and.w	r3, r3, #1
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00b      	beq.n	80102c2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	2204      	movs	r2, #4
 80102b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102b8:	f043 0202 	orr.w	r2, r3, #2
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d006      	beq.n	80102da <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f7fe faf7 	bl	800e8c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2200      	movs	r2, #0
 80102d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	f040 80a2 	bne.w	801042c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102f0:	e853 3f00 	ldrex	r3, [r3]
 80102f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80102f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80102fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	461a      	mov	r2, r3
 8010306:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801030a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801030e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010310:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010312:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010316:	e841 2300 	strex	r3, r2, [r1]
 801031a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801031c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801031e:	2b00      	cmp	r3, #0
 8010320:	d1e2      	bne.n	80102e8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	3308      	adds	r3, #8
 8010328:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801032a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801032c:	e853 3f00 	ldrex	r3, [r3]
 8010330:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010332:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010334:	4b6e      	ldr	r3, [pc, #440]	; (80104f0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010336:	4013      	ands	r3, r2
 8010338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	3308      	adds	r3, #8
 8010342:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010346:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010348:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801034a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801034c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801034e:	e841 2300 	strex	r3, r2, [r1]
 8010352:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010356:	2b00      	cmp	r3, #0
 8010358:	d1e3      	bne.n	8010322 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2220      	movs	r2, #32
 801035e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2200      	movs	r2, #0
 8010366:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2200      	movs	r2, #0
 801036c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	4a60      	ldr	r2, [pc, #384]	; (80104f4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010374:	4293      	cmp	r3, r2
 8010376:	d021      	beq.n	80103bc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010382:	2b00      	cmp	r3, #0
 8010384:	d01a      	beq.n	80103bc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801038c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801038e:	e853 3f00 	ldrex	r3, [r3]
 8010392:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010396:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801039a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	461a      	mov	r2, r3
 80103a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80103aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80103ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103b0:	e841 2300 	strex	r3, r2, [r1]
 80103b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80103b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d1e4      	bne.n	8010386 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d130      	bne.n	8010426 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2200      	movs	r2, #0
 80103c8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d2:	e853 3f00 	ldrex	r3, [r3]
 80103d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80103d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103da:	f023 0310 	bic.w	r3, r3, #16
 80103de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	461a      	mov	r2, r3
 80103e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103ec:	647b      	str	r3, [r7, #68]	; 0x44
 80103ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80103f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80103f4:	e841 2300 	strex	r3, r2, [r1]
 80103f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80103fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d1e4      	bne.n	80103ca <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	69db      	ldr	r3, [r3, #28]
 8010406:	f003 0310 	and.w	r3, r3, #16
 801040a:	2b10      	cmp	r3, #16
 801040c:	d103      	bne.n	8010416 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	2210      	movs	r2, #16
 8010414:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801041c:	4619      	mov	r1, r3
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f7fe fa58 	bl	800e8d4 <HAL_UARTEx_RxEventCallback>
 8010424:	e002      	b.n	801042c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f7f0 fea4 	bl	8001174 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801042c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010430:	2b00      	cmp	r3, #0
 8010432:	d006      	beq.n	8010442 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010434:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010438:	f003 0320 	and.w	r3, r3, #32
 801043c:	2b00      	cmp	r3, #0
 801043e:	f47f aecd 	bne.w	80101dc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010448:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801044c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010450:	2b00      	cmp	r3, #0
 8010452:	d049      	beq.n	80104e8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801045a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801045e:	429a      	cmp	r2, r3
 8010460:	d242      	bcs.n	80104e8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	3308      	adds	r3, #8
 8010468:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801046a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046c:	e853 3f00 	ldrex	r3, [r3]
 8010470:	623b      	str	r3, [r7, #32]
   return(result);
 8010472:	6a3b      	ldr	r3, [r7, #32]
 8010474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	3308      	adds	r3, #8
 8010482:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010486:	633a      	str	r2, [r7, #48]	; 0x30
 8010488:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801048a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801048c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801048e:	e841 2300 	strex	r3, r2, [r1]
 8010492:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010496:	2b00      	cmp	r3, #0
 8010498:	d1e3      	bne.n	8010462 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	4a16      	ldr	r2, [pc, #88]	; (80104f8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801049e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	e853 3f00 	ldrex	r3, [r3]
 80104ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	f043 0320 	orr.w	r3, r3, #32
 80104b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	461a      	mov	r2, r3
 80104be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80104c2:	61fb      	str	r3, [r7, #28]
 80104c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c6:	69b9      	ldr	r1, [r7, #24]
 80104c8:	69fa      	ldr	r2, [r7, #28]
 80104ca:	e841 2300 	strex	r3, r2, [r1]
 80104ce:	617b      	str	r3, [r7, #20]
   return(result);
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d1e4      	bne.n	80104a0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80104d6:	e007      	b.n	80104e8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	699a      	ldr	r2, [r3, #24]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	f042 0208 	orr.w	r2, r2, #8
 80104e6:	619a      	str	r2, [r3, #24]
}
 80104e8:	bf00      	nop
 80104ea:	37b8      	adds	r7, #184	; 0xb8
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}
 80104f0:	effffffe 	.word	0xeffffffe
 80104f4:	58000c00 	.word	0x58000c00
 80104f8:	0800fc7d 	.word	0x0800fc7d

080104fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b083      	sub	sp, #12
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010504:	bf00      	nop
 8010506:	370c      	adds	r7, #12
 8010508:	46bd      	mov	sp, r7
 801050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050e:	4770      	bx	lr

08010510 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010510:	b480      	push	{r7}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010518:	bf00      	nop
 801051a:	370c      	adds	r7, #12
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr

08010524 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801052c:	bf00      	nop
 801052e:	370c      	adds	r7, #12
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr

08010538 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010538:	b480      	push	{r7}
 801053a:	b085      	sub	sp, #20
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010546:	2b01      	cmp	r3, #1
 8010548:	d101      	bne.n	801054e <HAL_UARTEx_DisableFifoMode+0x16>
 801054a:	2302      	movs	r3, #2
 801054c:	e027      	b.n	801059e <HAL_UARTEx_DisableFifoMode+0x66>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2201      	movs	r2, #1
 8010552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2224      	movs	r2, #36	; 0x24
 801055a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	f022 0201 	bic.w	r2, r2, #1
 8010574:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801057c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2200      	movs	r2, #0
 8010582:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2220      	movs	r2, #32
 8010590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2200      	movs	r2, #0
 8010598:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801059c:	2300      	movs	r3, #0
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3714      	adds	r7, #20
 80105a2:	46bd      	mov	sp, r7
 80105a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a8:	4770      	bx	lr

080105aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80105aa:	b580      	push	{r7, lr}
 80105ac:	b084      	sub	sp, #16
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
 80105b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	d101      	bne.n	80105c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80105be:	2302      	movs	r3, #2
 80105c0:	e02d      	b.n	801061e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2201      	movs	r2, #1
 80105c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2224      	movs	r2, #36	; 0x24
 80105ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	681a      	ldr	r2, [r3, #0]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f022 0201 	bic.w	r2, r2, #1
 80105e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	689b      	ldr	r3, [r3, #8]
 80105f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	683a      	ldr	r2, [r7, #0]
 80105fa:	430a      	orrs	r2, r1
 80105fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f000 f850 	bl	80106a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2220      	movs	r2, #32
 8010610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2200      	movs	r2, #0
 8010618:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801061c:	2300      	movs	r3, #0
}
 801061e:	4618      	mov	r0, r3
 8010620:	3710      	adds	r7, #16
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}

08010626 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010626:	b580      	push	{r7, lr}
 8010628:	b084      	sub	sp, #16
 801062a:	af00      	add	r7, sp, #0
 801062c:	6078      	str	r0, [r7, #4]
 801062e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010636:	2b01      	cmp	r3, #1
 8010638:	d101      	bne.n	801063e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801063a:	2302      	movs	r3, #2
 801063c:	e02d      	b.n	801069a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2201      	movs	r2, #1
 8010642:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2224      	movs	r2, #36	; 0x24
 801064a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f022 0201 	bic.w	r2, r2, #1
 8010664:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	689b      	ldr	r3, [r3, #8]
 801066c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	683a      	ldr	r2, [r7, #0]
 8010676:	430a      	orrs	r2, r1
 8010678:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f000 f812 	bl	80106a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	68fa      	ldr	r2, [r7, #12]
 8010686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2220      	movs	r2, #32
 801068c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2200      	movs	r2, #0
 8010694:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010698:	2300      	movs	r3, #0
}
 801069a:	4618      	mov	r0, r3
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
	...

080106a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b085      	sub	sp, #20
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d108      	bne.n	80106c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2201      	movs	r2, #1
 80106b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2201      	movs	r2, #1
 80106c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80106c4:	e031      	b.n	801072a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80106c6:	2310      	movs	r3, #16
 80106c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80106ca:	2310      	movs	r3, #16
 80106cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	689b      	ldr	r3, [r3, #8]
 80106d4:	0e5b      	lsrs	r3, r3, #25
 80106d6:	b2db      	uxtb	r3, r3
 80106d8:	f003 0307 	and.w	r3, r3, #7
 80106dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	689b      	ldr	r3, [r3, #8]
 80106e4:	0f5b      	lsrs	r3, r3, #29
 80106e6:	b2db      	uxtb	r3, r3
 80106e8:	f003 0307 	and.w	r3, r3, #7
 80106ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80106ee:	7bbb      	ldrb	r3, [r7, #14]
 80106f0:	7b3a      	ldrb	r2, [r7, #12]
 80106f2:	4911      	ldr	r1, [pc, #68]	; (8010738 <UARTEx_SetNbDataToProcess+0x94>)
 80106f4:	5c8a      	ldrb	r2, [r1, r2]
 80106f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80106fa:	7b3a      	ldrb	r2, [r7, #12]
 80106fc:	490f      	ldr	r1, [pc, #60]	; (801073c <UARTEx_SetNbDataToProcess+0x98>)
 80106fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010700:	fb93 f3f2 	sdiv	r3, r3, r2
 8010704:	b29a      	uxth	r2, r3
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801070c:	7bfb      	ldrb	r3, [r7, #15]
 801070e:	7b7a      	ldrb	r2, [r7, #13]
 8010710:	4909      	ldr	r1, [pc, #36]	; (8010738 <UARTEx_SetNbDataToProcess+0x94>)
 8010712:	5c8a      	ldrb	r2, [r1, r2]
 8010714:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010718:	7b7a      	ldrb	r2, [r7, #13]
 801071a:	4908      	ldr	r1, [pc, #32]	; (801073c <UARTEx_SetNbDataToProcess+0x98>)
 801071c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801071e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010722:	b29a      	uxth	r2, r3
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801072a:	bf00      	nop
 801072c:	3714      	adds	r7, #20
 801072e:	46bd      	mov	sp, r7
 8010730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010734:	4770      	bx	lr
 8010736:	bf00      	nop
 8010738:	08014690 	.word	0x08014690
 801073c:	08014698 	.word	0x08014698

08010740 <__NVIC_SetPriority>:
{
 8010740:	b480      	push	{r7}
 8010742:	b083      	sub	sp, #12
 8010744:	af00      	add	r7, sp, #0
 8010746:	4603      	mov	r3, r0
 8010748:	6039      	str	r1, [r7, #0]
 801074a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801074c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010750:	2b00      	cmp	r3, #0
 8010752:	db0a      	blt.n	801076a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	b2da      	uxtb	r2, r3
 8010758:	490c      	ldr	r1, [pc, #48]	; (801078c <__NVIC_SetPriority+0x4c>)
 801075a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801075e:	0112      	lsls	r2, r2, #4
 8010760:	b2d2      	uxtb	r2, r2
 8010762:	440b      	add	r3, r1
 8010764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010768:	e00a      	b.n	8010780 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	b2da      	uxtb	r2, r3
 801076e:	4908      	ldr	r1, [pc, #32]	; (8010790 <__NVIC_SetPriority+0x50>)
 8010770:	88fb      	ldrh	r3, [r7, #6]
 8010772:	f003 030f 	and.w	r3, r3, #15
 8010776:	3b04      	subs	r3, #4
 8010778:	0112      	lsls	r2, r2, #4
 801077a:	b2d2      	uxtb	r2, r2
 801077c:	440b      	add	r3, r1
 801077e:	761a      	strb	r2, [r3, #24]
}
 8010780:	bf00      	nop
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr
 801078c:	e000e100 	.word	0xe000e100
 8010790:	e000ed00 	.word	0xe000ed00

08010794 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010794:	b580      	push	{r7, lr}
 8010796:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010798:	4b05      	ldr	r3, [pc, #20]	; (80107b0 <SysTick_Handler+0x1c>)
 801079a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801079c:	f001 ff96 	bl	80126cc <xTaskGetSchedulerState>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b01      	cmp	r3, #1
 80107a4:	d001      	beq.n	80107aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80107a6:	f002 fd9f 	bl	80132e8 <xPortSysTickHandler>
  }
}
 80107aa:	bf00      	nop
 80107ac:	bd80      	pop	{r7, pc}
 80107ae:	bf00      	nop
 80107b0:	e000e010 	.word	0xe000e010

080107b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80107b4:	b580      	push	{r7, lr}
 80107b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80107b8:	2100      	movs	r1, #0
 80107ba:	f06f 0004 	mvn.w	r0, #4
 80107be:	f7ff ffbf 	bl	8010740 <__NVIC_SetPriority>
#endif
}
 80107c2:	bf00      	nop
 80107c4:	bd80      	pop	{r7, pc}
	...

080107c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80107c8:	b480      	push	{r7}
 80107ca:	b083      	sub	sp, #12
 80107cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80107ce:	f3ef 8305 	mrs	r3, IPSR
 80107d2:	603b      	str	r3, [r7, #0]
  return(result);
 80107d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d003      	beq.n	80107e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80107da:	f06f 0305 	mvn.w	r3, #5
 80107de:	607b      	str	r3, [r7, #4]
 80107e0:	e00c      	b.n	80107fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80107e2:	4b0a      	ldr	r3, [pc, #40]	; (801080c <osKernelInitialize+0x44>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d105      	bne.n	80107f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80107ea:	4b08      	ldr	r3, [pc, #32]	; (801080c <osKernelInitialize+0x44>)
 80107ec:	2201      	movs	r2, #1
 80107ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80107f0:	2300      	movs	r3, #0
 80107f2:	607b      	str	r3, [r7, #4]
 80107f4:	e002      	b.n	80107fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80107f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80107fc:	687b      	ldr	r3, [r7, #4]
}
 80107fe:	4618      	mov	r0, r3
 8010800:	370c      	adds	r7, #12
 8010802:	46bd      	mov	sp, r7
 8010804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop
 801080c:	24000890 	.word	0x24000890

08010810 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010816:	f3ef 8305 	mrs	r3, IPSR
 801081a:	603b      	str	r3, [r7, #0]
  return(result);
 801081c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801081e:	2b00      	cmp	r3, #0
 8010820:	d003      	beq.n	801082a <osKernelStart+0x1a>
    stat = osErrorISR;
 8010822:	f06f 0305 	mvn.w	r3, #5
 8010826:	607b      	str	r3, [r7, #4]
 8010828:	e010      	b.n	801084c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801082a:	4b0b      	ldr	r3, [pc, #44]	; (8010858 <osKernelStart+0x48>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	2b01      	cmp	r3, #1
 8010830:	d109      	bne.n	8010846 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010832:	f7ff ffbf 	bl	80107b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010836:	4b08      	ldr	r3, [pc, #32]	; (8010858 <osKernelStart+0x48>)
 8010838:	2202      	movs	r2, #2
 801083a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801083c:	f001 fa94 	bl	8011d68 <vTaskStartScheduler>
      stat = osOK;
 8010840:	2300      	movs	r3, #0
 8010842:	607b      	str	r3, [r7, #4]
 8010844:	e002      	b.n	801084c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801084a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801084c:	687b      	ldr	r3, [r7, #4]
}
 801084e:	4618      	mov	r0, r3
 8010850:	3708      	adds	r7, #8
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
 8010856:	bf00      	nop
 8010858:	24000890 	.word	0x24000890

0801085c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801085c:	b580      	push	{r7, lr}
 801085e:	b08e      	sub	sp, #56	; 0x38
 8010860:	af04      	add	r7, sp, #16
 8010862:	60f8      	str	r0, [r7, #12]
 8010864:	60b9      	str	r1, [r7, #8]
 8010866:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010868:	2300      	movs	r3, #0
 801086a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801086c:	f3ef 8305 	mrs	r3, IPSR
 8010870:	617b      	str	r3, [r7, #20]
  return(result);
 8010872:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010874:	2b00      	cmp	r3, #0
 8010876:	d17e      	bne.n	8010976 <osThreadNew+0x11a>
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d07b      	beq.n	8010976 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801087e:	2380      	movs	r3, #128	; 0x80
 8010880:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010882:	2318      	movs	r3, #24
 8010884:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010886:	2300      	movs	r3, #0
 8010888:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801088a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801088e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d045      	beq.n	8010922 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d002      	beq.n	80108a4 <osThreadNew+0x48>
        name = attr->name;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	699b      	ldr	r3, [r3, #24]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d002      	beq.n	80108b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	699b      	ldr	r3, [r3, #24]
 80108b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80108b2:	69fb      	ldr	r3, [r7, #28]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d008      	beq.n	80108ca <osThreadNew+0x6e>
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	2b38      	cmp	r3, #56	; 0x38
 80108bc:	d805      	bhi.n	80108ca <osThreadNew+0x6e>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	685b      	ldr	r3, [r3, #4]
 80108c2:	f003 0301 	and.w	r3, r3, #1
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d001      	beq.n	80108ce <osThreadNew+0x72>
        return (NULL);
 80108ca:	2300      	movs	r3, #0
 80108cc:	e054      	b.n	8010978 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	695b      	ldr	r3, [r3, #20]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d003      	beq.n	80108de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	695b      	ldr	r3, [r3, #20]
 80108da:	089b      	lsrs	r3, r3, #2
 80108dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	689b      	ldr	r3, [r3, #8]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00e      	beq.n	8010904 <osThreadNew+0xa8>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	68db      	ldr	r3, [r3, #12]
 80108ea:	2b5b      	cmp	r3, #91	; 0x5b
 80108ec:	d90a      	bls.n	8010904 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d006      	beq.n	8010904 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	695b      	ldr	r3, [r3, #20]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d002      	beq.n	8010904 <osThreadNew+0xa8>
        mem = 1;
 80108fe:	2301      	movs	r3, #1
 8010900:	61bb      	str	r3, [r7, #24]
 8010902:	e010      	b.n	8010926 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	689b      	ldr	r3, [r3, #8]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d10c      	bne.n	8010926 <osThreadNew+0xca>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d108      	bne.n	8010926 <osThreadNew+0xca>
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	691b      	ldr	r3, [r3, #16]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d104      	bne.n	8010926 <osThreadNew+0xca>
          mem = 0;
 801091c:	2300      	movs	r3, #0
 801091e:	61bb      	str	r3, [r7, #24]
 8010920:	e001      	b.n	8010926 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010922:	2300      	movs	r3, #0
 8010924:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010926:	69bb      	ldr	r3, [r7, #24]
 8010928:	2b01      	cmp	r3, #1
 801092a:	d110      	bne.n	801094e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010930:	687a      	ldr	r2, [r7, #4]
 8010932:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010934:	9202      	str	r2, [sp, #8]
 8010936:	9301      	str	r3, [sp, #4]
 8010938:	69fb      	ldr	r3, [r7, #28]
 801093a:	9300      	str	r3, [sp, #0]
 801093c:	68bb      	ldr	r3, [r7, #8]
 801093e:	6a3a      	ldr	r2, [r7, #32]
 8010940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010942:	68f8      	ldr	r0, [r7, #12]
 8010944:	f001 f83a 	bl	80119bc <xTaskCreateStatic>
 8010948:	4603      	mov	r3, r0
 801094a:	613b      	str	r3, [r7, #16]
 801094c:	e013      	b.n	8010976 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801094e:	69bb      	ldr	r3, [r7, #24]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d110      	bne.n	8010976 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010954:	6a3b      	ldr	r3, [r7, #32]
 8010956:	b29a      	uxth	r2, r3
 8010958:	f107 0310 	add.w	r3, r7, #16
 801095c:	9301      	str	r3, [sp, #4]
 801095e:	69fb      	ldr	r3, [r7, #28]
 8010960:	9300      	str	r3, [sp, #0]
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010966:	68f8      	ldr	r0, [r7, #12]
 8010968:	f001 f885 	bl	8011a76 <xTaskCreate>
 801096c:	4603      	mov	r3, r0
 801096e:	2b01      	cmp	r3, #1
 8010970:	d001      	beq.n	8010976 <osThreadNew+0x11a>
            hTask = NULL;
 8010972:	2300      	movs	r3, #0
 8010974:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010976:	693b      	ldr	r3, [r7, #16]
}
 8010978:	4618      	mov	r0, r3
 801097a:	3728      	adds	r7, #40	; 0x28
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010980:	b580      	push	{r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010988:	f3ef 8305 	mrs	r3, IPSR
 801098c:	60bb      	str	r3, [r7, #8]
  return(result);
 801098e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010990:	2b00      	cmp	r3, #0
 8010992:	d003      	beq.n	801099c <osDelay+0x1c>
    stat = osErrorISR;
 8010994:	f06f 0305 	mvn.w	r3, #5
 8010998:	60fb      	str	r3, [r7, #12]
 801099a:	e007      	b.n	80109ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801099c:	2300      	movs	r3, #0
 801099e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d002      	beq.n	80109ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f001 f9aa 	bl	8011d00 <vTaskDelay>
    }
  }

  return (stat);
 80109ac:	68fb      	ldr	r3, [r7, #12]
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3710      	adds	r7, #16
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}

080109b6 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80109b6:	b580      	push	{r7, lr}
 80109b8:	b086      	sub	sp, #24
 80109ba:	af00      	add	r7, sp, #0
 80109bc:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80109be:	2300      	movs	r3, #0
 80109c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80109c2:	f3ef 8305 	mrs	r3, IPSR
 80109c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80109c8:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d12d      	bne.n	8010a2a <osEventFlagsNew+0x74>
    mem = -1;
 80109ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109d2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d015      	beq.n	8010a06 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	689b      	ldr	r3, [r3, #8]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d006      	beq.n	80109f0 <osEventFlagsNew+0x3a>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	68db      	ldr	r3, [r3, #12]
 80109e6:	2b1f      	cmp	r3, #31
 80109e8:	d902      	bls.n	80109f0 <osEventFlagsNew+0x3a>
        mem = 1;
 80109ea:	2301      	movs	r3, #1
 80109ec:	613b      	str	r3, [r7, #16]
 80109ee:	e00c      	b.n	8010a0a <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	689b      	ldr	r3, [r3, #8]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d108      	bne.n	8010a0a <osEventFlagsNew+0x54>
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	68db      	ldr	r3, [r3, #12]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d104      	bne.n	8010a0a <osEventFlagsNew+0x54>
          mem = 0;
 8010a00:	2300      	movs	r3, #0
 8010a02:	613b      	str	r3, [r7, #16]
 8010a04:	e001      	b.n	8010a0a <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8010a06:	2300      	movs	r3, #0
 8010a08:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d106      	bne.n	8010a1e <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	689b      	ldr	r3, [r3, #8]
 8010a14:	4618      	mov	r0, r3
 8010a16:	f000 f8f9 	bl	8010c0c <xEventGroupCreateStatic>
 8010a1a:	6178      	str	r0, [r7, #20]
 8010a1c:	e005      	b.n	8010a2a <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8010a1e:	693b      	ldr	r3, [r7, #16]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d102      	bne.n	8010a2a <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8010a24:	f000 f929 	bl	8010c7a <xEventGroupCreate>
 8010a28:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8010a2a:	697b      	ldr	r3, [r7, #20]
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3718      	adds	r7, #24
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b086      	sub	sp, #24
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d004      	beq.n	8010a52 <osEventFlagsSet+0x1e>
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d003      	beq.n	8010a5a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8010a52:	f06f 0303 	mvn.w	r3, #3
 8010a56:	617b      	str	r3, [r7, #20]
 8010a58:	e028      	b.n	8010aac <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a5a:	f3ef 8305 	mrs	r3, IPSR
 8010a5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010a60:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d01d      	beq.n	8010aa2 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8010a66:	2300      	movs	r3, #0
 8010a68:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8010a6a:	f107 0308 	add.w	r3, r7, #8
 8010a6e:	461a      	mov	r2, r3
 8010a70:	6839      	ldr	r1, [r7, #0]
 8010a72:	6938      	ldr	r0, [r7, #16]
 8010a74:	f000 f9b4 	bl	8010de0 <xEventGroupSetBitsFromISR>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d103      	bne.n	8010a86 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8010a7e:	f06f 0302 	mvn.w	r3, #2
 8010a82:	617b      	str	r3, [r7, #20]
 8010a84:	e012      	b.n	8010aac <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d00d      	beq.n	8010aac <osEventFlagsSet+0x78>
 8010a90:	4b09      	ldr	r3, [pc, #36]	; (8010ab8 <osEventFlagsSet+0x84>)
 8010a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a96:	601a      	str	r2, [r3, #0]
 8010a98:	f3bf 8f4f 	dsb	sy
 8010a9c:	f3bf 8f6f 	isb	sy
 8010aa0:	e004      	b.n	8010aac <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8010aa2:	6839      	ldr	r1, [r7, #0]
 8010aa4:	6938      	ldr	r0, [r7, #16]
 8010aa6:	f000 f902 	bl	8010cae <xEventGroupSetBits>
 8010aaa:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8010aac:	697b      	ldr	r3, [r7, #20]
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3718      	adds	r7, #24
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}
 8010ab6:	bf00      	nop
 8010ab8:	e000ed04 	.word	0xe000ed04

08010abc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b08a      	sub	sp, #40	; 0x28
 8010ac0:	af02      	add	r7, sp, #8
 8010ac2:	60f8      	str	r0, [r7, #12]
 8010ac4:	60b9      	str	r1, [r7, #8]
 8010ac6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010acc:	f3ef 8305 	mrs	r3, IPSR
 8010ad0:	613b      	str	r3, [r7, #16]
  return(result);
 8010ad2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d15f      	bne.n	8010b98 <osMessageQueueNew+0xdc>
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d05c      	beq.n	8010b98 <osMessageQueueNew+0xdc>
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d059      	beq.n	8010b98 <osMessageQueueNew+0xdc>
    mem = -1;
 8010ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ae8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d029      	beq.n	8010b44 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d012      	beq.n	8010b1e <osMessageQueueNew+0x62>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	2b4f      	cmp	r3, #79	; 0x4f
 8010afe:	d90e      	bls.n	8010b1e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d00a      	beq.n	8010b1e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	695a      	ldr	r2, [r3, #20]
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	68b9      	ldr	r1, [r7, #8]
 8010b10:	fb01 f303 	mul.w	r3, r1, r3
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d302      	bcc.n	8010b1e <osMessageQueueNew+0x62>
        mem = 1;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	61bb      	str	r3, [r7, #24]
 8010b1c:	e014      	b.n	8010b48 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	689b      	ldr	r3, [r3, #8]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d110      	bne.n	8010b48 <osMessageQueueNew+0x8c>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	68db      	ldr	r3, [r3, #12]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d10c      	bne.n	8010b48 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d108      	bne.n	8010b48 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	695b      	ldr	r3, [r3, #20]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d104      	bne.n	8010b48 <osMessageQueueNew+0x8c>
          mem = 0;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	61bb      	str	r3, [r7, #24]
 8010b42:	e001      	b.n	8010b48 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010b44:	2300      	movs	r3, #0
 8010b46:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010b48:	69bb      	ldr	r3, [r7, #24]
 8010b4a:	2b01      	cmp	r3, #1
 8010b4c:	d10b      	bne.n	8010b66 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	691a      	ldr	r2, [r3, #16]
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	689b      	ldr	r3, [r3, #8]
 8010b56:	2100      	movs	r1, #0
 8010b58:	9100      	str	r1, [sp, #0]
 8010b5a:	68b9      	ldr	r1, [r7, #8]
 8010b5c:	68f8      	ldr	r0, [r7, #12]
 8010b5e:	f000 fa6f 	bl	8011040 <xQueueGenericCreateStatic>
 8010b62:	61f8      	str	r0, [r7, #28]
 8010b64:	e008      	b.n	8010b78 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d105      	bne.n	8010b78 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	68b9      	ldr	r1, [r7, #8]
 8010b70:	68f8      	ldr	r0, [r7, #12]
 8010b72:	f000 fadd 	bl	8011130 <xQueueGenericCreate>
 8010b76:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010b78:	69fb      	ldr	r3, [r7, #28]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d00c      	beq.n	8010b98 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d003      	beq.n	8010b8c <osMessageQueueNew+0xd0>
        name = attr->name;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	617b      	str	r3, [r7, #20]
 8010b8a:	e001      	b.n	8010b90 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010b90:	6979      	ldr	r1, [r7, #20]
 8010b92:	69f8      	ldr	r0, [r7, #28]
 8010b94:	f000 feb4 	bl	8011900 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010b98:	69fb      	ldr	r3, [r7, #28]
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3720      	adds	r7, #32
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
	...

08010ba4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010ba4:	b480      	push	{r7}
 8010ba6:	b085      	sub	sp, #20
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	60f8      	str	r0, [r7, #12]
 8010bac:	60b9      	str	r1, [r7, #8]
 8010bae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	4a07      	ldr	r2, [pc, #28]	; (8010bd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8010bb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	4a06      	ldr	r2, [pc, #24]	; (8010bd4 <vApplicationGetIdleTaskMemory+0x30>)
 8010bba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2280      	movs	r2, #128	; 0x80
 8010bc0:	601a      	str	r2, [r3, #0]
}
 8010bc2:	bf00      	nop
 8010bc4:	3714      	adds	r7, #20
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bcc:	4770      	bx	lr
 8010bce:	bf00      	nop
 8010bd0:	24000894 	.word	0x24000894
 8010bd4:	240008f0 	.word	0x240008f0

08010bd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010bd8:	b480      	push	{r7}
 8010bda:	b085      	sub	sp, #20
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	60b9      	str	r1, [r7, #8]
 8010be2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	4a07      	ldr	r2, [pc, #28]	; (8010c04 <vApplicationGetTimerTaskMemory+0x2c>)
 8010be8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	4a06      	ldr	r2, [pc, #24]	; (8010c08 <vApplicationGetTimerTaskMemory+0x30>)
 8010bee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010bf6:	601a      	str	r2, [r3, #0]
}
 8010bf8:	bf00      	nop
 8010bfa:	3714      	adds	r7, #20
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c02:	4770      	bx	lr
 8010c04:	24000af0 	.word	0x24000af0
 8010c08:	24000b4c 	.word	0x24000b4c

08010c0c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b086      	sub	sp, #24
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d10a      	bne.n	8010c30 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c1e:	f383 8811 	msr	BASEPRI, r3
 8010c22:	f3bf 8f6f 	isb	sy
 8010c26:	f3bf 8f4f 	dsb	sy
 8010c2a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010c2c:	bf00      	nop
 8010c2e:	e7fe      	b.n	8010c2e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8010c30:	2320      	movs	r3, #32
 8010c32:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	2b20      	cmp	r3, #32
 8010c38:	d00a      	beq.n	8010c50 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8010c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3e:	f383 8811 	msr	BASEPRI, r3
 8010c42:	f3bf 8f6f 	isb	sy
 8010c46:	f3bf 8f4f 	dsb	sy
 8010c4a:	60fb      	str	r3, [r7, #12]
}
 8010c4c:	bf00      	nop
 8010c4e:	e7fe      	b.n	8010c4e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d00a      	beq.n	8010c70 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	3304      	adds	r3, #4
 8010c64:	4618      	mov	r0, r3
 8010c66:	f000 f8cf 	bl	8010e08 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8010c70:	697b      	ldr	r3, [r7, #20]
	}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3718      	adds	r7, #24
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b082      	sub	sp, #8
 8010c7e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8010c80:	2020      	movs	r0, #32
 8010c82:	f002 fbc1 	bl	8013408 <pvPortMalloc>
 8010c86:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d00a      	beq.n	8010ca4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2200      	movs	r2, #0
 8010c92:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	3304      	adds	r3, #4
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f000 f8b5 	bl	8010e08 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8010ca4:	687b      	ldr	r3, [r7, #4]
	}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	3708      	adds	r7, #8
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}

08010cae <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8010cae:	b580      	push	{r7, lr}
 8010cb0:	b08e      	sub	sp, #56	; 0x38
 8010cb2:	af00      	add	r7, sp, #0
 8010cb4:	6078      	str	r0, [r7, #4]
 8010cb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d10a      	bne.n	8010ce0 <xEventGroupSetBits+0x32>
	__asm volatile
 8010cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cce:	f383 8811 	msr	BASEPRI, r3
 8010cd2:	f3bf 8f6f 	isb	sy
 8010cd6:	f3bf 8f4f 	dsb	sy
 8010cda:	613b      	str	r3, [r7, #16]
}
 8010cdc:	bf00      	nop
 8010cde:	e7fe      	b.n	8010cde <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8010ce0:	683b      	ldr	r3, [r7, #0]
 8010ce2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d00a      	beq.n	8010d00 <xEventGroupSetBits+0x52>
	__asm volatile
 8010cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cee:	f383 8811 	msr	BASEPRI, r3
 8010cf2:	f3bf 8f6f 	isb	sy
 8010cf6:	f3bf 8f4f 	dsb	sy
 8010cfa:	60fb      	str	r3, [r7, #12]
}
 8010cfc:	bf00      	nop
 8010cfe:	e7fe      	b.n	8010cfe <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8010d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d02:	3304      	adds	r3, #4
 8010d04:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d08:	3308      	adds	r3, #8
 8010d0a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8010d0c:	f001 f892 	bl	8011e34 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8010d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8010d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d18:	681a      	ldr	r2, [r3, #0]
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	431a      	orrs	r2, r3
 8010d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d20:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8010d22:	e03c      	b.n	8010d9e <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8010d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d26:	685b      	ldr	r3, [r3, #4]
 8010d28:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8010d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8010d30:	2300      	movs	r3, #0
 8010d32:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8010d34:	69bb      	ldr	r3, [r7, #24]
 8010d36:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8010d3a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8010d3c:	69bb      	ldr	r3, [r7, #24]
 8010d3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010d42:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d108      	bne.n	8010d60 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8010d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d50:	681a      	ldr	r2, [r3, #0]
 8010d52:	69bb      	ldr	r3, [r7, #24]
 8010d54:	4013      	ands	r3, r2
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d00b      	beq.n	8010d72 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d5e:	e008      	b.n	8010d72 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8010d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d62:	681a      	ldr	r2, [r3, #0]
 8010d64:	69bb      	ldr	r3, [r7, #24]
 8010d66:	4013      	ands	r3, r2
 8010d68:	69ba      	ldr	r2, [r7, #24]
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d101      	bne.n	8010d72 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8010d6e:	2301      	movs	r3, #1
 8010d70:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8010d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d010      	beq.n	8010d9a <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d003      	beq.n	8010d8a <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8010d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d84:	69bb      	ldr	r3, [r7, #24]
 8010d86:	4313      	orrs	r3, r2
 8010d88:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8010d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010d92:	4619      	mov	r1, r3
 8010d94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010d96:	f001 fadd 	bl	8012354 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8010d9a:	69fb      	ldr	r3, [r7, #28]
 8010d9c:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8010d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010da0:	6a3b      	ldr	r3, [r7, #32]
 8010da2:	429a      	cmp	r2, r3
 8010da4:	d1be      	bne.n	8010d24 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8010da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da8:	681a      	ldr	r2, [r3, #0]
 8010daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dac:	43db      	mvns	r3, r3
 8010dae:	401a      	ands	r2, r3
 8010db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db2:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8010db4:	f001 f84c 	bl	8011e50 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8010db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dba:	681b      	ldr	r3, [r3, #0]
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3738      	adds	r7, #56	; 0x38
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8010dce:	6839      	ldr	r1, [r7, #0]
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f7ff ff6c 	bl	8010cae <xEventGroupSetBits>
}
 8010dd6:	bf00      	nop
 8010dd8:	3708      	adds	r7, #8
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
	...

08010de0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b086      	sub	sp, #24
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	60f8      	str	r0, [r7, #12]
 8010de8:	60b9      	str	r1, [r7, #8]
 8010dea:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	68ba      	ldr	r2, [r7, #8]
 8010df0:	68f9      	ldr	r1, [r7, #12]
 8010df2:	4804      	ldr	r0, [pc, #16]	; (8010e04 <xEventGroupSetBitsFromISR+0x24>)
 8010df4:	f002 f898 	bl	8012f28 <xTimerPendFunctionCallFromISR>
 8010df8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8010dfa:	697b      	ldr	r3, [r7, #20]
	}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	3718      	adds	r7, #24
 8010e00:	46bd      	mov	sp, r7
 8010e02:	bd80      	pop	{r7, pc}
 8010e04:	08010dc5 	.word	0x08010dc5

08010e08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b083      	sub	sp, #12
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f103 0208 	add.w	r2, r3, #8
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f103 0208 	add.w	r2, r3, #8
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f103 0208 	add.w	r2, r3, #8
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010e3c:	bf00      	nop
 8010e3e:	370c      	adds	r7, #12
 8010e40:	46bd      	mov	sp, r7
 8010e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e46:	4770      	bx	lr

08010e48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b083      	sub	sp, #12
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2200      	movs	r2, #0
 8010e54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010e56:	bf00      	nop
 8010e58:	370c      	adds	r7, #12
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr

08010e62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010e62:	b480      	push	{r7}
 8010e64:	b085      	sub	sp, #20
 8010e66:	af00      	add	r7, sp, #0
 8010e68:	6078      	str	r0, [r7, #4]
 8010e6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	68fa      	ldr	r2, [r7, #12]
 8010e76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	689a      	ldr	r2, [r3, #8]
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	689b      	ldr	r3, [r3, #8]
 8010e84:	683a      	ldr	r2, [r7, #0]
 8010e86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	683a      	ldr	r2, [r7, #0]
 8010e8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	1c5a      	adds	r2, r3, #1
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	601a      	str	r2, [r3, #0]
}
 8010e9e:	bf00      	nop
 8010ea0:	3714      	adds	r7, #20
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea8:	4770      	bx	lr

08010eaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010eaa:	b480      	push	{r7}
 8010eac:	b085      	sub	sp, #20
 8010eae:	af00      	add	r7, sp, #0
 8010eb0:	6078      	str	r0, [r7, #4]
 8010eb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ec0:	d103      	bne.n	8010eca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	691b      	ldr	r3, [r3, #16]
 8010ec6:	60fb      	str	r3, [r7, #12]
 8010ec8:	e00c      	b.n	8010ee4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	3308      	adds	r3, #8
 8010ece:	60fb      	str	r3, [r7, #12]
 8010ed0:	e002      	b.n	8010ed8 <vListInsert+0x2e>
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	685b      	ldr	r3, [r3, #4]
 8010ed6:	60fb      	str	r3, [r7, #12]
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	68ba      	ldr	r2, [r7, #8]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d2f6      	bcs.n	8010ed2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	685a      	ldr	r2, [r3, #4]
 8010ee8:	683b      	ldr	r3, [r7, #0]
 8010eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	685b      	ldr	r3, [r3, #4]
 8010ef0:	683a      	ldr	r2, [r7, #0]
 8010ef2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	68fa      	ldr	r2, [r7, #12]
 8010ef8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	683a      	ldr	r2, [r7, #0]
 8010efe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	687a      	ldr	r2, [r7, #4]
 8010f04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	1c5a      	adds	r2, r3, #1
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	601a      	str	r2, [r3, #0]
}
 8010f10:	bf00      	nop
 8010f12:	3714      	adds	r7, #20
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr

08010f1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b085      	sub	sp, #20
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	691b      	ldr	r3, [r3, #16]
 8010f28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	6892      	ldr	r2, [r2, #8]
 8010f32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	689b      	ldr	r3, [r3, #8]
 8010f38:	687a      	ldr	r2, [r7, #4]
 8010f3a:	6852      	ldr	r2, [r2, #4]
 8010f3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	685b      	ldr	r3, [r3, #4]
 8010f42:	687a      	ldr	r2, [r7, #4]
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d103      	bne.n	8010f50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	689a      	ldr	r2, [r3, #8]
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2200      	movs	r2, #0
 8010f54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	1e5a      	subs	r2, r3, #1
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	681b      	ldr	r3, [r3, #0]
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3714      	adds	r7, #20
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6e:	4770      	bx	lr

08010f70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d10a      	bne.n	8010f9a <xQueueGenericReset+0x2a>
	__asm volatile
 8010f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f88:	f383 8811 	msr	BASEPRI, r3
 8010f8c:	f3bf 8f6f 	isb	sy
 8010f90:	f3bf 8f4f 	dsb	sy
 8010f94:	60bb      	str	r3, [r7, #8]
}
 8010f96:	bf00      	nop
 8010f98:	e7fe      	b.n	8010f98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010f9a:	f002 f913 	bl	80131c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fa6:	68f9      	ldr	r1, [r7, #12]
 8010fa8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010faa:	fb01 f303 	mul.w	r3, r1, r3
 8010fae:	441a      	add	r2, r3
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	681a      	ldr	r2, [r3, #0]
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fca:	3b01      	subs	r3, #1
 8010fcc:	68f9      	ldr	r1, [r7, #12]
 8010fce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010fd0:	fb01 f303 	mul.w	r3, r1, r3
 8010fd4:	441a      	add	r2, r3
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	22ff      	movs	r2, #255	; 0xff
 8010fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	22ff      	movs	r2, #255	; 0xff
 8010fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d114      	bne.n	801101a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	691b      	ldr	r3, [r3, #16]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d01a      	beq.n	801102e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	3310      	adds	r3, #16
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f001 f945 	bl	801228c <xTaskRemoveFromEventList>
 8011002:	4603      	mov	r3, r0
 8011004:	2b00      	cmp	r3, #0
 8011006:	d012      	beq.n	801102e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011008:	4b0c      	ldr	r3, [pc, #48]	; (801103c <xQueueGenericReset+0xcc>)
 801100a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801100e:	601a      	str	r2, [r3, #0]
 8011010:	f3bf 8f4f 	dsb	sy
 8011014:	f3bf 8f6f 	isb	sy
 8011018:	e009      	b.n	801102e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	3310      	adds	r3, #16
 801101e:	4618      	mov	r0, r3
 8011020:	f7ff fef2 	bl	8010e08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	3324      	adds	r3, #36	; 0x24
 8011028:	4618      	mov	r0, r3
 801102a:	f7ff feed 	bl	8010e08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801102e:	f002 f8f9 	bl	8013224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011032:	2301      	movs	r3, #1
}
 8011034:	4618      	mov	r0, r3
 8011036:	3710      	adds	r7, #16
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	e000ed04 	.word	0xe000ed04

08011040 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011040:	b580      	push	{r7, lr}
 8011042:	b08e      	sub	sp, #56	; 0x38
 8011044:	af02      	add	r7, sp, #8
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	607a      	str	r2, [r7, #4]
 801104c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d10a      	bne.n	801106a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011058:	f383 8811 	msr	BASEPRI, r3
 801105c:	f3bf 8f6f 	isb	sy
 8011060:	f3bf 8f4f 	dsb	sy
 8011064:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011066:	bf00      	nop
 8011068:	e7fe      	b.n	8011068 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d10a      	bne.n	8011086 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011074:	f383 8811 	msr	BASEPRI, r3
 8011078:	f3bf 8f6f 	isb	sy
 801107c:	f3bf 8f4f 	dsb	sy
 8011080:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011082:	bf00      	nop
 8011084:	e7fe      	b.n	8011084 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d002      	beq.n	8011092 <xQueueGenericCreateStatic+0x52>
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d001      	beq.n	8011096 <xQueueGenericCreateStatic+0x56>
 8011092:	2301      	movs	r3, #1
 8011094:	e000      	b.n	8011098 <xQueueGenericCreateStatic+0x58>
 8011096:	2300      	movs	r3, #0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d10a      	bne.n	80110b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801109c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a0:	f383 8811 	msr	BASEPRI, r3
 80110a4:	f3bf 8f6f 	isb	sy
 80110a8:	f3bf 8f4f 	dsb	sy
 80110ac:	623b      	str	r3, [r7, #32]
}
 80110ae:	bf00      	nop
 80110b0:	e7fe      	b.n	80110b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d102      	bne.n	80110be <xQueueGenericCreateStatic+0x7e>
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d101      	bne.n	80110c2 <xQueueGenericCreateStatic+0x82>
 80110be:	2301      	movs	r3, #1
 80110c0:	e000      	b.n	80110c4 <xQueueGenericCreateStatic+0x84>
 80110c2:	2300      	movs	r3, #0
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d10a      	bne.n	80110de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80110c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110cc:	f383 8811 	msr	BASEPRI, r3
 80110d0:	f3bf 8f6f 	isb	sy
 80110d4:	f3bf 8f4f 	dsb	sy
 80110d8:	61fb      	str	r3, [r7, #28]
}
 80110da:	bf00      	nop
 80110dc:	e7fe      	b.n	80110dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80110de:	2350      	movs	r3, #80	; 0x50
 80110e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	2b50      	cmp	r3, #80	; 0x50
 80110e6:	d00a      	beq.n	80110fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80110e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ec:	f383 8811 	msr	BASEPRI, r3
 80110f0:	f3bf 8f6f 	isb	sy
 80110f4:	f3bf 8f4f 	dsb	sy
 80110f8:	61bb      	str	r3, [r7, #24]
}
 80110fa:	bf00      	nop
 80110fc:	e7fe      	b.n	80110fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80110fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011106:	2b00      	cmp	r3, #0
 8011108:	d00d      	beq.n	8011126 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801110a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110c:	2201      	movs	r2, #1
 801110e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011112:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011118:	9300      	str	r3, [sp, #0]
 801111a:	4613      	mov	r3, r2
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	68b9      	ldr	r1, [r7, #8]
 8011120:	68f8      	ldr	r0, [r7, #12]
 8011122:	f000 f83f 	bl	80111a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011128:	4618      	mov	r0, r3
 801112a:	3730      	adds	r7, #48	; 0x30
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011130:	b580      	push	{r7, lr}
 8011132:	b08a      	sub	sp, #40	; 0x28
 8011134:	af02      	add	r7, sp, #8
 8011136:	60f8      	str	r0, [r7, #12]
 8011138:	60b9      	str	r1, [r7, #8]
 801113a:	4613      	mov	r3, r2
 801113c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d10a      	bne.n	801115a <xQueueGenericCreate+0x2a>
	__asm volatile
 8011144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011148:	f383 8811 	msr	BASEPRI, r3
 801114c:	f3bf 8f6f 	isb	sy
 8011150:	f3bf 8f4f 	dsb	sy
 8011154:	613b      	str	r3, [r7, #16]
}
 8011156:	bf00      	nop
 8011158:	e7fe      	b.n	8011158 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	68ba      	ldr	r2, [r7, #8]
 801115e:	fb02 f303 	mul.w	r3, r2, r3
 8011162:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	3350      	adds	r3, #80	; 0x50
 8011168:	4618      	mov	r0, r3
 801116a:	f002 f94d 	bl	8013408 <pvPortMalloc>
 801116e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011170:	69bb      	ldr	r3, [r7, #24]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d011      	beq.n	801119a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011176:	69bb      	ldr	r3, [r7, #24]
 8011178:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	3350      	adds	r3, #80	; 0x50
 801117e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011180:	69bb      	ldr	r3, [r7, #24]
 8011182:	2200      	movs	r2, #0
 8011184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011188:	79fa      	ldrb	r2, [r7, #7]
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	9300      	str	r3, [sp, #0]
 801118e:	4613      	mov	r3, r2
 8011190:	697a      	ldr	r2, [r7, #20]
 8011192:	68b9      	ldr	r1, [r7, #8]
 8011194:	68f8      	ldr	r0, [r7, #12]
 8011196:	f000 f805 	bl	80111a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801119a:	69bb      	ldr	r3, [r7, #24]
	}
 801119c:	4618      	mov	r0, r3
 801119e:	3720      	adds	r7, #32
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	607a      	str	r2, [r7, #4]
 80111b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d103      	bne.n	80111c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80111b8:	69bb      	ldr	r3, [r7, #24]
 80111ba:	69ba      	ldr	r2, [r7, #24]
 80111bc:	601a      	str	r2, [r3, #0]
 80111be:	e002      	b.n	80111c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80111c0:	69bb      	ldr	r3, [r7, #24]
 80111c2:	687a      	ldr	r2, [r7, #4]
 80111c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80111c6:	69bb      	ldr	r3, [r7, #24]
 80111c8:	68fa      	ldr	r2, [r7, #12]
 80111ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80111cc:	69bb      	ldr	r3, [r7, #24]
 80111ce:	68ba      	ldr	r2, [r7, #8]
 80111d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80111d2:	2101      	movs	r1, #1
 80111d4:	69b8      	ldr	r0, [r7, #24]
 80111d6:	f7ff fecb 	bl	8010f70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80111da:	69bb      	ldr	r3, [r7, #24]
 80111dc:	78fa      	ldrb	r2, [r7, #3]
 80111de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80111e2:	bf00      	nop
 80111e4:	3710      	adds	r7, #16
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
	...

080111ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b08e      	sub	sp, #56	; 0x38
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	607a      	str	r2, [r7, #4]
 80111f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80111fa:	2300      	movs	r3, #0
 80111fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011204:	2b00      	cmp	r3, #0
 8011206:	d10a      	bne.n	801121e <xQueueGenericSend+0x32>
	__asm volatile
 8011208:	f04f 0350 	mov.w	r3, #80	; 0x50
 801120c:	f383 8811 	msr	BASEPRI, r3
 8011210:	f3bf 8f6f 	isb	sy
 8011214:	f3bf 8f4f 	dsb	sy
 8011218:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801121a:	bf00      	nop
 801121c:	e7fe      	b.n	801121c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d103      	bne.n	801122c <xQueueGenericSend+0x40>
 8011224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011228:	2b00      	cmp	r3, #0
 801122a:	d101      	bne.n	8011230 <xQueueGenericSend+0x44>
 801122c:	2301      	movs	r3, #1
 801122e:	e000      	b.n	8011232 <xQueueGenericSend+0x46>
 8011230:	2300      	movs	r3, #0
 8011232:	2b00      	cmp	r3, #0
 8011234:	d10a      	bne.n	801124c <xQueueGenericSend+0x60>
	__asm volatile
 8011236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801123a:	f383 8811 	msr	BASEPRI, r3
 801123e:	f3bf 8f6f 	isb	sy
 8011242:	f3bf 8f4f 	dsb	sy
 8011246:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011248:	bf00      	nop
 801124a:	e7fe      	b.n	801124a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	2b02      	cmp	r3, #2
 8011250:	d103      	bne.n	801125a <xQueueGenericSend+0x6e>
 8011252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011256:	2b01      	cmp	r3, #1
 8011258:	d101      	bne.n	801125e <xQueueGenericSend+0x72>
 801125a:	2301      	movs	r3, #1
 801125c:	e000      	b.n	8011260 <xQueueGenericSend+0x74>
 801125e:	2300      	movs	r3, #0
 8011260:	2b00      	cmp	r3, #0
 8011262:	d10a      	bne.n	801127a <xQueueGenericSend+0x8e>
	__asm volatile
 8011264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011268:	f383 8811 	msr	BASEPRI, r3
 801126c:	f3bf 8f6f 	isb	sy
 8011270:	f3bf 8f4f 	dsb	sy
 8011274:	623b      	str	r3, [r7, #32]
}
 8011276:	bf00      	nop
 8011278:	e7fe      	b.n	8011278 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801127a:	f001 fa27 	bl	80126cc <xTaskGetSchedulerState>
 801127e:	4603      	mov	r3, r0
 8011280:	2b00      	cmp	r3, #0
 8011282:	d102      	bne.n	801128a <xQueueGenericSend+0x9e>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d101      	bne.n	801128e <xQueueGenericSend+0xa2>
 801128a:	2301      	movs	r3, #1
 801128c:	e000      	b.n	8011290 <xQueueGenericSend+0xa4>
 801128e:	2300      	movs	r3, #0
 8011290:	2b00      	cmp	r3, #0
 8011292:	d10a      	bne.n	80112aa <xQueueGenericSend+0xbe>
	__asm volatile
 8011294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011298:	f383 8811 	msr	BASEPRI, r3
 801129c:	f3bf 8f6f 	isb	sy
 80112a0:	f3bf 8f4f 	dsb	sy
 80112a4:	61fb      	str	r3, [r7, #28]
}
 80112a6:	bf00      	nop
 80112a8:	e7fe      	b.n	80112a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80112aa:	f001 ff8b 	bl	80131c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80112ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d302      	bcc.n	80112c0 <xQueueGenericSend+0xd4>
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	2b02      	cmp	r3, #2
 80112be:	d129      	bne.n	8011314 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80112c0:	683a      	ldr	r2, [r7, #0]
 80112c2:	68b9      	ldr	r1, [r7, #8]
 80112c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112c6:	f000 fa0b 	bl	80116e0 <prvCopyDataToQueue>
 80112ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80112cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d010      	beq.n	80112f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80112d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d6:	3324      	adds	r3, #36	; 0x24
 80112d8:	4618      	mov	r0, r3
 80112da:	f000 ffd7 	bl	801228c <xTaskRemoveFromEventList>
 80112de:	4603      	mov	r3, r0
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d013      	beq.n	801130c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80112e4:	4b3f      	ldr	r3, [pc, #252]	; (80113e4 <xQueueGenericSend+0x1f8>)
 80112e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112ea:	601a      	str	r2, [r3, #0]
 80112ec:	f3bf 8f4f 	dsb	sy
 80112f0:	f3bf 8f6f 	isb	sy
 80112f4:	e00a      	b.n	801130c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80112f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d007      	beq.n	801130c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80112fc:	4b39      	ldr	r3, [pc, #228]	; (80113e4 <xQueueGenericSend+0x1f8>)
 80112fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011302:	601a      	str	r2, [r3, #0]
 8011304:	f3bf 8f4f 	dsb	sy
 8011308:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801130c:	f001 ff8a 	bl	8013224 <vPortExitCritical>
				return pdPASS;
 8011310:	2301      	movs	r3, #1
 8011312:	e063      	b.n	80113dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d103      	bne.n	8011322 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801131a:	f001 ff83 	bl	8013224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801131e:	2300      	movs	r3, #0
 8011320:	e05c      	b.n	80113dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011324:	2b00      	cmp	r3, #0
 8011326:	d106      	bne.n	8011336 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011328:	f107 0314 	add.w	r3, r7, #20
 801132c:	4618      	mov	r0, r3
 801132e:	f001 f873 	bl	8012418 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011332:	2301      	movs	r3, #1
 8011334:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011336:	f001 ff75 	bl	8013224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801133a:	f000 fd7b 	bl	8011e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801133e:	f001 ff41 	bl	80131c4 <vPortEnterCritical>
 8011342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011348:	b25b      	sxtb	r3, r3
 801134a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801134e:	d103      	bne.n	8011358 <xQueueGenericSend+0x16c>
 8011350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011352:	2200      	movs	r2, #0
 8011354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801135a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801135e:	b25b      	sxtb	r3, r3
 8011360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011364:	d103      	bne.n	801136e <xQueueGenericSend+0x182>
 8011366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011368:	2200      	movs	r2, #0
 801136a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801136e:	f001 ff59 	bl	8013224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011372:	1d3a      	adds	r2, r7, #4
 8011374:	f107 0314 	add.w	r3, r7, #20
 8011378:	4611      	mov	r1, r2
 801137a:	4618      	mov	r0, r3
 801137c:	f001 f862 	bl	8012444 <xTaskCheckForTimeOut>
 8011380:	4603      	mov	r3, r0
 8011382:	2b00      	cmp	r3, #0
 8011384:	d124      	bne.n	80113d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011386:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011388:	f000 faa2 	bl	80118d0 <prvIsQueueFull>
 801138c:	4603      	mov	r3, r0
 801138e:	2b00      	cmp	r3, #0
 8011390:	d018      	beq.n	80113c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011394:	3310      	adds	r3, #16
 8011396:	687a      	ldr	r2, [r7, #4]
 8011398:	4611      	mov	r1, r2
 801139a:	4618      	mov	r0, r3
 801139c:	f000 ff26 	bl	80121ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80113a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113a2:	f000 fa2d 	bl	8011800 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80113a6:	f000 fd53 	bl	8011e50 <xTaskResumeAll>
 80113aa:	4603      	mov	r3, r0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	f47f af7c 	bne.w	80112aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80113b2:	4b0c      	ldr	r3, [pc, #48]	; (80113e4 <xQueueGenericSend+0x1f8>)
 80113b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113b8:	601a      	str	r2, [r3, #0]
 80113ba:	f3bf 8f4f 	dsb	sy
 80113be:	f3bf 8f6f 	isb	sy
 80113c2:	e772      	b.n	80112aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80113c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113c6:	f000 fa1b 	bl	8011800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80113ca:	f000 fd41 	bl	8011e50 <xTaskResumeAll>
 80113ce:	e76c      	b.n	80112aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80113d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113d2:	f000 fa15 	bl	8011800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80113d6:	f000 fd3b 	bl	8011e50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80113da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3738      	adds	r7, #56	; 0x38
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	e000ed04 	.word	0xe000ed04

080113e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b090      	sub	sp, #64	; 0x40
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	607a      	str	r2, [r7, #4]
 80113f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80113fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d10a      	bne.n	8011416 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011404:	f383 8811 	msr	BASEPRI, r3
 8011408:	f3bf 8f6f 	isb	sy
 801140c:	f3bf 8f4f 	dsb	sy
 8011410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011412:	bf00      	nop
 8011414:	e7fe      	b.n	8011414 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011416:	68bb      	ldr	r3, [r7, #8]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d103      	bne.n	8011424 <xQueueGenericSendFromISR+0x3c>
 801141c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011420:	2b00      	cmp	r3, #0
 8011422:	d101      	bne.n	8011428 <xQueueGenericSendFromISR+0x40>
 8011424:	2301      	movs	r3, #1
 8011426:	e000      	b.n	801142a <xQueueGenericSendFromISR+0x42>
 8011428:	2300      	movs	r3, #0
 801142a:	2b00      	cmp	r3, #0
 801142c:	d10a      	bne.n	8011444 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801142e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011432:	f383 8811 	msr	BASEPRI, r3
 8011436:	f3bf 8f6f 	isb	sy
 801143a:	f3bf 8f4f 	dsb	sy
 801143e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011440:	bf00      	nop
 8011442:	e7fe      	b.n	8011442 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	2b02      	cmp	r3, #2
 8011448:	d103      	bne.n	8011452 <xQueueGenericSendFromISR+0x6a>
 801144a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801144c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801144e:	2b01      	cmp	r3, #1
 8011450:	d101      	bne.n	8011456 <xQueueGenericSendFromISR+0x6e>
 8011452:	2301      	movs	r3, #1
 8011454:	e000      	b.n	8011458 <xQueueGenericSendFromISR+0x70>
 8011456:	2300      	movs	r3, #0
 8011458:	2b00      	cmp	r3, #0
 801145a:	d10a      	bne.n	8011472 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801145c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011460:	f383 8811 	msr	BASEPRI, r3
 8011464:	f3bf 8f6f 	isb	sy
 8011468:	f3bf 8f4f 	dsb	sy
 801146c:	623b      	str	r3, [r7, #32]
}
 801146e:	bf00      	nop
 8011470:	e7fe      	b.n	8011470 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011472:	f001 ff89 	bl	8013388 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011476:	f3ef 8211 	mrs	r2, BASEPRI
 801147a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801147e:	f383 8811 	msr	BASEPRI, r3
 8011482:	f3bf 8f6f 	isb	sy
 8011486:	f3bf 8f4f 	dsb	sy
 801148a:	61fa      	str	r2, [r7, #28]
 801148c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801148e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011490:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801149a:	429a      	cmp	r2, r3
 801149c:	d302      	bcc.n	80114a4 <xQueueGenericSendFromISR+0xbc>
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	2b02      	cmp	r3, #2
 80114a2:	d12f      	bne.n	8011504 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80114a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80114aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80114b4:	683a      	ldr	r2, [r7, #0]
 80114b6:	68b9      	ldr	r1, [r7, #8]
 80114b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80114ba:	f000 f911 	bl	80116e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80114be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80114c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114c6:	d112      	bne.n	80114ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80114c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d016      	beq.n	80114fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80114d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d2:	3324      	adds	r3, #36	; 0x24
 80114d4:	4618      	mov	r0, r3
 80114d6:	f000 fed9 	bl	801228c <xTaskRemoveFromEventList>
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d00e      	beq.n	80114fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d00b      	beq.n	80114fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	2201      	movs	r2, #1
 80114ea:	601a      	str	r2, [r3, #0]
 80114ec:	e007      	b.n	80114fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80114ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80114f2:	3301      	adds	r3, #1
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	b25a      	sxtb	r2, r3
 80114f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80114fe:	2301      	movs	r3, #1
 8011500:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011502:	e001      	b.n	8011508 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011504:	2300      	movs	r3, #0
 8011506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801150a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011512:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011516:	4618      	mov	r0, r3
 8011518:	3740      	adds	r7, #64	; 0x40
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
	...

08011520 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b08c      	sub	sp, #48	; 0x30
 8011524:	af00      	add	r7, sp, #0
 8011526:	60f8      	str	r0, [r7, #12]
 8011528:	60b9      	str	r1, [r7, #8]
 801152a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801152c:	2300      	movs	r3, #0
 801152e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011536:	2b00      	cmp	r3, #0
 8011538:	d10a      	bne.n	8011550 <xQueueReceive+0x30>
	__asm volatile
 801153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801153e:	f383 8811 	msr	BASEPRI, r3
 8011542:	f3bf 8f6f 	isb	sy
 8011546:	f3bf 8f4f 	dsb	sy
 801154a:	623b      	str	r3, [r7, #32]
}
 801154c:	bf00      	nop
 801154e:	e7fe      	b.n	801154e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d103      	bne.n	801155e <xQueueReceive+0x3e>
 8011556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801155a:	2b00      	cmp	r3, #0
 801155c:	d101      	bne.n	8011562 <xQueueReceive+0x42>
 801155e:	2301      	movs	r3, #1
 8011560:	e000      	b.n	8011564 <xQueueReceive+0x44>
 8011562:	2300      	movs	r3, #0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d10a      	bne.n	801157e <xQueueReceive+0x5e>
	__asm volatile
 8011568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801156c:	f383 8811 	msr	BASEPRI, r3
 8011570:	f3bf 8f6f 	isb	sy
 8011574:	f3bf 8f4f 	dsb	sy
 8011578:	61fb      	str	r3, [r7, #28]
}
 801157a:	bf00      	nop
 801157c:	e7fe      	b.n	801157c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801157e:	f001 f8a5 	bl	80126cc <xTaskGetSchedulerState>
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d102      	bne.n	801158e <xQueueReceive+0x6e>
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d101      	bne.n	8011592 <xQueueReceive+0x72>
 801158e:	2301      	movs	r3, #1
 8011590:	e000      	b.n	8011594 <xQueueReceive+0x74>
 8011592:	2300      	movs	r3, #0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10a      	bne.n	80115ae <xQueueReceive+0x8e>
	__asm volatile
 8011598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159c:	f383 8811 	msr	BASEPRI, r3
 80115a0:	f3bf 8f6f 	isb	sy
 80115a4:	f3bf 8f4f 	dsb	sy
 80115a8:	61bb      	str	r3, [r7, #24]
}
 80115aa:	bf00      	nop
 80115ac:	e7fe      	b.n	80115ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80115ae:	f001 fe09 	bl	80131c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80115b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80115b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d01f      	beq.n	80115fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80115be:	68b9      	ldr	r1, [r7, #8]
 80115c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80115c2:	f000 f8f7 	bl	80117b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80115c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c8:	1e5a      	subs	r2, r3, #1
 80115ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80115ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d0:	691b      	ldr	r3, [r3, #16]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d00f      	beq.n	80115f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80115d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d8:	3310      	adds	r3, #16
 80115da:	4618      	mov	r0, r3
 80115dc:	f000 fe56 	bl	801228c <xTaskRemoveFromEventList>
 80115e0:	4603      	mov	r3, r0
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d007      	beq.n	80115f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80115e6:	4b3d      	ldr	r3, [pc, #244]	; (80116dc <xQueueReceive+0x1bc>)
 80115e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115ec:	601a      	str	r2, [r3, #0]
 80115ee:	f3bf 8f4f 	dsb	sy
 80115f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80115f6:	f001 fe15 	bl	8013224 <vPortExitCritical>
				return pdPASS;
 80115fa:	2301      	movs	r3, #1
 80115fc:	e069      	b.n	80116d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d103      	bne.n	801160c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011604:	f001 fe0e 	bl	8013224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011608:	2300      	movs	r3, #0
 801160a:	e062      	b.n	80116d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801160e:	2b00      	cmp	r3, #0
 8011610:	d106      	bne.n	8011620 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011612:	f107 0310 	add.w	r3, r7, #16
 8011616:	4618      	mov	r0, r3
 8011618:	f000 fefe 	bl	8012418 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801161c:	2301      	movs	r3, #1
 801161e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011620:	f001 fe00 	bl	8013224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011624:	f000 fc06 	bl	8011e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011628:	f001 fdcc 	bl	80131c4 <vPortEnterCritical>
 801162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011632:	b25b      	sxtb	r3, r3
 8011634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011638:	d103      	bne.n	8011642 <xQueueReceive+0x122>
 801163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163c:	2200      	movs	r2, #0
 801163e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011644:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011648:	b25b      	sxtb	r3, r3
 801164a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801164e:	d103      	bne.n	8011658 <xQueueReceive+0x138>
 8011650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011652:	2200      	movs	r2, #0
 8011654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011658:	f001 fde4 	bl	8013224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801165c:	1d3a      	adds	r2, r7, #4
 801165e:	f107 0310 	add.w	r3, r7, #16
 8011662:	4611      	mov	r1, r2
 8011664:	4618      	mov	r0, r3
 8011666:	f000 feed 	bl	8012444 <xTaskCheckForTimeOut>
 801166a:	4603      	mov	r3, r0
 801166c:	2b00      	cmp	r3, #0
 801166e:	d123      	bne.n	80116b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011672:	f000 f917 	bl	80118a4 <prvIsQueueEmpty>
 8011676:	4603      	mov	r3, r0
 8011678:	2b00      	cmp	r3, #0
 801167a:	d017      	beq.n	80116ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801167e:	3324      	adds	r3, #36	; 0x24
 8011680:	687a      	ldr	r2, [r7, #4]
 8011682:	4611      	mov	r1, r2
 8011684:	4618      	mov	r0, r3
 8011686:	f000 fdb1 	bl	80121ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801168a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801168c:	f000 f8b8 	bl	8011800 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011690:	f000 fbde 	bl	8011e50 <xTaskResumeAll>
 8011694:	4603      	mov	r3, r0
 8011696:	2b00      	cmp	r3, #0
 8011698:	d189      	bne.n	80115ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801169a:	4b10      	ldr	r3, [pc, #64]	; (80116dc <xQueueReceive+0x1bc>)
 801169c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116a0:	601a      	str	r2, [r3, #0]
 80116a2:	f3bf 8f4f 	dsb	sy
 80116a6:	f3bf 8f6f 	isb	sy
 80116aa:	e780      	b.n	80115ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80116ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116ae:	f000 f8a7 	bl	8011800 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80116b2:	f000 fbcd 	bl	8011e50 <xTaskResumeAll>
 80116b6:	e77a      	b.n	80115ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80116b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116ba:	f000 f8a1 	bl	8011800 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80116be:	f000 fbc7 	bl	8011e50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80116c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116c4:	f000 f8ee 	bl	80118a4 <prvIsQueueEmpty>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	f43f af6f 	beq.w	80115ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80116d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3730      	adds	r7, #48	; 0x30
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	e000ed04 	.word	0xe000ed04

080116e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b086      	sub	sp, #24
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	60f8      	str	r0, [r7, #12]
 80116e8:	60b9      	str	r1, [r7, #8]
 80116ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80116ec:	2300      	movs	r3, #0
 80116ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d10d      	bne.n	801171a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d14d      	bne.n	80117a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	689b      	ldr	r3, [r3, #8]
 801170a:	4618      	mov	r0, r3
 801170c:	f000 fffc 	bl	8012708 <xTaskPriorityDisinherit>
 8011710:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	2200      	movs	r2, #0
 8011716:	609a      	str	r2, [r3, #8]
 8011718:	e043      	b.n	80117a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d119      	bne.n	8011754 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	6858      	ldr	r0, [r3, #4]
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011728:	461a      	mov	r2, r3
 801172a:	68b9      	ldr	r1, [r7, #8]
 801172c:	f002 f880 	bl	8013830 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	685a      	ldr	r2, [r3, #4]
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011738:	441a      	add	r2, r3
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	685a      	ldr	r2, [r3, #4]
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	689b      	ldr	r3, [r3, #8]
 8011746:	429a      	cmp	r2, r3
 8011748:	d32b      	bcc.n	80117a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	681a      	ldr	r2, [r3, #0]
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	605a      	str	r2, [r3, #4]
 8011752:	e026      	b.n	80117a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	68d8      	ldr	r0, [r3, #12]
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801175c:	461a      	mov	r2, r3
 801175e:	68b9      	ldr	r1, [r7, #8]
 8011760:	f002 f866 	bl	8013830 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	68da      	ldr	r2, [r3, #12]
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801176c:	425b      	negs	r3, r3
 801176e:	441a      	add	r2, r3
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	68da      	ldr	r2, [r3, #12]
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	429a      	cmp	r2, r3
 801177e:	d207      	bcs.n	8011790 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	689a      	ldr	r2, [r3, #8]
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011788:	425b      	negs	r3, r3
 801178a:	441a      	add	r2, r3
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2b02      	cmp	r3, #2
 8011794:	d105      	bne.n	80117a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011796:	693b      	ldr	r3, [r7, #16]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d002      	beq.n	80117a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	3b01      	subs	r3, #1
 80117a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	1c5a      	adds	r2, r3, #1
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80117aa:	697b      	ldr	r3, [r7, #20]
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3718      	adds	r7, #24
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}

080117b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d018      	beq.n	80117f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	68da      	ldr	r2, [r3, #12]
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117ce:	441a      	add	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	68da      	ldr	r2, [r3, #12]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	689b      	ldr	r3, [r3, #8]
 80117dc:	429a      	cmp	r2, r3
 80117de:	d303      	bcc.n	80117e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681a      	ldr	r2, [r3, #0]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	68d9      	ldr	r1, [r3, #12]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117f0:	461a      	mov	r2, r3
 80117f2:	6838      	ldr	r0, [r7, #0]
 80117f4:	f002 f81c 	bl	8013830 <memcpy>
	}
}
 80117f8:	bf00      	nop
 80117fa:	3708      	adds	r7, #8
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}

08011800 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b084      	sub	sp, #16
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011808:	f001 fcdc 	bl	80131c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011812:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011814:	e011      	b.n	801183a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181a:	2b00      	cmp	r3, #0
 801181c:	d012      	beq.n	8011844 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	3324      	adds	r3, #36	; 0x24
 8011822:	4618      	mov	r0, r3
 8011824:	f000 fd32 	bl	801228c <xTaskRemoveFromEventList>
 8011828:	4603      	mov	r3, r0
 801182a:	2b00      	cmp	r3, #0
 801182c:	d001      	beq.n	8011832 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801182e:	f000 fe6b 	bl	8012508 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011832:	7bfb      	ldrb	r3, [r7, #15]
 8011834:	3b01      	subs	r3, #1
 8011836:	b2db      	uxtb	r3, r3
 8011838:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801183e:	2b00      	cmp	r3, #0
 8011840:	dce9      	bgt.n	8011816 <prvUnlockQueue+0x16>
 8011842:	e000      	b.n	8011846 <prvUnlockQueue+0x46>
					break;
 8011844:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	22ff      	movs	r2, #255	; 0xff
 801184a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801184e:	f001 fce9 	bl	8013224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011852:	f001 fcb7 	bl	80131c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801185c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801185e:	e011      	b.n	8011884 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	691b      	ldr	r3, [r3, #16]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d012      	beq.n	801188e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	3310      	adds	r3, #16
 801186c:	4618      	mov	r0, r3
 801186e:	f000 fd0d 	bl	801228c <xTaskRemoveFromEventList>
 8011872:	4603      	mov	r3, r0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d001      	beq.n	801187c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011878:	f000 fe46 	bl	8012508 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801187c:	7bbb      	ldrb	r3, [r7, #14]
 801187e:	3b01      	subs	r3, #1
 8011880:	b2db      	uxtb	r3, r3
 8011882:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011884:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011888:	2b00      	cmp	r3, #0
 801188a:	dce9      	bgt.n	8011860 <prvUnlockQueue+0x60>
 801188c:	e000      	b.n	8011890 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801188e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	22ff      	movs	r2, #255	; 0xff
 8011894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011898:	f001 fcc4 	bl	8013224 <vPortExitCritical>
}
 801189c:	bf00      	nop
 801189e:	3710      	adds	r7, #16
 80118a0:	46bd      	mov	sp, r7
 80118a2:	bd80      	pop	{r7, pc}

080118a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b084      	sub	sp, #16
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80118ac:	f001 fc8a 	bl	80131c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d102      	bne.n	80118be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80118b8:	2301      	movs	r3, #1
 80118ba:	60fb      	str	r3, [r7, #12]
 80118bc:	e001      	b.n	80118c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80118be:	2300      	movs	r3, #0
 80118c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80118c2:	f001 fcaf 	bl	8013224 <vPortExitCritical>

	return xReturn;
 80118c6:	68fb      	ldr	r3, [r7, #12]
}
 80118c8:	4618      	mov	r0, r3
 80118ca:	3710      	adds	r7, #16
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}

080118d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80118d8:	f001 fc74 	bl	80131c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d102      	bne.n	80118ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80118e8:	2301      	movs	r3, #1
 80118ea:	60fb      	str	r3, [r7, #12]
 80118ec:	e001      	b.n	80118f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80118ee:	2300      	movs	r3, #0
 80118f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80118f2:	f001 fc97 	bl	8013224 <vPortExitCritical>

	return xReturn;
 80118f6:	68fb      	ldr	r3, [r7, #12]
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	3710      	adds	r7, #16
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011900:	b480      	push	{r7}
 8011902:	b085      	sub	sp, #20
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
 8011908:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801190a:	2300      	movs	r3, #0
 801190c:	60fb      	str	r3, [r7, #12]
 801190e:	e014      	b.n	801193a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011910:	4a0f      	ldr	r2, [pc, #60]	; (8011950 <vQueueAddToRegistry+0x50>)
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d10b      	bne.n	8011934 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801191c:	490c      	ldr	r1, [pc, #48]	; (8011950 <vQueueAddToRegistry+0x50>)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	683a      	ldr	r2, [r7, #0]
 8011922:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011926:	4a0a      	ldr	r2, [pc, #40]	; (8011950 <vQueueAddToRegistry+0x50>)
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	00db      	lsls	r3, r3, #3
 801192c:	4413      	add	r3, r2
 801192e:	687a      	ldr	r2, [r7, #4]
 8011930:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011932:	e006      	b.n	8011942 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	3301      	adds	r3, #1
 8011938:	60fb      	str	r3, [r7, #12]
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	2b07      	cmp	r3, #7
 801193e:	d9e7      	bls.n	8011910 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011940:	bf00      	nop
 8011942:	bf00      	nop
 8011944:	3714      	adds	r7, #20
 8011946:	46bd      	mov	sp, r7
 8011948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194c:	4770      	bx	lr
 801194e:	bf00      	nop
 8011950:	24000f4c 	.word	0x24000f4c

08011954 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011954:	b580      	push	{r7, lr}
 8011956:	b086      	sub	sp, #24
 8011958:	af00      	add	r7, sp, #0
 801195a:	60f8      	str	r0, [r7, #12]
 801195c:	60b9      	str	r1, [r7, #8]
 801195e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011964:	f001 fc2e 	bl	80131c4 <vPortEnterCritical>
 8011968:	697b      	ldr	r3, [r7, #20]
 801196a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801196e:	b25b      	sxtb	r3, r3
 8011970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011974:	d103      	bne.n	801197e <vQueueWaitForMessageRestricted+0x2a>
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	2200      	movs	r2, #0
 801197a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011984:	b25b      	sxtb	r3, r3
 8011986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801198a:	d103      	bne.n	8011994 <vQueueWaitForMessageRestricted+0x40>
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	2200      	movs	r2, #0
 8011990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011994:	f001 fc46 	bl	8013224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801199c:	2b00      	cmp	r3, #0
 801199e:	d106      	bne.n	80119ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	3324      	adds	r3, #36	; 0x24
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	68b9      	ldr	r1, [r7, #8]
 80119a8:	4618      	mov	r0, r3
 80119aa:	f000 fc43 	bl	8012234 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80119ae:	6978      	ldr	r0, [r7, #20]
 80119b0:	f7ff ff26 	bl	8011800 <prvUnlockQueue>
	}
 80119b4:	bf00      	nop
 80119b6:	3718      	adds	r7, #24
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}

080119bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b08e      	sub	sp, #56	; 0x38
 80119c0:	af04      	add	r7, sp, #16
 80119c2:	60f8      	str	r0, [r7, #12]
 80119c4:	60b9      	str	r1, [r7, #8]
 80119c6:	607a      	str	r2, [r7, #4]
 80119c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80119ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d10a      	bne.n	80119e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80119d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d4:	f383 8811 	msr	BASEPRI, r3
 80119d8:	f3bf 8f6f 	isb	sy
 80119dc:	f3bf 8f4f 	dsb	sy
 80119e0:	623b      	str	r3, [r7, #32]
}
 80119e2:	bf00      	nop
 80119e4:	e7fe      	b.n	80119e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80119e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d10a      	bne.n	8011a02 <xTaskCreateStatic+0x46>
	__asm volatile
 80119ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f0:	f383 8811 	msr	BASEPRI, r3
 80119f4:	f3bf 8f6f 	isb	sy
 80119f8:	f3bf 8f4f 	dsb	sy
 80119fc:	61fb      	str	r3, [r7, #28]
}
 80119fe:	bf00      	nop
 8011a00:	e7fe      	b.n	8011a00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011a02:	235c      	movs	r3, #92	; 0x5c
 8011a04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	2b5c      	cmp	r3, #92	; 0x5c
 8011a0a:	d00a      	beq.n	8011a22 <xTaskCreateStatic+0x66>
	__asm volatile
 8011a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a10:	f383 8811 	msr	BASEPRI, r3
 8011a14:	f3bf 8f6f 	isb	sy
 8011a18:	f3bf 8f4f 	dsb	sy
 8011a1c:	61bb      	str	r3, [r7, #24]
}
 8011a1e:	bf00      	nop
 8011a20:	e7fe      	b.n	8011a20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011a22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d01e      	beq.n	8011a68 <xTaskCreateStatic+0xac>
 8011a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d01b      	beq.n	8011a68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3c:	2202      	movs	r2, #2
 8011a3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011a42:	2300      	movs	r3, #0
 8011a44:	9303      	str	r3, [sp, #12]
 8011a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a48:	9302      	str	r3, [sp, #8]
 8011a4a:	f107 0314 	add.w	r3, r7, #20
 8011a4e:	9301      	str	r3, [sp, #4]
 8011a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a52:	9300      	str	r3, [sp, #0]
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	687a      	ldr	r2, [r7, #4]
 8011a58:	68b9      	ldr	r1, [r7, #8]
 8011a5a:	68f8      	ldr	r0, [r7, #12]
 8011a5c:	f000 f850 	bl	8011b00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a62:	f000 f8dd 	bl	8011c20 <prvAddNewTaskToReadyList>
 8011a66:	e001      	b.n	8011a6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011a6c:	697b      	ldr	r3, [r7, #20]
	}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3728      	adds	r7, #40	; 0x28
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}

08011a76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011a76:	b580      	push	{r7, lr}
 8011a78:	b08c      	sub	sp, #48	; 0x30
 8011a7a:	af04      	add	r7, sp, #16
 8011a7c:	60f8      	str	r0, [r7, #12]
 8011a7e:	60b9      	str	r1, [r7, #8]
 8011a80:	603b      	str	r3, [r7, #0]
 8011a82:	4613      	mov	r3, r2
 8011a84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011a86:	88fb      	ldrh	r3, [r7, #6]
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f001 fcbc 	bl	8013408 <pvPortMalloc>
 8011a90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d00e      	beq.n	8011ab6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011a98:	205c      	movs	r0, #92	; 0x5c
 8011a9a:	f001 fcb5 	bl	8013408 <pvPortMalloc>
 8011a9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d003      	beq.n	8011aae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	697a      	ldr	r2, [r7, #20]
 8011aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8011aac:	e005      	b.n	8011aba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011aae:	6978      	ldr	r0, [r7, #20]
 8011ab0:	f001 fd76 	bl	80135a0 <vPortFree>
 8011ab4:	e001      	b.n	8011aba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011aba:	69fb      	ldr	r3, [r7, #28]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d017      	beq.n	8011af0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011ac0:	69fb      	ldr	r3, [r7, #28]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011ac8:	88fa      	ldrh	r2, [r7, #6]
 8011aca:	2300      	movs	r3, #0
 8011acc:	9303      	str	r3, [sp, #12]
 8011ace:	69fb      	ldr	r3, [r7, #28]
 8011ad0:	9302      	str	r3, [sp, #8]
 8011ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad4:	9301      	str	r3, [sp, #4]
 8011ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	68b9      	ldr	r1, [r7, #8]
 8011ade:	68f8      	ldr	r0, [r7, #12]
 8011ae0:	f000 f80e 	bl	8011b00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011ae4:	69f8      	ldr	r0, [r7, #28]
 8011ae6:	f000 f89b 	bl	8011c20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011aea:	2301      	movs	r3, #1
 8011aec:	61bb      	str	r3, [r7, #24]
 8011aee:	e002      	b.n	8011af6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011af4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011af6:	69bb      	ldr	r3, [r7, #24]
	}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3720      	adds	r7, #32
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b088      	sub	sp, #32
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	607a      	str	r2, [r7, #4]
 8011b0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	461a      	mov	r2, r3
 8011b18:	21a5      	movs	r1, #165	; 0xa5
 8011b1a:	f001 fe97 	bl	801384c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b22:	6879      	ldr	r1, [r7, #4]
 8011b24:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011b28:	440b      	add	r3, r1
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	4413      	add	r3, r2
 8011b2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011b30:	69bb      	ldr	r3, [r7, #24]
 8011b32:	f023 0307 	bic.w	r3, r3, #7
 8011b36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011b38:	69bb      	ldr	r3, [r7, #24]
 8011b3a:	f003 0307 	and.w	r3, r3, #7
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d00a      	beq.n	8011b58 <prvInitialiseNewTask+0x58>
	__asm volatile
 8011b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b46:	f383 8811 	msr	BASEPRI, r3
 8011b4a:	f3bf 8f6f 	isb	sy
 8011b4e:	f3bf 8f4f 	dsb	sy
 8011b52:	617b      	str	r3, [r7, #20]
}
 8011b54:	bf00      	nop
 8011b56:	e7fe      	b.n	8011b56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d01f      	beq.n	8011b9e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011b5e:	2300      	movs	r3, #0
 8011b60:	61fb      	str	r3, [r7, #28]
 8011b62:	e012      	b.n	8011b8a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011b64:	68ba      	ldr	r2, [r7, #8]
 8011b66:	69fb      	ldr	r3, [r7, #28]
 8011b68:	4413      	add	r3, r2
 8011b6a:	7819      	ldrb	r1, [r3, #0]
 8011b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b6e:	69fb      	ldr	r3, [r7, #28]
 8011b70:	4413      	add	r3, r2
 8011b72:	3334      	adds	r3, #52	; 0x34
 8011b74:	460a      	mov	r2, r1
 8011b76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011b78:	68ba      	ldr	r2, [r7, #8]
 8011b7a:	69fb      	ldr	r3, [r7, #28]
 8011b7c:	4413      	add	r3, r2
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d006      	beq.n	8011b92 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011b84:	69fb      	ldr	r3, [r7, #28]
 8011b86:	3301      	adds	r3, #1
 8011b88:	61fb      	str	r3, [r7, #28]
 8011b8a:	69fb      	ldr	r3, [r7, #28]
 8011b8c:	2b0f      	cmp	r3, #15
 8011b8e:	d9e9      	bls.n	8011b64 <prvInitialiseNewTask+0x64>
 8011b90:	e000      	b.n	8011b94 <prvInitialiseNewTask+0x94>
			{
				break;
 8011b92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b96:	2200      	movs	r2, #0
 8011b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011b9c:	e003      	b.n	8011ba6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ba8:	2b37      	cmp	r3, #55	; 0x37
 8011baa:	d901      	bls.n	8011bb0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011bac:	2337      	movs	r3, #55	; 0x37
 8011bae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bb4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011bba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc4:	3304      	adds	r3, #4
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7ff f93e 	bl	8010e48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bce:	3318      	adds	r3, #24
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7ff f939 	bl	8010e48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bee:	2200      	movs	r2, #0
 8011bf0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011bfa:	683a      	ldr	r2, [r7, #0]
 8011bfc:	68f9      	ldr	r1, [r7, #12]
 8011bfe:	69b8      	ldr	r0, [r7, #24]
 8011c00:	f001 f9b2 	bl	8012f68 <pxPortInitialiseStack>
 8011c04:	4602      	mov	r2, r0
 8011c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d002      	beq.n	8011c16 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011c16:	bf00      	nop
 8011c18:	3720      	adds	r7, #32
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
	...

08011c20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b082      	sub	sp, #8
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011c28:	f001 facc 	bl	80131c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011c2c:	4b2d      	ldr	r3, [pc, #180]	; (8011ce4 <prvAddNewTaskToReadyList+0xc4>)
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	3301      	adds	r3, #1
 8011c32:	4a2c      	ldr	r2, [pc, #176]	; (8011ce4 <prvAddNewTaskToReadyList+0xc4>)
 8011c34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011c36:	4b2c      	ldr	r3, [pc, #176]	; (8011ce8 <prvAddNewTaskToReadyList+0xc8>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d109      	bne.n	8011c52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011c3e:	4a2a      	ldr	r2, [pc, #168]	; (8011ce8 <prvAddNewTaskToReadyList+0xc8>)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011c44:	4b27      	ldr	r3, [pc, #156]	; (8011ce4 <prvAddNewTaskToReadyList+0xc4>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	d110      	bne.n	8011c6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011c4c:	f000 fc80 	bl	8012550 <prvInitialiseTaskLists>
 8011c50:	e00d      	b.n	8011c6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011c52:	4b26      	ldr	r3, [pc, #152]	; (8011cec <prvAddNewTaskToReadyList+0xcc>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d109      	bne.n	8011c6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011c5a:	4b23      	ldr	r3, [pc, #140]	; (8011ce8 <prvAddNewTaskToReadyList+0xc8>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d802      	bhi.n	8011c6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011c68:	4a1f      	ldr	r2, [pc, #124]	; (8011ce8 <prvAddNewTaskToReadyList+0xc8>)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011c6e:	4b20      	ldr	r3, [pc, #128]	; (8011cf0 <prvAddNewTaskToReadyList+0xd0>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	3301      	adds	r3, #1
 8011c74:	4a1e      	ldr	r2, [pc, #120]	; (8011cf0 <prvAddNewTaskToReadyList+0xd0>)
 8011c76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011c78:	4b1d      	ldr	r3, [pc, #116]	; (8011cf0 <prvAddNewTaskToReadyList+0xd0>)
 8011c7a:	681a      	ldr	r2, [r3, #0]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c84:	4b1b      	ldr	r3, [pc, #108]	; (8011cf4 <prvAddNewTaskToReadyList+0xd4>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	d903      	bls.n	8011c94 <prvAddNewTaskToReadyList+0x74>
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c90:	4a18      	ldr	r2, [pc, #96]	; (8011cf4 <prvAddNewTaskToReadyList+0xd4>)
 8011c92:	6013      	str	r3, [r2, #0]
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c98:	4613      	mov	r3, r2
 8011c9a:	009b      	lsls	r3, r3, #2
 8011c9c:	4413      	add	r3, r2
 8011c9e:	009b      	lsls	r3, r3, #2
 8011ca0:	4a15      	ldr	r2, [pc, #84]	; (8011cf8 <prvAddNewTaskToReadyList+0xd8>)
 8011ca2:	441a      	add	r2, r3
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	3304      	adds	r3, #4
 8011ca8:	4619      	mov	r1, r3
 8011caa:	4610      	mov	r0, r2
 8011cac:	f7ff f8d9 	bl	8010e62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011cb0:	f001 fab8 	bl	8013224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011cb4:	4b0d      	ldr	r3, [pc, #52]	; (8011cec <prvAddNewTaskToReadyList+0xcc>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d00e      	beq.n	8011cda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011cbc:	4b0a      	ldr	r3, [pc, #40]	; (8011ce8 <prvAddNewTaskToReadyList+0xc8>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d207      	bcs.n	8011cda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011cca:	4b0c      	ldr	r3, [pc, #48]	; (8011cfc <prvAddNewTaskToReadyList+0xdc>)
 8011ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cd0:	601a      	str	r2, [r3, #0]
 8011cd2:	f3bf 8f4f 	dsb	sy
 8011cd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011cda:	bf00      	nop
 8011cdc:	3708      	adds	r7, #8
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	24001460 	.word	0x24001460
 8011ce8:	24000f8c 	.word	0x24000f8c
 8011cec:	2400146c 	.word	0x2400146c
 8011cf0:	2400147c 	.word	0x2400147c
 8011cf4:	24001468 	.word	0x24001468
 8011cf8:	24000f90 	.word	0x24000f90
 8011cfc:	e000ed04 	.word	0xe000ed04

08011d00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d017      	beq.n	8011d42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011d12:	4b13      	ldr	r3, [pc, #76]	; (8011d60 <vTaskDelay+0x60>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d00a      	beq.n	8011d30 <vTaskDelay+0x30>
	__asm volatile
 8011d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d1e:	f383 8811 	msr	BASEPRI, r3
 8011d22:	f3bf 8f6f 	isb	sy
 8011d26:	f3bf 8f4f 	dsb	sy
 8011d2a:	60bb      	str	r3, [r7, #8]
}
 8011d2c:	bf00      	nop
 8011d2e:	e7fe      	b.n	8011d2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011d30:	f000 f880 	bl	8011e34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011d34:	2100      	movs	r1, #0
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f000 fd54 	bl	80127e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011d3c:	f000 f888 	bl	8011e50 <xTaskResumeAll>
 8011d40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d107      	bne.n	8011d58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011d48:	4b06      	ldr	r3, [pc, #24]	; (8011d64 <vTaskDelay+0x64>)
 8011d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d4e:	601a      	str	r2, [r3, #0]
 8011d50:	f3bf 8f4f 	dsb	sy
 8011d54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011d58:	bf00      	nop
 8011d5a:	3710      	adds	r7, #16
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}
 8011d60:	24001488 	.word	0x24001488
 8011d64:	e000ed04 	.word	0xe000ed04

08011d68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b08a      	sub	sp, #40	; 0x28
 8011d6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011d72:	2300      	movs	r3, #0
 8011d74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011d76:	463a      	mov	r2, r7
 8011d78:	1d39      	adds	r1, r7, #4
 8011d7a:	f107 0308 	add.w	r3, r7, #8
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7fe ff10 	bl	8010ba4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011d84:	6839      	ldr	r1, [r7, #0]
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	68ba      	ldr	r2, [r7, #8]
 8011d8a:	9202      	str	r2, [sp, #8]
 8011d8c:	9301      	str	r3, [sp, #4]
 8011d8e:	2300      	movs	r3, #0
 8011d90:	9300      	str	r3, [sp, #0]
 8011d92:	2300      	movs	r3, #0
 8011d94:	460a      	mov	r2, r1
 8011d96:	4921      	ldr	r1, [pc, #132]	; (8011e1c <vTaskStartScheduler+0xb4>)
 8011d98:	4821      	ldr	r0, [pc, #132]	; (8011e20 <vTaskStartScheduler+0xb8>)
 8011d9a:	f7ff fe0f 	bl	80119bc <xTaskCreateStatic>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	4a20      	ldr	r2, [pc, #128]	; (8011e24 <vTaskStartScheduler+0xbc>)
 8011da2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011da4:	4b1f      	ldr	r3, [pc, #124]	; (8011e24 <vTaskStartScheduler+0xbc>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d002      	beq.n	8011db2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011dac:	2301      	movs	r3, #1
 8011dae:	617b      	str	r3, [r7, #20]
 8011db0:	e001      	b.n	8011db6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011db2:	2300      	movs	r3, #0
 8011db4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	2b01      	cmp	r3, #1
 8011dba:	d102      	bne.n	8011dc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011dbc:	f000 fd66 	bl	801288c <xTimerCreateTimerTask>
 8011dc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d116      	bne.n	8011df6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8011dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dcc:	f383 8811 	msr	BASEPRI, r3
 8011dd0:	f3bf 8f6f 	isb	sy
 8011dd4:	f3bf 8f4f 	dsb	sy
 8011dd8:	613b      	str	r3, [r7, #16]
}
 8011dda:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011ddc:	4b12      	ldr	r3, [pc, #72]	; (8011e28 <vTaskStartScheduler+0xc0>)
 8011dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011de2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011de4:	4b11      	ldr	r3, [pc, #68]	; (8011e2c <vTaskStartScheduler+0xc4>)
 8011de6:	2201      	movs	r2, #1
 8011de8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011dea:	4b11      	ldr	r3, [pc, #68]	; (8011e30 <vTaskStartScheduler+0xc8>)
 8011dec:	2200      	movs	r2, #0
 8011dee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011df0:	f001 f946 	bl	8013080 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011df4:	e00e      	b.n	8011e14 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011df6:	697b      	ldr	r3, [r7, #20]
 8011df8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011dfc:	d10a      	bne.n	8011e14 <vTaskStartScheduler+0xac>
	__asm volatile
 8011dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e02:	f383 8811 	msr	BASEPRI, r3
 8011e06:	f3bf 8f6f 	isb	sy
 8011e0a:	f3bf 8f4f 	dsb	sy
 8011e0e:	60fb      	str	r3, [r7, #12]
}
 8011e10:	bf00      	nop
 8011e12:	e7fe      	b.n	8011e12 <vTaskStartScheduler+0xaa>
}
 8011e14:	bf00      	nop
 8011e16:	3718      	adds	r7, #24
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}
 8011e1c:	08014498 	.word	0x08014498
 8011e20:	08012521 	.word	0x08012521
 8011e24:	24001484 	.word	0x24001484
 8011e28:	24001480 	.word	0x24001480
 8011e2c:	2400146c 	.word	0x2400146c
 8011e30:	24001464 	.word	0x24001464

08011e34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011e34:	b480      	push	{r7}
 8011e36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011e38:	4b04      	ldr	r3, [pc, #16]	; (8011e4c <vTaskSuspendAll+0x18>)
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	3301      	adds	r3, #1
 8011e3e:	4a03      	ldr	r2, [pc, #12]	; (8011e4c <vTaskSuspendAll+0x18>)
 8011e40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011e42:	bf00      	nop
 8011e44:	46bd      	mov	sp, r7
 8011e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4a:	4770      	bx	lr
 8011e4c:	24001488 	.word	0x24001488

08011e50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b084      	sub	sp, #16
 8011e54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011e56:	2300      	movs	r3, #0
 8011e58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011e5e:	4b42      	ldr	r3, [pc, #264]	; (8011f68 <xTaskResumeAll+0x118>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d10a      	bne.n	8011e7c <xTaskResumeAll+0x2c>
	__asm volatile
 8011e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e6a:	f383 8811 	msr	BASEPRI, r3
 8011e6e:	f3bf 8f6f 	isb	sy
 8011e72:	f3bf 8f4f 	dsb	sy
 8011e76:	603b      	str	r3, [r7, #0]
}
 8011e78:	bf00      	nop
 8011e7a:	e7fe      	b.n	8011e7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011e7c:	f001 f9a2 	bl	80131c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011e80:	4b39      	ldr	r3, [pc, #228]	; (8011f68 <xTaskResumeAll+0x118>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	3b01      	subs	r3, #1
 8011e86:	4a38      	ldr	r2, [pc, #224]	; (8011f68 <xTaskResumeAll+0x118>)
 8011e88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e8a:	4b37      	ldr	r3, [pc, #220]	; (8011f68 <xTaskResumeAll+0x118>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d162      	bne.n	8011f58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011e92:	4b36      	ldr	r3, [pc, #216]	; (8011f6c <xTaskResumeAll+0x11c>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d05e      	beq.n	8011f58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011e9a:	e02f      	b.n	8011efc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e9c:	4b34      	ldr	r3, [pc, #208]	; (8011f70 <xTaskResumeAll+0x120>)
 8011e9e:	68db      	ldr	r3, [r3, #12]
 8011ea0:	68db      	ldr	r3, [r3, #12]
 8011ea2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	3318      	adds	r3, #24
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7ff f837 	bl	8010f1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	3304      	adds	r3, #4
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7ff f832 	bl	8010f1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ebc:	4b2d      	ldr	r3, [pc, #180]	; (8011f74 <xTaskResumeAll+0x124>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d903      	bls.n	8011ecc <xTaskResumeAll+0x7c>
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ec8:	4a2a      	ldr	r2, [pc, #168]	; (8011f74 <xTaskResumeAll+0x124>)
 8011eca:	6013      	str	r3, [r2, #0]
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ed0:	4613      	mov	r3, r2
 8011ed2:	009b      	lsls	r3, r3, #2
 8011ed4:	4413      	add	r3, r2
 8011ed6:	009b      	lsls	r3, r3, #2
 8011ed8:	4a27      	ldr	r2, [pc, #156]	; (8011f78 <xTaskResumeAll+0x128>)
 8011eda:	441a      	add	r2, r3
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	3304      	adds	r3, #4
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	4610      	mov	r0, r2
 8011ee4:	f7fe ffbd 	bl	8010e62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eec:	4b23      	ldr	r3, [pc, #140]	; (8011f7c <xTaskResumeAll+0x12c>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d302      	bcc.n	8011efc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011ef6:	4b22      	ldr	r3, [pc, #136]	; (8011f80 <xTaskResumeAll+0x130>)
 8011ef8:	2201      	movs	r2, #1
 8011efa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011efc:	4b1c      	ldr	r3, [pc, #112]	; (8011f70 <xTaskResumeAll+0x120>)
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d1cb      	bne.n	8011e9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d001      	beq.n	8011f0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011f0a:	f000 fbbf 	bl	801268c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011f0e:	4b1d      	ldr	r3, [pc, #116]	; (8011f84 <xTaskResumeAll+0x134>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d010      	beq.n	8011f3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011f1a:	f000 f847 	bl	8011fac <xTaskIncrementTick>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d002      	beq.n	8011f2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011f24:	4b16      	ldr	r3, [pc, #88]	; (8011f80 <xTaskResumeAll+0x130>)
 8011f26:	2201      	movs	r2, #1
 8011f28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	3b01      	subs	r3, #1
 8011f2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d1f1      	bne.n	8011f1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011f36:	4b13      	ldr	r3, [pc, #76]	; (8011f84 <xTaskResumeAll+0x134>)
 8011f38:	2200      	movs	r2, #0
 8011f3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011f3c:	4b10      	ldr	r3, [pc, #64]	; (8011f80 <xTaskResumeAll+0x130>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d009      	beq.n	8011f58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011f44:	2301      	movs	r3, #1
 8011f46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011f48:	4b0f      	ldr	r3, [pc, #60]	; (8011f88 <xTaskResumeAll+0x138>)
 8011f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f4e:	601a      	str	r2, [r3, #0]
 8011f50:	f3bf 8f4f 	dsb	sy
 8011f54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011f58:	f001 f964 	bl	8013224 <vPortExitCritical>

	return xAlreadyYielded;
 8011f5c:	68bb      	ldr	r3, [r7, #8]
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3710      	adds	r7, #16
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	24001488 	.word	0x24001488
 8011f6c:	24001460 	.word	0x24001460
 8011f70:	24001420 	.word	0x24001420
 8011f74:	24001468 	.word	0x24001468
 8011f78:	24000f90 	.word	0x24000f90
 8011f7c:	24000f8c 	.word	0x24000f8c
 8011f80:	24001474 	.word	0x24001474
 8011f84:	24001470 	.word	0x24001470
 8011f88:	e000ed04 	.word	0xe000ed04

08011f8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011f8c:	b480      	push	{r7}
 8011f8e:	b083      	sub	sp, #12
 8011f90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011f92:	4b05      	ldr	r3, [pc, #20]	; (8011fa8 <xTaskGetTickCount+0x1c>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011f98:	687b      	ldr	r3, [r7, #4]
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	370c      	adds	r7, #12
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa4:	4770      	bx	lr
 8011fa6:	bf00      	nop
 8011fa8:	24001464 	.word	0x24001464

08011fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b086      	sub	sp, #24
 8011fb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011fb6:	4b53      	ldr	r3, [pc, #332]	; (8012104 <xTaskIncrementTick+0x158>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	f040 8095 	bne.w	80120ea <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011fc0:	4b51      	ldr	r3, [pc, #324]	; (8012108 <xTaskIncrementTick+0x15c>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011fc8:	4a4f      	ldr	r2, [pc, #316]	; (8012108 <xTaskIncrementTick+0x15c>)
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011fce:	693b      	ldr	r3, [r7, #16]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d120      	bne.n	8012016 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011fd4:	4b4d      	ldr	r3, [pc, #308]	; (801210c <xTaskIncrementTick+0x160>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d00a      	beq.n	8011ff4 <xTaskIncrementTick+0x48>
	__asm volatile
 8011fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe2:	f383 8811 	msr	BASEPRI, r3
 8011fe6:	f3bf 8f6f 	isb	sy
 8011fea:	f3bf 8f4f 	dsb	sy
 8011fee:	603b      	str	r3, [r7, #0]
}
 8011ff0:	bf00      	nop
 8011ff2:	e7fe      	b.n	8011ff2 <xTaskIncrementTick+0x46>
 8011ff4:	4b45      	ldr	r3, [pc, #276]	; (801210c <xTaskIncrementTick+0x160>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	60fb      	str	r3, [r7, #12]
 8011ffa:	4b45      	ldr	r3, [pc, #276]	; (8012110 <xTaskIncrementTick+0x164>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	4a43      	ldr	r2, [pc, #268]	; (801210c <xTaskIncrementTick+0x160>)
 8012000:	6013      	str	r3, [r2, #0]
 8012002:	4a43      	ldr	r2, [pc, #268]	; (8012110 <xTaskIncrementTick+0x164>)
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	6013      	str	r3, [r2, #0]
 8012008:	4b42      	ldr	r3, [pc, #264]	; (8012114 <xTaskIncrementTick+0x168>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	3301      	adds	r3, #1
 801200e:	4a41      	ldr	r2, [pc, #260]	; (8012114 <xTaskIncrementTick+0x168>)
 8012010:	6013      	str	r3, [r2, #0]
 8012012:	f000 fb3b 	bl	801268c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012016:	4b40      	ldr	r3, [pc, #256]	; (8012118 <xTaskIncrementTick+0x16c>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	693a      	ldr	r2, [r7, #16]
 801201c:	429a      	cmp	r2, r3
 801201e:	d349      	bcc.n	80120b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012020:	4b3a      	ldr	r3, [pc, #232]	; (801210c <xTaskIncrementTick+0x160>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d104      	bne.n	8012034 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801202a:	4b3b      	ldr	r3, [pc, #236]	; (8012118 <xTaskIncrementTick+0x16c>)
 801202c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012030:	601a      	str	r2, [r3, #0]
					break;
 8012032:	e03f      	b.n	80120b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012034:	4b35      	ldr	r3, [pc, #212]	; (801210c <xTaskIncrementTick+0x160>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	68db      	ldr	r3, [r3, #12]
 801203a:	68db      	ldr	r3, [r3, #12]
 801203c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	685b      	ldr	r3, [r3, #4]
 8012042:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012044:	693a      	ldr	r2, [r7, #16]
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	429a      	cmp	r2, r3
 801204a:	d203      	bcs.n	8012054 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801204c:	4a32      	ldr	r2, [pc, #200]	; (8012118 <xTaskIncrementTick+0x16c>)
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012052:	e02f      	b.n	80120b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012054:	68bb      	ldr	r3, [r7, #8]
 8012056:	3304      	adds	r3, #4
 8012058:	4618      	mov	r0, r3
 801205a:	f7fe ff5f 	bl	8010f1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012062:	2b00      	cmp	r3, #0
 8012064:	d004      	beq.n	8012070 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	3318      	adds	r3, #24
 801206a:	4618      	mov	r0, r3
 801206c:	f7fe ff56 	bl	8010f1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012070:	68bb      	ldr	r3, [r7, #8]
 8012072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012074:	4b29      	ldr	r3, [pc, #164]	; (801211c <xTaskIncrementTick+0x170>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	429a      	cmp	r2, r3
 801207a:	d903      	bls.n	8012084 <xTaskIncrementTick+0xd8>
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012080:	4a26      	ldr	r2, [pc, #152]	; (801211c <xTaskIncrementTick+0x170>)
 8012082:	6013      	str	r3, [r2, #0]
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012088:	4613      	mov	r3, r2
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	4413      	add	r3, r2
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	4a23      	ldr	r2, [pc, #140]	; (8012120 <xTaskIncrementTick+0x174>)
 8012092:	441a      	add	r2, r3
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	3304      	adds	r3, #4
 8012098:	4619      	mov	r1, r3
 801209a:	4610      	mov	r0, r2
 801209c:	f7fe fee1 	bl	8010e62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120a4:	4b1f      	ldr	r3, [pc, #124]	; (8012124 <xTaskIncrementTick+0x178>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d3b8      	bcc.n	8012020 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80120ae:	2301      	movs	r3, #1
 80120b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80120b2:	e7b5      	b.n	8012020 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80120b4:	4b1b      	ldr	r3, [pc, #108]	; (8012124 <xTaskIncrementTick+0x178>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120ba:	4919      	ldr	r1, [pc, #100]	; (8012120 <xTaskIncrementTick+0x174>)
 80120bc:	4613      	mov	r3, r2
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	4413      	add	r3, r2
 80120c2:	009b      	lsls	r3, r3, #2
 80120c4:	440b      	add	r3, r1
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	2b01      	cmp	r3, #1
 80120ca:	d901      	bls.n	80120d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80120cc:	2301      	movs	r3, #1
 80120ce:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80120d0:	4b15      	ldr	r3, [pc, #84]	; (8012128 <xTaskIncrementTick+0x17c>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d101      	bne.n	80120dc <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80120d8:	f7ee fe3e 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80120dc:	4b13      	ldr	r3, [pc, #76]	; (801212c <xTaskIncrementTick+0x180>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d009      	beq.n	80120f8 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80120e4:	2301      	movs	r3, #1
 80120e6:	617b      	str	r3, [r7, #20]
 80120e8:	e006      	b.n	80120f8 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80120ea:	4b0f      	ldr	r3, [pc, #60]	; (8012128 <xTaskIncrementTick+0x17c>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	3301      	adds	r3, #1
 80120f0:	4a0d      	ldr	r2, [pc, #52]	; (8012128 <xTaskIncrementTick+0x17c>)
 80120f2:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80120f4:	f7ee fe30 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80120f8:	697b      	ldr	r3, [r7, #20]
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3718      	adds	r7, #24
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
 8012102:	bf00      	nop
 8012104:	24001488 	.word	0x24001488
 8012108:	24001464 	.word	0x24001464
 801210c:	24001418 	.word	0x24001418
 8012110:	2400141c 	.word	0x2400141c
 8012114:	24001478 	.word	0x24001478
 8012118:	24001480 	.word	0x24001480
 801211c:	24001468 	.word	0x24001468
 8012120:	24000f90 	.word	0x24000f90
 8012124:	24000f8c 	.word	0x24000f8c
 8012128:	24001470 	.word	0x24001470
 801212c:	24001474 	.word	0x24001474

08012130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012130:	b480      	push	{r7}
 8012132:	b085      	sub	sp, #20
 8012134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012136:	4b28      	ldr	r3, [pc, #160]	; (80121d8 <vTaskSwitchContext+0xa8>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d003      	beq.n	8012146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801213e:	4b27      	ldr	r3, [pc, #156]	; (80121dc <vTaskSwitchContext+0xac>)
 8012140:	2201      	movs	r2, #1
 8012142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012144:	e041      	b.n	80121ca <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8012146:	4b25      	ldr	r3, [pc, #148]	; (80121dc <vTaskSwitchContext+0xac>)
 8012148:	2200      	movs	r2, #0
 801214a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801214c:	4b24      	ldr	r3, [pc, #144]	; (80121e0 <vTaskSwitchContext+0xb0>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	60fb      	str	r3, [r7, #12]
 8012152:	e010      	b.n	8012176 <vTaskSwitchContext+0x46>
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d10a      	bne.n	8012170 <vTaskSwitchContext+0x40>
	__asm volatile
 801215a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801215e:	f383 8811 	msr	BASEPRI, r3
 8012162:	f3bf 8f6f 	isb	sy
 8012166:	f3bf 8f4f 	dsb	sy
 801216a:	607b      	str	r3, [r7, #4]
}
 801216c:	bf00      	nop
 801216e:	e7fe      	b.n	801216e <vTaskSwitchContext+0x3e>
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	3b01      	subs	r3, #1
 8012174:	60fb      	str	r3, [r7, #12]
 8012176:	491b      	ldr	r1, [pc, #108]	; (80121e4 <vTaskSwitchContext+0xb4>)
 8012178:	68fa      	ldr	r2, [r7, #12]
 801217a:	4613      	mov	r3, r2
 801217c:	009b      	lsls	r3, r3, #2
 801217e:	4413      	add	r3, r2
 8012180:	009b      	lsls	r3, r3, #2
 8012182:	440b      	add	r3, r1
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d0e4      	beq.n	8012154 <vTaskSwitchContext+0x24>
 801218a:	68fa      	ldr	r2, [r7, #12]
 801218c:	4613      	mov	r3, r2
 801218e:	009b      	lsls	r3, r3, #2
 8012190:	4413      	add	r3, r2
 8012192:	009b      	lsls	r3, r3, #2
 8012194:	4a13      	ldr	r2, [pc, #76]	; (80121e4 <vTaskSwitchContext+0xb4>)
 8012196:	4413      	add	r3, r2
 8012198:	60bb      	str	r3, [r7, #8]
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	685a      	ldr	r2, [r3, #4]
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	605a      	str	r2, [r3, #4]
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	685a      	ldr	r2, [r3, #4]
 80121a8:	68bb      	ldr	r3, [r7, #8]
 80121aa:	3308      	adds	r3, #8
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d104      	bne.n	80121ba <vTaskSwitchContext+0x8a>
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	685b      	ldr	r3, [r3, #4]
 80121b4:	685a      	ldr	r2, [r3, #4]
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	605a      	str	r2, [r3, #4]
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	685b      	ldr	r3, [r3, #4]
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	4a09      	ldr	r2, [pc, #36]	; (80121e8 <vTaskSwitchContext+0xb8>)
 80121c2:	6013      	str	r3, [r2, #0]
 80121c4:	4a06      	ldr	r2, [pc, #24]	; (80121e0 <vTaskSwitchContext+0xb0>)
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	6013      	str	r3, [r2, #0]
}
 80121ca:	bf00      	nop
 80121cc:	3714      	adds	r7, #20
 80121ce:	46bd      	mov	sp, r7
 80121d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d4:	4770      	bx	lr
 80121d6:	bf00      	nop
 80121d8:	24001488 	.word	0x24001488
 80121dc:	24001474 	.word	0x24001474
 80121e0:	24001468 	.word	0x24001468
 80121e4:	24000f90 	.word	0x24000f90
 80121e8:	24000f8c 	.word	0x24000f8c

080121ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b084      	sub	sp, #16
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d10a      	bne.n	8012212 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80121fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012200:	f383 8811 	msr	BASEPRI, r3
 8012204:	f3bf 8f6f 	isb	sy
 8012208:	f3bf 8f4f 	dsb	sy
 801220c:	60fb      	str	r3, [r7, #12]
}
 801220e:	bf00      	nop
 8012210:	e7fe      	b.n	8012210 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012212:	4b07      	ldr	r3, [pc, #28]	; (8012230 <vTaskPlaceOnEventList+0x44>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	3318      	adds	r3, #24
 8012218:	4619      	mov	r1, r3
 801221a:	6878      	ldr	r0, [r7, #4]
 801221c:	f7fe fe45 	bl	8010eaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012220:	2101      	movs	r1, #1
 8012222:	6838      	ldr	r0, [r7, #0]
 8012224:	f000 fade 	bl	80127e4 <prvAddCurrentTaskToDelayedList>
}
 8012228:	bf00      	nop
 801222a:	3710      	adds	r7, #16
 801222c:	46bd      	mov	sp, r7
 801222e:	bd80      	pop	{r7, pc}
 8012230:	24000f8c 	.word	0x24000f8c

08012234 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012234:	b580      	push	{r7, lr}
 8012236:	b086      	sub	sp, #24
 8012238:	af00      	add	r7, sp, #0
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d10a      	bne.n	801225c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801224a:	f383 8811 	msr	BASEPRI, r3
 801224e:	f3bf 8f6f 	isb	sy
 8012252:	f3bf 8f4f 	dsb	sy
 8012256:	617b      	str	r3, [r7, #20]
}
 8012258:	bf00      	nop
 801225a:	e7fe      	b.n	801225a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801225c:	4b0a      	ldr	r3, [pc, #40]	; (8012288 <vTaskPlaceOnEventListRestricted+0x54>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	3318      	adds	r3, #24
 8012262:	4619      	mov	r1, r3
 8012264:	68f8      	ldr	r0, [r7, #12]
 8012266:	f7fe fdfc 	bl	8010e62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d002      	beq.n	8012276 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012274:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012276:	6879      	ldr	r1, [r7, #4]
 8012278:	68b8      	ldr	r0, [r7, #8]
 801227a:	f000 fab3 	bl	80127e4 <prvAddCurrentTaskToDelayedList>
	}
 801227e:	bf00      	nop
 8012280:	3718      	adds	r7, #24
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
 8012286:	bf00      	nop
 8012288:	24000f8c 	.word	0x24000f8c

0801228c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b086      	sub	sp, #24
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	68db      	ldr	r3, [r3, #12]
 8012298:	68db      	ldr	r3, [r3, #12]
 801229a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d10a      	bne.n	80122b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80122a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a6:	f383 8811 	msr	BASEPRI, r3
 80122aa:	f3bf 8f6f 	isb	sy
 80122ae:	f3bf 8f4f 	dsb	sy
 80122b2:	60fb      	str	r3, [r7, #12]
}
 80122b4:	bf00      	nop
 80122b6:	e7fe      	b.n	80122b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80122b8:	693b      	ldr	r3, [r7, #16]
 80122ba:	3318      	adds	r3, #24
 80122bc:	4618      	mov	r0, r3
 80122be:	f7fe fe2d 	bl	8010f1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80122c2:	4b1e      	ldr	r3, [pc, #120]	; (801233c <xTaskRemoveFromEventList+0xb0>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d11d      	bne.n	8012306 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	3304      	adds	r3, #4
 80122ce:	4618      	mov	r0, r3
 80122d0:	f7fe fe24 	bl	8010f1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122d8:	4b19      	ldr	r3, [pc, #100]	; (8012340 <xTaskRemoveFromEventList+0xb4>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d903      	bls.n	80122e8 <xTaskRemoveFromEventList+0x5c>
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122e4:	4a16      	ldr	r2, [pc, #88]	; (8012340 <xTaskRemoveFromEventList+0xb4>)
 80122e6:	6013      	str	r3, [r2, #0]
 80122e8:	693b      	ldr	r3, [r7, #16]
 80122ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ec:	4613      	mov	r3, r2
 80122ee:	009b      	lsls	r3, r3, #2
 80122f0:	4413      	add	r3, r2
 80122f2:	009b      	lsls	r3, r3, #2
 80122f4:	4a13      	ldr	r2, [pc, #76]	; (8012344 <xTaskRemoveFromEventList+0xb8>)
 80122f6:	441a      	add	r2, r3
 80122f8:	693b      	ldr	r3, [r7, #16]
 80122fa:	3304      	adds	r3, #4
 80122fc:	4619      	mov	r1, r3
 80122fe:	4610      	mov	r0, r2
 8012300:	f7fe fdaf 	bl	8010e62 <vListInsertEnd>
 8012304:	e005      	b.n	8012312 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012306:	693b      	ldr	r3, [r7, #16]
 8012308:	3318      	adds	r3, #24
 801230a:	4619      	mov	r1, r3
 801230c:	480e      	ldr	r0, [pc, #56]	; (8012348 <xTaskRemoveFromEventList+0xbc>)
 801230e:	f7fe fda8 	bl	8010e62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012316:	4b0d      	ldr	r3, [pc, #52]	; (801234c <xTaskRemoveFromEventList+0xc0>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801231c:	429a      	cmp	r2, r3
 801231e:	d905      	bls.n	801232c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012320:	2301      	movs	r3, #1
 8012322:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012324:	4b0a      	ldr	r3, [pc, #40]	; (8012350 <xTaskRemoveFromEventList+0xc4>)
 8012326:	2201      	movs	r2, #1
 8012328:	601a      	str	r2, [r3, #0]
 801232a:	e001      	b.n	8012330 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801232c:	2300      	movs	r3, #0
 801232e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012330:	697b      	ldr	r3, [r7, #20]
}
 8012332:	4618      	mov	r0, r3
 8012334:	3718      	adds	r7, #24
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
 801233a:	bf00      	nop
 801233c:	24001488 	.word	0x24001488
 8012340:	24001468 	.word	0x24001468
 8012344:	24000f90 	.word	0x24000f90
 8012348:	24001420 	.word	0x24001420
 801234c:	24000f8c 	.word	0x24000f8c
 8012350:	24001474 	.word	0x24001474

08012354 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b086      	sub	sp, #24
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801235e:	4b29      	ldr	r3, [pc, #164]	; (8012404 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d10a      	bne.n	801237c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8012366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801236a:	f383 8811 	msr	BASEPRI, r3
 801236e:	f3bf 8f6f 	isb	sy
 8012372:	f3bf 8f4f 	dsb	sy
 8012376:	613b      	str	r3, [r7, #16]
}
 8012378:	bf00      	nop
 801237a:	e7fe      	b.n	801237a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	68db      	ldr	r3, [r3, #12]
 801238a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d10a      	bne.n	80123a8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8012392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012396:	f383 8811 	msr	BASEPRI, r3
 801239a:	f3bf 8f6f 	isb	sy
 801239e:	f3bf 8f4f 	dsb	sy
 80123a2:	60fb      	str	r3, [r7, #12]
}
 80123a4:	bf00      	nop
 80123a6:	e7fe      	b.n	80123a6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f7fe fdb7 	bl	8010f1c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	3304      	adds	r3, #4
 80123b2:	4618      	mov	r0, r3
 80123b4:	f7fe fdb2 	bl	8010f1c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123bc:	4b12      	ldr	r3, [pc, #72]	; (8012408 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	429a      	cmp	r2, r3
 80123c2:	d903      	bls.n	80123cc <vTaskRemoveFromUnorderedEventList+0x78>
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123c8:	4a0f      	ldr	r2, [pc, #60]	; (8012408 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80123ca:	6013      	str	r3, [r2, #0]
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123d0:	4613      	mov	r3, r2
 80123d2:	009b      	lsls	r3, r3, #2
 80123d4:	4413      	add	r3, r2
 80123d6:	009b      	lsls	r3, r3, #2
 80123d8:	4a0c      	ldr	r2, [pc, #48]	; (801240c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80123da:	441a      	add	r2, r3
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	3304      	adds	r3, #4
 80123e0:	4619      	mov	r1, r3
 80123e2:	4610      	mov	r0, r2
 80123e4:	f7fe fd3d 	bl	8010e62 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123ec:	4b08      	ldr	r3, [pc, #32]	; (8012410 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123f2:	429a      	cmp	r2, r3
 80123f4:	d902      	bls.n	80123fc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80123f6:	4b07      	ldr	r3, [pc, #28]	; (8012414 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80123f8:	2201      	movs	r2, #1
 80123fa:	601a      	str	r2, [r3, #0]
	}
}
 80123fc:	bf00      	nop
 80123fe:	3718      	adds	r7, #24
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}
 8012404:	24001488 	.word	0x24001488
 8012408:	24001468 	.word	0x24001468
 801240c:	24000f90 	.word	0x24000f90
 8012410:	24000f8c 	.word	0x24000f8c
 8012414:	24001474 	.word	0x24001474

08012418 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012418:	b480      	push	{r7}
 801241a:	b083      	sub	sp, #12
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012420:	4b06      	ldr	r3, [pc, #24]	; (801243c <vTaskInternalSetTimeOutState+0x24>)
 8012422:	681a      	ldr	r2, [r3, #0]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012428:	4b05      	ldr	r3, [pc, #20]	; (8012440 <vTaskInternalSetTimeOutState+0x28>)
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	605a      	str	r2, [r3, #4]
}
 8012430:	bf00      	nop
 8012432:	370c      	adds	r7, #12
 8012434:	46bd      	mov	sp, r7
 8012436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243a:	4770      	bx	lr
 801243c:	24001478 	.word	0x24001478
 8012440:	24001464 	.word	0x24001464

08012444 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b088      	sub	sp, #32
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
 801244c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d10a      	bne.n	801246a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012458:	f383 8811 	msr	BASEPRI, r3
 801245c:	f3bf 8f6f 	isb	sy
 8012460:	f3bf 8f4f 	dsb	sy
 8012464:	613b      	str	r3, [r7, #16]
}
 8012466:	bf00      	nop
 8012468:	e7fe      	b.n	8012468 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d10a      	bne.n	8012486 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012474:	f383 8811 	msr	BASEPRI, r3
 8012478:	f3bf 8f6f 	isb	sy
 801247c:	f3bf 8f4f 	dsb	sy
 8012480:	60fb      	str	r3, [r7, #12]
}
 8012482:	bf00      	nop
 8012484:	e7fe      	b.n	8012484 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012486:	f000 fe9d 	bl	80131c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801248a:	4b1d      	ldr	r3, [pc, #116]	; (8012500 <xTaskCheckForTimeOut+0xbc>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	685b      	ldr	r3, [r3, #4]
 8012494:	69ba      	ldr	r2, [r7, #24]
 8012496:	1ad3      	subs	r3, r2, r3
 8012498:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80124a2:	d102      	bne.n	80124aa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80124a4:	2300      	movs	r3, #0
 80124a6:	61fb      	str	r3, [r7, #28]
 80124a8:	e023      	b.n	80124f2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681a      	ldr	r2, [r3, #0]
 80124ae:	4b15      	ldr	r3, [pc, #84]	; (8012504 <xTaskCheckForTimeOut+0xc0>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	429a      	cmp	r2, r3
 80124b4:	d007      	beq.n	80124c6 <xTaskCheckForTimeOut+0x82>
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	685b      	ldr	r3, [r3, #4]
 80124ba:	69ba      	ldr	r2, [r7, #24]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d302      	bcc.n	80124c6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80124c0:	2301      	movs	r3, #1
 80124c2:	61fb      	str	r3, [r7, #28]
 80124c4:	e015      	b.n	80124f2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	697a      	ldr	r2, [r7, #20]
 80124cc:	429a      	cmp	r2, r3
 80124ce:	d20b      	bcs.n	80124e8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	681a      	ldr	r2, [r3, #0]
 80124d4:	697b      	ldr	r3, [r7, #20]
 80124d6:	1ad2      	subs	r2, r2, r3
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f7ff ff9b 	bl	8012418 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80124e2:	2300      	movs	r3, #0
 80124e4:	61fb      	str	r3, [r7, #28]
 80124e6:	e004      	b.n	80124f2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	2200      	movs	r2, #0
 80124ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80124ee:	2301      	movs	r3, #1
 80124f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80124f2:	f000 fe97 	bl	8013224 <vPortExitCritical>

	return xReturn;
 80124f6:	69fb      	ldr	r3, [r7, #28]
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3720      	adds	r7, #32
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}
 8012500:	24001464 	.word	0x24001464
 8012504:	24001478 	.word	0x24001478

08012508 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012508:	b480      	push	{r7}
 801250a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801250c:	4b03      	ldr	r3, [pc, #12]	; (801251c <vTaskMissedYield+0x14>)
 801250e:	2201      	movs	r2, #1
 8012510:	601a      	str	r2, [r3, #0]
}
 8012512:	bf00      	nop
 8012514:	46bd      	mov	sp, r7
 8012516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251a:	4770      	bx	lr
 801251c:	24001474 	.word	0x24001474

08012520 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b082      	sub	sp, #8
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012528:	f000 f852 	bl	80125d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801252c:	4b06      	ldr	r3, [pc, #24]	; (8012548 <prvIdleTask+0x28>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	2b01      	cmp	r3, #1
 8012532:	d9f9      	bls.n	8012528 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012534:	4b05      	ldr	r3, [pc, #20]	; (801254c <prvIdleTask+0x2c>)
 8012536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801253a:	601a      	str	r2, [r3, #0]
 801253c:	f3bf 8f4f 	dsb	sy
 8012540:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012544:	e7f0      	b.n	8012528 <prvIdleTask+0x8>
 8012546:	bf00      	nop
 8012548:	24000f90 	.word	0x24000f90
 801254c:	e000ed04 	.word	0xe000ed04

08012550 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b082      	sub	sp, #8
 8012554:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012556:	2300      	movs	r3, #0
 8012558:	607b      	str	r3, [r7, #4]
 801255a:	e00c      	b.n	8012576 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801255c:	687a      	ldr	r2, [r7, #4]
 801255e:	4613      	mov	r3, r2
 8012560:	009b      	lsls	r3, r3, #2
 8012562:	4413      	add	r3, r2
 8012564:	009b      	lsls	r3, r3, #2
 8012566:	4a12      	ldr	r2, [pc, #72]	; (80125b0 <prvInitialiseTaskLists+0x60>)
 8012568:	4413      	add	r3, r2
 801256a:	4618      	mov	r0, r3
 801256c:	f7fe fc4c 	bl	8010e08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	3301      	adds	r3, #1
 8012574:	607b      	str	r3, [r7, #4]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2b37      	cmp	r3, #55	; 0x37
 801257a:	d9ef      	bls.n	801255c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801257c:	480d      	ldr	r0, [pc, #52]	; (80125b4 <prvInitialiseTaskLists+0x64>)
 801257e:	f7fe fc43 	bl	8010e08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012582:	480d      	ldr	r0, [pc, #52]	; (80125b8 <prvInitialiseTaskLists+0x68>)
 8012584:	f7fe fc40 	bl	8010e08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012588:	480c      	ldr	r0, [pc, #48]	; (80125bc <prvInitialiseTaskLists+0x6c>)
 801258a:	f7fe fc3d 	bl	8010e08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801258e:	480c      	ldr	r0, [pc, #48]	; (80125c0 <prvInitialiseTaskLists+0x70>)
 8012590:	f7fe fc3a 	bl	8010e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012594:	480b      	ldr	r0, [pc, #44]	; (80125c4 <prvInitialiseTaskLists+0x74>)
 8012596:	f7fe fc37 	bl	8010e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801259a:	4b0b      	ldr	r3, [pc, #44]	; (80125c8 <prvInitialiseTaskLists+0x78>)
 801259c:	4a05      	ldr	r2, [pc, #20]	; (80125b4 <prvInitialiseTaskLists+0x64>)
 801259e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80125a0:	4b0a      	ldr	r3, [pc, #40]	; (80125cc <prvInitialiseTaskLists+0x7c>)
 80125a2:	4a05      	ldr	r2, [pc, #20]	; (80125b8 <prvInitialiseTaskLists+0x68>)
 80125a4:	601a      	str	r2, [r3, #0]
}
 80125a6:	bf00      	nop
 80125a8:	3708      	adds	r7, #8
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	24000f90 	.word	0x24000f90
 80125b4:	240013f0 	.word	0x240013f0
 80125b8:	24001404 	.word	0x24001404
 80125bc:	24001420 	.word	0x24001420
 80125c0:	24001434 	.word	0x24001434
 80125c4:	2400144c 	.word	0x2400144c
 80125c8:	24001418 	.word	0x24001418
 80125cc:	2400141c 	.word	0x2400141c

080125d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b082      	sub	sp, #8
 80125d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80125d6:	e019      	b.n	801260c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80125d8:	f000 fdf4 	bl	80131c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125dc:	4b10      	ldr	r3, [pc, #64]	; (8012620 <prvCheckTasksWaitingTermination+0x50>)
 80125de:	68db      	ldr	r3, [r3, #12]
 80125e0:	68db      	ldr	r3, [r3, #12]
 80125e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	3304      	adds	r3, #4
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7fe fc97 	bl	8010f1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80125ee:	4b0d      	ldr	r3, [pc, #52]	; (8012624 <prvCheckTasksWaitingTermination+0x54>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	3b01      	subs	r3, #1
 80125f4:	4a0b      	ldr	r2, [pc, #44]	; (8012624 <prvCheckTasksWaitingTermination+0x54>)
 80125f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80125f8:	4b0b      	ldr	r3, [pc, #44]	; (8012628 <prvCheckTasksWaitingTermination+0x58>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	3b01      	subs	r3, #1
 80125fe:	4a0a      	ldr	r2, [pc, #40]	; (8012628 <prvCheckTasksWaitingTermination+0x58>)
 8012600:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012602:	f000 fe0f 	bl	8013224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f000 f810 	bl	801262c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801260c:	4b06      	ldr	r3, [pc, #24]	; (8012628 <prvCheckTasksWaitingTermination+0x58>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d1e1      	bne.n	80125d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012614:	bf00      	nop
 8012616:	bf00      	nop
 8012618:	3708      	adds	r7, #8
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}
 801261e:	bf00      	nop
 8012620:	24001434 	.word	0x24001434
 8012624:	24001460 	.word	0x24001460
 8012628:	24001448 	.word	0x24001448

0801262c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801262c:	b580      	push	{r7, lr}
 801262e:	b084      	sub	sp, #16
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801263a:	2b00      	cmp	r3, #0
 801263c:	d108      	bne.n	8012650 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012642:	4618      	mov	r0, r3
 8012644:	f000 ffac 	bl	80135a0 <vPortFree>
				vPortFree( pxTCB );
 8012648:	6878      	ldr	r0, [r7, #4]
 801264a:	f000 ffa9 	bl	80135a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801264e:	e018      	b.n	8012682 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012656:	2b01      	cmp	r3, #1
 8012658:	d103      	bne.n	8012662 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f000 ffa0 	bl	80135a0 <vPortFree>
	}
 8012660:	e00f      	b.n	8012682 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012668:	2b02      	cmp	r3, #2
 801266a:	d00a      	beq.n	8012682 <prvDeleteTCB+0x56>
	__asm volatile
 801266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012670:	f383 8811 	msr	BASEPRI, r3
 8012674:	f3bf 8f6f 	isb	sy
 8012678:	f3bf 8f4f 	dsb	sy
 801267c:	60fb      	str	r3, [r7, #12]
}
 801267e:	bf00      	nop
 8012680:	e7fe      	b.n	8012680 <prvDeleteTCB+0x54>
	}
 8012682:	bf00      	nop
 8012684:	3710      	adds	r7, #16
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
	...

0801268c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801268c:	b480      	push	{r7}
 801268e:	b083      	sub	sp, #12
 8012690:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012692:	4b0c      	ldr	r3, [pc, #48]	; (80126c4 <prvResetNextTaskUnblockTime+0x38>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d104      	bne.n	80126a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801269c:	4b0a      	ldr	r3, [pc, #40]	; (80126c8 <prvResetNextTaskUnblockTime+0x3c>)
 801269e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80126a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80126a4:	e008      	b.n	80126b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126a6:	4b07      	ldr	r3, [pc, #28]	; (80126c4 <prvResetNextTaskUnblockTime+0x38>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	68db      	ldr	r3, [r3, #12]
 80126ac:	68db      	ldr	r3, [r3, #12]
 80126ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	4a04      	ldr	r2, [pc, #16]	; (80126c8 <prvResetNextTaskUnblockTime+0x3c>)
 80126b6:	6013      	str	r3, [r2, #0]
}
 80126b8:	bf00      	nop
 80126ba:	370c      	adds	r7, #12
 80126bc:	46bd      	mov	sp, r7
 80126be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c2:	4770      	bx	lr
 80126c4:	24001418 	.word	0x24001418
 80126c8:	24001480 	.word	0x24001480

080126cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80126cc:	b480      	push	{r7}
 80126ce:	b083      	sub	sp, #12
 80126d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80126d2:	4b0b      	ldr	r3, [pc, #44]	; (8012700 <xTaskGetSchedulerState+0x34>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d102      	bne.n	80126e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80126da:	2301      	movs	r3, #1
 80126dc:	607b      	str	r3, [r7, #4]
 80126de:	e008      	b.n	80126f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80126e0:	4b08      	ldr	r3, [pc, #32]	; (8012704 <xTaskGetSchedulerState+0x38>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d102      	bne.n	80126ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80126e8:	2302      	movs	r3, #2
 80126ea:	607b      	str	r3, [r7, #4]
 80126ec:	e001      	b.n	80126f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80126ee:	2300      	movs	r3, #0
 80126f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80126f2:	687b      	ldr	r3, [r7, #4]
	}
 80126f4:	4618      	mov	r0, r3
 80126f6:	370c      	adds	r7, #12
 80126f8:	46bd      	mov	sp, r7
 80126fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fe:	4770      	bx	lr
 8012700:	2400146c 	.word	0x2400146c
 8012704:	24001488 	.word	0x24001488

08012708 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012708:	b580      	push	{r7, lr}
 801270a:	b086      	sub	sp, #24
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012714:	2300      	movs	r3, #0
 8012716:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d056      	beq.n	80127cc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801271e:	4b2e      	ldr	r3, [pc, #184]	; (80127d8 <xTaskPriorityDisinherit+0xd0>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	693a      	ldr	r2, [r7, #16]
 8012724:	429a      	cmp	r2, r3
 8012726:	d00a      	beq.n	801273e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801272c:	f383 8811 	msr	BASEPRI, r3
 8012730:	f3bf 8f6f 	isb	sy
 8012734:	f3bf 8f4f 	dsb	sy
 8012738:	60fb      	str	r3, [r7, #12]
}
 801273a:	bf00      	nop
 801273c:	e7fe      	b.n	801273c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012742:	2b00      	cmp	r3, #0
 8012744:	d10a      	bne.n	801275c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801274a:	f383 8811 	msr	BASEPRI, r3
 801274e:	f3bf 8f6f 	isb	sy
 8012752:	f3bf 8f4f 	dsb	sy
 8012756:	60bb      	str	r3, [r7, #8]
}
 8012758:	bf00      	nop
 801275a:	e7fe      	b.n	801275a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012760:	1e5a      	subs	r2, r3, #1
 8012762:	693b      	ldr	r3, [r7, #16]
 8012764:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801276e:	429a      	cmp	r2, r3
 8012770:	d02c      	beq.n	80127cc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012772:	693b      	ldr	r3, [r7, #16]
 8012774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012776:	2b00      	cmp	r3, #0
 8012778:	d128      	bne.n	80127cc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801277a:	693b      	ldr	r3, [r7, #16]
 801277c:	3304      	adds	r3, #4
 801277e:	4618      	mov	r0, r3
 8012780:	f7fe fbcc 	bl	8010f1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012790:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801279c:	4b0f      	ldr	r3, [pc, #60]	; (80127dc <xTaskPriorityDisinherit+0xd4>)
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	429a      	cmp	r2, r3
 80127a2:	d903      	bls.n	80127ac <xTaskPriorityDisinherit+0xa4>
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127a8:	4a0c      	ldr	r2, [pc, #48]	; (80127dc <xTaskPriorityDisinherit+0xd4>)
 80127aa:	6013      	str	r3, [r2, #0]
 80127ac:	693b      	ldr	r3, [r7, #16]
 80127ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127b0:	4613      	mov	r3, r2
 80127b2:	009b      	lsls	r3, r3, #2
 80127b4:	4413      	add	r3, r2
 80127b6:	009b      	lsls	r3, r3, #2
 80127b8:	4a09      	ldr	r2, [pc, #36]	; (80127e0 <xTaskPriorityDisinherit+0xd8>)
 80127ba:	441a      	add	r2, r3
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	3304      	adds	r3, #4
 80127c0:	4619      	mov	r1, r3
 80127c2:	4610      	mov	r0, r2
 80127c4:	f7fe fb4d 	bl	8010e62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80127c8:	2301      	movs	r3, #1
 80127ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80127cc:	697b      	ldr	r3, [r7, #20]
	}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3718      	adds	r7, #24
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}
 80127d6:	bf00      	nop
 80127d8:	24000f8c 	.word	0x24000f8c
 80127dc:	24001468 	.word	0x24001468
 80127e0:	24000f90 	.word	0x24000f90

080127e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b084      	sub	sp, #16
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80127ee:	4b21      	ldr	r3, [pc, #132]	; (8012874 <prvAddCurrentTaskToDelayedList+0x90>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80127f4:	4b20      	ldr	r3, [pc, #128]	; (8012878 <prvAddCurrentTaskToDelayedList+0x94>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	3304      	adds	r3, #4
 80127fa:	4618      	mov	r0, r3
 80127fc:	f7fe fb8e 	bl	8010f1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012806:	d10a      	bne.n	801281e <prvAddCurrentTaskToDelayedList+0x3a>
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d007      	beq.n	801281e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801280e:	4b1a      	ldr	r3, [pc, #104]	; (8012878 <prvAddCurrentTaskToDelayedList+0x94>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	3304      	adds	r3, #4
 8012814:	4619      	mov	r1, r3
 8012816:	4819      	ldr	r0, [pc, #100]	; (801287c <prvAddCurrentTaskToDelayedList+0x98>)
 8012818:	f7fe fb23 	bl	8010e62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801281c:	e026      	b.n	801286c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801281e:	68fa      	ldr	r2, [r7, #12]
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	4413      	add	r3, r2
 8012824:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012826:	4b14      	ldr	r3, [pc, #80]	; (8012878 <prvAddCurrentTaskToDelayedList+0x94>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801282e:	68ba      	ldr	r2, [r7, #8]
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	429a      	cmp	r2, r3
 8012834:	d209      	bcs.n	801284a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012836:	4b12      	ldr	r3, [pc, #72]	; (8012880 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012838:	681a      	ldr	r2, [r3, #0]
 801283a:	4b0f      	ldr	r3, [pc, #60]	; (8012878 <prvAddCurrentTaskToDelayedList+0x94>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	3304      	adds	r3, #4
 8012840:	4619      	mov	r1, r3
 8012842:	4610      	mov	r0, r2
 8012844:	f7fe fb31 	bl	8010eaa <vListInsert>
}
 8012848:	e010      	b.n	801286c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801284a:	4b0e      	ldr	r3, [pc, #56]	; (8012884 <prvAddCurrentTaskToDelayedList+0xa0>)
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	4b0a      	ldr	r3, [pc, #40]	; (8012878 <prvAddCurrentTaskToDelayedList+0x94>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	3304      	adds	r3, #4
 8012854:	4619      	mov	r1, r3
 8012856:	4610      	mov	r0, r2
 8012858:	f7fe fb27 	bl	8010eaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801285c:	4b0a      	ldr	r3, [pc, #40]	; (8012888 <prvAddCurrentTaskToDelayedList+0xa4>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	68ba      	ldr	r2, [r7, #8]
 8012862:	429a      	cmp	r2, r3
 8012864:	d202      	bcs.n	801286c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012866:	4a08      	ldr	r2, [pc, #32]	; (8012888 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	6013      	str	r3, [r2, #0]
}
 801286c:	bf00      	nop
 801286e:	3710      	adds	r7, #16
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}
 8012874:	24001464 	.word	0x24001464
 8012878:	24000f8c 	.word	0x24000f8c
 801287c:	2400144c 	.word	0x2400144c
 8012880:	2400141c 	.word	0x2400141c
 8012884:	24001418 	.word	0x24001418
 8012888:	24001480 	.word	0x24001480

0801288c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b08a      	sub	sp, #40	; 0x28
 8012890:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012892:	2300      	movs	r3, #0
 8012894:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012896:	f000 fb07 	bl	8012ea8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801289a:	4b1c      	ldr	r3, [pc, #112]	; (801290c <xTimerCreateTimerTask+0x80>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d021      	beq.n	80128e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80128a2:	2300      	movs	r3, #0
 80128a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80128a6:	2300      	movs	r3, #0
 80128a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80128aa:	1d3a      	adds	r2, r7, #4
 80128ac:	f107 0108 	add.w	r1, r7, #8
 80128b0:	f107 030c 	add.w	r3, r7, #12
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7fe f98f 	bl	8010bd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80128ba:	6879      	ldr	r1, [r7, #4]
 80128bc:	68bb      	ldr	r3, [r7, #8]
 80128be:	68fa      	ldr	r2, [r7, #12]
 80128c0:	9202      	str	r2, [sp, #8]
 80128c2:	9301      	str	r3, [sp, #4]
 80128c4:	2302      	movs	r3, #2
 80128c6:	9300      	str	r3, [sp, #0]
 80128c8:	2300      	movs	r3, #0
 80128ca:	460a      	mov	r2, r1
 80128cc:	4910      	ldr	r1, [pc, #64]	; (8012910 <xTimerCreateTimerTask+0x84>)
 80128ce:	4811      	ldr	r0, [pc, #68]	; (8012914 <xTimerCreateTimerTask+0x88>)
 80128d0:	f7ff f874 	bl	80119bc <xTaskCreateStatic>
 80128d4:	4603      	mov	r3, r0
 80128d6:	4a10      	ldr	r2, [pc, #64]	; (8012918 <xTimerCreateTimerTask+0x8c>)
 80128d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80128da:	4b0f      	ldr	r3, [pc, #60]	; (8012918 <xTimerCreateTimerTask+0x8c>)
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d001      	beq.n	80128e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80128e2:	2301      	movs	r3, #1
 80128e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d10a      	bne.n	8012902 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80128ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f0:	f383 8811 	msr	BASEPRI, r3
 80128f4:	f3bf 8f6f 	isb	sy
 80128f8:	f3bf 8f4f 	dsb	sy
 80128fc:	613b      	str	r3, [r7, #16]
}
 80128fe:	bf00      	nop
 8012900:	e7fe      	b.n	8012900 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012902:	697b      	ldr	r3, [r7, #20]
}
 8012904:	4618      	mov	r0, r3
 8012906:	3718      	adds	r7, #24
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}
 801290c:	240014bc 	.word	0x240014bc
 8012910:	080144a0 	.word	0x080144a0
 8012914:	08012a51 	.word	0x08012a51
 8012918:	240014c0 	.word	0x240014c0

0801291c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b08a      	sub	sp, #40	; 0x28
 8012920:	af00      	add	r7, sp, #0
 8012922:	60f8      	str	r0, [r7, #12]
 8012924:	60b9      	str	r1, [r7, #8]
 8012926:	607a      	str	r2, [r7, #4]
 8012928:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801292a:	2300      	movs	r3, #0
 801292c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d10a      	bne.n	801294a <xTimerGenericCommand+0x2e>
	__asm volatile
 8012934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012938:	f383 8811 	msr	BASEPRI, r3
 801293c:	f3bf 8f6f 	isb	sy
 8012940:	f3bf 8f4f 	dsb	sy
 8012944:	623b      	str	r3, [r7, #32]
}
 8012946:	bf00      	nop
 8012948:	e7fe      	b.n	8012948 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801294a:	4b1a      	ldr	r3, [pc, #104]	; (80129b4 <xTimerGenericCommand+0x98>)
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d02a      	beq.n	80129a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012952:	68bb      	ldr	r3, [r7, #8]
 8012954:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	2b05      	cmp	r3, #5
 8012962:	dc18      	bgt.n	8012996 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012964:	f7ff feb2 	bl	80126cc <xTaskGetSchedulerState>
 8012968:	4603      	mov	r3, r0
 801296a:	2b02      	cmp	r3, #2
 801296c:	d109      	bne.n	8012982 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801296e:	4b11      	ldr	r3, [pc, #68]	; (80129b4 <xTimerGenericCommand+0x98>)
 8012970:	6818      	ldr	r0, [r3, #0]
 8012972:	f107 0110 	add.w	r1, r7, #16
 8012976:	2300      	movs	r3, #0
 8012978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801297a:	f7fe fc37 	bl	80111ec <xQueueGenericSend>
 801297e:	6278      	str	r0, [r7, #36]	; 0x24
 8012980:	e012      	b.n	80129a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012982:	4b0c      	ldr	r3, [pc, #48]	; (80129b4 <xTimerGenericCommand+0x98>)
 8012984:	6818      	ldr	r0, [r3, #0]
 8012986:	f107 0110 	add.w	r1, r7, #16
 801298a:	2300      	movs	r3, #0
 801298c:	2200      	movs	r2, #0
 801298e:	f7fe fc2d 	bl	80111ec <xQueueGenericSend>
 8012992:	6278      	str	r0, [r7, #36]	; 0x24
 8012994:	e008      	b.n	80129a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012996:	4b07      	ldr	r3, [pc, #28]	; (80129b4 <xTimerGenericCommand+0x98>)
 8012998:	6818      	ldr	r0, [r3, #0]
 801299a:	f107 0110 	add.w	r1, r7, #16
 801299e:	2300      	movs	r3, #0
 80129a0:	683a      	ldr	r2, [r7, #0]
 80129a2:	f7fe fd21 	bl	80113e8 <xQueueGenericSendFromISR>
 80129a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80129a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3728      	adds	r7, #40	; 0x28
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
 80129b2:	bf00      	nop
 80129b4:	240014bc 	.word	0x240014bc

080129b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b088      	sub	sp, #32
 80129bc:	af02      	add	r7, sp, #8
 80129be:	6078      	str	r0, [r7, #4]
 80129c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129c2:	4b22      	ldr	r3, [pc, #136]	; (8012a4c <prvProcessExpiredTimer+0x94>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	68db      	ldr	r3, [r3, #12]
 80129c8:	68db      	ldr	r3, [r3, #12]
 80129ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	3304      	adds	r3, #4
 80129d0:	4618      	mov	r0, r3
 80129d2:	f7fe faa3 	bl	8010f1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129dc:	f003 0304 	and.w	r3, r3, #4
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d022      	beq.n	8012a2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	699a      	ldr	r2, [r3, #24]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	18d1      	adds	r1, r2, r3
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	683a      	ldr	r2, [r7, #0]
 80129f0:	6978      	ldr	r0, [r7, #20]
 80129f2:	f000 f8d1 	bl	8012b98 <prvInsertTimerInActiveList>
 80129f6:	4603      	mov	r3, r0
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d01f      	beq.n	8012a3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80129fc:	2300      	movs	r3, #0
 80129fe:	9300      	str	r3, [sp, #0]
 8012a00:	2300      	movs	r3, #0
 8012a02:	687a      	ldr	r2, [r7, #4]
 8012a04:	2100      	movs	r1, #0
 8012a06:	6978      	ldr	r0, [r7, #20]
 8012a08:	f7ff ff88 	bl	801291c <xTimerGenericCommand>
 8012a0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d113      	bne.n	8012a3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a18:	f383 8811 	msr	BASEPRI, r3
 8012a1c:	f3bf 8f6f 	isb	sy
 8012a20:	f3bf 8f4f 	dsb	sy
 8012a24:	60fb      	str	r3, [r7, #12]
}
 8012a26:	bf00      	nop
 8012a28:	e7fe      	b.n	8012a28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a30:	f023 0301 	bic.w	r3, r3, #1
 8012a34:	b2da      	uxtb	r2, r3
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	6a1b      	ldr	r3, [r3, #32]
 8012a40:	6978      	ldr	r0, [r7, #20]
 8012a42:	4798      	blx	r3
}
 8012a44:	bf00      	nop
 8012a46:	3718      	adds	r7, #24
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}
 8012a4c:	240014b4 	.word	0x240014b4

08012a50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b084      	sub	sp, #16
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012a58:	f107 0308 	add.w	r3, r7, #8
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	f000 f857 	bl	8012b10 <prvGetNextExpireTime>
 8012a62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	4619      	mov	r1, r3
 8012a68:	68f8      	ldr	r0, [r7, #12]
 8012a6a:	f000 f803 	bl	8012a74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012a6e:	f000 f8d5 	bl	8012c1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012a72:	e7f1      	b.n	8012a58 <prvTimerTask+0x8>

08012a74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b084      	sub	sp, #16
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012a7e:	f7ff f9d9 	bl	8011e34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012a82:	f107 0308 	add.w	r3, r7, #8
 8012a86:	4618      	mov	r0, r3
 8012a88:	f000 f866 	bl	8012b58 <prvSampleTimeNow>
 8012a8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d130      	bne.n	8012af6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d10a      	bne.n	8012ab0 <prvProcessTimerOrBlockTask+0x3c>
 8012a9a:	687a      	ldr	r2, [r7, #4]
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d806      	bhi.n	8012ab0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012aa2:	f7ff f9d5 	bl	8011e50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012aa6:	68f9      	ldr	r1, [r7, #12]
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f7ff ff85 	bl	80129b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012aae:	e024      	b.n	8012afa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d008      	beq.n	8012ac8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012ab6:	4b13      	ldr	r3, [pc, #76]	; (8012b04 <prvProcessTimerOrBlockTask+0x90>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d101      	bne.n	8012ac4 <prvProcessTimerOrBlockTask+0x50>
 8012ac0:	2301      	movs	r3, #1
 8012ac2:	e000      	b.n	8012ac6 <prvProcessTimerOrBlockTask+0x52>
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012ac8:	4b0f      	ldr	r3, [pc, #60]	; (8012b08 <prvProcessTimerOrBlockTask+0x94>)
 8012aca:	6818      	ldr	r0, [r3, #0]
 8012acc:	687a      	ldr	r2, [r7, #4]
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	1ad3      	subs	r3, r2, r3
 8012ad2:	683a      	ldr	r2, [r7, #0]
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	f7fe ff3d 	bl	8011954 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012ada:	f7ff f9b9 	bl	8011e50 <xTaskResumeAll>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d10a      	bne.n	8012afa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012ae4:	4b09      	ldr	r3, [pc, #36]	; (8012b0c <prvProcessTimerOrBlockTask+0x98>)
 8012ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012aea:	601a      	str	r2, [r3, #0]
 8012aec:	f3bf 8f4f 	dsb	sy
 8012af0:	f3bf 8f6f 	isb	sy
}
 8012af4:	e001      	b.n	8012afa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012af6:	f7ff f9ab 	bl	8011e50 <xTaskResumeAll>
}
 8012afa:	bf00      	nop
 8012afc:	3710      	adds	r7, #16
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}
 8012b02:	bf00      	nop
 8012b04:	240014b8 	.word	0x240014b8
 8012b08:	240014bc 	.word	0x240014bc
 8012b0c:	e000ed04 	.word	0xe000ed04

08012b10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012b10:	b480      	push	{r7}
 8012b12:	b085      	sub	sp, #20
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012b18:	4b0e      	ldr	r3, [pc, #56]	; (8012b54 <prvGetNextExpireTime+0x44>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d101      	bne.n	8012b26 <prvGetNextExpireTime+0x16>
 8012b22:	2201      	movs	r2, #1
 8012b24:	e000      	b.n	8012b28 <prvGetNextExpireTime+0x18>
 8012b26:	2200      	movs	r2, #0
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d105      	bne.n	8012b40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012b34:	4b07      	ldr	r3, [pc, #28]	; (8012b54 <prvGetNextExpireTime+0x44>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	68db      	ldr	r3, [r3, #12]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	60fb      	str	r3, [r7, #12]
 8012b3e:	e001      	b.n	8012b44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012b40:	2300      	movs	r3, #0
 8012b42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012b44:	68fb      	ldr	r3, [r7, #12]
}
 8012b46:	4618      	mov	r0, r3
 8012b48:	3714      	adds	r7, #20
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b50:	4770      	bx	lr
 8012b52:	bf00      	nop
 8012b54:	240014b4 	.word	0x240014b4

08012b58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b084      	sub	sp, #16
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012b60:	f7ff fa14 	bl	8011f8c <xTaskGetTickCount>
 8012b64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012b66:	4b0b      	ldr	r3, [pc, #44]	; (8012b94 <prvSampleTimeNow+0x3c>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	68fa      	ldr	r2, [r7, #12]
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d205      	bcs.n	8012b7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012b70:	f000 f936 	bl	8012de0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2201      	movs	r2, #1
 8012b78:	601a      	str	r2, [r3, #0]
 8012b7a:	e002      	b.n	8012b82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012b82:	4a04      	ldr	r2, [pc, #16]	; (8012b94 <prvSampleTimeNow+0x3c>)
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012b88:	68fb      	ldr	r3, [r7, #12]
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3710      	adds	r7, #16
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
 8012b92:	bf00      	nop
 8012b94:	240014c4 	.word	0x240014c4

08012b98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b086      	sub	sp, #24
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	60f8      	str	r0, [r7, #12]
 8012ba0:	60b9      	str	r1, [r7, #8]
 8012ba2:	607a      	str	r2, [r7, #4]
 8012ba4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	68ba      	ldr	r2, [r7, #8]
 8012bae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	68fa      	ldr	r2, [r7, #12]
 8012bb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012bb6:	68ba      	ldr	r2, [r7, #8]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d812      	bhi.n	8012be4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	1ad2      	subs	r2, r2, r3
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	699b      	ldr	r3, [r3, #24]
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d302      	bcc.n	8012bd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012bcc:	2301      	movs	r3, #1
 8012bce:	617b      	str	r3, [r7, #20]
 8012bd0:	e01b      	b.n	8012c0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012bd2:	4b10      	ldr	r3, [pc, #64]	; (8012c14 <prvInsertTimerInActiveList+0x7c>)
 8012bd4:	681a      	ldr	r2, [r3, #0]
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	3304      	adds	r3, #4
 8012bda:	4619      	mov	r1, r3
 8012bdc:	4610      	mov	r0, r2
 8012bde:	f7fe f964 	bl	8010eaa <vListInsert>
 8012be2:	e012      	b.n	8012c0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012be4:	687a      	ldr	r2, [r7, #4]
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d206      	bcs.n	8012bfa <prvInsertTimerInActiveList+0x62>
 8012bec:	68ba      	ldr	r2, [r7, #8]
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d302      	bcc.n	8012bfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	617b      	str	r3, [r7, #20]
 8012bf8:	e007      	b.n	8012c0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012bfa:	4b07      	ldr	r3, [pc, #28]	; (8012c18 <prvInsertTimerInActiveList+0x80>)
 8012bfc:	681a      	ldr	r2, [r3, #0]
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	3304      	adds	r3, #4
 8012c02:	4619      	mov	r1, r3
 8012c04:	4610      	mov	r0, r2
 8012c06:	f7fe f950 	bl	8010eaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012c0a:	697b      	ldr	r3, [r7, #20]
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3718      	adds	r7, #24
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	240014b8 	.word	0x240014b8
 8012c18:	240014b4 	.word	0x240014b4

08012c1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b08e      	sub	sp, #56	; 0x38
 8012c20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012c22:	e0ca      	b.n	8012dba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	da18      	bge.n	8012c5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012c2a:	1d3b      	adds	r3, r7, #4
 8012c2c:	3304      	adds	r3, #4
 8012c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d10a      	bne.n	8012c4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c3a:	f383 8811 	msr	BASEPRI, r3
 8012c3e:	f3bf 8f6f 	isb	sy
 8012c42:	f3bf 8f4f 	dsb	sy
 8012c46:	61fb      	str	r3, [r7, #28]
}
 8012c48:	bf00      	nop
 8012c4a:	e7fe      	b.n	8012c4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c52:	6850      	ldr	r0, [r2, #4]
 8012c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012c56:	6892      	ldr	r2, [r2, #8]
 8012c58:	4611      	mov	r1, r2
 8012c5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	f2c0 80aa 	blt.w	8012db8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c6a:	695b      	ldr	r3, [r3, #20]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d004      	beq.n	8012c7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c72:	3304      	adds	r3, #4
 8012c74:	4618      	mov	r0, r3
 8012c76:	f7fe f951 	bl	8010f1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012c7a:	463b      	mov	r3, r7
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7ff ff6b 	bl	8012b58 <prvSampleTimeNow>
 8012c82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2b09      	cmp	r3, #9
 8012c88:	f200 8097 	bhi.w	8012dba <prvProcessReceivedCommands+0x19e>
 8012c8c:	a201      	add	r2, pc, #4	; (adr r2, 8012c94 <prvProcessReceivedCommands+0x78>)
 8012c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c92:	bf00      	nop
 8012c94:	08012cbd 	.word	0x08012cbd
 8012c98:	08012cbd 	.word	0x08012cbd
 8012c9c:	08012cbd 	.word	0x08012cbd
 8012ca0:	08012d31 	.word	0x08012d31
 8012ca4:	08012d45 	.word	0x08012d45
 8012ca8:	08012d8f 	.word	0x08012d8f
 8012cac:	08012cbd 	.word	0x08012cbd
 8012cb0:	08012cbd 	.word	0x08012cbd
 8012cb4:	08012d31 	.word	0x08012d31
 8012cb8:	08012d45 	.word	0x08012d45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012cc2:	f043 0301 	orr.w	r3, r3, #1
 8012cc6:	b2da      	uxtb	r2, r3
 8012cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012cce:	68ba      	ldr	r2, [r7, #8]
 8012cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd2:	699b      	ldr	r3, [r3, #24]
 8012cd4:	18d1      	adds	r1, r2, r3
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cdc:	f7ff ff5c 	bl	8012b98 <prvInsertTimerInActiveList>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d069      	beq.n	8012dba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce8:	6a1b      	ldr	r3, [r3, #32]
 8012cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012cf4:	f003 0304 	and.w	r3, r3, #4
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d05e      	beq.n	8012dba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012cfc:	68ba      	ldr	r2, [r7, #8]
 8012cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d00:	699b      	ldr	r3, [r3, #24]
 8012d02:	441a      	add	r2, r3
 8012d04:	2300      	movs	r3, #0
 8012d06:	9300      	str	r3, [sp, #0]
 8012d08:	2300      	movs	r3, #0
 8012d0a:	2100      	movs	r1, #0
 8012d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d0e:	f7ff fe05 	bl	801291c <xTimerGenericCommand>
 8012d12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012d14:	6a3b      	ldr	r3, [r7, #32]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d14f      	bne.n	8012dba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d1e:	f383 8811 	msr	BASEPRI, r3
 8012d22:	f3bf 8f6f 	isb	sy
 8012d26:	f3bf 8f4f 	dsb	sy
 8012d2a:	61bb      	str	r3, [r7, #24]
}
 8012d2c:	bf00      	nop
 8012d2e:	e7fe      	b.n	8012d2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d36:	f023 0301 	bic.w	r3, r3, #1
 8012d3a:	b2da      	uxtb	r2, r3
 8012d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012d42:	e03a      	b.n	8012dba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d4a:	f043 0301 	orr.w	r3, r3, #1
 8012d4e:	b2da      	uxtb	r2, r3
 8012d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012d56:	68ba      	ldr	r2, [r7, #8]
 8012d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d5e:	699b      	ldr	r3, [r3, #24]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d10a      	bne.n	8012d7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d68:	f383 8811 	msr	BASEPRI, r3
 8012d6c:	f3bf 8f6f 	isb	sy
 8012d70:	f3bf 8f4f 	dsb	sy
 8012d74:	617b      	str	r3, [r7, #20]
}
 8012d76:	bf00      	nop
 8012d78:	e7fe      	b.n	8012d78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d7c:	699a      	ldr	r2, [r3, #24]
 8012d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d80:	18d1      	adds	r1, r2, r3
 8012d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d88:	f7ff ff06 	bl	8012b98 <prvInsertTimerInActiveList>
					break;
 8012d8c:	e015      	b.n	8012dba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d94:	f003 0302 	and.w	r3, r3, #2
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d103      	bne.n	8012da4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d9e:	f000 fbff 	bl	80135a0 <vPortFree>
 8012da2:	e00a      	b.n	8012dba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012daa:	f023 0301 	bic.w	r3, r3, #1
 8012dae:	b2da      	uxtb	r2, r3
 8012db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012db6:	e000      	b.n	8012dba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012db8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012dba:	4b08      	ldr	r3, [pc, #32]	; (8012ddc <prvProcessReceivedCommands+0x1c0>)
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	1d39      	adds	r1, r7, #4
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7fe fbac 	bl	8011520 <xQueueReceive>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	f47f af2a 	bne.w	8012c24 <prvProcessReceivedCommands+0x8>
	}
}
 8012dd0:	bf00      	nop
 8012dd2:	bf00      	nop
 8012dd4:	3730      	adds	r7, #48	; 0x30
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
 8012dda:	bf00      	nop
 8012ddc:	240014bc 	.word	0x240014bc

08012de0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b088      	sub	sp, #32
 8012de4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012de6:	e048      	b.n	8012e7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012de8:	4b2d      	ldr	r3, [pc, #180]	; (8012ea0 <prvSwitchTimerLists+0xc0>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	68db      	ldr	r3, [r3, #12]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012df2:	4b2b      	ldr	r3, [pc, #172]	; (8012ea0 <prvSwitchTimerLists+0xc0>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	68db      	ldr	r3, [r3, #12]
 8012df8:	68db      	ldr	r3, [r3, #12]
 8012dfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	3304      	adds	r3, #4
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7fe f88b 	bl	8010f1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	6a1b      	ldr	r3, [r3, #32]
 8012e0a:	68f8      	ldr	r0, [r7, #12]
 8012e0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e14:	f003 0304 	and.w	r3, r3, #4
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d02e      	beq.n	8012e7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	699b      	ldr	r3, [r3, #24]
 8012e20:	693a      	ldr	r2, [r7, #16]
 8012e22:	4413      	add	r3, r2
 8012e24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012e26:	68ba      	ldr	r2, [r7, #8]
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d90e      	bls.n	8012e4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	68ba      	ldr	r2, [r7, #8]
 8012e32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	68fa      	ldr	r2, [r7, #12]
 8012e38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012e3a:	4b19      	ldr	r3, [pc, #100]	; (8012ea0 <prvSwitchTimerLists+0xc0>)
 8012e3c:	681a      	ldr	r2, [r3, #0]
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	3304      	adds	r3, #4
 8012e42:	4619      	mov	r1, r3
 8012e44:	4610      	mov	r0, r2
 8012e46:	f7fe f830 	bl	8010eaa <vListInsert>
 8012e4a:	e016      	b.n	8012e7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	9300      	str	r3, [sp, #0]
 8012e50:	2300      	movs	r3, #0
 8012e52:	693a      	ldr	r2, [r7, #16]
 8012e54:	2100      	movs	r1, #0
 8012e56:	68f8      	ldr	r0, [r7, #12]
 8012e58:	f7ff fd60 	bl	801291c <xTimerGenericCommand>
 8012e5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d10a      	bne.n	8012e7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e68:	f383 8811 	msr	BASEPRI, r3
 8012e6c:	f3bf 8f6f 	isb	sy
 8012e70:	f3bf 8f4f 	dsb	sy
 8012e74:	603b      	str	r3, [r7, #0]
}
 8012e76:	bf00      	nop
 8012e78:	e7fe      	b.n	8012e78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012e7a:	4b09      	ldr	r3, [pc, #36]	; (8012ea0 <prvSwitchTimerLists+0xc0>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d1b1      	bne.n	8012de8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012e84:	4b06      	ldr	r3, [pc, #24]	; (8012ea0 <prvSwitchTimerLists+0xc0>)
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012e8a:	4b06      	ldr	r3, [pc, #24]	; (8012ea4 <prvSwitchTimerLists+0xc4>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	4a04      	ldr	r2, [pc, #16]	; (8012ea0 <prvSwitchTimerLists+0xc0>)
 8012e90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012e92:	4a04      	ldr	r2, [pc, #16]	; (8012ea4 <prvSwitchTimerLists+0xc4>)
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	6013      	str	r3, [r2, #0]
}
 8012e98:	bf00      	nop
 8012e9a:	3718      	adds	r7, #24
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}
 8012ea0:	240014b4 	.word	0x240014b4
 8012ea4:	240014b8 	.word	0x240014b8

08012ea8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b082      	sub	sp, #8
 8012eac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012eae:	f000 f989 	bl	80131c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012eb2:	4b15      	ldr	r3, [pc, #84]	; (8012f08 <prvCheckForValidListAndQueue+0x60>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d120      	bne.n	8012efc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012eba:	4814      	ldr	r0, [pc, #80]	; (8012f0c <prvCheckForValidListAndQueue+0x64>)
 8012ebc:	f7fd ffa4 	bl	8010e08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012ec0:	4813      	ldr	r0, [pc, #76]	; (8012f10 <prvCheckForValidListAndQueue+0x68>)
 8012ec2:	f7fd ffa1 	bl	8010e08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012ec6:	4b13      	ldr	r3, [pc, #76]	; (8012f14 <prvCheckForValidListAndQueue+0x6c>)
 8012ec8:	4a10      	ldr	r2, [pc, #64]	; (8012f0c <prvCheckForValidListAndQueue+0x64>)
 8012eca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012ecc:	4b12      	ldr	r3, [pc, #72]	; (8012f18 <prvCheckForValidListAndQueue+0x70>)
 8012ece:	4a10      	ldr	r2, [pc, #64]	; (8012f10 <prvCheckForValidListAndQueue+0x68>)
 8012ed0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	9300      	str	r3, [sp, #0]
 8012ed6:	4b11      	ldr	r3, [pc, #68]	; (8012f1c <prvCheckForValidListAndQueue+0x74>)
 8012ed8:	4a11      	ldr	r2, [pc, #68]	; (8012f20 <prvCheckForValidListAndQueue+0x78>)
 8012eda:	2110      	movs	r1, #16
 8012edc:	200a      	movs	r0, #10
 8012ede:	f7fe f8af 	bl	8011040 <xQueueGenericCreateStatic>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	4a08      	ldr	r2, [pc, #32]	; (8012f08 <prvCheckForValidListAndQueue+0x60>)
 8012ee6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012ee8:	4b07      	ldr	r3, [pc, #28]	; (8012f08 <prvCheckForValidListAndQueue+0x60>)
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d005      	beq.n	8012efc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012ef0:	4b05      	ldr	r3, [pc, #20]	; (8012f08 <prvCheckForValidListAndQueue+0x60>)
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	490b      	ldr	r1, [pc, #44]	; (8012f24 <prvCheckForValidListAndQueue+0x7c>)
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7fe fd02 	bl	8011900 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012efc:	f000 f992 	bl	8013224 <vPortExitCritical>
}
 8012f00:	bf00      	nop
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	240014bc 	.word	0x240014bc
 8012f0c:	2400148c 	.word	0x2400148c
 8012f10:	240014a0 	.word	0x240014a0
 8012f14:	240014b4 	.word	0x240014b4
 8012f18:	240014b8 	.word	0x240014b8
 8012f1c:	24001568 	.word	0x24001568
 8012f20:	240014c8 	.word	0x240014c8
 8012f24:	080144a8 	.word	0x080144a8

08012f28 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b08a      	sub	sp, #40	; 0x28
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	60f8      	str	r0, [r7, #12]
 8012f30:	60b9      	str	r1, [r7, #8]
 8012f32:	607a      	str	r2, [r7, #4]
 8012f34:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8012f36:	f06f 0301 	mvn.w	r3, #1
 8012f3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8012f40:	68bb      	ldr	r3, [r7, #8]
 8012f42:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012f48:	4b06      	ldr	r3, [pc, #24]	; (8012f64 <xTimerPendFunctionCallFromISR+0x3c>)
 8012f4a:	6818      	ldr	r0, [r3, #0]
 8012f4c:	f107 0114 	add.w	r1, r7, #20
 8012f50:	2300      	movs	r3, #0
 8012f52:	683a      	ldr	r2, [r7, #0]
 8012f54:	f7fe fa48 	bl	80113e8 <xQueueGenericSendFromISR>
 8012f58:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8012f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3728      	adds	r7, #40	; 0x28
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	240014bc 	.word	0x240014bc

08012f68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b085      	sub	sp, #20
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	60f8      	str	r0, [r7, #12]
 8012f70:	60b9      	str	r1, [r7, #8]
 8012f72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	3b04      	subs	r3, #4
 8012f78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	3b04      	subs	r3, #4
 8012f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	f023 0201 	bic.w	r2, r3, #1
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	3b04      	subs	r3, #4
 8012f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012f98:	4a0c      	ldr	r2, [pc, #48]	; (8012fcc <pxPortInitialiseStack+0x64>)
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	3b14      	subs	r3, #20
 8012fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012fa4:	687a      	ldr	r2, [r7, #4]
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	3b04      	subs	r3, #4
 8012fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	f06f 0202 	mvn.w	r2, #2
 8012fb6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	3b20      	subs	r3, #32
 8012fbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3714      	adds	r7, #20
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fca:	4770      	bx	lr
 8012fcc:	08012fd1 	.word	0x08012fd1

08012fd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012fd0:	b480      	push	{r7}
 8012fd2:	b085      	sub	sp, #20
 8012fd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012fda:	4b12      	ldr	r3, [pc, #72]	; (8013024 <prvTaskExitError+0x54>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012fe2:	d00a      	beq.n	8012ffa <prvTaskExitError+0x2a>
	__asm volatile
 8012fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe8:	f383 8811 	msr	BASEPRI, r3
 8012fec:	f3bf 8f6f 	isb	sy
 8012ff0:	f3bf 8f4f 	dsb	sy
 8012ff4:	60fb      	str	r3, [r7, #12]
}
 8012ff6:	bf00      	nop
 8012ff8:	e7fe      	b.n	8012ff8 <prvTaskExitError+0x28>
	__asm volatile
 8012ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ffe:	f383 8811 	msr	BASEPRI, r3
 8013002:	f3bf 8f6f 	isb	sy
 8013006:	f3bf 8f4f 	dsb	sy
 801300a:	60bb      	str	r3, [r7, #8]
}
 801300c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801300e:	bf00      	nop
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d0fc      	beq.n	8013010 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013016:	bf00      	nop
 8013018:	bf00      	nop
 801301a:	3714      	adds	r7, #20
 801301c:	46bd      	mov	sp, r7
 801301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013022:	4770      	bx	lr
 8013024:	24000098 	.word	0x24000098
	...

08013030 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013030:	4b07      	ldr	r3, [pc, #28]	; (8013050 <pxCurrentTCBConst2>)
 8013032:	6819      	ldr	r1, [r3, #0]
 8013034:	6808      	ldr	r0, [r1, #0]
 8013036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801303a:	f380 8809 	msr	PSP, r0
 801303e:	f3bf 8f6f 	isb	sy
 8013042:	f04f 0000 	mov.w	r0, #0
 8013046:	f380 8811 	msr	BASEPRI, r0
 801304a:	4770      	bx	lr
 801304c:	f3af 8000 	nop.w

08013050 <pxCurrentTCBConst2>:
 8013050:	24000f8c 	.word	0x24000f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013054:	bf00      	nop
 8013056:	bf00      	nop

08013058 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013058:	4808      	ldr	r0, [pc, #32]	; (801307c <prvPortStartFirstTask+0x24>)
 801305a:	6800      	ldr	r0, [r0, #0]
 801305c:	6800      	ldr	r0, [r0, #0]
 801305e:	f380 8808 	msr	MSP, r0
 8013062:	f04f 0000 	mov.w	r0, #0
 8013066:	f380 8814 	msr	CONTROL, r0
 801306a:	b662      	cpsie	i
 801306c:	b661      	cpsie	f
 801306e:	f3bf 8f4f 	dsb	sy
 8013072:	f3bf 8f6f 	isb	sy
 8013076:	df00      	svc	0
 8013078:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801307a:	bf00      	nop
 801307c:	e000ed08 	.word	0xe000ed08

08013080 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b086      	sub	sp, #24
 8013084:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013086:	4b46      	ldr	r3, [pc, #280]	; (80131a0 <xPortStartScheduler+0x120>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	4a46      	ldr	r2, [pc, #280]	; (80131a4 <xPortStartScheduler+0x124>)
 801308c:	4293      	cmp	r3, r2
 801308e:	d10a      	bne.n	80130a6 <xPortStartScheduler+0x26>
	__asm volatile
 8013090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013094:	f383 8811 	msr	BASEPRI, r3
 8013098:	f3bf 8f6f 	isb	sy
 801309c:	f3bf 8f4f 	dsb	sy
 80130a0:	613b      	str	r3, [r7, #16]
}
 80130a2:	bf00      	nop
 80130a4:	e7fe      	b.n	80130a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80130a6:	4b3e      	ldr	r3, [pc, #248]	; (80131a0 <xPortStartScheduler+0x120>)
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	4a3f      	ldr	r2, [pc, #252]	; (80131a8 <xPortStartScheduler+0x128>)
 80130ac:	4293      	cmp	r3, r2
 80130ae:	d10a      	bne.n	80130c6 <xPortStartScheduler+0x46>
	__asm volatile
 80130b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130b4:	f383 8811 	msr	BASEPRI, r3
 80130b8:	f3bf 8f6f 	isb	sy
 80130bc:	f3bf 8f4f 	dsb	sy
 80130c0:	60fb      	str	r3, [r7, #12]
}
 80130c2:	bf00      	nop
 80130c4:	e7fe      	b.n	80130c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80130c6:	4b39      	ldr	r3, [pc, #228]	; (80131ac <xPortStartScheduler+0x12c>)
 80130c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	781b      	ldrb	r3, [r3, #0]
 80130ce:	b2db      	uxtb	r3, r3
 80130d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80130d2:	697b      	ldr	r3, [r7, #20]
 80130d4:	22ff      	movs	r2, #255	; 0xff
 80130d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	b2db      	uxtb	r3, r3
 80130de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80130e0:	78fb      	ldrb	r3, [r7, #3]
 80130e2:	b2db      	uxtb	r3, r3
 80130e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80130e8:	b2da      	uxtb	r2, r3
 80130ea:	4b31      	ldr	r3, [pc, #196]	; (80131b0 <xPortStartScheduler+0x130>)
 80130ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80130ee:	4b31      	ldr	r3, [pc, #196]	; (80131b4 <xPortStartScheduler+0x134>)
 80130f0:	2207      	movs	r2, #7
 80130f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80130f4:	e009      	b.n	801310a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80130f6:	4b2f      	ldr	r3, [pc, #188]	; (80131b4 <xPortStartScheduler+0x134>)
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	3b01      	subs	r3, #1
 80130fc:	4a2d      	ldr	r2, [pc, #180]	; (80131b4 <xPortStartScheduler+0x134>)
 80130fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013100:	78fb      	ldrb	r3, [r7, #3]
 8013102:	b2db      	uxtb	r3, r3
 8013104:	005b      	lsls	r3, r3, #1
 8013106:	b2db      	uxtb	r3, r3
 8013108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801310a:	78fb      	ldrb	r3, [r7, #3]
 801310c:	b2db      	uxtb	r3, r3
 801310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013112:	2b80      	cmp	r3, #128	; 0x80
 8013114:	d0ef      	beq.n	80130f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013116:	4b27      	ldr	r3, [pc, #156]	; (80131b4 <xPortStartScheduler+0x134>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	f1c3 0307 	rsb	r3, r3, #7
 801311e:	2b04      	cmp	r3, #4
 8013120:	d00a      	beq.n	8013138 <xPortStartScheduler+0xb8>
	__asm volatile
 8013122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013126:	f383 8811 	msr	BASEPRI, r3
 801312a:	f3bf 8f6f 	isb	sy
 801312e:	f3bf 8f4f 	dsb	sy
 8013132:	60bb      	str	r3, [r7, #8]
}
 8013134:	bf00      	nop
 8013136:	e7fe      	b.n	8013136 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013138:	4b1e      	ldr	r3, [pc, #120]	; (80131b4 <xPortStartScheduler+0x134>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	021b      	lsls	r3, r3, #8
 801313e:	4a1d      	ldr	r2, [pc, #116]	; (80131b4 <xPortStartScheduler+0x134>)
 8013140:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013142:	4b1c      	ldr	r3, [pc, #112]	; (80131b4 <xPortStartScheduler+0x134>)
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801314a:	4a1a      	ldr	r2, [pc, #104]	; (80131b4 <xPortStartScheduler+0x134>)
 801314c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	b2da      	uxtb	r2, r3
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013156:	4b18      	ldr	r3, [pc, #96]	; (80131b8 <xPortStartScheduler+0x138>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	4a17      	ldr	r2, [pc, #92]	; (80131b8 <xPortStartScheduler+0x138>)
 801315c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013162:	4b15      	ldr	r3, [pc, #84]	; (80131b8 <xPortStartScheduler+0x138>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	4a14      	ldr	r2, [pc, #80]	; (80131b8 <xPortStartScheduler+0x138>)
 8013168:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801316c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801316e:	f000 f8dd 	bl	801332c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013172:	4b12      	ldr	r3, [pc, #72]	; (80131bc <xPortStartScheduler+0x13c>)
 8013174:	2200      	movs	r2, #0
 8013176:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013178:	f000 f8fc 	bl	8013374 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801317c:	4b10      	ldr	r3, [pc, #64]	; (80131c0 <xPortStartScheduler+0x140>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	4a0f      	ldr	r2, [pc, #60]	; (80131c0 <xPortStartScheduler+0x140>)
 8013182:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013186:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013188:	f7ff ff66 	bl	8013058 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801318c:	f7fe ffd0 	bl	8012130 <vTaskSwitchContext>
	prvTaskExitError();
 8013190:	f7ff ff1e 	bl	8012fd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013194:	2300      	movs	r3, #0
}
 8013196:	4618      	mov	r0, r3
 8013198:	3718      	adds	r7, #24
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	bf00      	nop
 80131a0:	e000ed00 	.word	0xe000ed00
 80131a4:	410fc271 	.word	0x410fc271
 80131a8:	410fc270 	.word	0x410fc270
 80131ac:	e000e400 	.word	0xe000e400
 80131b0:	240015b8 	.word	0x240015b8
 80131b4:	240015bc 	.word	0x240015bc
 80131b8:	e000ed20 	.word	0xe000ed20
 80131bc:	24000098 	.word	0x24000098
 80131c0:	e000ef34 	.word	0xe000ef34

080131c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80131c4:	b480      	push	{r7}
 80131c6:	b083      	sub	sp, #12
 80131c8:	af00      	add	r7, sp, #0
	__asm volatile
 80131ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ce:	f383 8811 	msr	BASEPRI, r3
 80131d2:	f3bf 8f6f 	isb	sy
 80131d6:	f3bf 8f4f 	dsb	sy
 80131da:	607b      	str	r3, [r7, #4]
}
 80131dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80131de:	4b0f      	ldr	r3, [pc, #60]	; (801321c <vPortEnterCritical+0x58>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	3301      	adds	r3, #1
 80131e4:	4a0d      	ldr	r2, [pc, #52]	; (801321c <vPortEnterCritical+0x58>)
 80131e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80131e8:	4b0c      	ldr	r3, [pc, #48]	; (801321c <vPortEnterCritical+0x58>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d10f      	bne.n	8013210 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80131f0:	4b0b      	ldr	r3, [pc, #44]	; (8013220 <vPortEnterCritical+0x5c>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	b2db      	uxtb	r3, r3
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d00a      	beq.n	8013210 <vPortEnterCritical+0x4c>
	__asm volatile
 80131fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131fe:	f383 8811 	msr	BASEPRI, r3
 8013202:	f3bf 8f6f 	isb	sy
 8013206:	f3bf 8f4f 	dsb	sy
 801320a:	603b      	str	r3, [r7, #0]
}
 801320c:	bf00      	nop
 801320e:	e7fe      	b.n	801320e <vPortEnterCritical+0x4a>
	}
}
 8013210:	bf00      	nop
 8013212:	370c      	adds	r7, #12
 8013214:	46bd      	mov	sp, r7
 8013216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321a:	4770      	bx	lr
 801321c:	24000098 	.word	0x24000098
 8013220:	e000ed04 	.word	0xe000ed04

08013224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013224:	b480      	push	{r7}
 8013226:	b083      	sub	sp, #12
 8013228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801322a:	4b12      	ldr	r3, [pc, #72]	; (8013274 <vPortExitCritical+0x50>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d10a      	bne.n	8013248 <vPortExitCritical+0x24>
	__asm volatile
 8013232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013236:	f383 8811 	msr	BASEPRI, r3
 801323a:	f3bf 8f6f 	isb	sy
 801323e:	f3bf 8f4f 	dsb	sy
 8013242:	607b      	str	r3, [r7, #4]
}
 8013244:	bf00      	nop
 8013246:	e7fe      	b.n	8013246 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013248:	4b0a      	ldr	r3, [pc, #40]	; (8013274 <vPortExitCritical+0x50>)
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	3b01      	subs	r3, #1
 801324e:	4a09      	ldr	r2, [pc, #36]	; (8013274 <vPortExitCritical+0x50>)
 8013250:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013252:	4b08      	ldr	r3, [pc, #32]	; (8013274 <vPortExitCritical+0x50>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d105      	bne.n	8013266 <vPortExitCritical+0x42>
 801325a:	2300      	movs	r3, #0
 801325c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	f383 8811 	msr	BASEPRI, r3
}
 8013264:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013266:	bf00      	nop
 8013268:	370c      	adds	r7, #12
 801326a:	46bd      	mov	sp, r7
 801326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013270:	4770      	bx	lr
 8013272:	bf00      	nop
 8013274:	24000098 	.word	0x24000098
	...

08013280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013280:	f3ef 8009 	mrs	r0, PSP
 8013284:	f3bf 8f6f 	isb	sy
 8013288:	4b15      	ldr	r3, [pc, #84]	; (80132e0 <pxCurrentTCBConst>)
 801328a:	681a      	ldr	r2, [r3, #0]
 801328c:	f01e 0f10 	tst.w	lr, #16
 8013290:	bf08      	it	eq
 8013292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801329a:	6010      	str	r0, [r2, #0]
 801329c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80132a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80132a4:	f380 8811 	msr	BASEPRI, r0
 80132a8:	f3bf 8f4f 	dsb	sy
 80132ac:	f3bf 8f6f 	isb	sy
 80132b0:	f7fe ff3e 	bl	8012130 <vTaskSwitchContext>
 80132b4:	f04f 0000 	mov.w	r0, #0
 80132b8:	f380 8811 	msr	BASEPRI, r0
 80132bc:	bc09      	pop	{r0, r3}
 80132be:	6819      	ldr	r1, [r3, #0]
 80132c0:	6808      	ldr	r0, [r1, #0]
 80132c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132c6:	f01e 0f10 	tst.w	lr, #16
 80132ca:	bf08      	it	eq
 80132cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80132d0:	f380 8809 	msr	PSP, r0
 80132d4:	f3bf 8f6f 	isb	sy
 80132d8:	4770      	bx	lr
 80132da:	bf00      	nop
 80132dc:	f3af 8000 	nop.w

080132e0 <pxCurrentTCBConst>:
 80132e0:	24000f8c 	.word	0x24000f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80132e4:	bf00      	nop
 80132e6:	bf00      	nop

080132e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b082      	sub	sp, #8
 80132ec:	af00      	add	r7, sp, #0
	__asm volatile
 80132ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132f2:	f383 8811 	msr	BASEPRI, r3
 80132f6:	f3bf 8f6f 	isb	sy
 80132fa:	f3bf 8f4f 	dsb	sy
 80132fe:	607b      	str	r3, [r7, #4]
}
 8013300:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013302:	f7fe fe53 	bl	8011fac <xTaskIncrementTick>
 8013306:	4603      	mov	r3, r0
 8013308:	2b00      	cmp	r3, #0
 801330a:	d003      	beq.n	8013314 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801330c:	4b06      	ldr	r3, [pc, #24]	; (8013328 <xPortSysTickHandler+0x40>)
 801330e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013312:	601a      	str	r2, [r3, #0]
 8013314:	2300      	movs	r3, #0
 8013316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	f383 8811 	msr	BASEPRI, r3
}
 801331e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013320:	bf00      	nop
 8013322:	3708      	adds	r7, #8
 8013324:	46bd      	mov	sp, r7
 8013326:	bd80      	pop	{r7, pc}
 8013328:	e000ed04 	.word	0xe000ed04

0801332c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801332c:	b480      	push	{r7}
 801332e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013330:	4b0b      	ldr	r3, [pc, #44]	; (8013360 <vPortSetupTimerInterrupt+0x34>)
 8013332:	2200      	movs	r2, #0
 8013334:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013336:	4b0b      	ldr	r3, [pc, #44]	; (8013364 <vPortSetupTimerInterrupt+0x38>)
 8013338:	2200      	movs	r2, #0
 801333a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801333c:	4b0a      	ldr	r3, [pc, #40]	; (8013368 <vPortSetupTimerInterrupt+0x3c>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	4a0a      	ldr	r2, [pc, #40]	; (801336c <vPortSetupTimerInterrupt+0x40>)
 8013342:	fba2 2303 	umull	r2, r3, r2, r3
 8013346:	099b      	lsrs	r3, r3, #6
 8013348:	4a09      	ldr	r2, [pc, #36]	; (8013370 <vPortSetupTimerInterrupt+0x44>)
 801334a:	3b01      	subs	r3, #1
 801334c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801334e:	4b04      	ldr	r3, [pc, #16]	; (8013360 <vPortSetupTimerInterrupt+0x34>)
 8013350:	2207      	movs	r2, #7
 8013352:	601a      	str	r2, [r3, #0]
}
 8013354:	bf00      	nop
 8013356:	46bd      	mov	sp, r7
 8013358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801335c:	4770      	bx	lr
 801335e:	bf00      	nop
 8013360:	e000e010 	.word	0xe000e010
 8013364:	e000e018 	.word	0xe000e018
 8013368:	24000088 	.word	0x24000088
 801336c:	10624dd3 	.word	0x10624dd3
 8013370:	e000e014 	.word	0xe000e014

08013374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013374:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013384 <vPortEnableVFP+0x10>
 8013378:	6801      	ldr	r1, [r0, #0]
 801337a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801337e:	6001      	str	r1, [r0, #0]
 8013380:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013382:	bf00      	nop
 8013384:	e000ed88 	.word	0xe000ed88

08013388 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013388:	b480      	push	{r7}
 801338a:	b085      	sub	sp, #20
 801338c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801338e:	f3ef 8305 	mrs	r3, IPSR
 8013392:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	2b0f      	cmp	r3, #15
 8013398:	d914      	bls.n	80133c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801339a:	4a17      	ldr	r2, [pc, #92]	; (80133f8 <vPortValidateInterruptPriority+0x70>)
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	4413      	add	r3, r2
 80133a0:	781b      	ldrb	r3, [r3, #0]
 80133a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80133a4:	4b15      	ldr	r3, [pc, #84]	; (80133fc <vPortValidateInterruptPriority+0x74>)
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	7afa      	ldrb	r2, [r7, #11]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d20a      	bcs.n	80133c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80133ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b2:	f383 8811 	msr	BASEPRI, r3
 80133b6:	f3bf 8f6f 	isb	sy
 80133ba:	f3bf 8f4f 	dsb	sy
 80133be:	607b      	str	r3, [r7, #4]
}
 80133c0:	bf00      	nop
 80133c2:	e7fe      	b.n	80133c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80133c4:	4b0e      	ldr	r3, [pc, #56]	; (8013400 <vPortValidateInterruptPriority+0x78>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80133cc:	4b0d      	ldr	r3, [pc, #52]	; (8013404 <vPortValidateInterruptPriority+0x7c>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d90a      	bls.n	80133ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80133d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d8:	f383 8811 	msr	BASEPRI, r3
 80133dc:	f3bf 8f6f 	isb	sy
 80133e0:	f3bf 8f4f 	dsb	sy
 80133e4:	603b      	str	r3, [r7, #0]
}
 80133e6:	bf00      	nop
 80133e8:	e7fe      	b.n	80133e8 <vPortValidateInterruptPriority+0x60>
	}
 80133ea:	bf00      	nop
 80133ec:	3714      	adds	r7, #20
 80133ee:	46bd      	mov	sp, r7
 80133f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f4:	4770      	bx	lr
 80133f6:	bf00      	nop
 80133f8:	e000e3f0 	.word	0xe000e3f0
 80133fc:	240015b8 	.word	0x240015b8
 8013400:	e000ed0c 	.word	0xe000ed0c
 8013404:	240015bc 	.word	0x240015bc

08013408 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b08a      	sub	sp, #40	; 0x28
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013410:	2300      	movs	r3, #0
 8013412:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013414:	f7fe fd0e 	bl	8011e34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013418:	4b5b      	ldr	r3, [pc, #364]	; (8013588 <pvPortMalloc+0x180>)
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d101      	bne.n	8013424 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013420:	f000 f920 	bl	8013664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013424:	4b59      	ldr	r3, [pc, #356]	; (801358c <pvPortMalloc+0x184>)
 8013426:	681a      	ldr	r2, [r3, #0]
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	4013      	ands	r3, r2
 801342c:	2b00      	cmp	r3, #0
 801342e:	f040 8093 	bne.w	8013558 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d01d      	beq.n	8013474 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013438:	2208      	movs	r2, #8
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	4413      	add	r3, r2
 801343e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	f003 0307 	and.w	r3, r3, #7
 8013446:	2b00      	cmp	r3, #0
 8013448:	d014      	beq.n	8013474 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f023 0307 	bic.w	r3, r3, #7
 8013450:	3308      	adds	r3, #8
 8013452:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f003 0307 	and.w	r3, r3, #7
 801345a:	2b00      	cmp	r3, #0
 801345c:	d00a      	beq.n	8013474 <pvPortMalloc+0x6c>
	__asm volatile
 801345e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013462:	f383 8811 	msr	BASEPRI, r3
 8013466:	f3bf 8f6f 	isb	sy
 801346a:	f3bf 8f4f 	dsb	sy
 801346e:	617b      	str	r3, [r7, #20]
}
 8013470:	bf00      	nop
 8013472:	e7fe      	b.n	8013472 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d06e      	beq.n	8013558 <pvPortMalloc+0x150>
 801347a:	4b45      	ldr	r3, [pc, #276]	; (8013590 <pvPortMalloc+0x188>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	687a      	ldr	r2, [r7, #4]
 8013480:	429a      	cmp	r2, r3
 8013482:	d869      	bhi.n	8013558 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013484:	4b43      	ldr	r3, [pc, #268]	; (8013594 <pvPortMalloc+0x18c>)
 8013486:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013488:	4b42      	ldr	r3, [pc, #264]	; (8013594 <pvPortMalloc+0x18c>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801348e:	e004      	b.n	801349a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013492:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801349c:	685b      	ldr	r3, [r3, #4]
 801349e:	687a      	ldr	r2, [r7, #4]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d903      	bls.n	80134ac <pvPortMalloc+0xa4>
 80134a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d1f1      	bne.n	8013490 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80134ac:	4b36      	ldr	r3, [pc, #216]	; (8013588 <pvPortMalloc+0x180>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134b2:	429a      	cmp	r2, r3
 80134b4:	d050      	beq.n	8013558 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80134b6:	6a3b      	ldr	r3, [r7, #32]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	2208      	movs	r2, #8
 80134bc:	4413      	add	r3, r2
 80134be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80134c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c2:	681a      	ldr	r2, [r3, #0]
 80134c4:	6a3b      	ldr	r3, [r7, #32]
 80134c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80134c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ca:	685a      	ldr	r2, [r3, #4]
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	1ad2      	subs	r2, r2, r3
 80134d0:	2308      	movs	r3, #8
 80134d2:	005b      	lsls	r3, r3, #1
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d91f      	bls.n	8013518 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80134d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	4413      	add	r3, r2
 80134de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80134e0:	69bb      	ldr	r3, [r7, #24]
 80134e2:	f003 0307 	and.w	r3, r3, #7
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d00a      	beq.n	8013500 <pvPortMalloc+0xf8>
	__asm volatile
 80134ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ee:	f383 8811 	msr	BASEPRI, r3
 80134f2:	f3bf 8f6f 	isb	sy
 80134f6:	f3bf 8f4f 	dsb	sy
 80134fa:	613b      	str	r3, [r7, #16]
}
 80134fc:	bf00      	nop
 80134fe:	e7fe      	b.n	80134fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013502:	685a      	ldr	r2, [r3, #4]
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	1ad2      	subs	r2, r2, r3
 8013508:	69bb      	ldr	r3, [r7, #24]
 801350a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801350e:	687a      	ldr	r2, [r7, #4]
 8013510:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013512:	69b8      	ldr	r0, [r7, #24]
 8013514:	f000 f908 	bl	8013728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013518:	4b1d      	ldr	r3, [pc, #116]	; (8013590 <pvPortMalloc+0x188>)
 801351a:	681a      	ldr	r2, [r3, #0]
 801351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801351e:	685b      	ldr	r3, [r3, #4]
 8013520:	1ad3      	subs	r3, r2, r3
 8013522:	4a1b      	ldr	r2, [pc, #108]	; (8013590 <pvPortMalloc+0x188>)
 8013524:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013526:	4b1a      	ldr	r3, [pc, #104]	; (8013590 <pvPortMalloc+0x188>)
 8013528:	681a      	ldr	r2, [r3, #0]
 801352a:	4b1b      	ldr	r3, [pc, #108]	; (8013598 <pvPortMalloc+0x190>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	429a      	cmp	r2, r3
 8013530:	d203      	bcs.n	801353a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013532:	4b17      	ldr	r3, [pc, #92]	; (8013590 <pvPortMalloc+0x188>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	4a18      	ldr	r2, [pc, #96]	; (8013598 <pvPortMalloc+0x190>)
 8013538:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801353c:	685a      	ldr	r2, [r3, #4]
 801353e:	4b13      	ldr	r3, [pc, #76]	; (801358c <pvPortMalloc+0x184>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	431a      	orrs	r2, r3
 8013544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013546:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801354a:	2200      	movs	r2, #0
 801354c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801354e:	4b13      	ldr	r3, [pc, #76]	; (801359c <pvPortMalloc+0x194>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	3301      	adds	r3, #1
 8013554:	4a11      	ldr	r2, [pc, #68]	; (801359c <pvPortMalloc+0x194>)
 8013556:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013558:	f7fe fc7a 	bl	8011e50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	f003 0307 	and.w	r3, r3, #7
 8013562:	2b00      	cmp	r3, #0
 8013564:	d00a      	beq.n	801357c <pvPortMalloc+0x174>
	__asm volatile
 8013566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801356a:	f383 8811 	msr	BASEPRI, r3
 801356e:	f3bf 8f6f 	isb	sy
 8013572:	f3bf 8f4f 	dsb	sy
 8013576:	60fb      	str	r3, [r7, #12]
}
 8013578:	bf00      	nop
 801357a:	e7fe      	b.n	801357a <pvPortMalloc+0x172>
	return pvReturn;
 801357c:	69fb      	ldr	r3, [r7, #28]
}
 801357e:	4618      	mov	r0, r3
 8013580:	3728      	adds	r7, #40	; 0x28
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	240051c8 	.word	0x240051c8
 801358c:	240051dc 	.word	0x240051dc
 8013590:	240051cc 	.word	0x240051cc
 8013594:	240051c0 	.word	0x240051c0
 8013598:	240051d0 	.word	0x240051d0
 801359c:	240051d4 	.word	0x240051d4

080135a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b086      	sub	sp, #24
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d04d      	beq.n	801364e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80135b2:	2308      	movs	r3, #8
 80135b4:	425b      	negs	r3, r3
 80135b6:	697a      	ldr	r2, [r7, #20]
 80135b8:	4413      	add	r3, r2
 80135ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	685a      	ldr	r2, [r3, #4]
 80135c4:	4b24      	ldr	r3, [pc, #144]	; (8013658 <vPortFree+0xb8>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	4013      	ands	r3, r2
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d10a      	bne.n	80135e4 <vPortFree+0x44>
	__asm volatile
 80135ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d2:	f383 8811 	msr	BASEPRI, r3
 80135d6:	f3bf 8f6f 	isb	sy
 80135da:	f3bf 8f4f 	dsb	sy
 80135de:	60fb      	str	r3, [r7, #12]
}
 80135e0:	bf00      	nop
 80135e2:	e7fe      	b.n	80135e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d00a      	beq.n	8013602 <vPortFree+0x62>
	__asm volatile
 80135ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135f0:	f383 8811 	msr	BASEPRI, r3
 80135f4:	f3bf 8f6f 	isb	sy
 80135f8:	f3bf 8f4f 	dsb	sy
 80135fc:	60bb      	str	r3, [r7, #8]
}
 80135fe:	bf00      	nop
 8013600:	e7fe      	b.n	8013600 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	685a      	ldr	r2, [r3, #4]
 8013606:	4b14      	ldr	r3, [pc, #80]	; (8013658 <vPortFree+0xb8>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	4013      	ands	r3, r2
 801360c:	2b00      	cmp	r3, #0
 801360e:	d01e      	beq.n	801364e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013610:	693b      	ldr	r3, [r7, #16]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d11a      	bne.n	801364e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	685a      	ldr	r2, [r3, #4]
 801361c:	4b0e      	ldr	r3, [pc, #56]	; (8013658 <vPortFree+0xb8>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	43db      	mvns	r3, r3
 8013622:	401a      	ands	r2, r3
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013628:	f7fe fc04 	bl	8011e34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	685a      	ldr	r2, [r3, #4]
 8013630:	4b0a      	ldr	r3, [pc, #40]	; (801365c <vPortFree+0xbc>)
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	4413      	add	r3, r2
 8013636:	4a09      	ldr	r2, [pc, #36]	; (801365c <vPortFree+0xbc>)
 8013638:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801363a:	6938      	ldr	r0, [r7, #16]
 801363c:	f000 f874 	bl	8013728 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013640:	4b07      	ldr	r3, [pc, #28]	; (8013660 <vPortFree+0xc0>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	3301      	adds	r3, #1
 8013646:	4a06      	ldr	r2, [pc, #24]	; (8013660 <vPortFree+0xc0>)
 8013648:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801364a:	f7fe fc01 	bl	8011e50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801364e:	bf00      	nop
 8013650:	3718      	adds	r7, #24
 8013652:	46bd      	mov	sp, r7
 8013654:	bd80      	pop	{r7, pc}
 8013656:	bf00      	nop
 8013658:	240051dc 	.word	0x240051dc
 801365c:	240051cc 	.word	0x240051cc
 8013660:	240051d8 	.word	0x240051d8

08013664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013664:	b480      	push	{r7}
 8013666:	b085      	sub	sp, #20
 8013668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801366a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801366e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013670:	4b27      	ldr	r3, [pc, #156]	; (8013710 <prvHeapInit+0xac>)
 8013672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	f003 0307 	and.w	r3, r3, #7
 801367a:	2b00      	cmp	r3, #0
 801367c:	d00c      	beq.n	8013698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	3307      	adds	r3, #7
 8013682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	f023 0307 	bic.w	r3, r3, #7
 801368a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801368c:	68ba      	ldr	r2, [r7, #8]
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	1ad3      	subs	r3, r2, r3
 8013692:	4a1f      	ldr	r2, [pc, #124]	; (8013710 <prvHeapInit+0xac>)
 8013694:	4413      	add	r3, r2
 8013696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801369c:	4a1d      	ldr	r2, [pc, #116]	; (8013714 <prvHeapInit+0xb0>)
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80136a2:	4b1c      	ldr	r3, [pc, #112]	; (8013714 <prvHeapInit+0xb0>)
 80136a4:	2200      	movs	r2, #0
 80136a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	68ba      	ldr	r2, [r7, #8]
 80136ac:	4413      	add	r3, r2
 80136ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80136b0:	2208      	movs	r2, #8
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	1a9b      	subs	r3, r3, r2
 80136b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	f023 0307 	bic.w	r3, r3, #7
 80136be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	4a15      	ldr	r2, [pc, #84]	; (8013718 <prvHeapInit+0xb4>)
 80136c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80136c6:	4b14      	ldr	r3, [pc, #80]	; (8013718 <prvHeapInit+0xb4>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	2200      	movs	r2, #0
 80136cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80136ce:	4b12      	ldr	r3, [pc, #72]	; (8013718 <prvHeapInit+0xb4>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	2200      	movs	r2, #0
 80136d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	68fa      	ldr	r2, [r7, #12]
 80136de:	1ad2      	subs	r2, r2, r3
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80136e4:	4b0c      	ldr	r3, [pc, #48]	; (8013718 <prvHeapInit+0xb4>)
 80136e6:	681a      	ldr	r2, [r3, #0]
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	685b      	ldr	r3, [r3, #4]
 80136f0:	4a0a      	ldr	r2, [pc, #40]	; (801371c <prvHeapInit+0xb8>)
 80136f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80136f4:	683b      	ldr	r3, [r7, #0]
 80136f6:	685b      	ldr	r3, [r3, #4]
 80136f8:	4a09      	ldr	r2, [pc, #36]	; (8013720 <prvHeapInit+0xbc>)
 80136fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80136fc:	4b09      	ldr	r3, [pc, #36]	; (8013724 <prvHeapInit+0xc0>)
 80136fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013702:	601a      	str	r2, [r3, #0]
}
 8013704:	bf00      	nop
 8013706:	3714      	adds	r7, #20
 8013708:	46bd      	mov	sp, r7
 801370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370e:	4770      	bx	lr
 8013710:	240015c0 	.word	0x240015c0
 8013714:	240051c0 	.word	0x240051c0
 8013718:	240051c8 	.word	0x240051c8
 801371c:	240051d0 	.word	0x240051d0
 8013720:	240051cc 	.word	0x240051cc
 8013724:	240051dc 	.word	0x240051dc

08013728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013728:	b480      	push	{r7}
 801372a:	b085      	sub	sp, #20
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013730:	4b28      	ldr	r3, [pc, #160]	; (80137d4 <prvInsertBlockIntoFreeList+0xac>)
 8013732:	60fb      	str	r3, [r7, #12]
 8013734:	e002      	b.n	801373c <prvInsertBlockIntoFreeList+0x14>
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	60fb      	str	r3, [r7, #12]
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	687a      	ldr	r2, [r7, #4]
 8013742:	429a      	cmp	r2, r3
 8013744:	d8f7      	bhi.n	8013736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	685b      	ldr	r3, [r3, #4]
 801374e:	68ba      	ldr	r2, [r7, #8]
 8013750:	4413      	add	r3, r2
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	429a      	cmp	r2, r3
 8013756:	d108      	bne.n	801376a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	685a      	ldr	r2, [r3, #4]
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	685b      	ldr	r3, [r3, #4]
 8013760:	441a      	add	r2, r3
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	685b      	ldr	r3, [r3, #4]
 8013772:	68ba      	ldr	r2, [r7, #8]
 8013774:	441a      	add	r2, r3
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	429a      	cmp	r2, r3
 801377c:	d118      	bne.n	80137b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	681a      	ldr	r2, [r3, #0]
 8013782:	4b15      	ldr	r3, [pc, #84]	; (80137d8 <prvInsertBlockIntoFreeList+0xb0>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	429a      	cmp	r2, r3
 8013788:	d00d      	beq.n	80137a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	685a      	ldr	r2, [r3, #4]
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	441a      	add	r2, r3
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	681a      	ldr	r2, [r3, #0]
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	601a      	str	r2, [r3, #0]
 80137a4:	e008      	b.n	80137b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80137a6:	4b0c      	ldr	r3, [pc, #48]	; (80137d8 <prvInsertBlockIntoFreeList+0xb0>)
 80137a8:	681a      	ldr	r2, [r3, #0]
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	601a      	str	r2, [r3, #0]
 80137ae:	e003      	b.n	80137b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	681a      	ldr	r2, [r3, #0]
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80137b8:	68fa      	ldr	r2, [r7, #12]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	429a      	cmp	r2, r3
 80137be:	d002      	beq.n	80137c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	687a      	ldr	r2, [r7, #4]
 80137c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80137c6:	bf00      	nop
 80137c8:	3714      	adds	r7, #20
 80137ca:	46bd      	mov	sp, r7
 80137cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d0:	4770      	bx	lr
 80137d2:	bf00      	nop
 80137d4:	240051c0 	.word	0x240051c0
 80137d8:	240051c8 	.word	0x240051c8

080137dc <__errno>:
 80137dc:	4b01      	ldr	r3, [pc, #4]	; (80137e4 <__errno+0x8>)
 80137de:	6818      	ldr	r0, [r3, #0]
 80137e0:	4770      	bx	lr
 80137e2:	bf00      	nop
 80137e4:	2400009c 	.word	0x2400009c

080137e8 <__libc_init_array>:
 80137e8:	b570      	push	{r4, r5, r6, lr}
 80137ea:	4d0d      	ldr	r5, [pc, #52]	; (8013820 <__libc_init_array+0x38>)
 80137ec:	4c0d      	ldr	r4, [pc, #52]	; (8013824 <__libc_init_array+0x3c>)
 80137ee:	1b64      	subs	r4, r4, r5
 80137f0:	10a4      	asrs	r4, r4, #2
 80137f2:	2600      	movs	r6, #0
 80137f4:	42a6      	cmp	r6, r4
 80137f6:	d109      	bne.n	801380c <__libc_init_array+0x24>
 80137f8:	4d0b      	ldr	r5, [pc, #44]	; (8013828 <__libc_init_array+0x40>)
 80137fa:	4c0c      	ldr	r4, [pc, #48]	; (801382c <__libc_init_array+0x44>)
 80137fc:	f000 fd2c 	bl	8014258 <_init>
 8013800:	1b64      	subs	r4, r4, r5
 8013802:	10a4      	asrs	r4, r4, #2
 8013804:	2600      	movs	r6, #0
 8013806:	42a6      	cmp	r6, r4
 8013808:	d105      	bne.n	8013816 <__libc_init_array+0x2e>
 801380a:	bd70      	pop	{r4, r5, r6, pc}
 801380c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013810:	4798      	blx	r3
 8013812:	3601      	adds	r6, #1
 8013814:	e7ee      	b.n	80137f4 <__libc_init_array+0xc>
 8013816:	f855 3b04 	ldr.w	r3, [r5], #4
 801381a:	4798      	blx	r3
 801381c:	3601      	adds	r6, #1
 801381e:	e7f2      	b.n	8013806 <__libc_init_array+0x1e>
 8013820:	0801470c 	.word	0x0801470c
 8013824:	0801470c 	.word	0x0801470c
 8013828:	0801470c 	.word	0x0801470c
 801382c:	08014710 	.word	0x08014710

08013830 <memcpy>:
 8013830:	440a      	add	r2, r1
 8013832:	4291      	cmp	r1, r2
 8013834:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013838:	d100      	bne.n	801383c <memcpy+0xc>
 801383a:	4770      	bx	lr
 801383c:	b510      	push	{r4, lr}
 801383e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013846:	4291      	cmp	r1, r2
 8013848:	d1f9      	bne.n	801383e <memcpy+0xe>
 801384a:	bd10      	pop	{r4, pc}

0801384c <memset>:
 801384c:	4402      	add	r2, r0
 801384e:	4603      	mov	r3, r0
 8013850:	4293      	cmp	r3, r2
 8013852:	d100      	bne.n	8013856 <memset+0xa>
 8013854:	4770      	bx	lr
 8013856:	f803 1b01 	strb.w	r1, [r3], #1
 801385a:	e7f9      	b.n	8013850 <memset+0x4>

0801385c <_puts_r>:
 801385c:	b570      	push	{r4, r5, r6, lr}
 801385e:	460e      	mov	r6, r1
 8013860:	4605      	mov	r5, r0
 8013862:	b118      	cbz	r0, 801386c <_puts_r+0x10>
 8013864:	6983      	ldr	r3, [r0, #24]
 8013866:	b90b      	cbnz	r3, 801386c <_puts_r+0x10>
 8013868:	f000 fa48 	bl	8013cfc <__sinit>
 801386c:	69ab      	ldr	r3, [r5, #24]
 801386e:	68ac      	ldr	r4, [r5, #8]
 8013870:	b913      	cbnz	r3, 8013878 <_puts_r+0x1c>
 8013872:	4628      	mov	r0, r5
 8013874:	f000 fa42 	bl	8013cfc <__sinit>
 8013878:	4b2c      	ldr	r3, [pc, #176]	; (801392c <_puts_r+0xd0>)
 801387a:	429c      	cmp	r4, r3
 801387c:	d120      	bne.n	80138c0 <_puts_r+0x64>
 801387e:	686c      	ldr	r4, [r5, #4]
 8013880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013882:	07db      	lsls	r3, r3, #31
 8013884:	d405      	bmi.n	8013892 <_puts_r+0x36>
 8013886:	89a3      	ldrh	r3, [r4, #12]
 8013888:	0598      	lsls	r0, r3, #22
 801388a:	d402      	bmi.n	8013892 <_puts_r+0x36>
 801388c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801388e:	f000 fad3 	bl	8013e38 <__retarget_lock_acquire_recursive>
 8013892:	89a3      	ldrh	r3, [r4, #12]
 8013894:	0719      	lsls	r1, r3, #28
 8013896:	d51d      	bpl.n	80138d4 <_puts_r+0x78>
 8013898:	6923      	ldr	r3, [r4, #16]
 801389a:	b1db      	cbz	r3, 80138d4 <_puts_r+0x78>
 801389c:	3e01      	subs	r6, #1
 801389e:	68a3      	ldr	r3, [r4, #8]
 80138a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80138a4:	3b01      	subs	r3, #1
 80138a6:	60a3      	str	r3, [r4, #8]
 80138a8:	bb39      	cbnz	r1, 80138fa <_puts_r+0x9e>
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	da38      	bge.n	8013920 <_puts_r+0xc4>
 80138ae:	4622      	mov	r2, r4
 80138b0:	210a      	movs	r1, #10
 80138b2:	4628      	mov	r0, r5
 80138b4:	f000 f848 	bl	8013948 <__swbuf_r>
 80138b8:	3001      	adds	r0, #1
 80138ba:	d011      	beq.n	80138e0 <_puts_r+0x84>
 80138bc:	250a      	movs	r5, #10
 80138be:	e011      	b.n	80138e4 <_puts_r+0x88>
 80138c0:	4b1b      	ldr	r3, [pc, #108]	; (8013930 <_puts_r+0xd4>)
 80138c2:	429c      	cmp	r4, r3
 80138c4:	d101      	bne.n	80138ca <_puts_r+0x6e>
 80138c6:	68ac      	ldr	r4, [r5, #8]
 80138c8:	e7da      	b.n	8013880 <_puts_r+0x24>
 80138ca:	4b1a      	ldr	r3, [pc, #104]	; (8013934 <_puts_r+0xd8>)
 80138cc:	429c      	cmp	r4, r3
 80138ce:	bf08      	it	eq
 80138d0:	68ec      	ldreq	r4, [r5, #12]
 80138d2:	e7d5      	b.n	8013880 <_puts_r+0x24>
 80138d4:	4621      	mov	r1, r4
 80138d6:	4628      	mov	r0, r5
 80138d8:	f000 f888 	bl	80139ec <__swsetup_r>
 80138dc:	2800      	cmp	r0, #0
 80138de:	d0dd      	beq.n	801389c <_puts_r+0x40>
 80138e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80138e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80138e6:	07da      	lsls	r2, r3, #31
 80138e8:	d405      	bmi.n	80138f6 <_puts_r+0x9a>
 80138ea:	89a3      	ldrh	r3, [r4, #12]
 80138ec:	059b      	lsls	r3, r3, #22
 80138ee:	d402      	bmi.n	80138f6 <_puts_r+0x9a>
 80138f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138f2:	f000 faa2 	bl	8013e3a <__retarget_lock_release_recursive>
 80138f6:	4628      	mov	r0, r5
 80138f8:	bd70      	pop	{r4, r5, r6, pc}
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	da04      	bge.n	8013908 <_puts_r+0xac>
 80138fe:	69a2      	ldr	r2, [r4, #24]
 8013900:	429a      	cmp	r2, r3
 8013902:	dc06      	bgt.n	8013912 <_puts_r+0xb6>
 8013904:	290a      	cmp	r1, #10
 8013906:	d004      	beq.n	8013912 <_puts_r+0xb6>
 8013908:	6823      	ldr	r3, [r4, #0]
 801390a:	1c5a      	adds	r2, r3, #1
 801390c:	6022      	str	r2, [r4, #0]
 801390e:	7019      	strb	r1, [r3, #0]
 8013910:	e7c5      	b.n	801389e <_puts_r+0x42>
 8013912:	4622      	mov	r2, r4
 8013914:	4628      	mov	r0, r5
 8013916:	f000 f817 	bl	8013948 <__swbuf_r>
 801391a:	3001      	adds	r0, #1
 801391c:	d1bf      	bne.n	801389e <_puts_r+0x42>
 801391e:	e7df      	b.n	80138e0 <_puts_r+0x84>
 8013920:	6823      	ldr	r3, [r4, #0]
 8013922:	250a      	movs	r5, #10
 8013924:	1c5a      	adds	r2, r3, #1
 8013926:	6022      	str	r2, [r4, #0]
 8013928:	701d      	strb	r5, [r3, #0]
 801392a:	e7db      	b.n	80138e4 <_puts_r+0x88>
 801392c:	080146c4 	.word	0x080146c4
 8013930:	080146e4 	.word	0x080146e4
 8013934:	080146a4 	.word	0x080146a4

08013938 <puts>:
 8013938:	4b02      	ldr	r3, [pc, #8]	; (8013944 <puts+0xc>)
 801393a:	4601      	mov	r1, r0
 801393c:	6818      	ldr	r0, [r3, #0]
 801393e:	f7ff bf8d 	b.w	801385c <_puts_r>
 8013942:	bf00      	nop
 8013944:	2400009c 	.word	0x2400009c

08013948 <__swbuf_r>:
 8013948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801394a:	460e      	mov	r6, r1
 801394c:	4614      	mov	r4, r2
 801394e:	4605      	mov	r5, r0
 8013950:	b118      	cbz	r0, 801395a <__swbuf_r+0x12>
 8013952:	6983      	ldr	r3, [r0, #24]
 8013954:	b90b      	cbnz	r3, 801395a <__swbuf_r+0x12>
 8013956:	f000 f9d1 	bl	8013cfc <__sinit>
 801395a:	4b21      	ldr	r3, [pc, #132]	; (80139e0 <__swbuf_r+0x98>)
 801395c:	429c      	cmp	r4, r3
 801395e:	d12b      	bne.n	80139b8 <__swbuf_r+0x70>
 8013960:	686c      	ldr	r4, [r5, #4]
 8013962:	69a3      	ldr	r3, [r4, #24]
 8013964:	60a3      	str	r3, [r4, #8]
 8013966:	89a3      	ldrh	r3, [r4, #12]
 8013968:	071a      	lsls	r2, r3, #28
 801396a:	d52f      	bpl.n	80139cc <__swbuf_r+0x84>
 801396c:	6923      	ldr	r3, [r4, #16]
 801396e:	b36b      	cbz	r3, 80139cc <__swbuf_r+0x84>
 8013970:	6923      	ldr	r3, [r4, #16]
 8013972:	6820      	ldr	r0, [r4, #0]
 8013974:	1ac0      	subs	r0, r0, r3
 8013976:	6963      	ldr	r3, [r4, #20]
 8013978:	b2f6      	uxtb	r6, r6
 801397a:	4283      	cmp	r3, r0
 801397c:	4637      	mov	r7, r6
 801397e:	dc04      	bgt.n	801398a <__swbuf_r+0x42>
 8013980:	4621      	mov	r1, r4
 8013982:	4628      	mov	r0, r5
 8013984:	f000 f926 	bl	8013bd4 <_fflush_r>
 8013988:	bb30      	cbnz	r0, 80139d8 <__swbuf_r+0x90>
 801398a:	68a3      	ldr	r3, [r4, #8]
 801398c:	3b01      	subs	r3, #1
 801398e:	60a3      	str	r3, [r4, #8]
 8013990:	6823      	ldr	r3, [r4, #0]
 8013992:	1c5a      	adds	r2, r3, #1
 8013994:	6022      	str	r2, [r4, #0]
 8013996:	701e      	strb	r6, [r3, #0]
 8013998:	6963      	ldr	r3, [r4, #20]
 801399a:	3001      	adds	r0, #1
 801399c:	4283      	cmp	r3, r0
 801399e:	d004      	beq.n	80139aa <__swbuf_r+0x62>
 80139a0:	89a3      	ldrh	r3, [r4, #12]
 80139a2:	07db      	lsls	r3, r3, #31
 80139a4:	d506      	bpl.n	80139b4 <__swbuf_r+0x6c>
 80139a6:	2e0a      	cmp	r6, #10
 80139a8:	d104      	bne.n	80139b4 <__swbuf_r+0x6c>
 80139aa:	4621      	mov	r1, r4
 80139ac:	4628      	mov	r0, r5
 80139ae:	f000 f911 	bl	8013bd4 <_fflush_r>
 80139b2:	b988      	cbnz	r0, 80139d8 <__swbuf_r+0x90>
 80139b4:	4638      	mov	r0, r7
 80139b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139b8:	4b0a      	ldr	r3, [pc, #40]	; (80139e4 <__swbuf_r+0x9c>)
 80139ba:	429c      	cmp	r4, r3
 80139bc:	d101      	bne.n	80139c2 <__swbuf_r+0x7a>
 80139be:	68ac      	ldr	r4, [r5, #8]
 80139c0:	e7cf      	b.n	8013962 <__swbuf_r+0x1a>
 80139c2:	4b09      	ldr	r3, [pc, #36]	; (80139e8 <__swbuf_r+0xa0>)
 80139c4:	429c      	cmp	r4, r3
 80139c6:	bf08      	it	eq
 80139c8:	68ec      	ldreq	r4, [r5, #12]
 80139ca:	e7ca      	b.n	8013962 <__swbuf_r+0x1a>
 80139cc:	4621      	mov	r1, r4
 80139ce:	4628      	mov	r0, r5
 80139d0:	f000 f80c 	bl	80139ec <__swsetup_r>
 80139d4:	2800      	cmp	r0, #0
 80139d6:	d0cb      	beq.n	8013970 <__swbuf_r+0x28>
 80139d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80139dc:	e7ea      	b.n	80139b4 <__swbuf_r+0x6c>
 80139de:	bf00      	nop
 80139e0:	080146c4 	.word	0x080146c4
 80139e4:	080146e4 	.word	0x080146e4
 80139e8:	080146a4 	.word	0x080146a4

080139ec <__swsetup_r>:
 80139ec:	4b32      	ldr	r3, [pc, #200]	; (8013ab8 <__swsetup_r+0xcc>)
 80139ee:	b570      	push	{r4, r5, r6, lr}
 80139f0:	681d      	ldr	r5, [r3, #0]
 80139f2:	4606      	mov	r6, r0
 80139f4:	460c      	mov	r4, r1
 80139f6:	b125      	cbz	r5, 8013a02 <__swsetup_r+0x16>
 80139f8:	69ab      	ldr	r3, [r5, #24]
 80139fa:	b913      	cbnz	r3, 8013a02 <__swsetup_r+0x16>
 80139fc:	4628      	mov	r0, r5
 80139fe:	f000 f97d 	bl	8013cfc <__sinit>
 8013a02:	4b2e      	ldr	r3, [pc, #184]	; (8013abc <__swsetup_r+0xd0>)
 8013a04:	429c      	cmp	r4, r3
 8013a06:	d10f      	bne.n	8013a28 <__swsetup_r+0x3c>
 8013a08:	686c      	ldr	r4, [r5, #4]
 8013a0a:	89a3      	ldrh	r3, [r4, #12]
 8013a0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a10:	0719      	lsls	r1, r3, #28
 8013a12:	d42c      	bmi.n	8013a6e <__swsetup_r+0x82>
 8013a14:	06dd      	lsls	r5, r3, #27
 8013a16:	d411      	bmi.n	8013a3c <__swsetup_r+0x50>
 8013a18:	2309      	movs	r3, #9
 8013a1a:	6033      	str	r3, [r6, #0]
 8013a1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013a20:	81a3      	strh	r3, [r4, #12]
 8013a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a26:	e03e      	b.n	8013aa6 <__swsetup_r+0xba>
 8013a28:	4b25      	ldr	r3, [pc, #148]	; (8013ac0 <__swsetup_r+0xd4>)
 8013a2a:	429c      	cmp	r4, r3
 8013a2c:	d101      	bne.n	8013a32 <__swsetup_r+0x46>
 8013a2e:	68ac      	ldr	r4, [r5, #8]
 8013a30:	e7eb      	b.n	8013a0a <__swsetup_r+0x1e>
 8013a32:	4b24      	ldr	r3, [pc, #144]	; (8013ac4 <__swsetup_r+0xd8>)
 8013a34:	429c      	cmp	r4, r3
 8013a36:	bf08      	it	eq
 8013a38:	68ec      	ldreq	r4, [r5, #12]
 8013a3a:	e7e6      	b.n	8013a0a <__swsetup_r+0x1e>
 8013a3c:	0758      	lsls	r0, r3, #29
 8013a3e:	d512      	bpl.n	8013a66 <__swsetup_r+0x7a>
 8013a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a42:	b141      	cbz	r1, 8013a56 <__swsetup_r+0x6a>
 8013a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a48:	4299      	cmp	r1, r3
 8013a4a:	d002      	beq.n	8013a52 <__swsetup_r+0x66>
 8013a4c:	4630      	mov	r0, r6
 8013a4e:	f000 fa5b 	bl	8013f08 <_free_r>
 8013a52:	2300      	movs	r3, #0
 8013a54:	6363      	str	r3, [r4, #52]	; 0x34
 8013a56:	89a3      	ldrh	r3, [r4, #12]
 8013a58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013a5c:	81a3      	strh	r3, [r4, #12]
 8013a5e:	2300      	movs	r3, #0
 8013a60:	6063      	str	r3, [r4, #4]
 8013a62:	6923      	ldr	r3, [r4, #16]
 8013a64:	6023      	str	r3, [r4, #0]
 8013a66:	89a3      	ldrh	r3, [r4, #12]
 8013a68:	f043 0308 	orr.w	r3, r3, #8
 8013a6c:	81a3      	strh	r3, [r4, #12]
 8013a6e:	6923      	ldr	r3, [r4, #16]
 8013a70:	b94b      	cbnz	r3, 8013a86 <__swsetup_r+0x9a>
 8013a72:	89a3      	ldrh	r3, [r4, #12]
 8013a74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a7c:	d003      	beq.n	8013a86 <__swsetup_r+0x9a>
 8013a7e:	4621      	mov	r1, r4
 8013a80:	4630      	mov	r0, r6
 8013a82:	f000 fa01 	bl	8013e88 <__smakebuf_r>
 8013a86:	89a0      	ldrh	r0, [r4, #12]
 8013a88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a8c:	f010 0301 	ands.w	r3, r0, #1
 8013a90:	d00a      	beq.n	8013aa8 <__swsetup_r+0xbc>
 8013a92:	2300      	movs	r3, #0
 8013a94:	60a3      	str	r3, [r4, #8]
 8013a96:	6963      	ldr	r3, [r4, #20]
 8013a98:	425b      	negs	r3, r3
 8013a9a:	61a3      	str	r3, [r4, #24]
 8013a9c:	6923      	ldr	r3, [r4, #16]
 8013a9e:	b943      	cbnz	r3, 8013ab2 <__swsetup_r+0xc6>
 8013aa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013aa4:	d1ba      	bne.n	8013a1c <__swsetup_r+0x30>
 8013aa6:	bd70      	pop	{r4, r5, r6, pc}
 8013aa8:	0781      	lsls	r1, r0, #30
 8013aaa:	bf58      	it	pl
 8013aac:	6963      	ldrpl	r3, [r4, #20]
 8013aae:	60a3      	str	r3, [r4, #8]
 8013ab0:	e7f4      	b.n	8013a9c <__swsetup_r+0xb0>
 8013ab2:	2000      	movs	r0, #0
 8013ab4:	e7f7      	b.n	8013aa6 <__swsetup_r+0xba>
 8013ab6:	bf00      	nop
 8013ab8:	2400009c 	.word	0x2400009c
 8013abc:	080146c4 	.word	0x080146c4
 8013ac0:	080146e4 	.word	0x080146e4
 8013ac4:	080146a4 	.word	0x080146a4

08013ac8 <__sflush_r>:
 8013ac8:	898a      	ldrh	r2, [r1, #12]
 8013aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ace:	4605      	mov	r5, r0
 8013ad0:	0710      	lsls	r0, r2, #28
 8013ad2:	460c      	mov	r4, r1
 8013ad4:	d458      	bmi.n	8013b88 <__sflush_r+0xc0>
 8013ad6:	684b      	ldr	r3, [r1, #4]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	dc05      	bgt.n	8013ae8 <__sflush_r+0x20>
 8013adc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	dc02      	bgt.n	8013ae8 <__sflush_r+0x20>
 8013ae2:	2000      	movs	r0, #0
 8013ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013aea:	2e00      	cmp	r6, #0
 8013aec:	d0f9      	beq.n	8013ae2 <__sflush_r+0x1a>
 8013aee:	2300      	movs	r3, #0
 8013af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013af4:	682f      	ldr	r7, [r5, #0]
 8013af6:	602b      	str	r3, [r5, #0]
 8013af8:	d032      	beq.n	8013b60 <__sflush_r+0x98>
 8013afa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013afc:	89a3      	ldrh	r3, [r4, #12]
 8013afe:	075a      	lsls	r2, r3, #29
 8013b00:	d505      	bpl.n	8013b0e <__sflush_r+0x46>
 8013b02:	6863      	ldr	r3, [r4, #4]
 8013b04:	1ac0      	subs	r0, r0, r3
 8013b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b08:	b10b      	cbz	r3, 8013b0e <__sflush_r+0x46>
 8013b0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b0c:	1ac0      	subs	r0, r0, r3
 8013b0e:	2300      	movs	r3, #0
 8013b10:	4602      	mov	r2, r0
 8013b12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b14:	6a21      	ldr	r1, [r4, #32]
 8013b16:	4628      	mov	r0, r5
 8013b18:	47b0      	blx	r6
 8013b1a:	1c43      	adds	r3, r0, #1
 8013b1c:	89a3      	ldrh	r3, [r4, #12]
 8013b1e:	d106      	bne.n	8013b2e <__sflush_r+0x66>
 8013b20:	6829      	ldr	r1, [r5, #0]
 8013b22:	291d      	cmp	r1, #29
 8013b24:	d82c      	bhi.n	8013b80 <__sflush_r+0xb8>
 8013b26:	4a2a      	ldr	r2, [pc, #168]	; (8013bd0 <__sflush_r+0x108>)
 8013b28:	40ca      	lsrs	r2, r1
 8013b2a:	07d6      	lsls	r6, r2, #31
 8013b2c:	d528      	bpl.n	8013b80 <__sflush_r+0xb8>
 8013b2e:	2200      	movs	r2, #0
 8013b30:	6062      	str	r2, [r4, #4]
 8013b32:	04d9      	lsls	r1, r3, #19
 8013b34:	6922      	ldr	r2, [r4, #16]
 8013b36:	6022      	str	r2, [r4, #0]
 8013b38:	d504      	bpl.n	8013b44 <__sflush_r+0x7c>
 8013b3a:	1c42      	adds	r2, r0, #1
 8013b3c:	d101      	bne.n	8013b42 <__sflush_r+0x7a>
 8013b3e:	682b      	ldr	r3, [r5, #0]
 8013b40:	b903      	cbnz	r3, 8013b44 <__sflush_r+0x7c>
 8013b42:	6560      	str	r0, [r4, #84]	; 0x54
 8013b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b46:	602f      	str	r7, [r5, #0]
 8013b48:	2900      	cmp	r1, #0
 8013b4a:	d0ca      	beq.n	8013ae2 <__sflush_r+0x1a>
 8013b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b50:	4299      	cmp	r1, r3
 8013b52:	d002      	beq.n	8013b5a <__sflush_r+0x92>
 8013b54:	4628      	mov	r0, r5
 8013b56:	f000 f9d7 	bl	8013f08 <_free_r>
 8013b5a:	2000      	movs	r0, #0
 8013b5c:	6360      	str	r0, [r4, #52]	; 0x34
 8013b5e:	e7c1      	b.n	8013ae4 <__sflush_r+0x1c>
 8013b60:	6a21      	ldr	r1, [r4, #32]
 8013b62:	2301      	movs	r3, #1
 8013b64:	4628      	mov	r0, r5
 8013b66:	47b0      	blx	r6
 8013b68:	1c41      	adds	r1, r0, #1
 8013b6a:	d1c7      	bne.n	8013afc <__sflush_r+0x34>
 8013b6c:	682b      	ldr	r3, [r5, #0]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d0c4      	beq.n	8013afc <__sflush_r+0x34>
 8013b72:	2b1d      	cmp	r3, #29
 8013b74:	d001      	beq.n	8013b7a <__sflush_r+0xb2>
 8013b76:	2b16      	cmp	r3, #22
 8013b78:	d101      	bne.n	8013b7e <__sflush_r+0xb6>
 8013b7a:	602f      	str	r7, [r5, #0]
 8013b7c:	e7b1      	b.n	8013ae2 <__sflush_r+0x1a>
 8013b7e:	89a3      	ldrh	r3, [r4, #12]
 8013b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b84:	81a3      	strh	r3, [r4, #12]
 8013b86:	e7ad      	b.n	8013ae4 <__sflush_r+0x1c>
 8013b88:	690f      	ldr	r7, [r1, #16]
 8013b8a:	2f00      	cmp	r7, #0
 8013b8c:	d0a9      	beq.n	8013ae2 <__sflush_r+0x1a>
 8013b8e:	0793      	lsls	r3, r2, #30
 8013b90:	680e      	ldr	r6, [r1, #0]
 8013b92:	bf08      	it	eq
 8013b94:	694b      	ldreq	r3, [r1, #20]
 8013b96:	600f      	str	r7, [r1, #0]
 8013b98:	bf18      	it	ne
 8013b9a:	2300      	movne	r3, #0
 8013b9c:	eba6 0807 	sub.w	r8, r6, r7
 8013ba0:	608b      	str	r3, [r1, #8]
 8013ba2:	f1b8 0f00 	cmp.w	r8, #0
 8013ba6:	dd9c      	ble.n	8013ae2 <__sflush_r+0x1a>
 8013ba8:	6a21      	ldr	r1, [r4, #32]
 8013baa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013bac:	4643      	mov	r3, r8
 8013bae:	463a      	mov	r2, r7
 8013bb0:	4628      	mov	r0, r5
 8013bb2:	47b0      	blx	r6
 8013bb4:	2800      	cmp	r0, #0
 8013bb6:	dc06      	bgt.n	8013bc6 <__sflush_r+0xfe>
 8013bb8:	89a3      	ldrh	r3, [r4, #12]
 8013bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bbe:	81a3      	strh	r3, [r4, #12]
 8013bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bc4:	e78e      	b.n	8013ae4 <__sflush_r+0x1c>
 8013bc6:	4407      	add	r7, r0
 8013bc8:	eba8 0800 	sub.w	r8, r8, r0
 8013bcc:	e7e9      	b.n	8013ba2 <__sflush_r+0xda>
 8013bce:	bf00      	nop
 8013bd0:	20400001 	.word	0x20400001

08013bd4 <_fflush_r>:
 8013bd4:	b538      	push	{r3, r4, r5, lr}
 8013bd6:	690b      	ldr	r3, [r1, #16]
 8013bd8:	4605      	mov	r5, r0
 8013bda:	460c      	mov	r4, r1
 8013bdc:	b913      	cbnz	r3, 8013be4 <_fflush_r+0x10>
 8013bde:	2500      	movs	r5, #0
 8013be0:	4628      	mov	r0, r5
 8013be2:	bd38      	pop	{r3, r4, r5, pc}
 8013be4:	b118      	cbz	r0, 8013bee <_fflush_r+0x1a>
 8013be6:	6983      	ldr	r3, [r0, #24]
 8013be8:	b90b      	cbnz	r3, 8013bee <_fflush_r+0x1a>
 8013bea:	f000 f887 	bl	8013cfc <__sinit>
 8013bee:	4b14      	ldr	r3, [pc, #80]	; (8013c40 <_fflush_r+0x6c>)
 8013bf0:	429c      	cmp	r4, r3
 8013bf2:	d11b      	bne.n	8013c2c <_fflush_r+0x58>
 8013bf4:	686c      	ldr	r4, [r5, #4]
 8013bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d0ef      	beq.n	8013bde <_fflush_r+0xa>
 8013bfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013c00:	07d0      	lsls	r0, r2, #31
 8013c02:	d404      	bmi.n	8013c0e <_fflush_r+0x3a>
 8013c04:	0599      	lsls	r1, r3, #22
 8013c06:	d402      	bmi.n	8013c0e <_fflush_r+0x3a>
 8013c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c0a:	f000 f915 	bl	8013e38 <__retarget_lock_acquire_recursive>
 8013c0e:	4628      	mov	r0, r5
 8013c10:	4621      	mov	r1, r4
 8013c12:	f7ff ff59 	bl	8013ac8 <__sflush_r>
 8013c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c18:	07da      	lsls	r2, r3, #31
 8013c1a:	4605      	mov	r5, r0
 8013c1c:	d4e0      	bmi.n	8013be0 <_fflush_r+0xc>
 8013c1e:	89a3      	ldrh	r3, [r4, #12]
 8013c20:	059b      	lsls	r3, r3, #22
 8013c22:	d4dd      	bmi.n	8013be0 <_fflush_r+0xc>
 8013c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c26:	f000 f908 	bl	8013e3a <__retarget_lock_release_recursive>
 8013c2a:	e7d9      	b.n	8013be0 <_fflush_r+0xc>
 8013c2c:	4b05      	ldr	r3, [pc, #20]	; (8013c44 <_fflush_r+0x70>)
 8013c2e:	429c      	cmp	r4, r3
 8013c30:	d101      	bne.n	8013c36 <_fflush_r+0x62>
 8013c32:	68ac      	ldr	r4, [r5, #8]
 8013c34:	e7df      	b.n	8013bf6 <_fflush_r+0x22>
 8013c36:	4b04      	ldr	r3, [pc, #16]	; (8013c48 <_fflush_r+0x74>)
 8013c38:	429c      	cmp	r4, r3
 8013c3a:	bf08      	it	eq
 8013c3c:	68ec      	ldreq	r4, [r5, #12]
 8013c3e:	e7da      	b.n	8013bf6 <_fflush_r+0x22>
 8013c40:	080146c4 	.word	0x080146c4
 8013c44:	080146e4 	.word	0x080146e4
 8013c48:	080146a4 	.word	0x080146a4

08013c4c <std>:
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	b510      	push	{r4, lr}
 8013c50:	4604      	mov	r4, r0
 8013c52:	e9c0 3300 	strd	r3, r3, [r0]
 8013c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c5a:	6083      	str	r3, [r0, #8]
 8013c5c:	8181      	strh	r1, [r0, #12]
 8013c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8013c60:	81c2      	strh	r2, [r0, #14]
 8013c62:	6183      	str	r3, [r0, #24]
 8013c64:	4619      	mov	r1, r3
 8013c66:	2208      	movs	r2, #8
 8013c68:	305c      	adds	r0, #92	; 0x5c
 8013c6a:	f7ff fdef 	bl	801384c <memset>
 8013c6e:	4b05      	ldr	r3, [pc, #20]	; (8013c84 <std+0x38>)
 8013c70:	6263      	str	r3, [r4, #36]	; 0x24
 8013c72:	4b05      	ldr	r3, [pc, #20]	; (8013c88 <std+0x3c>)
 8013c74:	62a3      	str	r3, [r4, #40]	; 0x28
 8013c76:	4b05      	ldr	r3, [pc, #20]	; (8013c8c <std+0x40>)
 8013c78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013c7a:	4b05      	ldr	r3, [pc, #20]	; (8013c90 <std+0x44>)
 8013c7c:	6224      	str	r4, [r4, #32]
 8013c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8013c80:	bd10      	pop	{r4, pc}
 8013c82:	bf00      	nop
 8013c84:	080140e9 	.word	0x080140e9
 8013c88:	0801410b 	.word	0x0801410b
 8013c8c:	08014143 	.word	0x08014143
 8013c90:	08014167 	.word	0x08014167

08013c94 <_cleanup_r>:
 8013c94:	4901      	ldr	r1, [pc, #4]	; (8013c9c <_cleanup_r+0x8>)
 8013c96:	f000 b8af 	b.w	8013df8 <_fwalk_reent>
 8013c9a:	bf00      	nop
 8013c9c:	08013bd5 	.word	0x08013bd5

08013ca0 <__sfmoreglue>:
 8013ca0:	b570      	push	{r4, r5, r6, lr}
 8013ca2:	2268      	movs	r2, #104	; 0x68
 8013ca4:	1e4d      	subs	r5, r1, #1
 8013ca6:	4355      	muls	r5, r2
 8013ca8:	460e      	mov	r6, r1
 8013caa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013cae:	f000 f997 	bl	8013fe0 <_malloc_r>
 8013cb2:	4604      	mov	r4, r0
 8013cb4:	b140      	cbz	r0, 8013cc8 <__sfmoreglue+0x28>
 8013cb6:	2100      	movs	r1, #0
 8013cb8:	e9c0 1600 	strd	r1, r6, [r0]
 8013cbc:	300c      	adds	r0, #12
 8013cbe:	60a0      	str	r0, [r4, #8]
 8013cc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013cc4:	f7ff fdc2 	bl	801384c <memset>
 8013cc8:	4620      	mov	r0, r4
 8013cca:	bd70      	pop	{r4, r5, r6, pc}

08013ccc <__sfp_lock_acquire>:
 8013ccc:	4801      	ldr	r0, [pc, #4]	; (8013cd4 <__sfp_lock_acquire+0x8>)
 8013cce:	f000 b8b3 	b.w	8013e38 <__retarget_lock_acquire_recursive>
 8013cd2:	bf00      	nop
 8013cd4:	240051e1 	.word	0x240051e1

08013cd8 <__sfp_lock_release>:
 8013cd8:	4801      	ldr	r0, [pc, #4]	; (8013ce0 <__sfp_lock_release+0x8>)
 8013cda:	f000 b8ae 	b.w	8013e3a <__retarget_lock_release_recursive>
 8013cde:	bf00      	nop
 8013ce0:	240051e1 	.word	0x240051e1

08013ce4 <__sinit_lock_acquire>:
 8013ce4:	4801      	ldr	r0, [pc, #4]	; (8013cec <__sinit_lock_acquire+0x8>)
 8013ce6:	f000 b8a7 	b.w	8013e38 <__retarget_lock_acquire_recursive>
 8013cea:	bf00      	nop
 8013cec:	240051e2 	.word	0x240051e2

08013cf0 <__sinit_lock_release>:
 8013cf0:	4801      	ldr	r0, [pc, #4]	; (8013cf8 <__sinit_lock_release+0x8>)
 8013cf2:	f000 b8a2 	b.w	8013e3a <__retarget_lock_release_recursive>
 8013cf6:	bf00      	nop
 8013cf8:	240051e2 	.word	0x240051e2

08013cfc <__sinit>:
 8013cfc:	b510      	push	{r4, lr}
 8013cfe:	4604      	mov	r4, r0
 8013d00:	f7ff fff0 	bl	8013ce4 <__sinit_lock_acquire>
 8013d04:	69a3      	ldr	r3, [r4, #24]
 8013d06:	b11b      	cbz	r3, 8013d10 <__sinit+0x14>
 8013d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d0c:	f7ff bff0 	b.w	8013cf0 <__sinit_lock_release>
 8013d10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013d14:	6523      	str	r3, [r4, #80]	; 0x50
 8013d16:	4b13      	ldr	r3, [pc, #76]	; (8013d64 <__sinit+0x68>)
 8013d18:	4a13      	ldr	r2, [pc, #76]	; (8013d68 <__sinit+0x6c>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8013d1e:	42a3      	cmp	r3, r4
 8013d20:	bf04      	itt	eq
 8013d22:	2301      	moveq	r3, #1
 8013d24:	61a3      	streq	r3, [r4, #24]
 8013d26:	4620      	mov	r0, r4
 8013d28:	f000 f820 	bl	8013d6c <__sfp>
 8013d2c:	6060      	str	r0, [r4, #4]
 8013d2e:	4620      	mov	r0, r4
 8013d30:	f000 f81c 	bl	8013d6c <__sfp>
 8013d34:	60a0      	str	r0, [r4, #8]
 8013d36:	4620      	mov	r0, r4
 8013d38:	f000 f818 	bl	8013d6c <__sfp>
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	60e0      	str	r0, [r4, #12]
 8013d40:	2104      	movs	r1, #4
 8013d42:	6860      	ldr	r0, [r4, #4]
 8013d44:	f7ff ff82 	bl	8013c4c <std>
 8013d48:	68a0      	ldr	r0, [r4, #8]
 8013d4a:	2201      	movs	r2, #1
 8013d4c:	2109      	movs	r1, #9
 8013d4e:	f7ff ff7d 	bl	8013c4c <std>
 8013d52:	68e0      	ldr	r0, [r4, #12]
 8013d54:	2202      	movs	r2, #2
 8013d56:	2112      	movs	r1, #18
 8013d58:	f7ff ff78 	bl	8013c4c <std>
 8013d5c:	2301      	movs	r3, #1
 8013d5e:	61a3      	str	r3, [r4, #24]
 8013d60:	e7d2      	b.n	8013d08 <__sinit+0xc>
 8013d62:	bf00      	nop
 8013d64:	080146a0 	.word	0x080146a0
 8013d68:	08013c95 	.word	0x08013c95

08013d6c <__sfp>:
 8013d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d6e:	4607      	mov	r7, r0
 8013d70:	f7ff ffac 	bl	8013ccc <__sfp_lock_acquire>
 8013d74:	4b1e      	ldr	r3, [pc, #120]	; (8013df0 <__sfp+0x84>)
 8013d76:	681e      	ldr	r6, [r3, #0]
 8013d78:	69b3      	ldr	r3, [r6, #24]
 8013d7a:	b913      	cbnz	r3, 8013d82 <__sfp+0x16>
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	f7ff ffbd 	bl	8013cfc <__sinit>
 8013d82:	3648      	adds	r6, #72	; 0x48
 8013d84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013d88:	3b01      	subs	r3, #1
 8013d8a:	d503      	bpl.n	8013d94 <__sfp+0x28>
 8013d8c:	6833      	ldr	r3, [r6, #0]
 8013d8e:	b30b      	cbz	r3, 8013dd4 <__sfp+0x68>
 8013d90:	6836      	ldr	r6, [r6, #0]
 8013d92:	e7f7      	b.n	8013d84 <__sfp+0x18>
 8013d94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013d98:	b9d5      	cbnz	r5, 8013dd0 <__sfp+0x64>
 8013d9a:	4b16      	ldr	r3, [pc, #88]	; (8013df4 <__sfp+0x88>)
 8013d9c:	60e3      	str	r3, [r4, #12]
 8013d9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013da2:	6665      	str	r5, [r4, #100]	; 0x64
 8013da4:	f000 f847 	bl	8013e36 <__retarget_lock_init_recursive>
 8013da8:	f7ff ff96 	bl	8013cd8 <__sfp_lock_release>
 8013dac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013db0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013db4:	6025      	str	r5, [r4, #0]
 8013db6:	61a5      	str	r5, [r4, #24]
 8013db8:	2208      	movs	r2, #8
 8013dba:	4629      	mov	r1, r5
 8013dbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013dc0:	f7ff fd44 	bl	801384c <memset>
 8013dc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013dc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013dcc:	4620      	mov	r0, r4
 8013dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dd0:	3468      	adds	r4, #104	; 0x68
 8013dd2:	e7d9      	b.n	8013d88 <__sfp+0x1c>
 8013dd4:	2104      	movs	r1, #4
 8013dd6:	4638      	mov	r0, r7
 8013dd8:	f7ff ff62 	bl	8013ca0 <__sfmoreglue>
 8013ddc:	4604      	mov	r4, r0
 8013dde:	6030      	str	r0, [r6, #0]
 8013de0:	2800      	cmp	r0, #0
 8013de2:	d1d5      	bne.n	8013d90 <__sfp+0x24>
 8013de4:	f7ff ff78 	bl	8013cd8 <__sfp_lock_release>
 8013de8:	230c      	movs	r3, #12
 8013dea:	603b      	str	r3, [r7, #0]
 8013dec:	e7ee      	b.n	8013dcc <__sfp+0x60>
 8013dee:	bf00      	nop
 8013df0:	080146a0 	.word	0x080146a0
 8013df4:	ffff0001 	.word	0xffff0001

08013df8 <_fwalk_reent>:
 8013df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013dfc:	4606      	mov	r6, r0
 8013dfe:	4688      	mov	r8, r1
 8013e00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013e04:	2700      	movs	r7, #0
 8013e06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e0a:	f1b9 0901 	subs.w	r9, r9, #1
 8013e0e:	d505      	bpl.n	8013e1c <_fwalk_reent+0x24>
 8013e10:	6824      	ldr	r4, [r4, #0]
 8013e12:	2c00      	cmp	r4, #0
 8013e14:	d1f7      	bne.n	8013e06 <_fwalk_reent+0xe>
 8013e16:	4638      	mov	r0, r7
 8013e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e1c:	89ab      	ldrh	r3, [r5, #12]
 8013e1e:	2b01      	cmp	r3, #1
 8013e20:	d907      	bls.n	8013e32 <_fwalk_reent+0x3a>
 8013e22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e26:	3301      	adds	r3, #1
 8013e28:	d003      	beq.n	8013e32 <_fwalk_reent+0x3a>
 8013e2a:	4629      	mov	r1, r5
 8013e2c:	4630      	mov	r0, r6
 8013e2e:	47c0      	blx	r8
 8013e30:	4307      	orrs	r7, r0
 8013e32:	3568      	adds	r5, #104	; 0x68
 8013e34:	e7e9      	b.n	8013e0a <_fwalk_reent+0x12>

08013e36 <__retarget_lock_init_recursive>:
 8013e36:	4770      	bx	lr

08013e38 <__retarget_lock_acquire_recursive>:
 8013e38:	4770      	bx	lr

08013e3a <__retarget_lock_release_recursive>:
 8013e3a:	4770      	bx	lr

08013e3c <__swhatbuf_r>:
 8013e3c:	b570      	push	{r4, r5, r6, lr}
 8013e3e:	460e      	mov	r6, r1
 8013e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e44:	2900      	cmp	r1, #0
 8013e46:	b096      	sub	sp, #88	; 0x58
 8013e48:	4614      	mov	r4, r2
 8013e4a:	461d      	mov	r5, r3
 8013e4c:	da08      	bge.n	8013e60 <__swhatbuf_r+0x24>
 8013e4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013e52:	2200      	movs	r2, #0
 8013e54:	602a      	str	r2, [r5, #0]
 8013e56:	061a      	lsls	r2, r3, #24
 8013e58:	d410      	bmi.n	8013e7c <__swhatbuf_r+0x40>
 8013e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e5e:	e00e      	b.n	8013e7e <__swhatbuf_r+0x42>
 8013e60:	466a      	mov	r2, sp
 8013e62:	f000 f9a7 	bl	80141b4 <_fstat_r>
 8013e66:	2800      	cmp	r0, #0
 8013e68:	dbf1      	blt.n	8013e4e <__swhatbuf_r+0x12>
 8013e6a:	9a01      	ldr	r2, [sp, #4]
 8013e6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013e70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013e74:	425a      	negs	r2, r3
 8013e76:	415a      	adcs	r2, r3
 8013e78:	602a      	str	r2, [r5, #0]
 8013e7a:	e7ee      	b.n	8013e5a <__swhatbuf_r+0x1e>
 8013e7c:	2340      	movs	r3, #64	; 0x40
 8013e7e:	2000      	movs	r0, #0
 8013e80:	6023      	str	r3, [r4, #0]
 8013e82:	b016      	add	sp, #88	; 0x58
 8013e84:	bd70      	pop	{r4, r5, r6, pc}
	...

08013e88 <__smakebuf_r>:
 8013e88:	898b      	ldrh	r3, [r1, #12]
 8013e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013e8c:	079d      	lsls	r5, r3, #30
 8013e8e:	4606      	mov	r6, r0
 8013e90:	460c      	mov	r4, r1
 8013e92:	d507      	bpl.n	8013ea4 <__smakebuf_r+0x1c>
 8013e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013e98:	6023      	str	r3, [r4, #0]
 8013e9a:	6123      	str	r3, [r4, #16]
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	6163      	str	r3, [r4, #20]
 8013ea0:	b002      	add	sp, #8
 8013ea2:	bd70      	pop	{r4, r5, r6, pc}
 8013ea4:	ab01      	add	r3, sp, #4
 8013ea6:	466a      	mov	r2, sp
 8013ea8:	f7ff ffc8 	bl	8013e3c <__swhatbuf_r>
 8013eac:	9900      	ldr	r1, [sp, #0]
 8013eae:	4605      	mov	r5, r0
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	f000 f895 	bl	8013fe0 <_malloc_r>
 8013eb6:	b948      	cbnz	r0, 8013ecc <__smakebuf_r+0x44>
 8013eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ebc:	059a      	lsls	r2, r3, #22
 8013ebe:	d4ef      	bmi.n	8013ea0 <__smakebuf_r+0x18>
 8013ec0:	f023 0303 	bic.w	r3, r3, #3
 8013ec4:	f043 0302 	orr.w	r3, r3, #2
 8013ec8:	81a3      	strh	r3, [r4, #12]
 8013eca:	e7e3      	b.n	8013e94 <__smakebuf_r+0xc>
 8013ecc:	4b0d      	ldr	r3, [pc, #52]	; (8013f04 <__smakebuf_r+0x7c>)
 8013ece:	62b3      	str	r3, [r6, #40]	; 0x28
 8013ed0:	89a3      	ldrh	r3, [r4, #12]
 8013ed2:	6020      	str	r0, [r4, #0]
 8013ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ed8:	81a3      	strh	r3, [r4, #12]
 8013eda:	9b00      	ldr	r3, [sp, #0]
 8013edc:	6163      	str	r3, [r4, #20]
 8013ede:	9b01      	ldr	r3, [sp, #4]
 8013ee0:	6120      	str	r0, [r4, #16]
 8013ee2:	b15b      	cbz	r3, 8013efc <__smakebuf_r+0x74>
 8013ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ee8:	4630      	mov	r0, r6
 8013eea:	f000 f975 	bl	80141d8 <_isatty_r>
 8013eee:	b128      	cbz	r0, 8013efc <__smakebuf_r+0x74>
 8013ef0:	89a3      	ldrh	r3, [r4, #12]
 8013ef2:	f023 0303 	bic.w	r3, r3, #3
 8013ef6:	f043 0301 	orr.w	r3, r3, #1
 8013efa:	81a3      	strh	r3, [r4, #12]
 8013efc:	89a0      	ldrh	r0, [r4, #12]
 8013efe:	4305      	orrs	r5, r0
 8013f00:	81a5      	strh	r5, [r4, #12]
 8013f02:	e7cd      	b.n	8013ea0 <__smakebuf_r+0x18>
 8013f04:	08013c95 	.word	0x08013c95

08013f08 <_free_r>:
 8013f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f0a:	2900      	cmp	r1, #0
 8013f0c:	d044      	beq.n	8013f98 <_free_r+0x90>
 8013f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f12:	9001      	str	r0, [sp, #4]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	f1a1 0404 	sub.w	r4, r1, #4
 8013f1a:	bfb8      	it	lt
 8013f1c:	18e4      	addlt	r4, r4, r3
 8013f1e:	f000 f97d 	bl	801421c <__malloc_lock>
 8013f22:	4a1e      	ldr	r2, [pc, #120]	; (8013f9c <_free_r+0x94>)
 8013f24:	9801      	ldr	r0, [sp, #4]
 8013f26:	6813      	ldr	r3, [r2, #0]
 8013f28:	b933      	cbnz	r3, 8013f38 <_free_r+0x30>
 8013f2a:	6063      	str	r3, [r4, #4]
 8013f2c:	6014      	str	r4, [r2, #0]
 8013f2e:	b003      	add	sp, #12
 8013f30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f34:	f000 b978 	b.w	8014228 <__malloc_unlock>
 8013f38:	42a3      	cmp	r3, r4
 8013f3a:	d908      	bls.n	8013f4e <_free_r+0x46>
 8013f3c:	6825      	ldr	r5, [r4, #0]
 8013f3e:	1961      	adds	r1, r4, r5
 8013f40:	428b      	cmp	r3, r1
 8013f42:	bf01      	itttt	eq
 8013f44:	6819      	ldreq	r1, [r3, #0]
 8013f46:	685b      	ldreq	r3, [r3, #4]
 8013f48:	1949      	addeq	r1, r1, r5
 8013f4a:	6021      	streq	r1, [r4, #0]
 8013f4c:	e7ed      	b.n	8013f2a <_free_r+0x22>
 8013f4e:	461a      	mov	r2, r3
 8013f50:	685b      	ldr	r3, [r3, #4]
 8013f52:	b10b      	cbz	r3, 8013f58 <_free_r+0x50>
 8013f54:	42a3      	cmp	r3, r4
 8013f56:	d9fa      	bls.n	8013f4e <_free_r+0x46>
 8013f58:	6811      	ldr	r1, [r2, #0]
 8013f5a:	1855      	adds	r5, r2, r1
 8013f5c:	42a5      	cmp	r5, r4
 8013f5e:	d10b      	bne.n	8013f78 <_free_r+0x70>
 8013f60:	6824      	ldr	r4, [r4, #0]
 8013f62:	4421      	add	r1, r4
 8013f64:	1854      	adds	r4, r2, r1
 8013f66:	42a3      	cmp	r3, r4
 8013f68:	6011      	str	r1, [r2, #0]
 8013f6a:	d1e0      	bne.n	8013f2e <_free_r+0x26>
 8013f6c:	681c      	ldr	r4, [r3, #0]
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	6053      	str	r3, [r2, #4]
 8013f72:	4421      	add	r1, r4
 8013f74:	6011      	str	r1, [r2, #0]
 8013f76:	e7da      	b.n	8013f2e <_free_r+0x26>
 8013f78:	d902      	bls.n	8013f80 <_free_r+0x78>
 8013f7a:	230c      	movs	r3, #12
 8013f7c:	6003      	str	r3, [r0, #0]
 8013f7e:	e7d6      	b.n	8013f2e <_free_r+0x26>
 8013f80:	6825      	ldr	r5, [r4, #0]
 8013f82:	1961      	adds	r1, r4, r5
 8013f84:	428b      	cmp	r3, r1
 8013f86:	bf04      	itt	eq
 8013f88:	6819      	ldreq	r1, [r3, #0]
 8013f8a:	685b      	ldreq	r3, [r3, #4]
 8013f8c:	6063      	str	r3, [r4, #4]
 8013f8e:	bf04      	itt	eq
 8013f90:	1949      	addeq	r1, r1, r5
 8013f92:	6021      	streq	r1, [r4, #0]
 8013f94:	6054      	str	r4, [r2, #4]
 8013f96:	e7ca      	b.n	8013f2e <_free_r+0x26>
 8013f98:	b003      	add	sp, #12
 8013f9a:	bd30      	pop	{r4, r5, pc}
 8013f9c:	240051e4 	.word	0x240051e4

08013fa0 <sbrk_aligned>:
 8013fa0:	b570      	push	{r4, r5, r6, lr}
 8013fa2:	4e0e      	ldr	r6, [pc, #56]	; (8013fdc <sbrk_aligned+0x3c>)
 8013fa4:	460c      	mov	r4, r1
 8013fa6:	6831      	ldr	r1, [r6, #0]
 8013fa8:	4605      	mov	r5, r0
 8013faa:	b911      	cbnz	r1, 8013fb2 <sbrk_aligned+0x12>
 8013fac:	f000 f88c 	bl	80140c8 <_sbrk_r>
 8013fb0:	6030      	str	r0, [r6, #0]
 8013fb2:	4621      	mov	r1, r4
 8013fb4:	4628      	mov	r0, r5
 8013fb6:	f000 f887 	bl	80140c8 <_sbrk_r>
 8013fba:	1c43      	adds	r3, r0, #1
 8013fbc:	d00a      	beq.n	8013fd4 <sbrk_aligned+0x34>
 8013fbe:	1cc4      	adds	r4, r0, #3
 8013fc0:	f024 0403 	bic.w	r4, r4, #3
 8013fc4:	42a0      	cmp	r0, r4
 8013fc6:	d007      	beq.n	8013fd8 <sbrk_aligned+0x38>
 8013fc8:	1a21      	subs	r1, r4, r0
 8013fca:	4628      	mov	r0, r5
 8013fcc:	f000 f87c 	bl	80140c8 <_sbrk_r>
 8013fd0:	3001      	adds	r0, #1
 8013fd2:	d101      	bne.n	8013fd8 <sbrk_aligned+0x38>
 8013fd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013fd8:	4620      	mov	r0, r4
 8013fda:	bd70      	pop	{r4, r5, r6, pc}
 8013fdc:	240051e8 	.word	0x240051e8

08013fe0 <_malloc_r>:
 8013fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fe4:	1ccd      	adds	r5, r1, #3
 8013fe6:	f025 0503 	bic.w	r5, r5, #3
 8013fea:	3508      	adds	r5, #8
 8013fec:	2d0c      	cmp	r5, #12
 8013fee:	bf38      	it	cc
 8013ff0:	250c      	movcc	r5, #12
 8013ff2:	2d00      	cmp	r5, #0
 8013ff4:	4607      	mov	r7, r0
 8013ff6:	db01      	blt.n	8013ffc <_malloc_r+0x1c>
 8013ff8:	42a9      	cmp	r1, r5
 8013ffa:	d905      	bls.n	8014008 <_malloc_r+0x28>
 8013ffc:	230c      	movs	r3, #12
 8013ffe:	603b      	str	r3, [r7, #0]
 8014000:	2600      	movs	r6, #0
 8014002:	4630      	mov	r0, r6
 8014004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014008:	4e2e      	ldr	r6, [pc, #184]	; (80140c4 <_malloc_r+0xe4>)
 801400a:	f000 f907 	bl	801421c <__malloc_lock>
 801400e:	6833      	ldr	r3, [r6, #0]
 8014010:	461c      	mov	r4, r3
 8014012:	bb34      	cbnz	r4, 8014062 <_malloc_r+0x82>
 8014014:	4629      	mov	r1, r5
 8014016:	4638      	mov	r0, r7
 8014018:	f7ff ffc2 	bl	8013fa0 <sbrk_aligned>
 801401c:	1c43      	adds	r3, r0, #1
 801401e:	4604      	mov	r4, r0
 8014020:	d14d      	bne.n	80140be <_malloc_r+0xde>
 8014022:	6834      	ldr	r4, [r6, #0]
 8014024:	4626      	mov	r6, r4
 8014026:	2e00      	cmp	r6, #0
 8014028:	d140      	bne.n	80140ac <_malloc_r+0xcc>
 801402a:	6823      	ldr	r3, [r4, #0]
 801402c:	4631      	mov	r1, r6
 801402e:	4638      	mov	r0, r7
 8014030:	eb04 0803 	add.w	r8, r4, r3
 8014034:	f000 f848 	bl	80140c8 <_sbrk_r>
 8014038:	4580      	cmp	r8, r0
 801403a:	d13a      	bne.n	80140b2 <_malloc_r+0xd2>
 801403c:	6821      	ldr	r1, [r4, #0]
 801403e:	3503      	adds	r5, #3
 8014040:	1a6d      	subs	r5, r5, r1
 8014042:	f025 0503 	bic.w	r5, r5, #3
 8014046:	3508      	adds	r5, #8
 8014048:	2d0c      	cmp	r5, #12
 801404a:	bf38      	it	cc
 801404c:	250c      	movcc	r5, #12
 801404e:	4629      	mov	r1, r5
 8014050:	4638      	mov	r0, r7
 8014052:	f7ff ffa5 	bl	8013fa0 <sbrk_aligned>
 8014056:	3001      	adds	r0, #1
 8014058:	d02b      	beq.n	80140b2 <_malloc_r+0xd2>
 801405a:	6823      	ldr	r3, [r4, #0]
 801405c:	442b      	add	r3, r5
 801405e:	6023      	str	r3, [r4, #0]
 8014060:	e00e      	b.n	8014080 <_malloc_r+0xa0>
 8014062:	6822      	ldr	r2, [r4, #0]
 8014064:	1b52      	subs	r2, r2, r5
 8014066:	d41e      	bmi.n	80140a6 <_malloc_r+0xc6>
 8014068:	2a0b      	cmp	r2, #11
 801406a:	d916      	bls.n	801409a <_malloc_r+0xba>
 801406c:	1961      	adds	r1, r4, r5
 801406e:	42a3      	cmp	r3, r4
 8014070:	6025      	str	r5, [r4, #0]
 8014072:	bf18      	it	ne
 8014074:	6059      	strne	r1, [r3, #4]
 8014076:	6863      	ldr	r3, [r4, #4]
 8014078:	bf08      	it	eq
 801407a:	6031      	streq	r1, [r6, #0]
 801407c:	5162      	str	r2, [r4, r5]
 801407e:	604b      	str	r3, [r1, #4]
 8014080:	4638      	mov	r0, r7
 8014082:	f104 060b 	add.w	r6, r4, #11
 8014086:	f000 f8cf 	bl	8014228 <__malloc_unlock>
 801408a:	f026 0607 	bic.w	r6, r6, #7
 801408e:	1d23      	adds	r3, r4, #4
 8014090:	1af2      	subs	r2, r6, r3
 8014092:	d0b6      	beq.n	8014002 <_malloc_r+0x22>
 8014094:	1b9b      	subs	r3, r3, r6
 8014096:	50a3      	str	r3, [r4, r2]
 8014098:	e7b3      	b.n	8014002 <_malloc_r+0x22>
 801409a:	6862      	ldr	r2, [r4, #4]
 801409c:	42a3      	cmp	r3, r4
 801409e:	bf0c      	ite	eq
 80140a0:	6032      	streq	r2, [r6, #0]
 80140a2:	605a      	strne	r2, [r3, #4]
 80140a4:	e7ec      	b.n	8014080 <_malloc_r+0xa0>
 80140a6:	4623      	mov	r3, r4
 80140a8:	6864      	ldr	r4, [r4, #4]
 80140aa:	e7b2      	b.n	8014012 <_malloc_r+0x32>
 80140ac:	4634      	mov	r4, r6
 80140ae:	6876      	ldr	r6, [r6, #4]
 80140b0:	e7b9      	b.n	8014026 <_malloc_r+0x46>
 80140b2:	230c      	movs	r3, #12
 80140b4:	603b      	str	r3, [r7, #0]
 80140b6:	4638      	mov	r0, r7
 80140b8:	f000 f8b6 	bl	8014228 <__malloc_unlock>
 80140bc:	e7a1      	b.n	8014002 <_malloc_r+0x22>
 80140be:	6025      	str	r5, [r4, #0]
 80140c0:	e7de      	b.n	8014080 <_malloc_r+0xa0>
 80140c2:	bf00      	nop
 80140c4:	240051e4 	.word	0x240051e4

080140c8 <_sbrk_r>:
 80140c8:	b538      	push	{r3, r4, r5, lr}
 80140ca:	4d06      	ldr	r5, [pc, #24]	; (80140e4 <_sbrk_r+0x1c>)
 80140cc:	2300      	movs	r3, #0
 80140ce:	4604      	mov	r4, r0
 80140d0:	4608      	mov	r0, r1
 80140d2:	602b      	str	r3, [r5, #0]
 80140d4:	f7ee f9a8 	bl	8002428 <_sbrk>
 80140d8:	1c43      	adds	r3, r0, #1
 80140da:	d102      	bne.n	80140e2 <_sbrk_r+0x1a>
 80140dc:	682b      	ldr	r3, [r5, #0]
 80140de:	b103      	cbz	r3, 80140e2 <_sbrk_r+0x1a>
 80140e0:	6023      	str	r3, [r4, #0]
 80140e2:	bd38      	pop	{r3, r4, r5, pc}
 80140e4:	240051ec 	.word	0x240051ec

080140e8 <__sread>:
 80140e8:	b510      	push	{r4, lr}
 80140ea:	460c      	mov	r4, r1
 80140ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140f0:	f000 f8a0 	bl	8014234 <_read_r>
 80140f4:	2800      	cmp	r0, #0
 80140f6:	bfab      	itete	ge
 80140f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80140fa:	89a3      	ldrhlt	r3, [r4, #12]
 80140fc:	181b      	addge	r3, r3, r0
 80140fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014102:	bfac      	ite	ge
 8014104:	6563      	strge	r3, [r4, #84]	; 0x54
 8014106:	81a3      	strhlt	r3, [r4, #12]
 8014108:	bd10      	pop	{r4, pc}

0801410a <__swrite>:
 801410a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801410e:	461f      	mov	r7, r3
 8014110:	898b      	ldrh	r3, [r1, #12]
 8014112:	05db      	lsls	r3, r3, #23
 8014114:	4605      	mov	r5, r0
 8014116:	460c      	mov	r4, r1
 8014118:	4616      	mov	r6, r2
 801411a:	d505      	bpl.n	8014128 <__swrite+0x1e>
 801411c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014120:	2302      	movs	r3, #2
 8014122:	2200      	movs	r2, #0
 8014124:	f000 f868 	bl	80141f8 <_lseek_r>
 8014128:	89a3      	ldrh	r3, [r4, #12]
 801412a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801412e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014132:	81a3      	strh	r3, [r4, #12]
 8014134:	4632      	mov	r2, r6
 8014136:	463b      	mov	r3, r7
 8014138:	4628      	mov	r0, r5
 801413a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801413e:	f000 b817 	b.w	8014170 <_write_r>

08014142 <__sseek>:
 8014142:	b510      	push	{r4, lr}
 8014144:	460c      	mov	r4, r1
 8014146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801414a:	f000 f855 	bl	80141f8 <_lseek_r>
 801414e:	1c43      	adds	r3, r0, #1
 8014150:	89a3      	ldrh	r3, [r4, #12]
 8014152:	bf15      	itete	ne
 8014154:	6560      	strne	r0, [r4, #84]	; 0x54
 8014156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801415a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801415e:	81a3      	strheq	r3, [r4, #12]
 8014160:	bf18      	it	ne
 8014162:	81a3      	strhne	r3, [r4, #12]
 8014164:	bd10      	pop	{r4, pc}

08014166 <__sclose>:
 8014166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801416a:	f000 b813 	b.w	8014194 <_close_r>
	...

08014170 <_write_r>:
 8014170:	b538      	push	{r3, r4, r5, lr}
 8014172:	4d07      	ldr	r5, [pc, #28]	; (8014190 <_write_r+0x20>)
 8014174:	4604      	mov	r4, r0
 8014176:	4608      	mov	r0, r1
 8014178:	4611      	mov	r1, r2
 801417a:	2200      	movs	r2, #0
 801417c:	602a      	str	r2, [r5, #0]
 801417e:	461a      	mov	r2, r3
 8014180:	f7ee f901 	bl	8002386 <_write>
 8014184:	1c43      	adds	r3, r0, #1
 8014186:	d102      	bne.n	801418e <_write_r+0x1e>
 8014188:	682b      	ldr	r3, [r5, #0]
 801418a:	b103      	cbz	r3, 801418e <_write_r+0x1e>
 801418c:	6023      	str	r3, [r4, #0]
 801418e:	bd38      	pop	{r3, r4, r5, pc}
 8014190:	240051ec 	.word	0x240051ec

08014194 <_close_r>:
 8014194:	b538      	push	{r3, r4, r5, lr}
 8014196:	4d06      	ldr	r5, [pc, #24]	; (80141b0 <_close_r+0x1c>)
 8014198:	2300      	movs	r3, #0
 801419a:	4604      	mov	r4, r0
 801419c:	4608      	mov	r0, r1
 801419e:	602b      	str	r3, [r5, #0]
 80141a0:	f7ee f90d 	bl	80023be <_close>
 80141a4:	1c43      	adds	r3, r0, #1
 80141a6:	d102      	bne.n	80141ae <_close_r+0x1a>
 80141a8:	682b      	ldr	r3, [r5, #0]
 80141aa:	b103      	cbz	r3, 80141ae <_close_r+0x1a>
 80141ac:	6023      	str	r3, [r4, #0]
 80141ae:	bd38      	pop	{r3, r4, r5, pc}
 80141b0:	240051ec 	.word	0x240051ec

080141b4 <_fstat_r>:
 80141b4:	b538      	push	{r3, r4, r5, lr}
 80141b6:	4d07      	ldr	r5, [pc, #28]	; (80141d4 <_fstat_r+0x20>)
 80141b8:	2300      	movs	r3, #0
 80141ba:	4604      	mov	r4, r0
 80141bc:	4608      	mov	r0, r1
 80141be:	4611      	mov	r1, r2
 80141c0:	602b      	str	r3, [r5, #0]
 80141c2:	f7ee f908 	bl	80023d6 <_fstat>
 80141c6:	1c43      	adds	r3, r0, #1
 80141c8:	d102      	bne.n	80141d0 <_fstat_r+0x1c>
 80141ca:	682b      	ldr	r3, [r5, #0]
 80141cc:	b103      	cbz	r3, 80141d0 <_fstat_r+0x1c>
 80141ce:	6023      	str	r3, [r4, #0]
 80141d0:	bd38      	pop	{r3, r4, r5, pc}
 80141d2:	bf00      	nop
 80141d4:	240051ec 	.word	0x240051ec

080141d8 <_isatty_r>:
 80141d8:	b538      	push	{r3, r4, r5, lr}
 80141da:	4d06      	ldr	r5, [pc, #24]	; (80141f4 <_isatty_r+0x1c>)
 80141dc:	2300      	movs	r3, #0
 80141de:	4604      	mov	r4, r0
 80141e0:	4608      	mov	r0, r1
 80141e2:	602b      	str	r3, [r5, #0]
 80141e4:	f7ee f907 	bl	80023f6 <_isatty>
 80141e8:	1c43      	adds	r3, r0, #1
 80141ea:	d102      	bne.n	80141f2 <_isatty_r+0x1a>
 80141ec:	682b      	ldr	r3, [r5, #0]
 80141ee:	b103      	cbz	r3, 80141f2 <_isatty_r+0x1a>
 80141f0:	6023      	str	r3, [r4, #0]
 80141f2:	bd38      	pop	{r3, r4, r5, pc}
 80141f4:	240051ec 	.word	0x240051ec

080141f8 <_lseek_r>:
 80141f8:	b538      	push	{r3, r4, r5, lr}
 80141fa:	4d07      	ldr	r5, [pc, #28]	; (8014218 <_lseek_r+0x20>)
 80141fc:	4604      	mov	r4, r0
 80141fe:	4608      	mov	r0, r1
 8014200:	4611      	mov	r1, r2
 8014202:	2200      	movs	r2, #0
 8014204:	602a      	str	r2, [r5, #0]
 8014206:	461a      	mov	r2, r3
 8014208:	f7ee f900 	bl	800240c <_lseek>
 801420c:	1c43      	adds	r3, r0, #1
 801420e:	d102      	bne.n	8014216 <_lseek_r+0x1e>
 8014210:	682b      	ldr	r3, [r5, #0]
 8014212:	b103      	cbz	r3, 8014216 <_lseek_r+0x1e>
 8014214:	6023      	str	r3, [r4, #0]
 8014216:	bd38      	pop	{r3, r4, r5, pc}
 8014218:	240051ec 	.word	0x240051ec

0801421c <__malloc_lock>:
 801421c:	4801      	ldr	r0, [pc, #4]	; (8014224 <__malloc_lock+0x8>)
 801421e:	f7ff be0b 	b.w	8013e38 <__retarget_lock_acquire_recursive>
 8014222:	bf00      	nop
 8014224:	240051e0 	.word	0x240051e0

08014228 <__malloc_unlock>:
 8014228:	4801      	ldr	r0, [pc, #4]	; (8014230 <__malloc_unlock+0x8>)
 801422a:	f7ff be06 	b.w	8013e3a <__retarget_lock_release_recursive>
 801422e:	bf00      	nop
 8014230:	240051e0 	.word	0x240051e0

08014234 <_read_r>:
 8014234:	b538      	push	{r3, r4, r5, lr}
 8014236:	4d07      	ldr	r5, [pc, #28]	; (8014254 <_read_r+0x20>)
 8014238:	4604      	mov	r4, r0
 801423a:	4608      	mov	r0, r1
 801423c:	4611      	mov	r1, r2
 801423e:	2200      	movs	r2, #0
 8014240:	602a      	str	r2, [r5, #0]
 8014242:	461a      	mov	r2, r3
 8014244:	f7ee f882 	bl	800234c <_read>
 8014248:	1c43      	adds	r3, r0, #1
 801424a:	d102      	bne.n	8014252 <_read_r+0x1e>
 801424c:	682b      	ldr	r3, [r5, #0]
 801424e:	b103      	cbz	r3, 8014252 <_read_r+0x1e>
 8014250:	6023      	str	r3, [r4, #0]
 8014252:	bd38      	pop	{r3, r4, r5, pc}
 8014254:	240051ec 	.word	0x240051ec

08014258 <_init>:
 8014258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801425a:	bf00      	nop
 801425c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801425e:	bc08      	pop	{r3}
 8014260:	469e      	mov	lr, r3
 8014262:	4770      	bx	lr

08014264 <_fini>:
 8014264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014266:	bf00      	nop
 8014268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801426a:	bc08      	pop	{r3}
 801426c:	469e      	mov	lr, r3
 801426e:	4770      	bx	lr
