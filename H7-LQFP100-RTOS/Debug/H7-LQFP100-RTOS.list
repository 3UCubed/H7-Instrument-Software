
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014900  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08014ba0  08014ba0  00024ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015034  08015034  00025034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801503c  0801503c  0002503c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015040  08015040  00025040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08015044  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000050f0  24000100  08015144  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240051f0  08015144  000351f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   000375ce  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000069c6  00000000  00000000  000676fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002750  00000000  00000000  0006e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002498  00000000  00000000  00070818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000433b7  00000000  00000000  00072cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00038f07  00000000  00000000  000b6067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001947bc  00000000  00000000  000eef6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028372a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ac54  00000000  00000000  0028377c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014b88 	.word	0x08014b88

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08014b88 	.word	0x08014b88

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f003 f829 	bl	80036c0 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fb9c 	bl	8001db0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f004 f944 	bl	8004910 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fb8f 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f003 fa87 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fb76 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f003 fa79 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fb68 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f003 fa6b 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fb5a 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f003 fa5d 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fb4c 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f003 fa4e 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fb3d 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f003 fa3f 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fb2e 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f003 fa30 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fb1f 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f003 fa21 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fb10 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f003 fa12 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fb01 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f003 fa03 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 faf2 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f003 f9f4 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fae3 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f002 ff11 	bl	80036c0 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fa84 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f003 f97c 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fa6b 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f003 f96e 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fa5d 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f003 f960 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fa4f 	bl	8001db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f003 f952 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fa41 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f007 fb94 	bl	8008128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f007 fb88 	bl	8008128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f007 fb7c 	bl	8008128 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f004 fd0f 	bl	8005498 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 f996 	bl	8001db0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f002 fbca 	bl	8003278 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f002 fbc4 	bl	8003278 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f004 fcaf 	bl	8005498 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 f936 	bl	8001db0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f013 faf5 	bl	801417c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f004 f877 	bl	8004c8c <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 f904 	bl	8001db0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f004 fa92 	bl	80050ec <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 f8ef 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f007 fa67 	bl	8008128 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f004 fbfa 	bl	8005498 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 f881 	bl	8001db0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f003 ffbc 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f003 ffd3 	bl	8004c70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f003 ff93 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f003 ffaa 	bl	8004c70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f003 ff8b 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f003 ffa2 	bl	8004c70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f003 ff83 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f003 ff9a 	bl	8004c70 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f003 ff7b 	bl	8004c3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f003 ff92 	bl	8004c70 <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d6c:	4a28      	ldr	r2, [pc, #160]	; (8000e10 <MX_FREERTOS_Init+0xa8>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4828      	ldr	r0, [pc, #160]	; (8000e14 <MX_FREERTOS_Init+0xac>)
 8000d72:	f010 f845 	bl	8010e00 <osThreadNew>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <MX_FREERTOS_Init+0xb0>)
 8000d7a:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000d7c:	4a27      	ldr	r2, [pc, #156]	; (8000e1c <MX_FREERTOS_Init+0xb4>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4827      	ldr	r0, [pc, #156]	; (8000e20 <MX_FREERTOS_Init+0xb8>)
 8000d82:	f010 f83d 	bl	8010e00 <osThreadNew>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <MX_FREERTOS_Init+0xbc>)
 8000d8a:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000d8c:	4a26      	ldr	r2, [pc, #152]	; (8000e28 <MX_FREERTOS_Init+0xc0>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4826      	ldr	r0, [pc, #152]	; (8000e2c <MX_FREERTOS_Init+0xc4>)
 8000d92:	f010 f835 	bl	8010e00 <osThreadNew>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <MX_FREERTOS_Init+0xc8>)
 8000d9a:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000d9c:	4a25      	ldr	r2, [pc, #148]	; (8000e34 <MX_FREERTOS_Init+0xcc>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4825      	ldr	r0, [pc, #148]	; (8000e38 <MX_FREERTOS_Init+0xd0>)
 8000da2:	f010 f82d 	bl	8010e00 <osThreadNew>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4a24      	ldr	r2, [pc, #144]	; (8000e3c <MX_FREERTOS_Init+0xd4>)
 8000daa:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000dac:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <MX_FREERTOS_Init+0xd8>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4824      	ldr	r0, [pc, #144]	; (8000e44 <MX_FREERTOS_Init+0xdc>)
 8000db2:	f010 f825 	bl	8010e00 <osThreadNew>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <MX_FREERTOS_Init+0xe0>)
 8000dba:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000dbc:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <MX_FREERTOS_Init+0xe4>)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4823      	ldr	r0, [pc, #140]	; (8000e50 <MX_FREERTOS_Init+0xe8>)
 8000dc2:	f010 f81d 	bl	8010e00 <osThreadNew>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <MX_FREERTOS_Init+0xec>)
 8000dca:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <MX_FREERTOS_Init+0xf0>)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4822      	ldr	r0, [pc, #136]	; (8000e5c <MX_FREERTOS_Init+0xf4>)
 8000dd2:	f010 f815 	bl	8010e00 <osThreadNew>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <MX_FREERTOS_Init+0xf8>)
 8000dda:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <MX_FREERTOS_Init+0xfc>)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4821      	ldr	r0, [pc, #132]	; (8000e68 <MX_FREERTOS_Init+0x100>)
 8000de2:	f010 f80d 	bl	8010e00 <osThreadNew>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <MX_FREERTOS_Init+0x104>)
 8000dea:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000dec:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <MX_FREERTOS_Init+0x108>)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4820      	ldr	r0, [pc, #128]	; (8000e74 <MX_FREERTOS_Init+0x10c>)
 8000df2:	f010 f805 	bl	8010e00 <osThreadNew>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a1f      	ldr	r2, [pc, #124]	; (8000e78 <MX_FREERTOS_Init+0x110>)
 8000dfa:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000dfc:	4a1f      	ldr	r2, [pc, #124]	; (8000e7c <MX_FREERTOS_Init+0x114>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	481f      	ldr	r0, [pc, #124]	; (8000e80 <MX_FREERTOS_Init+0x118>)
 8000e02:	f00f fffd 	bl	8010e00 <osThreadNew>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <MX_FREERTOS_Init+0x11c>)
 8000e0a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	08014de0 	.word	0x08014de0
 8000e14:	08000e89 	.word	0x08000e89
 8000e18:	24000360 	.word	0x24000360
 8000e1c:	08014e04 	.word	0x08014e04
 8000e20:	08000e99 	.word	0x08000e99
 8000e24:	24000364 	.word	0x24000364
 8000e28:	08014e28 	.word	0x08014e28
 8000e2c:	08000ea9 	.word	0x08000ea9
 8000e30:	24000368 	.word	0x24000368
 8000e34:	08014e4c 	.word	0x08014e4c
 8000e38:	08000eb9 	.word	0x08000eb9
 8000e3c:	2400036c 	.word	0x2400036c
 8000e40:	08014e70 	.word	0x08014e70
 8000e44:	08000f31 	.word	0x08000f31
 8000e48:	24000370 	.word	0x24000370
 8000e4c:	08014e94 	.word	0x08014e94
 8000e50:	08000fa9 	.word	0x08000fa9
 8000e54:	24000374 	.word	0x24000374
 8000e58:	08014eb8 	.word	0x08014eb8
 8000e5c:	08000fb9 	.word	0x08000fb9
 8000e60:	24000378 	.word	0x24000378
 8000e64:	08014edc 	.word	0x08014edc
 8000e68:	08000fc9 	.word	0x08000fc9
 8000e6c:	2400037c 	.word	0x2400037c
 8000e70:	08014f00 	.word	0x08014f00
 8000e74:	08000fd9 	.word	0x08000fd9
 8000e78:	24000380 	.word	0x24000380
 8000e7c:	08014f24 	.word	0x08014f24
 8000e80:	08000fe9 	.word	0x08000fe9
 8000e84:	24000384 	.word	0x24000384

08000e88 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f010 f867 	bl	8010f64 <osDelay>
 8000e96:	e7fb      	b.n	8000e90 <PMT_init+0x8>

08000e98 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f010 f85f 	bl	8010f64 <osDelay>
 8000ea6:	e7fb      	b.n	8000ea0 <ERPA_init+0x8>

08000ea8 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osDelay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f010 f857 	bl	8010f64 <osDelay>
 8000eb6:	e7fb      	b.n	8000eb0 <HK_init+0x8>

08000eb8 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <AUTOINIT_init+0x70>)
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2104      	movs	r1, #4
 8000ecc:	f010 f8e8 	bl	80110a0 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	e012      	b.n	8000efc <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000ed6:	4a15      	ldr	r2, [pc, #84]	; (8000f2c <AUTOINIT_init+0x74>)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000ede:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <AUTOINIT_init+0x74>)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	889b      	ldrh	r3, [r3, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4619      	mov	r1, r3
 8000eec:	f007 facc 	bl	8008488 <HAL_GPIO_WritePin>
			osDelay(100);
 8000ef0:	2064      	movs	r0, #100	; 0x64
 8000ef2:	f010 f837 	bl	8010f64 <osDelay>
		for (int i = 0; i < 7; i++) {
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	dde9      	ble.n	8000ed6 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f02:	2308      	movs	r3, #8
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	e008      	b.n	8000f1a <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 f900 	bl	8003114 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	3301      	adds	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	2b0d      	cmp	r3, #13
 8000f1e:	ddf3      	ble.n	8000f08 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f20:	f010 f800 	bl	8010f24 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f24:	e7cc      	b.n	8000ec0 <AUTOINIT_init+0x8>
 8000f26:	bf00      	nop
 8000f28:	240003e0 	.word	0x240003e0
 8000f2c:	08014f48 	.word	0x08014f48

08000f30 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f38:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <AUTODEINIT_init+0x70>)
 8000f3a:	6818      	ldr	r0, [r3, #0]
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f40:	2200      	movs	r2, #0
 8000f42:	2108      	movs	r1, #8
 8000f44:	f010 f8ac 	bl	80110a0 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f48:	230d      	movs	r3, #13
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e008      	b.n	8000f60 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f002 f8dd 	bl	8003114 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	dcf3      	bgt.n	8000f4e <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000f66:	2306      	movs	r3, #6
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	e012      	b.n	8000f92 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <AUTODEINIT_init+0x74>)
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <AUTODEINIT_init+0x74>)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	4413      	add	r3, r2
 8000f7c:	889b      	ldrh	r3, [r3, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4619      	mov	r1, r3
 8000f82:	f007 fa81 	bl	8008488 <HAL_GPIO_WritePin>
			osDelay(100);
 8000f86:	2064      	movs	r0, #100	; 0x64
 8000f88:	f00f ffec 	bl	8010f64 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	dae9      	bge.n	8000f6c <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8000f98:	f00f ffc4 	bl	8010f24 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f9c:	e7cc      	b.n	8000f38 <AUTODEINIT_init+0x8>
 8000f9e:	bf00      	nop
 8000fa0:	240003e0 	.word	0x240003e0
 8000fa4:	08014f48 	.word	0x08014f48

08000fa8 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	for (;;) {
		osDelay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f00f ffd7 	bl	8010f64 <osDelay>
 8000fb6:	e7fb      	b.n	8000fb0 <UART_TX_init+0x8>

08000fb8 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	for (;;) {
		osDelay(1);
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f00f ffcf 	bl	8010f64 <osDelay>
 8000fc6:	e7fb      	b.n	8000fc0 <Voltage_Monitor_init+0x8>

08000fc8 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f00f ffc7 	bl	8010f64 <osDelay>
 8000fd6:	e7fb      	b.n	8000fd0 <STOP_init+0x8>

08000fd8 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f00f ffbf 	bl	8010f64 <osDelay>
 8000fe6:	e7fb      	b.n	8000fe0 <Science_init+0x8>

08000fe8 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	f00f ffb7 	bl	8010f64 <osDelay>
 8000ff6:	e7fb      	b.n	8000ff0 <Idle_init+0x8>

08000ff8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <MX_GPIO_Init+0xe8>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	4a32      	ldr	r2, [pc, #200]	; (80010e0 <MX_GPIO_Init+0xe8>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101e:	4b30      	ldr	r3, [pc, #192]	; (80010e0 <MX_GPIO_Init+0xe8>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102c:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <MX_GPIO_Init+0xe8>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	4a2b      	ldr	r2, [pc, #172]	; (80010e0 <MX_GPIO_Init+0xe8>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <MX_GPIO_Init+0xe8>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <MX_GPIO_Init+0xe8>)
 800104c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001050:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <MX_GPIO_Init+0xe8>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_GPIO_Init+0xe8>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001068:	4b1d      	ldr	r3, [pc, #116]	; (80010e0 <MX_GPIO_Init+0xe8>)
 800106a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <MX_GPIO_Init+0xe8>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_GPIO_Init+0xe8>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 800108c:	4815      	ldr	r0, [pc, #84]	; (80010e4 <MX_GPIO_Init+0xec>)
 800108e:	f007 f9fb 	bl	8008488 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2164      	movs	r1, #100	; 0x64
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_GPIO_Init+0xf0>)
 8001098:	f007 f9f6 	bl	8008488 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800109c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80010a0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	480b      	ldr	r0, [pc, #44]	; (80010e4 <MX_GPIO_Init+0xec>)
 80010b6:	f007 f837 	bl	8008128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80010ba:	2364      	movs	r3, #100	; 0x64
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_GPIO_Init+0xf0>)
 80010d2:	f007 f829 	bl	8008128 <HAL_GPIO_Init>

}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	58024400 	.word	0x58024400
 80010e4:	58020800 	.word	0x58020800
 80010e8:	58020400 	.word	0x58020400

080010ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <MX_I2C1_Init+0x78>)
 80010f2:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <MX_I2C1_Init+0x7c>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_I2C1_Init+0x78>)
 80010f8:	4a1c      	ldr	r2, [pc, #112]	; (800116c <MX_I2C1_Init+0x80>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_I2C1_Init+0x78>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_I2C1_Init+0x78>)
 8001104:	2201      	movs	r2, #1
 8001106:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_I2C1_Init+0x78>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_I2C1_Init+0x78>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_I2C1_Init+0x78>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_I2C1_Init+0x78>)
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_I2C1_Init+0x78>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001126:	480f      	ldr	r0, [pc, #60]	; (8001164 <MX_I2C1_Init+0x78>)
 8001128:	f007 f9c8 	bl	80084bc <HAL_I2C_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001132:	f000 fe3d 	bl	8001db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	480a      	ldr	r0, [pc, #40]	; (8001164 <MX_I2C1_Init+0x78>)
 800113a:	f007 fa5b 	bl	80085f4 <HAL_I2CEx_ConfigAnalogFilter>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001144:	f000 fe34 	bl	8001db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001148:	2100      	movs	r1, #0
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_I2C1_Init+0x78>)
 800114c:	f007 fa9d 	bl	800868a <HAL_I2CEx_ConfigDigitalFilter>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001156:	f000 fe2b 	bl	8001db0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800115a:	2001      	movs	r0, #1
 800115c:	f007 fae2 	bl	8008724 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	24000388 	.word	0x24000388
 8001168:	40005400 	.word	0x40005400
 800116c:	0020081f 	.word	0x0020081f

08001170 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0ba      	sub	sp, #232	; 0xe8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	22c0      	movs	r2, #192	; 0xc0
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f012 fff3 	bl	801417c <memset>
  if(i2cHandle->Instance==I2C1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a27      	ldr	r2, [pc, #156]	; (8001238 <HAL_I2C_MspInit+0xc8>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d146      	bne.n	800122e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011a0:	f04f 0208 	mov.w	r2, #8
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4618      	mov	r0, r3
 80011b8:	f008 fb3a 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011c2:	f000 fdf5 	bl	8001db0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_I2C_MspInit+0xcc>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	4a1b      	ldr	r2, [pc, #108]	; (800123c <HAL_I2C_MspInit+0xcc>)
 80011ce:	f043 0302 	orr.w	r3, r3, #2
 80011d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_I2C_MspInit+0xcc>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ec:	2312      	movs	r3, #18
 80011ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011fe:	2304      	movs	r3, #4
 8001200:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001208:	4619      	mov	r1, r3
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <HAL_I2C_MspInit+0xd0>)
 800120c:	f006 ff8c 	bl	8008128 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_I2C_MspInit+0xcc>)
 8001212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <HAL_I2C_MspInit+0xcc>)
 8001218:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_I2C_MspInit+0xcc>)
 8001222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800122e:	bf00      	nop
 8001230:	37e8      	adds	r7, #232	; 0xe8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40005400 	.word	0x40005400
 800123c:	58024400 	.word	0x58024400
 8001240:	58020400 	.word	0x58020400

08001244 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af02      	add	r7, sp, #8
 800124a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800124c:	2201      	movs	r2, #1
 800124e:	49f2      	ldr	r1, [pc, #968]	; (8001618 <HAL_UART_RxCpltCallback+0x3d4>)
 8001250:	48f2      	ldr	r0, [pc, #968]	; (800161c <HAL_UART_RxCpltCallback+0x3d8>)
 8001252:	f00d f941 	bl	800e4d8 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8001256:	4bf0      	ldr	r3, [pc, #960]	; (8001618 <HAL_UART_RxCpltCallback+0x3d4>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2be0      	cmp	r3, #224	; 0xe0
 8001260:	f200 840b 	bhi.w	8001a7a <HAL_UART_RxCpltCallback+0x836>
 8001264:	a201      	add	r2, pc, #4	; (adr r2, 800126c <HAL_UART_RxCpltCallback+0x28>)
 8001266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126a:	bf00      	nop
 800126c:	08001605 	.word	0x08001605
 8001270:	08001649 	.word	0x08001649
 8001274:	080016b9 	.word	0x080016b9
 8001278:	080016f3 	.word	0x080016f3
 800127c:	0800172b 	.word	0x0800172b
 8001280:	08001765 	.word	0x08001765
 8001284:	080017a1 	.word	0x080017a1
 8001288:	080017dd 	.word	0x080017dd
 800128c:	08001817 	.word	0x08001817
 8001290:	0800184b 	.word	0x0800184b
 8001294:	08001877 	.word	0x08001877
 8001298:	080018a3 	.word	0x080018a3
 800129c:	080018cd 	.word	0x080018cd
 80012a0:	080019a9 	.word	0x080019a9
 80012a4:	08001a11 	.word	0x08001a11
 80012a8:	08001a39 	.word	0x08001a39
 80012ac:	080015f1 	.word	0x080015f1
 80012b0:	0800162d 	.word	0x0800162d
 80012b4:	0800169b 	.word	0x0800169b
 80012b8:	080016d7 	.word	0x080016d7
 80012bc:	0800170f 	.word	0x0800170f
 80012c0:	08001747 	.word	0x08001747
 80012c4:	08001783 	.word	0x08001783
 80012c8:	080017bf 	.word	0x080017bf
 80012cc:	080017fb 	.word	0x080017fb
 80012d0:	08001833 	.word	0x08001833
 80012d4:	0800185b 	.word	0x0800185b
 80012d8:	08001887 	.word	0x08001887
 80012dc:	080018b3 	.word	0x080018b3
 80012e0:	080018db 	.word	0x080018db
 80012e4:	080019e9 	.word	0x080019e9
 80012e8:	08001a7b 	.word	0x08001a7b
 80012ec:	08001a7b 	.word	0x08001a7b
 80012f0:	08001a7b 	.word	0x08001a7b
 80012f4:	08001a7b 	.word	0x08001a7b
 80012f8:	08001a7b 	.word	0x08001a7b
 80012fc:	08001a7b 	.word	0x08001a7b
 8001300:	08001a7b 	.word	0x08001a7b
 8001304:	08001a7b 	.word	0x08001a7b
 8001308:	08001a7b 	.word	0x08001a7b
 800130c:	08001a7b 	.word	0x08001a7b
 8001310:	08001a7b 	.word	0x08001a7b
 8001314:	08001a7b 	.word	0x08001a7b
 8001318:	08001a7b 	.word	0x08001a7b
 800131c:	08001a7b 	.word	0x08001a7b
 8001320:	08001a7b 	.word	0x08001a7b
 8001324:	08001a7b 	.word	0x08001a7b
 8001328:	08001a7b 	.word	0x08001a7b
 800132c:	08001a7b 	.word	0x08001a7b
 8001330:	08001a7b 	.word	0x08001a7b
 8001334:	08001a7b 	.word	0x08001a7b
 8001338:	08001a7b 	.word	0x08001a7b
 800133c:	08001a7b 	.word	0x08001a7b
 8001340:	08001a7b 	.word	0x08001a7b
 8001344:	08001a7b 	.word	0x08001a7b
 8001348:	08001a7b 	.word	0x08001a7b
 800134c:	08001a7b 	.word	0x08001a7b
 8001350:	08001a7b 	.word	0x08001a7b
 8001354:	08001a7b 	.word	0x08001a7b
 8001358:	08001a7b 	.word	0x08001a7b
 800135c:	08001a7b 	.word	0x08001a7b
 8001360:	08001a7b 	.word	0x08001a7b
 8001364:	08001a7b 	.word	0x08001a7b
 8001368:	08001a7b 	.word	0x08001a7b
 800136c:	08001a7b 	.word	0x08001a7b
 8001370:	08001a7b 	.word	0x08001a7b
 8001374:	08001a7b 	.word	0x08001a7b
 8001378:	08001a7b 	.word	0x08001a7b
 800137c:	08001a7b 	.word	0x08001a7b
 8001380:	08001a7b 	.word	0x08001a7b
 8001384:	08001a7b 	.word	0x08001a7b
 8001388:	08001a7b 	.word	0x08001a7b
 800138c:	08001a7b 	.word	0x08001a7b
 8001390:	08001a7b 	.word	0x08001a7b
 8001394:	08001a7b 	.word	0x08001a7b
 8001398:	08001a7b 	.word	0x08001a7b
 800139c:	08001a7b 	.word	0x08001a7b
 80013a0:	08001a7b 	.word	0x08001a7b
 80013a4:	08001a7b 	.word	0x08001a7b
 80013a8:	08001a7b 	.word	0x08001a7b
 80013ac:	08001a7b 	.word	0x08001a7b
 80013b0:	08001a7b 	.word	0x08001a7b
 80013b4:	08001a7b 	.word	0x08001a7b
 80013b8:	08001a7b 	.word	0x08001a7b
 80013bc:	08001a7b 	.word	0x08001a7b
 80013c0:	08001a7b 	.word	0x08001a7b
 80013c4:	08001a7b 	.word	0x08001a7b
 80013c8:	08001a7b 	.word	0x08001a7b
 80013cc:	08001a7b 	.word	0x08001a7b
 80013d0:	08001a7b 	.word	0x08001a7b
 80013d4:	08001a7b 	.word	0x08001a7b
 80013d8:	08001a7b 	.word	0x08001a7b
 80013dc:	08001a7b 	.word	0x08001a7b
 80013e0:	08001a7b 	.word	0x08001a7b
 80013e4:	08001a7b 	.word	0x08001a7b
 80013e8:	08001a7b 	.word	0x08001a7b
 80013ec:	08001a7b 	.word	0x08001a7b
 80013f0:	08001a7b 	.word	0x08001a7b
 80013f4:	08001a7b 	.word	0x08001a7b
 80013f8:	08001a7b 	.word	0x08001a7b
 80013fc:	08001a7b 	.word	0x08001a7b
 8001400:	08001a7b 	.word	0x08001a7b
 8001404:	08001a7b 	.word	0x08001a7b
 8001408:	08001a7b 	.word	0x08001a7b
 800140c:	08001a7b 	.word	0x08001a7b
 8001410:	08001a7b 	.word	0x08001a7b
 8001414:	08001a7b 	.word	0x08001a7b
 8001418:	08001a7b 	.word	0x08001a7b
 800141c:	08001a7b 	.word	0x08001a7b
 8001420:	08001a7b 	.word	0x08001a7b
 8001424:	08001a7b 	.word	0x08001a7b
 8001428:	08001a7b 	.word	0x08001a7b
 800142c:	08001a7b 	.word	0x08001a7b
 8001430:	08001a7b 	.word	0x08001a7b
 8001434:	08001a7b 	.word	0x08001a7b
 8001438:	08001a7b 	.word	0x08001a7b
 800143c:	08001a7b 	.word	0x08001a7b
 8001440:	08001a7b 	.word	0x08001a7b
 8001444:	08001a7b 	.word	0x08001a7b
 8001448:	08001a7b 	.word	0x08001a7b
 800144c:	08001a7b 	.word	0x08001a7b
 8001450:	08001a7b 	.word	0x08001a7b
 8001454:	08001a7b 	.word	0x08001a7b
 8001458:	08001a7b 	.word	0x08001a7b
 800145c:	08001a7b 	.word	0x08001a7b
 8001460:	08001a7b 	.word	0x08001a7b
 8001464:	08001a7b 	.word	0x08001a7b
 8001468:	08001a7b 	.word	0x08001a7b
 800146c:	08001a7b 	.word	0x08001a7b
 8001470:	08001a7b 	.word	0x08001a7b
 8001474:	08001a7b 	.word	0x08001a7b
 8001478:	08001a7b 	.word	0x08001a7b
 800147c:	08001a7b 	.word	0x08001a7b
 8001480:	08001a7b 	.word	0x08001a7b
 8001484:	08001a7b 	.word	0x08001a7b
 8001488:	08001a7b 	.word	0x08001a7b
 800148c:	08001a7b 	.word	0x08001a7b
 8001490:	08001a7b 	.word	0x08001a7b
 8001494:	08001a7b 	.word	0x08001a7b
 8001498:	08001a7b 	.word	0x08001a7b
 800149c:	08001a7b 	.word	0x08001a7b
 80014a0:	08001a7b 	.word	0x08001a7b
 80014a4:	08001a7b 	.word	0x08001a7b
 80014a8:	08001a7b 	.word	0x08001a7b
 80014ac:	08001a7b 	.word	0x08001a7b
 80014b0:	08001a7b 	.word	0x08001a7b
 80014b4:	08001a7b 	.word	0x08001a7b
 80014b8:	08001a7b 	.word	0x08001a7b
 80014bc:	08001a7b 	.word	0x08001a7b
 80014c0:	08001a7b 	.word	0x08001a7b
 80014c4:	08001a7b 	.word	0x08001a7b
 80014c8:	08001a7b 	.word	0x08001a7b
 80014cc:	08001a7b 	.word	0x08001a7b
 80014d0:	08001a7b 	.word	0x08001a7b
 80014d4:	08001a7b 	.word	0x08001a7b
 80014d8:	08001a7b 	.word	0x08001a7b
 80014dc:	08001a7b 	.word	0x08001a7b
 80014e0:	08001a7b 	.word	0x08001a7b
 80014e4:	08001a7b 	.word	0x08001a7b
 80014e8:	08001a7b 	.word	0x08001a7b
 80014ec:	08001a7b 	.word	0x08001a7b
 80014f0:	08001a7b 	.word	0x08001a7b
 80014f4:	08001a7b 	.word	0x08001a7b
 80014f8:	08001a7b 	.word	0x08001a7b
 80014fc:	08001a7b 	.word	0x08001a7b
 8001500:	08001a7b 	.word	0x08001a7b
 8001504:	08001a7b 	.word	0x08001a7b
 8001508:	08001a7b 	.word	0x08001a7b
 800150c:	08001a7b 	.word	0x08001a7b
 8001510:	08001a7b 	.word	0x08001a7b
 8001514:	08001a7b 	.word	0x08001a7b
 8001518:	08001a7b 	.word	0x08001a7b
 800151c:	08001a7b 	.word	0x08001a7b
 8001520:	08001a7b 	.word	0x08001a7b
 8001524:	08001a7b 	.word	0x08001a7b
 8001528:	08001a75 	.word	0x08001a75
 800152c:	08001a7b 	.word	0x08001a7b
 8001530:	08001a7b 	.word	0x08001a7b
 8001534:	08001a7b 	.word	0x08001a7b
 8001538:	08001a7b 	.word	0x08001a7b
 800153c:	08001a7b 	.word	0x08001a7b
 8001540:	08001a7b 	.word	0x08001a7b
 8001544:	08001a7b 	.word	0x08001a7b
 8001548:	08001a7b 	.word	0x08001a7b
 800154c:	08001a7b 	.word	0x08001a7b
 8001550:	08001a7b 	.word	0x08001a7b
 8001554:	08001a7b 	.word	0x08001a7b
 8001558:	08001a7b 	.word	0x08001a7b
 800155c:	08001a7b 	.word	0x08001a7b
 8001560:	08001a7b 	.word	0x08001a7b
 8001564:	08001a7b 	.word	0x08001a7b
 8001568:	08001a83 	.word	0x08001a83
 800156c:	08001a7b 	.word	0x08001a7b
 8001570:	08001a7b 	.word	0x08001a7b
 8001574:	08001a7b 	.word	0x08001a7b
 8001578:	08001a7b 	.word	0x08001a7b
 800157c:	08001a7b 	.word	0x08001a7b
 8001580:	08001a7b 	.word	0x08001a7b
 8001584:	08001a7b 	.word	0x08001a7b
 8001588:	08001a7b 	.word	0x08001a7b
 800158c:	08001a7b 	.word	0x08001a7b
 8001590:	08001a7b 	.word	0x08001a7b
 8001594:	08001a7b 	.word	0x08001a7b
 8001598:	08001a7b 	.word	0x08001a7b
 800159c:	08001a7b 	.word	0x08001a7b
 80015a0:	08001a7b 	.word	0x08001a7b
 80015a4:	08001a7b 	.word	0x08001a7b
 80015a8:	08001a83 	.word	0x08001a83
 80015ac:	08001a61 	.word	0x08001a61
 80015b0:	08001a7b 	.word	0x08001a7b
 80015b4:	08001a7b 	.word	0x08001a7b
 80015b8:	08001a7b 	.word	0x08001a7b
 80015bc:	08001a7b 	.word	0x08001a7b
 80015c0:	08001a7b 	.word	0x08001a7b
 80015c4:	08001a7b 	.word	0x08001a7b
 80015c8:	08001a7b 	.word	0x08001a7b
 80015cc:	08001a7b 	.word	0x08001a7b
 80015d0:	08001a7b 	.word	0x08001a7b
 80015d4:	08001a7b 	.word	0x08001a7b
 80015d8:	08001a7b 	.word	0x08001a7b
 80015dc:	08001a7b 	.word	0x08001a7b
 80015e0:	08001a7b 	.word	0x08001a7b
 80015e4:	08001a7b 	.word	0x08001a7b
 80015e8:	08001a7b 	.word	0x08001a7b
 80015ec:	08001a4d 	.word	0x08001a4d
	case 0x10: {
		printf("SDN1 ON\n");
 80015f0:	480b      	ldr	r0, [pc, #44]	; (8001620 <HAL_UART_RxCpltCallback+0x3dc>)
 80015f2:	f012 fe39 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_UART_RxCpltCallback+0x3e0>)
 80015f8:	2104      	movs	r1, #4
 80015fa:	2201      	movs	r2, #1
 80015fc:	4618      	mov	r0, r3
 80015fe:	f006 ff43 	bl	8008488 <HAL_GPIO_WritePin>
		break;
 8001602:	e247      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8001604:	4808      	ldr	r0, [pc, #32]	; (8001628 <HAL_UART_RxCpltCallback+0x3e4>)
 8001606:	f012 fe2f 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_UART_RxCpltCallback+0x3e0>)
 800160c:	2104      	movs	r1, #4
 800160e:	2200      	movs	r2, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f006 ff39 	bl	8008488 <HAL_GPIO_WritePin>
		break;
 8001616:	e23d      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
 8001618:	240003e8 	.word	0x240003e8
 800161c:	240006cc 	.word	0x240006cc
 8001620:	08014c28 	.word	0x08014c28
 8001624:	58020400 	.word	0x58020400
 8001628:	08014c30 	.word	0x08014c30
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 800162c:	48bb      	ldr	r0, [pc, #748]	; (800191c <HAL_UART_RxCpltCallback+0x6d8>)
 800162e:	f012 fe1b 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8001632:	4bbb      	ldr	r3, [pc, #748]	; (8001920 <HAL_UART_RxCpltCallback+0x6dc>)
 8001634:	2120      	movs	r1, #32
 8001636:	2201      	movs	r2, #1
 8001638:	4618      	mov	r0, r3
 800163a:	f006 ff25 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 800163e:	2101      	movs	r1, #1
 8001640:	2008      	movs	r0, #8
 8001642:	f001 fd67 	bl	8003114 <set_rail_monitor_enable>
		break;
 8001646:	e225      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8001648:	48b6      	ldr	r0, [pc, #728]	; (8001924 <HAL_UART_RxCpltCallback+0x6e0>)
 800164a:	f012 fe0d 	bl	8014268 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 800164e:	2308      	movs	r3, #8
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e00f      	b.n	8001674 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001654:	4ab4      	ldr	r2, [pc, #720]	; (8001928 <HAL_UART_RxCpltCallback+0x6e4>)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800165c:	4ab2      	ldr	r2, [pc, #712]	; (8001928 <HAL_UART_RxCpltCallback+0x6e4>)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	889b      	ldrh	r3, [r3, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	4619      	mov	r1, r3
 800166a:	f006 ff0d 	bl	8008488 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3b01      	subs	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b00      	cmp	r3, #0
 8001678:	dcec      	bgt.n	8001654 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 800167a:	2310      	movs	r3, #16
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	e008      	b.n	8001692 <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f001 fd44 	bl	8003114 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	3b01      	subs	r3, #1
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	2b07      	cmp	r3, #7
 8001696:	dcf3      	bgt.n	8001680 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8001698:	e1fc      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 800169a:	48a4      	ldr	r0, [pc, #656]	; (800192c <HAL_UART_RxCpltCallback+0x6e8>)
 800169c:	f012 fde4 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80016a0:	4ba3      	ldr	r3, [pc, #652]	; (8001930 <HAL_UART_RxCpltCallback+0x6ec>)
 80016a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a6:	2201      	movs	r2, #1
 80016a8:	4618      	mov	r0, r3
 80016aa:	f006 feed 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80016ae:	2101      	movs	r1, #1
 80016b0:	2009      	movs	r0, #9
 80016b2:	f001 fd2f 	bl	8003114 <set_rail_monitor_enable>

		break;
 80016b6:	e1ed      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80016b8:	489e      	ldr	r0, [pc, #632]	; (8001934 <HAL_UART_RxCpltCallback+0x6f0>)
 80016ba:	f012 fdd5 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80016be:	4b9c      	ldr	r3, [pc, #624]	; (8001930 <HAL_UART_RxCpltCallback+0x6ec>)
 80016c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c4:	2200      	movs	r2, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f006 fede 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80016cc:	2100      	movs	r1, #0
 80016ce:	2009      	movs	r0, #9
 80016d0:	f001 fd20 	bl	8003114 <set_rail_monitor_enable>
		break;
 80016d4:	e1de      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 80016d6:	4898      	ldr	r0, [pc, #608]	; (8001938 <HAL_UART_RxCpltCallback+0x6f4>)
 80016d8:	f012 fdc6 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 80016dc:	4b94      	ldr	r3, [pc, #592]	; (8001930 <HAL_UART_RxCpltCallback+0x6ec>)
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	2201      	movs	r2, #1
 80016e2:	4618      	mov	r0, r3
 80016e4:	f006 fed0 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 80016e8:	2101      	movs	r1, #1
 80016ea:	200a      	movs	r0, #10
 80016ec:	f001 fd12 	bl	8003114 <set_rail_monitor_enable>

		break;
 80016f0:	e1d0      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 80016f2:	4892      	ldr	r0, [pc, #584]	; (800193c <HAL_UART_RxCpltCallback+0x6f8>)
 80016f4:	f012 fdb8 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 80016f8:	4b8d      	ldr	r3, [pc, #564]	; (8001930 <HAL_UART_RxCpltCallback+0x6ec>)
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	2200      	movs	r2, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f006 fec2 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001704:	2100      	movs	r1, #0
 8001706:	200a      	movs	r0, #10
 8001708:	f001 fd04 	bl	8003114 <set_rail_monitor_enable>
		break;
 800170c:	e1c2      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 800170e:	488c      	ldr	r0, [pc, #560]	; (8001940 <HAL_UART_RxCpltCallback+0x6fc>)
 8001710:	f012 fdaa 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001714:	4b86      	ldr	r3, [pc, #536]	; (8001930 <HAL_UART_RxCpltCallback+0x6ec>)
 8001716:	2140      	movs	r1, #64	; 0x40
 8001718:	2201      	movs	r2, #1
 800171a:	4618      	mov	r0, r3
 800171c:	f006 feb4 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001720:	2101      	movs	r1, #1
 8001722:	200b      	movs	r0, #11
 8001724:	f001 fcf6 	bl	8003114 <set_rail_monitor_enable>

		break;
 8001728:	e1b4      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 800172a:	4886      	ldr	r0, [pc, #536]	; (8001944 <HAL_UART_RxCpltCallback+0x700>)
 800172c:	f012 fd9c 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001730:	4b7f      	ldr	r3, [pc, #508]	; (8001930 <HAL_UART_RxCpltCallback+0x6ec>)
 8001732:	2140      	movs	r1, #64	; 0x40
 8001734:	2200      	movs	r2, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f006 fea6 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 800173c:	2100      	movs	r1, #0
 800173e:	200b      	movs	r0, #11
 8001740:	f001 fce8 	bl	8003114 <set_rail_monitor_enable>
		break;
 8001744:	e1a6      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001746:	4880      	ldr	r0, [pc, #512]	; (8001948 <HAL_UART_RxCpltCallback+0x704>)
 8001748:	f012 fd8e 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 800174c:	4b78      	ldr	r3, [pc, #480]	; (8001930 <HAL_UART_RxCpltCallback+0x6ec>)
 800174e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001752:	2201      	movs	r2, #1
 8001754:	4618      	mov	r0, r3
 8001756:	f006 fe97 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 800175a:	2101      	movs	r1, #1
 800175c:	200c      	movs	r0, #12
 800175e:	f001 fcd9 	bl	8003114 <set_rail_monitor_enable>

		break;
 8001762:	e197      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001764:	4879      	ldr	r0, [pc, #484]	; (800194c <HAL_UART_RxCpltCallback+0x708>)
 8001766:	f012 fd7f 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 800176a:	4b71      	ldr	r3, [pc, #452]	; (8001930 <HAL_UART_RxCpltCallback+0x6ec>)
 800176c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001770:	2200      	movs	r2, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f006 fe88 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8001778:	2100      	movs	r1, #0
 800177a:	200c      	movs	r0, #12
 800177c:	f001 fcca 	bl	8003114 <set_rail_monitor_enable>
		break;
 8001780:	e188      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8001782:	4873      	ldr	r0, [pc, #460]	; (8001950 <HAL_UART_RxCpltCallback+0x70c>)
 8001784:	f012 fd70 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001788:	4b69      	ldr	r3, [pc, #420]	; (8001930 <HAL_UART_RxCpltCallback+0x6ec>)
 800178a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800178e:	2201      	movs	r2, #1
 8001790:	4618      	mov	r0, r3
 8001792:	f006 fe79 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8001796:	2101      	movs	r1, #1
 8001798:	200d      	movs	r0, #13
 800179a:	f001 fcbb 	bl	8003114 <set_rail_monitor_enable>

		break;
 800179e:	e179      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 80017a0:	486c      	ldr	r0, [pc, #432]	; (8001954 <HAL_UART_RxCpltCallback+0x710>)
 80017a2:	f012 fd61 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 80017a6:	4b62      	ldr	r3, [pc, #392]	; (8001930 <HAL_UART_RxCpltCallback+0x6ec>)
 80017a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ac:	2200      	movs	r2, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f006 fe6a 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 80017b4:	2100      	movs	r1, #0
 80017b6:	200d      	movs	r0, #13
 80017b8:	f001 fcac 	bl	8003114 <set_rail_monitor_enable>
		break;
 80017bc:	e16a      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 80017be:	4866      	ldr	r0, [pc, #408]	; (8001958 <HAL_UART_RxCpltCallback+0x714>)
 80017c0:	f012 fd52 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 80017c4:	4b5a      	ldr	r3, [pc, #360]	; (8001930 <HAL_UART_RxCpltCallback+0x6ec>)
 80017c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ca:	2201      	movs	r2, #1
 80017cc:	4618      	mov	r0, r3
 80017ce:	f006 fe5b 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 80017d2:	2101      	movs	r1, #1
 80017d4:	200f      	movs	r0, #15
 80017d6:	f001 fc9d 	bl	8003114 <set_rail_monitor_enable>

		break;
 80017da:	e15b      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 80017dc:	485f      	ldr	r0, [pc, #380]	; (800195c <HAL_UART_RxCpltCallback+0x718>)
 80017de:	f012 fd43 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 80017e2:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_UART_RxCpltCallback+0x6ec>)
 80017e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e8:	2200      	movs	r2, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f006 fe4c 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 80017f0:	2100      	movs	r1, #0
 80017f2:	200f      	movs	r0, #15
 80017f4:	f001 fc8e 	bl	8003114 <set_rail_monitor_enable>
		break;
 80017f8:	e14c      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 80017fa:	4859      	ldr	r0, [pc, #356]	; (8001960 <HAL_UART_RxCpltCallback+0x71c>)
 80017fc:	f012 fd34 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_UART_RxCpltCallback+0x6dc>)
 8001802:	2140      	movs	r1, #64	; 0x40
 8001804:	2201      	movs	r2, #1
 8001806:	4618      	mov	r0, r3
 8001808:	f006 fe3e 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 800180c:	2101      	movs	r1, #1
 800180e:	2010      	movs	r0, #16
 8001810:	f001 fc80 	bl	8003114 <set_rail_monitor_enable>

		break;
 8001814:	e13e      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001816:	4853      	ldr	r0, [pc, #332]	; (8001964 <HAL_UART_RxCpltCallback+0x720>)
 8001818:	f012 fd26 	bl	8014268 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 800181c:	4b40      	ldr	r3, [pc, #256]	; (8001920 <HAL_UART_RxCpltCallback+0x6dc>)
 800181e:	2140      	movs	r1, #64	; 0x40
 8001820:	2200      	movs	r2, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f006 fe30 	bl	8008488 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001828:	2100      	movs	r1, #0
 800182a:	2010      	movs	r0, #16
 800182c:	f001 fc72 	bl	8003114 <set_rail_monitor_enable>
		break;
 8001830:	e130      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001832:	484d      	ldr	r0, [pc, #308]	; (8001968 <HAL_UART_RxCpltCallback+0x724>)
 8001834:	f012 fd18 	bl	8014268 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001838:	2300      	movs	r3, #0
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2320      	movs	r3, #32
 800183e:	4a4b      	ldr	r2, [pc, #300]	; (800196c <HAL_UART_RxCpltCallback+0x728>)
 8001840:	2100      	movs	r1, #0
 8001842:	484b      	ldr	r0, [pc, #300]	; (8001970 <HAL_UART_RxCpltCallback+0x72c>)
 8001844:	f003 fa9c 	bl	8004d80 <HAL_DAC_Start_DMA>
		break;
 8001848:	e124      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 800184a:	484a      	ldr	r0, [pc, #296]	; (8001974 <HAL_UART_RxCpltCallback+0x730>)
 800184c:	f012 fd0c 	bl	8014268 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001850:	2100      	movs	r1, #0
 8001852:	4847      	ldr	r0, [pc, #284]	; (8001970 <HAL_UART_RxCpltCallback+0x72c>)
 8001854:	f003 fb54 	bl	8004f00 <HAL_DAC_Stop_DMA>
		break;
 8001858:	e11c      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 800185a:	4847      	ldr	r0, [pc, #284]	; (8001978 <HAL_UART_RxCpltCallback+0x734>)
 800185c:	f012 fd04 	bl	8014268 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001860:	210c      	movs	r1, #12
 8001862:	4846      	ldr	r0, [pc, #280]	; (800197c <HAL_UART_RxCpltCallback+0x738>)
 8001864:	f00b f94e 	bl	800cb04 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001868:	4b45      	ldr	r3, [pc, #276]	; (8001980 <HAL_UART_RxCpltCallback+0x73c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f00f fbd2 	bl	8011018 <osEventFlagsSet>
		break;
 8001874:	e10e      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001876:	4843      	ldr	r0, [pc, #268]	; (8001984 <HAL_UART_RxCpltCallback+0x740>)
 8001878:	f012 fcf6 	bl	8014268 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 800187c:	210c      	movs	r1, #12
 800187e:	483f      	ldr	r0, [pc, #252]	; (800197c <HAL_UART_RxCpltCallback+0x738>)
 8001880:	f00b fa9a 	bl	800cdb8 <HAL_TIM_OC_Stop_IT>
		break;
 8001884:	e106      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001886:	4840      	ldr	r0, [pc, #256]	; (8001988 <HAL_UART_RxCpltCallback+0x744>)
 8001888:	f012 fcee 	bl	8014268 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800188c:	2100      	movs	r1, #0
 800188e:	483f      	ldr	r0, [pc, #252]	; (800198c <HAL_UART_RxCpltCallback+0x748>)
 8001890:	f00b f938 	bl	800cb04 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001894:	4b3a      	ldr	r3, [pc, #232]	; (8001980 <HAL_UART_RxCpltCallback+0x73c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	4618      	mov	r0, r3
 800189c:	f00f fbbc 	bl	8011018 <osEventFlagsSet>
		break;
 80018a0:	e0f8      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 80018a2:	483b      	ldr	r0, [pc, #236]	; (8001990 <HAL_UART_RxCpltCallback+0x74c>)
 80018a4:	f012 fce0 	bl	8014268 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 80018a8:	2100      	movs	r1, #0
 80018aa:	4838      	ldr	r0, [pc, #224]	; (800198c <HAL_UART_RxCpltCallback+0x748>)
 80018ac:	f00b fa84 	bl	800cdb8 <HAL_TIM_OC_Stop_IT>
		break;
 80018b0:	e0f0      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1C: {
		printf("HK ON \n");
 80018b2:	4838      	ldr	r0, [pc, #224]	; (8001994 <HAL_UART_RxCpltCallback+0x750>)
 80018b4:	f012 fcd8 	bl	8014268 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <HAL_UART_RxCpltCallback+0x73c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2104      	movs	r1, #4
 80018be:	4618      	mov	r0, r3
 80018c0:	f00f fbaa 	bl	8011018 <osEventFlagsSet>
		HK_ENABLED = 1;
 80018c4:	4b34      	ldr	r3, [pc, #208]	; (8001998 <HAL_UART_RxCpltCallback+0x754>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
		break;
 80018ca:	e0e3      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0C: {
		printf("HK OFF\n");
 80018cc:	4833      	ldr	r0, [pc, #204]	; (800199c <HAL_UART_RxCpltCallback+0x758>)
 80018ce:	f012 fccb 	bl	8014268 <puts>
		HK_ENABLED = 0;
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_UART_RxCpltCallback+0x754>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
		break;
 80018d8:	e0dc      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1D: {
		printf("Step Up\n");
 80018da:	4831      	ldr	r0, [pc, #196]	; (80019a0 <HAL_UART_RxCpltCallback+0x75c>)
 80018dc:	f012 fcc4 	bl	8014268 <puts>
		if (step < 17) {
 80018e0:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <HAL_UART_RxCpltCallback+0x760>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	f200 80cd 	bhi.w	8001a86 <HAL_UART_RxCpltCallback+0x842>
			step += 2;
 80018ec:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <HAL_UART_RxCpltCallback+0x760>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	3302      	adds	r3, #2
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <HAL_UART_RxCpltCallback+0x760>)
 80018f8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_UART_RxCpltCallback+0x760>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_UART_RxCpltCallback+0x728>)
 8001904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001908:	2200      	movs	r2, #0
 800190a:	2100      	movs	r1, #0
 800190c:	4818      	ldr	r0, [pc, #96]	; (8001970 <HAL_UART_RxCpltCallback+0x72c>)
 800190e:	f003 fb9a 	bl	8005046 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001912:	2100      	movs	r1, #0
 8001914:	4816      	ldr	r0, [pc, #88]	; (8001970 <HAL_UART_RxCpltCallback+0x72c>)
 8001916:	f003 f9db 	bl	8004cd0 <HAL_DAC_Start>
		}
		break;
 800191a:	e0b4      	b.n	8001a86 <HAL_UART_RxCpltCallback+0x842>
 800191c:	08014c3c 	.word	0x08014c3c
 8001920:	58020400 	.word	0x58020400
 8001924:	08014c48 	.word	0x08014c48
 8001928:	08014f48 	.word	0x08014f48
 800192c:	08014c54 	.word	0x08014c54
 8001930:	58020800 	.word	0x58020800
 8001934:	08014c60 	.word	0x08014c60
 8001938:	08014c70 	.word	0x08014c70
 800193c:	08014c7c 	.word	0x08014c7c
 8001940:	08014c88 	.word	0x08014c88
 8001944:	08014c94 	.word	0x08014c94
 8001948:	08014ca4 	.word	0x08014ca4
 800194c:	08014cb0 	.word	0x08014cb0
 8001950:	08014cbc 	.word	0x08014cbc
 8001954:	08014cc8 	.word	0x08014cc8
 8001958:	08014cd4 	.word	0x08014cd4
 800195c:	08014ce4 	.word	0x08014ce4
 8001960:	08014cf4 	.word	0x08014cf4
 8001964:	08014d00 	.word	0x08014d00
 8001968:	08014d10 	.word	0x08014d10
 800196c:	24000000 	.word	0x24000000
 8001970:	240002d4 	.word	0x240002d4
 8001974:	08014d20 	.word	0x08014d20
 8001978:	08014d30 	.word	0x08014d30
 800197c:	24000634 	.word	0x24000634
 8001980:	240003dc 	.word	0x240003dc
 8001984:	08014d38 	.word	0x08014d38
 8001988:	08014d44 	.word	0x08014d44
 800198c:	240005e8 	.word	0x240005e8
 8001990:	08014d4c 	.word	0x08014d4c
 8001994:	08014d54 	.word	0x08014d54
 8001998:	24000428 	.word	0x24000428
 800199c:	08014d5c 	.word	0x08014d5c
 80019a0:	08014d64 	.word	0x08014d64
 80019a4:	24000080 	.word	0x24000080
	}
	case 0x0D: {
		printf("Step Down\n");
 80019a8:	483c      	ldr	r0, [pc, #240]	; (8001a9c <HAL_UART_RxCpltCallback+0x858>)
 80019aa:	f012 fc5d 	bl	8014268 <puts>
		if (step > 3) {
 80019ae:	4b3c      	ldr	r3, [pc, #240]	; (8001aa0 <HAL_UART_RxCpltCallback+0x85c>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d968      	bls.n	8001a8a <HAL_UART_RxCpltCallback+0x846>
			step -= 2;
 80019b8:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <HAL_UART_RxCpltCallback+0x85c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	3b02      	subs	r3, #2
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <HAL_UART_RxCpltCallback+0x85c>)
 80019c4:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 80019c6:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <HAL_UART_RxCpltCallback+0x85c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <HAL_UART_RxCpltCallback+0x860>)
 80019d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	4833      	ldr	r0, [pc, #204]	; (8001aa8 <HAL_UART_RxCpltCallback+0x864>)
 80019da:	f003 fb34 	bl	8005046 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80019de:	2100      	movs	r1, #0
 80019e0:	4831      	ldr	r0, [pc, #196]	; (8001aa8 <HAL_UART_RxCpltCallback+0x864>)
 80019e2:	f003 f975 	bl	8004cd0 <HAL_DAC_Start>
		}
		break;
 80019e6:	e050      	b.n	8001a8a <HAL_UART_RxCpltCallback+0x846>
	}
	case 0x1E: {
		printf("Factor Up\n");
 80019e8:	4830      	ldr	r0, [pc, #192]	; (8001aac <HAL_UART_RxCpltCallback+0x868>)
 80019ea:	f012 fc3d 	bl	8014268 <puts>
		if (cadence <= 50000) {
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_UART_RxCpltCallback+0x86c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d849      	bhi.n	8001a8e <HAL_UART_RxCpltCallback+0x84a>
			cadence *= 2;
 80019fa:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <HAL_UART_RxCpltCallback+0x86c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4a2b      	ldr	r2, [pc, #172]	; (8001ab0 <HAL_UART_RxCpltCallback+0x86c>)
 8001a02:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001a04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a08:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_UART_RxCpltCallback+0x86c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001a0e:	e03e      	b.n	8001a8e <HAL_UART_RxCpltCallback+0x84a>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001a10:	4828      	ldr	r0, [pc, #160]	; (8001ab4 <HAL_UART_RxCpltCallback+0x870>)
 8001a12:	f012 fc29 	bl	8014268 <puts>
		if (cadence >= 6250) {
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_UART_RxCpltCallback+0x86c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f641 0269 	movw	r2, #6249	; 0x1869
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d937      	bls.n	8001a92 <HAL_UART_RxCpltCallback+0x84e>
			cadence /= 2;
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <HAL_UART_RxCpltCallback+0x86c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	085b      	lsrs	r3, r3, #1
 8001a28:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <HAL_UART_RxCpltCallback+0x86c>)
 8001a2a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <HAL_UART_RxCpltCallback+0x86c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001a36:	e02c      	b.n	8001a92 <HAL_UART_RxCpltCallback+0x84e>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001a38:	481f      	ldr	r0, [pc, #124]	; (8001ab8 <HAL_UART_RxCpltCallback+0x874>)
 8001a3a:	f012 fc15 	bl	8014268 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_UART_RxCpltCallback+0x878>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2102      	movs	r1, #2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f00f fae7 	bl	8011018 <osEventFlagsSet>
		break;
 8001a4a:	e023      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001a4c:	481c      	ldr	r0, [pc, #112]	; (8001ac0 <HAL_UART_RxCpltCallback+0x87c>)
 8001a4e:	f012 fc0b 	bl	8014268 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_UART_RxCpltCallback+0x878>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2104      	movs	r1, #4
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00f fadd 	bl	8011018 <osEventFlagsSet>
		break;
 8001a5e:	e019      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001a60:	4818      	ldr	r0, [pc, #96]	; (8001ac4 <HAL_UART_RxCpltCallback+0x880>)
 8001a62:	f012 fc01 	bl	8014268 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_UART_RxCpltCallback+0x878>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f00f fad3 	bl	8011018 <osEventFlagsSet>
		break;
 8001a72:	e00f      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xAF: {
		sync();
 8001a74:	f000 f954 	bl	8001d20 <sync>
		break;
 8001a78:	e00c      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
	case 0xCF: {
		// TODO: set a flag to start idle mode
		break;
	}
	default: {
		printf("Unknown Command\n");
 8001a7a:	4813      	ldr	r0, [pc, #76]	; (8001ac8 <HAL_UART_RxCpltCallback+0x884>)
 8001a7c:	f012 fbf4 	bl	8014268 <puts>
		break;
 8001a80:	e008      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001a82:	bf00      	nop
 8001a84:	e006      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001a86:	bf00      	nop
 8001a88:	e004      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001a8a:	bf00      	nop
 8001a8c:	e002      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001a8e:	bf00      	nop
 8001a90:	e000      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001a92:	bf00      	nop
	}
	}
}
 8001a94:	bf00      	nop
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	08014d6c 	.word	0x08014d6c
 8001aa0:	24000080 	.word	0x24000080
 8001aa4:	24000000 	.word	0x24000000
 8001aa8:	240002d4 	.word	0x240002d4
 8001aac:	08014d78 	.word	0x08014d78
 8001ab0:	24000084 	.word	0x24000084
 8001ab4:	08014d84 	.word	0x08014d84
 8001ab8:	08014d90 	.word	0x08014d90
 8001abc:	240003e0 	.word	0x240003e0
 8001ac0:	08014da0 	.word	0x08014da0
 8001ac4:	08014dac 	.word	0x08014dac
 8001ac8:	08014db8 	.word	0x08014db8

08001acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ad0:	f001 fb6a 	bl	80031a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad4:	f000 f826 	bl	8001b24 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ad8:	f000 f8a4 	bl	8001c24 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001adc:	f7ff fa8c 	bl	8000ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ae0:	f7ff f902 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001ae4:	f000 ff3c 	bl	8002960 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001ae8:	f001 f868 	bl	8002bbc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001aec:	f7ff fafe 	bl	80010ec <MX_I2C1_Init>
  MX_SPI2_Init();
 8001af0:	f000 fa8e 	bl	8002010 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001af4:	f000 febe 	bl	8002874 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001af8:	f000 fe0e 	bl	8002718 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001afc:	f7fe fe94 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001b00:	f7fe fd70 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001b04:	f7ff f83c 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001b08:	f000 fa2a 	bl	8001f60 <MX_SPI1_Init>
  MX_RTC_Init();
 8001b0c:	f000 f956 	bl	8001dbc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001b10:	f000 f8b8 	bl	8001c84 <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001b14:	f00f f92a 	bl	8010d6c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001b18:	f7ff f926 	bl	8000d68 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b1c:	f00f f94a 	bl	8010db4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001b20:	e7fe      	b.n	8001b20 <main+0x54>
	...

08001b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b09c      	sub	sp, #112	; 0x70
 8001b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2e:	224c      	movs	r2, #76	; 0x4c
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f012 fb22 	bl	801417c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f012 fb1c 	bl	801417c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001b44:	2002      	movs	r0, #2
 8001b46:	f006 fe11 	bl	800876c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <SystemClock_Config+0xf8>)
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b52:	4a32      	ldr	r2, [pc, #200]	; (8001c1c <SystemClock_Config+0xf8>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001b5a:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <SystemClock_Config+0xf8>)
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <SystemClock_Config+0xfc>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b6c:	4a2c      	ldr	r2, [pc, #176]	; (8001c20 <SystemClock_Config+0xfc>)
 8001b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <SystemClock_Config+0xfc>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b80:	bf00      	nop
 8001b82:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <SystemClock_Config+0xfc>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b8e:	d1f8      	bne.n	8001b82 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001b90:	2303      	movs	r3, #3
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001b9a:	2309      	movs	r3, #9
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b9e:	2340      	movs	r3, #64	; 0x40
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001baa:	2304      	movs	r3, #4
 8001bac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f006 fe06 	bl	80087e0 <HAL_RCC_OscConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001bda:	f000 f8e9 	bl	8001db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bde:	233f      	movs	r3, #63	; 0x3f
 8001be0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be2:	2303      	movs	r3, #3
 8001be4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	2101      	movs	r1, #1
 8001c02:	4618      	mov	r0, r3
 8001c04:	f007 fa46 	bl	8009094 <HAL_RCC_ClockConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001c0e:	f000 f8cf 	bl	8001db0 <Error_Handler>
  }
}
 8001c12:	bf00      	nop
 8001c14:	3770      	adds	r7, #112	; 0x70
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	58000400 	.word	0x58000400
 8001c20:	58024800 	.word	0x58024800

08001c24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b0b0      	sub	sp, #192	; 0xc0
 8001c28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	22c0      	movs	r2, #192	; 0xc0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f012 faa3 	bl	801417c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001c42:	2304      	movs	r3, #4
 8001c44:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001c46:	2320      	movs	r3, #32
 8001c48:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001c4a:	2308      	movs	r3, #8
 8001c4c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001c4e:	2304      	movs	r3, #4
 8001c50:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c68:	463b      	mov	r3, r7
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f007 fde0 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001c76:	f000 f89b 	bl	8001db0 <Error_Handler>
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	37c0      	adds	r7, #192	; 0xc0
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f00f f986 	bl	8010f9a <osEventFlagsNew>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <system_setup+0x84>)
 8001c92:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <system_setup+0x84>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d100      	bne.n	8001c9e <system_setup+0x1a>
        while (1);
 8001c9c:	e7fe      	b.n	8001c9c <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f00f f97b 	bl	8010f9a <osEventFlagsNew>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <system_setup+0x88>)
 8001ca8:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <system_setup+0x88>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d100      	bne.n	8001cb4 <system_setup+0x30>
        while (1);
 8001cb2:	e7fe      	b.n	8001cb2 <system_setup+0x2e>
    }

	// ---- 2 ---- //
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_SIZE, sizeof(packet_t), NULL);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2108      	movs	r1, #8
 8001cb8:	2080      	movs	r0, #128	; 0x80
 8001cba:	f00f fa57 	bl	801116c <osMessageQueueNew>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <system_setup+0x8c>)
 8001cc2:	6013      	str	r3, [r2, #0]
	if (mid_MsgQueue == NULL) {
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <system_setup+0x8c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d100      	bne.n	8001cce <system_setup+0x4a>
		while (1);
 8001ccc:	e7fe      	b.n	8001ccc <system_setup+0x48>
	}

	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8001cce:	f001 f863 	bl	8002d98 <voltage_monitor_init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d100      	bne.n	8001cda <system_setup+0x56>
		while (1);
 8001cd8:	e7fe      	b.n	8001cd8 <system_setup+0x54>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <system_setup+0x90>)
 8001cde:	f00a ff11 	bl	800cb04 <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8001ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ce6:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 8001cec:	f000 f8f8 	bl	8001ee0 <init_adc_dma>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d100      	bne.n	8001cf8 <system_setup+0x74>
		while (1);
 8001cf6:	e7fe      	b.n	8001cf6 <system_setup+0x72>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4907      	ldr	r1, [pc, #28]	; (8001d18 <system_setup+0x94>)
 8001cfc:	4807      	ldr	r0, [pc, #28]	; (8001d1c <system_setup+0x98>)
 8001cfe:	f00c fbeb 	bl	800e4d8 <HAL_UART_Receive_IT>

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	240003dc 	.word	0x240003dc
 8001d0c:	240003e0 	.word	0x240003e0
 8001d10:	240003e4 	.word	0x240003e4
 8001d14:	24000680 	.word	0x24000680
 8001d18:	240003e8 	.word	0x240003e8
 8001d1c:	240006cc 	.word	0x240006cc

08001d20 <sync>:

void sync() {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
	send_ACK();
 8001d26:	f000 f81f 	bl	8001d68 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8001d2a:	480d      	ldr	r0, [pc, #52]	; (8001d60 <sync+0x40>)
 8001d2c:	f00c fc20 	bl	800e570 <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8001d30:	2364      	movs	r3, #100	; 0x64
 8001d32:	2209      	movs	r2, #9
 8001d34:	490b      	ldr	r1, [pc, #44]	; (8001d64 <sync+0x44>)
 8001d36:	480a      	ldr	r0, [pc, #40]	; (8001d60 <sync+0x40>)
 8001d38:	f00c fb06 	bl	800e348 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <sync+0x44>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	2bff      	cmp	r3, #255	; 0xff
 8001d46:	d1f3      	bne.n	8001d30 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4906      	ldr	r1, [pc, #24]	; (8001d64 <sync+0x44>)
 8001d4c:	4804      	ldr	r0, [pc, #16]	; (8001d60 <sync+0x40>)
 8001d4e:	f00c fbc3 	bl	800e4d8 <HAL_UART_Receive_IT>

	send_ACK();
 8001d52:	f000 f809 	bl	8001d68 <send_ACK>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	240006cc 	.word	0x240006cc
 8001d64:	240003e8 	.word	0x240003e8

08001d68 <send_ACK>:

void send_ACK() {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <send_ACK+0x1c>)
 8001d6e:	22ff      	movs	r2, #255	; 0xff
 8001d70:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8001d72:	2364      	movs	r3, #100	; 0x64
 8001d74:	2201      	movs	r2, #1
 8001d76:	4903      	ldr	r1, [pc, #12]	; (8001d84 <send_ACK+0x1c>)
 8001d78:	4803      	ldr	r0, [pc, #12]	; (8001d88 <send_ACK+0x20>)
 8001d7a:	f00c fa57 	bl	800e22c <HAL_UART_Transmit>
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2400042c 	.word	0x2400042c
 8001d88:	240006cc 	.word	0x240006cc

08001d8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d101      	bne.n	8001da2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d9e:	f001 fa3f 	bl	8003220 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40001000 	.word	0x40001000

08001db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db4:	b672      	cpsid	i
}
 8001db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001db8:	e7fe      	b.n	8001db8 <Error_Handler+0x8>
	...

08001dbc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dd4:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <MX_RTC_Init+0xb4>)
 8001dd6:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <MX_RTC_Init+0xb8>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <MX_RTC_Init+0xb4>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8001de0:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <MX_RTC_Init+0xb4>)
 8001de2:	2263      	movs	r2, #99	; 0x63
 8001de4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <MX_RTC_Init+0xb4>)
 8001de8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <MX_RTC_Init+0xb4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001df4:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <MX_RTC_Init+0xb4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	; (8001e70 <MX_RTC_Init+0xb4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <MX_RTC_Init+0xb4>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e06:	481a      	ldr	r0, [pc, #104]	; (8001e70 <MX_RTC_Init+0xb4>)
 8001e08:	f00a fa10 	bl	800c22c <HAL_RTC_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001e12:	f7ff ffcd 	bl	8001db0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480f      	ldr	r0, [pc, #60]	; (8001e70 <MX_RTC_Init+0xb4>)
 8001e32:	f00a fa7d 	bl	800c330 <HAL_RTC_SetTime>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001e3c:	f7ff ffb8 	bl	8001db0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e40:	2301      	movs	r3, #1
 8001e42:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001e44:	2301      	movs	r3, #1
 8001e46:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e50:	463b      	mov	r3, r7
 8001e52:	2201      	movs	r2, #1
 8001e54:	4619      	mov	r1, r3
 8001e56:	4806      	ldr	r0, [pc, #24]	; (8001e70 <MX_RTC_Init+0xb4>)
 8001e58:	f00a fb08 	bl	800c46c <HAL_RTC_SetDate>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001e62:	f7ff ffa5 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	24000430 	.word	0x24000430
 8001e74:	58004000 	.word	0x58004000

08001e78 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0b2      	sub	sp, #200	; 0xc8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e80:	f107 0308 	add.w	r3, r7, #8
 8001e84:	22c0      	movs	r2, #192	; 0xc0
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f012 f977 	bl	801417c <memset>
  if(rtcHandle->Instance==RTC)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <HAL_RTC_MspInit+0x5c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d118      	bne.n	8001eca <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_RTC_MspInit+0x60>)
 8001ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f007 fcbe 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8001eba:	f7ff ff79 	bl	8001db0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_RTC_MspInit+0x64>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	4a06      	ldr	r2, [pc, #24]	; (8001edc <HAL_RTC_MspInit+0x64>)
 8001ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001eca:	bf00      	nop
 8001ecc:	37c8      	adds	r7, #200	; 0xc8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	58004000 	.word	0x58004000
 8001ed8:	00019300 	.word	0x00019300
 8001edc:	58024400 	.word	0x58024400

08001ee0 <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001eea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001eee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ef2:	4817      	ldr	r0, [pc, #92]	; (8001f50 <init_adc_dma+0x70>)
 8001ef4:	f002 fca8 	bl	8004848 <HAL_ADCEx_Calibration_Start>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8001efe:	f7ff ff57 	bl	8001db0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001f02:	220b      	movs	r2, #11
 8001f04:	4913      	ldr	r1, [pc, #76]	; (8001f54 <init_adc_dma+0x74>)
 8001f06:	4812      	ldr	r0, [pc, #72]	; (8001f50 <init_adc_dma+0x70>)
 8001f08:	f001 fd7c 	bl	8003a04 <HAL_ADC_Start_DMA>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001f12:	f7ff ff4d 	bl	8001db0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001f16:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f1e:	480e      	ldr	r0, [pc, #56]	; (8001f58 <init_adc_dma+0x78>)
 8001f20:	f002 fc92 	bl	8004848 <HAL_ADCEx_Calibration_Start>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8001f2a:	f7ff ff41 	bl	8001db0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8001f2e:	2204      	movs	r2, #4
 8001f30:	490a      	ldr	r1, [pc, #40]	; (8001f5c <init_adc_dma+0x7c>)
 8001f32:	4809      	ldr	r0, [pc, #36]	; (8001f58 <init_adc_dma+0x78>)
 8001f34:	f001 fd66 	bl	8003a04 <HAL_ADC_Start_DMA>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8001f3e:	f7ff ff37 	bl	8001db0 <Error_Handler>
	}
	status = 1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	71fb      	strb	r3, [r7, #7]

	return status;
 8001f46:	79fb      	ldrb	r3, [r7, #7]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	2400011c 	.word	0x2400011c
 8001f54:	24000460 	.word	0x24000460
 8001f58:	24000180 	.word	0x24000180
 8001f5c:	24000480 	.word	0x24000480

08001f60 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001f64:	4b28      	ldr	r3, [pc, #160]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001f66:	4a29      	ldr	r2, [pc, #164]	; (800200c <MX_SPI1_Init+0xac>)
 8001f68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f6a:	4b27      	ldr	r3, [pc, #156]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001f6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001f72:	4b25      	ldr	r3, [pc, #148]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001f74:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f78:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001f7a:	4b23      	ldr	r3, [pc, #140]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f80:	4b21      	ldr	r3, [pc, #132]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001f8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001f94:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001f96:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001f9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fa2:	4b19      	ldr	r3, [pc, #100]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001fb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <MX_SPI1_Init+0xa8>)
 8001ff4:	f00a fb78 	bl	800c6e8 <HAL_SPI_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8001ffe:	f7ff fed7 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	24000488 	.word	0x24000488
 800200c:	40013000 	.word	0x40013000

08002010 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002014:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <MX_SPI2_Init+0xa8>)
 8002016:	4a29      	ldr	r2, [pc, #164]	; (80020bc <MX_SPI2_Init+0xac>)
 8002018:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <MX_SPI2_Init+0xa8>)
 800201c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002020:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002022:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <MX_SPI2_Init+0xa8>)
 8002024:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002028:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800202a:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <MX_SPI2_Init+0xa8>)
 800202c:	220f      	movs	r2, #15
 800202e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002030:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <MX_SPI2_Init+0xa8>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <MX_SPI2_Init+0xa8>)
 8002038:	2200      	movs	r2, #0
 800203a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800203c:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <MX_SPI2_Init+0xa8>)
 800203e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002042:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002044:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <MX_SPI2_Init+0xa8>)
 8002046:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800204a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <MX_SPI2_Init+0xa8>)
 800204e:	2200      	movs	r2, #0
 8002050:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <MX_SPI2_Init+0xa8>)
 8002054:	2200      	movs	r2, #0
 8002056:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002058:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <MX_SPI2_Init+0xa8>)
 800205a:	2200      	movs	r2, #0
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <MX_SPI2_Init+0xa8>)
 8002060:	2200      	movs	r2, #0
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <MX_SPI2_Init+0xa8>)
 8002066:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800206a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <MX_SPI2_Init+0xa8>)
 800206e:	2200      	movs	r2, #0
 8002070:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <MX_SPI2_Init+0xa8>)
 8002074:	2200      	movs	r2, #0
 8002076:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <MX_SPI2_Init+0xa8>)
 800207a:	2200      	movs	r2, #0
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <MX_SPI2_Init+0xa8>)
 8002080:	2200      	movs	r2, #0
 8002082:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <MX_SPI2_Init+0xa8>)
 8002086:	2200      	movs	r2, #0
 8002088:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800208a:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <MX_SPI2_Init+0xa8>)
 800208c:	2200      	movs	r2, #0
 800208e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <MX_SPI2_Init+0xa8>)
 8002092:	2200      	movs	r2, #0
 8002094:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <MX_SPI2_Init+0xa8>)
 8002098:	2200      	movs	r2, #0
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <MX_SPI2_Init+0xa8>)
 800209e:	2200      	movs	r2, #0
 80020a0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <MX_SPI2_Init+0xa8>)
 80020a4:	f00a fb20 	bl	800c6e8 <HAL_SPI_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80020ae:	f7ff fe7f 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	24000510 	.word	0x24000510
 80020bc:	40003800 	.word	0x40003800

080020c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b0bc      	sub	sp, #240	; 0xf0
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d8:	f107 0318 	add.w	r3, r7, #24
 80020dc:	22c0      	movs	r2, #192	; 0xc0
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f012 f84b 	bl	801417c <memset>
  if(spiHandle->Instance==SPI1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a4c      	ldr	r2, [pc, #304]	; (800221c <HAL_SPI_MspInit+0x15c>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d145      	bne.n	800217c <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80020f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002100:	f107 0318 	add.w	r3, r7, #24
 8002104:	4618      	mov	r0, r3
 8002106:	f007 fb93 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002110:	f7ff fe4e 	bl	8001db0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002114:	4b42      	ldr	r3, [pc, #264]	; (8002220 <HAL_SPI_MspInit+0x160>)
 8002116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800211a:	4a41      	ldr	r2, [pc, #260]	; (8002220 <HAL_SPI_MspInit+0x160>)
 800211c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002120:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002124:	4b3e      	ldr	r3, [pc, #248]	; (8002220 <HAL_SPI_MspInit+0x160>)
 8002126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800212a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_SPI_MspInit+0x160>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002138:	4a39      	ldr	r2, [pc, #228]	; (8002220 <HAL_SPI_MspInit+0x160>)
 800213a:	f043 0302 	orr.w	r3, r3, #2
 800213e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_SPI_MspInit+0x160>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002150:	2318      	movs	r3, #24
 8002152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002168:	2305      	movs	r3, #5
 800216a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002172:	4619      	mov	r1, r3
 8002174:	482b      	ldr	r0, [pc, #172]	; (8002224 <HAL_SPI_MspInit+0x164>)
 8002176:	f005 ffd7 	bl	8008128 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800217a:	e04a      	b.n	8002212 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a29      	ldr	r2, [pc, #164]	; (8002228 <HAL_SPI_MspInit+0x168>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d145      	bne.n	8002212 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002186:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002192:	2300      	movs	r3, #0
 8002194:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002196:	f107 0318 	add.w	r3, r7, #24
 800219a:	4618      	mov	r0, r3
 800219c:	f007 fb48 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80021a6:	f7ff fe03 	bl	8001db0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_SPI_MspInit+0x160>)
 80021ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021b0:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_SPI_MspInit+0x160>)
 80021b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_SPI_MspInit+0x160>)
 80021bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_SPI_MspInit+0x160>)
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ce:	4a14      	ldr	r2, [pc, #80]	; (8002220 <HAL_SPI_MspInit+0x160>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_SPI_MspInit+0x160>)
 80021da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80021e6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80021ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002200:	2305      	movs	r3, #5
 8002202:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800220a:	4619      	mov	r1, r3
 800220c:	4805      	ldr	r0, [pc, #20]	; (8002224 <HAL_SPI_MspInit+0x164>)
 800220e:	f005 ff8b 	bl	8008128 <HAL_GPIO_Init>
}
 8002212:	bf00      	nop
 8002214:	37f0      	adds	r7, #240	; 0xf0
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40013000 	.word	0x40013000
 8002220:	58024400 	.word	0x58024400
 8002224:	58020400 	.word	0x58020400
 8002228:	40003800 	.word	0x40003800

0800222c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_MspInit+0x38>)
 8002234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002238:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <HAL_MspInit+0x38>)
 800223a:	f043 0302 	orr.w	r3, r3, #2
 800223e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <HAL_MspInit+0x38>)
 8002244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002250:	2200      	movs	r2, #0
 8002252:	210f      	movs	r1, #15
 8002254:	f06f 0001 	mvn.w	r0, #1
 8002258:	f002 fcf0 	bl	8004c3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	58024400 	.word	0x58024400

08002268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b090      	sub	sp, #64	; 0x40
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b0f      	cmp	r3, #15
 8002274:	d827      	bhi.n	80022c6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002276:	2200      	movs	r2, #0
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	2036      	movs	r0, #54	; 0x36
 800227c:	f002 fcde 	bl	8004c3c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002280:	2036      	movs	r0, #54	; 0x36
 8002282:	f002 fcf5 	bl	8004c70 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002286:	4a29      	ldr	r2, [pc, #164]	; (800232c <HAL_InitTick+0xc4>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_InitTick+0xc8>)
 800228e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002292:	4a27      	ldr	r2, [pc, #156]	; (8002330 <HAL_InitTick+0xc8>)
 8002294:	f043 0310 	orr.w	r3, r3, #16
 8002298:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800229c:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_InitTick+0xc8>)
 800229e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022aa:	f107 0210 	add.w	r2, r7, #16
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f007 fa79 	bl	80097ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80022be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d106      	bne.n	80022d2 <HAL_InitTick+0x6a>
 80022c4:	e001      	b.n	80022ca <HAL_InitTick+0x62>
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e02b      	b.n	8002322 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022ca:	f007 fa43 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 80022ce:	63f8      	str	r0, [r7, #60]	; 0x3c
 80022d0:	e004      	b.n	80022dc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80022d2:	f007 fa3f 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 80022d6:	4603      	mov	r3, r0
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022de:	4a15      	ldr	r2, [pc, #84]	; (8002334 <HAL_InitTick+0xcc>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	0c9b      	lsrs	r3, r3, #18
 80022e6:	3b01      	subs	r3, #1
 80022e8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <HAL_InitTick+0xd0>)
 80022ec:	4a13      	ldr	r2, [pc, #76]	; (800233c <HAL_InitTick+0xd4>)
 80022ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_InitTick+0xd0>)
 80022f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022f8:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <HAL_InitTick+0xd0>)
 80022fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_InitTick+0xd0>)
 8002300:	2200      	movs	r2, #0
 8002302:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_InitTick+0xd0>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800230a:	480b      	ldr	r0, [pc, #44]	; (8002338 <HAL_InitTick+0xd0>)
 800230c:	f00a fb2b 	bl	800c966 <HAL_TIM_Base_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d104      	bne.n	8002320 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002316:	4808      	ldr	r0, [pc, #32]	; (8002338 <HAL_InitTick+0xd0>)
 8002318:	f00a fb7c 	bl	800ca14 <HAL_TIM_Base_Start_IT>
 800231c:	4603      	mov	r3, r0
 800231e:	e000      	b.n	8002322 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	3740      	adds	r7, #64	; 0x40
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	24000090 	.word	0x24000090
 8002330:	58024400 	.word	0x58024400
 8002334:	431bde83 	.word	0x431bde83
 8002338:	24000598 	.word	0x24000598
 800233c:	40001000 	.word	0x40001000

08002340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002344:	e7fe      	b.n	8002344 <NMI_Handler+0x4>

08002346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800234a:	e7fe      	b.n	800234a <HardFault_Handler+0x4>

0800234c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <MemManage_Handler+0x4>

08002352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002356:	e7fe      	b.n	8002356 <BusFault_Handler+0x4>

08002358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800235c:	e7fe      	b.n	800235c <UsageFault_Handler+0x4>

0800235e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235e:	b480      	push	{r7}
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <DMA1_Stream0_IRQHandler+0x10>)
 8002372:	f004 fbbb 	bl	8006aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	240001e4 	.word	0x240001e4

08002380 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <DMA1_Stream1_IRQHandler+0x10>)
 8002386:	f004 fbb1 	bl	8006aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	2400025c 	.word	0x2400025c

08002394 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <DMA1_Stream2_IRQHandler+0x10>)
 800239a:	f004 fba7 	bl	8006aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	24000760 	.word	0x24000760

080023a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <DMA1_Stream5_IRQHandler+0x10>)
 80023ae:	f004 fb9d 	bl	8006aec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	240002e8 	.word	0x240002e8

080023bc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <TIM1_BRK_IRQHandler+0x10>)
 80023c2:	f00a fe3e 	bl	800d042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	240005e8 	.word	0x240005e8

080023d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <TIM1_UP_IRQHandler+0x10>)
 80023d6:	f00a fe34 	bl	800d042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	240005e8 	.word	0x240005e8

080023e4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <TIM1_TRG_COM_IRQHandler+0x10>)
 80023ea:	f00a fe2a 	bl	800d042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	240005e8 	.word	0x240005e8

080023f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <TIM1_CC_IRQHandler+0x10>)
 80023fe:	f00a fe20 	bl	800d042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	240005e8 	.word	0x240005e8

0800240c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <TIM2_IRQHandler+0x10>)
 8002412:	f00a fe16 	bl	800d042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	24000634 	.word	0x24000634

08002420 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <TIM3_IRQHandler+0x10>)
 8002426:	f00a fe0c 	bl	800d042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	24000680 	.word	0x24000680

08002434 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <USART1_IRQHandler+0x10>)
 800243a:	f00c f94f 	bl	800e6dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	240006cc 	.word	0x240006cc

08002448 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <TIM6_DAC_IRQHandler+0x20>)
 800244e:	791b      	ldrb	r3, [r3, #4]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002456:	4804      	ldr	r0, [pc, #16]	; (8002468 <TIM6_DAC_IRQHandler+0x20>)
 8002458:	f002 fd9f 	bl	8004f9a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800245c:	4803      	ldr	r0, [pc, #12]	; (800246c <TIM6_DAC_IRQHandler+0x24>)
 800245e:	f00a fdf0 	bl	800d042 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	240002d4 	.word	0x240002d4
 800246c:	24000598 	.word	0x24000598

08002470 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <ITM_SendChar+0x48>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <ITM_SendChar+0x48>)
 8002480:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002484:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <ITM_SendChar+0x4c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <ITM_SendChar+0x4c>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002492:	bf00      	nop
 8002494:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f8      	beq.n	8002494 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80024a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	6013      	str	r3, [r2, #0]
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	e000edfc 	.word	0xe000edfc
 80024bc:	e0000e00 	.word	0xe0000e00

080024c0 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e00a      	b.n	80024e8 <_read+0x28>
		*ptr++ = __io_getchar();
 80024d2:	f3af 8000 	nop.w
 80024d6:	4601      	mov	r1, r0
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	60ba      	str	r2, [r7, #8]
 80024de:	b2ca      	uxtb	r2, r1
 80024e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	dbf0      	blt.n	80024d2 <_read+0x12>
	}

	return len;
 80024f0:	687b      	ldr	r3, [r7, #4]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e009      	b.n	8002520 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	60ba      	str	r2, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ffab 	bl	8002470 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3301      	adds	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	dbf1      	blt.n	800250c <_write+0x12>
	}
	return len;
 8002528:	687b      	ldr	r3, [r7, #4]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_close>:

int _close(int file) {
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <_fstat>:

int _fstat(int file, struct stat *st) {
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800255a:	605a      	str	r2, [r3, #4]
	return 0;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <_isatty>:

int _isatty(int file) {
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80025a4:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <_sbrk+0x64>)
 80025ba:	4a12      	ldr	r2, [pc, #72]	; (8002604 <_sbrk+0x68>)
 80025bc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d207      	bcs.n	80025dc <_sbrk+0x40>
		errno = ENOMEM;
 80025cc:	f011 fd9e 	bl	801410c <__errno>
 80025d0:	4603      	mov	r3, r0
 80025d2:	220c      	movs	r2, #12
 80025d4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025da:	e009      	b.n	80025f0 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <_sbrk+0x64>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	4a05      	ldr	r2, [pc, #20]	; (8002600 <_sbrk+0x64>)
 80025ec:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	24080000 	.word	0x24080000
 80025fc:	00000400 	.word	0x00000400
 8002600:	240005e4 	.word	0x240005e4
 8002604:	240051f0 	.word	0x240051f0

08002608 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800260c:	4b37      	ldr	r3, [pc, #220]	; (80026ec <SystemInit+0xe4>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	4a36      	ldr	r2, [pc, #216]	; (80026ec <SystemInit+0xe4>)
 8002614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800261c:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <SystemInit+0xe8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	2b06      	cmp	r3, #6
 8002626:	d807      	bhi.n	8002638 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002628:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <SystemInit+0xe8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 030f 	bic.w	r3, r3, #15
 8002630:	4a2f      	ldr	r2, [pc, #188]	; (80026f0 <SystemInit+0xe8>)
 8002632:	f043 0307 	orr.w	r3, r3, #7
 8002636:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <SystemInit+0xec>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2d      	ldr	r2, [pc, #180]	; (80026f4 <SystemInit+0xec>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002644:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <SystemInit+0xec>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800264a:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <SystemInit+0xec>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4929      	ldr	r1, [pc, #164]	; (80026f4 <SystemInit+0xec>)
 8002650:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <SystemInit+0xf0>)
 8002652:	4013      	ands	r3, r2
 8002654:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002656:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <SystemInit+0xe8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d007      	beq.n	8002672 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <SystemInit+0xe8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 030f 	bic.w	r3, r3, #15
 800266a:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <SystemInit+0xe8>)
 800266c:	f043 0307 	orr.w	r3, r3, #7
 8002670:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <SystemInit+0xec>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <SystemInit+0xec>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <SystemInit+0xec>)
 8002680:	2200      	movs	r2, #0
 8002682:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <SystemInit+0xec>)
 8002686:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <SystemInit+0xf4>)
 8002688:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <SystemInit+0xec>)
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <SystemInit+0xf8>)
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002690:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <SystemInit+0xec>)
 8002692:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <SystemInit+0xfc>)
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <SystemInit+0xec>)
 8002698:	2200      	movs	r2, #0
 800269a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 800269c:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <SystemInit+0xec>)
 800269e:	4a19      	ldr	r2, [pc, #100]	; (8002704 <SystemInit+0xfc>)
 80026a0:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <SystemInit+0xec>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <SystemInit+0xec>)
 80026aa:	4a16      	ldr	r2, [pc, #88]	; (8002704 <SystemInit+0xfc>)
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80026ae:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <SystemInit+0xec>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80026b4:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <SystemInit+0xec>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <SystemInit+0xec>)
 80026ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026be:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <SystemInit+0xec>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <SystemInit+0x100>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <SystemInit+0x104>)
 80026cc:	4013      	ands	r3, r2
 80026ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026d2:	d202      	bcs.n	80026da <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <SystemInit+0x108>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <SystemInit+0x10c>)
 80026dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80026e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000ed00 	.word	0xe000ed00
 80026f0:	52002000 	.word	0x52002000
 80026f4:	58024400 	.word	0x58024400
 80026f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80026fc:	02020200 	.word	0x02020200
 8002700:	01ff0000 	.word	0x01ff0000
 8002704:	01010280 	.word	0x01010280
 8002708:	5c001000 	.word	0x5c001000
 800270c:	ffff0000 	.word	0xffff0000
 8002710:	51008108 	.word	0x51008108
 8002714:	52004000 	.word	0x52004000

08002718 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b09a      	sub	sp, #104	; 0x68
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	605a      	str	r2, [r3, #4]
 8002728:	609a      	str	r2, [r3, #8]
 800272a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002738:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
 8002748:	615a      	str	r2, [r3, #20]
 800274a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	222c      	movs	r2, #44	; 0x2c
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f011 fd12 	bl	801417c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002758:	4b44      	ldr	r3, [pc, #272]	; (800286c <MX_TIM1_Init+0x154>)
 800275a:	4a45      	ldr	r2, [pc, #276]	; (8002870 <MX_TIM1_Init+0x158>)
 800275c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 800275e:	4b43      	ldr	r3, [pc, #268]	; (800286c <MX_TIM1_Init+0x154>)
 8002760:	2231      	movs	r2, #49	; 0x31
 8002762:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002764:	4b41      	ldr	r3, [pc, #260]	; (800286c <MX_TIM1_Init+0x154>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800276a:	4b40      	ldr	r3, [pc, #256]	; (800286c <MX_TIM1_Init+0x154>)
 800276c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002770:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002772:	4b3e      	ldr	r3, [pc, #248]	; (800286c <MX_TIM1_Init+0x154>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002778:	4b3c      	ldr	r3, [pc, #240]	; (800286c <MX_TIM1_Init+0x154>)
 800277a:	2200      	movs	r2, #0
 800277c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800277e:	4b3b      	ldr	r3, [pc, #236]	; (800286c <MX_TIM1_Init+0x154>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002784:	4839      	ldr	r0, [pc, #228]	; (800286c <MX_TIM1_Init+0x154>)
 8002786:	f00a f8ee 	bl	800c966 <HAL_TIM_Base_Init>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002790:	f7ff fb0e 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002798:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800279a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800279e:	4619      	mov	r1, r3
 80027a0:	4832      	ldr	r0, [pc, #200]	; (800286c <MX_TIM1_Init+0x154>)
 80027a2:	f00a fe69 	bl	800d478 <HAL_TIM_ConfigClockSource>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80027ac:	f7ff fb00 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027b0:	482e      	ldr	r0, [pc, #184]	; (800286c <MX_TIM1_Init+0x154>)
 80027b2:	f00a fbe5 	bl	800cf80 <HAL_TIM_PWM_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80027bc:	f7ff faf8 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c0:	2300      	movs	r3, #0
 80027c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027d0:	4619      	mov	r1, r3
 80027d2:	4826      	ldr	r0, [pc, #152]	; (800286c <MX_TIM1_Init+0x154>)
 80027d4:	f00b fbb0 	bl	800df38 <HAL_TIMEx_MasterConfigSynchronization>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80027de:	f7ff fae7 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e2:	2360      	movs	r3, #96	; 0x60
 80027e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80027e6:	f240 13df 	movw	r3, #479	; 0x1df
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ec:	2300      	movs	r3, #0
 80027ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027f0:	2300      	movs	r3, #0
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027f8:	2300      	movs	r3, #0
 80027fa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027fc:	2300      	movs	r3, #0
 80027fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002804:	2200      	movs	r2, #0
 8002806:	4619      	mov	r1, r3
 8002808:	4818      	ldr	r0, [pc, #96]	; (800286c <MX_TIM1_Init+0x154>)
 800280a:	f00a fd21 	bl	800d250 <HAL_TIM_PWM_ConfigChannel>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002814:	f7ff facc 	bl	8001db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800282c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002830:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800283a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	4619      	mov	r1, r3
 800284c:	4807      	ldr	r0, [pc, #28]	; (800286c <MX_TIM1_Init+0x154>)
 800284e:	f00b fc01 	bl	800e054 <HAL_TIMEx_ConfigBreakDeadTime>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8002858:	f7ff faaa 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800285c:	4803      	ldr	r0, [pc, #12]	; (800286c <MX_TIM1_Init+0x154>)
 800285e:	f000 f949 	bl	8002af4 <HAL_TIM_MspPostInit>

}
 8002862:	bf00      	nop
 8002864:	3768      	adds	r7, #104	; 0x68
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	240005e8 	.word	0x240005e8
 8002870:	40010000 	.word	0x40010000

08002874 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08e      	sub	sp, #56	; 0x38
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800287a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	605a      	str	r2, [r3, #4]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002888:	f107 031c 	add.w	r3, r7, #28
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002894:	463b      	mov	r3, r7
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
 80028a0:	611a      	str	r2, [r3, #16]
 80028a2:	615a      	str	r2, [r3, #20]
 80028a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028a6:	4b2d      	ldr	r3, [pc, #180]	; (800295c <MX_TIM2_Init+0xe8>)
 80028a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 80028ae:	4b2b      	ldr	r3, [pc, #172]	; (800295c <MX_TIM2_Init+0xe8>)
 80028b0:	2231      	movs	r2, #49	; 0x31
 80028b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b4:	4b29      	ldr	r3, [pc, #164]	; (800295c <MX_TIM2_Init+0xe8>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80028ba:	4b28      	ldr	r3, [pc, #160]	; (800295c <MX_TIM2_Init+0xe8>)
 80028bc:	f640 4234 	movw	r2, #3124	; 0xc34
 80028c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c2:	4b26      	ldr	r3, [pc, #152]	; (800295c <MX_TIM2_Init+0xe8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028c8:	4b24      	ldr	r3, [pc, #144]	; (800295c <MX_TIM2_Init+0xe8>)
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028ce:	4823      	ldr	r0, [pc, #140]	; (800295c <MX_TIM2_Init+0xe8>)
 80028d0:	f00a f849 	bl	800c966 <HAL_TIM_Base_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80028da:	f7ff fa69 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028e8:	4619      	mov	r1, r3
 80028ea:	481c      	ldr	r0, [pc, #112]	; (800295c <MX_TIM2_Init+0xe8>)
 80028ec:	f00a fdc4 	bl	800d478 <HAL_TIM_ConfigClockSource>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80028f6:	f7ff fa5b 	bl	8001db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028fa:	4818      	ldr	r0, [pc, #96]	; (800295c <MX_TIM2_Init+0xe8>)
 80028fc:	f00a fb40 	bl	800cf80 <HAL_TIM_PWM_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002906:	f7ff fa53 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800290a:	2320      	movs	r3, #32
 800290c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002912:	f107 031c 	add.w	r3, r7, #28
 8002916:	4619      	mov	r1, r3
 8002918:	4810      	ldr	r0, [pc, #64]	; (800295c <MX_TIM2_Init+0xe8>)
 800291a:	f00b fb0d 	bl	800df38 <HAL_TIMEx_MasterConfigSynchronization>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002924:	f7ff fa44 	bl	8001db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002928:	2360      	movs	r3, #96	; 0x60
 800292a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002938:	463b      	mov	r3, r7
 800293a:	220c      	movs	r2, #12
 800293c:	4619      	mov	r1, r3
 800293e:	4807      	ldr	r0, [pc, #28]	; (800295c <MX_TIM2_Init+0xe8>)
 8002940:	f00a fc86 	bl	800d250 <HAL_TIM_PWM_ConfigChannel>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800294a:	f7ff fa31 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800294e:	4803      	ldr	r0, [pc, #12]	; (800295c <MX_TIM2_Init+0xe8>)
 8002950:	f000 f8d0 	bl	8002af4 <HAL_TIM_MspPostInit>

}
 8002954:	bf00      	nop
 8002956:	3738      	adds	r7, #56	; 0x38
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	24000634 	.word	0x24000634

08002960 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002966:	f107 0310 	add.w	r3, r7, #16
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800297e:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <MX_TIM3_Init+0x94>)
 8002980:	4a1d      	ldr	r2, [pc, #116]	; (80029f8 <MX_TIM3_Init+0x98>)
 8002982:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <MX_TIM3_Init+0x94>)
 8002986:	2263      	movs	r2, #99	; 0x63
 8002988:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <MX_TIM3_Init+0x94>)
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8002990:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <MX_TIM3_Init+0x94>)
 8002992:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002996:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <MX_TIM3_Init+0x94>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <MX_TIM3_Init+0x94>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029a4:	4813      	ldr	r0, [pc, #76]	; (80029f4 <MX_TIM3_Init+0x94>)
 80029a6:	f009 ffde 	bl	800c966 <HAL_TIM_Base_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80029b0:	f7ff f9fe 	bl	8001db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	4619      	mov	r1, r3
 80029c0:	480c      	ldr	r0, [pc, #48]	; (80029f4 <MX_TIM3_Init+0x94>)
 80029c2:	f00a fd59 	bl	800d478 <HAL_TIM_ConfigClockSource>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80029cc:	f7ff f9f0 	bl	8001db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d0:	2300      	movs	r3, #0
 80029d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	4619      	mov	r1, r3
 80029dc:	4805      	ldr	r0, [pc, #20]	; (80029f4 <MX_TIM3_Init+0x94>)
 80029de:	f00b faab 	bl	800df38 <HAL_TIMEx_MasterConfigSynchronization>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80029e8:	f7ff f9e2 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029ec:	bf00      	nop
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	24000680 	.word	0x24000680
 80029f8:	40000400 	.word	0x40000400

080029fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a37      	ldr	r2, [pc, #220]	; (8002ae8 <HAL_TIM_Base_MspInit+0xec>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d12f      	bne.n	8002a6e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a0e:	4b37      	ldr	r3, [pc, #220]	; (8002aec <HAL_TIM_Base_MspInit+0xf0>)
 8002a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a14:	4a35      	ldr	r2, [pc, #212]	; (8002aec <HAL_TIM_Base_MspInit+0xf0>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a1e:	4b33      	ldr	r3, [pc, #204]	; (8002aec <HAL_TIM_Base_MspInit+0xf0>)
 8002a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2105      	movs	r1, #5
 8002a30:	2018      	movs	r0, #24
 8002a32:	f002 f903 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002a36:	2018      	movs	r0, #24
 8002a38:	f002 f91a 	bl	8004c70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2105      	movs	r1, #5
 8002a40:	2019      	movs	r0, #25
 8002a42:	f002 f8fb 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002a46:	2019      	movs	r0, #25
 8002a48:	f002 f912 	bl	8004c70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2105      	movs	r1, #5
 8002a50:	201a      	movs	r0, #26
 8002a52:	f002 f8f3 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002a56:	201a      	movs	r0, #26
 8002a58:	f002 f90a 	bl	8004c70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2105      	movs	r1, #5
 8002a60:	201b      	movs	r0, #27
 8002a62:	f002 f8eb 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002a66:	201b      	movs	r0, #27
 8002a68:	f002 f902 	bl	8004c70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a6c:	e038      	b.n	8002ae0 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a76:	d117      	bne.n	8002aa8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a78:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <HAL_TIM_Base_MspInit+0xf0>)
 8002a7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a7e:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <HAL_TIM_Base_MspInit+0xf0>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a88:	4b18      	ldr	r3, [pc, #96]	; (8002aec <HAL_TIM_Base_MspInit+0xf0>)
 8002a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2105      	movs	r1, #5
 8002a9a:	201c      	movs	r0, #28
 8002a9c:	f002 f8ce 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002aa0:	201c      	movs	r0, #28
 8002aa2:	f002 f8e5 	bl	8004c70 <HAL_NVIC_EnableIRQ>
}
 8002aa6:	e01b      	b.n	8002ae0 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <HAL_TIM_Base_MspInit+0xf4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d116      	bne.n	8002ae0 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <HAL_TIM_Base_MspInit+0xf0>)
 8002ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ab8:	4a0c      	ldr	r2, [pc, #48]	; (8002aec <HAL_TIM_Base_MspInit+0xf0>)
 8002aba:	f043 0302 	orr.w	r3, r3, #2
 8002abe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_TIM_Base_MspInit+0xf0>)
 8002ac4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2105      	movs	r1, #5
 8002ad4:	201d      	movs	r0, #29
 8002ad6:	f002 f8b1 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ada:	201d      	movs	r0, #29
 8002adc:	f002 f8c8 	bl	8004c70 <HAL_NVIC_EnableIRQ>
}
 8002ae0:	bf00      	nop
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	58024400 	.word	0x58024400
 8002af0:	40000400 	.word	0x40000400

08002af4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a26      	ldr	r2, [pc, #152]	; (8002bac <HAL_TIM_MspPostInit+0xb8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d120      	bne.n	8002b58 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	4b26      	ldr	r3, [pc, #152]	; (8002bb0 <HAL_TIM_MspPostInit+0xbc>)
 8002b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b1c:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <HAL_TIM_MspPostInit+0xbc>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b26:	4b22      	ldr	r3, [pc, #136]	; (8002bb0 <HAL_TIM_MspPostInit+0xbc>)
 8002b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4818      	ldr	r0, [pc, #96]	; (8002bb4 <HAL_TIM_MspPostInit+0xc0>)
 8002b52:	f005 fae9 	bl	8008128 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002b56:	e024      	b.n	8002ba2 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b60:	d11f      	bne.n	8002ba2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b62:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <HAL_TIM_MspPostInit+0xbc>)
 8002b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b68:	4a11      	ldr	r2, [pc, #68]	; (8002bb0 <HAL_TIM_MspPostInit+0xbc>)
 8002b6a:	f043 0302 	orr.w	r3, r3, #2
 8002b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b72:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <HAL_TIM_MspPostInit+0xbc>)
 8002b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b92:	2301      	movs	r3, #1
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4806      	ldr	r0, [pc, #24]	; (8002bb8 <HAL_TIM_MspPostInit+0xc4>)
 8002b9e:	f005 fac3 	bl	8008128 <HAL_GPIO_Init>
}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	; 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	58024400 	.word	0x58024400
 8002bb4:	58020000 	.word	0x58020000
 8002bb8:	58020400 	.word	0x58020400

08002bbc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bc0:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002bc2:	4a23      	ldr	r2, [pc, #140]	; (8002c50 <MX_USART1_UART_Init+0x94>)
 8002bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8002bc6:	4b21      	ldr	r3, [pc, #132]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002bc8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bce:	4b1f      	ldr	r3, [pc, #124]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002be0:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002be2:	220c      	movs	r2, #12
 8002be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be6:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bec:	4b17      	ldr	r3, [pc, #92]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bf2:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bf8:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bfe:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c04:	4811      	ldr	r0, [pc, #68]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002c06:	f00b fac1 	bl	800e18c <HAL_UART_Init>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002c10:	f7ff f8ce 	bl	8001db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c14:	2100      	movs	r1, #0
 8002c16:	480d      	ldr	r0, [pc, #52]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002c18:	f00d ff99 	bl	8010b4e <HAL_UARTEx_SetTxFifoThreshold>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002c22:	f7ff f8c5 	bl	8001db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c26:	2100      	movs	r1, #0
 8002c28:	4808      	ldr	r0, [pc, #32]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002c2a:	f00d ffce 	bl	8010bca <HAL_UARTEx_SetRxFifoThreshold>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002c34:	f7ff f8bc 	bl	8001db0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c38:	4804      	ldr	r0, [pc, #16]	; (8002c4c <MX_USART1_UART_Init+0x90>)
 8002c3a:	f00d ff4f 	bl	8010adc <HAL_UARTEx_DisableFifoMode>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002c44:	f7ff f8b4 	bl	8001db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	240006cc 	.word	0x240006cc
 8002c50:	40011000 	.word	0x40011000

08002c54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b0ba      	sub	sp, #232	; 0xe8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c6c:	f107 0310 	add.w	r3, r7, #16
 8002c70:	22c0      	movs	r2, #192	; 0xc0
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f011 fa81 	bl	801417c <memset>
  if(uartHandle->Instance==USART1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a41      	ldr	r2, [pc, #260]	; (8002d84 <HAL_UART_MspInit+0x130>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d17b      	bne.n	8002d7c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c84:	f04f 0201 	mov.w	r2, #1
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8002c90:	2318      	movs	r3, #24
 8002c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c96:	f107 0310 	add.w	r3, r7, #16
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f006 fdc8 	bl	8009830 <HAL_RCCEx_PeriphCLKConfig>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002ca6:	f7ff f883 	bl	8001db0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002caa:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <HAL_UART_MspInit+0x134>)
 8002cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cb0:	4a35      	ldr	r2, [pc, #212]	; (8002d88 <HAL_UART_MspInit+0x134>)
 8002cb2:	f043 0310 	orr.w	r3, r3, #16
 8002cb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cba:	4b33      	ldr	r3, [pc, #204]	; (8002d88 <HAL_UART_MspInit+0x134>)
 8002cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc8:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <HAL_UART_MspInit+0x134>)
 8002cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cce:	4a2e      	ldr	r2, [pc, #184]	; (8002d88 <HAL_UART_MspInit+0x134>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cd8:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_UART_MspInit+0x134>)
 8002cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ce6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d00:	2307      	movs	r3, #7
 8002d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d06:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	481f      	ldr	r0, [pc, #124]	; (8002d8c <HAL_UART_MspInit+0x138>)
 8002d0e:	f005 fa0b 	bl	8008128 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8002d12:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <HAL_UART_MspInit+0x13c>)
 8002d14:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <HAL_UART_MspInit+0x140>)
 8002d16:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_UART_MspInit+0x13c>)
 8002d1a:	222a      	movs	r2, #42	; 0x2a
 8002d1c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d1e:	4b1c      	ldr	r3, [pc, #112]	; (8002d90 <HAL_UART_MspInit+0x13c>)
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d24:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <HAL_UART_MspInit+0x13c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d2a:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_UART_MspInit+0x13c>)
 8002d2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d30:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d32:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_UART_MspInit+0x13c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d38:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <HAL_UART_MspInit+0x13c>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d3e:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_UART_MspInit+0x13c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_UART_MspInit+0x13c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_UART_MspInit+0x13c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d50:	480f      	ldr	r0, [pc, #60]	; (8002d90 <HAL_UART_MspInit+0x13c>)
 8002d52:	f002 fba1 	bl	8005498 <HAL_DMA_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002d5c:	f7ff f828 	bl	8001db0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <HAL_UART_MspInit+0x13c>)
 8002d64:	67da      	str	r2, [r3, #124]	; 0x7c
 8002d66:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <HAL_UART_MspInit+0x13c>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2105      	movs	r1, #5
 8002d70:	2025      	movs	r0, #37	; 0x25
 8002d72:	f001 ff63 	bl	8004c3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d76:	2025      	movs	r0, #37	; 0x25
 8002d78:	f001 ff7a 	bl	8004c70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	37e8      	adds	r7, #232	; 0xe8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40011000 	.word	0x40011000
 8002d88:	58024400 	.word	0x58024400
 8002d8c:	58020000 	.word	0x58020000
 8002d90:	24000760 	.word	0x24000760
 8002d94:	40020040 	.word	0x40020040

08002d98 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8002da2:	4bc2      	ldr	r3, [pc, #776]	; (80030ac <voltage_monitor_init+0x314>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8002da8:	4bc0      	ldr	r3, [pc, #768]	; (80030ac <voltage_monitor_init+0x314>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8002dae:	4bbf      	ldr	r3, [pc, #764]	; (80030ac <voltage_monitor_init+0x314>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8002db4:	4bbd      	ldr	r3, [pc, #756]	; (80030ac <voltage_monitor_init+0x314>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002dba:	4bbc      	ldr	r3, [pc, #752]	; (80030ac <voltage_monitor_init+0x314>)
 8002dbc:	f242 7210 	movw	r2, #10000	; 0x2710
 8002dc0:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8002dc2:	4bba      	ldr	r3, [pc, #744]	; (80030ac <voltage_monitor_init+0x314>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8002dc8:	4bb8      	ldr	r3, [pc, #736]	; (80030ac <voltage_monitor_init+0x314>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8002dce:	4bb7      	ldr	r3, [pc, #732]	; (80030ac <voltage_monitor_init+0x314>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8002dd4:	4bb5      	ldr	r3, [pc, #724]	; (80030ac <voltage_monitor_init+0x314>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8002dda:	4bb4      	ldr	r3, [pc, #720]	; (80030ac <voltage_monitor_init+0x314>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002de0:	4bb2      	ldr	r3, [pc, #712]	; (80030ac <voltage_monitor_init+0x314>)
 8002de2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002de6:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8002de8:	4bb0      	ldr	r3, [pc, #704]	; (80030ac <voltage_monitor_init+0x314>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8002dee:	4baf      	ldr	r3, [pc, #700]	; (80030ac <voltage_monitor_init+0x314>)
 8002df0:	2202      	movs	r2, #2
 8002df2:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8002df4:	4bad      	ldr	r3, [pc, #692]	; (80030ac <voltage_monitor_init+0x314>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8002dfa:	4bac      	ldr	r3, [pc, #688]	; (80030ac <voltage_monitor_init+0x314>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8002e00:	4baa      	ldr	r3, [pc, #680]	; (80030ac <voltage_monitor_init+0x314>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002e06:	4ba9      	ldr	r3, [pc, #676]	; (80030ac <voltage_monitor_init+0x314>)
 8002e08:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e0c:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8002e0e:	4ba7      	ldr	r3, [pc, #668]	; (80030ac <voltage_monitor_init+0x314>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8002e14:	4ba5      	ldr	r3, [pc, #660]	; (80030ac <voltage_monitor_init+0x314>)
 8002e16:	2203      	movs	r2, #3
 8002e18:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8002e1a:	4ba4      	ldr	r3, [pc, #656]	; (80030ac <voltage_monitor_init+0x314>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8002e20:	4ba2      	ldr	r3, [pc, #648]	; (80030ac <voltage_monitor_init+0x314>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8002e28:	4ba0      	ldr	r3, [pc, #640]	; (80030ac <voltage_monitor_init+0x314>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002e2e:	4b9f      	ldr	r3, [pc, #636]	; (80030ac <voltage_monitor_init+0x314>)
 8002e30:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e34:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8002e36:	4b9d      	ldr	r3, [pc, #628]	; (80030ac <voltage_monitor_init+0x314>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8002e3c:	4b9b      	ldr	r3, [pc, #620]	; (80030ac <voltage_monitor_init+0x314>)
 8002e3e:	2204      	movs	r2, #4
 8002e40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8002e44:	4b99      	ldr	r3, [pc, #612]	; (80030ac <voltage_monitor_init+0x314>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8002e4c:	4b97      	ldr	r3, [pc, #604]	; (80030ac <voltage_monitor_init+0x314>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8002e54:	4b95      	ldr	r3, [pc, #596]	; (80030ac <voltage_monitor_init+0x314>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002e5a:	4b94      	ldr	r3, [pc, #592]	; (80030ac <voltage_monitor_init+0x314>)
 8002e5c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e60:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8002e62:	4b92      	ldr	r3, [pc, #584]	; (80030ac <voltage_monitor_init+0x314>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8002e68:	4b90      	ldr	r3, [pc, #576]	; (80030ac <voltage_monitor_init+0x314>)
 8002e6a:	2205      	movs	r2, #5
 8002e6c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8002e70:	4b8e      	ldr	r3, [pc, #568]	; (80030ac <voltage_monitor_init+0x314>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8002e78:	4b8c      	ldr	r3, [pc, #560]	; (80030ac <voltage_monitor_init+0x314>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8002e80:	4b8a      	ldr	r3, [pc, #552]	; (80030ac <voltage_monitor_init+0x314>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002e86:	4b89      	ldr	r3, [pc, #548]	; (80030ac <voltage_monitor_init+0x314>)
 8002e88:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e8c:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8002e8e:	4b87      	ldr	r3, [pc, #540]	; (80030ac <voltage_monitor_init+0x314>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8002e94:	4b85      	ldr	r3, [pc, #532]	; (80030ac <voltage_monitor_init+0x314>)
 8002e96:	2206      	movs	r2, #6
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8002e9c:	4b83      	ldr	r3, [pc, #524]	; (80030ac <voltage_monitor_init+0x314>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8002ea4:	4b81      	ldr	r3, [pc, #516]	; (80030ac <voltage_monitor_init+0x314>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8002eac:	4b7f      	ldr	r3, [pc, #508]	; (80030ac <voltage_monitor_init+0x314>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002eb4:	4b7d      	ldr	r3, [pc, #500]	; (80030ac <voltage_monitor_init+0x314>)
 8002eb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8002eba:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8002ebe:	4b7b      	ldr	r3, [pc, #492]	; (80030ac <voltage_monitor_init+0x314>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8002ec6:	4b79      	ldr	r3, [pc, #484]	; (80030ac <voltage_monitor_init+0x314>)
 8002ec8:	2207      	movs	r2, #7
 8002eca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8002ece:	4b77      	ldr	r3, [pc, #476]	; (80030ac <voltage_monitor_init+0x314>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8002ed6:	4b75      	ldr	r3, [pc, #468]	; (80030ac <voltage_monitor_init+0x314>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8002ede:	4b73      	ldr	r3, [pc, #460]	; (80030ac <voltage_monitor_init+0x314>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8002ee6:	4b71      	ldr	r3, [pc, #452]	; (80030ac <voltage_monitor_init+0x314>)
 8002ee8:	f242 7210 	movw	r2, #10000	; 0x2710
 8002eec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8002ef0:	4b6e      	ldr	r3, [pc, #440]	; (80030ac <voltage_monitor_init+0x314>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8002ef8:	4b6c      	ldr	r3, [pc, #432]	; (80030ac <voltage_monitor_init+0x314>)
 8002efa:	2208      	movs	r2, #8
 8002efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8002f00:	4b6a      	ldr	r3, [pc, #424]	; (80030ac <voltage_monitor_init+0x314>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8002f08:	4b68      	ldr	r3, [pc, #416]	; (80030ac <voltage_monitor_init+0x314>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8002f10:	4b66      	ldr	r3, [pc, #408]	; (80030ac <voltage_monitor_init+0x314>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8002f18:	4b64      	ldr	r3, [pc, #400]	; (80030ac <voltage_monitor_init+0x314>)
 8002f1a:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8002f1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8002f22:	4b62      	ldr	r3, [pc, #392]	; (80030ac <voltage_monitor_init+0x314>)
 8002f24:	f640 3283 	movw	r2, #2947	; 0xb83
 8002f28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8002f2c:	4b5f      	ldr	r3, [pc, #380]	; (80030ac <voltage_monitor_init+0x314>)
 8002f2e:	2209      	movs	r2, #9
 8002f30:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8002f34:	4b5d      	ldr	r3, [pc, #372]	; (80030ac <voltage_monitor_init+0x314>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8002f3c:	4b5b      	ldr	r3, [pc, #364]	; (80030ac <voltage_monitor_init+0x314>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8002f44:	4b59      	ldr	r3, [pc, #356]	; (80030ac <voltage_monitor_init+0x314>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8002f4c:	4b57      	ldr	r3, [pc, #348]	; (80030ac <voltage_monitor_init+0x314>)
 8002f4e:	f640 7245 	movw	r2, #3909	; 0xf45
 8002f52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8002f56:	4b55      	ldr	r3, [pc, #340]	; (80030ac <voltage_monitor_init+0x314>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8002f5e:	4b53      	ldr	r3, [pc, #332]	; (80030ac <voltage_monitor_init+0x314>)
 8002f60:	220a      	movs	r2, #10
 8002f62:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8002f66:	4b51      	ldr	r3, [pc, #324]	; (80030ac <voltage_monitor_init+0x314>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8002f6e:	4b4f      	ldr	r3, [pc, #316]	; (80030ac <voltage_monitor_init+0x314>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8002f76:	4b4d      	ldr	r3, [pc, #308]	; (80030ac <voltage_monitor_init+0x314>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8002f7e:	4b4b      	ldr	r3, [pc, #300]	; (80030ac <voltage_monitor_init+0x314>)
 8002f80:	f640 7245 	movw	r2, #3909	; 0xf45
 8002f84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8002f88:	4b48      	ldr	r3, [pc, #288]	; (80030ac <voltage_monitor_init+0x314>)
 8002f8a:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8002f8e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8002f92:	4b46      	ldr	r3, [pc, #280]	; (80030ac <voltage_monitor_init+0x314>)
 8002f94:	220b      	movs	r2, #11
 8002f96:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8002f9a:	4b44      	ldr	r3, [pc, #272]	; (80030ac <voltage_monitor_init+0x314>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8002fa2:	4b42      	ldr	r3, [pc, #264]	; (80030ac <voltage_monitor_init+0x314>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8002faa:	4b40      	ldr	r3, [pc, #256]	; (80030ac <voltage_monitor_init+0x314>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8002fb2:	4b3e      	ldr	r3, [pc, #248]	; (80030ac <voltage_monitor_init+0x314>)
 8002fb4:	f640 72fb 	movw	r2, #4091	; 0xffb
 8002fb8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8002fbc:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <voltage_monitor_init+0x314>)
 8002fbe:	f640 6276 	movw	r2, #3702	; 0xe76
 8002fc2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8002fc6:	4b39      	ldr	r3, [pc, #228]	; (80030ac <voltage_monitor_init+0x314>)
 8002fc8:	220c      	movs	r2, #12
 8002fca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8002fce:	4b37      	ldr	r3, [pc, #220]	; (80030ac <voltage_monitor_init+0x314>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8002fd6:	4b35      	ldr	r3, [pc, #212]	; (80030ac <voltage_monitor_init+0x314>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8002fde:	4b33      	ldr	r3, [pc, #204]	; (80030ac <voltage_monitor_init+0x314>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8002fe6:	4b31      	ldr	r3, [pc, #196]	; (80030ac <voltage_monitor_init+0x314>)
 8002fe8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002fec:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8002ff0:	4b2e      	ldr	r3, [pc, #184]	; (80030ac <voltage_monitor_init+0x314>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8002ff8:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <voltage_monitor_init+0x314>)
 8002ffa:	220d      	movs	r2, #13
 8002ffc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8003000:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <voltage_monitor_init+0x314>)
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8003008:	4b28      	ldr	r3, [pc, #160]	; (80030ac <voltage_monitor_init+0x314>)
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8003010:	4b26      	ldr	r3, [pc, #152]	; (80030ac <voltage_monitor_init+0x314>)
 8003012:	2200      	movs	r2, #0
 8003014:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8003018:	4b24      	ldr	r3, [pc, #144]	; (80030ac <voltage_monitor_init+0x314>)
 800301a:	f640 7238 	movw	r2, #3896	; 0xf38
 800301e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8003022:	4b22      	ldr	r3, [pc, #136]	; (80030ac <voltage_monitor_init+0x314>)
 8003024:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8003028:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 800302c:	4b1f      	ldr	r3, [pc, #124]	; (80030ac <voltage_monitor_init+0x314>)
 800302e:	220e      	movs	r2, #14
 8003030:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <voltage_monitor_init+0x314>)
 8003036:	2200      	movs	r2, #0
 8003038:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <voltage_monitor_init+0x314>)
 800303e:	2200      	movs	r2, #0
 8003040:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <voltage_monitor_init+0x314>)
 8003046:	2200      	movs	r2, #0
 8003048:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 800304c:	4b17      	ldr	r3, [pc, #92]	; (80030ac <voltage_monitor_init+0x314>)
 800304e:	f640 7245 	movw	r2, #3909	; 0xf45
 8003052:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <voltage_monitor_init+0x314>)
 8003058:	f640 52d1 	movw	r2, #3537	; 0xdd1
 800305c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8003060:	4b12      	ldr	r3, [pc, #72]	; (80030ac <voltage_monitor_init+0x314>)
 8003062:	220f      	movs	r2, #15
 8003064:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8003068:	4b10      	ldr	r3, [pc, #64]	; (80030ac <voltage_monitor_init+0x314>)
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <voltage_monitor_init+0x314>)
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8003078:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <voltage_monitor_init+0x314>)
 800307a:	2200      	movs	r2, #0
 800307c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <voltage_monitor_init+0x314>)
 8003082:	f241 0264 	movw	r2, #4196	; 0x1064
 8003086:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <voltage_monitor_init+0x314>)
 800308c:	2200      	movs	r2, #0
 800308e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <voltage_monitor_init+0x314>)
 8003094:	2210      	movs	r2, #16
 8003096:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 800309a:	4b04      	ldr	r3, [pc, #16]	; (80030ac <voltage_monitor_init+0x314>)
 800309c:	2200      	movs	r2, #0
 800309e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 80030a2:	4b02      	ldr	r3, [pc, #8]	; (80030ac <voltage_monitor_init+0x314>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80030aa:	e001      	b.n	80030b0 <voltage_monitor_init+0x318>
 80030ac:	240007d8 	.word	0x240007d8
	rail_monitor[RAIL_n800v].data = 0;
 80030b0:	4b17      	ldr	r3, [pc, #92]	; (8003110 <voltage_monitor_init+0x378>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 80030b8:	4b15      	ldr	r3, [pc, #84]	; (8003110 <voltage_monitor_init+0x378>)
 80030ba:	f640 5208 	movw	r2, #3336	; 0xd08
 80030be:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 80030c2:	4b13      	ldr	r3, [pc, #76]	; (8003110 <voltage_monitor_init+0x378>)
 80030c4:	f640 32ca 	movw	r2, #3018	; 0xbca
 80030c8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80030cc:	4b10      	ldr	r3, [pc, #64]	; (8003110 <voltage_monitor_init+0x378>)
 80030ce:	2211      	movs	r2, #17
 80030d0:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <voltage_monitor_init+0x378>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <voltage_monitor_init+0x378>)
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <voltage_monitor_init+0x378>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <voltage_monitor_init+0x378>)
 80030ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80030f2:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <voltage_monitor_init+0x378>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 80030fe:	2301      	movs	r3, #1
 8003100:	71fb      	strb	r3, [r7, #7]

	return status;
 8003102:	79fb      	ldrb	r3, [r7, #7]
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	240007d8 	.word	0x240007d8

08003114 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	460a      	mov	r2, r1
 800311e:	71fb      	strb	r3, [r7, #7]
 8003120:	4613      	mov	r3, r2
 8003122:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8003128:	79fa      	ldrb	r2, [r7, #7]
 800312a:	4909      	ldr	r1, [pc, #36]	; (8003150 <set_rail_monitor_enable+0x3c>)
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	440b      	add	r3, r1
 8003136:	3302      	adds	r3, #2
 8003138:	79ba      	ldrb	r2, [r7, #6]
 800313a:	701a      	strb	r2, [r3, #0]
	status = 1;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]

	return status;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	240007d8 	.word	0x240007d8

08003154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800318c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003158:	f7ff fa56 	bl	8002608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800315c:	480c      	ldr	r0, [pc, #48]	; (8003190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800315e:	490d      	ldr	r1, [pc, #52]	; (8003194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003160:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003164:	e002      	b.n	800316c <LoopCopyDataInit>

08003166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800316a:	3304      	adds	r3, #4

0800316c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800316c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800316e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003170:	d3f9      	bcc.n	8003166 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003172:	4a0a      	ldr	r2, [pc, #40]	; (800319c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003174:	4c0a      	ldr	r4, [pc, #40]	; (80031a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003178:	e001      	b.n	800317e <LoopFillZerobss>

0800317a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800317a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800317c:	3204      	adds	r2, #4

0800317e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800317e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003180:	d3fb      	bcc.n	800317a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003182:	f010 ffc9 	bl	8014118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003186:	f7fe fca1 	bl	8001acc <main>
  bx  lr
 800318a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800318c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003190:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003194:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8003198:	08015044 	.word	0x08015044
  ldr r2, =_sbss
 800319c:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 80031a0:	240051f0 	.word	0x240051f0

080031a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031a4:	e7fe      	b.n	80031a4 <ADC3_IRQHandler>
	...

080031a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ae:	2003      	movs	r0, #3
 80031b0:	f001 fd39 	bl	8004c26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031b4:	f006 f924 	bl	8009400 <HAL_RCC_GetSysClockFreq>
 80031b8:	4602      	mov	r2, r0
 80031ba:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_Init+0x68>)
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	0a1b      	lsrs	r3, r3, #8
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	4913      	ldr	r1, [pc, #76]	; (8003214 <HAL_Init+0x6c>)
 80031c6:	5ccb      	ldrb	r3, [r1, r3]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
 80031d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_Init+0x68>)
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <HAL_Init+0x6c>)
 80031dc:	5cd3      	ldrb	r3, [r2, r3]
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
 80031e8:	4a0b      	ldr	r2, [pc, #44]	; (8003218 <HAL_Init+0x70>)
 80031ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031ec:	4a0b      	ldr	r2, [pc, #44]	; (800321c <HAL_Init+0x74>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031f2:	2005      	movs	r0, #5
 80031f4:	f7ff f838 	bl	8002268 <HAL_InitTick>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e002      	b.n	8003208 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003202:	f7ff f813 	bl	800222c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	58024400 	.word	0x58024400
 8003214:	08014f90 	.word	0x08014f90
 8003218:	2400008c 	.word	0x2400008c
 800321c:	24000088 	.word	0x24000088

08003220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_IncTick+0x20>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_IncTick+0x24>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4413      	add	r3, r2
 8003230:	4a04      	ldr	r2, [pc, #16]	; (8003244 <HAL_IncTick+0x24>)
 8003232:	6013      	str	r3, [r2, #0]
}
 8003234:	bf00      	nop
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	24000094 	.word	0x24000094
 8003244:	2400088c 	.word	0x2400088c

08003248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return uwTick;
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <HAL_GetTick+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	2400088c 	.word	0x2400088c

08003260 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_GetREVID+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	0c1b      	lsrs	r3, r3, #16
}
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	5c001000 	.word	0x5c001000

08003278 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003282:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	43db      	mvns	r3, r3
 800328a:	401a      	ands	r2, r3
 800328c:	4904      	ldr	r1, [pc, #16]	; (80032a0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	58000400 	.word	0x58000400

080032a4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	609a      	str	r2, [r3, #8]
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3360      	adds	r3, #96	; 0x60
 800331e:	461a      	mov	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	430b      	orrs	r3, r1
 800333a:	431a      	orrs	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003340:	bf00      	nop
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f003 031f 	and.w	r3, r3, #31
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	fa01 f303 	lsl.w	r3, r1, r3
 800336c:	431a      	orrs	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	611a      	str	r2, [r3, #16]
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800337e:	b480      	push	{r7}
 8003380:	b087      	sub	sp, #28
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3360      	adds	r3, #96	; 0x60
 800338e:	461a      	mov	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	601a      	str	r2, [r3, #0]
  }
}
 80033a8:	bf00      	nop
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033da:	b480      	push	{r7}
 80033dc:	b087      	sub	sp, #28
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3330      	adds	r3, #48	; 0x30
 80033ea:	461a      	mov	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	4413      	add	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	211f      	movs	r1, #31
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	401a      	ands	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0e9b      	lsrs	r3, r3, #26
 8003412:	f003 011f 	and.w	r1, r3, #31
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	431a      	orrs	r2, r3
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003426:	bf00      	nop
 8003428:	371c      	adds	r7, #28
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f023 0203 	bic.w	r2, r3, #3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	60da      	str	r2, [r3, #12]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3314      	adds	r3, #20
 8003468:	461a      	mov	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	0e5b      	lsrs	r3, r3, #25
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	4413      	add	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	0d1b      	lsrs	r3, r3, #20
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2107      	movs	r1, #7
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	401a      	ands	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	0d1b      	lsrs	r3, r3, #20
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	431a      	orrs	r2, r3
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034c8:	43db      	mvns	r3, r3
 80034ca:	401a      	ands	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f003 0318 	and.w	r3, r3, #24
 80034d2:	4908      	ldr	r1, [pc, #32]	; (80034f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80034d4:	40d9      	lsrs	r1, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	400b      	ands	r3, r1
 80034da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034de:	431a      	orrs	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	000fffff 	.word	0x000fffff

080034f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 031f 	and.w	r3, r3, #31
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003522:	4013      	ands	r3, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6093      	str	r3, [r2, #8]
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	5fffffc0 	.word	0x5fffffc0

08003538 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003548:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800354c:	d101      	bne.n	8003552 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <LL_ADC_EnableInternalRegulator+0x24>)
 800356e:	4013      	ands	r3, r2
 8003570:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	6fffffc0 	.word	0x6fffffc0

08003588 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003598:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800359c:	d101      	bne.n	80035a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <LL_ADC_Enable+0x24>)
 80035be:	4013      	ands	r3, r2
 80035c0:	f043 0201 	orr.w	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	7fffffc0 	.word	0x7fffffc0

080035d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <LL_ADC_Disable+0x24>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	f043 0202 	orr.w	r2, r3, #2
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	7fffffc0 	.word	0x7fffffc0

08003600 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <LL_ADC_IsEnabled+0x18>
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <LL_ADC_IsEnabled+0x1a>
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b02      	cmp	r3, #2
 8003638:	d101      	bne.n	800363e <LL_ADC_IsDisableOngoing+0x18>
 800363a:	2301      	movs	r3, #1
 800363c:	e000      	b.n	8003640 <LL_ADC_IsDisableOngoing+0x1a>
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <LL_ADC_REG_StartConversion+0x24>)
 800365a:	4013      	ands	r3, r2
 800365c:	f043 0204 	orr.w	r2, r3, #4
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	7fffffc0 	.word	0x7fffffc0

08003674 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	d101      	bne.n	800368c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d101      	bne.n	80036b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e18f      	b.n	80039fa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d109      	bne.n	80036fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7fd f92f 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff19 	bl	8003538 <LL_ADC_IsDeepPowerDownEnabled>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d004      	beq.n	8003716 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff feff 	bl	8003514 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff ff34 	bl	8003588 <LL_ADC_IsInternalRegulatorEnabled>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d114      	bne.n	8003750 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ff18 	bl	8003560 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003730:	4b87      	ldr	r3, [pc, #540]	; (8003950 <HAL_ADC_Init+0x290>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	099b      	lsrs	r3, r3, #6
 8003736:	4a87      	ldr	r2, [pc, #540]	; (8003954 <HAL_ADC_Init+0x294>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	099b      	lsrs	r3, r3, #6
 800373e:	3301      	adds	r3, #1
 8003740:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003742:	e002      	b.n	800374a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	3b01      	subs	r3, #1
 8003748:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f9      	bne.n	8003744 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff17 	bl	8003588 <LL_ADC_IsInternalRegulatorEnabled>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003764:	f043 0210 	orr.w	r2, r3, #16
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	f043 0201 	orr.w	r2, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff ff77 	bl	8003674 <LL_ADC_REG_IsConversionOngoing>
 8003786:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	f040 8129 	bne.w	80039e8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f040 8125 	bne.w	80039e8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80037a6:	f043 0202 	orr.w	r2, r3, #2
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff ff24 	bl	8003600 <LL_ADC_IsEnabled>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d136      	bne.n	800382c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a65      	ldr	r2, [pc, #404]	; (8003958 <HAL_ADC_Init+0x298>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_ADC_Init+0x112>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a63      	ldr	r2, [pc, #396]	; (800395c <HAL_ADC_Init+0x29c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10e      	bne.n	80037f0 <HAL_ADC_Init+0x130>
 80037d2:	4861      	ldr	r0, [pc, #388]	; (8003958 <HAL_ADC_Init+0x298>)
 80037d4:	f7ff ff14 	bl	8003600 <LL_ADC_IsEnabled>
 80037d8:	4604      	mov	r4, r0
 80037da:	4860      	ldr	r0, [pc, #384]	; (800395c <HAL_ADC_Init+0x29c>)
 80037dc:	f7ff ff10 	bl	8003600 <LL_ADC_IsEnabled>
 80037e0:	4603      	mov	r3, r0
 80037e2:	4323      	orrs	r3, r4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e008      	b.n	8003802 <HAL_ADC_Init+0x142>
 80037f0:	485b      	ldr	r0, [pc, #364]	; (8003960 <HAL_ADC_Init+0x2a0>)
 80037f2:	f7ff ff05 	bl	8003600 <LL_ADC_IsEnabled>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d012      	beq.n	800382c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a53      	ldr	r2, [pc, #332]	; (8003958 <HAL_ADC_Init+0x298>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d004      	beq.n	800381a <HAL_ADC_Init+0x15a>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a51      	ldr	r2, [pc, #324]	; (800395c <HAL_ADC_Init+0x29c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <HAL_ADC_Init+0x15e>
 800381a:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_ADC_Init+0x2a4>)
 800381c:	e000      	b.n	8003820 <HAL_ADC_Init+0x160>
 800381e:	4a52      	ldr	r2, [pc, #328]	; (8003968 <HAL_ADC_Init+0x2a8>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f7ff fd3c 	bl	80032a4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800382c:	f7ff fd18 	bl	8003260 <HAL_GetREVID>
 8003830:	4603      	mov	r3, r0
 8003832:	f241 0203 	movw	r2, #4099	; 0x1003
 8003836:	4293      	cmp	r3, r2
 8003838:	d914      	bls.n	8003864 <HAL_ADC_Init+0x1a4>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b10      	cmp	r3, #16
 8003840:	d110      	bne.n	8003864 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	7d5b      	ldrb	r3, [r3, #21]
 8003846:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800384c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003852:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	7f1b      	ldrb	r3, [r3, #28]
 8003858:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800385a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800385c:	f043 030c 	orr.w	r3, r3, #12
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	e00d      	b.n	8003880 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7d5b      	ldrb	r3, [r3, #21]
 8003868:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800386e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003874:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7f1b      	ldrb	r3, [r3, #28]
 800387a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	7f1b      	ldrb	r3, [r3, #28]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d106      	bne.n	8003896 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	3b01      	subs	r3, #1
 800388e:	045b      	lsls	r3, r3, #17
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	4b2c      	ldr	r3, [pc, #176]	; (800396c <HAL_ADC_Init+0x2ac>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	69b9      	ldr	r1, [r7, #24]
 80038c2:	430b      	orrs	r3, r1
 80038c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fed2 	bl	8003674 <LL_ADC_REG_IsConversionOngoing>
 80038d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fedf 	bl	800369a <LL_ADC_INJ_IsConversionOngoing>
 80038dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d15f      	bne.n	80039a4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d15c      	bne.n	80039a4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	7d1b      	ldrb	r3, [r3, #20]
 80038ee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <HAL_ADC_Init+0x2b0>)
 8003900:	4013      	ands	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	69b9      	ldr	r1, [r7, #24]
 8003908:	430b      	orrs	r3, r1
 800390a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003912:	2b01      	cmp	r3, #1
 8003914:	d130      	bne.n	8003978 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	4b14      	ldr	r3, [pc, #80]	; (8003974 <HAL_ADC_Init+0x2b4>)
 8003924:	4013      	ands	r3, r2
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800392a:	3a01      	subs	r2, #1
 800392c:	0411      	lsls	r1, r2, #16
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003932:	4311      	orrs	r1, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003938:	4311      	orrs	r1, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800393e:	430a      	orrs	r2, r1
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	611a      	str	r2, [r3, #16]
 800394c:	e01c      	b.n	8003988 <HAL_ADC_Init+0x2c8>
 800394e:	bf00      	nop
 8003950:	24000088 	.word	0x24000088
 8003954:	053e2d63 	.word	0x053e2d63
 8003958:	40022000 	.word	0x40022000
 800395c:	40022100 	.word	0x40022100
 8003960:	58026000 	.word	0x58026000
 8003964:	40022300 	.word	0x40022300
 8003968:	58026300 	.word	0x58026300
 800396c:	fff0c003 	.word	0xfff0c003
 8003970:	ffffbffc 	.word	0xffffbffc
 8003974:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 0201 	bic.w	r2, r2, #1
 8003986:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fdec 	bl	800457c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d10c      	bne.n	80039c6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f023 010f 	bic.w	r1, r3, #15
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	1e5a      	subs	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
 80039c4:	e007      	b.n	80039d6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 020f 	bic.w	r2, r2, #15
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	f023 0303 	bic.w	r3, r3, #3
 80039de:	f043 0201 	orr.w	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
 80039e6:	e007      	b.n	80039f8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f043 0210 	orr.w	r2, r3, #16
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80039f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3724      	adds	r7, #36	; 0x24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd90      	pop	{r4, r7, pc}
 8003a02:	bf00      	nop

08003a04 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a55      	ldr	r2, [pc, #340]	; (8003b6c <HAL_ADC_Start_DMA+0x168>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <HAL_ADC_Start_DMA+0x20>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a54      	ldr	r2, [pc, #336]	; (8003b70 <HAL_ADC_Start_DMA+0x16c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d101      	bne.n	8003a28 <HAL_ADC_Start_DMA+0x24>
 8003a24:	4b53      	ldr	r3, [pc, #332]	; (8003b74 <HAL_ADC_Start_DMA+0x170>)
 8003a26:	e000      	b.n	8003a2a <HAL_ADC_Start_DMA+0x26>
 8003a28:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <HAL_ADC_Start_DMA+0x174>)
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7ff fd64 	bl	80034f8 <LL_ADC_GetMultimode>
 8003a30:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fe1c 	bl	8003674 <LL_ADC_REG_IsConversionOngoing>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f040 808c 	bne.w	8003b5c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_ADC_Start_DMA+0x4e>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e087      	b.n	8003b62 <HAL_ADC_Start_DMA+0x15e>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b05      	cmp	r3, #5
 8003a64:	d002      	beq.n	8003a6c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b09      	cmp	r3, #9
 8003a6a:	d170      	bne.n	8003b4e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fc07 	bl	8004280 <ADC_Enable>
 8003a72:	4603      	mov	r3, r0
 8003a74:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a76:	7dfb      	ldrb	r3, [r7, #23]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d163      	bne.n	8003b44 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a80:	4b3e      	ldr	r3, [pc, #248]	; (8003b7c <HAL_ADC_Start_DMA+0x178>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a37      	ldr	r2, [pc, #220]	; (8003b70 <HAL_ADC_Start_DMA+0x16c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d002      	beq.n	8003a9c <HAL_ADC_Start_DMA+0x98>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	e000      	b.n	8003a9e <HAL_ADC_Start_DMA+0x9a>
 8003a9c:	4b33      	ldr	r3, [pc, #204]	; (8003b6c <HAL_ADC_Start_DMA+0x168>)
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d002      	beq.n	8003aac <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d006      	beq.n	8003ad2 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac8:	f023 0206 	bic.w	r2, r3, #6
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	659a      	str	r2, [r3, #88]	; 0x58
 8003ad0:	e002      	b.n	8003ad8 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003adc:	4a28      	ldr	r2, [pc, #160]	; (8003b80 <HAL_ADC_Start_DMA+0x17c>)
 8003ade:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae4:	4a27      	ldr	r2, [pc, #156]	; (8003b84 <HAL_ADC_Start_DMA+0x180>)
 8003ae6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aec:	4a26      	ldr	r2, [pc, #152]	; (8003b88 <HAL_ADC_Start_DMA+0x184>)
 8003aee:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	221c      	movs	r2, #28
 8003af6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0210 	orr.w	r2, r2, #16
 8003b0e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f7ff fc89 	bl	8003432 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3340      	adds	r3, #64	; 0x40
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f002 f80e 	bl	8005b50 <HAL_DMA_Start_IT>
 8003b34:	4603      	mov	r3, r0
 8003b36:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fd85 	bl	800364c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003b42:	e00d      	b.n	8003b60 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003b4c:	e008      	b.n	8003b60 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003b5a:	e001      	b.n	8003b60 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40022000 	.word	0x40022000
 8003b70:	40022100 	.word	0x40022100
 8003b74:	40022300 	.word	0x40022300
 8003b78:	58026300 	.word	0x58026300
 8003b7c:	fffff0fe 	.word	0xfffff0fe
 8003b80:	08004453 	.word	0x08004453
 8003b84:	0800452b 	.word	0x0800452b
 8003b88:	08004547 	.word	0x08004547

08003b8c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b0a1      	sub	sp, #132	; 0x84
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4a65      	ldr	r2, [pc, #404]	; (8003d78 <HAL_ADC_ConfigChannel+0x1b0>)
 8003be2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x2a>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e32e      	b.n	8004250 <HAL_ADC_ConfigChannel+0x688>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fd38 	bl	8003674 <LL_ADC_REG_IsConversionOngoing>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f040 8313 	bne.w	8004232 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	db2c      	blt.n	8003c6e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d108      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x6a>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	0e9b      	lsrs	r3, r3, #26
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	e016      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x98>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c42:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003c4a:	2320      	movs	r3, #32
 8003c4c:	e003      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c50:	fab3 f383 	clz	r3, r3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	69d1      	ldr	r1, [r2, #28]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	430b      	orrs	r3, r1
 8003c6c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6859      	ldr	r1, [r3, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f7ff fbad 	bl	80033da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff fcf5 	bl	8003674 <LL_ADC_REG_IsConversionOngoing>
 8003c8a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fd02 	bl	800369a <LL_ADC_INJ_IsConversionOngoing>
 8003c96:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f040 80b8 	bne.w	8003e10 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f040 80b4 	bne.w	8003e10 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	6819      	ldr	r1, [r3, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f7ff fbcf 	bl	8003458 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003cba:	4b30      	ldr	r3, [pc, #192]	; (8003d7c <HAL_ADC_ConfigChannel+0x1b4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cc6:	d10b      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x118>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	e01d      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x154>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10b      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x13e>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	089b      	lsrs	r3, r3, #2
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	e00a      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x154>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	089b      	lsrs	r3, r3, #2
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d02c      	beq.n	8003d80 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6919      	ldr	r1, [r3, #16]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d34:	f7ff faea 	bl	800330c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6919      	ldr	r1, [r3, #16]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	7e5b      	ldrb	r3, [r3, #25]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d102      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0x186>
 8003d48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d4c:	e000      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x188>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	461a      	mov	r2, r3
 8003d52:	f7ff fb14 	bl	800337e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6919      	ldr	r1, [r3, #16]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	7e1b      	ldrb	r3, [r3, #24]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d102      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x1a4>
 8003d66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d6a:	e000      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x1a6>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f7ff faec 	bl	800334c <LL_ADC_SetDataRightShift>
 8003d74:	e04c      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x248>
 8003d76:	bf00      	nop
 8003d78:	47ff0000 	.word	0x47ff0000
 8003d7c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	069b      	lsls	r3, r3, #26
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d107      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003da2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	069b      	lsls	r3, r3, #26
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d107      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003dc6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	069b      	lsls	r3, r3, #26
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d107      	bne.n	8003dec <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003dea:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	069b      	lsls	r3, r3, #26
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d107      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003e0e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fbf3 	bl	8003600 <LL_ADC_IsEnabled>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f040 8211 	bne.w	8004244 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f7ff fb3e 	bl	80034b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4aa1      	ldr	r2, [pc, #644]	; (80040c0 <HAL_ADC_ConfigChannel+0x4f8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	f040 812e 	bne.w	800409c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x2a0>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	0e9b      	lsrs	r3, r3, #26
 8003e56:	3301      	adds	r3, #1
 8003e58:	f003 031f 	and.w	r3, r3, #31
 8003e5c:	2b09      	cmp	r3, #9
 8003e5e:	bf94      	ite	ls
 8003e60:	2301      	movls	r3, #1
 8003e62:	2300      	movhi	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e019      	b.n	8003e9c <HAL_ADC_ConfigChannel+0x2d4>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003e80:	2320      	movs	r3, #32
 8003e82:	e003      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	2b09      	cmp	r3, #9
 8003e94:	bf94      	ite	ls
 8003e96:	2301      	movls	r3, #1
 8003e98:	2300      	movhi	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d079      	beq.n	8003f94 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d107      	bne.n	8003ebc <HAL_ADC_ConfigChannel+0x2f4>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0e9b      	lsrs	r3, r3, #26
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	069b      	lsls	r3, r3, #26
 8003eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003eba:	e015      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x320>
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec4:	fa93 f3a3 	rbit	r3, r3
 8003ec8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ecc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003ed4:	2320      	movs	r3, #32
 8003ed6:	e003      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	069b      	lsls	r3, r3, #26
 8003ee4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d109      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x340>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	0e9b      	lsrs	r3, r3, #26
 8003efa:	3301      	adds	r3, #1
 8003efc:	f003 031f 	and.w	r3, r3, #31
 8003f00:	2101      	movs	r1, #1
 8003f02:	fa01 f303 	lsl.w	r3, r1, r3
 8003f06:	e017      	b.n	8003f38 <HAL_ADC_ConfigChannel+0x370>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f10:	fa93 f3a3 	rbit	r3, r3
 8003f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f18:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003f20:	2320      	movs	r3, #32
 8003f22:	e003      	b.n	8003f2c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f003 031f 	and.w	r3, r3, #31
 8003f32:	2101      	movs	r1, #1
 8003f34:	fa01 f303 	lsl.w	r3, r1, r3
 8003f38:	ea42 0103 	orr.w	r1, r2, r3
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x396>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	0e9b      	lsrs	r3, r3, #26
 8003f4e:	3301      	adds	r3, #1
 8003f50:	f003 021f 	and.w	r2, r3, #31
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	051b      	lsls	r3, r3, #20
 8003f5c:	e018      	b.n	8003f90 <HAL_ADC_ConfigChannel+0x3c8>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f66:	fa93 f3a3 	rbit	r3, r3
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003f76:	2320      	movs	r3, #32
 8003f78:	e003      	b.n	8003f82 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	fab3 f383 	clz	r3, r3
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	3301      	adds	r3, #1
 8003f84:	f003 021f 	and.w	r2, r3, #31
 8003f88:	4613      	mov	r3, r2
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	4413      	add	r3, r2
 8003f8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f90:	430b      	orrs	r3, r1
 8003f92:	e07e      	b.n	8004092 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d107      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x3e8>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	0e9b      	lsrs	r3, r3, #26
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	069b      	lsls	r3, r3, #26
 8003faa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fae:	e015      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x414>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb8:	fa93 f3a3 	rbit	r3, r3
 8003fbc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003fc8:	2320      	movs	r3, #32
 8003fca:	e003      	b.n	8003fd4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	fab3 f383 	clz	r3, r3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	069b      	lsls	r3, r3, #26
 8003fd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d109      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x434>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	0e9b      	lsrs	r3, r3, #26
 8003fee:	3301      	adds	r3, #1
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffa:	e017      	b.n	800402c <HAL_ADC_ConfigChannel+0x464>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	fa93 f3a3 	rbit	r3, r3
 8004008:	61bb      	str	r3, [r7, #24]
  return result;
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004014:	2320      	movs	r3, #32
 8004016:	e003      	b.n	8004020 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	fab3 f383 	clz	r3, r3
 800401e:	b2db      	uxtb	r3, r3
 8004020:	3301      	adds	r3, #1
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	2101      	movs	r1, #1
 8004028:	fa01 f303 	lsl.w	r3, r1, r3
 800402c:	ea42 0103 	orr.w	r1, r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10d      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x490>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	0e9b      	lsrs	r3, r3, #26
 8004042:	3301      	adds	r3, #1
 8004044:	f003 021f 	and.w	r2, r3, #31
 8004048:	4613      	mov	r3, r2
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	4413      	add	r3, r2
 800404e:	3b1e      	subs	r3, #30
 8004050:	051b      	lsls	r3, r3, #20
 8004052:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004056:	e01b      	b.n	8004090 <HAL_ADC_ConfigChannel+0x4c8>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	fa93 f3a3 	rbit	r3, r3
 8004064:	60fb      	str	r3, [r7, #12]
  return result;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004070:	2320      	movs	r3, #32
 8004072:	e003      	b.n	800407c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	fab3 f383 	clz	r3, r3
 800407a:	b2db      	uxtb	r3, r3
 800407c:	3301      	adds	r3, #1
 800407e:	f003 021f 	and.w	r2, r3, #31
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	3b1e      	subs	r3, #30
 800408a:	051b      	lsls	r3, r3, #20
 800408c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004090:	430b      	orrs	r3, r1
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	6892      	ldr	r2, [r2, #8]
 8004096:	4619      	mov	r1, r3
 8004098:	f7ff f9de 	bl	8003458 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f280 80cf 	bge.w	8004244 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a06      	ldr	r2, [pc, #24]	; (80040c4 <HAL_ADC_ConfigChannel+0x4fc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <HAL_ADC_ConfigChannel+0x4f2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <HAL_ADC_ConfigChannel+0x500>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d10a      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x508>
 80040ba:	4b04      	ldr	r3, [pc, #16]	; (80040cc <HAL_ADC_ConfigChannel+0x504>)
 80040bc:	e009      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x50a>
 80040be:	bf00      	nop
 80040c0:	47ff0000 	.word	0x47ff0000
 80040c4:	40022000 	.word	0x40022000
 80040c8:	40022100 	.word	0x40022100
 80040cc:	40022300 	.word	0x40022300
 80040d0:	4b61      	ldr	r3, [pc, #388]	; (8004258 <HAL_ADC_ConfigChannel+0x690>)
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7ff f90c 	bl	80032f0 <LL_ADC_GetCommonPathInternalCh>
 80040d8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a5f      	ldr	r2, [pc, #380]	; (800425c <HAL_ADC_ConfigChannel+0x694>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_ADC_ConfigChannel+0x526>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a5d      	ldr	r2, [pc, #372]	; (8004260 <HAL_ADC_ConfigChannel+0x698>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d10e      	bne.n	800410c <HAL_ADC_ConfigChannel+0x544>
 80040ee:	485b      	ldr	r0, [pc, #364]	; (800425c <HAL_ADC_ConfigChannel+0x694>)
 80040f0:	f7ff fa86 	bl	8003600 <LL_ADC_IsEnabled>
 80040f4:	4604      	mov	r4, r0
 80040f6:	485a      	ldr	r0, [pc, #360]	; (8004260 <HAL_ADC_ConfigChannel+0x698>)
 80040f8:	f7ff fa82 	bl	8003600 <LL_ADC_IsEnabled>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4323      	orrs	r3, r4
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	e008      	b.n	800411e <HAL_ADC_ConfigChannel+0x556>
 800410c:	4855      	ldr	r0, [pc, #340]	; (8004264 <HAL_ADC_ConfigChannel+0x69c>)
 800410e:	f7ff fa77 	bl	8003600 <LL_ADC_IsEnabled>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d07d      	beq.n	800421e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a50      	ldr	r2, [pc, #320]	; (8004268 <HAL_ADC_ConfigChannel+0x6a0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d130      	bne.n	800418e <HAL_ADC_ConfigChannel+0x5c6>
 800412c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d12b      	bne.n	800418e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a4a      	ldr	r2, [pc, #296]	; (8004264 <HAL_ADC_ConfigChannel+0x69c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	f040 8081 	bne.w	8004244 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a45      	ldr	r2, [pc, #276]	; (800425c <HAL_ADC_ConfigChannel+0x694>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <HAL_ADC_ConfigChannel+0x58e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a43      	ldr	r2, [pc, #268]	; (8004260 <HAL_ADC_ConfigChannel+0x698>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d101      	bne.n	800415a <HAL_ADC_ConfigChannel+0x592>
 8004156:	4a45      	ldr	r2, [pc, #276]	; (800426c <HAL_ADC_ConfigChannel+0x6a4>)
 8004158:	e000      	b.n	800415c <HAL_ADC_ConfigChannel+0x594>
 800415a:	4a3f      	ldr	r2, [pc, #252]	; (8004258 <HAL_ADC_ConfigChannel+0x690>)
 800415c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004162:	4619      	mov	r1, r3
 8004164:	4610      	mov	r0, r2
 8004166:	f7ff f8b0 	bl	80032ca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800416a:	4b41      	ldr	r3, [pc, #260]	; (8004270 <HAL_ADC_ConfigChannel+0x6a8>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	099b      	lsrs	r3, r3, #6
 8004170:	4a40      	ldr	r2, [pc, #256]	; (8004274 <HAL_ADC_ConfigChannel+0x6ac>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	099b      	lsrs	r3, r3, #6
 8004178:	3301      	adds	r3, #1
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800417e:	e002      	b.n	8004186 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	3b01      	subs	r3, #1
 8004184:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f9      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800418c:	e05a      	b.n	8004244 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a39      	ldr	r2, [pc, #228]	; (8004278 <HAL_ADC_ConfigChannel+0x6b0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d11e      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x60e>
 8004198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d119      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a2f      	ldr	r2, [pc, #188]	; (8004264 <HAL_ADC_ConfigChannel+0x69c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d14b      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a2a      	ldr	r2, [pc, #168]	; (800425c <HAL_ADC_ConfigChannel+0x694>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d004      	beq.n	80041c0 <HAL_ADC_ConfigChannel+0x5f8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a29      	ldr	r2, [pc, #164]	; (8004260 <HAL_ADC_ConfigChannel+0x698>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x5fc>
 80041c0:	4a2a      	ldr	r2, [pc, #168]	; (800426c <HAL_ADC_ConfigChannel+0x6a4>)
 80041c2:	e000      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x5fe>
 80041c4:	4a24      	ldr	r2, [pc, #144]	; (8004258 <HAL_ADC_ConfigChannel+0x690>)
 80041c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041cc:	4619      	mov	r1, r3
 80041ce:	4610      	mov	r0, r2
 80041d0:	f7ff f87b 	bl	80032ca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041d4:	e036      	b.n	8004244 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a28      	ldr	r2, [pc, #160]	; (800427c <HAL_ADC_ConfigChannel+0x6b4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d131      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x67c>
 80041e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d12c      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <HAL_ADC_ConfigChannel+0x69c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d127      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a18      	ldr	r2, [pc, #96]	; (800425c <HAL_ADC_ConfigChannel+0x694>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <HAL_ADC_ConfigChannel+0x640>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a17      	ldr	r2, [pc, #92]	; (8004260 <HAL_ADC_ConfigChannel+0x698>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d101      	bne.n	800420c <HAL_ADC_ConfigChannel+0x644>
 8004208:	4a18      	ldr	r2, [pc, #96]	; (800426c <HAL_ADC_ConfigChannel+0x6a4>)
 800420a:	e000      	b.n	800420e <HAL_ADC_ConfigChannel+0x646>
 800420c:	4a12      	ldr	r2, [pc, #72]	; (8004258 <HAL_ADC_ConfigChannel+0x690>)
 800420e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004214:	4619      	mov	r1, r3
 8004216:	4610      	mov	r0, r2
 8004218:	f7ff f857 	bl	80032ca <LL_ADC_SetCommonPathInternalCh>
 800421c:	e012      	b.n	8004244 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	f043 0220 	orr.w	r2, r3, #32
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004230:	e008      	b.n	8004244 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f043 0220 	orr.w	r2, r3, #32
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800424c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004250:	4618      	mov	r0, r3
 8004252:	3784      	adds	r7, #132	; 0x84
 8004254:	46bd      	mov	sp, r7
 8004256:	bd90      	pop	{r4, r7, pc}
 8004258:	58026300 	.word	0x58026300
 800425c:	40022000 	.word	0x40022000
 8004260:	40022100 	.word	0x40022100
 8004264:	58026000 	.word	0x58026000
 8004268:	cb840000 	.word	0xcb840000
 800426c:	40022300 	.word	0x40022300
 8004270:	24000088 	.word	0x24000088
 8004274:	053e2d63 	.word	0x053e2d63
 8004278:	c7520000 	.word	0xc7520000
 800427c:	cfb80000 	.word	0xcfb80000

08004280 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff f9b7 	bl	8003600 <LL_ADC_IsEnabled>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d16e      	bne.n	8004376 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	4b38      	ldr	r3, [pc, #224]	; (8004380 <ADC_Enable+0x100>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042aa:	f043 0210 	orr.w	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	f043 0201 	orr.w	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e05a      	b.n	8004378 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff f972 	bl	80035b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80042cc:	f7fe ffbc 	bl	8003248 <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a2b      	ldr	r2, [pc, #172]	; (8004384 <ADC_Enable+0x104>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d004      	beq.n	80042e6 <ADC_Enable+0x66>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a29      	ldr	r2, [pc, #164]	; (8004388 <ADC_Enable+0x108>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d101      	bne.n	80042ea <ADC_Enable+0x6a>
 80042e6:	4b29      	ldr	r3, [pc, #164]	; (800438c <ADC_Enable+0x10c>)
 80042e8:	e000      	b.n	80042ec <ADC_Enable+0x6c>
 80042ea:	4b29      	ldr	r3, [pc, #164]	; (8004390 <ADC_Enable+0x110>)
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff f903 	bl	80034f8 <LL_ADC_GetMultimode>
 80042f2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a23      	ldr	r2, [pc, #140]	; (8004388 <ADC_Enable+0x108>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d002      	beq.n	8004304 <ADC_Enable+0x84>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	e000      	b.n	8004306 <ADC_Enable+0x86>
 8004304:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <ADC_Enable+0x104>)
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	4293      	cmp	r3, r2
 800430c:	d02c      	beq.n	8004368 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d130      	bne.n	8004376 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004314:	e028      	b.n	8004368 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff f970 	bl	8003600 <LL_ADC_IsEnabled>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d104      	bne.n	8004330 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff f940 	bl	80035b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004330:	f7fe ff8a 	bl	8003248 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d914      	bls.n	8004368 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b01      	cmp	r3, #1
 800434a:	d00d      	beq.n	8004368 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	f043 0210 	orr.w	r2, r3, #16
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435c:	f043 0201 	orr.w	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e007      	b.n	8004378 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b01      	cmp	r3, #1
 8004374:	d1cf      	bne.n	8004316 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	8000003f 	.word	0x8000003f
 8004384:	40022000 	.word	0x40022000
 8004388:	40022100 	.word	0x40022100
 800438c:	40022300 	.word	0x40022300
 8004390:	58026300 	.word	0x58026300

08004394 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff f940 	bl	8003626 <LL_ADC_IsDisableOngoing>
 80043a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff f927 	bl	8003600 <LL_ADC_IsEnabled>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d047      	beq.n	8004448 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d144      	bne.n	8004448 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 030d 	and.w	r3, r3, #13
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d10c      	bne.n	80043e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff f901 	bl	80035d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2203      	movs	r2, #3
 80043dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80043de:	f7fe ff33 	bl	8003248 <HAL_GetTick>
 80043e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043e4:	e029      	b.n	800443a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	f043 0210 	orr.w	r2, r3, #16
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	f043 0201 	orr.w	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e023      	b.n	800444a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004402:	f7fe ff21 	bl	8003248 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d914      	bls.n	800443a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00d      	beq.n	800443a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	f043 0210 	orr.w	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	f043 0201 	orr.w	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e007      	b.n	800444a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1dc      	bne.n	8004402 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004468:	2b00      	cmp	r3, #0
 800446a:	d14b      	bne.n	8004504 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004470:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d021      	beq.n	80044ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe ff92 	bl	80033b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d032      	beq.n	80044fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d12b      	bne.n	80044fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d11f      	bne.n	80044fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	f043 0201 	orr.w	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	655a      	str	r2, [r3, #84]	; 0x54
 80044c8:	e018      	b.n	80044fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d111      	bne.n	80044fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f4:	f043 0201 	orr.w	r2, r3, #1
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff fb45 	bl	8003b8c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004502:	e00e      	b.n	8004522 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7ff fb4f 	bl	8003bb4 <HAL_ADC_ErrorCallback>
}
 8004516:	e004      	b.n	8004522 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
}
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff fb31 	bl	8003ba0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004558:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004564:	f043 0204 	orr.w	r2, r3, #4
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f7ff fb21 	bl	8003bb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a7a      	ldr	r2, [pc, #488]	; (8004774 <ADC_ConfigureBoostMode+0x1f8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d004      	beq.n	8004598 <ADC_ConfigureBoostMode+0x1c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a79      	ldr	r2, [pc, #484]	; (8004778 <ADC_ConfigureBoostMode+0x1fc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d109      	bne.n	80045ac <ADC_ConfigureBoostMode+0x30>
 8004598:	4b78      	ldr	r3, [pc, #480]	; (800477c <ADC_ConfigureBoostMode+0x200>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf14      	ite	ne
 80045a4:	2301      	movne	r3, #1
 80045a6:	2300      	moveq	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e008      	b.n	80045be <ADC_ConfigureBoostMode+0x42>
 80045ac:	4b74      	ldr	r3, [pc, #464]	; (8004780 <ADC_ConfigureBoostMode+0x204>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bf14      	ite	ne
 80045b8:	2301      	movne	r3, #1
 80045ba:	2300      	moveq	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01c      	beq.n	80045fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80045c2:	f005 f897 	bl	80096f4 <HAL_RCC_GetHCLKFreq>
 80045c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045d0:	d010      	beq.n	80045f4 <ADC_ConfigureBoostMode+0x78>
 80045d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045d6:	d873      	bhi.n	80046c0 <ADC_ConfigureBoostMode+0x144>
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045dc:	d002      	beq.n	80045e4 <ADC_ConfigureBoostMode+0x68>
 80045de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045e2:	d16d      	bne.n	80046c0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	0c1b      	lsrs	r3, r3, #16
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	60fb      	str	r3, [r7, #12]
        break;
 80045f2:	e068      	b.n	80046c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	089b      	lsrs	r3, r3, #2
 80045f8:	60fb      	str	r3, [r7, #12]
        break;
 80045fa:	e064      	b.n	80046c6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80045fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	f006 fb1e 	bl	800ac44 <HAL_RCCEx_GetPeriphCLKFreq>
 8004608:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004612:	d051      	beq.n	80046b8 <ADC_ConfigureBoostMode+0x13c>
 8004614:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004618:	d854      	bhi.n	80046c4 <ADC_ConfigureBoostMode+0x148>
 800461a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800461e:	d047      	beq.n	80046b0 <ADC_ConfigureBoostMode+0x134>
 8004620:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004624:	d84e      	bhi.n	80046c4 <ADC_ConfigureBoostMode+0x148>
 8004626:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800462a:	d03d      	beq.n	80046a8 <ADC_ConfigureBoostMode+0x12c>
 800462c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004630:	d848      	bhi.n	80046c4 <ADC_ConfigureBoostMode+0x148>
 8004632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004636:	d033      	beq.n	80046a0 <ADC_ConfigureBoostMode+0x124>
 8004638:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800463c:	d842      	bhi.n	80046c4 <ADC_ConfigureBoostMode+0x148>
 800463e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004642:	d029      	beq.n	8004698 <ADC_ConfigureBoostMode+0x11c>
 8004644:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004648:	d83c      	bhi.n	80046c4 <ADC_ConfigureBoostMode+0x148>
 800464a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800464e:	d01a      	beq.n	8004686 <ADC_ConfigureBoostMode+0x10a>
 8004650:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004654:	d836      	bhi.n	80046c4 <ADC_ConfigureBoostMode+0x148>
 8004656:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800465a:	d014      	beq.n	8004686 <ADC_ConfigureBoostMode+0x10a>
 800465c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004660:	d830      	bhi.n	80046c4 <ADC_ConfigureBoostMode+0x148>
 8004662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004666:	d00e      	beq.n	8004686 <ADC_ConfigureBoostMode+0x10a>
 8004668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466c:	d82a      	bhi.n	80046c4 <ADC_ConfigureBoostMode+0x148>
 800466e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004672:	d008      	beq.n	8004686 <ADC_ConfigureBoostMode+0x10a>
 8004674:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004678:	d824      	bhi.n	80046c4 <ADC_ConfigureBoostMode+0x148>
 800467a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800467e:	d002      	beq.n	8004686 <ADC_ConfigureBoostMode+0x10a>
 8004680:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004684:	d11e      	bne.n	80046c4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	0c9b      	lsrs	r3, r3, #18
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	60fb      	str	r3, [r7, #12]
        break;
 8004696:	e016      	b.n	80046c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	60fb      	str	r3, [r7, #12]
        break;
 800469e:	e012      	b.n	80046c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	60fb      	str	r3, [r7, #12]
        break;
 80046a6:	e00e      	b.n	80046c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	099b      	lsrs	r3, r3, #6
 80046ac:	60fb      	str	r3, [r7, #12]
        break;
 80046ae:	e00a      	b.n	80046c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	09db      	lsrs	r3, r3, #7
 80046b4:	60fb      	str	r3, [r7, #12]
        break;
 80046b6:	e006      	b.n	80046c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	0a1b      	lsrs	r3, r3, #8
 80046bc:	60fb      	str	r3, [r7, #12]
        break;
 80046be:	e002      	b.n	80046c6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80046c0:	bf00      	nop
 80046c2:	e000      	b.n	80046c6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80046c4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80046c6:	f7fe fdcb 	bl	8003260 <HAL_GetREVID>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d815      	bhi.n	8004700 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a2b      	ldr	r2, [pc, #172]	; (8004784 <ADC_ConfigureBoostMode+0x208>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d908      	bls.n	80046ee <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80046ec:	e03e      	b.n	800476c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046fc:	609a      	str	r2, [r3, #8]
}
 80046fe:	e035      	b.n	800476c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	085b      	lsrs	r3, r3, #1
 8004704:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	4a1f      	ldr	r2, [pc, #124]	; (8004788 <ADC_ConfigureBoostMode+0x20c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d808      	bhi.n	8004720 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800471c:	609a      	str	r2, [r3, #8]
}
 800471e:	e025      	b.n	800476c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a1a      	ldr	r2, [pc, #104]	; (800478c <ADC_ConfigureBoostMode+0x210>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d80a      	bhi.n	800473e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800473a:	609a      	str	r2, [r3, #8]
}
 800473c:	e016      	b.n	800476c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a13      	ldr	r2, [pc, #76]	; (8004790 <ADC_ConfigureBoostMode+0x214>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d80a      	bhi.n	800475c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004758:	609a      	str	r2, [r3, #8]
}
 800475a:	e007      	b.n	800476c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800476a:	609a      	str	r2, [r3, #8]
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40022000 	.word	0x40022000
 8004778:	40022100 	.word	0x40022100
 800477c:	40022300 	.word	0x40022300
 8004780:	58026300 	.word	0x58026300
 8004784:	01312d00 	.word	0x01312d00
 8004788:	005f5e10 	.word	0x005f5e10
 800478c:	00bebc20 	.word	0x00bebc20
 8004790:	017d7840 	.word	0x017d7840

08004794 <LL_ADC_IsEnabled>:
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <LL_ADC_IsEnabled+0x18>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <LL_ADC_IsEnabled+0x1a>
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <LL_ADC_StartCalibration>:
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <LL_ADC_StartCalibration+0x38>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80047dc:	430a      	orrs	r2, r1
 80047de:	4313      	orrs	r3, r2
 80047e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	609a      	str	r2, [r3, #8]
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	3ffeffc0 	.word	0x3ffeffc0

080047f8 <LL_ADC_IsCalibrationOnGoing>:
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800480c:	d101      	bne.n	8004812 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800480e:	2301      	movs	r3, #1
 8004810:	e000      	b.n	8004814 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <LL_ADC_REG_IsConversionOngoing>:
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 0304 	and.w	r3, r3, #4
 8004830:	2b04      	cmp	r3, #4
 8004832:	d101      	bne.n	8004838 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
	...

08004848 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_ADCEx_Calibration_Start+0x1e>
 8004862:	2302      	movs	r3, #2
 8004864:	e04c      	b.n	8004900 <HAL_ADCEx_Calibration_Start+0xb8>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7ff fd90 	bl	8004394 <ADC_Disable>
 8004874:	4603      	mov	r3, r0
 8004876:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d135      	bne.n	80048ea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004882:	4b21      	ldr	r3, [pc, #132]	; (8004908 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004884:	4013      	ands	r3, r2
 8004886:	f043 0202 	orr.w	r2, r3, #2
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff ff90 	bl	80047bc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800489c:	e014      	b.n	80048c8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	3301      	adds	r3, #1
 80048a2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4a19      	ldr	r2, [pc, #100]	; (800490c <HAL_ADCEx_Calibration_Start+0xc4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d30d      	bcc.n	80048c8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b0:	f023 0312 	bic.w	r3, r3, #18
 80048b4:	f043 0210 	orr.w	r2, r3, #16
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e01b      	b.n	8004900 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff ff93 	bl	80047f8 <LL_ADC_IsCalibrationOnGoing>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e2      	bne.n	800489e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048dc:	f023 0303 	bic.w	r3, r3, #3
 80048e0:	f043 0201 	orr.w	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54
 80048e8:	e005      	b.n	80048f6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	f043 0210 	orr.w	r2, r3, #16
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	ffffeefd 	.word	0xffffeefd
 800490c:	25c3f800 	.word	0x25c3f800

08004910 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004910:	b590      	push	{r4, r7, lr}
 8004912:	b09f      	sub	sp, #124	; 0x7c
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800492a:	2302      	movs	r3, #2
 800492c:	e0be      	b.n	8004aac <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004936:	2300      	movs	r3, #0
 8004938:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800493a:	2300      	movs	r3, #0
 800493c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a5c      	ldr	r2, [pc, #368]	; (8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d102      	bne.n	800494e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004948:	4b5b      	ldr	r3, [pc, #364]	; (8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	e001      	b.n	8004952 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10b      	bne.n	8004970 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495c:	f043 0220 	orr.w	r2, r3, #32
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e09d      	b.n	8004aac <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff ff54 	bl	8004820 <LL_ADC_REG_IsConversionOngoing>
 8004978:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff ff4e 	bl	8004820 <LL_ADC_REG_IsConversionOngoing>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d17f      	bne.n	8004a8a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800498a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800498c:	2b00      	cmp	r3, #0
 800498e:	d17c      	bne.n	8004a8a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a47      	ldr	r2, [pc, #284]	; (8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a46      	ldr	r2, [pc, #280]	; (8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d101      	bne.n	80049a8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80049a4:	4b45      	ldr	r3, [pc, #276]	; (8004abc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049a6:	e000      	b.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80049a8:	4b45      	ldr	r3, [pc, #276]	; (8004ac0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049aa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d039      	beq.n	8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80049b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a3a      	ldr	r2, [pc, #232]	; (8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a38      	ldr	r2, [pc, #224]	; (8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10e      	bne.n	80049f8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80049da:	4836      	ldr	r0, [pc, #216]	; (8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049dc:	f7ff feda 	bl	8004794 <LL_ADC_IsEnabled>
 80049e0:	4604      	mov	r4, r0
 80049e2:	4835      	ldr	r0, [pc, #212]	; (8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049e4:	f7ff fed6 	bl	8004794 <LL_ADC_IsEnabled>
 80049e8:	4603      	mov	r3, r0
 80049ea:	4323      	orrs	r3, r4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e008      	b.n	8004a0a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80049f8:	4832      	ldr	r0, [pc, #200]	; (8004ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80049fa:	f7ff fecb 	bl	8004794 <LL_ADC_IsEnabled>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bf0c      	ite	eq
 8004a04:	2301      	moveq	r3, #1
 8004a06:	2300      	movne	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d047      	beq.n	8004a9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a14:	4013      	ands	r3, r2
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	6811      	ldr	r1, [r2, #0]
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	6892      	ldr	r2, [r2, #8]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	431a      	orrs	r2, r3
 8004a22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a24:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a26:	e03a      	b.n	8004a9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a32:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a1e      	ldr	r2, [pc, #120]	; (8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d004      	beq.n	8004a48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d10e      	bne.n	8004a66 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004a48:	481a      	ldr	r0, [pc, #104]	; (8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a4a:	f7ff fea3 	bl	8004794 <LL_ADC_IsEnabled>
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4819      	ldr	r0, [pc, #100]	; (8004ab8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a52:	f7ff fe9f 	bl	8004794 <LL_ADC_IsEnabled>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4323      	orrs	r3, r4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	bf0c      	ite	eq
 8004a5e:	2301      	moveq	r3, #1
 8004a60:	2300      	movne	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	e008      	b.n	8004a78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004a66:	4817      	ldr	r0, [pc, #92]	; (8004ac4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a68:	f7ff fe94 	bl	8004794 <LL_ADC_IsEnabled>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bf0c      	ite	eq
 8004a72:	2301      	moveq	r3, #1
 8004a74:	2300      	movne	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d010      	beq.n	8004a9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a86:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a88:	e009      	b.n	8004a9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	f043 0220 	orr.w	r2, r3, #32
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004a9c:	e000      	b.n	8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a9e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004aa8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	377c      	adds	r7, #124	; 0x7c
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd90      	pop	{r4, r7, pc}
 8004ab4:	40022000 	.word	0x40022000
 8004ab8:	40022100 	.word	0x40022100
 8004abc:	40022300 	.word	0x40022300
 8004ac0:	58026300 	.word	0x58026300
 8004ac4:	58026000 	.word	0x58026000
 8004ac8:	fffff0e0 	.word	0xfffff0e0

08004acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004adc:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <__NVIC_SetPriorityGrouping+0x40>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ae8:	4013      	ands	r3, r2
 8004aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <__NVIC_SetPriorityGrouping+0x44>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004afa:	4a04      	ldr	r2, [pc, #16]	; (8004b0c <__NVIC_SetPriorityGrouping+0x40>)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	60d3      	str	r3, [r2, #12]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	e000ed00 	.word	0xe000ed00
 8004b10:	05fa0000 	.word	0x05fa0000

08004b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <__NVIC_GetPriorityGrouping+0x18>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	0a1b      	lsrs	r3, r3, #8
 8004b1e:	f003 0307 	and.w	r3, r3, #7
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	e000ed00 	.word	0xe000ed00

08004b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	4603      	mov	r3, r0
 8004b38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	db0b      	blt.n	8004b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	f003 021f 	and.w	r2, r3, #31
 8004b48:	4907      	ldr	r1, [pc, #28]	; (8004b68 <__NVIC_EnableIRQ+0x38>)
 8004b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	2001      	movs	r0, #1
 8004b52:	fa00 f202 	lsl.w	r2, r0, r2
 8004b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	e000e100 	.word	0xe000e100

08004b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	6039      	str	r1, [r7, #0]
 8004b76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	db0a      	blt.n	8004b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	490c      	ldr	r1, [pc, #48]	; (8004bb8 <__NVIC_SetPriority+0x4c>)
 8004b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b8a:	0112      	lsls	r2, r2, #4
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	440b      	add	r3, r1
 8004b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b94:	e00a      	b.n	8004bac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	4908      	ldr	r1, [pc, #32]	; (8004bbc <__NVIC_SetPriority+0x50>)
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	3b04      	subs	r3, #4
 8004ba4:	0112      	lsls	r2, r2, #4
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	440b      	add	r3, r1
 8004baa:	761a      	strb	r2, [r3, #24]
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000e100 	.word	0xe000e100
 8004bbc:	e000ed00 	.word	0xe000ed00

08004bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b089      	sub	sp, #36	; 0x24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f1c3 0307 	rsb	r3, r3, #7
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	bf28      	it	cs
 8004bde:	2304      	movcs	r3, #4
 8004be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3304      	adds	r3, #4
 8004be6:	2b06      	cmp	r3, #6
 8004be8:	d902      	bls.n	8004bf0 <NVIC_EncodePriority+0x30>
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	3b03      	subs	r3, #3
 8004bee:	e000      	b.n	8004bf2 <NVIC_EncodePriority+0x32>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43da      	mvns	r2, r3
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	401a      	ands	r2, r3
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	43d9      	mvns	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c18:	4313      	orrs	r3, r2
         );
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3724      	adds	r7, #36	; 0x24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff ff4c 	bl	8004acc <__NVIC_SetPriorityGrouping>
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c4a:	f7ff ff63 	bl	8004b14 <__NVIC_GetPriorityGrouping>
 8004c4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	6978      	ldr	r0, [r7, #20]
 8004c56:	f7ff ffb3 	bl	8004bc0 <NVIC_EncodePriority>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff ff82 	bl	8004b6c <__NVIC_SetPriority>
}
 8004c68:	bf00      	nop
 8004c6a:	3718      	adds	r7, #24
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff ff56 	bl	8004b30 <__NVIC_EnableIRQ>
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e014      	b.n	8004cc8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	791b      	ldrb	r3, [r3, #4]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fb ff98 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e046      	b.n	8004d72 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	795b      	ldrb	r3, [r3, #5]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_DAC_Start+0x20>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e040      	b.n	8004d72 <HAL_DAC_Start+0xa2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6819      	ldr	r1, [r3, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2201      	movs	r2, #1
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10f      	bne.n	8004d3a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d11d      	bne.n	8004d64 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	605a      	str	r2, [r3, #4]
 8004d38:	e014      	b.n	8004d64 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d107      	bne.n	8004d64 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0202 	orr.w	r2, r2, #2
 8004d62:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
	...

08004d80 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0a2      	b.n	8004ede <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	795b      	ldrb	r3, [r3, #5]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_DAC_Start_DMA+0x24>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e09c      	b.n	8004ede <HAL_DAC_Start_DMA+0x15e>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2202      	movs	r2, #2
 8004dae:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d129      	bne.n	8004e0a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	4a4b      	ldr	r2, [pc, #300]	; (8004ee8 <HAL_DAC_Start_DMA+0x168>)
 8004dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	4a4a      	ldr	r2, [pc, #296]	; (8004eec <HAL_DAC_Start_DMA+0x16c>)
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	4a49      	ldr	r2, [pc, #292]	; (8004ef0 <HAL_DAC_Start_DMA+0x170>)
 8004dcc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ddc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_DAC_Start_DMA+0x6c>
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d005      	beq.n	8004df6 <HAL_DAC_Start_DMA+0x76>
 8004dea:	e009      	b.n	8004e00 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3308      	adds	r3, #8
 8004df2:	613b      	str	r3, [r7, #16]
        break;
 8004df4:	e033      	b.n	8004e5e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	613b      	str	r3, [r7, #16]
        break;
 8004dfe:	e02e      	b.n	8004e5e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3310      	adds	r3, #16
 8004e06:	613b      	str	r3, [r7, #16]
        break;
 8004e08:	e029      	b.n	8004e5e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	4a39      	ldr	r2, [pc, #228]	; (8004ef4 <HAL_DAC_Start_DMA+0x174>)
 8004e10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	4a38      	ldr	r2, [pc, #224]	; (8004ef8 <HAL_DAC_Start_DMA+0x178>)
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	4a37      	ldr	r2, [pc, #220]	; (8004efc <HAL_DAC_Start_DMA+0x17c>)
 8004e20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e30:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_DAC_Start_DMA+0xc0>
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d005      	beq.n	8004e4a <HAL_DAC_Start_DMA+0xca>
 8004e3e:	e009      	b.n	8004e54 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3314      	adds	r3, #20
 8004e46:	613b      	str	r3, [r7, #16]
        break;
 8004e48:	e009      	b.n	8004e5e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3318      	adds	r3, #24
 8004e50:	613b      	str	r3, [r7, #16]
        break;
 8004e52:	e004      	b.n	8004e5e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	331c      	adds	r3, #28
 8004e5a:	613b      	str	r3, [r7, #16]
        break;
 8004e5c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d111      	bne.n	8004e88 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6898      	ldr	r0, [r3, #8]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	f000 fe67 	bl	8005b50 <HAL_DMA_Start_IT>
 8004e82:	4603      	mov	r3, r0
 8004e84:	75fb      	strb	r3, [r7, #23]
 8004e86:	e010      	b.n	8004eaa <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004e96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	68d8      	ldr	r0, [r3, #12]
 8004e9c:	6879      	ldr	r1, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	f000 fe55 	bl	8005b50 <HAL_DMA_Start_IT>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6819      	ldr	r1, [r3, #0]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	409a      	lsls	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	e005      	b.n	8004edc <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f043 0204 	orr.w	r2, r3, #4
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	08005371 	.word	0x08005371
 8004eec:	08005393 	.word	0x08005393
 8004ef0:	080053af 	.word	0x080053af
 8004ef4:	0800542d 	.word	0x0800542d
 8004ef8:	0800544f 	.word	0x0800544f
 8004efc:	0800546b 	.word	0x0800546b

08004f00 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e03e      	b.n	8004f92 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6819      	ldr	r1, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f003 0310 	and.w	r3, r3, #16
 8004f20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	43da      	mvns	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	400a      	ands	r2, r1
 8004f30:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6819      	ldr	r1, [r3, #0]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f003 0310 	and.w	r3, r3, #16
 8004f3e:	2201      	movs	r2, #1
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	43da      	mvns	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	400a      	ands	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10d      	bne.n	8004f70 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f001 f863 	bl	8006024 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e00c      	b.n	8004f8a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f001 f855 	bl	8006024 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004f88:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb0:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01d      	beq.n	8004ff8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d018      	beq.n	8004ff8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f043 0201 	orr.w	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fe0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ff0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f86f 	bl	80050d6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01d      	beq.n	800503e <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d018      	beq.n	800503e <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2204      	movs	r2, #4
 8005010:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f043 0202 	orr.w	r2, r3, #2
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005026:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005036:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f9ed 	bl	8005418 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800503e:	bf00      	nop
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005046:	b480      	push	{r7}
 8005048:	b087      	sub	sp, #28
 800504a:	af00      	add	r7, sp, #0
 800504c:	60f8      	str	r0, [r7, #12]
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e015      	b.n	800508e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4413      	add	r3, r2
 8005074:	3308      	adds	r3, #8
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	e004      	b.n	8005084 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4413      	add	r3, r2
 8005080:	3314      	adds	r3, #20
 8005082:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	461a      	mov	r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
	...

080050ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08a      	sub	sp, #40	; 0x28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_DAC_ConfigChannel+0x1e>
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e12a      	b.n	8005364 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	795b      	ldrb	r3, [r3, #5]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_DAC_ConfigChannel+0x2e>
 8005116:	2302      	movs	r3, #2
 8005118:	e124      	b.n	8005364 <HAL_DAC_ConfigChannel+0x278>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2201      	movs	r2, #1
 800511e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2202      	movs	r2, #2
 8005124:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b04      	cmp	r3, #4
 800512c:	d17a      	bne.n	8005224 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800512e:	f7fe f88b 	bl	8003248 <HAL_GetTick>
 8005132:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d13d      	bne.n	80051b6 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800513a:	e018      	b.n	800516e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800513c:	f7fe f884 	bl	8003248 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b01      	cmp	r3, #1
 8005148:	d911      	bls.n	800516e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005150:	4b86      	ldr	r3, [pc, #536]	; (800536c <HAL_DAC_ConfigChannel+0x280>)
 8005152:	4013      	ands	r3, r2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f043 0208 	orr.w	r2, r3, #8
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2203      	movs	r2, #3
 8005168:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e0fa      	b.n	8005364 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005174:	4b7d      	ldr	r3, [pc, #500]	; (800536c <HAL_DAC_ConfigChannel+0x280>)
 8005176:	4013      	ands	r3, r2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1df      	bne.n	800513c <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	6992      	ldr	r2, [r2, #24]
 8005184:	641a      	str	r2, [r3, #64]	; 0x40
 8005186:	e020      	b.n	80051ca <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005188:	f7fe f85e 	bl	8003248 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b01      	cmp	r3, #1
 8005194:	d90f      	bls.n	80051b6 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	2b00      	cmp	r3, #0
 800519e:	da0a      	bge.n	80051b6 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	f043 0208 	orr.w	r2, r3, #8
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2203      	movs	r2, #3
 80051b0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e0d6      	b.n	8005364 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051bc:	2b00      	cmp	r3, #0
 80051be:	dbe3      	blt.n	8005188 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	6992      	ldr	r2, [r2, #24]
 80051c8:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80051da:	fa01 f303 	lsl.w	r3, r1, r3
 80051de:	43db      	mvns	r3, r3
 80051e0:	ea02 0103 	and.w	r1, r2, r3
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f003 0310 	and.w	r3, r3, #16
 80051ee:	409a      	lsls	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	21ff      	movs	r1, #255	; 0xff
 8005206:	fa01 f303 	lsl.w	r3, r1, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	ea02 0103 	and.w	r1, r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6a1a      	ldr	r2, [r3, #32]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	409a      	lsls	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d11d      	bne.n	8005268 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	221f      	movs	r2, #31
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4013      	ands	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	4313      	orrs	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f003 0310 	and.w	r3, r3, #16
 8005276:	2207      	movs	r2, #7
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4013      	ands	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d102      	bne.n	8005292 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800528c:	2300      	movs	r3, #0
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
 8005290:	e00f      	b.n	80052b2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d102      	bne.n	80052a0 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800529a:	2301      	movs	r3, #1
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
 800529e:	e008      	b.n	80052b2 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d102      	bne.n	80052ae <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80052a8:	2301      	movs	r3, #1
 80052aa:	627b      	str	r3, [r7, #36]	; 0x24
 80052ac:	e001      	b.n	80052b2 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6819      	ldr	r1, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	43da      	mvns	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	400a      	ands	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	f640 72fe 	movw	r2, #4094	; 0xffe
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	43db      	mvns	r3, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4013      	ands	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4313      	orrs	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6819      	ldr	r1, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	22c0      	movs	r2, #192	; 0xc0
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43da      	mvns	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	400a      	ands	r2, r1
 8005352:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005364:	4618      	mov	r0, r3
 8005366:	3728      	adds	r7, #40	; 0x28
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20008000 	.word	0x20008000

08005370 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f7ff fe8b 	bl	800509a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2201      	movs	r2, #1
 8005388:	711a      	strb	r2, [r3, #4]
}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff fe84 	bl	80050ae <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80053a6:	bf00      	nop
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	f043 0204 	orr.w	r2, r3, #4
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f7ff fe7a 	bl	80050c2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	711a      	strb	r2, [r3, #4]
}
 80053d4:	bf00      	nop
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff ffce 	bl	80053dc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2201      	movs	r2, #1
 8005444:	711a      	strb	r2, [r3, #4]
}
 8005446:	bf00      	nop
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff ffc7 	bl	80053f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005462:	bf00      	nop
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f043 0204 	orr.w	r2, r3, #4
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f7ff ffbd 	bl	8005404 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	711a      	strb	r2, [r3, #4]
}
 8005490:	bf00      	nop
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80054a0:	f7fd fed2 	bl	8003248 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e316      	b.n	8005ade <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a66      	ldr	r2, [pc, #408]	; (8005650 <HAL_DMA_Init+0x1b8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d04a      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a65      	ldr	r2, [pc, #404]	; (8005654 <HAL_DMA_Init+0x1bc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d045      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a63      	ldr	r2, [pc, #396]	; (8005658 <HAL_DMA_Init+0x1c0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d040      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a62      	ldr	r2, [pc, #392]	; (800565c <HAL_DMA_Init+0x1c4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d03b      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a60      	ldr	r2, [pc, #384]	; (8005660 <HAL_DMA_Init+0x1c8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d036      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a5f      	ldr	r2, [pc, #380]	; (8005664 <HAL_DMA_Init+0x1cc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d031      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a5d      	ldr	r2, [pc, #372]	; (8005668 <HAL_DMA_Init+0x1d0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d02c      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a5c      	ldr	r2, [pc, #368]	; (800566c <HAL_DMA_Init+0x1d4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d027      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a5a      	ldr	r2, [pc, #360]	; (8005670 <HAL_DMA_Init+0x1d8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d022      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a59      	ldr	r2, [pc, #356]	; (8005674 <HAL_DMA_Init+0x1dc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d01d      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a57      	ldr	r2, [pc, #348]	; (8005678 <HAL_DMA_Init+0x1e0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d018      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a56      	ldr	r2, [pc, #344]	; (800567c <HAL_DMA_Init+0x1e4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a54      	ldr	r2, [pc, #336]	; (8005680 <HAL_DMA_Init+0x1e8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00e      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a53      	ldr	r2, [pc, #332]	; (8005684 <HAL_DMA_Init+0x1ec>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d009      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a51      	ldr	r2, [pc, #324]	; (8005688 <HAL_DMA_Init+0x1f0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <HAL_DMA_Init+0xb8>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a50      	ldr	r2, [pc, #320]	; (800568c <HAL_DMA_Init+0x1f4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d101      	bne.n	8005554 <HAL_DMA_Init+0xbc>
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <HAL_DMA_Init+0xbe>
 8005554:	2300      	movs	r3, #0
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 813b 	beq.w	80057d2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a37      	ldr	r2, [pc, #220]	; (8005650 <HAL_DMA_Init+0x1b8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d04a      	beq.n	800560c <HAL_DMA_Init+0x174>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a36      	ldr	r2, [pc, #216]	; (8005654 <HAL_DMA_Init+0x1bc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d045      	beq.n	800560c <HAL_DMA_Init+0x174>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a34      	ldr	r2, [pc, #208]	; (8005658 <HAL_DMA_Init+0x1c0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d040      	beq.n	800560c <HAL_DMA_Init+0x174>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a33      	ldr	r2, [pc, #204]	; (800565c <HAL_DMA_Init+0x1c4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d03b      	beq.n	800560c <HAL_DMA_Init+0x174>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a31      	ldr	r2, [pc, #196]	; (8005660 <HAL_DMA_Init+0x1c8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d036      	beq.n	800560c <HAL_DMA_Init+0x174>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a30      	ldr	r2, [pc, #192]	; (8005664 <HAL_DMA_Init+0x1cc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d031      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a2e      	ldr	r2, [pc, #184]	; (8005668 <HAL_DMA_Init+0x1d0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d02c      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2d      	ldr	r2, [pc, #180]	; (800566c <HAL_DMA_Init+0x1d4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d027      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a2b      	ldr	r2, [pc, #172]	; (8005670 <HAL_DMA_Init+0x1d8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d022      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a2a      	ldr	r2, [pc, #168]	; (8005674 <HAL_DMA_Init+0x1dc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d01d      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a28      	ldr	r2, [pc, #160]	; (8005678 <HAL_DMA_Init+0x1e0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d018      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a27      	ldr	r2, [pc, #156]	; (800567c <HAL_DMA_Init+0x1e4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a25      	ldr	r2, [pc, #148]	; (8005680 <HAL_DMA_Init+0x1e8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00e      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a24      	ldr	r2, [pc, #144]	; (8005684 <HAL_DMA_Init+0x1ec>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d009      	beq.n	800560c <HAL_DMA_Init+0x174>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a22      	ldr	r2, [pc, #136]	; (8005688 <HAL_DMA_Init+0x1f0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d004      	beq.n	800560c <HAL_DMA_Init+0x174>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a21      	ldr	r2, [pc, #132]	; (800568c <HAL_DMA_Init+0x1f4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d108      	bne.n	800561e <HAL_DMA_Init+0x186>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	e007      	b.n	800562e <HAL_DMA_Init+0x196>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0201 	bic.w	r2, r2, #1
 800562c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800562e:	e02f      	b.n	8005690 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005630:	f7fd fe0a 	bl	8003248 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b05      	cmp	r3, #5
 800563c:	d928      	bls.n	8005690 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2203      	movs	r2, #3
 8005648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e246      	b.n	8005ade <HAL_DMA_Init+0x646>
 8005650:	40020010 	.word	0x40020010
 8005654:	40020028 	.word	0x40020028
 8005658:	40020040 	.word	0x40020040
 800565c:	40020058 	.word	0x40020058
 8005660:	40020070 	.word	0x40020070
 8005664:	40020088 	.word	0x40020088
 8005668:	400200a0 	.word	0x400200a0
 800566c:	400200b8 	.word	0x400200b8
 8005670:	40020410 	.word	0x40020410
 8005674:	40020428 	.word	0x40020428
 8005678:	40020440 	.word	0x40020440
 800567c:	40020458 	.word	0x40020458
 8005680:	40020470 	.word	0x40020470
 8005684:	40020488 	.word	0x40020488
 8005688:	400204a0 	.word	0x400204a0
 800568c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1c8      	bne.n	8005630 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4b83      	ldr	r3, [pc, #524]	; (80058b8 <HAL_DMA_Init+0x420>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80056b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80056c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d107      	bne.n	80056f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ec:	4313      	orrs	r3, r2
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80056f4:	4b71      	ldr	r3, [pc, #452]	; (80058bc <HAL_DMA_Init+0x424>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	4b71      	ldr	r3, [pc, #452]	; (80058c0 <HAL_DMA_Init+0x428>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005700:	d328      	bcc.n	8005754 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b28      	cmp	r3, #40	; 0x28
 8005708:	d903      	bls.n	8005712 <HAL_DMA_Init+0x27a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b2e      	cmp	r3, #46	; 0x2e
 8005710:	d917      	bls.n	8005742 <HAL_DMA_Init+0x2aa>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b3e      	cmp	r3, #62	; 0x3e
 8005718:	d903      	bls.n	8005722 <HAL_DMA_Init+0x28a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b42      	cmp	r3, #66	; 0x42
 8005720:	d90f      	bls.n	8005742 <HAL_DMA_Init+0x2aa>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b46      	cmp	r3, #70	; 0x46
 8005728:	d903      	bls.n	8005732 <HAL_DMA_Init+0x29a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b48      	cmp	r3, #72	; 0x48
 8005730:	d907      	bls.n	8005742 <HAL_DMA_Init+0x2aa>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b4e      	cmp	r3, #78	; 0x4e
 8005738:	d905      	bls.n	8005746 <HAL_DMA_Init+0x2ae>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b52      	cmp	r3, #82	; 0x52
 8005740:	d801      	bhi.n	8005746 <HAL_DMA_Init+0x2ae>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <HAL_DMA_Init+0x2b0>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005752:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f023 0307 	bic.w	r3, r3, #7
 800576a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	2b04      	cmp	r3, #4
 800577c:	d117      	bne.n	80057ae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00e      	beq.n	80057ae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f002 fb3f 	bl	8007e14 <DMA_CheckFifoParam>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2240      	movs	r2, #64	; 0x40
 80057a0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e197      	b.n	8005ade <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f002 fa7a 	bl	8007cb0 <DMA_CalcBaseAndBitshift>
 80057bc:	4603      	mov	r3, r0
 80057be:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c4:	f003 031f 	and.w	r3, r3, #31
 80057c8:	223f      	movs	r2, #63	; 0x3f
 80057ca:	409a      	lsls	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	609a      	str	r2, [r3, #8]
 80057d0:	e0cd      	b.n	800596e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a3b      	ldr	r2, [pc, #236]	; (80058c4 <HAL_DMA_Init+0x42c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d022      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a39      	ldr	r2, [pc, #228]	; (80058c8 <HAL_DMA_Init+0x430>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01d      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a38      	ldr	r2, [pc, #224]	; (80058cc <HAL_DMA_Init+0x434>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d018      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a36      	ldr	r2, [pc, #216]	; (80058d0 <HAL_DMA_Init+0x438>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d013      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a35      	ldr	r2, [pc, #212]	; (80058d4 <HAL_DMA_Init+0x43c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00e      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a33      	ldr	r2, [pc, #204]	; (80058d8 <HAL_DMA_Init+0x440>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d009      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a32      	ldr	r2, [pc, #200]	; (80058dc <HAL_DMA_Init+0x444>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d004      	beq.n	8005822 <HAL_DMA_Init+0x38a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a30      	ldr	r2, [pc, #192]	; (80058e0 <HAL_DMA_Init+0x448>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d101      	bne.n	8005826 <HAL_DMA_Init+0x38e>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_DMA_Init+0x390>
 8005826:	2300      	movs	r3, #0
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8097 	beq.w	800595c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a24      	ldr	r2, [pc, #144]	; (80058c4 <HAL_DMA_Init+0x42c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d021      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a22      	ldr	r2, [pc, #136]	; (80058c8 <HAL_DMA_Init+0x430>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01c      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a21      	ldr	r2, [pc, #132]	; (80058cc <HAL_DMA_Init+0x434>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d017      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <HAL_DMA_Init+0x438>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d012      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1e      	ldr	r2, [pc, #120]	; (80058d4 <HAL_DMA_Init+0x43c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00d      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1c      	ldr	r2, [pc, #112]	; (80058d8 <HAL_DMA_Init+0x440>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d008      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <HAL_DMA_Init+0x444>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d003      	beq.n	800587c <HAL_DMA_Init+0x3e4>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <HAL_DMA_Init+0x448>)
 800587a:	4293      	cmp	r3, r2
 800587c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <HAL_DMA_Init+0x44c>)
 800589a:	4013      	ands	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b40      	cmp	r3, #64	; 0x40
 80058a4:	d020      	beq.n	80058e8 <HAL_DMA_Init+0x450>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b80      	cmp	r3, #128	; 0x80
 80058ac:	d102      	bne.n	80058b4 <HAL_DMA_Init+0x41c>
 80058ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058b2:	e01a      	b.n	80058ea <HAL_DMA_Init+0x452>
 80058b4:	2300      	movs	r3, #0
 80058b6:	e018      	b.n	80058ea <HAL_DMA_Init+0x452>
 80058b8:	fe10803f 	.word	0xfe10803f
 80058bc:	5c001000 	.word	0x5c001000
 80058c0:	ffff0000 	.word	0xffff0000
 80058c4:	58025408 	.word	0x58025408
 80058c8:	5802541c 	.word	0x5802541c
 80058cc:	58025430 	.word	0x58025430
 80058d0:	58025444 	.word	0x58025444
 80058d4:	58025458 	.word	0x58025458
 80058d8:	5802546c 	.word	0x5802546c
 80058dc:	58025480 	.word	0x58025480
 80058e0:	58025494 	.word	0x58025494
 80058e4:	fffe000f 	.word	0xfffe000f
 80058e8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	68d2      	ldr	r2, [r2, #12]
 80058ee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80058f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80058f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005900:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005908:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005910:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005918:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	4b6e      	ldr	r3, [pc, #440]	; (8005ae8 <HAL_DMA_Init+0x650>)
 8005930:	4413      	add	r3, r2
 8005932:	4a6e      	ldr	r2, [pc, #440]	; (8005aec <HAL_DMA_Init+0x654>)
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	091b      	lsrs	r3, r3, #4
 800593a:	009a      	lsls	r2, r3, #2
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f002 f9b5 	bl	8007cb0 <DMA_CalcBaseAndBitshift>
 8005946:	4603      	mov	r3, r0
 8005948:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594e:	f003 031f 	and.w	r3, r3, #31
 8005952:	2201      	movs	r2, #1
 8005954:	409a      	lsls	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	605a      	str	r2, [r3, #4]
 800595a:	e008      	b.n	800596e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2240      	movs	r2, #64	; 0x40
 8005960:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2203      	movs	r2, #3
 8005966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e0b7      	b.n	8005ade <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a5f      	ldr	r2, [pc, #380]	; (8005af0 <HAL_DMA_Init+0x658>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d072      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a5d      	ldr	r2, [pc, #372]	; (8005af4 <HAL_DMA_Init+0x65c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d06d      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a5c      	ldr	r2, [pc, #368]	; (8005af8 <HAL_DMA_Init+0x660>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d068      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a5a      	ldr	r2, [pc, #360]	; (8005afc <HAL_DMA_Init+0x664>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d063      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a59      	ldr	r2, [pc, #356]	; (8005b00 <HAL_DMA_Init+0x668>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d05e      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a57      	ldr	r2, [pc, #348]	; (8005b04 <HAL_DMA_Init+0x66c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d059      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a56      	ldr	r2, [pc, #344]	; (8005b08 <HAL_DMA_Init+0x670>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d054      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a54      	ldr	r2, [pc, #336]	; (8005b0c <HAL_DMA_Init+0x674>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d04f      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a53      	ldr	r2, [pc, #332]	; (8005b10 <HAL_DMA_Init+0x678>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d04a      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a51      	ldr	r2, [pc, #324]	; (8005b14 <HAL_DMA_Init+0x67c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d045      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a50      	ldr	r2, [pc, #320]	; (8005b18 <HAL_DMA_Init+0x680>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d040      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a4e      	ldr	r2, [pc, #312]	; (8005b1c <HAL_DMA_Init+0x684>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d03b      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a4d      	ldr	r2, [pc, #308]	; (8005b20 <HAL_DMA_Init+0x688>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d036      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a4b      	ldr	r2, [pc, #300]	; (8005b24 <HAL_DMA_Init+0x68c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d031      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a4a      	ldr	r2, [pc, #296]	; (8005b28 <HAL_DMA_Init+0x690>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d02c      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a48      	ldr	r2, [pc, #288]	; (8005b2c <HAL_DMA_Init+0x694>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d027      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a47      	ldr	r2, [pc, #284]	; (8005b30 <HAL_DMA_Init+0x698>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d022      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a45      	ldr	r2, [pc, #276]	; (8005b34 <HAL_DMA_Init+0x69c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d01d      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a44      	ldr	r2, [pc, #272]	; (8005b38 <HAL_DMA_Init+0x6a0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d018      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a42      	ldr	r2, [pc, #264]	; (8005b3c <HAL_DMA_Init+0x6a4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a41      	ldr	r2, [pc, #260]	; (8005b40 <HAL_DMA_Init+0x6a8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00e      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a3f      	ldr	r2, [pc, #252]	; (8005b44 <HAL_DMA_Init+0x6ac>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d009      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a3e      	ldr	r2, [pc, #248]	; (8005b48 <HAL_DMA_Init+0x6b0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <HAL_DMA_Init+0x5c6>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a3c      	ldr	r2, [pc, #240]	; (8005b4c <HAL_DMA_Init+0x6b4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d101      	bne.n	8005a62 <HAL_DMA_Init+0x5ca>
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <HAL_DMA_Init+0x5cc>
 8005a62:	2300      	movs	r3, #0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d032      	beq.n	8005ace <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f002 fa4f 	bl	8007f0c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b80      	cmp	r3, #128	; 0x80
 8005a74:	d102      	bne.n	8005a7c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a90:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d010      	beq.n	8005abc <HAL_DMA_Init+0x624>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d80c      	bhi.n	8005abc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f002 facc 	bl	8008040 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	e008      	b.n	8005ace <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	a7fdabf8 	.word	0xa7fdabf8
 8005aec:	cccccccd 	.word	0xcccccccd
 8005af0:	40020010 	.word	0x40020010
 8005af4:	40020028 	.word	0x40020028
 8005af8:	40020040 	.word	0x40020040
 8005afc:	40020058 	.word	0x40020058
 8005b00:	40020070 	.word	0x40020070
 8005b04:	40020088 	.word	0x40020088
 8005b08:	400200a0 	.word	0x400200a0
 8005b0c:	400200b8 	.word	0x400200b8
 8005b10:	40020410 	.word	0x40020410
 8005b14:	40020428 	.word	0x40020428
 8005b18:	40020440 	.word	0x40020440
 8005b1c:	40020458 	.word	0x40020458
 8005b20:	40020470 	.word	0x40020470
 8005b24:	40020488 	.word	0x40020488
 8005b28:	400204a0 	.word	0x400204a0
 8005b2c:	400204b8 	.word	0x400204b8
 8005b30:	58025408 	.word	0x58025408
 8005b34:	5802541c 	.word	0x5802541c
 8005b38:	58025430 	.word	0x58025430
 8005b3c:	58025444 	.word	0x58025444
 8005b40:	58025458 	.word	0x58025458
 8005b44:	5802546c 	.word	0x5802546c
 8005b48:	58025480 	.word	0x58025480
 8005b4c:	58025494 	.word	0x58025494

08005b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e226      	b.n	8005fba <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <HAL_DMA_Start_IT+0x2a>
 8005b76:	2302      	movs	r3, #2
 8005b78:	e21f      	b.n	8005fba <HAL_DMA_Start_IT+0x46a>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	f040 820a 	bne.w	8005fa4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a68      	ldr	r2, [pc, #416]	; (8005d44 <HAL_DMA_Start_IT+0x1f4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d04a      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a66      	ldr	r2, [pc, #408]	; (8005d48 <HAL_DMA_Start_IT+0x1f8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d045      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a65      	ldr	r2, [pc, #404]	; (8005d4c <HAL_DMA_Start_IT+0x1fc>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d040      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a63      	ldr	r2, [pc, #396]	; (8005d50 <HAL_DMA_Start_IT+0x200>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d03b      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a62      	ldr	r2, [pc, #392]	; (8005d54 <HAL_DMA_Start_IT+0x204>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d036      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a60      	ldr	r2, [pc, #384]	; (8005d58 <HAL_DMA_Start_IT+0x208>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d031      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a5f      	ldr	r2, [pc, #380]	; (8005d5c <HAL_DMA_Start_IT+0x20c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d02c      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a5d      	ldr	r2, [pc, #372]	; (8005d60 <HAL_DMA_Start_IT+0x210>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d027      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a5c      	ldr	r2, [pc, #368]	; (8005d64 <HAL_DMA_Start_IT+0x214>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d022      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a5a      	ldr	r2, [pc, #360]	; (8005d68 <HAL_DMA_Start_IT+0x218>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d01d      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a59      	ldr	r2, [pc, #356]	; (8005d6c <HAL_DMA_Start_IT+0x21c>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d018      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a57      	ldr	r2, [pc, #348]	; (8005d70 <HAL_DMA_Start_IT+0x220>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a56      	ldr	r2, [pc, #344]	; (8005d74 <HAL_DMA_Start_IT+0x224>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00e      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a54      	ldr	r2, [pc, #336]	; (8005d78 <HAL_DMA_Start_IT+0x228>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d009      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a53      	ldr	r2, [pc, #332]	; (8005d7c <HAL_DMA_Start_IT+0x22c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_DMA_Start_IT+0xee>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a51      	ldr	r2, [pc, #324]	; (8005d80 <HAL_DMA_Start_IT+0x230>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d108      	bne.n	8005c50 <HAL_DMA_Start_IT+0x100>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	e007      	b.n	8005c60 <HAL_DMA_Start_IT+0x110>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f001 fe76 	bl	8007958 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a34      	ldr	r2, [pc, #208]	; (8005d44 <HAL_DMA_Start_IT+0x1f4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d04a      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a33      	ldr	r2, [pc, #204]	; (8005d48 <HAL_DMA_Start_IT+0x1f8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d045      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a31      	ldr	r2, [pc, #196]	; (8005d4c <HAL_DMA_Start_IT+0x1fc>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d040      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a30      	ldr	r2, [pc, #192]	; (8005d50 <HAL_DMA_Start_IT+0x200>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d03b      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a2e      	ldr	r2, [pc, #184]	; (8005d54 <HAL_DMA_Start_IT+0x204>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d036      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a2d      	ldr	r2, [pc, #180]	; (8005d58 <HAL_DMA_Start_IT+0x208>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d031      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2b      	ldr	r2, [pc, #172]	; (8005d5c <HAL_DMA_Start_IT+0x20c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d02c      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a2a      	ldr	r2, [pc, #168]	; (8005d60 <HAL_DMA_Start_IT+0x210>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d027      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a28      	ldr	r2, [pc, #160]	; (8005d64 <HAL_DMA_Start_IT+0x214>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d022      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a27      	ldr	r2, [pc, #156]	; (8005d68 <HAL_DMA_Start_IT+0x218>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d01d      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a25      	ldr	r2, [pc, #148]	; (8005d6c <HAL_DMA_Start_IT+0x21c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d018      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a24      	ldr	r2, [pc, #144]	; (8005d70 <HAL_DMA_Start_IT+0x220>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d013      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a22      	ldr	r2, [pc, #136]	; (8005d74 <HAL_DMA_Start_IT+0x224>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00e      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <HAL_DMA_Start_IT+0x228>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d009      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1f      	ldr	r2, [pc, #124]	; (8005d7c <HAL_DMA_Start_IT+0x22c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d004      	beq.n	8005d0c <HAL_DMA_Start_IT+0x1bc>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1e      	ldr	r2, [pc, #120]	; (8005d80 <HAL_DMA_Start_IT+0x230>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d101      	bne.n	8005d10 <HAL_DMA_Start_IT+0x1c0>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <HAL_DMA_Start_IT+0x1c2>
 8005d10:	2300      	movs	r3, #0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d036      	beq.n	8005d84 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f023 021e 	bic.w	r2, r3, #30
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0216 	orr.w	r2, r2, #22
 8005d28:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d03e      	beq.n	8005db0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 0208 	orr.w	r2, r2, #8
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	e035      	b.n	8005db0 <HAL_DMA_Start_IT+0x260>
 8005d44:	40020010 	.word	0x40020010
 8005d48:	40020028 	.word	0x40020028
 8005d4c:	40020040 	.word	0x40020040
 8005d50:	40020058 	.word	0x40020058
 8005d54:	40020070 	.word	0x40020070
 8005d58:	40020088 	.word	0x40020088
 8005d5c:	400200a0 	.word	0x400200a0
 8005d60:	400200b8 	.word	0x400200b8
 8005d64:	40020410 	.word	0x40020410
 8005d68:	40020428 	.word	0x40020428
 8005d6c:	40020440 	.word	0x40020440
 8005d70:	40020458 	.word	0x40020458
 8005d74:	40020470 	.word	0x40020470
 8005d78:	40020488 	.word	0x40020488
 8005d7c:	400204a0 	.word	0x400204a0
 8005d80:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f023 020e 	bic.w	r2, r3, #14
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 020a 	orr.w	r2, r2, #10
 8005d96:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0204 	orr.w	r2, r2, #4
 8005dae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a83      	ldr	r2, [pc, #524]	; (8005fc4 <HAL_DMA_Start_IT+0x474>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d072      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a82      	ldr	r2, [pc, #520]	; (8005fc8 <HAL_DMA_Start_IT+0x478>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d06d      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a80      	ldr	r2, [pc, #512]	; (8005fcc <HAL_DMA_Start_IT+0x47c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d068      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a7f      	ldr	r2, [pc, #508]	; (8005fd0 <HAL_DMA_Start_IT+0x480>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d063      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a7d      	ldr	r2, [pc, #500]	; (8005fd4 <HAL_DMA_Start_IT+0x484>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d05e      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a7c      	ldr	r2, [pc, #496]	; (8005fd8 <HAL_DMA_Start_IT+0x488>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d059      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a7a      	ldr	r2, [pc, #488]	; (8005fdc <HAL_DMA_Start_IT+0x48c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d054      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a79      	ldr	r2, [pc, #484]	; (8005fe0 <HAL_DMA_Start_IT+0x490>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04f      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a77      	ldr	r2, [pc, #476]	; (8005fe4 <HAL_DMA_Start_IT+0x494>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d04a      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a76      	ldr	r2, [pc, #472]	; (8005fe8 <HAL_DMA_Start_IT+0x498>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d045      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a74      	ldr	r2, [pc, #464]	; (8005fec <HAL_DMA_Start_IT+0x49c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d040      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a73      	ldr	r2, [pc, #460]	; (8005ff0 <HAL_DMA_Start_IT+0x4a0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d03b      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a71      	ldr	r2, [pc, #452]	; (8005ff4 <HAL_DMA_Start_IT+0x4a4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d036      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a70      	ldr	r2, [pc, #448]	; (8005ff8 <HAL_DMA_Start_IT+0x4a8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d031      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a6e      	ldr	r2, [pc, #440]	; (8005ffc <HAL_DMA_Start_IT+0x4ac>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d02c      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a6d      	ldr	r2, [pc, #436]	; (8006000 <HAL_DMA_Start_IT+0x4b0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d027      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a6b      	ldr	r2, [pc, #428]	; (8006004 <HAL_DMA_Start_IT+0x4b4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d022      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a6a      	ldr	r2, [pc, #424]	; (8006008 <HAL_DMA_Start_IT+0x4b8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d01d      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a68      	ldr	r2, [pc, #416]	; (800600c <HAL_DMA_Start_IT+0x4bc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a67      	ldr	r2, [pc, #412]	; (8006010 <HAL_DMA_Start_IT+0x4c0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a65      	ldr	r2, [pc, #404]	; (8006014 <HAL_DMA_Start_IT+0x4c4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00e      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a64      	ldr	r2, [pc, #400]	; (8006018 <HAL_DMA_Start_IT+0x4c8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a62      	ldr	r2, [pc, #392]	; (800601c <HAL_DMA_Start_IT+0x4cc>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_DMA_Start_IT+0x350>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a61      	ldr	r2, [pc, #388]	; (8006020 <HAL_DMA_Start_IT+0x4d0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d101      	bne.n	8005ea4 <HAL_DMA_Start_IT+0x354>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <HAL_DMA_Start_IT+0x356>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01a      	beq.n	8005ee0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d007      	beq.n	8005ec8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ec6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ede:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a37      	ldr	r2, [pc, #220]	; (8005fc4 <HAL_DMA_Start_IT+0x474>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d04a      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a36      	ldr	r2, [pc, #216]	; (8005fc8 <HAL_DMA_Start_IT+0x478>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d045      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a34      	ldr	r2, [pc, #208]	; (8005fcc <HAL_DMA_Start_IT+0x47c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d040      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a33      	ldr	r2, [pc, #204]	; (8005fd0 <HAL_DMA_Start_IT+0x480>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d03b      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a31      	ldr	r2, [pc, #196]	; (8005fd4 <HAL_DMA_Start_IT+0x484>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d036      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a30      	ldr	r2, [pc, #192]	; (8005fd8 <HAL_DMA_Start_IT+0x488>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d031      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a2e      	ldr	r2, [pc, #184]	; (8005fdc <HAL_DMA_Start_IT+0x48c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d02c      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a2d      	ldr	r2, [pc, #180]	; (8005fe0 <HAL_DMA_Start_IT+0x490>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d027      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2b      	ldr	r2, [pc, #172]	; (8005fe4 <HAL_DMA_Start_IT+0x494>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d022      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2a      	ldr	r2, [pc, #168]	; (8005fe8 <HAL_DMA_Start_IT+0x498>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d01d      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a28      	ldr	r2, [pc, #160]	; (8005fec <HAL_DMA_Start_IT+0x49c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d018      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <HAL_DMA_Start_IT+0x4a0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d013      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a25      	ldr	r2, [pc, #148]	; (8005ff4 <HAL_DMA_Start_IT+0x4a4>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00e      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a24      	ldr	r2, [pc, #144]	; (8005ff8 <HAL_DMA_Start_IT+0x4a8>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d009      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a22      	ldr	r2, [pc, #136]	; (8005ffc <HAL_DMA_Start_IT+0x4ac>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <HAL_DMA_Start_IT+0x430>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a21      	ldr	r2, [pc, #132]	; (8006000 <HAL_DMA_Start_IT+0x4b0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d108      	bne.n	8005f92 <HAL_DMA_Start_IT+0x442>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]
 8005f90:	e012      	b.n	8005fb8 <HAL_DMA_Start_IT+0x468>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0201 	orr.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	e009      	b.n	8005fb8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005faa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40020010 	.word	0x40020010
 8005fc8:	40020028 	.word	0x40020028
 8005fcc:	40020040 	.word	0x40020040
 8005fd0:	40020058 	.word	0x40020058
 8005fd4:	40020070 	.word	0x40020070
 8005fd8:	40020088 	.word	0x40020088
 8005fdc:	400200a0 	.word	0x400200a0
 8005fe0:	400200b8 	.word	0x400200b8
 8005fe4:	40020410 	.word	0x40020410
 8005fe8:	40020428 	.word	0x40020428
 8005fec:	40020440 	.word	0x40020440
 8005ff0:	40020458 	.word	0x40020458
 8005ff4:	40020470 	.word	0x40020470
 8005ff8:	40020488 	.word	0x40020488
 8005ffc:	400204a0 	.word	0x400204a0
 8006000:	400204b8 	.word	0x400204b8
 8006004:	58025408 	.word	0x58025408
 8006008:	5802541c 	.word	0x5802541c
 800600c:	58025430 	.word	0x58025430
 8006010:	58025444 	.word	0x58025444
 8006014:	58025458 	.word	0x58025458
 8006018:	5802546c 	.word	0x5802546c
 800601c:	58025480 	.word	0x58025480
 8006020:	58025494 	.word	0x58025494

08006024 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b086      	sub	sp, #24
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800602c:	f7fd f90c 	bl	8003248 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e2dc      	b.n	80065f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d008      	beq.n	800605a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2280      	movs	r2, #128	; 0x80
 800604c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e2cd      	b.n	80065f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a76      	ldr	r2, [pc, #472]	; (8006238 <HAL_DMA_Abort+0x214>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d04a      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a74      	ldr	r2, [pc, #464]	; (800623c <HAL_DMA_Abort+0x218>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d045      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a73      	ldr	r2, [pc, #460]	; (8006240 <HAL_DMA_Abort+0x21c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d040      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a71      	ldr	r2, [pc, #452]	; (8006244 <HAL_DMA_Abort+0x220>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d03b      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a70      	ldr	r2, [pc, #448]	; (8006248 <HAL_DMA_Abort+0x224>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d036      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a6e      	ldr	r2, [pc, #440]	; (800624c <HAL_DMA_Abort+0x228>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d031      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a6d      	ldr	r2, [pc, #436]	; (8006250 <HAL_DMA_Abort+0x22c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d02c      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a6b      	ldr	r2, [pc, #428]	; (8006254 <HAL_DMA_Abort+0x230>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d027      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a6a      	ldr	r2, [pc, #424]	; (8006258 <HAL_DMA_Abort+0x234>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d022      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a68      	ldr	r2, [pc, #416]	; (800625c <HAL_DMA_Abort+0x238>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d01d      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a67      	ldr	r2, [pc, #412]	; (8006260 <HAL_DMA_Abort+0x23c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d018      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a65      	ldr	r2, [pc, #404]	; (8006264 <HAL_DMA_Abort+0x240>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d013      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a64      	ldr	r2, [pc, #400]	; (8006268 <HAL_DMA_Abort+0x244>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00e      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a62      	ldr	r2, [pc, #392]	; (800626c <HAL_DMA_Abort+0x248>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d009      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a61      	ldr	r2, [pc, #388]	; (8006270 <HAL_DMA_Abort+0x24c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d004      	beq.n	80060fa <HAL_DMA_Abort+0xd6>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a5f      	ldr	r2, [pc, #380]	; (8006274 <HAL_DMA_Abort+0x250>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d101      	bne.n	80060fe <HAL_DMA_Abort+0xda>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <HAL_DMA_Abort+0xdc>
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d013      	beq.n	800612c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 021e 	bic.w	r2, r2, #30
 8006112:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006122:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	e00a      	b.n	8006142 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 020e 	bic.w	r2, r2, #14
 800613a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a3c      	ldr	r2, [pc, #240]	; (8006238 <HAL_DMA_Abort+0x214>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d072      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a3a      	ldr	r2, [pc, #232]	; (800623c <HAL_DMA_Abort+0x218>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d06d      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a39      	ldr	r2, [pc, #228]	; (8006240 <HAL_DMA_Abort+0x21c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d068      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a37      	ldr	r2, [pc, #220]	; (8006244 <HAL_DMA_Abort+0x220>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d063      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a36      	ldr	r2, [pc, #216]	; (8006248 <HAL_DMA_Abort+0x224>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d05e      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a34      	ldr	r2, [pc, #208]	; (800624c <HAL_DMA_Abort+0x228>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d059      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a33      	ldr	r2, [pc, #204]	; (8006250 <HAL_DMA_Abort+0x22c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d054      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a31      	ldr	r2, [pc, #196]	; (8006254 <HAL_DMA_Abort+0x230>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d04f      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a30      	ldr	r2, [pc, #192]	; (8006258 <HAL_DMA_Abort+0x234>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d04a      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2e      	ldr	r2, [pc, #184]	; (800625c <HAL_DMA_Abort+0x238>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d045      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a2d      	ldr	r2, [pc, #180]	; (8006260 <HAL_DMA_Abort+0x23c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d040      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a2b      	ldr	r2, [pc, #172]	; (8006264 <HAL_DMA_Abort+0x240>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d03b      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a2a      	ldr	r2, [pc, #168]	; (8006268 <HAL_DMA_Abort+0x244>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d036      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a28      	ldr	r2, [pc, #160]	; (800626c <HAL_DMA_Abort+0x248>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d031      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a27      	ldr	r2, [pc, #156]	; (8006270 <HAL_DMA_Abort+0x24c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d02c      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a25      	ldr	r2, [pc, #148]	; (8006274 <HAL_DMA_Abort+0x250>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d027      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a24      	ldr	r2, [pc, #144]	; (8006278 <HAL_DMA_Abort+0x254>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d022      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a22      	ldr	r2, [pc, #136]	; (800627c <HAL_DMA_Abort+0x258>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d01d      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a21      	ldr	r2, [pc, #132]	; (8006280 <HAL_DMA_Abort+0x25c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <HAL_DMA_Abort+0x260>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1e      	ldr	r2, [pc, #120]	; (8006288 <HAL_DMA_Abort+0x264>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1c      	ldr	r2, [pc, #112]	; (800628c <HAL_DMA_Abort+0x268>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1b      	ldr	r2, [pc, #108]	; (8006290 <HAL_DMA_Abort+0x26c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_DMA_Abort+0x20e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a19      	ldr	r2, [pc, #100]	; (8006294 <HAL_DMA_Abort+0x270>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d132      	bne.n	8006298 <HAL_DMA_Abort+0x274>
 8006232:	2301      	movs	r3, #1
 8006234:	e031      	b.n	800629a <HAL_DMA_Abort+0x276>
 8006236:	bf00      	nop
 8006238:	40020010 	.word	0x40020010
 800623c:	40020028 	.word	0x40020028
 8006240:	40020040 	.word	0x40020040
 8006244:	40020058 	.word	0x40020058
 8006248:	40020070 	.word	0x40020070
 800624c:	40020088 	.word	0x40020088
 8006250:	400200a0 	.word	0x400200a0
 8006254:	400200b8 	.word	0x400200b8
 8006258:	40020410 	.word	0x40020410
 800625c:	40020428 	.word	0x40020428
 8006260:	40020440 	.word	0x40020440
 8006264:	40020458 	.word	0x40020458
 8006268:	40020470 	.word	0x40020470
 800626c:	40020488 	.word	0x40020488
 8006270:	400204a0 	.word	0x400204a0
 8006274:	400204b8 	.word	0x400204b8
 8006278:	58025408 	.word	0x58025408
 800627c:	5802541c 	.word	0x5802541c
 8006280:	58025430 	.word	0x58025430
 8006284:	58025444 	.word	0x58025444
 8006288:	58025458 	.word	0x58025458
 800628c:	5802546c 	.word	0x5802546c
 8006290:	58025480 	.word	0x58025480
 8006294:	58025494 	.word	0x58025494
 8006298:	2300      	movs	r3, #0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d007      	beq.n	80062ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a6d      	ldr	r2, [pc, #436]	; (8006468 <HAL_DMA_Abort+0x444>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d04a      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a6b      	ldr	r2, [pc, #428]	; (800646c <HAL_DMA_Abort+0x448>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d045      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a6a      	ldr	r2, [pc, #424]	; (8006470 <HAL_DMA_Abort+0x44c>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d040      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a68      	ldr	r2, [pc, #416]	; (8006474 <HAL_DMA_Abort+0x450>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d03b      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a67      	ldr	r2, [pc, #412]	; (8006478 <HAL_DMA_Abort+0x454>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d036      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a65      	ldr	r2, [pc, #404]	; (800647c <HAL_DMA_Abort+0x458>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d031      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a64      	ldr	r2, [pc, #400]	; (8006480 <HAL_DMA_Abort+0x45c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d02c      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a62      	ldr	r2, [pc, #392]	; (8006484 <HAL_DMA_Abort+0x460>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d027      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a61      	ldr	r2, [pc, #388]	; (8006488 <HAL_DMA_Abort+0x464>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d022      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a5f      	ldr	r2, [pc, #380]	; (800648c <HAL_DMA_Abort+0x468>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d01d      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a5e      	ldr	r2, [pc, #376]	; (8006490 <HAL_DMA_Abort+0x46c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d018      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a5c      	ldr	r2, [pc, #368]	; (8006494 <HAL_DMA_Abort+0x470>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d013      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a5b      	ldr	r2, [pc, #364]	; (8006498 <HAL_DMA_Abort+0x474>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d00e      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a59      	ldr	r2, [pc, #356]	; (800649c <HAL_DMA_Abort+0x478>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d009      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a58      	ldr	r2, [pc, #352]	; (80064a0 <HAL_DMA_Abort+0x47c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d004      	beq.n	800634e <HAL_DMA_Abort+0x32a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a56      	ldr	r2, [pc, #344]	; (80064a4 <HAL_DMA_Abort+0x480>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d108      	bne.n	8006360 <HAL_DMA_Abort+0x33c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0201 	bic.w	r2, r2, #1
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	e007      	b.n	8006370 <HAL_DMA_Abort+0x34c>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0201 	bic.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006370:	e013      	b.n	800639a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006372:	f7fc ff69 	bl	8003248 <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b05      	cmp	r3, #5
 800637e:	d90c      	bls.n	800639a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2203      	movs	r2, #3
 800638a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e12d      	b.n	80065f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e5      	bne.n	8006372 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a2f      	ldr	r2, [pc, #188]	; (8006468 <HAL_DMA_Abort+0x444>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d04a      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a2d      	ldr	r2, [pc, #180]	; (800646c <HAL_DMA_Abort+0x448>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d045      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a2c      	ldr	r2, [pc, #176]	; (8006470 <HAL_DMA_Abort+0x44c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d040      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a2a      	ldr	r2, [pc, #168]	; (8006474 <HAL_DMA_Abort+0x450>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d03b      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a29      	ldr	r2, [pc, #164]	; (8006478 <HAL_DMA_Abort+0x454>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d036      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a27      	ldr	r2, [pc, #156]	; (800647c <HAL_DMA_Abort+0x458>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d031      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a26      	ldr	r2, [pc, #152]	; (8006480 <HAL_DMA_Abort+0x45c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d02c      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a24      	ldr	r2, [pc, #144]	; (8006484 <HAL_DMA_Abort+0x460>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d027      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a23      	ldr	r2, [pc, #140]	; (8006488 <HAL_DMA_Abort+0x464>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d022      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a21      	ldr	r2, [pc, #132]	; (800648c <HAL_DMA_Abort+0x468>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d01d      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a20      	ldr	r2, [pc, #128]	; (8006490 <HAL_DMA_Abort+0x46c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d018      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1e      	ldr	r2, [pc, #120]	; (8006494 <HAL_DMA_Abort+0x470>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d013      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1d      	ldr	r2, [pc, #116]	; (8006498 <HAL_DMA_Abort+0x474>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00e      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1b      	ldr	r2, [pc, #108]	; (800649c <HAL_DMA_Abort+0x478>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d009      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1a      	ldr	r2, [pc, #104]	; (80064a0 <HAL_DMA_Abort+0x47c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d004      	beq.n	8006446 <HAL_DMA_Abort+0x422>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a18      	ldr	r2, [pc, #96]	; (80064a4 <HAL_DMA_Abort+0x480>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d101      	bne.n	800644a <HAL_DMA_Abort+0x426>
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <HAL_DMA_Abort+0x428>
 800644a:	2300      	movs	r3, #0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d02b      	beq.n	80064a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	223f      	movs	r2, #63	; 0x3f
 8006460:	409a      	lsls	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	609a      	str	r2, [r3, #8]
 8006466:	e02a      	b.n	80064be <HAL_DMA_Abort+0x49a>
 8006468:	40020010 	.word	0x40020010
 800646c:	40020028 	.word	0x40020028
 8006470:	40020040 	.word	0x40020040
 8006474:	40020058 	.word	0x40020058
 8006478:	40020070 	.word	0x40020070
 800647c:	40020088 	.word	0x40020088
 8006480:	400200a0 	.word	0x400200a0
 8006484:	400200b8 	.word	0x400200b8
 8006488:	40020410 	.word	0x40020410
 800648c:	40020428 	.word	0x40020428
 8006490:	40020440 	.word	0x40020440
 8006494:	40020458 	.word	0x40020458
 8006498:	40020470 	.word	0x40020470
 800649c:	40020488 	.word	0x40020488
 80064a0:	400204a0 	.word	0x400204a0
 80064a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b2:	f003 031f 	and.w	r3, r3, #31
 80064b6:	2201      	movs	r2, #1
 80064b8:	409a      	lsls	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a4f      	ldr	r2, [pc, #316]	; (8006600 <HAL_DMA_Abort+0x5dc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d072      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a4d      	ldr	r2, [pc, #308]	; (8006604 <HAL_DMA_Abort+0x5e0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d06d      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a4c      	ldr	r2, [pc, #304]	; (8006608 <HAL_DMA_Abort+0x5e4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d068      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a4a      	ldr	r2, [pc, #296]	; (800660c <HAL_DMA_Abort+0x5e8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d063      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a49      	ldr	r2, [pc, #292]	; (8006610 <HAL_DMA_Abort+0x5ec>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d05e      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a47      	ldr	r2, [pc, #284]	; (8006614 <HAL_DMA_Abort+0x5f0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d059      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a46      	ldr	r2, [pc, #280]	; (8006618 <HAL_DMA_Abort+0x5f4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d054      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a44      	ldr	r2, [pc, #272]	; (800661c <HAL_DMA_Abort+0x5f8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d04f      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a43      	ldr	r2, [pc, #268]	; (8006620 <HAL_DMA_Abort+0x5fc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d04a      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a41      	ldr	r2, [pc, #260]	; (8006624 <HAL_DMA_Abort+0x600>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d045      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a40      	ldr	r2, [pc, #256]	; (8006628 <HAL_DMA_Abort+0x604>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d040      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a3e      	ldr	r2, [pc, #248]	; (800662c <HAL_DMA_Abort+0x608>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d03b      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a3d      	ldr	r2, [pc, #244]	; (8006630 <HAL_DMA_Abort+0x60c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d036      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a3b      	ldr	r2, [pc, #236]	; (8006634 <HAL_DMA_Abort+0x610>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d031      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a3a      	ldr	r2, [pc, #232]	; (8006638 <HAL_DMA_Abort+0x614>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d02c      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a38      	ldr	r2, [pc, #224]	; (800663c <HAL_DMA_Abort+0x618>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d027      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a37      	ldr	r2, [pc, #220]	; (8006640 <HAL_DMA_Abort+0x61c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d022      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a35      	ldr	r2, [pc, #212]	; (8006644 <HAL_DMA_Abort+0x620>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d01d      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a34      	ldr	r2, [pc, #208]	; (8006648 <HAL_DMA_Abort+0x624>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d018      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a32      	ldr	r2, [pc, #200]	; (800664c <HAL_DMA_Abort+0x628>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a31      	ldr	r2, [pc, #196]	; (8006650 <HAL_DMA_Abort+0x62c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00e      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a2f      	ldr	r2, [pc, #188]	; (8006654 <HAL_DMA_Abort+0x630>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d009      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a2e      	ldr	r2, [pc, #184]	; (8006658 <HAL_DMA_Abort+0x634>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d004      	beq.n	80065ae <HAL_DMA_Abort+0x58a>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a2c      	ldr	r2, [pc, #176]	; (800665c <HAL_DMA_Abort+0x638>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d101      	bne.n	80065b2 <HAL_DMA_Abort+0x58e>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e000      	b.n	80065b4 <HAL_DMA_Abort+0x590>
 80065b2:	2300      	movs	r3, #0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80065c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00c      	beq.n	80065e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80065e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	40020010 	.word	0x40020010
 8006604:	40020028 	.word	0x40020028
 8006608:	40020040 	.word	0x40020040
 800660c:	40020058 	.word	0x40020058
 8006610:	40020070 	.word	0x40020070
 8006614:	40020088 	.word	0x40020088
 8006618:	400200a0 	.word	0x400200a0
 800661c:	400200b8 	.word	0x400200b8
 8006620:	40020410 	.word	0x40020410
 8006624:	40020428 	.word	0x40020428
 8006628:	40020440 	.word	0x40020440
 800662c:	40020458 	.word	0x40020458
 8006630:	40020470 	.word	0x40020470
 8006634:	40020488 	.word	0x40020488
 8006638:	400204a0 	.word	0x400204a0
 800663c:	400204b8 	.word	0x400204b8
 8006640:	58025408 	.word	0x58025408
 8006644:	5802541c 	.word	0x5802541c
 8006648:	58025430 	.word	0x58025430
 800664c:	58025444 	.word	0x58025444
 8006650:	58025458 	.word	0x58025458
 8006654:	5802546c 	.word	0x5802546c
 8006658:	58025480 	.word	0x58025480
 800665c:	58025494 	.word	0x58025494

08006660 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e237      	b.n	8006ae2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d004      	beq.n	8006688 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2280      	movs	r2, #128	; 0x80
 8006682:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e22c      	b.n	8006ae2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a5c      	ldr	r2, [pc, #368]	; (8006800 <HAL_DMA_Abort_IT+0x1a0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d04a      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a5b      	ldr	r2, [pc, #364]	; (8006804 <HAL_DMA_Abort_IT+0x1a4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d045      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a59      	ldr	r2, [pc, #356]	; (8006808 <HAL_DMA_Abort_IT+0x1a8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d040      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a58      	ldr	r2, [pc, #352]	; (800680c <HAL_DMA_Abort_IT+0x1ac>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d03b      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a56      	ldr	r2, [pc, #344]	; (8006810 <HAL_DMA_Abort_IT+0x1b0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d036      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a55      	ldr	r2, [pc, #340]	; (8006814 <HAL_DMA_Abort_IT+0x1b4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d031      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a53      	ldr	r2, [pc, #332]	; (8006818 <HAL_DMA_Abort_IT+0x1b8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d02c      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a52      	ldr	r2, [pc, #328]	; (800681c <HAL_DMA_Abort_IT+0x1bc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d027      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a50      	ldr	r2, [pc, #320]	; (8006820 <HAL_DMA_Abort_IT+0x1c0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d022      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a4f      	ldr	r2, [pc, #316]	; (8006824 <HAL_DMA_Abort_IT+0x1c4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d01d      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a4d      	ldr	r2, [pc, #308]	; (8006828 <HAL_DMA_Abort_IT+0x1c8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d018      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a4c      	ldr	r2, [pc, #304]	; (800682c <HAL_DMA_Abort_IT+0x1cc>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d013      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a4a      	ldr	r2, [pc, #296]	; (8006830 <HAL_DMA_Abort_IT+0x1d0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d00e      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a49      	ldr	r2, [pc, #292]	; (8006834 <HAL_DMA_Abort_IT+0x1d4>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d009      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a47      	ldr	r2, [pc, #284]	; (8006838 <HAL_DMA_Abort_IT+0x1d8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d004      	beq.n	8006728 <HAL_DMA_Abort_IT+0xc8>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a46      	ldr	r2, [pc, #280]	; (800683c <HAL_DMA_Abort_IT+0x1dc>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d101      	bne.n	800672c <HAL_DMA_Abort_IT+0xcc>
 8006728:	2301      	movs	r3, #1
 800672a:	e000      	b.n	800672e <HAL_DMA_Abort_IT+0xce>
 800672c:	2300      	movs	r3, #0
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 8086 	beq.w	8006840 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2204      	movs	r2, #4
 8006738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a2f      	ldr	r2, [pc, #188]	; (8006800 <HAL_DMA_Abort_IT+0x1a0>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d04a      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2e      	ldr	r2, [pc, #184]	; (8006804 <HAL_DMA_Abort_IT+0x1a4>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d045      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a2c      	ldr	r2, [pc, #176]	; (8006808 <HAL_DMA_Abort_IT+0x1a8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d040      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a2b      	ldr	r2, [pc, #172]	; (800680c <HAL_DMA_Abort_IT+0x1ac>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d03b      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a29      	ldr	r2, [pc, #164]	; (8006810 <HAL_DMA_Abort_IT+0x1b0>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d036      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a28      	ldr	r2, [pc, #160]	; (8006814 <HAL_DMA_Abort_IT+0x1b4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d031      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a26      	ldr	r2, [pc, #152]	; (8006818 <HAL_DMA_Abort_IT+0x1b8>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d02c      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a25      	ldr	r2, [pc, #148]	; (800681c <HAL_DMA_Abort_IT+0x1bc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d027      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a23      	ldr	r2, [pc, #140]	; (8006820 <HAL_DMA_Abort_IT+0x1c0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d022      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a22      	ldr	r2, [pc, #136]	; (8006824 <HAL_DMA_Abort_IT+0x1c4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d01d      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a20      	ldr	r2, [pc, #128]	; (8006828 <HAL_DMA_Abort_IT+0x1c8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d018      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1f      	ldr	r2, [pc, #124]	; (800682c <HAL_DMA_Abort_IT+0x1cc>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d013      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1d      	ldr	r2, [pc, #116]	; (8006830 <HAL_DMA_Abort_IT+0x1d0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00e      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1c      	ldr	r2, [pc, #112]	; (8006834 <HAL_DMA_Abort_IT+0x1d4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d009      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a1a      	ldr	r2, [pc, #104]	; (8006838 <HAL_DMA_Abort_IT+0x1d8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d004      	beq.n	80067dc <HAL_DMA_Abort_IT+0x17c>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a19      	ldr	r2, [pc, #100]	; (800683c <HAL_DMA_Abort_IT+0x1dc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d108      	bne.n	80067ee <HAL_DMA_Abort_IT+0x18e>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0201 	bic.w	r2, r2, #1
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	e178      	b.n	8006ae0 <HAL_DMA_Abort_IT+0x480>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0201 	bic.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	e16f      	b.n	8006ae0 <HAL_DMA_Abort_IT+0x480>
 8006800:	40020010 	.word	0x40020010
 8006804:	40020028 	.word	0x40020028
 8006808:	40020040 	.word	0x40020040
 800680c:	40020058 	.word	0x40020058
 8006810:	40020070 	.word	0x40020070
 8006814:	40020088 	.word	0x40020088
 8006818:	400200a0 	.word	0x400200a0
 800681c:	400200b8 	.word	0x400200b8
 8006820:	40020410 	.word	0x40020410
 8006824:	40020428 	.word	0x40020428
 8006828:	40020440 	.word	0x40020440
 800682c:	40020458 	.word	0x40020458
 8006830:	40020470 	.word	0x40020470
 8006834:	40020488 	.word	0x40020488
 8006838:	400204a0 	.word	0x400204a0
 800683c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 020e 	bic.w	r2, r2, #14
 800684e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a6c      	ldr	r2, [pc, #432]	; (8006a08 <HAL_DMA_Abort_IT+0x3a8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d04a      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a6b      	ldr	r2, [pc, #428]	; (8006a0c <HAL_DMA_Abort_IT+0x3ac>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d045      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a69      	ldr	r2, [pc, #420]	; (8006a10 <HAL_DMA_Abort_IT+0x3b0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d040      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a68      	ldr	r2, [pc, #416]	; (8006a14 <HAL_DMA_Abort_IT+0x3b4>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d03b      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a66      	ldr	r2, [pc, #408]	; (8006a18 <HAL_DMA_Abort_IT+0x3b8>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d036      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a65      	ldr	r2, [pc, #404]	; (8006a1c <HAL_DMA_Abort_IT+0x3bc>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d031      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a63      	ldr	r2, [pc, #396]	; (8006a20 <HAL_DMA_Abort_IT+0x3c0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d02c      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a62      	ldr	r2, [pc, #392]	; (8006a24 <HAL_DMA_Abort_IT+0x3c4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d027      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a60      	ldr	r2, [pc, #384]	; (8006a28 <HAL_DMA_Abort_IT+0x3c8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d022      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a5f      	ldr	r2, [pc, #380]	; (8006a2c <HAL_DMA_Abort_IT+0x3cc>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d01d      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a5d      	ldr	r2, [pc, #372]	; (8006a30 <HAL_DMA_Abort_IT+0x3d0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d018      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a5c      	ldr	r2, [pc, #368]	; (8006a34 <HAL_DMA_Abort_IT+0x3d4>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d013      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a5a      	ldr	r2, [pc, #360]	; (8006a38 <HAL_DMA_Abort_IT+0x3d8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00e      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a59      	ldr	r2, [pc, #356]	; (8006a3c <HAL_DMA_Abort_IT+0x3dc>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d009      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a57      	ldr	r2, [pc, #348]	; (8006a40 <HAL_DMA_Abort_IT+0x3e0>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d004      	beq.n	80068f0 <HAL_DMA_Abort_IT+0x290>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a56      	ldr	r2, [pc, #344]	; (8006a44 <HAL_DMA_Abort_IT+0x3e4>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d108      	bne.n	8006902 <HAL_DMA_Abort_IT+0x2a2>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0201 	bic.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]
 8006900:	e007      	b.n	8006912 <HAL_DMA_Abort_IT+0x2b2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a3c      	ldr	r2, [pc, #240]	; (8006a08 <HAL_DMA_Abort_IT+0x3a8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d072      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a3a      	ldr	r2, [pc, #232]	; (8006a0c <HAL_DMA_Abort_IT+0x3ac>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d06d      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a39      	ldr	r2, [pc, #228]	; (8006a10 <HAL_DMA_Abort_IT+0x3b0>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d068      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a37      	ldr	r2, [pc, #220]	; (8006a14 <HAL_DMA_Abort_IT+0x3b4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d063      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a36      	ldr	r2, [pc, #216]	; (8006a18 <HAL_DMA_Abort_IT+0x3b8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d05e      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a34      	ldr	r2, [pc, #208]	; (8006a1c <HAL_DMA_Abort_IT+0x3bc>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d059      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a33      	ldr	r2, [pc, #204]	; (8006a20 <HAL_DMA_Abort_IT+0x3c0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d054      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a31      	ldr	r2, [pc, #196]	; (8006a24 <HAL_DMA_Abort_IT+0x3c4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d04f      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a30      	ldr	r2, [pc, #192]	; (8006a28 <HAL_DMA_Abort_IT+0x3c8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d04a      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a2e      	ldr	r2, [pc, #184]	; (8006a2c <HAL_DMA_Abort_IT+0x3cc>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d045      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a2d      	ldr	r2, [pc, #180]	; (8006a30 <HAL_DMA_Abort_IT+0x3d0>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d040      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a2b      	ldr	r2, [pc, #172]	; (8006a34 <HAL_DMA_Abort_IT+0x3d4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d03b      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a2a      	ldr	r2, [pc, #168]	; (8006a38 <HAL_DMA_Abort_IT+0x3d8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d036      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a28      	ldr	r2, [pc, #160]	; (8006a3c <HAL_DMA_Abort_IT+0x3dc>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d031      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a27      	ldr	r2, [pc, #156]	; (8006a40 <HAL_DMA_Abort_IT+0x3e0>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d02c      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a25      	ldr	r2, [pc, #148]	; (8006a44 <HAL_DMA_Abort_IT+0x3e4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d027      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a24      	ldr	r2, [pc, #144]	; (8006a48 <HAL_DMA_Abort_IT+0x3e8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d022      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a22      	ldr	r2, [pc, #136]	; (8006a4c <HAL_DMA_Abort_IT+0x3ec>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d01d      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a21      	ldr	r2, [pc, #132]	; (8006a50 <HAL_DMA_Abort_IT+0x3f0>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d018      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a1f      	ldr	r2, [pc, #124]	; (8006a54 <HAL_DMA_Abort_IT+0x3f4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d013      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a1e      	ldr	r2, [pc, #120]	; (8006a58 <HAL_DMA_Abort_IT+0x3f8>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00e      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a1c      	ldr	r2, [pc, #112]	; (8006a5c <HAL_DMA_Abort_IT+0x3fc>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d009      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1b      	ldr	r2, [pc, #108]	; (8006a60 <HAL_DMA_Abort_IT+0x400>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d004      	beq.n	8006a02 <HAL_DMA_Abort_IT+0x3a2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a19      	ldr	r2, [pc, #100]	; (8006a64 <HAL_DMA_Abort_IT+0x404>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d132      	bne.n	8006a68 <HAL_DMA_Abort_IT+0x408>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e031      	b.n	8006a6a <HAL_DMA_Abort_IT+0x40a>
 8006a06:	bf00      	nop
 8006a08:	40020010 	.word	0x40020010
 8006a0c:	40020028 	.word	0x40020028
 8006a10:	40020040 	.word	0x40020040
 8006a14:	40020058 	.word	0x40020058
 8006a18:	40020070 	.word	0x40020070
 8006a1c:	40020088 	.word	0x40020088
 8006a20:	400200a0 	.word	0x400200a0
 8006a24:	400200b8 	.word	0x400200b8
 8006a28:	40020410 	.word	0x40020410
 8006a2c:	40020428 	.word	0x40020428
 8006a30:	40020440 	.word	0x40020440
 8006a34:	40020458 	.word	0x40020458
 8006a38:	40020470 	.word	0x40020470
 8006a3c:	40020488 	.word	0x40020488
 8006a40:	400204a0 	.word	0x400204a0
 8006a44:	400204b8 	.word	0x400204b8
 8006a48:	58025408 	.word	0x58025408
 8006a4c:	5802541c 	.word	0x5802541c
 8006a50:	58025430 	.word	0x58025430
 8006a54:	58025444 	.word	0x58025444
 8006a58:	58025458 	.word	0x58025458
 8006a5c:	5802546c 	.word	0x5802546c
 8006a60:	58025480 	.word	0x58025480
 8006a64:	58025494 	.word	0x58025494
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d028      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a7c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a82:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006a9c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00c      	beq.n	8006ac0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ab4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006abe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop

08006aec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08a      	sub	sp, #40	; 0x28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006af8:	4b67      	ldr	r3, [pc, #412]	; (8006c98 <HAL_DMA_IRQHandler+0x1ac>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a67      	ldr	r2, [pc, #412]	; (8006c9c <HAL_DMA_IRQHandler+0x1b0>)
 8006afe:	fba2 2303 	umull	r2, r3, r2, r3
 8006b02:	0a9b      	lsrs	r3, r3, #10
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b10:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a5f      	ldr	r2, [pc, #380]	; (8006ca0 <HAL_DMA_IRQHandler+0x1b4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d04a      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a5d      	ldr	r2, [pc, #372]	; (8006ca4 <HAL_DMA_IRQHandler+0x1b8>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d045      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a5c      	ldr	r2, [pc, #368]	; (8006ca8 <HAL_DMA_IRQHandler+0x1bc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d040      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a5a      	ldr	r2, [pc, #360]	; (8006cac <HAL_DMA_IRQHandler+0x1c0>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d03b      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a59      	ldr	r2, [pc, #356]	; (8006cb0 <HAL_DMA_IRQHandler+0x1c4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d036      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a57      	ldr	r2, [pc, #348]	; (8006cb4 <HAL_DMA_IRQHandler+0x1c8>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d031      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a56      	ldr	r2, [pc, #344]	; (8006cb8 <HAL_DMA_IRQHandler+0x1cc>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d02c      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a54      	ldr	r2, [pc, #336]	; (8006cbc <HAL_DMA_IRQHandler+0x1d0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d027      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a53      	ldr	r2, [pc, #332]	; (8006cc0 <HAL_DMA_IRQHandler+0x1d4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d022      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a51      	ldr	r2, [pc, #324]	; (8006cc4 <HAL_DMA_IRQHandler+0x1d8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d01d      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a50      	ldr	r2, [pc, #320]	; (8006cc8 <HAL_DMA_IRQHandler+0x1dc>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d018      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a4e      	ldr	r2, [pc, #312]	; (8006ccc <HAL_DMA_IRQHandler+0x1e0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a4d      	ldr	r2, [pc, #308]	; (8006cd0 <HAL_DMA_IRQHandler+0x1e4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00e      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a4b      	ldr	r2, [pc, #300]	; (8006cd4 <HAL_DMA_IRQHandler+0x1e8>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d009      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a4a      	ldr	r2, [pc, #296]	; (8006cd8 <HAL_DMA_IRQHandler+0x1ec>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_DMA_IRQHandler+0xd2>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a48      	ldr	r2, [pc, #288]	; (8006cdc <HAL_DMA_IRQHandler+0x1f0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d101      	bne.n	8006bc2 <HAL_DMA_IRQHandler+0xd6>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <HAL_DMA_IRQHandler+0xd8>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 842b 	beq.w	8007420 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bce:	f003 031f 	and.w	r3, r3, #31
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	409a      	lsls	r2, r3
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 80a2 	beq.w	8006d24 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a2e      	ldr	r2, [pc, #184]	; (8006ca0 <HAL_DMA_IRQHandler+0x1b4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d04a      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a2d      	ldr	r2, [pc, #180]	; (8006ca4 <HAL_DMA_IRQHandler+0x1b8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d045      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a2b      	ldr	r2, [pc, #172]	; (8006ca8 <HAL_DMA_IRQHandler+0x1bc>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d040      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a2a      	ldr	r2, [pc, #168]	; (8006cac <HAL_DMA_IRQHandler+0x1c0>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d03b      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a28      	ldr	r2, [pc, #160]	; (8006cb0 <HAL_DMA_IRQHandler+0x1c4>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d036      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a27      	ldr	r2, [pc, #156]	; (8006cb4 <HAL_DMA_IRQHandler+0x1c8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d031      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a25      	ldr	r2, [pc, #148]	; (8006cb8 <HAL_DMA_IRQHandler+0x1cc>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d02c      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a24      	ldr	r2, [pc, #144]	; (8006cbc <HAL_DMA_IRQHandler+0x1d0>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d027      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a22      	ldr	r2, [pc, #136]	; (8006cc0 <HAL_DMA_IRQHandler+0x1d4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d022      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a21      	ldr	r2, [pc, #132]	; (8006cc4 <HAL_DMA_IRQHandler+0x1d8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d01d      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a1f      	ldr	r2, [pc, #124]	; (8006cc8 <HAL_DMA_IRQHandler+0x1dc>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d018      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1e      	ldr	r2, [pc, #120]	; (8006ccc <HAL_DMA_IRQHandler+0x1e0>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d013      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1c      	ldr	r2, [pc, #112]	; (8006cd0 <HAL_DMA_IRQHandler+0x1e4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00e      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a1b      	ldr	r2, [pc, #108]	; (8006cd4 <HAL_DMA_IRQHandler+0x1e8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d009      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a19      	ldr	r2, [pc, #100]	; (8006cd8 <HAL_DMA_IRQHandler+0x1ec>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d004      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x194>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a18      	ldr	r2, [pc, #96]	; (8006cdc <HAL_DMA_IRQHandler+0x1f0>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d12f      	bne.n	8006ce0 <HAL_DMA_IRQHandler+0x1f4>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0304 	and.w	r3, r3, #4
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	bf14      	ite	ne
 8006c8e:	2301      	movne	r3, #1
 8006c90:	2300      	moveq	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	e02e      	b.n	8006cf4 <HAL_DMA_IRQHandler+0x208>
 8006c96:	bf00      	nop
 8006c98:	24000088 	.word	0x24000088
 8006c9c:	1b4e81b5 	.word	0x1b4e81b5
 8006ca0:	40020010 	.word	0x40020010
 8006ca4:	40020028 	.word	0x40020028
 8006ca8:	40020040 	.word	0x40020040
 8006cac:	40020058 	.word	0x40020058
 8006cb0:	40020070 	.word	0x40020070
 8006cb4:	40020088 	.word	0x40020088
 8006cb8:	400200a0 	.word	0x400200a0
 8006cbc:	400200b8 	.word	0x400200b8
 8006cc0:	40020410 	.word	0x40020410
 8006cc4:	40020428 	.word	0x40020428
 8006cc8:	40020440 	.word	0x40020440
 8006ccc:	40020458 	.word	0x40020458
 8006cd0:	40020470 	.word	0x40020470
 8006cd4:	40020488 	.word	0x40020488
 8006cd8:	400204a0 	.word	0x400204a0
 8006cdc:	400204b8 	.word	0x400204b8
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0308 	and.w	r3, r3, #8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bf14      	ite	ne
 8006cee:	2301      	movne	r3, #1
 8006cf0:	2300      	moveq	r3, #0
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d015      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0204 	bic.w	r2, r2, #4
 8006d06:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d0c:	f003 031f 	and.w	r3, r3, #31
 8006d10:	2208      	movs	r2, #8
 8006d12:	409a      	lsls	r2, r3
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1c:	f043 0201 	orr.w	r2, r3, #1
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d06e      	beq.n	8006e18 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a69      	ldr	r2, [pc, #420]	; (8006ee4 <HAL_DMA_IRQHandler+0x3f8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d04a      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a67      	ldr	r2, [pc, #412]	; (8006ee8 <HAL_DMA_IRQHandler+0x3fc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d045      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a66      	ldr	r2, [pc, #408]	; (8006eec <HAL_DMA_IRQHandler+0x400>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d040      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a64      	ldr	r2, [pc, #400]	; (8006ef0 <HAL_DMA_IRQHandler+0x404>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d03b      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a63      	ldr	r2, [pc, #396]	; (8006ef4 <HAL_DMA_IRQHandler+0x408>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d036      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a61      	ldr	r2, [pc, #388]	; (8006ef8 <HAL_DMA_IRQHandler+0x40c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d031      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a60      	ldr	r2, [pc, #384]	; (8006efc <HAL_DMA_IRQHandler+0x410>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d02c      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a5e      	ldr	r2, [pc, #376]	; (8006f00 <HAL_DMA_IRQHandler+0x414>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d027      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a5d      	ldr	r2, [pc, #372]	; (8006f04 <HAL_DMA_IRQHandler+0x418>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d022      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a5b      	ldr	r2, [pc, #364]	; (8006f08 <HAL_DMA_IRQHandler+0x41c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d01d      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a5a      	ldr	r2, [pc, #360]	; (8006f0c <HAL_DMA_IRQHandler+0x420>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d018      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a58      	ldr	r2, [pc, #352]	; (8006f10 <HAL_DMA_IRQHandler+0x424>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d013      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a57      	ldr	r2, [pc, #348]	; (8006f14 <HAL_DMA_IRQHandler+0x428>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00e      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a55      	ldr	r2, [pc, #340]	; (8006f18 <HAL_DMA_IRQHandler+0x42c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d009      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a54      	ldr	r2, [pc, #336]	; (8006f1c <HAL_DMA_IRQHandler+0x430>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d004      	beq.n	8006dda <HAL_DMA_IRQHandler+0x2ee>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a52      	ldr	r2, [pc, #328]	; (8006f20 <HAL_DMA_IRQHandler+0x434>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d10a      	bne.n	8006df0 <HAL_DMA_IRQHandler+0x304>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bf14      	ite	ne
 8006de8:	2301      	movne	r3, #1
 8006dea:	2300      	moveq	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	e003      	b.n	8006df8 <HAL_DMA_IRQHandler+0x30c>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2300      	movs	r3, #0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00d      	beq.n	8006e18 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e00:	f003 031f 	and.w	r3, r3, #31
 8006e04:	2201      	movs	r2, #1
 8006e06:	409a      	lsls	r2, r3
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e10:	f043 0202 	orr.w	r2, r3, #2
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1c:	f003 031f 	and.w	r3, r3, #31
 8006e20:	2204      	movs	r2, #4
 8006e22:	409a      	lsls	r2, r3
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	4013      	ands	r3, r2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 808f 	beq.w	8006f4c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a2c      	ldr	r2, [pc, #176]	; (8006ee4 <HAL_DMA_IRQHandler+0x3f8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d04a      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2a      	ldr	r2, [pc, #168]	; (8006ee8 <HAL_DMA_IRQHandler+0x3fc>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d045      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a29      	ldr	r2, [pc, #164]	; (8006eec <HAL_DMA_IRQHandler+0x400>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d040      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a27      	ldr	r2, [pc, #156]	; (8006ef0 <HAL_DMA_IRQHandler+0x404>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d03b      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a26      	ldr	r2, [pc, #152]	; (8006ef4 <HAL_DMA_IRQHandler+0x408>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d036      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a24      	ldr	r2, [pc, #144]	; (8006ef8 <HAL_DMA_IRQHandler+0x40c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d031      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a23      	ldr	r2, [pc, #140]	; (8006efc <HAL_DMA_IRQHandler+0x410>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d02c      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a21      	ldr	r2, [pc, #132]	; (8006f00 <HAL_DMA_IRQHandler+0x414>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d027      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a20      	ldr	r2, [pc, #128]	; (8006f04 <HAL_DMA_IRQHandler+0x418>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d022      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1e      	ldr	r2, [pc, #120]	; (8006f08 <HAL_DMA_IRQHandler+0x41c>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d01d      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1d      	ldr	r2, [pc, #116]	; (8006f0c <HAL_DMA_IRQHandler+0x420>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d018      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	; (8006f10 <HAL_DMA_IRQHandler+0x424>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d013      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1a      	ldr	r2, [pc, #104]	; (8006f14 <HAL_DMA_IRQHandler+0x428>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d00e      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <HAL_DMA_IRQHandler+0x42c>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d009      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a17      	ldr	r2, [pc, #92]	; (8006f1c <HAL_DMA_IRQHandler+0x430>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d004      	beq.n	8006ece <HAL_DMA_IRQHandler+0x3e2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <HAL_DMA_IRQHandler+0x434>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d12a      	bne.n	8006f24 <HAL_DMA_IRQHandler+0x438>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	bf14      	ite	ne
 8006edc:	2301      	movne	r3, #1
 8006ede:	2300      	moveq	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	e023      	b.n	8006f2c <HAL_DMA_IRQHandler+0x440>
 8006ee4:	40020010 	.word	0x40020010
 8006ee8:	40020028 	.word	0x40020028
 8006eec:	40020040 	.word	0x40020040
 8006ef0:	40020058 	.word	0x40020058
 8006ef4:	40020070 	.word	0x40020070
 8006ef8:	40020088 	.word	0x40020088
 8006efc:	400200a0 	.word	0x400200a0
 8006f00:	400200b8 	.word	0x400200b8
 8006f04:	40020410 	.word	0x40020410
 8006f08:	40020428 	.word	0x40020428
 8006f0c:	40020440 	.word	0x40020440
 8006f10:	40020458 	.word	0x40020458
 8006f14:	40020470 	.word	0x40020470
 8006f18:	40020488 	.word	0x40020488
 8006f1c:	400204a0 	.word	0x400204a0
 8006f20:	400204b8 	.word	0x400204b8
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00d      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f34:	f003 031f 	and.w	r3, r3, #31
 8006f38:	2204      	movs	r2, #4
 8006f3a:	409a      	lsls	r2, r3
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f44:	f043 0204 	orr.w	r2, r3, #4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	2210      	movs	r2, #16
 8006f56:	409a      	lsls	r2, r3
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 80a6 	beq.w	80070ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a85      	ldr	r2, [pc, #532]	; (800717c <HAL_DMA_IRQHandler+0x690>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d04a      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a83      	ldr	r2, [pc, #524]	; (8007180 <HAL_DMA_IRQHandler+0x694>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d045      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a82      	ldr	r2, [pc, #520]	; (8007184 <HAL_DMA_IRQHandler+0x698>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d040      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a80      	ldr	r2, [pc, #512]	; (8007188 <HAL_DMA_IRQHandler+0x69c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d03b      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a7f      	ldr	r2, [pc, #508]	; (800718c <HAL_DMA_IRQHandler+0x6a0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d036      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a7d      	ldr	r2, [pc, #500]	; (8007190 <HAL_DMA_IRQHandler+0x6a4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d031      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a7c      	ldr	r2, [pc, #496]	; (8007194 <HAL_DMA_IRQHandler+0x6a8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d02c      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a7a      	ldr	r2, [pc, #488]	; (8007198 <HAL_DMA_IRQHandler+0x6ac>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d027      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a79      	ldr	r2, [pc, #484]	; (800719c <HAL_DMA_IRQHandler+0x6b0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d022      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a77      	ldr	r2, [pc, #476]	; (80071a0 <HAL_DMA_IRQHandler+0x6b4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d01d      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a76      	ldr	r2, [pc, #472]	; (80071a4 <HAL_DMA_IRQHandler+0x6b8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d018      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a74      	ldr	r2, [pc, #464]	; (80071a8 <HAL_DMA_IRQHandler+0x6bc>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d013      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a73      	ldr	r2, [pc, #460]	; (80071ac <HAL_DMA_IRQHandler+0x6c0>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d00e      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a71      	ldr	r2, [pc, #452]	; (80071b0 <HAL_DMA_IRQHandler+0x6c4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d009      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a70      	ldr	r2, [pc, #448]	; (80071b4 <HAL_DMA_IRQHandler+0x6c8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d004      	beq.n	8007002 <HAL_DMA_IRQHandler+0x516>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a6e      	ldr	r2, [pc, #440]	; (80071b8 <HAL_DMA_IRQHandler+0x6cc>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d10a      	bne.n	8007018 <HAL_DMA_IRQHandler+0x52c>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b00      	cmp	r3, #0
 800700e:	bf14      	ite	ne
 8007010:	2301      	movne	r3, #1
 8007012:	2300      	moveq	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	e009      	b.n	800702c <HAL_DMA_IRQHandler+0x540>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0304 	and.w	r3, r3, #4
 8007022:	2b00      	cmp	r3, #0
 8007024:	bf14      	ite	ne
 8007026:	2301      	movne	r3, #1
 8007028:	2300      	moveq	r3, #0
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d03e      	beq.n	80070ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	2210      	movs	r2, #16
 800703a:	409a      	lsls	r2, r3
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d018      	beq.n	8007080 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d108      	bne.n	800706e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d024      	beq.n	80070ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	4798      	blx	r3
 800706c:	e01f      	b.n	80070ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007072:	2b00      	cmp	r3, #0
 8007074:	d01b      	beq.n	80070ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
 800707e:	e016      	b.n	80070ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708a:	2b00      	cmp	r3, #0
 800708c:	d107      	bne.n	800709e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0208 	bic.w	r2, r2, #8
 800709c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b2:	f003 031f 	and.w	r3, r3, #31
 80070b6:	2220      	movs	r2, #32
 80070b8:	409a      	lsls	r2, r3
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	4013      	ands	r3, r2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 8110 	beq.w	80072e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a2c      	ldr	r2, [pc, #176]	; (800717c <HAL_DMA_IRQHandler+0x690>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d04a      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a2b      	ldr	r2, [pc, #172]	; (8007180 <HAL_DMA_IRQHandler+0x694>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d045      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a29      	ldr	r2, [pc, #164]	; (8007184 <HAL_DMA_IRQHandler+0x698>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d040      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a28      	ldr	r2, [pc, #160]	; (8007188 <HAL_DMA_IRQHandler+0x69c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d03b      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a26      	ldr	r2, [pc, #152]	; (800718c <HAL_DMA_IRQHandler+0x6a0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d036      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a25      	ldr	r2, [pc, #148]	; (8007190 <HAL_DMA_IRQHandler+0x6a4>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d031      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a23      	ldr	r2, [pc, #140]	; (8007194 <HAL_DMA_IRQHandler+0x6a8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d02c      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a22      	ldr	r2, [pc, #136]	; (8007198 <HAL_DMA_IRQHandler+0x6ac>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d027      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a20      	ldr	r2, [pc, #128]	; (800719c <HAL_DMA_IRQHandler+0x6b0>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d022      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a1f      	ldr	r2, [pc, #124]	; (80071a0 <HAL_DMA_IRQHandler+0x6b4>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d01d      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1d      	ldr	r2, [pc, #116]	; (80071a4 <HAL_DMA_IRQHandler+0x6b8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d018      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1c      	ldr	r2, [pc, #112]	; (80071a8 <HAL_DMA_IRQHandler+0x6bc>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d013      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1a      	ldr	r2, [pc, #104]	; (80071ac <HAL_DMA_IRQHandler+0x6c0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00e      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a19      	ldr	r2, [pc, #100]	; (80071b0 <HAL_DMA_IRQHandler+0x6c4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d009      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a17      	ldr	r2, [pc, #92]	; (80071b4 <HAL_DMA_IRQHandler+0x6c8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <HAL_DMA_IRQHandler+0x678>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a16      	ldr	r2, [pc, #88]	; (80071b8 <HAL_DMA_IRQHandler+0x6cc>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d12b      	bne.n	80071bc <HAL_DMA_IRQHandler+0x6d0>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0310 	and.w	r3, r3, #16
 800716e:	2b00      	cmp	r3, #0
 8007170:	bf14      	ite	ne
 8007172:	2301      	movne	r3, #1
 8007174:	2300      	moveq	r3, #0
 8007176:	b2db      	uxtb	r3, r3
 8007178:	e02a      	b.n	80071d0 <HAL_DMA_IRQHandler+0x6e4>
 800717a:	bf00      	nop
 800717c:	40020010 	.word	0x40020010
 8007180:	40020028 	.word	0x40020028
 8007184:	40020040 	.word	0x40020040
 8007188:	40020058 	.word	0x40020058
 800718c:	40020070 	.word	0x40020070
 8007190:	40020088 	.word	0x40020088
 8007194:	400200a0 	.word	0x400200a0
 8007198:	400200b8 	.word	0x400200b8
 800719c:	40020410 	.word	0x40020410
 80071a0:	40020428 	.word	0x40020428
 80071a4:	40020440 	.word	0x40020440
 80071a8:	40020458 	.word	0x40020458
 80071ac:	40020470 	.word	0x40020470
 80071b0:	40020488 	.word	0x40020488
 80071b4:	400204a0 	.word	0x400204a0
 80071b8:	400204b8 	.word	0x400204b8
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	bf14      	ite	ne
 80071ca:	2301      	movne	r3, #1
 80071cc:	2300      	moveq	r3, #0
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 8087 	beq.w	80072e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071da:	f003 031f 	and.w	r3, r3, #31
 80071de:	2220      	movs	r2, #32
 80071e0:	409a      	lsls	r2, r3
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b04      	cmp	r3, #4
 80071f0:	d139      	bne.n	8007266 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0216 	bic.w	r2, r2, #22
 8007200:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	695a      	ldr	r2, [r3, #20]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007210:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <HAL_DMA_IRQHandler+0x736>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f022 0208 	bic.w	r2, r2, #8
 8007230:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007236:	f003 031f 	and.w	r3, r3, #31
 800723a:	223f      	movs	r2, #63	; 0x3f
 800723c:	409a      	lsls	r2, r3
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 834a 	beq.w	80078f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	4798      	blx	r3
          }
          return;
 8007264:	e344      	b.n	80078f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d018      	beq.n	80072a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d108      	bne.n	8007294 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007286:	2b00      	cmp	r3, #0
 8007288:	d02c      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	4798      	blx	r3
 8007292:	e027      	b.n	80072e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007298:	2b00      	cmp	r3, #0
 800729a:	d023      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	4798      	blx	r3
 80072a4:	e01e      	b.n	80072e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10f      	bne.n	80072d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0210 	bic.w	r2, r2, #16
 80072c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8306 	beq.w	80078fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 8088 	beq.w	800740c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2204      	movs	r2, #4
 8007300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a7a      	ldr	r2, [pc, #488]	; (80074f4 <HAL_DMA_IRQHandler+0xa08>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d04a      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a79      	ldr	r2, [pc, #484]	; (80074f8 <HAL_DMA_IRQHandler+0xa0c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d045      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a77      	ldr	r2, [pc, #476]	; (80074fc <HAL_DMA_IRQHandler+0xa10>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d040      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a76      	ldr	r2, [pc, #472]	; (8007500 <HAL_DMA_IRQHandler+0xa14>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d03b      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a74      	ldr	r2, [pc, #464]	; (8007504 <HAL_DMA_IRQHandler+0xa18>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d036      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a73      	ldr	r2, [pc, #460]	; (8007508 <HAL_DMA_IRQHandler+0xa1c>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d031      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a71      	ldr	r2, [pc, #452]	; (800750c <HAL_DMA_IRQHandler+0xa20>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d02c      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a70      	ldr	r2, [pc, #448]	; (8007510 <HAL_DMA_IRQHandler+0xa24>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d027      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a6e      	ldr	r2, [pc, #440]	; (8007514 <HAL_DMA_IRQHandler+0xa28>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d022      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a6d      	ldr	r2, [pc, #436]	; (8007518 <HAL_DMA_IRQHandler+0xa2c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d01d      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a6b      	ldr	r2, [pc, #428]	; (800751c <HAL_DMA_IRQHandler+0xa30>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d018      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a6a      	ldr	r2, [pc, #424]	; (8007520 <HAL_DMA_IRQHandler+0xa34>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d013      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a68      	ldr	r2, [pc, #416]	; (8007524 <HAL_DMA_IRQHandler+0xa38>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d00e      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a67      	ldr	r2, [pc, #412]	; (8007528 <HAL_DMA_IRQHandler+0xa3c>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d009      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a65      	ldr	r2, [pc, #404]	; (800752c <HAL_DMA_IRQHandler+0xa40>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d004      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x8b8>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a64      	ldr	r2, [pc, #400]	; (8007530 <HAL_DMA_IRQHandler+0xa44>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d108      	bne.n	80073b6 <HAL_DMA_IRQHandler+0x8ca>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0201 	bic.w	r2, r2, #1
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	e007      	b.n	80073c6 <HAL_DMA_IRQHandler+0x8da>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f022 0201 	bic.w	r2, r2, #1
 80073c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	3301      	adds	r3, #1
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d307      	bcc.n	80073e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1f2      	bne.n	80073c6 <HAL_DMA_IRQHandler+0x8da>
 80073e0:	e000      	b.n	80073e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80073e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d004      	beq.n	80073fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2203      	movs	r2, #3
 80073f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80073fa:	e003      	b.n	8007404 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8272 	beq.w	80078fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
 800741e:	e26c      	b.n	80078fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a43      	ldr	r2, [pc, #268]	; (8007534 <HAL_DMA_IRQHandler+0xa48>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d022      	beq.n	8007470 <HAL_DMA_IRQHandler+0x984>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a42      	ldr	r2, [pc, #264]	; (8007538 <HAL_DMA_IRQHandler+0xa4c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d01d      	beq.n	8007470 <HAL_DMA_IRQHandler+0x984>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a40      	ldr	r2, [pc, #256]	; (800753c <HAL_DMA_IRQHandler+0xa50>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d018      	beq.n	8007470 <HAL_DMA_IRQHandler+0x984>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a3f      	ldr	r2, [pc, #252]	; (8007540 <HAL_DMA_IRQHandler+0xa54>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <HAL_DMA_IRQHandler+0x984>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a3d      	ldr	r2, [pc, #244]	; (8007544 <HAL_DMA_IRQHandler+0xa58>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <HAL_DMA_IRQHandler+0x984>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a3c      	ldr	r2, [pc, #240]	; (8007548 <HAL_DMA_IRQHandler+0xa5c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <HAL_DMA_IRQHandler+0x984>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a3a      	ldr	r2, [pc, #232]	; (800754c <HAL_DMA_IRQHandler+0xa60>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <HAL_DMA_IRQHandler+0x984>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a39      	ldr	r2, [pc, #228]	; (8007550 <HAL_DMA_IRQHandler+0xa64>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d101      	bne.n	8007474 <HAL_DMA_IRQHandler+0x988>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <HAL_DMA_IRQHandler+0x98a>
 8007474:	2300      	movs	r3, #0
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 823f 	beq.w	80078fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	2204      	movs	r2, #4
 800748e:	409a      	lsls	r2, r3
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	4013      	ands	r3, r2
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 80cd 	beq.w	8007634 <HAL_DMA_IRQHandler+0xb48>
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 80c7 	beq.w	8007634 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074aa:	f003 031f 	and.w	r3, r3, #31
 80074ae:	2204      	movs	r2, #4
 80074b0:	409a      	lsls	r2, r3
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d049      	beq.n	8007554 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d109      	bne.n	80074de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f000 8210 	beq.w	80078f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074dc:	e20a      	b.n	80078f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 8206 	beq.w	80078f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074f0:	e200      	b.n	80078f4 <HAL_DMA_IRQHandler+0xe08>
 80074f2:	bf00      	nop
 80074f4:	40020010 	.word	0x40020010
 80074f8:	40020028 	.word	0x40020028
 80074fc:	40020040 	.word	0x40020040
 8007500:	40020058 	.word	0x40020058
 8007504:	40020070 	.word	0x40020070
 8007508:	40020088 	.word	0x40020088
 800750c:	400200a0 	.word	0x400200a0
 8007510:	400200b8 	.word	0x400200b8
 8007514:	40020410 	.word	0x40020410
 8007518:	40020428 	.word	0x40020428
 800751c:	40020440 	.word	0x40020440
 8007520:	40020458 	.word	0x40020458
 8007524:	40020470 	.word	0x40020470
 8007528:	40020488 	.word	0x40020488
 800752c:	400204a0 	.word	0x400204a0
 8007530:	400204b8 	.word	0x400204b8
 8007534:	58025408 	.word	0x58025408
 8007538:	5802541c 	.word	0x5802541c
 800753c:	58025430 	.word	0x58025430
 8007540:	58025444 	.word	0x58025444
 8007544:	58025458 	.word	0x58025458
 8007548:	5802546c 	.word	0x5802546c
 800754c:	58025480 	.word	0x58025480
 8007550:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f003 0320 	and.w	r3, r3, #32
 800755a:	2b00      	cmp	r3, #0
 800755c:	d160      	bne.n	8007620 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a7f      	ldr	r2, [pc, #508]	; (8007760 <HAL_DMA_IRQHandler+0xc74>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d04a      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a7d      	ldr	r2, [pc, #500]	; (8007764 <HAL_DMA_IRQHandler+0xc78>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d045      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a7c      	ldr	r2, [pc, #496]	; (8007768 <HAL_DMA_IRQHandler+0xc7c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d040      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a7a      	ldr	r2, [pc, #488]	; (800776c <HAL_DMA_IRQHandler+0xc80>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d03b      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a79      	ldr	r2, [pc, #484]	; (8007770 <HAL_DMA_IRQHandler+0xc84>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d036      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a77      	ldr	r2, [pc, #476]	; (8007774 <HAL_DMA_IRQHandler+0xc88>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d031      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a76      	ldr	r2, [pc, #472]	; (8007778 <HAL_DMA_IRQHandler+0xc8c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d02c      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a74      	ldr	r2, [pc, #464]	; (800777c <HAL_DMA_IRQHandler+0xc90>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d027      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a73      	ldr	r2, [pc, #460]	; (8007780 <HAL_DMA_IRQHandler+0xc94>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d022      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a71      	ldr	r2, [pc, #452]	; (8007784 <HAL_DMA_IRQHandler+0xc98>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d01d      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a70      	ldr	r2, [pc, #448]	; (8007788 <HAL_DMA_IRQHandler+0xc9c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d018      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a6e      	ldr	r2, [pc, #440]	; (800778c <HAL_DMA_IRQHandler+0xca0>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d013      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a6d      	ldr	r2, [pc, #436]	; (8007790 <HAL_DMA_IRQHandler+0xca4>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d00e      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a6b      	ldr	r2, [pc, #428]	; (8007794 <HAL_DMA_IRQHandler+0xca8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d009      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a6a      	ldr	r2, [pc, #424]	; (8007798 <HAL_DMA_IRQHandler+0xcac>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d004      	beq.n	80075fe <HAL_DMA_IRQHandler+0xb12>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a68      	ldr	r2, [pc, #416]	; (800779c <HAL_DMA_IRQHandler+0xcb0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d108      	bne.n	8007610 <HAL_DMA_IRQHandler+0xb24>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0208 	bic.w	r2, r2, #8
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e007      	b.n	8007620 <HAL_DMA_IRQHandler+0xb34>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0204 	bic.w	r2, r2, #4
 800761e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 8165 	beq.w	80078f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007632:	e15f      	b.n	80078f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007638:	f003 031f 	and.w	r3, r3, #31
 800763c:	2202      	movs	r2, #2
 800763e:	409a      	lsls	r2, r3
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	4013      	ands	r3, r2
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 80c5 	beq.w	80077d4 <HAL_DMA_IRQHandler+0xce8>
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f003 0302 	and.w	r3, r3, #2
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 80bf 	beq.w	80077d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800765a:	f003 031f 	and.w	r3, r3, #31
 800765e:	2202      	movs	r2, #2
 8007660:	409a      	lsls	r2, r3
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d018      	beq.n	80076a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d109      	bne.n	800768e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 813a 	beq.w	80078f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800768c:	e134      	b.n	80078f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8130 	beq.w	80078f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80076a0:	e12a      	b.n	80078f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f003 0320 	and.w	r3, r3, #32
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f040 8089 	bne.w	80077c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a2b      	ldr	r2, [pc, #172]	; (8007760 <HAL_DMA_IRQHandler+0xc74>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d04a      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a29      	ldr	r2, [pc, #164]	; (8007764 <HAL_DMA_IRQHandler+0xc78>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d045      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a28      	ldr	r2, [pc, #160]	; (8007768 <HAL_DMA_IRQHandler+0xc7c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d040      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a26      	ldr	r2, [pc, #152]	; (800776c <HAL_DMA_IRQHandler+0xc80>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d03b      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a25      	ldr	r2, [pc, #148]	; (8007770 <HAL_DMA_IRQHandler+0xc84>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d036      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a23      	ldr	r2, [pc, #140]	; (8007774 <HAL_DMA_IRQHandler+0xc88>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d031      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a22      	ldr	r2, [pc, #136]	; (8007778 <HAL_DMA_IRQHandler+0xc8c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d02c      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a20      	ldr	r2, [pc, #128]	; (800777c <HAL_DMA_IRQHandler+0xc90>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d027      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a1f      	ldr	r2, [pc, #124]	; (8007780 <HAL_DMA_IRQHandler+0xc94>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d022      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1d      	ldr	r2, [pc, #116]	; (8007784 <HAL_DMA_IRQHandler+0xc98>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d01d      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1c      	ldr	r2, [pc, #112]	; (8007788 <HAL_DMA_IRQHandler+0xc9c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d018      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1a      	ldr	r2, [pc, #104]	; (800778c <HAL_DMA_IRQHandler+0xca0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a19      	ldr	r2, [pc, #100]	; (8007790 <HAL_DMA_IRQHandler+0xca4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00e      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a17      	ldr	r2, [pc, #92]	; (8007794 <HAL_DMA_IRQHandler+0xca8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d009      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a16      	ldr	r2, [pc, #88]	; (8007798 <HAL_DMA_IRQHandler+0xcac>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d004      	beq.n	800774e <HAL_DMA_IRQHandler+0xc62>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a14      	ldr	r2, [pc, #80]	; (800779c <HAL_DMA_IRQHandler+0xcb0>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d128      	bne.n	80077a0 <HAL_DMA_IRQHandler+0xcb4>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f022 0214 	bic.w	r2, r2, #20
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	e027      	b.n	80077b0 <HAL_DMA_IRQHandler+0xcc4>
 8007760:	40020010 	.word	0x40020010
 8007764:	40020028 	.word	0x40020028
 8007768:	40020040 	.word	0x40020040
 800776c:	40020058 	.word	0x40020058
 8007770:	40020070 	.word	0x40020070
 8007774:	40020088 	.word	0x40020088
 8007778:	400200a0 	.word	0x400200a0
 800777c:	400200b8 	.word	0x400200b8
 8007780:	40020410 	.word	0x40020410
 8007784:	40020428 	.word	0x40020428
 8007788:	40020440 	.word	0x40020440
 800778c:	40020458 	.word	0x40020458
 8007790:	40020470 	.word	0x40020470
 8007794:	40020488 	.word	0x40020488
 8007798:	400204a0 	.word	0x400204a0
 800779c:	400204b8 	.word	0x400204b8
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 020a 	bic.w	r2, r2, #10
 80077ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8097 	beq.w	80078f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077d2:	e091      	b.n	80078f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d8:	f003 031f 	and.w	r3, r3, #31
 80077dc:	2208      	movs	r2, #8
 80077de:	409a      	lsls	r2, r3
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	4013      	ands	r3, r2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 8088 	beq.w	80078fa <HAL_DMA_IRQHandler+0xe0e>
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f003 0308 	and.w	r3, r3, #8
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 8082 	beq.w	80078fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a41      	ldr	r2, [pc, #260]	; (8007900 <HAL_DMA_IRQHandler+0xe14>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d04a      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a3f      	ldr	r2, [pc, #252]	; (8007904 <HAL_DMA_IRQHandler+0xe18>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d045      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a3e      	ldr	r2, [pc, #248]	; (8007908 <HAL_DMA_IRQHandler+0xe1c>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d040      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a3c      	ldr	r2, [pc, #240]	; (800790c <HAL_DMA_IRQHandler+0xe20>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d03b      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a3b      	ldr	r2, [pc, #236]	; (8007910 <HAL_DMA_IRQHandler+0xe24>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d036      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a39      	ldr	r2, [pc, #228]	; (8007914 <HAL_DMA_IRQHandler+0xe28>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d031      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a38      	ldr	r2, [pc, #224]	; (8007918 <HAL_DMA_IRQHandler+0xe2c>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d02c      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a36      	ldr	r2, [pc, #216]	; (800791c <HAL_DMA_IRQHandler+0xe30>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d027      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a35      	ldr	r2, [pc, #212]	; (8007920 <HAL_DMA_IRQHandler+0xe34>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d022      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a33      	ldr	r2, [pc, #204]	; (8007924 <HAL_DMA_IRQHandler+0xe38>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d01d      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a32      	ldr	r2, [pc, #200]	; (8007928 <HAL_DMA_IRQHandler+0xe3c>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d018      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a30      	ldr	r2, [pc, #192]	; (800792c <HAL_DMA_IRQHandler+0xe40>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d013      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a2f      	ldr	r2, [pc, #188]	; (8007930 <HAL_DMA_IRQHandler+0xe44>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00e      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <HAL_DMA_IRQHandler+0xe48>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d009      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a2c      	ldr	r2, [pc, #176]	; (8007938 <HAL_DMA_IRQHandler+0xe4c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d004      	beq.n	8007896 <HAL_DMA_IRQHandler+0xdaa>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a2a      	ldr	r2, [pc, #168]	; (800793c <HAL_DMA_IRQHandler+0xe50>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d108      	bne.n	80078a8 <HAL_DMA_IRQHandler+0xdbc>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 021c 	bic.w	r2, r2, #28
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	e007      	b.n	80078b8 <HAL_DMA_IRQHandler+0xdcc>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 020e 	bic.w	r2, r2, #14
 80078b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078bc:	f003 031f 	and.w	r3, r3, #31
 80078c0:	2201      	movs	r2, #1
 80078c2:	409a      	lsls	r2, r3
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d009      	beq.n	80078fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	4798      	blx	r3
 80078ee:	e004      	b.n	80078fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80078f0:	bf00      	nop
 80078f2:	e002      	b.n	80078fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078f4:	bf00      	nop
 80078f6:	e000      	b.n	80078fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80078f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80078fa:	3728      	adds	r7, #40	; 0x28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	40020010 	.word	0x40020010
 8007904:	40020028 	.word	0x40020028
 8007908:	40020040 	.word	0x40020040
 800790c:	40020058 	.word	0x40020058
 8007910:	40020070 	.word	0x40020070
 8007914:	40020088 	.word	0x40020088
 8007918:	400200a0 	.word	0x400200a0
 800791c:	400200b8 	.word	0x400200b8
 8007920:	40020410 	.word	0x40020410
 8007924:	40020428 	.word	0x40020428
 8007928:	40020440 	.word	0x40020440
 800792c:	40020458 	.word	0x40020458
 8007930:	40020470 	.word	0x40020470
 8007934:	40020488 	.word	0x40020488
 8007938:	400204a0 	.word	0x400204a0
 800793c:	400204b8 	.word	0x400204b8

08007940 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007970:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a7f      	ldr	r2, [pc, #508]	; (8007b74 <DMA_SetConfig+0x21c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d072      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a7d      	ldr	r2, [pc, #500]	; (8007b78 <DMA_SetConfig+0x220>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d06d      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a7c      	ldr	r2, [pc, #496]	; (8007b7c <DMA_SetConfig+0x224>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d068      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a7a      	ldr	r2, [pc, #488]	; (8007b80 <DMA_SetConfig+0x228>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d063      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a79      	ldr	r2, [pc, #484]	; (8007b84 <DMA_SetConfig+0x22c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d05e      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a77      	ldr	r2, [pc, #476]	; (8007b88 <DMA_SetConfig+0x230>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d059      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a76      	ldr	r2, [pc, #472]	; (8007b8c <DMA_SetConfig+0x234>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d054      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a74      	ldr	r2, [pc, #464]	; (8007b90 <DMA_SetConfig+0x238>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d04f      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a73      	ldr	r2, [pc, #460]	; (8007b94 <DMA_SetConfig+0x23c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d04a      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a71      	ldr	r2, [pc, #452]	; (8007b98 <DMA_SetConfig+0x240>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d045      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a70      	ldr	r2, [pc, #448]	; (8007b9c <DMA_SetConfig+0x244>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d040      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a6e      	ldr	r2, [pc, #440]	; (8007ba0 <DMA_SetConfig+0x248>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d03b      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a6d      	ldr	r2, [pc, #436]	; (8007ba4 <DMA_SetConfig+0x24c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d036      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a6b      	ldr	r2, [pc, #428]	; (8007ba8 <DMA_SetConfig+0x250>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d031      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a6a      	ldr	r2, [pc, #424]	; (8007bac <DMA_SetConfig+0x254>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d02c      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a68      	ldr	r2, [pc, #416]	; (8007bb0 <DMA_SetConfig+0x258>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d027      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a67      	ldr	r2, [pc, #412]	; (8007bb4 <DMA_SetConfig+0x25c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d022      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a65      	ldr	r2, [pc, #404]	; (8007bb8 <DMA_SetConfig+0x260>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d01d      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a64      	ldr	r2, [pc, #400]	; (8007bbc <DMA_SetConfig+0x264>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d018      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a62      	ldr	r2, [pc, #392]	; (8007bc0 <DMA_SetConfig+0x268>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d013      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a61      	ldr	r2, [pc, #388]	; (8007bc4 <DMA_SetConfig+0x26c>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d00e      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a5f      	ldr	r2, [pc, #380]	; (8007bc8 <DMA_SetConfig+0x270>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d009      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a5e      	ldr	r2, [pc, #376]	; (8007bcc <DMA_SetConfig+0x274>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d004      	beq.n	8007a62 <DMA_SetConfig+0x10a>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a5c      	ldr	r2, [pc, #368]	; (8007bd0 <DMA_SetConfig+0x278>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d101      	bne.n	8007a66 <DMA_SetConfig+0x10e>
 8007a62:	2301      	movs	r3, #1
 8007a64:	e000      	b.n	8007a68 <DMA_SetConfig+0x110>
 8007a66:	2300      	movs	r3, #0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00d      	beq.n	8007a88 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007a74:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d004      	beq.n	8007a88 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007a86:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a39      	ldr	r2, [pc, #228]	; (8007b74 <DMA_SetConfig+0x21c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d04a      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a38      	ldr	r2, [pc, #224]	; (8007b78 <DMA_SetConfig+0x220>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d045      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a36      	ldr	r2, [pc, #216]	; (8007b7c <DMA_SetConfig+0x224>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d040      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a35      	ldr	r2, [pc, #212]	; (8007b80 <DMA_SetConfig+0x228>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d03b      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a33      	ldr	r2, [pc, #204]	; (8007b84 <DMA_SetConfig+0x22c>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d036      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a32      	ldr	r2, [pc, #200]	; (8007b88 <DMA_SetConfig+0x230>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d031      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a30      	ldr	r2, [pc, #192]	; (8007b8c <DMA_SetConfig+0x234>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d02c      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a2f      	ldr	r2, [pc, #188]	; (8007b90 <DMA_SetConfig+0x238>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d027      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a2d      	ldr	r2, [pc, #180]	; (8007b94 <DMA_SetConfig+0x23c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d022      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a2c      	ldr	r2, [pc, #176]	; (8007b98 <DMA_SetConfig+0x240>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d01d      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a2a      	ldr	r2, [pc, #168]	; (8007b9c <DMA_SetConfig+0x244>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d018      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a29      	ldr	r2, [pc, #164]	; (8007ba0 <DMA_SetConfig+0x248>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d013      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a27      	ldr	r2, [pc, #156]	; (8007ba4 <DMA_SetConfig+0x24c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00e      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a26      	ldr	r2, [pc, #152]	; (8007ba8 <DMA_SetConfig+0x250>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d009      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a24      	ldr	r2, [pc, #144]	; (8007bac <DMA_SetConfig+0x254>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d004      	beq.n	8007b28 <DMA_SetConfig+0x1d0>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a23      	ldr	r2, [pc, #140]	; (8007bb0 <DMA_SetConfig+0x258>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d101      	bne.n	8007b2c <DMA_SetConfig+0x1d4>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e000      	b.n	8007b2e <DMA_SetConfig+0x1d6>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d059      	beq.n	8007be6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b36:	f003 031f 	and.w	r3, r3, #31
 8007b3a:	223f      	movs	r2, #63	; 0x3f
 8007b3c:	409a      	lsls	r2, r3
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b50:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	2b40      	cmp	r3, #64	; 0x40
 8007b60:	d138      	bne.n	8007bd4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007b72:	e086      	b.n	8007c82 <DMA_SetConfig+0x32a>
 8007b74:	40020010 	.word	0x40020010
 8007b78:	40020028 	.word	0x40020028
 8007b7c:	40020040 	.word	0x40020040
 8007b80:	40020058 	.word	0x40020058
 8007b84:	40020070 	.word	0x40020070
 8007b88:	40020088 	.word	0x40020088
 8007b8c:	400200a0 	.word	0x400200a0
 8007b90:	400200b8 	.word	0x400200b8
 8007b94:	40020410 	.word	0x40020410
 8007b98:	40020428 	.word	0x40020428
 8007b9c:	40020440 	.word	0x40020440
 8007ba0:	40020458 	.word	0x40020458
 8007ba4:	40020470 	.word	0x40020470
 8007ba8:	40020488 	.word	0x40020488
 8007bac:	400204a0 	.word	0x400204a0
 8007bb0:	400204b8 	.word	0x400204b8
 8007bb4:	58025408 	.word	0x58025408
 8007bb8:	5802541c 	.word	0x5802541c
 8007bbc:	58025430 	.word	0x58025430
 8007bc0:	58025444 	.word	0x58025444
 8007bc4:	58025458 	.word	0x58025458
 8007bc8:	5802546c 	.word	0x5802546c
 8007bcc:	58025480 	.word	0x58025480
 8007bd0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	60da      	str	r2, [r3, #12]
}
 8007be4:	e04d      	b.n	8007c82 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a29      	ldr	r2, [pc, #164]	; (8007c90 <DMA_SetConfig+0x338>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d022      	beq.n	8007c36 <DMA_SetConfig+0x2de>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a27      	ldr	r2, [pc, #156]	; (8007c94 <DMA_SetConfig+0x33c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d01d      	beq.n	8007c36 <DMA_SetConfig+0x2de>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a26      	ldr	r2, [pc, #152]	; (8007c98 <DMA_SetConfig+0x340>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d018      	beq.n	8007c36 <DMA_SetConfig+0x2de>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a24      	ldr	r2, [pc, #144]	; (8007c9c <DMA_SetConfig+0x344>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d013      	beq.n	8007c36 <DMA_SetConfig+0x2de>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a23      	ldr	r2, [pc, #140]	; (8007ca0 <DMA_SetConfig+0x348>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d00e      	beq.n	8007c36 <DMA_SetConfig+0x2de>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a21      	ldr	r2, [pc, #132]	; (8007ca4 <DMA_SetConfig+0x34c>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d009      	beq.n	8007c36 <DMA_SetConfig+0x2de>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a20      	ldr	r2, [pc, #128]	; (8007ca8 <DMA_SetConfig+0x350>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d004      	beq.n	8007c36 <DMA_SetConfig+0x2de>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a1e      	ldr	r2, [pc, #120]	; (8007cac <DMA_SetConfig+0x354>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d101      	bne.n	8007c3a <DMA_SetConfig+0x2e2>
 8007c36:	2301      	movs	r3, #1
 8007c38:	e000      	b.n	8007c3c <DMA_SetConfig+0x2e4>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d020      	beq.n	8007c82 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c44:	f003 031f 	and.w	r3, r3, #31
 8007c48:	2201      	movs	r2, #1
 8007c4a:	409a      	lsls	r2, r3
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	2b40      	cmp	r3, #64	; 0x40
 8007c5e:	d108      	bne.n	8007c72 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	60da      	str	r2, [r3, #12]
}
 8007c70:	e007      	b.n	8007c82 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	60da      	str	r2, [r3, #12]
}
 8007c82:	bf00      	nop
 8007c84:	371c      	adds	r7, #28
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	58025408 	.word	0x58025408
 8007c94:	5802541c 	.word	0x5802541c
 8007c98:	58025430 	.word	0x58025430
 8007c9c:	58025444 	.word	0x58025444
 8007ca0:	58025458 	.word	0x58025458
 8007ca4:	5802546c 	.word	0x5802546c
 8007ca8:	58025480 	.word	0x58025480
 8007cac:	58025494 	.word	0x58025494

08007cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a42      	ldr	r2, [pc, #264]	; (8007dc8 <DMA_CalcBaseAndBitshift+0x118>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d04a      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a41      	ldr	r2, [pc, #260]	; (8007dcc <DMA_CalcBaseAndBitshift+0x11c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d045      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a3f      	ldr	r2, [pc, #252]	; (8007dd0 <DMA_CalcBaseAndBitshift+0x120>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d040      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a3e      	ldr	r2, [pc, #248]	; (8007dd4 <DMA_CalcBaseAndBitshift+0x124>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d03b      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a3c      	ldr	r2, [pc, #240]	; (8007dd8 <DMA_CalcBaseAndBitshift+0x128>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d036      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a3b      	ldr	r2, [pc, #236]	; (8007ddc <DMA_CalcBaseAndBitshift+0x12c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d031      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a39      	ldr	r2, [pc, #228]	; (8007de0 <DMA_CalcBaseAndBitshift+0x130>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d02c      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a38      	ldr	r2, [pc, #224]	; (8007de4 <DMA_CalcBaseAndBitshift+0x134>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d027      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a36      	ldr	r2, [pc, #216]	; (8007de8 <DMA_CalcBaseAndBitshift+0x138>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d022      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a35      	ldr	r2, [pc, #212]	; (8007dec <DMA_CalcBaseAndBitshift+0x13c>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d01d      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a33      	ldr	r2, [pc, #204]	; (8007df0 <DMA_CalcBaseAndBitshift+0x140>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d018      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a32      	ldr	r2, [pc, #200]	; (8007df4 <DMA_CalcBaseAndBitshift+0x144>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d013      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a30      	ldr	r2, [pc, #192]	; (8007df8 <DMA_CalcBaseAndBitshift+0x148>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d00e      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a2f      	ldr	r2, [pc, #188]	; (8007dfc <DMA_CalcBaseAndBitshift+0x14c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d009      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a2d      	ldr	r2, [pc, #180]	; (8007e00 <DMA_CalcBaseAndBitshift+0x150>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d004      	beq.n	8007d58 <DMA_CalcBaseAndBitshift+0xa8>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a2c      	ldr	r2, [pc, #176]	; (8007e04 <DMA_CalcBaseAndBitshift+0x154>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d101      	bne.n	8007d5c <DMA_CalcBaseAndBitshift+0xac>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <DMA_CalcBaseAndBitshift+0xae>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d024      	beq.n	8007dac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	3b10      	subs	r3, #16
 8007d6a:	4a27      	ldr	r2, [pc, #156]	; (8007e08 <DMA_CalcBaseAndBitshift+0x158>)
 8007d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d70:	091b      	lsrs	r3, r3, #4
 8007d72:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	4a24      	ldr	r2, [pc, #144]	; (8007e0c <DMA_CalcBaseAndBitshift+0x15c>)
 8007d7c:	5cd3      	ldrb	r3, [r2, r3]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d908      	bls.n	8007d9c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	4b1f      	ldr	r3, [pc, #124]	; (8007e10 <DMA_CalcBaseAndBitshift+0x160>)
 8007d92:	4013      	ands	r3, r2
 8007d94:	1d1a      	adds	r2, r3, #4
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	659a      	str	r2, [r3, #88]	; 0x58
 8007d9a:	e00d      	b.n	8007db8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	461a      	mov	r2, r3
 8007da2:	4b1b      	ldr	r3, [pc, #108]	; (8007e10 <DMA_CalcBaseAndBitshift+0x160>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	6593      	str	r3, [r2, #88]	; 0x58
 8007daa:	e005      	b.n	8007db8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	40020010 	.word	0x40020010
 8007dcc:	40020028 	.word	0x40020028
 8007dd0:	40020040 	.word	0x40020040
 8007dd4:	40020058 	.word	0x40020058
 8007dd8:	40020070 	.word	0x40020070
 8007ddc:	40020088 	.word	0x40020088
 8007de0:	400200a0 	.word	0x400200a0
 8007de4:	400200b8 	.word	0x400200b8
 8007de8:	40020410 	.word	0x40020410
 8007dec:	40020428 	.word	0x40020428
 8007df0:	40020440 	.word	0x40020440
 8007df4:	40020458 	.word	0x40020458
 8007df8:	40020470 	.word	0x40020470
 8007dfc:	40020488 	.word	0x40020488
 8007e00:	400204a0 	.word	0x400204a0
 8007e04:	400204b8 	.word	0x400204b8
 8007e08:	aaaaaaab 	.word	0xaaaaaaab
 8007e0c:	08014fa0 	.word	0x08014fa0
 8007e10:	fffffc00 	.word	0xfffffc00

08007e14 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d120      	bne.n	8007e6a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	2b03      	cmp	r3, #3
 8007e2e:	d858      	bhi.n	8007ee2 <DMA_CheckFifoParam+0xce>
 8007e30:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <DMA_CheckFifoParam+0x24>)
 8007e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e36:	bf00      	nop
 8007e38:	08007e49 	.word	0x08007e49
 8007e3c:	08007e5b 	.word	0x08007e5b
 8007e40:	08007e49 	.word	0x08007e49
 8007e44:	08007ee3 	.word	0x08007ee3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d048      	beq.n	8007ee6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e58:	e045      	b.n	8007ee6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007e62:	d142      	bne.n	8007eea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007e68:	e03f      	b.n	8007eea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e72:	d123      	bne.n	8007ebc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d838      	bhi.n	8007eee <DMA_CheckFifoParam+0xda>
 8007e7c:	a201      	add	r2, pc, #4	; (adr r2, 8007e84 <DMA_CheckFifoParam+0x70>)
 8007e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e82:	bf00      	nop
 8007e84:	08007e95 	.word	0x08007e95
 8007e88:	08007e9b 	.word	0x08007e9b
 8007e8c:	08007e95 	.word	0x08007e95
 8007e90:	08007ead 	.word	0x08007ead
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	73fb      	strb	r3, [r7, #15]
        break;
 8007e98:	e030      	b.n	8007efc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d025      	beq.n	8007ef2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007eaa:	e022      	b.n	8007ef2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007eb4:	d11f      	bne.n	8007ef6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007eba:	e01c      	b.n	8007ef6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d902      	bls.n	8007eca <DMA_CheckFifoParam+0xb6>
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d003      	beq.n	8007ed0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007ec8:	e018      	b.n	8007efc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8007ece:	e015      	b.n	8007efc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00e      	beq.n	8007efa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee0:	e00b      	b.n	8007efa <DMA_CheckFifoParam+0xe6>
        break;
 8007ee2:	bf00      	nop
 8007ee4:	e00a      	b.n	8007efc <DMA_CheckFifoParam+0xe8>
        break;
 8007ee6:	bf00      	nop
 8007ee8:	e008      	b.n	8007efc <DMA_CheckFifoParam+0xe8>
        break;
 8007eea:	bf00      	nop
 8007eec:	e006      	b.n	8007efc <DMA_CheckFifoParam+0xe8>
        break;
 8007eee:	bf00      	nop
 8007ef0:	e004      	b.n	8007efc <DMA_CheckFifoParam+0xe8>
        break;
 8007ef2:	bf00      	nop
 8007ef4:	e002      	b.n	8007efc <DMA_CheckFifoParam+0xe8>
        break;
 8007ef6:	bf00      	nop
 8007ef8:	e000      	b.n	8007efc <DMA_CheckFifoParam+0xe8>
    break;
 8007efa:	bf00      	nop
    }
  }

  return status;
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop

08007f0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a38      	ldr	r2, [pc, #224]	; (8008000 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d022      	beq.n	8007f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a36      	ldr	r2, [pc, #216]	; (8008004 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d01d      	beq.n	8007f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a35      	ldr	r2, [pc, #212]	; (8008008 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d018      	beq.n	8007f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a33      	ldr	r2, [pc, #204]	; (800800c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d013      	beq.n	8007f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a32      	ldr	r2, [pc, #200]	; (8008010 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d00e      	beq.n	8007f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a30      	ldr	r2, [pc, #192]	; (8008014 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d009      	beq.n	8007f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a2f      	ldr	r2, [pc, #188]	; (8008018 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d004      	beq.n	8007f6a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a2d      	ldr	r2, [pc, #180]	; (800801c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d101      	bne.n	8007f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e000      	b.n	8007f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d01a      	beq.n	8007faa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	3b08      	subs	r3, #8
 8007f7c:	4a28      	ldr	r2, [pc, #160]	; (8008020 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f82:	091b      	lsrs	r3, r3, #4
 8007f84:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4b26      	ldr	r3, [pc, #152]	; (8008024 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	461a      	mov	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a24      	ldr	r2, [pc, #144]	; (8008028 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007f98:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f003 031f 	and.w	r3, r3, #31
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	409a      	lsls	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007fa8:	e024      	b.n	8007ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	3b10      	subs	r3, #16
 8007fb2:	4a1e      	ldr	r2, [pc, #120]	; (800802c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb8:	091b      	lsrs	r3, r3, #4
 8007fba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	4a1c      	ldr	r2, [pc, #112]	; (8008030 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d806      	bhi.n	8007fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	4a1b      	ldr	r2, [pc, #108]	; (8008034 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d902      	bls.n	8007fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	3308      	adds	r3, #8
 8007fd0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	4b18      	ldr	r3, [pc, #96]	; (8008038 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	461a      	mov	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a16      	ldr	r2, [pc, #88]	; (800803c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007fe4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f003 031f 	and.w	r3, r3, #31
 8007fec:	2201      	movs	r2, #1
 8007fee:	409a      	lsls	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ff4:	bf00      	nop
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	58025408 	.word	0x58025408
 8008004:	5802541c 	.word	0x5802541c
 8008008:	58025430 	.word	0x58025430
 800800c:	58025444 	.word	0x58025444
 8008010:	58025458 	.word	0x58025458
 8008014:	5802546c 	.word	0x5802546c
 8008018:	58025480 	.word	0x58025480
 800801c:	58025494 	.word	0x58025494
 8008020:	cccccccd 	.word	0xcccccccd
 8008024:	16009600 	.word	0x16009600
 8008028:	58025880 	.word	0x58025880
 800802c:	aaaaaaab 	.word	0xaaaaaaab
 8008030:	400204b8 	.word	0x400204b8
 8008034:	4002040f 	.word	0x4002040f
 8008038:	10008200 	.word	0x10008200
 800803c:	40020880 	.word	0x40020880

08008040 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	b2db      	uxtb	r3, r3
 800804e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d04a      	beq.n	80080ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b08      	cmp	r3, #8
 800805a:	d847      	bhi.n	80080ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a25      	ldr	r2, [pc, #148]	; (80080f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d022      	beq.n	80080ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a24      	ldr	r2, [pc, #144]	; (80080fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d01d      	beq.n	80080ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a22      	ldr	r2, [pc, #136]	; (8008100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d018      	beq.n	80080ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a21      	ldr	r2, [pc, #132]	; (8008104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d013      	beq.n	80080ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a1f      	ldr	r2, [pc, #124]	; (8008108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00e      	beq.n	80080ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a1e      	ldr	r2, [pc, #120]	; (800810c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d009      	beq.n	80080ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a1c      	ldr	r2, [pc, #112]	; (8008110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d004      	beq.n	80080ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a1b      	ldr	r2, [pc, #108]	; (8008114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d101      	bne.n	80080b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80080ac:	2301      	movs	r3, #1
 80080ae:	e000      	b.n	80080b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80080b0:	2300      	movs	r3, #0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	4b17      	ldr	r3, [pc, #92]	; (8008118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80080ba:	4413      	add	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	461a      	mov	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a15      	ldr	r2, [pc, #84]	; (800811c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80080c8:	671a      	str	r2, [r3, #112]	; 0x70
 80080ca:	e009      	b.n	80080e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	4b14      	ldr	r3, [pc, #80]	; (8008120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80080d0:	4413      	add	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	461a      	mov	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a11      	ldr	r2, [pc, #68]	; (8008124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80080de:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	2201      	movs	r2, #1
 80080e6:	409a      	lsls	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80080ec:	bf00      	nop
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	58025408 	.word	0x58025408
 80080fc:	5802541c 	.word	0x5802541c
 8008100:	58025430 	.word	0x58025430
 8008104:	58025444 	.word	0x58025444
 8008108:	58025458 	.word	0x58025458
 800810c:	5802546c 	.word	0x5802546c
 8008110:	58025480 	.word	0x58025480
 8008114:	58025494 	.word	0x58025494
 8008118:	1600963f 	.word	0x1600963f
 800811c:	58025940 	.word	0x58025940
 8008120:	1000823f 	.word	0x1000823f
 8008124:	40020940 	.word	0x40020940

08008128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008128:	b480      	push	{r7}
 800812a:	b089      	sub	sp, #36	; 0x24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008132:	2300      	movs	r3, #0
 8008134:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008136:	4b89      	ldr	r3, [pc, #548]	; (800835c <HAL_GPIO_Init+0x234>)
 8008138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800813a:	e194      	b.n	8008466 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	2101      	movs	r1, #1
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	fa01 f303 	lsl.w	r3, r1, r3
 8008148:	4013      	ands	r3, r2
 800814a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 8186 	beq.w	8008460 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f003 0303 	and.w	r3, r3, #3
 800815c:	2b01      	cmp	r3, #1
 800815e:	d005      	beq.n	800816c <HAL_GPIO_Init+0x44>
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f003 0303 	and.w	r3, r3, #3
 8008168:	2b02      	cmp	r3, #2
 800816a:	d130      	bne.n	80081ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	2203      	movs	r2, #3
 8008178:	fa02 f303 	lsl.w	r3, r2, r3
 800817c:	43db      	mvns	r3, r3
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	4013      	ands	r3, r2
 8008182:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	fa02 f303 	lsl.w	r3, r2, r3
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	4313      	orrs	r3, r2
 8008194:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081a2:	2201      	movs	r2, #1
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	fa02 f303 	lsl.w	r3, r2, r3
 80081aa:	43db      	mvns	r3, r3
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	4013      	ands	r3, r2
 80081b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	091b      	lsrs	r3, r3, #4
 80081b8:	f003 0201 	and.w	r2, r3, #1
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	fa02 f303 	lsl.w	r3, r2, r3
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f003 0303 	and.w	r3, r3, #3
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d017      	beq.n	800820a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	2203      	movs	r2, #3
 80081e6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ea:	43db      	mvns	r3, r3
 80081ec:	69ba      	ldr	r2, [r7, #24]
 80081ee:	4013      	ands	r3, r2
 80081f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	fa02 f303 	lsl.w	r3, r2, r3
 80081fe:	69ba      	ldr	r2, [r7, #24]
 8008200:	4313      	orrs	r3, r2
 8008202:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	2b02      	cmp	r3, #2
 8008214:	d123      	bne.n	800825e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	08da      	lsrs	r2, r3, #3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	3208      	adds	r2, #8
 800821e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	f003 0307 	and.w	r3, r3, #7
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	220f      	movs	r2, #15
 800822e:	fa02 f303 	lsl.w	r3, r2, r3
 8008232:	43db      	mvns	r3, r3
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	4013      	ands	r3, r2
 8008238:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	691a      	ldr	r2, [r3, #16]
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	f003 0307 	and.w	r3, r3, #7
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	fa02 f303 	lsl.w	r3, r2, r3
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	4313      	orrs	r3, r2
 800824e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	08da      	lsrs	r2, r3, #3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3208      	adds	r2, #8
 8008258:	69b9      	ldr	r1, [r7, #24]
 800825a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	005b      	lsls	r3, r3, #1
 8008268:	2203      	movs	r2, #3
 800826a:	fa02 f303 	lsl.w	r3, r2, r3
 800826e:	43db      	mvns	r3, r3
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	4013      	ands	r3, r2
 8008274:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f003 0203 	and.w	r2, r3, #3
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	fa02 f303 	lsl.w	r3, r2, r3
 8008286:	69ba      	ldr	r2, [r7, #24]
 8008288:	4313      	orrs	r3, r2
 800828a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 80e0 	beq.w	8008460 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082a0:	4b2f      	ldr	r3, [pc, #188]	; (8008360 <HAL_GPIO_Init+0x238>)
 80082a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082a6:	4a2e      	ldr	r2, [pc, #184]	; (8008360 <HAL_GPIO_Init+0x238>)
 80082a8:	f043 0302 	orr.w	r3, r3, #2
 80082ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80082b0:	4b2b      	ldr	r3, [pc, #172]	; (8008360 <HAL_GPIO_Init+0x238>)
 80082b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80082be:	4a29      	ldr	r2, [pc, #164]	; (8008364 <HAL_GPIO_Init+0x23c>)
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	089b      	lsrs	r3, r3, #2
 80082c4:	3302      	adds	r3, #2
 80082c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	f003 0303 	and.w	r3, r3, #3
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	220f      	movs	r2, #15
 80082d6:	fa02 f303 	lsl.w	r3, r2, r3
 80082da:	43db      	mvns	r3, r3
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	4013      	ands	r3, r2
 80082e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a20      	ldr	r2, [pc, #128]	; (8008368 <HAL_GPIO_Init+0x240>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d052      	beq.n	8008390 <HAL_GPIO_Init+0x268>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a1f      	ldr	r2, [pc, #124]	; (800836c <HAL_GPIO_Init+0x244>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d031      	beq.n	8008356 <HAL_GPIO_Init+0x22e>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a1e      	ldr	r2, [pc, #120]	; (8008370 <HAL_GPIO_Init+0x248>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d02b      	beq.n	8008352 <HAL_GPIO_Init+0x22a>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a1d      	ldr	r2, [pc, #116]	; (8008374 <HAL_GPIO_Init+0x24c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d025      	beq.n	800834e <HAL_GPIO_Init+0x226>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a1c      	ldr	r2, [pc, #112]	; (8008378 <HAL_GPIO_Init+0x250>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d01f      	beq.n	800834a <HAL_GPIO_Init+0x222>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a1b      	ldr	r2, [pc, #108]	; (800837c <HAL_GPIO_Init+0x254>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d019      	beq.n	8008346 <HAL_GPIO_Init+0x21e>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a1a      	ldr	r2, [pc, #104]	; (8008380 <HAL_GPIO_Init+0x258>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d013      	beq.n	8008342 <HAL_GPIO_Init+0x21a>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a19      	ldr	r2, [pc, #100]	; (8008384 <HAL_GPIO_Init+0x25c>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d00d      	beq.n	800833e <HAL_GPIO_Init+0x216>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a18      	ldr	r2, [pc, #96]	; (8008388 <HAL_GPIO_Init+0x260>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d007      	beq.n	800833a <HAL_GPIO_Init+0x212>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a17      	ldr	r2, [pc, #92]	; (800838c <HAL_GPIO_Init+0x264>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d101      	bne.n	8008336 <HAL_GPIO_Init+0x20e>
 8008332:	2309      	movs	r3, #9
 8008334:	e02d      	b.n	8008392 <HAL_GPIO_Init+0x26a>
 8008336:	230a      	movs	r3, #10
 8008338:	e02b      	b.n	8008392 <HAL_GPIO_Init+0x26a>
 800833a:	2308      	movs	r3, #8
 800833c:	e029      	b.n	8008392 <HAL_GPIO_Init+0x26a>
 800833e:	2307      	movs	r3, #7
 8008340:	e027      	b.n	8008392 <HAL_GPIO_Init+0x26a>
 8008342:	2306      	movs	r3, #6
 8008344:	e025      	b.n	8008392 <HAL_GPIO_Init+0x26a>
 8008346:	2305      	movs	r3, #5
 8008348:	e023      	b.n	8008392 <HAL_GPIO_Init+0x26a>
 800834a:	2304      	movs	r3, #4
 800834c:	e021      	b.n	8008392 <HAL_GPIO_Init+0x26a>
 800834e:	2303      	movs	r3, #3
 8008350:	e01f      	b.n	8008392 <HAL_GPIO_Init+0x26a>
 8008352:	2302      	movs	r3, #2
 8008354:	e01d      	b.n	8008392 <HAL_GPIO_Init+0x26a>
 8008356:	2301      	movs	r3, #1
 8008358:	e01b      	b.n	8008392 <HAL_GPIO_Init+0x26a>
 800835a:	bf00      	nop
 800835c:	58000080 	.word	0x58000080
 8008360:	58024400 	.word	0x58024400
 8008364:	58000400 	.word	0x58000400
 8008368:	58020000 	.word	0x58020000
 800836c:	58020400 	.word	0x58020400
 8008370:	58020800 	.word	0x58020800
 8008374:	58020c00 	.word	0x58020c00
 8008378:	58021000 	.word	0x58021000
 800837c:	58021400 	.word	0x58021400
 8008380:	58021800 	.word	0x58021800
 8008384:	58021c00 	.word	0x58021c00
 8008388:	58022000 	.word	0x58022000
 800838c:	58022400 	.word	0x58022400
 8008390:	2300      	movs	r3, #0
 8008392:	69fa      	ldr	r2, [r7, #28]
 8008394:	f002 0203 	and.w	r2, r2, #3
 8008398:	0092      	lsls	r2, r2, #2
 800839a:	4093      	lsls	r3, r2
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	4313      	orrs	r3, r2
 80083a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083a2:	4938      	ldr	r1, [pc, #224]	; (8008484 <HAL_GPIO_Init+0x35c>)
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	089b      	lsrs	r3, r3, #2
 80083a8:	3302      	adds	r3, #2
 80083aa:	69ba      	ldr	r2, [r7, #24]
 80083ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	43db      	mvns	r3, r3
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	4013      	ands	r3, r2
 80083c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80083d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80083de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	43db      	mvns	r3, r3
 80083ea:	69ba      	ldr	r2, [r7, #24]
 80083ec:	4013      	ands	r3, r2
 80083ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	4313      	orrs	r3, r2
 8008402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	43db      	mvns	r3, r3
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	4013      	ands	r3, r2
 800841a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	4313      	orrs	r3, r2
 800842e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	43db      	mvns	r3, r3
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	4013      	ands	r3, r2
 8008444:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d003      	beq.n	800845a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008452:	69ba      	ldr	r2, [r7, #24]
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	4313      	orrs	r3, r2
 8008458:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	3301      	adds	r3, #1
 8008464:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	fa22 f303 	lsr.w	r3, r2, r3
 8008470:	2b00      	cmp	r3, #0
 8008472:	f47f ae63 	bne.w	800813c <HAL_GPIO_Init+0x14>
  }
}
 8008476:	bf00      	nop
 8008478:	bf00      	nop
 800847a:	3724      	adds	r7, #36	; 0x24
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	58000400 	.word	0x58000400

08008488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	460b      	mov	r3, r1
 8008492:	807b      	strh	r3, [r7, #2]
 8008494:	4613      	mov	r3, r2
 8008496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008498:	787b      	ldrb	r3, [r7, #1]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800849e:	887a      	ldrh	r2, [r7, #2]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80084a4:	e003      	b.n	80084ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80084a6:	887b      	ldrh	r3, [r7, #2]
 80084a8:	041a      	lsls	r2, r3, #16
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	619a      	str	r2, [r3, #24]
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
	...

080084bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e08b      	b.n	80085e6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d106      	bne.n	80084e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7f8 fe44 	bl	8001170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2224      	movs	r2, #36	; 0x24
 80084ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0201 	bic.w	r2, r2, #1
 80084fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800850c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800851c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d107      	bne.n	8008536 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	689a      	ldr	r2, [r3, #8]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008532:	609a      	str	r2, [r3, #8]
 8008534:	e006      	b.n	8008544 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	689a      	ldr	r2, [r3, #8]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008542:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	2b02      	cmp	r3, #2
 800854a:	d108      	bne.n	800855e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800855a:	605a      	str	r2, [r3, #4]
 800855c:	e007      	b.n	800856e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800856c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	6859      	ldr	r1, [r3, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	4b1d      	ldr	r3, [pc, #116]	; (80085f0 <HAL_I2C_Init+0x134>)
 800857a:	430b      	orrs	r3, r1
 800857c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68da      	ldr	r2, [r3, #12]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800858c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	691a      	ldr	r2, [r3, #16]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	430a      	orrs	r2, r1
 80085a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	69d9      	ldr	r1, [r3, #28]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a1a      	ldr	r2, [r3, #32]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0201 	orr.w	r2, r2, #1
 80085c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	02008000 	.word	0x02008000

080085f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b20      	cmp	r3, #32
 8008608:	d138      	bne.n	800867c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008610:	2b01      	cmp	r3, #1
 8008612:	d101      	bne.n	8008618 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008614:	2302      	movs	r3, #2
 8008616:	e032      	b.n	800867e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2224      	movs	r2, #36	; 0x24
 8008624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f022 0201 	bic.w	r2, r2, #1
 8008636:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008646:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6819      	ldr	r1, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	430a      	orrs	r2, r1
 8008656:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0201 	orr.w	r2, r2, #1
 8008666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2220      	movs	r2, #32
 800866c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	e000      	b.n	800867e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800867c:	2302      	movs	r3, #2
  }
}
 800867e:	4618      	mov	r0, r3
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800868a:	b480      	push	{r7}
 800868c:	b085      	sub	sp, #20
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b20      	cmp	r3, #32
 800869e:	d139      	bne.n	8008714 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d101      	bne.n	80086ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80086aa:	2302      	movs	r3, #2
 80086ac:	e033      	b.n	8008716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2224      	movs	r2, #36	; 0x24
 80086ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 0201 	bic.w	r2, r2, #1
 80086cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80086dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	021b      	lsls	r3, r3, #8
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f042 0201 	orr.w	r2, r2, #1
 80086fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	e000      	b.n	8008716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008714:	2302      	movs	r3, #2
  }
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
	...

08008724 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800872c:	4b0d      	ldr	r3, [pc, #52]	; (8008764 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800872e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008732:	4a0c      	ldr	r2, [pc, #48]	; (8008764 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008734:	f043 0302 	orr.w	r3, r3, #2
 8008738:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800873c:	4b09      	ldr	r3, [pc, #36]	; (8008764 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800873e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800874a:	4b07      	ldr	r3, [pc, #28]	; (8008768 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	4906      	ldr	r1, [pc, #24]	; (8008768 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4313      	orrs	r3, r2
 8008754:	604b      	str	r3, [r1, #4]
}
 8008756:	bf00      	nop
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	58024400 	.word	0x58024400
 8008768:	58000400 	.word	0x58000400

0800876c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008774:	4b19      	ldr	r3, [pc, #100]	; (80087dc <HAL_PWREx_ConfigSupply+0x70>)
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b04      	cmp	r3, #4
 800877e:	d00a      	beq.n	8008796 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008780:	4b16      	ldr	r3, [pc, #88]	; (80087dc <HAL_PWREx_ConfigSupply+0x70>)
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	f003 0307 	and.w	r3, r3, #7
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	429a      	cmp	r2, r3
 800878c:	d001      	beq.n	8008792 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e01f      	b.n	80087d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	e01d      	b.n	80087d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008796:	4b11      	ldr	r3, [pc, #68]	; (80087dc <HAL_PWREx_ConfigSupply+0x70>)
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f023 0207 	bic.w	r2, r3, #7
 800879e:	490f      	ldr	r1, [pc, #60]	; (80087dc <HAL_PWREx_ConfigSupply+0x70>)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80087a6:	f7fa fd4f 	bl	8003248 <HAL_GetTick>
 80087aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087ac:	e009      	b.n	80087c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80087ae:	f7fa fd4b 	bl	8003248 <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087bc:	d901      	bls.n	80087c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e007      	b.n	80087d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087c2:	4b06      	ldr	r3, [pc, #24]	; (80087dc <HAL_PWREx_ConfigSupply+0x70>)
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087ce:	d1ee      	bne.n	80087ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	58024800 	.word	0x58024800

080087e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08c      	sub	sp, #48	; 0x30
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d102      	bne.n	80087f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	f000 bc48 	b.w	8009084 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 8088 	beq.w	8008912 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008802:	4b99      	ldr	r3, [pc, #612]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800880a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800880c:	4b96      	ldr	r3, [pc, #600]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	2b10      	cmp	r3, #16
 8008816:	d007      	beq.n	8008828 <HAL_RCC_OscConfig+0x48>
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	2b18      	cmp	r3, #24
 800881c:	d111      	bne.n	8008842 <HAL_RCC_OscConfig+0x62>
 800881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008820:	f003 0303 	and.w	r3, r3, #3
 8008824:	2b02      	cmp	r3, #2
 8008826:	d10c      	bne.n	8008842 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008828:	4b8f      	ldr	r3, [pc, #572]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d06d      	beq.n	8008910 <HAL_RCC_OscConfig+0x130>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d169      	bne.n	8008910 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	f000 bc21 	b.w	8009084 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800884a:	d106      	bne.n	800885a <HAL_RCC_OscConfig+0x7a>
 800884c:	4b86      	ldr	r3, [pc, #536]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a85      	ldr	r2, [pc, #532]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	e02e      	b.n	80088b8 <HAL_RCC_OscConfig+0xd8>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10c      	bne.n	800887c <HAL_RCC_OscConfig+0x9c>
 8008862:	4b81      	ldr	r3, [pc, #516]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a80      	ldr	r2, [pc, #512]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	4b7e      	ldr	r3, [pc, #504]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a7d      	ldr	r2, [pc, #500]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	e01d      	b.n	80088b8 <HAL_RCC_OscConfig+0xd8>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008884:	d10c      	bne.n	80088a0 <HAL_RCC_OscConfig+0xc0>
 8008886:	4b78      	ldr	r3, [pc, #480]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a77      	ldr	r2, [pc, #476]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800888c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008890:	6013      	str	r3, [r2, #0]
 8008892:	4b75      	ldr	r3, [pc, #468]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a74      	ldr	r2, [pc, #464]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800889c:	6013      	str	r3, [r2, #0]
 800889e:	e00b      	b.n	80088b8 <HAL_RCC_OscConfig+0xd8>
 80088a0:	4b71      	ldr	r3, [pc, #452]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a70      	ldr	r2, [pc, #448]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80088a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088aa:	6013      	str	r3, [r2, #0]
 80088ac:	4b6e      	ldr	r3, [pc, #440]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a6d      	ldr	r2, [pc, #436]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80088b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d013      	beq.n	80088e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088c0:	f7fa fcc2 	bl	8003248 <HAL_GetTick>
 80088c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088c6:	e008      	b.n	80088da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088c8:	f7fa fcbe 	bl	8003248 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b64      	cmp	r3, #100	; 0x64
 80088d4:	d901      	bls.n	80088da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e3d4      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088da:	4b63      	ldr	r3, [pc, #396]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0f0      	beq.n	80088c8 <HAL_RCC_OscConfig+0xe8>
 80088e6:	e014      	b.n	8008912 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e8:	f7fa fcae 	bl	8003248 <HAL_GetTick>
 80088ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80088ee:	e008      	b.n	8008902 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088f0:	f7fa fcaa 	bl	8003248 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b64      	cmp	r3, #100	; 0x64
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e3c0      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008902:	4b59      	ldr	r3, [pc, #356]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f0      	bne.n	80088f0 <HAL_RCC_OscConfig+0x110>
 800890e:	e000      	b.n	8008912 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 80ca 	beq.w	8008ab4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008920:	4b51      	ldr	r3, [pc, #324]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008928:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800892a:	4b4f      	ldr	r3, [pc, #316]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d007      	beq.n	8008946 <HAL_RCC_OscConfig+0x166>
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	2b18      	cmp	r3, #24
 800893a:	d156      	bne.n	80089ea <HAL_RCC_OscConfig+0x20a>
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	f003 0303 	and.w	r3, r3, #3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d151      	bne.n	80089ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008946:	4b48      	ldr	r3, [pc, #288]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0304 	and.w	r3, r3, #4
 800894e:	2b00      	cmp	r3, #0
 8008950:	d005      	beq.n	800895e <HAL_RCC_OscConfig+0x17e>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e392      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800895e:	4b42      	ldr	r3, [pc, #264]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f023 0219 	bic.w	r2, r3, #25
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	493f      	ldr	r1, [pc, #252]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800896c:	4313      	orrs	r3, r2
 800896e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008970:	f7fa fc6a 	bl	8003248 <HAL_GetTick>
 8008974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008976:	e008      	b.n	800898a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008978:	f7fa fc66 	bl	8003248 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	2b02      	cmp	r3, #2
 8008984:	d901      	bls.n	800898a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e37c      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800898a:	4b37      	ldr	r3, [pc, #220]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0f0      	beq.n	8008978 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008996:	f7fa fc63 	bl	8003260 <HAL_GetREVID>
 800899a:	4603      	mov	r3, r0
 800899c:	f241 0203 	movw	r2, #4099	; 0x1003
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d817      	bhi.n	80089d4 <HAL_RCC_OscConfig+0x1f4>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	2b40      	cmp	r3, #64	; 0x40
 80089aa:	d108      	bne.n	80089be <HAL_RCC_OscConfig+0x1de>
 80089ac:	4b2e      	ldr	r3, [pc, #184]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80089b4:	4a2c      	ldr	r2, [pc, #176]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089bc:	e07a      	b.n	8008ab4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089be:	4b2a      	ldr	r3, [pc, #168]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	031b      	lsls	r3, r3, #12
 80089cc:	4926      	ldr	r1, [pc, #152]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089d2:	e06f      	b.n	8008ab4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089d4:	4b24      	ldr	r3, [pc, #144]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	061b      	lsls	r3, r3, #24
 80089e2:	4921      	ldr	r1, [pc, #132]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089e4:	4313      	orrs	r3, r2
 80089e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089e8:	e064      	b.n	8008ab4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d047      	beq.n	8008a82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80089f2:	4b1d      	ldr	r3, [pc, #116]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f023 0219 	bic.w	r2, r3, #25
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	491a      	ldr	r1, [pc, #104]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a04:	f7fa fc20 	bl	8003248 <HAL_GetTick>
 8008a08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a0a:	e008      	b.n	8008a1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a0c:	f7fa fc1c 	bl	8003248 <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d901      	bls.n	8008a1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e332      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a1e:	4b12      	ldr	r3, [pc, #72]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0304 	and.w	r3, r3, #4
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d0f0      	beq.n	8008a0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a2a:	f7fa fc19 	bl	8003260 <HAL_GetREVID>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d819      	bhi.n	8008a6c <HAL_RCC_OscConfig+0x28c>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	2b40      	cmp	r3, #64	; 0x40
 8008a3e:	d108      	bne.n	8008a52 <HAL_RCC_OscConfig+0x272>
 8008a40:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008a48:	4a07      	ldr	r2, [pc, #28]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a4e:	6053      	str	r3, [r2, #4]
 8008a50:	e030      	b.n	8008ab4 <HAL_RCC_OscConfig+0x2d4>
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	031b      	lsls	r3, r3, #12
 8008a60:	4901      	ldr	r1, [pc, #4]	; (8008a68 <HAL_RCC_OscConfig+0x288>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	604b      	str	r3, [r1, #4]
 8008a66:	e025      	b.n	8008ab4 <HAL_RCC_OscConfig+0x2d4>
 8008a68:	58024400 	.word	0x58024400
 8008a6c:	4b9a      	ldr	r3, [pc, #616]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	061b      	lsls	r3, r3, #24
 8008a7a:	4997      	ldr	r1, [pc, #604]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	604b      	str	r3, [r1, #4]
 8008a80:	e018      	b.n	8008ab4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a82:	4b95      	ldr	r3, [pc, #596]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a94      	ldr	r2, [pc, #592]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a8e:	f7fa fbdb 	bl	8003248 <HAL_GetTick>
 8008a92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a94:	e008      	b.n	8008aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a96:	f7fa fbd7 	bl	8003248 <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d901      	bls.n	8008aa8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e2ed      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008aa8:	4b8b      	ldr	r3, [pc, #556]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0304 	and.w	r3, r3, #4
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1f0      	bne.n	8008a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 0310 	and.w	r3, r3, #16
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 80a9 	beq.w	8008c14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ac2:	4b85      	ldr	r3, [pc, #532]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008aca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008acc:	4b82      	ldr	r3, [pc, #520]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	2b08      	cmp	r3, #8
 8008ad6:	d007      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x308>
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	2b18      	cmp	r3, #24
 8008adc:	d13a      	bne.n	8008b54 <HAL_RCC_OscConfig+0x374>
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f003 0303 	and.w	r3, r3, #3
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d135      	bne.n	8008b54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ae8:	4b7b      	ldr	r3, [pc, #492]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d005      	beq.n	8008b00 <HAL_RCC_OscConfig+0x320>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	2b80      	cmp	r3, #128	; 0x80
 8008afa:	d001      	beq.n	8008b00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e2c1      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b00:	f7fa fbae 	bl	8003260 <HAL_GetREVID>
 8008b04:	4603      	mov	r3, r0
 8008b06:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d817      	bhi.n	8008b3e <HAL_RCC_OscConfig+0x35e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	2b20      	cmp	r3, #32
 8008b14:	d108      	bne.n	8008b28 <HAL_RCC_OscConfig+0x348>
 8008b16:	4b70      	ldr	r3, [pc, #448]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b1e:	4a6e      	ldr	r2, [pc, #440]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b26:	e075      	b.n	8008c14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b28:	4b6b      	ldr	r3, [pc, #428]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	069b      	lsls	r3, r3, #26
 8008b36:	4968      	ldr	r1, [pc, #416]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b3c:	e06a      	b.n	8008c14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b3e:	4b66      	ldr	r3, [pc, #408]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	061b      	lsls	r3, r3, #24
 8008b4c:	4962      	ldr	r1, [pc, #392]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b52:	e05f      	b.n	8008c14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d042      	beq.n	8008be2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008b5c:	4b5e      	ldr	r3, [pc, #376]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a5d      	ldr	r2, [pc, #372]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b68:	f7fa fb6e 	bl	8003248 <HAL_GetTick>
 8008b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b6e:	e008      	b.n	8008b82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008b70:	f7fa fb6a 	bl	8003248 <HAL_GetTick>
 8008b74:	4602      	mov	r2, r0
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d901      	bls.n	8008b82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	e280      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b82:	4b55      	ldr	r3, [pc, #340]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d0f0      	beq.n	8008b70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b8e:	f7fa fb67 	bl	8003260 <HAL_GetREVID>
 8008b92:	4603      	mov	r3, r0
 8008b94:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d817      	bhi.n	8008bcc <HAL_RCC_OscConfig+0x3ec>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	d108      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x3d6>
 8008ba4:	4b4c      	ldr	r3, [pc, #304]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008bac:	4a4a      	ldr	r2, [pc, #296]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bb2:	6053      	str	r3, [r2, #4]
 8008bb4:	e02e      	b.n	8008c14 <HAL_RCC_OscConfig+0x434>
 8008bb6:	4b48      	ldr	r3, [pc, #288]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	069b      	lsls	r3, r3, #26
 8008bc4:	4944      	ldr	r1, [pc, #272]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	604b      	str	r3, [r1, #4]
 8008bca:	e023      	b.n	8008c14 <HAL_RCC_OscConfig+0x434>
 8008bcc:	4b42      	ldr	r3, [pc, #264]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	061b      	lsls	r3, r3, #24
 8008bda:	493f      	ldr	r1, [pc, #252]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	60cb      	str	r3, [r1, #12]
 8008be0:	e018      	b.n	8008c14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008be2:	4b3d      	ldr	r3, [pc, #244]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a3c      	ldr	r2, [pc, #240]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bee:	f7fa fb2b 	bl	8003248 <HAL_GetTick>
 8008bf2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008bf4:	e008      	b.n	8008c08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008bf6:	f7fa fb27 	bl	8003248 <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d901      	bls.n	8008c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e23d      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c08:	4b33      	ldr	r3, [pc, #204]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1f0      	bne.n	8008bf6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0308 	and.w	r3, r3, #8
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d036      	beq.n	8008c8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d019      	beq.n	8008c5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c28:	4b2b      	ldr	r3, [pc, #172]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c2c:	4a2a      	ldr	r2, [pc, #168]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c2e:	f043 0301 	orr.w	r3, r3, #1
 8008c32:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c34:	f7fa fb08 	bl	8003248 <HAL_GetTick>
 8008c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c3a:	e008      	b.n	8008c4e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c3c:	f7fa fb04 	bl	8003248 <HAL_GetTick>
 8008c40:	4602      	mov	r2, r0
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d901      	bls.n	8008c4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e21a      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c4e:	4b22      	ldr	r3, [pc, #136]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0f0      	beq.n	8008c3c <HAL_RCC_OscConfig+0x45c>
 8008c5a:	e018      	b.n	8008c8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c5c:	4b1e      	ldr	r3, [pc, #120]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c60:	4a1d      	ldr	r2, [pc, #116]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c62:	f023 0301 	bic.w	r3, r3, #1
 8008c66:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c68:	f7fa faee 	bl	8003248 <HAL_GetTick>
 8008c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c6e:	e008      	b.n	8008c82 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c70:	f7fa faea 	bl	8003248 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d901      	bls.n	8008c82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e200      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c86:	f003 0302 	and.w	r3, r3, #2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f0      	bne.n	8008c70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d039      	beq.n	8008d0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01c      	beq.n	8008cdc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ca2:	4b0d      	ldr	r3, [pc, #52]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a0c      	ldr	r2, [pc, #48]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008cac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008cae:	f7fa facb 	bl	8003248 <HAL_GetTick>
 8008cb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008cb4:	e008      	b.n	8008cc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cb6:	f7fa fac7 	bl	8003248 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d901      	bls.n	8008cc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e1dd      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008cc8:	4b03      	ldr	r3, [pc, #12]	; (8008cd8 <HAL_RCC_OscConfig+0x4f8>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0f0      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x4d6>
 8008cd4:	e01b      	b.n	8008d0e <HAL_RCC_OscConfig+0x52e>
 8008cd6:	bf00      	nop
 8008cd8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008cdc:	4b9b      	ldr	r3, [pc, #620]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a9a      	ldr	r2, [pc, #616]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ce6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ce8:	f7fa faae 	bl	8003248 <HAL_GetTick>
 8008cec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008cee:	e008      	b.n	8008d02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cf0:	f7fa faaa 	bl	8003248 <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d901      	bls.n	8008d02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e1c0      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d02:	4b92      	ldr	r3, [pc, #584]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1f0      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0304 	and.w	r3, r3, #4
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 8081 	beq.w	8008e1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d1c:	4b8c      	ldr	r3, [pc, #560]	; (8008f50 <HAL_RCC_OscConfig+0x770>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a8b      	ldr	r2, [pc, #556]	; (8008f50 <HAL_RCC_OscConfig+0x770>)
 8008d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d28:	f7fa fa8e 	bl	8003248 <HAL_GetTick>
 8008d2c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d2e:	e008      	b.n	8008d42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d30:	f7fa fa8a 	bl	8003248 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b64      	cmp	r3, #100	; 0x64
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e1a0      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d42:	4b83      	ldr	r3, [pc, #524]	; (8008f50 <HAL_RCC_OscConfig+0x770>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0f0      	beq.n	8008d30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d106      	bne.n	8008d64 <HAL_RCC_OscConfig+0x584>
 8008d56:	4b7d      	ldr	r3, [pc, #500]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5a:	4a7c      	ldr	r2, [pc, #496]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d5c:	f043 0301 	orr.w	r3, r3, #1
 8008d60:	6713      	str	r3, [r2, #112]	; 0x70
 8008d62:	e02d      	b.n	8008dc0 <HAL_RCC_OscConfig+0x5e0>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10c      	bne.n	8008d86 <HAL_RCC_OscConfig+0x5a6>
 8008d6c:	4b77      	ldr	r3, [pc, #476]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d70:	4a76      	ldr	r2, [pc, #472]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d72:	f023 0301 	bic.w	r3, r3, #1
 8008d76:	6713      	str	r3, [r2, #112]	; 0x70
 8008d78:	4b74      	ldr	r3, [pc, #464]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7c:	4a73      	ldr	r2, [pc, #460]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d7e:	f023 0304 	bic.w	r3, r3, #4
 8008d82:	6713      	str	r3, [r2, #112]	; 0x70
 8008d84:	e01c      	b.n	8008dc0 <HAL_RCC_OscConfig+0x5e0>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	2b05      	cmp	r3, #5
 8008d8c:	d10c      	bne.n	8008da8 <HAL_RCC_OscConfig+0x5c8>
 8008d8e:	4b6f      	ldr	r3, [pc, #444]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d92:	4a6e      	ldr	r2, [pc, #440]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d94:	f043 0304 	orr.w	r3, r3, #4
 8008d98:	6713      	str	r3, [r2, #112]	; 0x70
 8008d9a:	4b6c      	ldr	r3, [pc, #432]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9e:	4a6b      	ldr	r2, [pc, #428]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008da0:	f043 0301 	orr.w	r3, r3, #1
 8008da4:	6713      	str	r3, [r2, #112]	; 0x70
 8008da6:	e00b      	b.n	8008dc0 <HAL_RCC_OscConfig+0x5e0>
 8008da8:	4b68      	ldr	r3, [pc, #416]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dac:	4a67      	ldr	r2, [pc, #412]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008dae:	f023 0301 	bic.w	r3, r3, #1
 8008db2:	6713      	str	r3, [r2, #112]	; 0x70
 8008db4:	4b65      	ldr	r3, [pc, #404]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db8:	4a64      	ldr	r2, [pc, #400]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008dba:	f023 0304 	bic.w	r3, r3, #4
 8008dbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d015      	beq.n	8008df4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dc8:	f7fa fa3e 	bl	8003248 <HAL_GetTick>
 8008dcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dce:	e00a      	b.n	8008de6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dd0:	f7fa fa3a 	bl	8003248 <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d901      	bls.n	8008de6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e14e      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008de6:	4b59      	ldr	r3, [pc, #356]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0ee      	beq.n	8008dd0 <HAL_RCC_OscConfig+0x5f0>
 8008df2:	e014      	b.n	8008e1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df4:	f7fa fa28 	bl	8003248 <HAL_GetTick>
 8008df8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008dfa:	e00a      	b.n	8008e12 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dfc:	f7fa fa24 	bl	8003248 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d901      	bls.n	8008e12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e138      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e12:	4b4e      	ldr	r3, [pc, #312]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1ee      	bne.n	8008dfc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 812d 	beq.w	8009082 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008e28:	4b48      	ldr	r3, [pc, #288]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e30:	2b18      	cmp	r3, #24
 8008e32:	f000 80bd 	beq.w	8008fb0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	f040 809e 	bne.w	8008f7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e40:	4b42      	ldr	r3, [pc, #264]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a41      	ldr	r2, [pc, #260]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e4c:	f7fa f9fc 	bl	8003248 <HAL_GetTick>
 8008e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e52:	e008      	b.n	8008e66 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e54:	f7fa f9f8 	bl	8003248 <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d901      	bls.n	8008e66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e10e      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e66:	4b39      	ldr	r3, [pc, #228]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1f0      	bne.n	8008e54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e72:	4b36      	ldr	r3, [pc, #216]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e76:	4b37      	ldr	r3, [pc, #220]	; (8008f54 <HAL_RCC_OscConfig+0x774>)
 8008e78:	4013      	ands	r3, r2
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008e82:	0112      	lsls	r2, r2, #4
 8008e84:	430a      	orrs	r2, r1
 8008e86:	4931      	ldr	r1, [pc, #196]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	628b      	str	r3, [r1, #40]	; 0x28
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e90:	3b01      	subs	r3, #1
 8008e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	025b      	lsls	r3, r3, #9
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	041b      	lsls	r3, r3, #16
 8008eaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	061b      	lsls	r3, r3, #24
 8008eb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ebc:	4923      	ldr	r1, [pc, #140]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008ec2:	4b22      	ldr	r3, [pc, #136]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec6:	4a21      	ldr	r2, [pc, #132]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ec8:	f023 0301 	bic.w	r3, r3, #1
 8008ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ece:	4b1f      	ldr	r3, [pc, #124]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ed2:	4b21      	ldr	r3, [pc, #132]	; (8008f58 <HAL_RCC_OscConfig+0x778>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008eda:	00d2      	lsls	r2, r2, #3
 8008edc:	491b      	ldr	r1, [pc, #108]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ee2:	4b1a      	ldr	r3, [pc, #104]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee6:	f023 020c 	bic.w	r2, r3, #12
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	4917      	ldr	r1, [pc, #92]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008ef4:	4b15      	ldr	r3, [pc, #84]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef8:	f023 0202 	bic.w	r2, r3, #2
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f00:	4912      	ldr	r1, [pc, #72]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f06:	4b11      	ldr	r3, [pc, #68]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0a:	4a10      	ldr	r2, [pc, #64]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f12:	4b0e      	ldr	r3, [pc, #56]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f16:	4a0d      	ldr	r2, [pc, #52]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f1e:	4b0b      	ldr	r3, [pc, #44]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f22:	4a0a      	ldr	r2, [pc, #40]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008f2a:	4b08      	ldr	r3, [pc, #32]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2e:	4a07      	ldr	r2, [pc, #28]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f30:	f043 0301 	orr.w	r3, r3, #1
 8008f34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a04      	ldr	r2, [pc, #16]	; (8008f4c <HAL_RCC_OscConfig+0x76c>)
 8008f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f42:	f7fa f981 	bl	8003248 <HAL_GetTick>
 8008f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f48:	e011      	b.n	8008f6e <HAL_RCC_OscConfig+0x78e>
 8008f4a:	bf00      	nop
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	58024800 	.word	0x58024800
 8008f54:	fffffc0c 	.word	0xfffffc0c
 8008f58:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f5c:	f7fa f974 	bl	8003248 <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d901      	bls.n	8008f6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e08a      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f6e:	4b47      	ldr	r3, [pc, #284]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0f0      	beq.n	8008f5c <HAL_RCC_OscConfig+0x77c>
 8008f7a:	e082      	b.n	8009082 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f7c:	4b43      	ldr	r3, [pc, #268]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a42      	ldr	r2, [pc, #264]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8008f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f88:	f7fa f95e 	bl	8003248 <HAL_GetTick>
 8008f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008f8e:	e008      	b.n	8008fa2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f90:	f7fa f95a 	bl	8003248 <HAL_GetTick>
 8008f94:	4602      	mov	r2, r0
 8008f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d901      	bls.n	8008fa2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e070      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fa2:	4b3a      	ldr	r3, [pc, #232]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1f0      	bne.n	8008f90 <HAL_RCC_OscConfig+0x7b0>
 8008fae:	e068      	b.n	8009082 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008fb0:	4b36      	ldr	r3, [pc, #216]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008fb6:	4b35      	ldr	r3, [pc, #212]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8008fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d031      	beq.n	8009028 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f003 0203 	and.w	r2, r3, #3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d12a      	bne.n	8009028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	091b      	lsrs	r3, r3, #4
 8008fd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d122      	bne.n	8009028 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d11a      	bne.n	8009028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	0a5b      	lsrs	r3, r3, #9
 8008ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ffe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009000:	429a      	cmp	r2, r3
 8009002:	d111      	bne.n	8009028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	0c1b      	lsrs	r3, r3, #16
 8009008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009012:	429a      	cmp	r2, r3
 8009014:	d108      	bne.n	8009028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	0e1b      	lsrs	r3, r3, #24
 800901a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009022:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009024:	429a      	cmp	r2, r3
 8009026:	d001      	beq.n	800902c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e02b      	b.n	8009084 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800902c:	4b17      	ldr	r3, [pc, #92]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 800902e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009030:	08db      	lsrs	r3, r3, #3
 8009032:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009036:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	429a      	cmp	r2, r3
 8009040:	d01f      	beq.n	8009082 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009042:	4b12      	ldr	r3, [pc, #72]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8009044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009046:	4a11      	ldr	r2, [pc, #68]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8009048:	f023 0301 	bic.w	r3, r3, #1
 800904c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800904e:	f7fa f8fb 	bl	8003248 <HAL_GetTick>
 8009052:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009054:	bf00      	nop
 8009056:	f7fa f8f7 	bl	8003248 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	4293      	cmp	r3, r2
 8009060:	d0f9      	beq.n	8009056 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009062:	4b0a      	ldr	r3, [pc, #40]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8009064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009066:	4b0a      	ldr	r3, [pc, #40]	; (8009090 <HAL_RCC_OscConfig+0x8b0>)
 8009068:	4013      	ands	r3, r2
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800906e:	00d2      	lsls	r2, r2, #3
 8009070:	4906      	ldr	r1, [pc, #24]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8009072:	4313      	orrs	r3, r2
 8009074:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009076:	4b05      	ldr	r3, [pc, #20]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 8009078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907a:	4a04      	ldr	r2, [pc, #16]	; (800908c <HAL_RCC_OscConfig+0x8ac>)
 800907c:	f043 0301 	orr.w	r3, r3, #1
 8009080:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3730      	adds	r7, #48	; 0x30
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	58024400 	.word	0x58024400
 8009090:	ffff0007 	.word	0xffff0007

08009094 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e19c      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090a8:	4b8a      	ldr	r3, [pc, #552]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d910      	bls.n	80090d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090b6:	4b87      	ldr	r3, [pc, #540]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f023 020f 	bic.w	r2, r3, #15
 80090be:	4985      	ldr	r1, [pc, #532]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090c6:	4b83      	ldr	r3, [pc, #524]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 030f 	and.w	r3, r3, #15
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d001      	beq.n	80090d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e184      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0304 	and.w	r3, r3, #4
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d010      	beq.n	8009106 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	691a      	ldr	r2, [r3, #16]
 80090e8:	4b7b      	ldr	r3, [pc, #492]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d908      	bls.n	8009106 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80090f4:	4b78      	ldr	r3, [pc, #480]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	4975      	ldr	r1, [pc, #468]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009102:	4313      	orrs	r3, r2
 8009104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0308 	and.w	r3, r3, #8
 800910e:	2b00      	cmp	r3, #0
 8009110:	d010      	beq.n	8009134 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	695a      	ldr	r2, [r3, #20]
 8009116:	4b70      	ldr	r3, [pc, #448]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800911e:	429a      	cmp	r2, r3
 8009120:	d908      	bls.n	8009134 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009122:	4b6d      	ldr	r3, [pc, #436]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	496a      	ldr	r1, [pc, #424]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009130:	4313      	orrs	r3, r2
 8009132:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 0310 	and.w	r3, r3, #16
 800913c:	2b00      	cmp	r3, #0
 800913e:	d010      	beq.n	8009162 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	699a      	ldr	r2, [r3, #24]
 8009144:	4b64      	ldr	r3, [pc, #400]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800914c:	429a      	cmp	r2, r3
 800914e:	d908      	bls.n	8009162 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009150:	4b61      	ldr	r3, [pc, #388]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	495e      	ldr	r1, [pc, #376]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 800915e:	4313      	orrs	r3, r2
 8009160:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b00      	cmp	r3, #0
 800916c:	d010      	beq.n	8009190 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	69da      	ldr	r2, [r3, #28]
 8009172:	4b59      	ldr	r3, [pc, #356]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800917a:	429a      	cmp	r2, r3
 800917c:	d908      	bls.n	8009190 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800917e:	4b56      	ldr	r3, [pc, #344]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	4953      	ldr	r1, [pc, #332]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 800918c:	4313      	orrs	r3, r2
 800918e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b00      	cmp	r3, #0
 800919a:	d010      	beq.n	80091be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	4b4d      	ldr	r3, [pc, #308]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	f003 030f 	and.w	r3, r3, #15
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d908      	bls.n	80091be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091ac:	4b4a      	ldr	r3, [pc, #296]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	f023 020f 	bic.w	r2, r3, #15
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	4947      	ldr	r1, [pc, #284]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d055      	beq.n	8009276 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80091ca:	4b43      	ldr	r3, [pc, #268]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	4940      	ldr	r1, [pc, #256]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091d8:	4313      	orrs	r3, r2
 80091da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d107      	bne.n	80091f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091e4:	4b3c      	ldr	r3, [pc, #240]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d121      	bne.n	8009234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e0f6      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d107      	bne.n	800920c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80091fc:	4b36      	ldr	r3, [pc, #216]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d115      	bne.n	8009234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e0ea      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d107      	bne.n	8009224 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009214:	4b30      	ldr	r3, [pc, #192]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921c:	2b00      	cmp	r3, #0
 800921e:	d109      	bne.n	8009234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e0de      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009224:	4b2c      	ldr	r3, [pc, #176]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0304 	and.w	r3, r3, #4
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e0d6      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009234:	4b28      	ldr	r3, [pc, #160]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	f023 0207 	bic.w	r2, r3, #7
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	4925      	ldr	r1, [pc, #148]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009242:	4313      	orrs	r3, r2
 8009244:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009246:	f7f9 ffff 	bl	8003248 <HAL_GetTick>
 800924a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800924c:	e00a      	b.n	8009264 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800924e:	f7f9 fffb 	bl	8003248 <HAL_GetTick>
 8009252:	4602      	mov	r2, r0
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	f241 3288 	movw	r2, #5000	; 0x1388
 800925c:	4293      	cmp	r3, r2
 800925e:	d901      	bls.n	8009264 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e0be      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009264:	4b1c      	ldr	r3, [pc, #112]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	429a      	cmp	r2, r3
 8009274:	d1eb      	bne.n	800924e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0302 	and.w	r3, r3, #2
 800927e:	2b00      	cmp	r3, #0
 8009280:	d010      	beq.n	80092a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68da      	ldr	r2, [r3, #12]
 8009286:	4b14      	ldr	r3, [pc, #80]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	429a      	cmp	r2, r3
 8009290:	d208      	bcs.n	80092a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009292:	4b11      	ldr	r3, [pc, #68]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	f023 020f 	bic.w	r2, r3, #15
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	490e      	ldr	r1, [pc, #56]	; (80092d8 <HAL_RCC_ClockConfig+0x244>)
 80092a0:	4313      	orrs	r3, r2
 80092a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092a4:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 030f 	and.w	r3, r3, #15
 80092ac:	683a      	ldr	r2, [r7, #0]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d214      	bcs.n	80092dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092b2:	4b08      	ldr	r3, [pc, #32]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f023 020f 	bic.w	r2, r3, #15
 80092ba:	4906      	ldr	r1, [pc, #24]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	4313      	orrs	r3, r2
 80092c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092c2:	4b04      	ldr	r3, [pc, #16]	; (80092d4 <HAL_RCC_ClockConfig+0x240>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 030f 	and.w	r3, r3, #15
 80092ca:	683a      	ldr	r2, [r7, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d005      	beq.n	80092dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e086      	b.n	80093e2 <HAL_RCC_ClockConfig+0x34e>
 80092d4:	52002000 	.word	0x52002000
 80092d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0304 	and.w	r3, r3, #4
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d010      	beq.n	800930a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	4b3f      	ldr	r3, [pc, #252]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d208      	bcs.n	800930a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80092f8:	4b3c      	ldr	r3, [pc, #240]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	4939      	ldr	r1, [pc, #228]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009306:	4313      	orrs	r3, r2
 8009308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d010      	beq.n	8009338 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	695a      	ldr	r2, [r3, #20]
 800931a:	4b34      	ldr	r3, [pc, #208]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009322:	429a      	cmp	r2, r3
 8009324:	d208      	bcs.n	8009338 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009326:	4b31      	ldr	r3, [pc, #196]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	492e      	ldr	r1, [pc, #184]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009334:	4313      	orrs	r3, r2
 8009336:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0310 	and.w	r3, r3, #16
 8009340:	2b00      	cmp	r3, #0
 8009342:	d010      	beq.n	8009366 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	699a      	ldr	r2, [r3, #24]
 8009348:	4b28      	ldr	r3, [pc, #160]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 800934a:	69db      	ldr	r3, [r3, #28]
 800934c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009350:	429a      	cmp	r2, r3
 8009352:	d208      	bcs.n	8009366 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009354:	4b25      	ldr	r3, [pc, #148]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	4922      	ldr	r1, [pc, #136]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009362:	4313      	orrs	r3, r2
 8009364:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0320 	and.w	r3, r3, #32
 800936e:	2b00      	cmp	r3, #0
 8009370:	d010      	beq.n	8009394 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	69da      	ldr	r2, [r3, #28]
 8009376:	4b1d      	ldr	r3, [pc, #116]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800937e:	429a      	cmp	r2, r3
 8009380:	d208      	bcs.n	8009394 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009382:	4b1a      	ldr	r3, [pc, #104]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	4917      	ldr	r1, [pc, #92]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 8009390:	4313      	orrs	r3, r2
 8009392:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009394:	f000 f834 	bl	8009400 <HAL_RCC_GetSysClockFreq>
 8009398:	4602      	mov	r2, r0
 800939a:	4b14      	ldr	r3, [pc, #80]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	0a1b      	lsrs	r3, r3, #8
 80093a0:	f003 030f 	and.w	r3, r3, #15
 80093a4:	4912      	ldr	r1, [pc, #72]	; (80093f0 <HAL_RCC_ClockConfig+0x35c>)
 80093a6:	5ccb      	ldrb	r3, [r1, r3]
 80093a8:	f003 031f 	and.w	r3, r3, #31
 80093ac:	fa22 f303 	lsr.w	r3, r2, r3
 80093b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093b2:	4b0e      	ldr	r3, [pc, #56]	; (80093ec <HAL_RCC_ClockConfig+0x358>)
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	f003 030f 	and.w	r3, r3, #15
 80093ba:	4a0d      	ldr	r2, [pc, #52]	; (80093f0 <HAL_RCC_ClockConfig+0x35c>)
 80093bc:	5cd3      	ldrb	r3, [r2, r3]
 80093be:	f003 031f 	and.w	r3, r3, #31
 80093c2:	693a      	ldr	r2, [r7, #16]
 80093c4:	fa22 f303 	lsr.w	r3, r2, r3
 80093c8:	4a0a      	ldr	r2, [pc, #40]	; (80093f4 <HAL_RCC_ClockConfig+0x360>)
 80093ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80093cc:	4a0a      	ldr	r2, [pc, #40]	; (80093f8 <HAL_RCC_ClockConfig+0x364>)
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80093d2:	4b0a      	ldr	r3, [pc, #40]	; (80093fc <HAL_RCC_ClockConfig+0x368>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7f8 ff46 	bl	8002268 <HAL_InitTick>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3718      	adds	r7, #24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	58024400 	.word	0x58024400
 80093f0:	08014f90 	.word	0x08014f90
 80093f4:	2400008c 	.word	0x2400008c
 80093f8:	24000088 	.word	0x24000088
 80093fc:	24000090 	.word	0x24000090

08009400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009400:	b480      	push	{r7}
 8009402:	b089      	sub	sp, #36	; 0x24
 8009404:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009406:	4bb3      	ldr	r3, [pc, #716]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800940e:	2b18      	cmp	r3, #24
 8009410:	f200 8155 	bhi.w	80096be <HAL_RCC_GetSysClockFreq+0x2be>
 8009414:	a201      	add	r2, pc, #4	; (adr r2, 800941c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941a:	bf00      	nop
 800941c:	08009481 	.word	0x08009481
 8009420:	080096bf 	.word	0x080096bf
 8009424:	080096bf 	.word	0x080096bf
 8009428:	080096bf 	.word	0x080096bf
 800942c:	080096bf 	.word	0x080096bf
 8009430:	080096bf 	.word	0x080096bf
 8009434:	080096bf 	.word	0x080096bf
 8009438:	080096bf 	.word	0x080096bf
 800943c:	080094a7 	.word	0x080094a7
 8009440:	080096bf 	.word	0x080096bf
 8009444:	080096bf 	.word	0x080096bf
 8009448:	080096bf 	.word	0x080096bf
 800944c:	080096bf 	.word	0x080096bf
 8009450:	080096bf 	.word	0x080096bf
 8009454:	080096bf 	.word	0x080096bf
 8009458:	080096bf 	.word	0x080096bf
 800945c:	080094ad 	.word	0x080094ad
 8009460:	080096bf 	.word	0x080096bf
 8009464:	080096bf 	.word	0x080096bf
 8009468:	080096bf 	.word	0x080096bf
 800946c:	080096bf 	.word	0x080096bf
 8009470:	080096bf 	.word	0x080096bf
 8009474:	080096bf 	.word	0x080096bf
 8009478:	080096bf 	.word	0x080096bf
 800947c:	080094b3 	.word	0x080094b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009480:	4b94      	ldr	r3, [pc, #592]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0320 	and.w	r3, r3, #32
 8009488:	2b00      	cmp	r3, #0
 800948a:	d009      	beq.n	80094a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800948c:	4b91      	ldr	r3, [pc, #580]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	08db      	lsrs	r3, r3, #3
 8009492:	f003 0303 	and.w	r3, r3, #3
 8009496:	4a90      	ldr	r2, [pc, #576]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009498:	fa22 f303 	lsr.w	r3, r2, r3
 800949c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800949e:	e111      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094a0:	4b8d      	ldr	r3, [pc, #564]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094a2:	61bb      	str	r3, [r7, #24]
      break;
 80094a4:	e10e      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80094a6:	4b8d      	ldr	r3, [pc, #564]	; (80096dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094a8:	61bb      	str	r3, [r7, #24]
      break;
 80094aa:	e10b      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80094ac:	4b8c      	ldr	r3, [pc, #560]	; (80096e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80094ae:	61bb      	str	r3, [r7, #24]
      break;
 80094b0:	e108      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094b2:	4b88      	ldr	r3, [pc, #544]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b6:	f003 0303 	and.w	r3, r3, #3
 80094ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80094bc:	4b85      	ldr	r3, [pc, #532]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c0:	091b      	lsrs	r3, r3, #4
 80094c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80094c8:	4b82      	ldr	r3, [pc, #520]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80094d2:	4b80      	ldr	r3, [pc, #512]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d6:	08db      	lsrs	r3, r3, #3
 80094d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	fb02 f303 	mul.w	r3, r2, r3
 80094e2:	ee07 3a90 	vmov	s15, r3
 80094e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 80e1 	beq.w	80096b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	f000 8083 	beq.w	8009604 <HAL_RCC_GetSysClockFreq+0x204>
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2b02      	cmp	r3, #2
 8009502:	f200 80a1 	bhi.w	8009648 <HAL_RCC_GetSysClockFreq+0x248>
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d003      	beq.n	8009514 <HAL_RCC_GetSysClockFreq+0x114>
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d056      	beq.n	80095c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009512:	e099      	b.n	8009648 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009514:	4b6f      	ldr	r3, [pc, #444]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b00      	cmp	r3, #0
 800951e:	d02d      	beq.n	800957c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009520:	4b6c      	ldr	r3, [pc, #432]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	08db      	lsrs	r3, r3, #3
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	4a6b      	ldr	r2, [pc, #428]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800952c:	fa22 f303 	lsr.w	r3, r2, r3
 8009530:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	ee07 3a90 	vmov	s15, r3
 8009538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	ee07 3a90 	vmov	s15, r3
 8009542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954a:	4b62      	ldr	r3, [pc, #392]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009552:	ee07 3a90 	vmov	s15, r3
 8009556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955a:	ed97 6a02 	vldr	s12, [r7, #8]
 800955e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80096e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800956e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009576:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800957a:	e087      	b.n	800968c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009586:	eddf 6a58 	vldr	s13, [pc, #352]	; 80096e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800958a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800958e:	4b51      	ldr	r3, [pc, #324]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959e:	ed97 6a02 	vldr	s12, [r7, #8]
 80095a2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80096e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095be:	e065      	b.n	800968c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ca:	eddf 6a48 	vldr	s13, [pc, #288]	; 80096ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80095ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d2:	4b40      	ldr	r3, [pc, #256]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80095e6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80096e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009602:	e043      	b.n	800968c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960e:	eddf 6a38 	vldr	s13, [pc, #224]	; 80096f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009616:	4b2f      	ldr	r3, [pc, #188]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009626:	ed97 6a02 	vldr	s12, [r7, #8]
 800962a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80096e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800962e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800963a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800963e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009646:	e021      	b.n	800968c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009652:	eddf 6a26 	vldr	s13, [pc, #152]	; 80096ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8009656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965a:	4b1e      	ldr	r3, [pc, #120]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800965c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966a:	ed97 6a02 	vldr	s12, [r7, #8]
 800966e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80096e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800967e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009686:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800968a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800968c:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800968e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009690:	0a5b      	lsrs	r3, r3, #9
 8009692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009696:	3301      	adds	r3, #1
 8009698:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	ee07 3a90 	vmov	s15, r3
 80096a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80096a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096b0:	ee17 3a90 	vmov	r3, s15
 80096b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80096b6:	e005      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80096b8:	2300      	movs	r3, #0
 80096ba:	61bb      	str	r3, [r7, #24]
      break;
 80096bc:	e002      	b.n	80096c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80096be:	4b07      	ldr	r3, [pc, #28]	; (80096dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80096c0:	61bb      	str	r3, [r7, #24]
      break;
 80096c2:	bf00      	nop
  }

  return sysclockfreq;
 80096c4:	69bb      	ldr	r3, [r7, #24]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3724      	adds	r7, #36	; 0x24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	58024400 	.word	0x58024400
 80096d8:	03d09000 	.word	0x03d09000
 80096dc:	003d0900 	.word	0x003d0900
 80096e0:	017d7840 	.word	0x017d7840
 80096e4:	46000000 	.word	0x46000000
 80096e8:	4c742400 	.word	0x4c742400
 80096ec:	4a742400 	.word	0x4a742400
 80096f0:	4bbebc20 	.word	0x4bbebc20

080096f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80096fa:	f7ff fe81 	bl	8009400 <HAL_RCC_GetSysClockFreq>
 80096fe:	4602      	mov	r2, r0
 8009700:	4b10      	ldr	r3, [pc, #64]	; (8009744 <HAL_RCC_GetHCLKFreq+0x50>)
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	0a1b      	lsrs	r3, r3, #8
 8009706:	f003 030f 	and.w	r3, r3, #15
 800970a:	490f      	ldr	r1, [pc, #60]	; (8009748 <HAL_RCC_GetHCLKFreq+0x54>)
 800970c:	5ccb      	ldrb	r3, [r1, r3]
 800970e:	f003 031f 	and.w	r3, r3, #31
 8009712:	fa22 f303 	lsr.w	r3, r2, r3
 8009716:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009718:	4b0a      	ldr	r3, [pc, #40]	; (8009744 <HAL_RCC_GetHCLKFreq+0x50>)
 800971a:	699b      	ldr	r3, [r3, #24]
 800971c:	f003 030f 	and.w	r3, r3, #15
 8009720:	4a09      	ldr	r2, [pc, #36]	; (8009748 <HAL_RCC_GetHCLKFreq+0x54>)
 8009722:	5cd3      	ldrb	r3, [r2, r3]
 8009724:	f003 031f 	and.w	r3, r3, #31
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	fa22 f303 	lsr.w	r3, r2, r3
 800972e:	4a07      	ldr	r2, [pc, #28]	; (800974c <HAL_RCC_GetHCLKFreq+0x58>)
 8009730:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009732:	4a07      	ldr	r2, [pc, #28]	; (8009750 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009738:	4b04      	ldr	r3, [pc, #16]	; (800974c <HAL_RCC_GetHCLKFreq+0x58>)
 800973a:	681b      	ldr	r3, [r3, #0]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	58024400 	.word	0x58024400
 8009748:	08014f90 	.word	0x08014f90
 800974c:	2400008c 	.word	0x2400008c
 8009750:	24000088 	.word	0x24000088

08009754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009758:	f7ff ffcc 	bl	80096f4 <HAL_RCC_GetHCLKFreq>
 800975c:	4602      	mov	r2, r0
 800975e:	4b06      	ldr	r3, [pc, #24]	; (8009778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	091b      	lsrs	r3, r3, #4
 8009764:	f003 0307 	and.w	r3, r3, #7
 8009768:	4904      	ldr	r1, [pc, #16]	; (800977c <HAL_RCC_GetPCLK1Freq+0x28>)
 800976a:	5ccb      	ldrb	r3, [r1, r3]
 800976c:	f003 031f 	and.w	r3, r3, #31
 8009770:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009774:	4618      	mov	r0, r3
 8009776:	bd80      	pop	{r7, pc}
 8009778:	58024400 	.word	0x58024400
 800977c:	08014f90 	.word	0x08014f90

08009780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009784:	f7ff ffb6 	bl	80096f4 <HAL_RCC_GetHCLKFreq>
 8009788:	4602      	mov	r2, r0
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	0a1b      	lsrs	r3, r3, #8
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	4904      	ldr	r1, [pc, #16]	; (80097a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009796:	5ccb      	ldrb	r3, [r1, r3]
 8009798:	f003 031f 	and.w	r3, r3, #31
 800979c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	58024400 	.word	0x58024400
 80097a8:	08014f90 	.word	0x08014f90

080097ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	223f      	movs	r2, #63	; 0x3f
 80097ba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80097bc:	4b1a      	ldr	r3, [pc, #104]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	f003 0207 	and.w	r2, r3, #7
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80097c8:	4b17      	ldr	r3, [pc, #92]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80097d4:	4b14      	ldr	r3, [pc, #80]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	f003 020f 	and.w	r2, r3, #15
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80097e0:	4b11      	ldr	r3, [pc, #68]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80097ec:	4b0e      	ldr	r3, [pc, #56]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80097f8:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 80097fa:	69db      	ldr	r3, [r3, #28]
 80097fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009804:	4b08      	ldr	r3, [pc, #32]	; (8009828 <HAL_RCC_GetClockConfig+0x7c>)
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009810:	4b06      	ldr	r3, [pc, #24]	; (800982c <HAL_RCC_GetClockConfig+0x80>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 020f 	and.w	r2, r3, #15
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	601a      	str	r2, [r3, #0]
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	58024400 	.word	0x58024400
 800982c:	52002000 	.word	0x52002000

08009830 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009834:	b0ca      	sub	sp, #296	; 0x128
 8009836:	af00      	add	r7, sp, #0
 8009838:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800983c:	2300      	movs	r3, #0
 800983e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009842:	2300      	movs	r3, #0
 8009844:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009854:	2500      	movs	r5, #0
 8009856:	ea54 0305 	orrs.w	r3, r4, r5
 800985a:	d049      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800985c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009862:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009866:	d02f      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009868:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800986c:	d828      	bhi.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800986e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009872:	d01a      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009874:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009878:	d822      	bhi.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800987a:	2b00      	cmp	r3, #0
 800987c:	d003      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800987e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009882:	d007      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009884:	e01c      	b.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009886:	4bb8      	ldr	r3, [pc, #736]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988a:	4ab7      	ldr	r2, [pc, #732]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800988c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009892:	e01a      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009898:	3308      	adds	r3, #8
 800989a:	2102      	movs	r1, #2
 800989c:	4618      	mov	r0, r3
 800989e:	f002 fb61 	bl	800bf64 <RCCEx_PLL2_Config>
 80098a2:	4603      	mov	r3, r0
 80098a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098a8:	e00f      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ae:	3328      	adds	r3, #40	; 0x28
 80098b0:	2102      	movs	r1, #2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f002 fc08 	bl	800c0c8 <RCCEx_PLL3_Config>
 80098b8:	4603      	mov	r3, r0
 80098ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098be:	e004      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098c6:	e000      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80098c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10a      	bne.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80098d2:	4ba5      	ldr	r3, [pc, #660]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80098da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098e0:	4aa1      	ldr	r2, [pc, #644]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098e2:	430b      	orrs	r3, r1
 80098e4:	6513      	str	r3, [r2, #80]	; 0x50
 80098e6:	e003      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80098f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80098fc:	f04f 0900 	mov.w	r9, #0
 8009900:	ea58 0309 	orrs.w	r3, r8, r9
 8009904:	d047      	beq.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800990a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800990c:	2b04      	cmp	r3, #4
 800990e:	d82a      	bhi.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009910:	a201      	add	r2, pc, #4	; (adr r2, 8009918 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009916:	bf00      	nop
 8009918:	0800992d 	.word	0x0800992d
 800991c:	0800993b 	.word	0x0800993b
 8009920:	08009951 	.word	0x08009951
 8009924:	0800996f 	.word	0x0800996f
 8009928:	0800996f 	.word	0x0800996f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800992c:	4b8e      	ldr	r3, [pc, #568]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800992e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009930:	4a8d      	ldr	r2, [pc, #564]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009936:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009938:	e01a      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800993a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800993e:	3308      	adds	r3, #8
 8009940:	2100      	movs	r1, #0
 8009942:	4618      	mov	r0, r3
 8009944:	f002 fb0e 	bl	800bf64 <RCCEx_PLL2_Config>
 8009948:	4603      	mov	r3, r0
 800994a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800994e:	e00f      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009954:	3328      	adds	r3, #40	; 0x28
 8009956:	2100      	movs	r1, #0
 8009958:	4618      	mov	r0, r3
 800995a:	f002 fbb5 	bl	800c0c8 <RCCEx_PLL3_Config>
 800995e:	4603      	mov	r3, r0
 8009960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009964:	e004      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800996c:	e000      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800996e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10a      	bne.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009978:	4b7b      	ldr	r3, [pc, #492]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800997a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800997c:	f023 0107 	bic.w	r1, r3, #7
 8009980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009986:	4a78      	ldr	r2, [pc, #480]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009988:	430b      	orrs	r3, r1
 800998a:	6513      	str	r3, [r2, #80]	; 0x50
 800998c:	e003      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009992:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800999a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80099a2:	f04f 0b00 	mov.w	fp, #0
 80099a6:	ea5a 030b 	orrs.w	r3, sl, fp
 80099aa:	d04c      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80099ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b6:	d030      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80099b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099bc:	d829      	bhi.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099be:	2bc0      	cmp	r3, #192	; 0xc0
 80099c0:	d02d      	beq.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80099c2:	2bc0      	cmp	r3, #192	; 0xc0
 80099c4:	d825      	bhi.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099c6:	2b80      	cmp	r3, #128	; 0x80
 80099c8:	d018      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80099ca:	2b80      	cmp	r3, #128	; 0x80
 80099cc:	d821      	bhi.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d002      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80099d2:	2b40      	cmp	r3, #64	; 0x40
 80099d4:	d007      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80099d6:	e01c      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099d8:	4b63      	ldr	r3, [pc, #396]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099dc:	4a62      	ldr	r2, [pc, #392]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80099e4:	e01c      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ea:	3308      	adds	r3, #8
 80099ec:	2100      	movs	r1, #0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f002 fab8 	bl	800bf64 <RCCEx_PLL2_Config>
 80099f4:	4603      	mov	r3, r0
 80099f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80099fa:	e011      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a00:	3328      	adds	r3, #40	; 0x28
 8009a02:	2100      	movs	r1, #0
 8009a04:	4618      	mov	r0, r3
 8009a06:	f002 fb5f 	bl	800c0c8 <RCCEx_PLL3_Config>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a10:	e006      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a18:	e002      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009a1a:	bf00      	nop
 8009a1c:	e000      	b.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10a      	bne.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009a28:	4b4f      	ldr	r3, [pc, #316]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a2c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a36:	4a4c      	ldr	r2, [pc, #304]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a38:	430b      	orrs	r3, r1
 8009a3a:	6513      	str	r3, [r2, #80]	; 0x50
 8009a3c:	e003      	b.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009a52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009a56:	2300      	movs	r3, #0
 8009a58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a5c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009a60:	460b      	mov	r3, r1
 8009a62:	4313      	orrs	r3, r2
 8009a64:	d053      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a72:	d035      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009a74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a78:	d82e      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a7e:	d031      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009a80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a84:	d828      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a8a:	d01a      	beq.n	8009ac2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a90:	d822      	bhi.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a9a:	d007      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009a9c:	e01c      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a9e:	4b32      	ldr	r3, [pc, #200]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa2:	4a31      	ldr	r2, [pc, #196]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009aaa:	e01c      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f002 fa55 	bl	800bf64 <RCCEx_PLL2_Config>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ac0:	e011      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac6:	3328      	adds	r3, #40	; 0x28
 8009ac8:	2100      	movs	r1, #0
 8009aca:	4618      	mov	r0, r3
 8009acc:	f002 fafc 	bl	800c0c8 <RCCEx_PLL3_Config>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ad6:	e006      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ade:	e002      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009ae0:	bf00      	nop
 8009ae2:	e000      	b.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10b      	bne.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009aee:	4b1e      	ldr	r3, [pc, #120]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009afa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009afe:	4a1a      	ldr	r2, [pc, #104]	; (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009b00:	430b      	orrs	r3, r1
 8009b02:	6593      	str	r3, [r2, #88]	; 0x58
 8009b04:	e003      	b.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b16:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009b1a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009b24:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	d056      	beq.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b3a:	d038      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009b3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b40:	d831      	bhi.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b46:	d034      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009b48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b4c:	d82b      	bhi.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b52:	d01d      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b58:	d825      	bhi.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d006      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009b5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b62:	d00a      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009b64:	e01f      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b66:	bf00      	nop
 8009b68:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b6c:	4ba2      	ldr	r3, [pc, #648]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	4aa1      	ldr	r2, [pc, #644]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b78:	e01c      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b7e:	3308      	adds	r3, #8
 8009b80:	2100      	movs	r1, #0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f002 f9ee 	bl	800bf64 <RCCEx_PLL2_Config>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009b8e:	e011      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b94:	3328      	adds	r3, #40	; 0x28
 8009b96:	2100      	movs	r1, #0
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f002 fa95 	bl	800c0c8 <RCCEx_PLL3_Config>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ba4:	e006      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bac:	e002      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009bae:	bf00      	nop
 8009bb0:	e000      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10b      	bne.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009bbc:	4b8e      	ldr	r3, [pc, #568]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bcc:	4a8a      	ldr	r2, [pc, #552]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bce:	430b      	orrs	r3, r1
 8009bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8009bd2:	e003      	b.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009be8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009bec:	2300      	movs	r3, #0
 8009bee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009bf2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	d03a      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c02:	2b30      	cmp	r3, #48	; 0x30
 8009c04:	d01f      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009c06:	2b30      	cmp	r3, #48	; 0x30
 8009c08:	d819      	bhi.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009c0a:	2b20      	cmp	r3, #32
 8009c0c:	d00c      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009c0e:	2b20      	cmp	r3, #32
 8009c10:	d815      	bhi.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d019      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009c16:	2b10      	cmp	r3, #16
 8009c18:	d111      	bne.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c1a:	4b77      	ldr	r3, [pc, #476]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1e:	4a76      	ldr	r2, [pc, #472]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009c26:	e011      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2c:	3308      	adds	r3, #8
 8009c2e:	2102      	movs	r1, #2
 8009c30:	4618      	mov	r0, r3
 8009c32:	f002 f997 	bl	800bf64 <RCCEx_PLL2_Config>
 8009c36:	4603      	mov	r3, r0
 8009c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009c3c:	e006      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c44:	e002      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c46:	bf00      	nop
 8009c48:	e000      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d10a      	bne.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009c54:	4b68      	ldr	r3, [pc, #416]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c58:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c62:	4a65      	ldr	r2, [pc, #404]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c64:	430b      	orrs	r3, r1
 8009c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c68:	e003      	b.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009c7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c82:	2300      	movs	r3, #0
 8009c84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009c88:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	d051      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c9c:	d035      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ca2:	d82e      	bhi.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ca4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ca8:	d031      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009caa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cae:	d828      	bhi.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb4:	d01a      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cba:	d822      	bhi.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc4:	d007      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009cc6:	e01c      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cc8:	4b4b      	ldr	r3, [pc, #300]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ccc:	4a4a      	ldr	r2, [pc, #296]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009cd4:	e01c      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cda:	3308      	adds	r3, #8
 8009cdc:	2100      	movs	r1, #0
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f002 f940 	bl	800bf64 <RCCEx_PLL2_Config>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009cea:	e011      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cf0:	3328      	adds	r3, #40	; 0x28
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f002 f9e7 	bl	800c0c8 <RCCEx_PLL3_Config>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009d00:	e006      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d08:	e002      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009d0a:	bf00      	nop
 8009d0c:	e000      	b.n	8009d10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10a      	bne.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009d18:	4b37      	ldr	r3, [pc, #220]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d1c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d26:	4a34      	ldr	r2, [pc, #208]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	6513      	str	r3, [r2, #80]	; 0x50
 8009d2c:	e003      	b.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009d42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d46:	2300      	movs	r3, #0
 8009d48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009d4c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009d50:	460b      	mov	r3, r1
 8009d52:	4313      	orrs	r3, r2
 8009d54:	d056      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d60:	d033      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009d62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d66:	d82c      	bhi.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d6c:	d02f      	beq.n	8009dce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009d6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d72:	d826      	bhi.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d78:	d02b      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009d7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d7e:	d820      	bhi.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d84:	d012      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009d86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d8a:	d81a      	bhi.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d022      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d94:	d115      	bne.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d9a:	3308      	adds	r3, #8
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f002 f8e0 	bl	800bf64 <RCCEx_PLL2_Config>
 8009da4:	4603      	mov	r3, r0
 8009da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009daa:	e015      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db0:	3328      	adds	r3, #40	; 0x28
 8009db2:	2101      	movs	r1, #1
 8009db4:	4618      	mov	r0, r3
 8009db6:	f002 f987 	bl	800c0c8 <RCCEx_PLL3_Config>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009dc0:	e00a      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dc8:	e006      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dca:	bf00      	nop
 8009dcc:	e004      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dce:	bf00      	nop
 8009dd0:	e002      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dd2:	bf00      	nop
 8009dd4:	e000      	b.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d10d      	bne.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009de0:	4b05      	ldr	r3, [pc, #20]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dee:	4a02      	ldr	r2, [pc, #8]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009df0:	430b      	orrs	r3, r1
 8009df2:	6513      	str	r3, [r2, #80]	; 0x50
 8009df4:	e006      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009df6:	bf00      	nop
 8009df8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e14:	2300      	movs	r3, #0
 8009e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e1a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009e1e:	460b      	mov	r3, r1
 8009e20:	4313      	orrs	r3, r2
 8009e22:	d055      	beq.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e30:	d033      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e36:	d82c      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e3c:	d02f      	beq.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e42:	d826      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e48:	d02b      	beq.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009e4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e4e:	d820      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e54:	d012      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e5a:	d81a      	bhi.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d022      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e64:	d115      	bne.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f002 f878 	bl	800bf64 <RCCEx_PLL2_Config>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e7a:	e015      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e80:	3328      	adds	r3, #40	; 0x28
 8009e82:	2101      	movs	r1, #1
 8009e84:	4618      	mov	r0, r3
 8009e86:	f002 f91f 	bl	800c0c8 <RCCEx_PLL3_Config>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e90:	e00a      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e98:	e006      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e9a:	bf00      	nop
 8009e9c:	e004      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e9e:	bf00      	nop
 8009ea0:	e002      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ea2:	bf00      	nop
 8009ea4:	e000      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009ea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10b      	bne.n	8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009eb0:	4ba3      	ldr	r3, [pc, #652]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009ec0:	4a9f      	ldr	r2, [pc, #636]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ec2:	430b      	orrs	r3, r1
 8009ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8009ec6:	e003      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009edc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ee6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009eea:	460b      	mov	r3, r1
 8009eec:	4313      	orrs	r3, r2
 8009eee:	d037      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009efa:	d00e      	beq.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f00:	d816      	bhi.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d018      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f0a:	d111      	bne.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f0c:	4b8c      	ldr	r3, [pc, #560]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f10:	4a8b      	ldr	r2, [pc, #556]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009f18:	e00f      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f1e:	3308      	adds	r3, #8
 8009f20:	2101      	movs	r1, #1
 8009f22:	4618      	mov	r0, r3
 8009f24:	f002 f81e 	bl	800bf64 <RCCEx_PLL2_Config>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009f2e:	e004      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f36:	e000      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009f42:	4b7f      	ldr	r3, [pc, #508]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f46:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f50:	4a7b      	ldr	r2, [pc, #492]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f52:	430b      	orrs	r3, r1
 8009f54:	6513      	str	r3, [r2, #80]	; 0x50
 8009f56:	e003      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f70:	2300      	movs	r3, #0
 8009f72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	d039      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d81c      	bhi.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009f8a:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f90:	08009fcd 	.word	0x08009fcd
 8009f94:	08009fa1 	.word	0x08009fa1
 8009f98:	08009faf 	.word	0x08009faf
 8009f9c:	08009fcd 	.word	0x08009fcd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fa0:	4b67      	ldr	r3, [pc, #412]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa4:	4a66      	ldr	r2, [pc, #408]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009faa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009fac:	e00f      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb2:	3308      	adds	r3, #8
 8009fb4:	2102      	movs	r1, #2
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f001 ffd4 	bl	800bf64 <RCCEx_PLL2_Config>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009fc2:	e004      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fca:	e000      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10a      	bne.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009fd6:	4b5a      	ldr	r3, [pc, #360]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fda:	f023 0103 	bic.w	r1, r3, #3
 8009fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fe4:	4a56      	ldr	r2, [pc, #344]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fe6:	430b      	orrs	r3, r1
 8009fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fea:	e003      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ff0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a000:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a004:	2300      	movs	r3, #0
 800a006:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a00a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a00e:	460b      	mov	r3, r1
 800a010:	4313      	orrs	r3, r2
 800a012:	f000 809f 	beq.w	800a154 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a016:	4b4b      	ldr	r3, [pc, #300]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a4a      	ldr	r2, [pc, #296]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a01c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a020:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a022:	f7f9 f911 	bl	8003248 <HAL_GetTick>
 800a026:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a02a:	e00b      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a02c:	f7f9 f90c 	bl	8003248 <HAL_GetTick>
 800a030:	4602      	mov	r2, r0
 800a032:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	2b64      	cmp	r3, #100	; 0x64
 800a03a:	d903      	bls.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a042:	e005      	b.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a044:	4b3f      	ldr	r3, [pc, #252]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d0ed      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a054:	2b00      	cmp	r3, #0
 800a056:	d179      	bne.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a058:	4b39      	ldr	r3, [pc, #228]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a05a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a05c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a060:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a064:	4053      	eors	r3, r2
 800a066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d015      	beq.n	800a09a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a06e:	4b34      	ldr	r3, [pc, #208]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a076:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a07a:	4b31      	ldr	r3, [pc, #196]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07e:	4a30      	ldr	r2, [pc, #192]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a084:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a086:	4b2e      	ldr	r3, [pc, #184]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a08a:	4a2d      	ldr	r2, [pc, #180]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a08c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a090:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a092:	4a2b      	ldr	r2, [pc, #172]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a094:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a098:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a09e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0a6:	d118      	bne.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0a8:	f7f9 f8ce 	bl	8003248 <HAL_GetTick>
 800a0ac:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0b0:	e00d      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0b2:	f7f9 f8c9 	bl	8003248 <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a0bc:	1ad2      	subs	r2, r2, r3
 800a0be:	f241 3388 	movw	r3, #5000	; 0x1388
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d903      	bls.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a0cc:	e005      	b.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0ce:	4b1c      	ldr	r3, [pc, #112]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d2:	f003 0302 	and.w	r3, r3, #2
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0eb      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a0da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d129      	bne.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0f2:	d10e      	bne.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a0f4:	4b12      	ldr	r3, [pc, #72]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a100:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a104:	091a      	lsrs	r2, r3, #4
 800a106:	4b10      	ldr	r3, [pc, #64]	; (800a148 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a108:	4013      	ands	r3, r2
 800a10a:	4a0d      	ldr	r2, [pc, #52]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a10c:	430b      	orrs	r3, r1
 800a10e:	6113      	str	r3, [r2, #16]
 800a110:	e005      	b.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a112:	4b0b      	ldr	r3, [pc, #44]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	4a0a      	ldr	r2, [pc, #40]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a118:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a11c:	6113      	str	r3, [r2, #16]
 800a11e:	4b08      	ldr	r3, [pc, #32]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a120:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a126:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a12a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a12e:	4a04      	ldr	r2, [pc, #16]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a130:	430b      	orrs	r3, r1
 800a132:	6713      	str	r3, [r2, #112]	; 0x70
 800a134:	e00e      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a13a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a13e:	e009      	b.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a140:	58024400 	.word	0x58024400
 800a144:	58024800 	.word	0x58024800
 800a148:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a14c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a150:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	f002 0301 	and.w	r3, r2, #1
 800a160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a164:	2300      	movs	r3, #0
 800a166:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a16a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a16e:	460b      	mov	r3, r1
 800a170:	4313      	orrs	r3, r2
 800a172:	f000 8089 	beq.w	800a288 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a17a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a17c:	2b28      	cmp	r3, #40	; 0x28
 800a17e:	d86b      	bhi.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a180:	a201      	add	r2, pc, #4	; (adr r2, 800a188 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a186:	bf00      	nop
 800a188:	0800a261 	.word	0x0800a261
 800a18c:	0800a259 	.word	0x0800a259
 800a190:	0800a259 	.word	0x0800a259
 800a194:	0800a259 	.word	0x0800a259
 800a198:	0800a259 	.word	0x0800a259
 800a19c:	0800a259 	.word	0x0800a259
 800a1a0:	0800a259 	.word	0x0800a259
 800a1a4:	0800a259 	.word	0x0800a259
 800a1a8:	0800a22d 	.word	0x0800a22d
 800a1ac:	0800a259 	.word	0x0800a259
 800a1b0:	0800a259 	.word	0x0800a259
 800a1b4:	0800a259 	.word	0x0800a259
 800a1b8:	0800a259 	.word	0x0800a259
 800a1bc:	0800a259 	.word	0x0800a259
 800a1c0:	0800a259 	.word	0x0800a259
 800a1c4:	0800a259 	.word	0x0800a259
 800a1c8:	0800a243 	.word	0x0800a243
 800a1cc:	0800a259 	.word	0x0800a259
 800a1d0:	0800a259 	.word	0x0800a259
 800a1d4:	0800a259 	.word	0x0800a259
 800a1d8:	0800a259 	.word	0x0800a259
 800a1dc:	0800a259 	.word	0x0800a259
 800a1e0:	0800a259 	.word	0x0800a259
 800a1e4:	0800a259 	.word	0x0800a259
 800a1e8:	0800a261 	.word	0x0800a261
 800a1ec:	0800a259 	.word	0x0800a259
 800a1f0:	0800a259 	.word	0x0800a259
 800a1f4:	0800a259 	.word	0x0800a259
 800a1f8:	0800a259 	.word	0x0800a259
 800a1fc:	0800a259 	.word	0x0800a259
 800a200:	0800a259 	.word	0x0800a259
 800a204:	0800a259 	.word	0x0800a259
 800a208:	0800a261 	.word	0x0800a261
 800a20c:	0800a259 	.word	0x0800a259
 800a210:	0800a259 	.word	0x0800a259
 800a214:	0800a259 	.word	0x0800a259
 800a218:	0800a259 	.word	0x0800a259
 800a21c:	0800a259 	.word	0x0800a259
 800a220:	0800a259 	.word	0x0800a259
 800a224:	0800a259 	.word	0x0800a259
 800a228:	0800a261 	.word	0x0800a261
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a230:	3308      	adds	r3, #8
 800a232:	2101      	movs	r1, #1
 800a234:	4618      	mov	r0, r3
 800a236:	f001 fe95 	bl	800bf64 <RCCEx_PLL2_Config>
 800a23a:	4603      	mov	r3, r0
 800a23c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a240:	e00f      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a246:	3328      	adds	r3, #40	; 0x28
 800a248:	2101      	movs	r1, #1
 800a24a:	4618      	mov	r0, r3
 800a24c:	f001 ff3c 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a250:	4603      	mov	r3, r0
 800a252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a256:	e004      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a258:	2301      	movs	r3, #1
 800a25a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a25e:	e000      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a260:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10a      	bne.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a26a:	4bbf      	ldr	r3, [pc, #764]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a278:	4abb      	ldr	r2, [pc, #748]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a27a:	430b      	orrs	r3, r1
 800a27c:	6553      	str	r3, [r2, #84]	; 0x54
 800a27e:	e003      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a280:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a284:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	f002 0302 	and.w	r3, r2, #2
 800a294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a298:	2300      	movs	r3, #0
 800a29a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a29e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	d041      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2ae:	2b05      	cmp	r3, #5
 800a2b0:	d824      	bhi.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a2b2:	a201      	add	r2, pc, #4	; (adr r2, 800a2b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b8:	0800a305 	.word	0x0800a305
 800a2bc:	0800a2d1 	.word	0x0800a2d1
 800a2c0:	0800a2e7 	.word	0x0800a2e7
 800a2c4:	0800a305 	.word	0x0800a305
 800a2c8:	0800a305 	.word	0x0800a305
 800a2cc:	0800a305 	.word	0x0800a305
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f001 fe43 	bl	800bf64 <RCCEx_PLL2_Config>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a2e4:	e00f      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ea:	3328      	adds	r3, #40	; 0x28
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f001 feea 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a2fa:	e004      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a302:	e000      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a304:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10a      	bne.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a30e:	4b96      	ldr	r3, [pc, #600]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a312:	f023 0107 	bic.w	r1, r3, #7
 800a316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a31a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a31c:	4a92      	ldr	r2, [pc, #584]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a31e:	430b      	orrs	r3, r1
 800a320:	6553      	str	r3, [r2, #84]	; 0x54
 800a322:	e003      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a324:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a328:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a334:	f002 0304 	and.w	r3, r2, #4
 800a338:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a33c:	2300      	movs	r3, #0
 800a33e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a342:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a346:	460b      	mov	r3, r1
 800a348:	4313      	orrs	r3, r2
 800a34a:	d044      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a34c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a354:	2b05      	cmp	r3, #5
 800a356:	d825      	bhi.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a358:	a201      	add	r2, pc, #4	; (adr r2, 800a360 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35e:	bf00      	nop
 800a360:	0800a3ad 	.word	0x0800a3ad
 800a364:	0800a379 	.word	0x0800a379
 800a368:	0800a38f 	.word	0x0800a38f
 800a36c:	0800a3ad 	.word	0x0800a3ad
 800a370:	0800a3ad 	.word	0x0800a3ad
 800a374:	0800a3ad 	.word	0x0800a3ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37c:	3308      	adds	r3, #8
 800a37e:	2101      	movs	r1, #1
 800a380:	4618      	mov	r0, r3
 800a382:	f001 fdef 	bl	800bf64 <RCCEx_PLL2_Config>
 800a386:	4603      	mov	r3, r0
 800a388:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a38c:	e00f      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a38e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a392:	3328      	adds	r3, #40	; 0x28
 800a394:	2101      	movs	r1, #1
 800a396:	4618      	mov	r0, r3
 800a398:	f001 fe96 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a39c:	4603      	mov	r3, r0
 800a39e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a3a2:	e004      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3aa:	e000      	b.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a3ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10b      	bne.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a3b6:	4b6c      	ldr	r3, [pc, #432]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ba:	f023 0107 	bic.w	r1, r3, #7
 800a3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3c6:	4a68      	ldr	r2, [pc, #416]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3c8:	430b      	orrs	r3, r1
 800a3ca:	6593      	str	r3, [r2, #88]	; 0x58
 800a3cc:	e003      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	f002 0320 	and.w	r3, r2, #32
 800a3e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	d055      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a402:	d033      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a404:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a408:	d82c      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a40a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a40e:	d02f      	beq.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a414:	d826      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a416:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a41a:	d02b      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a41c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a420:	d820      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a426:	d012      	beq.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a42c:	d81a      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d022      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a436:	d115      	bne.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a43c:	3308      	adds	r3, #8
 800a43e:	2100      	movs	r1, #0
 800a440:	4618      	mov	r0, r3
 800a442:	f001 fd8f 	bl	800bf64 <RCCEx_PLL2_Config>
 800a446:	4603      	mov	r3, r0
 800a448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a44c:	e015      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a452:	3328      	adds	r3, #40	; 0x28
 800a454:	2102      	movs	r1, #2
 800a456:	4618      	mov	r0, r3
 800a458:	f001 fe36 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a45c:	4603      	mov	r3, r0
 800a45e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a462:	e00a      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a46a:	e006      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a46c:	bf00      	nop
 800a46e:	e004      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a470:	bf00      	nop
 800a472:	e002      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a474:	bf00      	nop
 800a476:	e000      	b.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a47a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10b      	bne.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a482:	4b39      	ldr	r3, [pc, #228]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a486:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a48e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a492:	4a35      	ldr	r2, [pc, #212]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a494:	430b      	orrs	r3, r1
 800a496:	6553      	str	r3, [r2, #84]	; 0x54
 800a498:	e003      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a49a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a49e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a4ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a4b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	d058      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a4c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a4ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4ce:	d033      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a4d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4d4:	d82c      	bhi.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4da:	d02f      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a4dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4e0:	d826      	bhi.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4e6:	d02b      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a4e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4ec:	d820      	bhi.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4f2:	d012      	beq.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a4f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4f8:	d81a      	bhi.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d022      	beq.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a4fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a502:	d115      	bne.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a508:	3308      	adds	r3, #8
 800a50a:	2100      	movs	r1, #0
 800a50c:	4618      	mov	r0, r3
 800a50e:	f001 fd29 	bl	800bf64 <RCCEx_PLL2_Config>
 800a512:	4603      	mov	r3, r0
 800a514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a518:	e015      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a51e:	3328      	adds	r3, #40	; 0x28
 800a520:	2102      	movs	r1, #2
 800a522:	4618      	mov	r0, r3
 800a524:	f001 fdd0 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a528:	4603      	mov	r3, r0
 800a52a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a52e:	e00a      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a536:	e006      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a538:	bf00      	nop
 800a53a:	e004      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a53c:	bf00      	nop
 800a53e:	e002      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a540:	bf00      	nop
 800a542:	e000      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a544:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10e      	bne.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a54e:	4b06      	ldr	r3, [pc, #24]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a552:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a55a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a55e:	4a02      	ldr	r2, [pc, #8]	; (800a568 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a560:	430b      	orrs	r3, r1
 800a562:	6593      	str	r3, [r2, #88]	; 0x58
 800a564:	e006      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a566:	bf00      	nop
 800a568:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a56c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a570:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a584:	2300      	movs	r3, #0
 800a586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a58a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a58e:	460b      	mov	r3, r1
 800a590:	4313      	orrs	r3, r2
 800a592:	d055      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a598:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a59c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a5a0:	d033      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a5a2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a5a6:	d82c      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ac:	d02f      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a5ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5b2:	d826      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5b8:	d02b      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a5ba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5be:	d820      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5c4:	d012      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a5c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5ca:	d81a      	bhi.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d022      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a5d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5d4:	d115      	bne.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5da:	3308      	adds	r3, #8
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f001 fcc0 	bl	800bf64 <RCCEx_PLL2_Config>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a5ea:	e015      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5f0:	3328      	adds	r3, #40	; 0x28
 800a5f2:	2102      	movs	r1, #2
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f001 fd67 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a600:	e00a      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a608:	e006      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a60a:	bf00      	nop
 800a60c:	e004      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a60e:	bf00      	nop
 800a610:	e002      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a612:	bf00      	nop
 800a614:	e000      	b.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a616:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a618:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10b      	bne.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a620:	4ba1      	ldr	r3, [pc, #644]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a624:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a62c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a630:	4a9d      	ldr	r2, [pc, #628]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a632:	430b      	orrs	r3, r1
 800a634:	6593      	str	r3, [r2, #88]	; 0x58
 800a636:	e003      	b.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a63c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a648:	f002 0308 	and.w	r3, r2, #8
 800a64c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a650:	2300      	movs	r3, #0
 800a652:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a656:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a65a:	460b      	mov	r3, r1
 800a65c:	4313      	orrs	r3, r2
 800a65e:	d01e      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a66c:	d10c      	bne.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a672:	3328      	adds	r3, #40	; 0x28
 800a674:	2102      	movs	r1, #2
 800a676:	4618      	mov	r0, r3
 800a678:	f001 fd26 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d002      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a688:	4b87      	ldr	r3, [pc, #540]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a68c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a698:	4a83      	ldr	r2, [pc, #524]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a69a:	430b      	orrs	r3, r1
 800a69c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	f002 0310 	and.w	r3, r2, #16
 800a6aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a6b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	d01e      	beq.n	800a6fc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6ca:	d10c      	bne.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a6cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6d0:	3328      	adds	r3, #40	; 0x28
 800a6d2:	2102      	movs	r1, #2
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f001 fcf7 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a6e6:	4b70      	ldr	r3, [pc, #448]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6f6:	4a6c      	ldr	r2, [pc, #432]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6f8:	430b      	orrs	r3, r1
 800a6fa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a70c:	2300      	movs	r3, #0
 800a70e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a712:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a716:	460b      	mov	r3, r1
 800a718:	4313      	orrs	r3, r2
 800a71a:	d03e      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a720:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a728:	d022      	beq.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a72a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a72e:	d81b      	bhi.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a730:	2b00      	cmp	r3, #0
 800a732:	d003      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a738:	d00b      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a73a:	e015      	b.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a740:	3308      	adds	r3, #8
 800a742:	2100      	movs	r1, #0
 800a744:	4618      	mov	r0, r3
 800a746:	f001 fc0d 	bl	800bf64 <RCCEx_PLL2_Config>
 800a74a:	4603      	mov	r3, r0
 800a74c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a750:	e00f      	b.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a756:	3328      	adds	r3, #40	; 0x28
 800a758:	2102      	movs	r1, #2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f001 fcb4 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a760:	4603      	mov	r3, r0
 800a762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a766:	e004      	b.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a768:	2301      	movs	r3, #1
 800a76a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a76e:	e000      	b.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a770:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a772:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10b      	bne.n	800a792 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a77a:	4b4b      	ldr	r3, [pc, #300]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a77c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a77e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a786:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a78a:	4a47      	ldr	r2, [pc, #284]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a78c:	430b      	orrs	r3, r1
 800a78e:	6593      	str	r3, [r2, #88]	; 0x58
 800a790:	e003      	b.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a792:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a796:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a7a6:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a7ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	d03b      	beq.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7c2:	d01f      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a7c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7c8:	d818      	bhi.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a7ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7ce:	d003      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a7d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7d4:	d007      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a7d6:	e011      	b.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7d8:	4b33      	ldr	r3, [pc, #204]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	4a32      	ldr	r2, [pc, #200]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a7e4:	e00f      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ea:	3328      	adds	r3, #40	; 0x28
 800a7ec:	2101      	movs	r1, #1
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f001 fc6a 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a7fa:	e004      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a802:	e000      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a804:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10b      	bne.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a80e:	4b26      	ldr	r3, [pc, #152]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a812:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a81a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a81e:	4a22      	ldr	r2, [pc, #136]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a820:	430b      	orrs	r3, r1
 800a822:	6553      	str	r3, [r2, #84]	; 0x54
 800a824:	e003      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a82a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a82e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a83a:	673b      	str	r3, [r7, #112]	; 0x70
 800a83c:	2300      	movs	r3, #0
 800a83e:	677b      	str	r3, [r7, #116]	; 0x74
 800a840:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a844:	460b      	mov	r3, r1
 800a846:	4313      	orrs	r3, r2
 800a848:	d034      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a84e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a850:	2b00      	cmp	r3, #0
 800a852:	d003      	beq.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a858:	d007      	beq.n	800a86a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a85a:	e011      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a85c:	4b12      	ldr	r3, [pc, #72]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a860:	4a11      	ldr	r2, [pc, #68]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a868:	e00e      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a86e:	3308      	adds	r3, #8
 800a870:	2102      	movs	r1, #2
 800a872:	4618      	mov	r0, r3
 800a874:	f001 fb76 	bl	800bf64 <RCCEx_PLL2_Config>
 800a878:	4603      	mov	r3, r0
 800a87a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a87e:	e003      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a886:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a888:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d10d      	bne.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a890:	4b05      	ldr	r3, [pc, #20]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a894:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a89e:	4a02      	ldr	r2, [pc, #8]	; (800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a8a0:	430b      	orrs	r3, r1
 800a8a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a8a4:	e006      	b.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a8a6:	bf00      	nop
 800a8a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a8c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	d00c      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d4:	3328      	adds	r3, #40	; 0x28
 800a8d6:	2102      	movs	r1, #2
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f001 fbf5 	bl	800c0c8 <RCCEx_PLL3_Config>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a8f6:	663b      	str	r3, [r7, #96]	; 0x60
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	667b      	str	r3, [r7, #100]	; 0x64
 800a8fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a900:	460b      	mov	r3, r1
 800a902:	4313      	orrs	r3, r2
 800a904:	d038      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a90a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a90e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a912:	d018      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a918:	d811      	bhi.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a91a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a91e:	d014      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a924:	d80b      	bhi.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a926:	2b00      	cmp	r3, #0
 800a928:	d011      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a92a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a92e:	d106      	bne.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a930:	4bc3      	ldr	r3, [pc, #780]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a934:	4ac2      	ldr	r2, [pc, #776]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a93a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a93c:	e008      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a944:	e004      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a946:	bf00      	nop
 800a948:	e002      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a94a:	bf00      	nop
 800a94c:	e000      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a94e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a950:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10b      	bne.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a958:	4bb9      	ldr	r3, [pc, #740]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a95a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a95c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a968:	4ab5      	ldr	r2, [pc, #724]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a96a:	430b      	orrs	r3, r1
 800a96c:	6553      	str	r3, [r2, #84]	; 0x54
 800a96e:	e003      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a974:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a980:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a984:	65bb      	str	r3, [r7, #88]	; 0x58
 800a986:	2300      	movs	r3, #0
 800a988:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a98a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a98e:	460b      	mov	r3, r1
 800a990:	4313      	orrs	r3, r2
 800a992:	d009      	beq.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a994:	4baa      	ldr	r3, [pc, #680]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a998:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9a2:	4aa7      	ldr	r2, [pc, #668]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9a4:	430b      	orrs	r3, r1
 800a9a6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a9b4:	653b      	str	r3, [r7, #80]	; 0x50
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	657b      	str	r3, [r7, #84]	; 0x54
 800a9ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a9be:	460b      	mov	r3, r1
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	d00a      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a9c4:	4b9e      	ldr	r3, [pc, #632]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a9d4:	4a9a      	ldr	r2, [pc, #616]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9d6:	430b      	orrs	r3, r1
 800a9d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a9e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	d009      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a9f6:	4b92      	ldr	r3, [pc, #584]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9fa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa04:	4a8e      	ldr	r2, [pc, #568]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa06:	430b      	orrs	r3, r1
 800aa08:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aa0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa12:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800aa16:	643b      	str	r3, [r7, #64]	; 0x40
 800aa18:	2300      	movs	r3, #0
 800aa1a:	647b      	str	r3, [r7, #68]	; 0x44
 800aa1c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800aa20:	460b      	mov	r3, r1
 800aa22:	4313      	orrs	r3, r2
 800aa24:	d00e      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa26:	4b86      	ldr	r3, [pc, #536]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	4a85      	ldr	r2, [pc, #532]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa30:	6113      	str	r3, [r2, #16]
 800aa32:	4b83      	ldr	r3, [pc, #524]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa34:	6919      	ldr	r1, [r3, #16]
 800aa36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800aa3e:	4a80      	ldr	r2, [pc, #512]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa40:	430b      	orrs	r3, r1
 800aa42:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aa44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800aa50:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa52:	2300      	movs	r3, #0
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa56:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	d009      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aa60:	4b77      	ldr	r3, [pc, #476]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa64:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aa68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa6e:	4a74      	ldr	r2, [pc, #464]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa70:	430b      	orrs	r3, r1
 800aa72:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aa74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800aa80:	633b      	str	r3, [r7, #48]	; 0x30
 800aa82:	2300      	movs	r3, #0
 800aa84:	637b      	str	r3, [r7, #52]	; 0x34
 800aa86:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	d00a      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aa90:	4b6b      	ldr	r3, [pc, #428]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa94:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800aa98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaa0:	4a67      	ldr	r2, [pc, #412]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aaa2:	430b      	orrs	r3, r1
 800aaa4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aaa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	2100      	movs	r1, #0
 800aab0:	62b9      	str	r1, [r7, #40]	; 0x28
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aab8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800aabc:	460b      	mov	r3, r1
 800aabe:	4313      	orrs	r3, r2
 800aac0:	d011      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aac6:	3308      	adds	r3, #8
 800aac8:	2100      	movs	r1, #0
 800aaca:	4618      	mov	r0, r3
 800aacc:	f001 fa4a 	bl	800bf64 <RCCEx_PLL2_Config>
 800aad0:	4603      	mov	r3, r0
 800aad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aae2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	2100      	movs	r1, #0
 800aaf0:	6239      	str	r1, [r7, #32]
 800aaf2:	f003 0302 	and.w	r3, r3, #2
 800aaf6:	627b      	str	r3, [r7, #36]	; 0x24
 800aaf8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aafc:	460b      	mov	r3, r1
 800aafe:	4313      	orrs	r3, r2
 800ab00:	d011      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ab02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab06:	3308      	adds	r3, #8
 800ab08:	2101      	movs	r1, #1
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f001 fa2a 	bl	800bf64 <RCCEx_PLL2_Config>
 800ab10:	4603      	mov	r3, r0
 800ab12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d003      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ab26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	2100      	movs	r1, #0
 800ab30:	61b9      	str	r1, [r7, #24]
 800ab32:	f003 0304 	and.w	r3, r3, #4
 800ab36:	61fb      	str	r3, [r7, #28]
 800ab38:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	d011      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab46:	3308      	adds	r3, #8
 800ab48:	2102      	movs	r1, #2
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f001 fa0a 	bl	800bf64 <RCCEx_PLL2_Config>
 800ab50:	4603      	mov	r3, r0
 800ab52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ab66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab6e:	2100      	movs	r1, #0
 800ab70:	6139      	str	r1, [r7, #16]
 800ab72:	f003 0308 	and.w	r3, r3, #8
 800ab76:	617b      	str	r3, [r7, #20]
 800ab78:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	d011      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab86:	3328      	adds	r3, #40	; 0x28
 800ab88:	2100      	movs	r1, #0
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f001 fa9c 	bl	800c0c8 <RCCEx_PLL3_Config>
 800ab90:	4603      	mov	r3, r0
 800ab92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ab96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aba2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	2100      	movs	r1, #0
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	f003 0310 	and.w	r3, r3, #16
 800abb6:	60fb      	str	r3, [r7, #12]
 800abb8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800abbc:	460b      	mov	r3, r1
 800abbe:	4313      	orrs	r3, r2
 800abc0:	d011      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc6:	3328      	adds	r3, #40	; 0x28
 800abc8:	2101      	movs	r1, #1
 800abca:	4618      	mov	r0, r3
 800abcc:	f001 fa7c 	bl	800c0c8 <RCCEx_PLL3_Config>
 800abd0:	4603      	mov	r3, r0
 800abd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800abd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800abe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	2100      	movs	r1, #0
 800abf0:	6039      	str	r1, [r7, #0]
 800abf2:	f003 0320 	and.w	r3, r3, #32
 800abf6:	607b      	str	r3, [r7, #4]
 800abf8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800abfc:	460b      	mov	r3, r1
 800abfe:	4313      	orrs	r3, r2
 800ac00:	d011      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac06:	3328      	adds	r3, #40	; 0x28
 800ac08:	2102      	movs	r1, #2
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f001 fa5c 	bl	800c0c8 <RCCEx_PLL3_Config>
 800ac10:	4603      	mov	r3, r0
 800ac12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ac16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d003      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ac26:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	e000      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac40:	58024400 	.word	0x58024400

0800ac44 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b090      	sub	sp, #64	; 0x40
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ac4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac52:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ac56:	430b      	orrs	r3, r1
 800ac58:	f040 8094 	bne.w	800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ac5c:	4b9e      	ldr	r3, [pc, #632]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac60:	f003 0307 	and.w	r3, r3, #7
 800ac64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	f200 8087 	bhi.w	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ac6e:	a201      	add	r2, pc, #4	; (adr r2, 800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ac70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac74:	0800ac89 	.word	0x0800ac89
 800ac78:	0800acb1 	.word	0x0800acb1
 800ac7c:	0800acd9 	.word	0x0800acd9
 800ac80:	0800ad75 	.word	0x0800ad75
 800ac84:	0800ad01 	.word	0x0800ad01
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac88:	4b93      	ldr	r3, [pc, #588]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac94:	d108      	bne.n	800aca8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f001 f810 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aca4:	f000 bd45 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aca8:	2300      	movs	r3, #0
 800acaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acac:	f000 bd41 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acb0:	4b89      	ldr	r3, [pc, #548]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acbc:	d108      	bne.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acbe:	f107 0318 	add.w	r3, r7, #24
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 fd54 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800accc:	f000 bd31 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acd4:	f000 bd2d 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acd8:	4b7f      	ldr	r3, [pc, #508]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ace0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ace4:	d108      	bne.n	800acf8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ace6:	f107 030c 	add.w	r3, r7, #12
 800acea:	4618      	mov	r0, r3
 800acec:	f000 fe94 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf4:	f000 bd1d 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acf8:	2300      	movs	r3, #0
 800acfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acfc:	f000 bd19 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad00:	4b75      	ldr	r3, [pc, #468]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad08:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad0a:	4b73      	ldr	r3, [pc, #460]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 0304 	and.w	r3, r3, #4
 800ad12:	2b04      	cmp	r3, #4
 800ad14:	d10c      	bne.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ad16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d109      	bne.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad1c:	4b6e      	ldr	r3, [pc, #440]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	08db      	lsrs	r3, r3, #3
 800ad22:	f003 0303 	and.w	r3, r3, #3
 800ad26:	4a6d      	ldr	r2, [pc, #436]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad28:	fa22 f303 	lsr.w	r3, r2, r3
 800ad2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad2e:	e01f      	b.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad30:	4b69      	ldr	r3, [pc, #420]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad3c:	d106      	bne.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ad3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad44:	d102      	bne.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad46:	4b66      	ldr	r3, [pc, #408]	; (800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ad48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad4a:	e011      	b.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad4c:	4b62      	ldr	r3, [pc, #392]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad58:	d106      	bne.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ad5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad60:	d102      	bne.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad62:	4b60      	ldr	r3, [pc, #384]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ad64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad66:	e003      	b.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad6c:	f000 bce1 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad70:	f000 bcdf 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad74:	4b5c      	ldr	r3, [pc, #368]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ad76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad78:	f000 bcdb 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad80:	f000 bcd7 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ad84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad88:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ad8c:	430b      	orrs	r3, r1
 800ad8e:	f040 80ad 	bne.w	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ad92:	4b51      	ldr	r3, [pc, #324]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad96:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ad9a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ad9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ada2:	d056      	beq.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adaa:	f200 8090 	bhi.w	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800adae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb0:	2bc0      	cmp	r3, #192	; 0xc0
 800adb2:	f000 8088 	beq.w	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800adb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb8:	2bc0      	cmp	r3, #192	; 0xc0
 800adba:	f200 8088 	bhi.w	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800adbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc0:	2b80      	cmp	r3, #128	; 0x80
 800adc2:	d032      	beq.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800adc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc6:	2b80      	cmp	r3, #128	; 0x80
 800adc8:	f200 8081 	bhi.w	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800adcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add4:	2b40      	cmp	r3, #64	; 0x40
 800add6:	d014      	beq.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800add8:	e079      	b.n	800aece <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adda:	4b3f      	ldr	r3, [pc, #252]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ade2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ade6:	d108      	bne.n	800adfa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ade8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adec:	4618      	mov	r0, r3
 800adee:	f000 ff67 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf6:	f000 bc9c 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adfe:	f000 bc98 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae02:	4b35      	ldr	r3, [pc, #212]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae0e:	d108      	bne.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae10:	f107 0318 	add.w	r3, r7, #24
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 fcab 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae1e:	f000 bc88 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae26:	f000 bc84 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae2a:	4b2b      	ldr	r3, [pc, #172]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae36:	d108      	bne.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae38:	f107 030c 	add.w	r3, r7, #12
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 fdeb 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae46:	f000 bc74 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae4e:	f000 bc70 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae52:	4b21      	ldr	r3, [pc, #132]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae5c:	4b1e      	ldr	r3, [pc, #120]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 0304 	and.w	r3, r3, #4
 800ae64:	2b04      	cmp	r3, #4
 800ae66:	d10c      	bne.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ae68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d109      	bne.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae6e:	4b1a      	ldr	r3, [pc, #104]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	08db      	lsrs	r3, r3, #3
 800ae74:	f003 0303 	and.w	r3, r3, #3
 800ae78:	4a18      	ldr	r2, [pc, #96]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ae7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae80:	e01f      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae82:	4b15      	ldr	r3, [pc, #84]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae8e:	d106      	bne.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ae90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae96:	d102      	bne.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae98:	4b11      	ldr	r3, [pc, #68]	; (800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ae9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae9c:	e011      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae9e:	4b0e      	ldr	r3, [pc, #56]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeaa:	d106      	bne.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800aeac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aeb2:	d102      	bne.n	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aeb4:	4b0b      	ldr	r3, [pc, #44]	; (800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800aeb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeb8:	e003      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aebe:	f000 bc38 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aec2:	f000 bc36 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aec6:	4b08      	ldr	r3, [pc, #32]	; (800aee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800aec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeca:	f000 bc32 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aece:	2300      	movs	r3, #0
 800aed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed2:	f000 bc2e 	b.w	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aed6:	bf00      	nop
 800aed8:	58024400 	.word	0x58024400
 800aedc:	03d09000 	.word	0x03d09000
 800aee0:	003d0900 	.word	0x003d0900
 800aee4:	017d7840 	.word	0x017d7840
 800aee8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aeec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aef0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800aef4:	430b      	orrs	r3, r1
 800aef6:	f040 809c 	bne.w	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800aefa:	4b9e      	ldr	r3, [pc, #632]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aefc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aefe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800af02:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af0a:	d054      	beq.n	800afb6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800af0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af12:	f200 808b 	bhi.w	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af1c:	f000 8083 	beq.w	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800af20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af26:	f200 8081 	bhi.w	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af30:	d02f      	beq.n	800af92 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af38:	d878      	bhi.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800af3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d004      	beq.n	800af4a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af46:	d012      	beq.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800af48:	e070      	b.n	800b02c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af4a:	4b8a      	ldr	r3, [pc, #552]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af56:	d107      	bne.n	800af68 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af5c:	4618      	mov	r0, r3
 800af5e:	f000 feaf 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af66:	e3e4      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af68:	2300      	movs	r3, #0
 800af6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af6c:	e3e1      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af6e:	4b81      	ldr	r3, [pc, #516]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af7a:	d107      	bne.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af7c:	f107 0318 	add.w	r3, r7, #24
 800af80:	4618      	mov	r0, r3
 800af82:	f000 fbf5 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af86:	69bb      	ldr	r3, [r7, #24]
 800af88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af8a:	e3d2      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af90:	e3cf      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af92:	4b78      	ldr	r3, [pc, #480]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af9e:	d107      	bne.n	800afb0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afa0:	f107 030c 	add.w	r3, r7, #12
 800afa4:	4618      	mov	r0, r3
 800afa6:	f000 fd37 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afae:	e3c0      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afb0:	2300      	movs	r3, #0
 800afb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afb4:	e3bd      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afb6:	4b6f      	ldr	r3, [pc, #444]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afbe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afc0:	4b6c      	ldr	r3, [pc, #432]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f003 0304 	and.w	r3, r3, #4
 800afc8:	2b04      	cmp	r3, #4
 800afca:	d10c      	bne.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800afcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d109      	bne.n	800afe6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afd2:	4b68      	ldr	r3, [pc, #416]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	08db      	lsrs	r3, r3, #3
 800afd8:	f003 0303 	and.w	r3, r3, #3
 800afdc:	4a66      	ldr	r2, [pc, #408]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800afde:	fa22 f303 	lsr.w	r3, r2, r3
 800afe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afe4:	e01e      	b.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afe6:	4b63      	ldr	r3, [pc, #396]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aff2:	d106      	bne.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800aff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800affa:	d102      	bne.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800affc:	4b5f      	ldr	r3, [pc, #380]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800affe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b000:	e010      	b.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b002:	4b5c      	ldr	r3, [pc, #368]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b00a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b00e:	d106      	bne.n	800b01e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b016:	d102      	bne.n	800b01e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b018:	4b59      	ldr	r3, [pc, #356]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b01a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b01c:	e002      	b.n	800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b022:	e386      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b024:	e385      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b026:	4b57      	ldr	r3, [pc, #348]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b02a:	e382      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b02c:	2300      	movs	r3, #0
 800b02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b030:	e37f      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b032:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b036:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b03a:	430b      	orrs	r3, r1
 800b03c:	f040 80a7 	bne.w	800b18e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b040:	4b4c      	ldr	r3, [pc, #304]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b044:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b048:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b050:	d055      	beq.n	800b0fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b058:	f200 8096 	bhi.w	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b062:	f000 8084 	beq.w	800b16e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b06c:	f200 808c 	bhi.w	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b072:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b076:	d030      	beq.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b07e:	f200 8083 	bhi.w	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	2b00      	cmp	r3, #0
 800b086:	d004      	beq.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b08e:	d012      	beq.n	800b0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b090:	e07a      	b.n	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b092:	4b38      	ldr	r3, [pc, #224]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b09a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b09e:	d107      	bne.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f000 fe0b 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ae:	e340      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0b4:	e33d      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0b6:	4b2f      	ldr	r3, [pc, #188]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0c2:	d107      	bne.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0c4:	f107 0318 	add.w	r3, r7, #24
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 fb51 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0d2:	e32e      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0d8:	e32b      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0da:	4b26      	ldr	r3, [pc, #152]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0e6:	d107      	bne.n	800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0e8:	f107 030c 	add.w	r3, r7, #12
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f000 fc93 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0f6:	e31c      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0fc:	e319      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0fe:	4b1d      	ldr	r3, [pc, #116]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b102:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b106:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b108:	4b1a      	ldr	r3, [pc, #104]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b04      	cmp	r3, #4
 800b112:	d10c      	bne.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b116:	2b00      	cmp	r3, #0
 800b118:	d109      	bne.n	800b12e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b11a:	4b16      	ldr	r3, [pc, #88]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	08db      	lsrs	r3, r3, #3
 800b120:	f003 0303 	and.w	r3, r3, #3
 800b124:	4a14      	ldr	r2, [pc, #80]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b126:	fa22 f303 	lsr.w	r3, r2, r3
 800b12a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b12c:	e01e      	b.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b12e:	4b11      	ldr	r3, [pc, #68]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b13a:	d106      	bne.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b13e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b142:	d102      	bne.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b144:	4b0d      	ldr	r3, [pc, #52]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b146:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b148:	e010      	b.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b14a:	4b0a      	ldr	r3, [pc, #40]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b152:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b156:	d106      	bne.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b15a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b15e:	d102      	bne.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b160:	4b07      	ldr	r3, [pc, #28]	; (800b180 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b162:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b164:	e002      	b.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b16a:	e2e2      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b16c:	e2e1      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b16e:	4b05      	ldr	r3, [pc, #20]	; (800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b172:	e2de      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b174:	58024400 	.word	0x58024400
 800b178:	03d09000 	.word	0x03d09000
 800b17c:	003d0900 	.word	0x003d0900
 800b180:	017d7840 	.word	0x017d7840
 800b184:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b18c:	e2d1      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b18e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b192:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b196:	430b      	orrs	r3, r1
 800b198:	f040 809c 	bne.w	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b19c:	4b93      	ldr	r3, [pc, #588]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b19e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1a0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b1a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1ac:	d054      	beq.n	800b258 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1b4:	f200 808b 	bhi.w	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b1be:	f000 8083 	beq.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b1c8:	f200 8081 	bhi.w	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1d2:	d02f      	beq.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1da:	d878      	bhi.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d004      	beq.n	800b1ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1e8:	d012      	beq.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b1ea:	e070      	b.n	800b2ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1ec:	4b7f      	ldr	r3, [pc, #508]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1f8:	d107      	bne.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 fd5e 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b206:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b208:	e293      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b20e:	e290      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b210:	4b76      	ldr	r3, [pc, #472]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b21c:	d107      	bne.n	800b22e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b21e:	f107 0318 	add.w	r3, r7, #24
 800b222:	4618      	mov	r0, r3
 800b224:	f000 faa4 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b22c:	e281      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b22e:	2300      	movs	r3, #0
 800b230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b232:	e27e      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b234:	4b6d      	ldr	r3, [pc, #436]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b23c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b240:	d107      	bne.n	800b252 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b242:	f107 030c 	add.w	r3, r7, #12
 800b246:	4618      	mov	r0, r3
 800b248:	f000 fbe6 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b250:	e26f      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b252:	2300      	movs	r3, #0
 800b254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b256:	e26c      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b258:	4b64      	ldr	r3, [pc, #400]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b25a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b25c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b260:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b262:	4b62      	ldr	r3, [pc, #392]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0304 	and.w	r3, r3, #4
 800b26a:	2b04      	cmp	r3, #4
 800b26c:	d10c      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b26e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b270:	2b00      	cmp	r3, #0
 800b272:	d109      	bne.n	800b288 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b274:	4b5d      	ldr	r3, [pc, #372]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	08db      	lsrs	r3, r3, #3
 800b27a:	f003 0303 	and.w	r3, r3, #3
 800b27e:	4a5c      	ldr	r2, [pc, #368]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b280:	fa22 f303 	lsr.w	r3, r2, r3
 800b284:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b286:	e01e      	b.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b288:	4b58      	ldr	r3, [pc, #352]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b294:	d106      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b298:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b29c:	d102      	bne.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b29e:	4b55      	ldr	r3, [pc, #340]	; (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2a2:	e010      	b.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2a4:	4b51      	ldr	r3, [pc, #324]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2b0:	d106      	bne.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2b8:	d102      	bne.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2ba:	4b4f      	ldr	r3, [pc, #316]	; (800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2be:	e002      	b.n	800b2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b2c4:	e235      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b2c6:	e234      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2c8:	4b4c      	ldr	r3, [pc, #304]	; (800b3fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2cc:	e231      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2d2:	e22e      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b2d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2d8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b2dc:	430b      	orrs	r3, r1
 800b2de:	f040 808f 	bne.w	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b2e2:	4b42      	ldr	r3, [pc, #264]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b2ea:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2f2:	d06b      	beq.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2fa:	d874      	bhi.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b302:	d056      	beq.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b30a:	d86c      	bhi.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b312:	d03b      	beq.n	800b38c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b316:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b31a:	d864      	bhi.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b322:	d021      	beq.n	800b368 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b32a:	d85c      	bhi.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d004      	beq.n	800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b338:	d004      	beq.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b33a:	e054      	b.n	800b3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b33c:	f7fe fa0a 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800b340:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b342:	e1f6      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b344:	4b29      	ldr	r3, [pc, #164]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b34c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b350:	d107      	bne.n	800b362 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b352:	f107 0318 	add.w	r3, r7, #24
 800b356:	4618      	mov	r0, r3
 800b358:	f000 fa0a 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b360:	e1e7      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b366:	e1e4      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b368:	4b20      	ldr	r3, [pc, #128]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b374:	d107      	bne.n	800b386 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b376:	f107 030c 	add.w	r3, r7, #12
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 fb4c 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b384:	e1d5      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b38a:	e1d2      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b38c:	4b17      	ldr	r3, [pc, #92]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 0304 	and.w	r3, r3, #4
 800b394:	2b04      	cmp	r3, #4
 800b396:	d109      	bne.n	800b3ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b398:	4b14      	ldr	r3, [pc, #80]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	08db      	lsrs	r3, r3, #3
 800b39e:	f003 0303 	and.w	r3, r3, #3
 800b3a2:	4a13      	ldr	r2, [pc, #76]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b3a4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3aa:	e1c2      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3b0:	e1bf      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b3b2:	4b0e      	ldr	r3, [pc, #56]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3be:	d102      	bne.n	800b3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b3c0:	4b0c      	ldr	r3, [pc, #48]	; (800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3c4:	e1b5      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ca:	e1b2      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3cc:	4b07      	ldr	r3, [pc, #28]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3d8:	d102      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b3da:	4b07      	ldr	r3, [pc, #28]	; (800b3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3de:	e1a8      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3e4:	e1a5      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ea:	e1a2      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3ec:	58024400 	.word	0x58024400
 800b3f0:	03d09000 	.word	0x03d09000
 800b3f4:	003d0900 	.word	0x003d0900
 800b3f8:	017d7840 	.word	0x017d7840
 800b3fc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b400:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b404:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b408:	430b      	orrs	r3, r1
 800b40a:	d173      	bne.n	800b4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b40c:	4b9c      	ldr	r3, [pc, #624]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b40e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b414:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b41c:	d02f      	beq.n	800b47e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b424:	d863      	bhi.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d004      	beq.n	800b436 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b432:	d012      	beq.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b434:	e05b      	b.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b436:	4b92      	ldr	r3, [pc, #584]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b43e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b442:	d107      	bne.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b444:	f107 0318 	add.w	r3, r7, #24
 800b448:	4618      	mov	r0, r3
 800b44a:	f000 f991 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b452:	e16e      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b454:	2300      	movs	r3, #0
 800b456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b458:	e16b      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b45a:	4b89      	ldr	r3, [pc, #548]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b466:	d107      	bne.n	800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b468:	f107 030c 	add.w	r3, r7, #12
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 fad3 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b476:	e15c      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b47c:	e159      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b47e:	4b80      	ldr	r3, [pc, #512]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b482:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b486:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b488:	4b7d      	ldr	r3, [pc, #500]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f003 0304 	and.w	r3, r3, #4
 800b490:	2b04      	cmp	r3, #4
 800b492:	d10c      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b496:	2b00      	cmp	r3, #0
 800b498:	d109      	bne.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b49a:	4b79      	ldr	r3, [pc, #484]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	08db      	lsrs	r3, r3, #3
 800b4a0:	f003 0303 	and.w	r3, r3, #3
 800b4a4:	4a77      	ldr	r2, [pc, #476]	; (800b684 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b4a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4ac:	e01e      	b.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4ae:	4b74      	ldr	r3, [pc, #464]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ba:	d106      	bne.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4c2:	d102      	bne.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4c4:	4b70      	ldr	r3, [pc, #448]	; (800b688 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4c8:	e010      	b.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4ca:	4b6d      	ldr	r3, [pc, #436]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4d6:	d106      	bne.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4de:	d102      	bne.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4e0:	4b6a      	ldr	r3, [pc, #424]	; (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4e4:	e002      	b.n	800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b4ea:	e122      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4ec:	e121      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4f2:	e11e      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b4f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4f8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b4fc:	430b      	orrs	r3, r1
 800b4fe:	d133      	bne.n	800b568 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b500:	4b5f      	ldr	r3, [pc, #380]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b508:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d004      	beq.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b516:	d012      	beq.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b518:	e023      	b.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b51a:	4b59      	ldr	r3, [pc, #356]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b526:	d107      	bne.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b52c:	4618      	mov	r0, r3
 800b52e:	f000 fbc7 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b534:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b536:	e0fc      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b53c:	e0f9      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b53e:	4b50      	ldr	r3, [pc, #320]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b54a:	d107      	bne.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b54c:	f107 0318 	add.w	r3, r7, #24
 800b550:	4618      	mov	r0, r3
 800b552:	f000 f90d 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b55a:	e0ea      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b560:	e0e7      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b562:	2300      	movs	r3, #0
 800b564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b566:	e0e4      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b56c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b570:	430b      	orrs	r3, r1
 800b572:	f040 808d 	bne.w	800b690 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b576:	4b42      	ldr	r3, [pc, #264]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b57a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b57e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b586:	d06b      	beq.n	800b660 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b58e:	d874      	bhi.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b596:	d056      	beq.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b59e:	d86c      	bhi.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5a6:	d03b      	beq.n	800b620 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5ae:	d864      	bhi.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5b6:	d021      	beq.n	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5be:	d85c      	bhi.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d004      	beq.n	800b5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5cc:	d004      	beq.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b5ce:	e054      	b.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b5d0:	f000 f8b8 	bl	800b744 <HAL_RCCEx_GetD3PCLK1Freq>
 800b5d4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b5d6:	e0ac      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5d8:	4b29      	ldr	r3, [pc, #164]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5e4:	d107      	bne.n	800b5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5e6:	f107 0318 	add.w	r3, r7, #24
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 f8c0 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5f4:	e09d      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5fa:	e09a      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5fc:	4b20      	ldr	r3, [pc, #128]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b608:	d107      	bne.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b60a:	f107 030c 	add.w	r3, r7, #12
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 fa02 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b618:	e08b      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b61a:	2300      	movs	r3, #0
 800b61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b61e:	e088      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b620:	4b17      	ldr	r3, [pc, #92]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 0304 	and.w	r3, r3, #4
 800b628:	2b04      	cmp	r3, #4
 800b62a:	d109      	bne.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b62c:	4b14      	ldr	r3, [pc, #80]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	08db      	lsrs	r3, r3, #3
 800b632:	f003 0303 	and.w	r3, r3, #3
 800b636:	4a13      	ldr	r2, [pc, #76]	; (800b684 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b638:	fa22 f303 	lsr.w	r3, r2, r3
 800b63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b63e:	e078      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b640:	2300      	movs	r3, #0
 800b642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b644:	e075      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b646:	4b0e      	ldr	r3, [pc, #56]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b64e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b652:	d102      	bne.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b654:	4b0c      	ldr	r3, [pc, #48]	; (800b688 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b656:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b658:	e06b      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b65a:	2300      	movs	r3, #0
 800b65c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b65e:	e068      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b660:	4b07      	ldr	r3, [pc, #28]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b66c:	d102      	bne.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b66e:	4b07      	ldr	r3, [pc, #28]	; (800b68c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b670:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b672:	e05e      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b678:	e05b      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b67a:	2300      	movs	r3, #0
 800b67c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b67e:	e058      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b680:	58024400 	.word	0x58024400
 800b684:	03d09000 	.word	0x03d09000
 800b688:	003d0900 	.word	0x003d0900
 800b68c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b690:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b694:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b698:	430b      	orrs	r3, r1
 800b69a:	d148      	bne.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b69c:	4b27      	ldr	r3, [pc, #156]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b69e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b6a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6ac:	d02a      	beq.n	800b704 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6b4:	d838      	bhi.n	800b728 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b6b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d004      	beq.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6c2:	d00d      	beq.n	800b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b6c4:	e030      	b.n	800b728 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b6c6:	4b1d      	ldr	r3, [pc, #116]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6d2:	d102      	bne.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b6d4:	4b1a      	ldr	r3, [pc, #104]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6d8:	e02b      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6de:	e028      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6e0:	4b16      	ldr	r3, [pc, #88]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6ec:	d107      	bne.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f000 fae4 	bl	800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6fc:	e019      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6fe:	2300      	movs	r3, #0
 800b700:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b702:	e016      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b704:	4b0d      	ldr	r3, [pc, #52]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b70c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b710:	d107      	bne.n	800b722 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b712:	f107 0318 	add.w	r3, r7, #24
 800b716:	4618      	mov	r0, r3
 800b718:	f000 f82a 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b720:	e007      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b722:	2300      	movs	r3, #0
 800b724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b726:	e004      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b728:	2300      	movs	r3, #0
 800b72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b72c:	e001      	b.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b72e:	2300      	movs	r3, #0
 800b730:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b734:	4618      	mov	r0, r3
 800b736:	3740      	adds	r7, #64	; 0x40
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	58024400 	.word	0x58024400
 800b740:	017d7840 	.word	0x017d7840

0800b744 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b748:	f7fd ffd4 	bl	80096f4 <HAL_RCC_GetHCLKFreq>
 800b74c:	4602      	mov	r2, r0
 800b74e:	4b06      	ldr	r3, [pc, #24]	; (800b768 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	091b      	lsrs	r3, r3, #4
 800b754:	f003 0307 	and.w	r3, r3, #7
 800b758:	4904      	ldr	r1, [pc, #16]	; (800b76c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b75a:	5ccb      	ldrb	r3, [r1, r3]
 800b75c:	f003 031f 	and.w	r3, r3, #31
 800b760:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b764:	4618      	mov	r0, r3
 800b766:	bd80      	pop	{r7, pc}
 800b768:	58024400 	.word	0x58024400
 800b76c:	08014f90 	.word	0x08014f90

0800b770 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b770:	b480      	push	{r7}
 800b772:	b089      	sub	sp, #36	; 0x24
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b778:	4ba1      	ldr	r3, [pc, #644]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77c:	f003 0303 	and.w	r3, r3, #3
 800b780:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b782:	4b9f      	ldr	r3, [pc, #636]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b786:	0b1b      	lsrs	r3, r3, #12
 800b788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b78c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b78e:	4b9c      	ldr	r3, [pc, #624]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b792:	091b      	lsrs	r3, r3, #4
 800b794:	f003 0301 	and.w	r3, r3, #1
 800b798:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b79a:	4b99      	ldr	r3, [pc, #612]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79e:	08db      	lsrs	r3, r3, #3
 800b7a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7a4:	693a      	ldr	r2, [r7, #16]
 800b7a6:	fb02 f303 	mul.w	r3, r2, r3
 800b7aa:	ee07 3a90 	vmov	s15, r3
 800b7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f000 8111 	beq.w	800b9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	f000 8083 	beq.w	800b8cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	f200 80a1 	bhi.w	800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d056      	beq.n	800b888 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b7da:	e099      	b.n	800b910 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7dc:	4b88      	ldr	r3, [pc, #544]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 0320 	and.w	r3, r3, #32
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d02d      	beq.n	800b844 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7e8:	4b85      	ldr	r3, [pc, #532]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	08db      	lsrs	r3, r3, #3
 800b7ee:	f003 0303 	and.w	r3, r3, #3
 800b7f2:	4a84      	ldr	r2, [pc, #528]	; (800ba04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b7f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b7f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	ee07 3a90 	vmov	s15, r3
 800b800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	ee07 3a90 	vmov	s15, r3
 800b80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b80e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b812:	4b7b      	ldr	r3, [pc, #492]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b81a:	ee07 3a90 	vmov	s15, r3
 800b81e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b822:	ed97 6a03 	vldr	s12, [r7, #12]
 800b826:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b82a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b82e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b83a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b83e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b842:	e087      	b.n	800b954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	ee07 3a90 	vmov	s15, r3
 800b84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ba0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b856:	4b6a      	ldr	r3, [pc, #424]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b85a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b85e:	ee07 3a90 	vmov	s15, r3
 800b862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b866:	ed97 6a03 	vldr	s12, [r7, #12]
 800b86a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b86e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b87a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b87e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b882:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b886:	e065      	b.n	800b954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	ee07 3a90 	vmov	s15, r3
 800b88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b892:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ba10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b89a:	4b59      	ldr	r3, [pc, #356]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a2:	ee07 3a90 	vmov	s15, r3
 800b8a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8ca:	e043      	b.n	800b954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	ee07 3a90 	vmov	s15, r3
 800b8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ba14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b8da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8de:	4b48      	ldr	r3, [pc, #288]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8e6:	ee07 3a90 	vmov	s15, r3
 800b8ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b90a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b90e:	e021      	b.n	800b954 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	ee07 3a90 	vmov	s15, r3
 800b916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ba10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b91e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b922:	4b37      	ldr	r3, [pc, #220]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b92a:	ee07 3a90 	vmov	s15, r3
 800b92e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b932:	ed97 6a03 	vldr	s12, [r7, #12]
 800b936:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b93a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b93e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b94a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b94e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b952:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b954:	4b2a      	ldr	r3, [pc, #168]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b958:	0a5b      	lsrs	r3, r3, #9
 800b95a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b95e:	ee07 3a90 	vmov	s15, r3
 800b962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b966:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b96a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b96e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b97a:	ee17 2a90 	vmov	r2, s15
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b982:	4b1f      	ldr	r3, [pc, #124]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b986:	0c1b      	lsrs	r3, r3, #16
 800b988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b98c:	ee07 3a90 	vmov	s15, r3
 800b990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b994:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b998:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b99c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9a8:	ee17 2a90 	vmov	r2, s15
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b9b0:	4b13      	ldr	r3, [pc, #76]	; (800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9b4:	0e1b      	lsrs	r3, r3, #24
 800b9b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ba:	ee07 3a90 	vmov	s15, r3
 800b9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9d6:	ee17 2a90 	vmov	r2, s15
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b9de:	e008      	b.n	800b9f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	609a      	str	r2, [r3, #8]
}
 800b9f2:	bf00      	nop
 800b9f4:	3724      	adds	r7, #36	; 0x24
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	58024400 	.word	0x58024400
 800ba04:	03d09000 	.word	0x03d09000
 800ba08:	46000000 	.word	0x46000000
 800ba0c:	4c742400 	.word	0x4c742400
 800ba10:	4a742400 	.word	0x4a742400
 800ba14:	4bbebc20 	.word	0x4bbebc20

0800ba18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b089      	sub	sp, #36	; 0x24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba20:	4ba1      	ldr	r3, [pc, #644]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba24:	f003 0303 	and.w	r3, r3, #3
 800ba28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ba2a:	4b9f      	ldr	r3, [pc, #636]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba2e:	0d1b      	lsrs	r3, r3, #20
 800ba30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ba36:	4b9c      	ldr	r3, [pc, #624]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3a:	0a1b      	lsrs	r3, r3, #8
 800ba3c:	f003 0301 	and.w	r3, r3, #1
 800ba40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ba42:	4b99      	ldr	r3, [pc, #612]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba46:	08db      	lsrs	r3, r3, #3
 800ba48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba4c:	693a      	ldr	r2, [r7, #16]
 800ba4e:	fb02 f303 	mul.w	r3, r2, r3
 800ba52:	ee07 3a90 	vmov	s15, r3
 800ba56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 8111 	beq.w	800bc88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	f000 8083 	beq.w	800bb74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	2b02      	cmp	r3, #2
 800ba72:	f200 80a1 	bhi.w	800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d056      	beq.n	800bb30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ba82:	e099      	b.n	800bbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba84:	4b88      	ldr	r3, [pc, #544]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 0320 	and.w	r3, r3, #32
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d02d      	beq.n	800baec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba90:	4b85      	ldr	r3, [pc, #532]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	08db      	lsrs	r3, r3, #3
 800ba96:	f003 0303 	and.w	r3, r3, #3
 800ba9a:	4a84      	ldr	r2, [pc, #528]	; (800bcac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ba9c:	fa22 f303 	lsr.w	r3, r2, r3
 800baa0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	ee07 3a90 	vmov	s15, r3
 800baa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	ee07 3a90 	vmov	s15, r3
 800bab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baba:	4b7b      	ldr	r3, [pc, #492]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800babc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800babe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bac2:	ee07 3a90 	vmov	s15, r3
 800bac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baca:	ed97 6a03 	vldr	s12, [r7, #12]
 800bace:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800baea:	e087      	b.n	800bbfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	ee07 3a90 	vmov	s15, r3
 800baf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bafe:	4b6a      	ldr	r3, [pc, #424]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb06:	ee07 3a90 	vmov	s15, r3
 800bb0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb2e:	e065      	b.n	800bbfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	ee07 3a90 	vmov	s15, r3
 800bb36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bcb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb42:	4b59      	ldr	r3, [pc, #356]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb4a:	ee07 3a90 	vmov	s15, r3
 800bb4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb52:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb72:	e043      	b.n	800bbfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	ee07 3a90 	vmov	s15, r3
 800bb7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bcbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bb82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb86:	4b48      	ldr	r3, [pc, #288]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb8e:	ee07 3a90 	vmov	s15, r3
 800bb92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb96:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbb6:	e021      	b.n	800bbfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	ee07 3a90 	vmov	s15, r3
 800bbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bcb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bbc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbca:	4b37      	ldr	r3, [pc, #220]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd2:	ee07 3a90 	vmov	s15, r3
 800bbd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbda:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbde:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bbfc:	4b2a      	ldr	r3, [pc, #168]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc00:	0a5b      	lsrs	r3, r3, #9
 800bc02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc06:	ee07 3a90 	vmov	s15, r3
 800bc0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc16:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc22:	ee17 2a90 	vmov	r2, s15
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bc2a:	4b1f      	ldr	r3, [pc, #124]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc2e:	0c1b      	lsrs	r3, r3, #16
 800bc30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc34:	ee07 3a90 	vmov	s15, r3
 800bc38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc44:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc50:	ee17 2a90 	vmov	r2, s15
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bc58:	4b13      	ldr	r3, [pc, #76]	; (800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5c:	0e1b      	lsrs	r3, r3, #24
 800bc5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc62:	ee07 3a90 	vmov	s15, r3
 800bc66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc72:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc7e:	ee17 2a90 	vmov	r2, s15
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bc86:	e008      	b.n	800bc9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	609a      	str	r2, [r3, #8]
}
 800bc9a:	bf00      	nop
 800bc9c:	3724      	adds	r7, #36	; 0x24
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	58024400 	.word	0x58024400
 800bcac:	03d09000 	.word	0x03d09000
 800bcb0:	46000000 	.word	0x46000000
 800bcb4:	4c742400 	.word	0x4c742400
 800bcb8:	4a742400 	.word	0x4a742400
 800bcbc:	4bbebc20 	.word	0x4bbebc20

0800bcc0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b089      	sub	sp, #36	; 0x24
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bcc8:	4ba0      	ldr	r3, [pc, #640]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bccc:	f003 0303 	and.w	r3, r3, #3
 800bcd0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bcd2:	4b9e      	ldr	r3, [pc, #632]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd6:	091b      	lsrs	r3, r3, #4
 800bcd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcdc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bcde:	4b9b      	ldr	r3, [pc, #620]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bce2:	f003 0301 	and.w	r3, r3, #1
 800bce6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bce8:	4b98      	ldr	r3, [pc, #608]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcec:	08db      	lsrs	r3, r3, #3
 800bcee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcf2:	693a      	ldr	r2, [r7, #16]
 800bcf4:	fb02 f303 	mul.w	r3, r2, r3
 800bcf8:	ee07 3a90 	vmov	s15, r3
 800bcfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f000 8111 	beq.w	800bf2e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	f000 8083 	beq.w	800be1a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	f200 80a1 	bhi.w	800be5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bd1c:	69bb      	ldr	r3, [r7, #24]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d003      	beq.n	800bd2a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d056      	beq.n	800bdd6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bd28:	e099      	b.n	800be5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd2a:	4b88      	ldr	r3, [pc, #544]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f003 0320 	and.w	r3, r3, #32
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d02d      	beq.n	800bd92 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd36:	4b85      	ldr	r3, [pc, #532]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	08db      	lsrs	r3, r3, #3
 800bd3c:	f003 0303 	and.w	r3, r3, #3
 800bd40:	4a83      	ldr	r2, [pc, #524]	; (800bf50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bd42:	fa22 f303 	lsr.w	r3, r2, r3
 800bd46:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	ee07 3a90 	vmov	s15, r3
 800bd4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	ee07 3a90 	vmov	s15, r3
 800bd58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd60:	4b7a      	ldr	r3, [pc, #488]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd68:	ee07 3a90 	vmov	s15, r3
 800bd6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd70:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd74:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bf54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd8c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd90:	e087      	b.n	800bea2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	ee07 3a90 	vmov	s15, r3
 800bd98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bda0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda4:	4b69      	ldr	r3, [pc, #420]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bda6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdac:	ee07 3a90 	vmov	s15, r3
 800bdb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bf54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdd4:	e065      	b.n	800bea2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	ee07 3a90 	vmov	s15, r3
 800bddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bf5c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bde4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bde8:	4b58      	ldr	r3, [pc, #352]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdf0:	ee07 3a90 	vmov	s15, r3
 800bdf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdfc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bf54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be18:	e043      	b.n	800bea2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	ee07 3a90 	vmov	s15, r3
 800be20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be24:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800be28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be2c:	4b47      	ldr	r3, [pc, #284]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be34:	ee07 3a90 	vmov	s15, r3
 800be38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800be40:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bf54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be5c:	e021      	b.n	800bea2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	ee07 3a90 	vmov	s15, r3
 800be64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be68:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bf58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800be6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be70:	4b36      	ldr	r3, [pc, #216]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be78:	ee07 3a90 	vmov	s15, r3
 800be7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be80:	ed97 6a03 	vldr	s12, [r7, #12]
 800be84:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bf54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bea0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bea2:	4b2a      	ldr	r3, [pc, #168]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea6:	0a5b      	lsrs	r3, r3, #9
 800bea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beac:	ee07 3a90 	vmov	s15, r3
 800beb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800beb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bebc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bec4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bec8:	ee17 2a90 	vmov	r2, s15
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bed0:	4b1e      	ldr	r3, [pc, #120]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed4:	0c1b      	lsrs	r3, r3, #16
 800bed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beda:	ee07 3a90 	vmov	s15, r3
 800bede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beea:	edd7 6a07 	vldr	s13, [r7, #28]
 800beee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bef6:	ee17 2a90 	vmov	r2, s15
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800befe:	4b13      	ldr	r3, [pc, #76]	; (800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bf00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf02:	0e1b      	lsrs	r3, r3, #24
 800bf04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf08:	ee07 3a90 	vmov	s15, r3
 800bf0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf18:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf24:	ee17 2a90 	vmov	r2, s15
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bf2c:	e008      	b.n	800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	609a      	str	r2, [r3, #8]
}
 800bf40:	bf00      	nop
 800bf42:	3724      	adds	r7, #36	; 0x24
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	58024400 	.word	0x58024400
 800bf50:	03d09000 	.word	0x03d09000
 800bf54:	46000000 	.word	0x46000000
 800bf58:	4c742400 	.word	0x4c742400
 800bf5c:	4a742400 	.word	0x4a742400
 800bf60:	4bbebc20 	.word	0x4bbebc20

0800bf64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bf72:	4b53      	ldr	r3, [pc, #332]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bf74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf76:	f003 0303 	and.w	r3, r3, #3
 800bf7a:	2b03      	cmp	r3, #3
 800bf7c:	d101      	bne.n	800bf82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e099      	b.n	800c0b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bf82:	4b4f      	ldr	r3, [pc, #316]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a4e      	ldr	r2, [pc, #312]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bf88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf8e:	f7f7 f95b 	bl	8003248 <HAL_GetTick>
 800bf92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bf94:	e008      	b.n	800bfa8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bf96:	f7f7 f957 	bl	8003248 <HAL_GetTick>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	d901      	bls.n	800bfa8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bfa4:	2303      	movs	r3, #3
 800bfa6:	e086      	b.n	800c0b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bfa8:	4b45      	ldr	r3, [pc, #276]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d1f0      	bne.n	800bf96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bfb4:	4b42      	ldr	r3, [pc, #264]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bfb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	031b      	lsls	r3, r3, #12
 800bfc2:	493f      	ldr	r1, [pc, #252]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	628b      	str	r3, [r1, #40]	; 0x28
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	689b      	ldr	r3, [r3, #8]
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	025b      	lsls	r3, r3, #9
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	431a      	orrs	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	041b      	lsls	r3, r3, #16
 800bfe6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bfea:	431a      	orrs	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	3b01      	subs	r3, #1
 800bff2:	061b      	lsls	r3, r3, #24
 800bff4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bff8:	4931      	ldr	r1, [pc, #196]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800bffa:	4313      	orrs	r3, r2
 800bffc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bffe:	4b30      	ldr	r3, [pc, #192]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c002:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	695b      	ldr	r3, [r3, #20]
 800c00a:	492d      	ldr	r1, [pc, #180]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c00c:	4313      	orrs	r3, r2
 800c00e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c010:	4b2b      	ldr	r3, [pc, #172]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c014:	f023 0220 	bic.w	r2, r3, #32
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	4928      	ldr	r1, [pc, #160]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c01e:	4313      	orrs	r3, r2
 800c020:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c022:	4b27      	ldr	r3, [pc, #156]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c026:	4a26      	ldr	r2, [pc, #152]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c028:	f023 0310 	bic.w	r3, r3, #16
 800c02c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c02e:	4b24      	ldr	r3, [pc, #144]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c032:	4b24      	ldr	r3, [pc, #144]	; (800c0c4 <RCCEx_PLL2_Config+0x160>)
 800c034:	4013      	ands	r3, r2
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	69d2      	ldr	r2, [r2, #28]
 800c03a:	00d2      	lsls	r2, r2, #3
 800c03c:	4920      	ldr	r1, [pc, #128]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c03e:	4313      	orrs	r3, r2
 800c040:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c042:	4b1f      	ldr	r3, [pc, #124]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c046:	4a1e      	ldr	r2, [pc, #120]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c048:	f043 0310 	orr.w	r3, r3, #16
 800c04c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d106      	bne.n	800c062 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c054:	4b1a      	ldr	r3, [pc, #104]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c058:	4a19      	ldr	r2, [pc, #100]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c05a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c05e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c060:	e00f      	b.n	800c082 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d106      	bne.n	800c076 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c068:	4b15      	ldr	r3, [pc, #84]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06c:	4a14      	ldr	r2, [pc, #80]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c06e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c072:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c074:	e005      	b.n	800c082 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c076:	4b12      	ldr	r3, [pc, #72]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07a:	4a11      	ldr	r2, [pc, #68]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c07c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c080:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c082:	4b0f      	ldr	r3, [pc, #60]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a0e      	ldr	r2, [pc, #56]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c088:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c08c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c08e:	f7f7 f8db 	bl	8003248 <HAL_GetTick>
 800c092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c094:	e008      	b.n	800c0a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c096:	f7f7 f8d7 	bl	8003248 <HAL_GetTick>
 800c09a:	4602      	mov	r2, r0
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d901      	bls.n	800c0a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	e006      	b.n	800c0b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c0a8:	4b05      	ldr	r3, [pc, #20]	; (800c0c0 <RCCEx_PLL2_Config+0x15c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d0f0      	beq.n	800c096 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	58024400 	.word	0x58024400
 800c0c4:	ffff0007 	.word	0xffff0007

0800c0c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b084      	sub	sp, #16
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c0d6:	4b53      	ldr	r3, [pc, #332]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0da:	f003 0303 	and.w	r3, r3, #3
 800c0de:	2b03      	cmp	r3, #3
 800c0e0:	d101      	bne.n	800c0e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e099      	b.n	800c21a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c0e6:	4b4f      	ldr	r3, [pc, #316]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a4e      	ldr	r2, [pc, #312]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c0ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0f2:	f7f7 f8a9 	bl	8003248 <HAL_GetTick>
 800c0f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c0f8:	e008      	b.n	800c10c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c0fa:	f7f7 f8a5 	bl	8003248 <HAL_GetTick>
 800c0fe:	4602      	mov	r2, r0
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	1ad3      	subs	r3, r2, r3
 800c104:	2b02      	cmp	r3, #2
 800c106:	d901      	bls.n	800c10c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c108:	2303      	movs	r3, #3
 800c10a:	e086      	b.n	800c21a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c10c:	4b45      	ldr	r3, [pc, #276]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1f0      	bne.n	800c0fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c118:	4b42      	ldr	r3, [pc, #264]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c11c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	051b      	lsls	r3, r3, #20
 800c126:	493f      	ldr	r1, [pc, #252]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c128:	4313      	orrs	r3, r2
 800c12a:	628b      	str	r3, [r1, #40]	; 0x28
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	3b01      	subs	r3, #1
 800c132:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	3b01      	subs	r3, #1
 800c13c:	025b      	lsls	r3, r3, #9
 800c13e:	b29b      	uxth	r3, r3
 800c140:	431a      	orrs	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	3b01      	subs	r3, #1
 800c148:	041b      	lsls	r3, r3, #16
 800c14a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c14e:	431a      	orrs	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	691b      	ldr	r3, [r3, #16]
 800c154:	3b01      	subs	r3, #1
 800c156:	061b      	lsls	r3, r3, #24
 800c158:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c15c:	4931      	ldr	r1, [pc, #196]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c15e:	4313      	orrs	r3, r2
 800c160:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c162:	4b30      	ldr	r3, [pc, #192]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c166:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	695b      	ldr	r3, [r3, #20]
 800c16e:	492d      	ldr	r1, [pc, #180]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c170:	4313      	orrs	r3, r2
 800c172:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c174:	4b2b      	ldr	r3, [pc, #172]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c178:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	4928      	ldr	r1, [pc, #160]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c182:	4313      	orrs	r3, r2
 800c184:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c186:	4b27      	ldr	r3, [pc, #156]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18a:	4a26      	ldr	r2, [pc, #152]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c18c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c190:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c192:	4b24      	ldr	r3, [pc, #144]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c194:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c196:	4b24      	ldr	r3, [pc, #144]	; (800c228 <RCCEx_PLL3_Config+0x160>)
 800c198:	4013      	ands	r3, r2
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	69d2      	ldr	r2, [r2, #28]
 800c19e:	00d2      	lsls	r2, r2, #3
 800c1a0:	4920      	ldr	r1, [pc, #128]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c1a6:	4b1f      	ldr	r3, [pc, #124]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1aa:	4a1e      	ldr	r2, [pc, #120]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d106      	bne.n	800c1c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c1b8:	4b1a      	ldr	r3, [pc, #104]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1bc:	4a19      	ldr	r2, [pc, #100]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c1c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1c4:	e00f      	b.n	800c1e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d106      	bne.n	800c1da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c1cc:	4b15      	ldr	r3, [pc, #84]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d0:	4a14      	ldr	r2, [pc, #80]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c1d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c1d8:	e005      	b.n	800c1e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c1da:	4b12      	ldr	r3, [pc, #72]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1de:	4a11      	ldr	r2, [pc, #68]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c1e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c1e6:	4b0f      	ldr	r3, [pc, #60]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a0e      	ldr	r2, [pc, #56]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c1ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1f2:	f7f7 f829 	bl	8003248 <HAL_GetTick>
 800c1f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c1f8:	e008      	b.n	800c20c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c1fa:	f7f7 f825 	bl	8003248 <HAL_GetTick>
 800c1fe:	4602      	mov	r2, r0
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	1ad3      	subs	r3, r2, r3
 800c204:	2b02      	cmp	r3, #2
 800c206:	d901      	bls.n	800c20c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c208:	2303      	movs	r3, #3
 800c20a:	e006      	b.n	800c21a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c20c:	4b05      	ldr	r3, [pc, #20]	; (800c224 <RCCEx_PLL3_Config+0x15c>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c214:	2b00      	cmp	r3, #0
 800c216:	d0f0      	beq.n	800c1fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c218:	7bfb      	ldrb	r3, [r7, #15]
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	58024400 	.word	0x58024400
 800c228:	ffff0007 	.word	0xffff0007

0800c22c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d071      	beq.n	800c322 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c244:	b2db      	uxtb	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	d106      	bne.n	800c258 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f7f5 fe10 	bl	8001e78 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2202      	movs	r2, #2
 800c25c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	f003 0310 	and.w	r3, r3, #16
 800c26a:	2b10      	cmp	r3, #16
 800c26c:	d050      	beq.n	800c310 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	22ca      	movs	r2, #202	; 0xca
 800c274:	625a      	str	r2, [r3, #36]	; 0x24
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2253      	movs	r2, #83	; 0x53
 800c27c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f9a0 	bl	800c5c4 <RTC_EnterInitMode>
 800c284:	4603      	mov	r3, r0
 800c286:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c288:	7bfb      	ldrb	r3, [r7, #15]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d124      	bne.n	800c2d8 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	6899      	ldr	r1, [r3, #8]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	4b24      	ldr	r3, [pc, #144]	; (800c32c <HAL_RTC_Init+0x100>)
 800c29a:	400b      	ands	r3, r1
 800c29c:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	6899      	ldr	r1, [r3, #8]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	431a      	orrs	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	699b      	ldr	r3, [r3, #24]
 800c2b2:	431a      	orrs	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	430a      	orrs	r2, r1
 800c2ba:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	0419      	lsls	r1, r3, #16
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68da      	ldr	r2, [r3, #12]
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f9ac 	bl	800c62c <RTC_ExitInitMode>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d113      	bne.n	800c306 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f022 0203 	bic.w	r2, r2, #3
 800c2ec:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	69da      	ldr	r2, [r3, #28]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	431a      	orrs	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	430a      	orrs	r2, r1
 800c304:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	22ff      	movs	r2, #255	; 0xff
 800c30c:	625a      	str	r2, [r3, #36]	; 0x24
 800c30e:	e001      	b.n	800c314 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c314:	7bfb      	ldrb	r3, [r7, #15]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d103      	bne.n	800c322 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2201      	movs	r2, #1
 800c31e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c322:	7bfb      	ldrb	r3, [r7, #15]
}
 800c324:	4618      	mov	r0, r3
 800c326:	3710      	adds	r7, #16
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	ff8fffbf 	.word	0xff8fffbf

0800c330 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c330:	b590      	push	{r4, r7, lr}
 800c332:	b087      	sub	sp, #28
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d101      	bne.n	800c34a <HAL_RTC_SetTime+0x1a>
 800c346:	2302      	movs	r3, #2
 800c348:	e089      	b.n	800c45e <HAL_RTC_SetTime+0x12e>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2201      	movs	r2, #1
 800c34e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2202      	movs	r2, #2
 800c356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	22ca      	movs	r2, #202	; 0xca
 800c360:	625a      	str	r2, [r3, #36]	; 0x24
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2253      	movs	r2, #83	; 0x53
 800c368:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f000 f92a 	bl	800c5c4 <RTC_EnterInitMode>
 800c370:	4603      	mov	r3, r0
 800c372:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c374:	7cfb      	ldrb	r3, [r7, #19]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d161      	bne.n	800c43e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d126      	bne.n	800c3ce <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d102      	bne.n	800c394 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	2200      	movs	r2, #0
 800c392:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	4618      	mov	r0, r3
 800c39a:	f000 f985 	bl	800c6a8 <RTC_ByteToBcd2>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	785b      	ldrb	r3, [r3, #1]
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 f97e 	bl	800c6a8 <RTC_ByteToBcd2>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c3b0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	789b      	ldrb	r3, [r3, #2]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f000 f976 	bl	800c6a8 <RTC_ByteToBcd2>
 800c3bc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c3be:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	78db      	ldrb	r3, [r3, #3]
 800c3c6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	617b      	str	r3, [r7, #20]
 800c3cc:	e018      	b.n	800c400 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d102      	bne.n	800c3e2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	785b      	ldrb	r3, [r3, #1]
 800c3ec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c3ee:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c3f4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	78db      	ldrb	r3, [r3, #3]
 800c3fa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	6979      	ldr	r1, [r7, #20]
 800c406:	4b18      	ldr	r3, [pc, #96]	; (800c468 <HAL_RTC_SetTime+0x138>)
 800c408:	400b      	ands	r3, r1
 800c40a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	689a      	ldr	r2, [r3, #8]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c41a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	6899      	ldr	r1, [r3, #8]
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	68da      	ldr	r2, [r3, #12]
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	431a      	orrs	r2, r3
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	430a      	orrs	r2, r1
 800c432:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c434:	68f8      	ldr	r0, [r7, #12]
 800c436:	f000 f8f9 	bl	800c62c <RTC_ExitInitMode>
 800c43a:	4603      	mov	r3, r0
 800c43c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	22ff      	movs	r2, #255	; 0xff
 800c444:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c446:	7cfb      	ldrb	r3, [r7, #19]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d103      	bne.n	800c454 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c45c:	7cfb      	ldrb	r3, [r7, #19]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	371c      	adds	r7, #28
 800c462:	46bd      	mov	sp, r7
 800c464:	bd90      	pop	{r4, r7, pc}
 800c466:	bf00      	nop
 800c468:	007f7f7f 	.word	0x007f7f7f

0800c46c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c46c:	b590      	push	{r4, r7, lr}
 800c46e:	b087      	sub	sp, #28
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c47e:	2b01      	cmp	r3, #1
 800c480:	d101      	bne.n	800c486 <HAL_RTC_SetDate+0x1a>
 800c482:	2302      	movs	r3, #2
 800c484:	e073      	b.n	800c56e <HAL_RTC_SetDate+0x102>
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2201      	movs	r2, #1
 800c48a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2202      	movs	r2, #2
 800c492:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d10e      	bne.n	800c4ba <HAL_RTC_SetDate+0x4e>
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	785b      	ldrb	r3, [r3, #1]
 800c4a0:	f003 0310 	and.w	r3, r3, #16
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d008      	beq.n	800c4ba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	785b      	ldrb	r3, [r3, #1]
 800c4ac:	f023 0310 	bic.w	r3, r3, #16
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	330a      	adds	r3, #10
 800c4b4:	b2da      	uxtb	r2, r3
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d11c      	bne.n	800c4fa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	78db      	ldrb	r3, [r3, #3]
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f000 f8ef 	bl	800c6a8 <RTC_ByteToBcd2>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	785b      	ldrb	r3, [r3, #1]
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f000 f8e8 	bl	800c6a8 <RTC_ByteToBcd2>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c4dc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	789b      	ldrb	r3, [r3, #2]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f000 f8e0 	bl	800c6a8 <RTC_ByteToBcd2>
 800c4e8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c4ea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	617b      	str	r3, [r7, #20]
 800c4f8:	e00e      	b.n	800c518 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	78db      	ldrb	r3, [r3, #3]
 800c4fe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	785b      	ldrb	r3, [r3, #1]
 800c504:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c506:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c508:	68ba      	ldr	r2, [r7, #8]
 800c50a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c50c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c514:	4313      	orrs	r3, r2
 800c516:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	22ca      	movs	r2, #202	; 0xca
 800c51e:	625a      	str	r2, [r3, #36]	; 0x24
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2253      	movs	r2, #83	; 0x53
 800c526:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f000 f84b 	bl	800c5c4 <RTC_EnterInitMode>
 800c52e:	4603      	mov	r3, r0
 800c530:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c532:	7cfb      	ldrb	r3, [r7, #19]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d10a      	bne.n	800c54e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	6979      	ldr	r1, [r7, #20]
 800c53e:	4b0e      	ldr	r3, [pc, #56]	; (800c578 <HAL_RTC_SetDate+0x10c>)
 800c540:	400b      	ands	r3, r1
 800c542:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f000 f871 	bl	800c62c <RTC_ExitInitMode>
 800c54a:	4603      	mov	r3, r0
 800c54c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	22ff      	movs	r2, #255	; 0xff
 800c554:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c556:	7cfb      	ldrb	r3, [r7, #19]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d103      	bne.n	800c564 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2201      	movs	r2, #1
 800c560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c56c:	7cfb      	ldrb	r3, [r7, #19]


}
 800c56e:	4618      	mov	r0, r3
 800c570:	371c      	adds	r7, #28
 800c572:	46bd      	mov	sp, r7
 800c574:	bd90      	pop	{r4, r7, pc}
 800c576:	bf00      	nop
 800c578:	00ffff3f 	.word	0x00ffff3f

0800c57c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a0d      	ldr	r2, [pc, #52]	; (800c5c0 <HAL_RTC_WaitForSynchro+0x44>)
 800c58a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800c58c:	f7f6 fe5c 	bl	8003248 <HAL_GetTick>
 800c590:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c592:	e009      	b.n	800c5a8 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c594:	f7f6 fe58 	bl	8003248 <HAL_GetTick>
 800c598:	4602      	mov	r2, r0
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5a2:	d901      	bls.n	800c5a8 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	e007      	b.n	800c5b8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	f003 0320 	and.w	r3, r3, #32
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d0ee      	beq.n	800c594 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	0003ff5f 	.word	0x0003ff5f

0800c5c4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d120      	bne.n	800c620 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5e6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c5e8:	f7f6 fe2e 	bl	8003248 <HAL_GetTick>
 800c5ec:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c5ee:	e00d      	b.n	800c60c <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c5f0:	f7f6 fe2a 	bl	8003248 <HAL_GetTick>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5fe:	d905      	bls.n	800c60c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c600:	2303      	movs	r3, #3
 800c602:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2203      	movs	r2, #3
 800c608:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c616:	2b00      	cmp	r3, #0
 800c618:	d102      	bne.n	800c620 <RTC_EnterInitMode+0x5c>
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
 800c61c:	2b03      	cmp	r3, #3
 800c61e:	d1e7      	bne.n	800c5f0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800c620:	7bfb      	ldrb	r3, [r7, #15]
}
 800c622:	4618      	mov	r0, r3
 800c624:	3710      	adds	r7, #16
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
	...

0800c62c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c634:	2300      	movs	r3, #0
 800c636:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800c638:	4b1a      	ldr	r3, [pc, #104]	; (800c6a4 <RTC_ExitInitMode+0x78>)
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	4a19      	ldr	r2, [pc, #100]	; (800c6a4 <RTC_ExitInitMode+0x78>)
 800c63e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c642:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c644:	4b17      	ldr	r3, [pc, #92]	; (800c6a4 <RTC_ExitInitMode+0x78>)
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	f003 0320 	and.w	r3, r3, #32
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d10c      	bne.n	800c66a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f7ff ff93 	bl	800c57c <HAL_RTC_WaitForSynchro>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d01e      	beq.n	800c69a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2203      	movs	r2, #3
 800c660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c664:	2303      	movs	r3, #3
 800c666:	73fb      	strb	r3, [r7, #15]
 800c668:	e017      	b.n	800c69a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c66a:	4b0e      	ldr	r3, [pc, #56]	; (800c6a4 <RTC_ExitInitMode+0x78>)
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	4a0d      	ldr	r2, [pc, #52]	; (800c6a4 <RTC_ExitInitMode+0x78>)
 800c670:	f023 0320 	bic.w	r3, r3, #32
 800c674:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7ff ff80 	bl	800c57c <HAL_RTC_WaitForSynchro>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d005      	beq.n	800c68e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2203      	movs	r2, #3
 800c686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c68a:	2303      	movs	r3, #3
 800c68c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c68e:	4b05      	ldr	r3, [pc, #20]	; (800c6a4 <RTC_ExitInitMode+0x78>)
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	4a04      	ldr	r2, [pc, #16]	; (800c6a4 <RTC_ExitInitMode+0x78>)
 800c694:	f043 0320 	orr.w	r3, r3, #32
 800c698:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3710      	adds	r7, #16
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	58004000 	.word	0x58004000

0800c6a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c6b6:	79fb      	ldrb	r3, [r7, #7]
 800c6b8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c6ba:	e005      	b.n	800c6c8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	3301      	adds	r3, #1
 800c6c0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c6c2:	7afb      	ldrb	r3, [r7, #11]
 800c6c4:	3b0a      	subs	r3, #10
 800c6c6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c6c8:	7afb      	ldrb	r3, [r7, #11]
 800c6ca:	2b09      	cmp	r3, #9
 800c6cc:	d8f6      	bhi.n	800c6bc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	011b      	lsls	r3, r3, #4
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	7afb      	ldrb	r3, [r7, #11]
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	b2db      	uxtb	r3, r3
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3714      	adds	r7, #20
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d101      	bne.n	800c6fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e10f      	b.n	800c91a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4a87      	ldr	r2, [pc, #540]	; (800c924 <HAL_SPI_Init+0x23c>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d00f      	beq.n	800c72a <HAL_SPI_Init+0x42>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a86      	ldr	r2, [pc, #536]	; (800c928 <HAL_SPI_Init+0x240>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d00a      	beq.n	800c72a <HAL_SPI_Init+0x42>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	4a84      	ldr	r2, [pc, #528]	; (800c92c <HAL_SPI_Init+0x244>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d005      	beq.n	800c72a <HAL_SPI_Init+0x42>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	2b0f      	cmp	r3, #15
 800c724:	d901      	bls.n	800c72a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c726:	2301      	movs	r3, #1
 800c728:	e0f7      	b.n	800c91a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 f900 	bl	800c930 <SPI_GetPacketSize>
 800c730:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a7b      	ldr	r2, [pc, #492]	; (800c924 <HAL_SPI_Init+0x23c>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d00c      	beq.n	800c756 <HAL_SPI_Init+0x6e>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a79      	ldr	r2, [pc, #484]	; (800c928 <HAL_SPI_Init+0x240>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d007      	beq.n	800c756 <HAL_SPI_Init+0x6e>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	4a78      	ldr	r2, [pc, #480]	; (800c92c <HAL_SPI_Init+0x244>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d002      	beq.n	800c756 <HAL_SPI_Init+0x6e>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2b08      	cmp	r3, #8
 800c754:	d811      	bhi.n	800c77a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c75a:	4a72      	ldr	r2, [pc, #456]	; (800c924 <HAL_SPI_Init+0x23c>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d009      	beq.n	800c774 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4a70      	ldr	r2, [pc, #448]	; (800c928 <HAL_SPI_Init+0x240>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d004      	beq.n	800c774 <HAL_SPI_Init+0x8c>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a6f      	ldr	r2, [pc, #444]	; (800c92c <HAL_SPI_Init+0x244>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d104      	bne.n	800c77e <HAL_SPI_Init+0x96>
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2b10      	cmp	r3, #16
 800c778:	d901      	bls.n	800c77e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c77a:	2301      	movs	r3, #1
 800c77c:	e0cd      	b.n	800c91a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c784:	b2db      	uxtb	r3, r3
 800c786:	2b00      	cmp	r3, #0
 800c788:	d106      	bne.n	800c798 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7f5 fc94 	bl	80020c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2202      	movs	r2, #2
 800c79c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f022 0201 	bic.w	r2, r2, #1
 800c7ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c7ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	699b      	ldr	r3, [r3, #24]
 800c7c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7c4:	d119      	bne.n	800c7fa <HAL_SPI_Init+0x112>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7ce:	d103      	bne.n	800c7d8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d008      	beq.n	800c7ea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d10c      	bne.n	800c7fa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c7e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7e8:	d107      	bne.n	800c7fa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c7f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00f      	beq.n	800c826 <HAL_SPI_Init+0x13e>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	2b06      	cmp	r3, #6
 800c80c:	d90b      	bls.n	800c826 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	430a      	orrs	r2, r1
 800c822:	601a      	str	r2, [r3, #0]
 800c824:	e007      	b.n	800c836 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c834:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	69da      	ldr	r2, [r3, #28]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83e:	431a      	orrs	r2, r3
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	431a      	orrs	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c848:	ea42 0103 	orr.w	r1, r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	68da      	ldr	r2, [r3, #12]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	430a      	orrs	r2, r1
 800c856:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c860:	431a      	orrs	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c866:	431a      	orrs	r2, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	699b      	ldr	r3, [r3, #24]
 800c86c:	431a      	orrs	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	691b      	ldr	r3, [r3, #16]
 800c872:	431a      	orrs	r2, r3
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	695b      	ldr	r3, [r3, #20]
 800c878:	431a      	orrs	r2, r3
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	431a      	orrs	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	431a      	orrs	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c88a:	431a      	orrs	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	431a      	orrs	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c896:	ea42 0103 	orr.w	r1, r2, r3
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	430a      	orrs	r2, r1
 800c8a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d113      	bne.n	800c8d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c8d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f022 0201 	bic.w	r2, r2, #1
 800c8e4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00a      	beq.n	800c908 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	68db      	ldr	r3, [r3, #12]
 800c8f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	430a      	orrs	r2, r1
 800c906:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3710      	adds	r7, #16
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}
 800c922:	bf00      	nop
 800c924:	40013000 	.word	0x40013000
 800c928:	40003800 	.word	0x40003800
 800c92c:	40003c00 	.word	0x40003c00

0800c930 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c93c:	095b      	lsrs	r3, r3, #5
 800c93e:	3301      	adds	r3, #1
 800c940:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	3301      	adds	r3, #1
 800c948:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	3307      	adds	r3, #7
 800c94e:	08db      	lsrs	r3, r3, #3
 800c950:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	fb02 f303 	mul.w	r3, r2, r3
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3714      	adds	r7, #20
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr

0800c966 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b082      	sub	sp, #8
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d101      	bne.n	800c978 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	e049      	b.n	800ca0c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	2b00      	cmp	r3, #0
 800c982:	d106      	bne.n	800c992 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f7f6 f835 	bl	80029fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2202      	movs	r2, #2
 800c996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	3304      	adds	r3, #4
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	4610      	mov	r0, r2
 800c9a6:	f000 fe87 	bl	800d6b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2201      	movs	r2, #1
 800c9e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2201      	movs	r2, #1
 800ca06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d001      	beq.n	800ca2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e054      	b.n	800cad6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2202      	movs	r2, #2
 800ca30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68da      	ldr	r2, [r3, #12]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f042 0201 	orr.w	r2, r2, #1
 800ca42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a26      	ldr	r2, [pc, #152]	; (800cae4 <HAL_TIM_Base_Start_IT+0xd0>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d022      	beq.n	800ca94 <HAL_TIM_Base_Start_IT+0x80>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca56:	d01d      	beq.n	800ca94 <HAL_TIM_Base_Start_IT+0x80>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a22      	ldr	r2, [pc, #136]	; (800cae8 <HAL_TIM_Base_Start_IT+0xd4>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d018      	beq.n	800ca94 <HAL_TIM_Base_Start_IT+0x80>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a21      	ldr	r2, [pc, #132]	; (800caec <HAL_TIM_Base_Start_IT+0xd8>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d013      	beq.n	800ca94 <HAL_TIM_Base_Start_IT+0x80>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a1f      	ldr	r2, [pc, #124]	; (800caf0 <HAL_TIM_Base_Start_IT+0xdc>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d00e      	beq.n	800ca94 <HAL_TIM_Base_Start_IT+0x80>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a1e      	ldr	r2, [pc, #120]	; (800caf4 <HAL_TIM_Base_Start_IT+0xe0>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d009      	beq.n	800ca94 <HAL_TIM_Base_Start_IT+0x80>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a1c      	ldr	r2, [pc, #112]	; (800caf8 <HAL_TIM_Base_Start_IT+0xe4>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d004      	beq.n	800ca94 <HAL_TIM_Base_Start_IT+0x80>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a1b      	ldr	r2, [pc, #108]	; (800cafc <HAL_TIM_Base_Start_IT+0xe8>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d115      	bne.n	800cac0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	689a      	ldr	r2, [r3, #8]
 800ca9a:	4b19      	ldr	r3, [pc, #100]	; (800cb00 <HAL_TIM_Base_Start_IT+0xec>)
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2b06      	cmp	r3, #6
 800caa4:	d015      	beq.n	800cad2 <HAL_TIM_Base_Start_IT+0xbe>
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800caac:	d011      	beq.n	800cad2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f042 0201 	orr.w	r2, r2, #1
 800cabc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cabe:	e008      	b.n	800cad2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f042 0201 	orr.w	r2, r2, #1
 800cace:	601a      	str	r2, [r3, #0]
 800cad0:	e000      	b.n	800cad4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cad2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3714      	adds	r7, #20
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	40010000 	.word	0x40010000
 800cae8:	40000400 	.word	0x40000400
 800caec:	40000800 	.word	0x40000800
 800caf0:	40000c00 	.word	0x40000c00
 800caf4:	40010400 	.word	0x40010400
 800caf8:	40001800 	.word	0x40001800
 800cafc:	40014000 	.word	0x40014000
 800cb00:	00010007 	.word	0x00010007

0800cb04 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b084      	sub	sp, #16
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d109      	bne.n	800cb2c <HAL_TIM_OC_Start_IT+0x28>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	bf14      	ite	ne
 800cb24:	2301      	movne	r3, #1
 800cb26:	2300      	moveq	r3, #0
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	e03c      	b.n	800cba6 <HAL_TIM_OC_Start_IT+0xa2>
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	2b04      	cmp	r3, #4
 800cb30:	d109      	bne.n	800cb46 <HAL_TIM_OC_Start_IT+0x42>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	bf14      	ite	ne
 800cb3e:	2301      	movne	r3, #1
 800cb40:	2300      	moveq	r3, #0
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	e02f      	b.n	800cba6 <HAL_TIM_OC_Start_IT+0xa2>
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	2b08      	cmp	r3, #8
 800cb4a:	d109      	bne.n	800cb60 <HAL_TIM_OC_Start_IT+0x5c>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb52:	b2db      	uxtb	r3, r3
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	bf14      	ite	ne
 800cb58:	2301      	movne	r3, #1
 800cb5a:	2300      	moveq	r3, #0
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	e022      	b.n	800cba6 <HAL_TIM_OC_Start_IT+0xa2>
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	2b0c      	cmp	r3, #12
 800cb64:	d109      	bne.n	800cb7a <HAL_TIM_OC_Start_IT+0x76>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	bf14      	ite	ne
 800cb72:	2301      	movne	r3, #1
 800cb74:	2300      	moveq	r3, #0
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	e015      	b.n	800cba6 <HAL_TIM_OC_Start_IT+0xa2>
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	2b10      	cmp	r3, #16
 800cb7e:	d109      	bne.n	800cb94 <HAL_TIM_OC_Start_IT+0x90>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	bf14      	ite	ne
 800cb8c:	2301      	movne	r3, #1
 800cb8e:	2300      	moveq	r3, #0
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	e008      	b.n	800cba6 <HAL_TIM_OC_Start_IT+0xa2>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	bf14      	ite	ne
 800cba0:	2301      	movne	r3, #1
 800cba2:	2300      	moveq	r3, #0
 800cba4:	b2db      	uxtb	r3, r3
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d001      	beq.n	800cbae <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e0ec      	b.n	800cd88 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d104      	bne.n	800cbbe <HAL_TIM_OC_Start_IT+0xba>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2202      	movs	r2, #2
 800cbb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cbbc:	e023      	b.n	800cc06 <HAL_TIM_OC_Start_IT+0x102>
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	2b04      	cmp	r3, #4
 800cbc2:	d104      	bne.n	800cbce <HAL_TIM_OC_Start_IT+0xca>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cbcc:	e01b      	b.n	800cc06 <HAL_TIM_OC_Start_IT+0x102>
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	2b08      	cmp	r3, #8
 800cbd2:	d104      	bne.n	800cbde <HAL_TIM_OC_Start_IT+0xda>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2202      	movs	r2, #2
 800cbd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cbdc:	e013      	b.n	800cc06 <HAL_TIM_OC_Start_IT+0x102>
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	2b0c      	cmp	r3, #12
 800cbe2:	d104      	bne.n	800cbee <HAL_TIM_OC_Start_IT+0xea>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2202      	movs	r2, #2
 800cbe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cbec:	e00b      	b.n	800cc06 <HAL_TIM_OC_Start_IT+0x102>
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	2b10      	cmp	r3, #16
 800cbf2:	d104      	bne.n	800cbfe <HAL_TIM_OC_Start_IT+0xfa>
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2202      	movs	r2, #2
 800cbf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cbfc:	e003      	b.n	800cc06 <HAL_TIM_OC_Start_IT+0x102>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2202      	movs	r2, #2
 800cc02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	2b0c      	cmp	r3, #12
 800cc0a:	d841      	bhi.n	800cc90 <HAL_TIM_OC_Start_IT+0x18c>
 800cc0c:	a201      	add	r2, pc, #4	; (adr r2, 800cc14 <HAL_TIM_OC_Start_IT+0x110>)
 800cc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc12:	bf00      	nop
 800cc14:	0800cc49 	.word	0x0800cc49
 800cc18:	0800cc91 	.word	0x0800cc91
 800cc1c:	0800cc91 	.word	0x0800cc91
 800cc20:	0800cc91 	.word	0x0800cc91
 800cc24:	0800cc5b 	.word	0x0800cc5b
 800cc28:	0800cc91 	.word	0x0800cc91
 800cc2c:	0800cc91 	.word	0x0800cc91
 800cc30:	0800cc91 	.word	0x0800cc91
 800cc34:	0800cc6d 	.word	0x0800cc6d
 800cc38:	0800cc91 	.word	0x0800cc91
 800cc3c:	0800cc91 	.word	0x0800cc91
 800cc40:	0800cc91 	.word	0x0800cc91
 800cc44:	0800cc7f 	.word	0x0800cc7f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	68da      	ldr	r2, [r3, #12]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f042 0202 	orr.w	r2, r2, #2
 800cc56:	60da      	str	r2, [r3, #12]
      break;
 800cc58:	e01d      	b.n	800cc96 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68da      	ldr	r2, [r3, #12]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f042 0204 	orr.w	r2, r2, #4
 800cc68:	60da      	str	r2, [r3, #12]
      break;
 800cc6a:	e014      	b.n	800cc96 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	68da      	ldr	r2, [r3, #12]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f042 0208 	orr.w	r2, r2, #8
 800cc7a:	60da      	str	r2, [r3, #12]
      break;
 800cc7c:	e00b      	b.n	800cc96 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	68da      	ldr	r2, [r3, #12]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f042 0210 	orr.w	r2, r2, #16
 800cc8c:	60da      	str	r2, [r3, #12]
      break;
 800cc8e:	e002      	b.n	800cc96 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800cc90:	2301      	movs	r3, #1
 800cc92:	73fb      	strb	r3, [r7, #15]
      break;
 800cc94:	bf00      	nop
  }

  if (status == HAL_OK)
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d174      	bne.n	800cd86 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2201      	movs	r2, #1
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	4618      	mov	r0, r3
 800cca6:	f001 f921 	bl	800deec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a38      	ldr	r2, [pc, #224]	; (800cd90 <HAL_TIM_OC_Start_IT+0x28c>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d013      	beq.n	800ccdc <HAL_TIM_OC_Start_IT+0x1d8>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a36      	ldr	r2, [pc, #216]	; (800cd94 <HAL_TIM_OC_Start_IT+0x290>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d00e      	beq.n	800ccdc <HAL_TIM_OC_Start_IT+0x1d8>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a35      	ldr	r2, [pc, #212]	; (800cd98 <HAL_TIM_OC_Start_IT+0x294>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d009      	beq.n	800ccdc <HAL_TIM_OC_Start_IT+0x1d8>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a33      	ldr	r2, [pc, #204]	; (800cd9c <HAL_TIM_OC_Start_IT+0x298>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d004      	beq.n	800ccdc <HAL_TIM_OC_Start_IT+0x1d8>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4a32      	ldr	r2, [pc, #200]	; (800cda0 <HAL_TIM_OC_Start_IT+0x29c>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d101      	bne.n	800cce0 <HAL_TIM_OC_Start_IT+0x1dc>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e000      	b.n	800cce2 <HAL_TIM_OC_Start_IT+0x1de>
 800cce0:	2300      	movs	r3, #0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d007      	beq.n	800ccf6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ccf4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a25      	ldr	r2, [pc, #148]	; (800cd90 <HAL_TIM_OC_Start_IT+0x28c>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d022      	beq.n	800cd46 <HAL_TIM_OC_Start_IT+0x242>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd08:	d01d      	beq.n	800cd46 <HAL_TIM_OC_Start_IT+0x242>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a25      	ldr	r2, [pc, #148]	; (800cda4 <HAL_TIM_OC_Start_IT+0x2a0>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d018      	beq.n	800cd46 <HAL_TIM_OC_Start_IT+0x242>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a23      	ldr	r2, [pc, #140]	; (800cda8 <HAL_TIM_OC_Start_IT+0x2a4>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d013      	beq.n	800cd46 <HAL_TIM_OC_Start_IT+0x242>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a22      	ldr	r2, [pc, #136]	; (800cdac <HAL_TIM_OC_Start_IT+0x2a8>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d00e      	beq.n	800cd46 <HAL_TIM_OC_Start_IT+0x242>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a19      	ldr	r2, [pc, #100]	; (800cd94 <HAL_TIM_OC_Start_IT+0x290>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d009      	beq.n	800cd46 <HAL_TIM_OC_Start_IT+0x242>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a1e      	ldr	r2, [pc, #120]	; (800cdb0 <HAL_TIM_OC_Start_IT+0x2ac>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d004      	beq.n	800cd46 <HAL_TIM_OC_Start_IT+0x242>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a15      	ldr	r2, [pc, #84]	; (800cd98 <HAL_TIM_OC_Start_IT+0x294>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d115      	bne.n	800cd72 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	689a      	ldr	r2, [r3, #8]
 800cd4c:	4b19      	ldr	r3, [pc, #100]	; (800cdb4 <HAL_TIM_OC_Start_IT+0x2b0>)
 800cd4e:	4013      	ands	r3, r2
 800cd50:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	2b06      	cmp	r3, #6
 800cd56:	d015      	beq.n	800cd84 <HAL_TIM_OC_Start_IT+0x280>
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd5e:	d011      	beq.n	800cd84 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	681a      	ldr	r2, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f042 0201 	orr.w	r2, r2, #1
 800cd6e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd70:	e008      	b.n	800cd84 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f042 0201 	orr.w	r2, r2, #1
 800cd80:	601a      	str	r2, [r3, #0]
 800cd82:	e000      	b.n	800cd86 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd84:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800cd86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3710      	adds	r7, #16
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	40010000 	.word	0x40010000
 800cd94:	40010400 	.word	0x40010400
 800cd98:	40014000 	.word	0x40014000
 800cd9c:	40014400 	.word	0x40014400
 800cda0:	40014800 	.word	0x40014800
 800cda4:	40000400 	.word	0x40000400
 800cda8:	40000800 	.word	0x40000800
 800cdac:	40000c00 	.word	0x40000c00
 800cdb0:	40001800 	.word	0x40001800
 800cdb4:	00010007 	.word	0x00010007

0800cdb8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	2b0c      	cmp	r3, #12
 800cdca:	d841      	bhi.n	800ce50 <HAL_TIM_OC_Stop_IT+0x98>
 800cdcc:	a201      	add	r2, pc, #4	; (adr r2, 800cdd4 <HAL_TIM_OC_Stop_IT+0x1c>)
 800cdce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd2:	bf00      	nop
 800cdd4:	0800ce09 	.word	0x0800ce09
 800cdd8:	0800ce51 	.word	0x0800ce51
 800cddc:	0800ce51 	.word	0x0800ce51
 800cde0:	0800ce51 	.word	0x0800ce51
 800cde4:	0800ce1b 	.word	0x0800ce1b
 800cde8:	0800ce51 	.word	0x0800ce51
 800cdec:	0800ce51 	.word	0x0800ce51
 800cdf0:	0800ce51 	.word	0x0800ce51
 800cdf4:	0800ce2d 	.word	0x0800ce2d
 800cdf8:	0800ce51 	.word	0x0800ce51
 800cdfc:	0800ce51 	.word	0x0800ce51
 800ce00:	0800ce51 	.word	0x0800ce51
 800ce04:	0800ce3f 	.word	0x0800ce3f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	68da      	ldr	r2, [r3, #12]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f022 0202 	bic.w	r2, r2, #2
 800ce16:	60da      	str	r2, [r3, #12]
      break;
 800ce18:	e01d      	b.n	800ce56 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	68da      	ldr	r2, [r3, #12]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f022 0204 	bic.w	r2, r2, #4
 800ce28:	60da      	str	r2, [r3, #12]
      break;
 800ce2a:	e014      	b.n	800ce56 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	68da      	ldr	r2, [r3, #12]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f022 0208 	bic.w	r2, r2, #8
 800ce3a:	60da      	str	r2, [r3, #12]
      break;
 800ce3c:	e00b      	b.n	800ce56 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	68da      	ldr	r2, [r3, #12]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f022 0210 	bic.w	r2, r2, #16
 800ce4c:	60da      	str	r2, [r3, #12]
      break;
 800ce4e:	e002      	b.n	800ce56 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ce50:	2301      	movs	r3, #1
 800ce52:	73fb      	strb	r3, [r7, #15]
      break;
 800ce54:	bf00      	nop
  }

  if (status == HAL_OK)
 800ce56:	7bfb      	ldrb	r3, [r7, #15]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	f040 8081 	bne.w	800cf60 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2200      	movs	r2, #0
 800ce64:	6839      	ldr	r1, [r7, #0]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f001 f840 	bl	800deec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a3e      	ldr	r2, [pc, #248]	; (800cf6c <HAL_TIM_OC_Stop_IT+0x1b4>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d013      	beq.n	800ce9e <HAL_TIM_OC_Stop_IT+0xe6>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4a3d      	ldr	r2, [pc, #244]	; (800cf70 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d00e      	beq.n	800ce9e <HAL_TIM_OC_Stop_IT+0xe6>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a3b      	ldr	r2, [pc, #236]	; (800cf74 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d009      	beq.n	800ce9e <HAL_TIM_OC_Stop_IT+0xe6>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4a3a      	ldr	r2, [pc, #232]	; (800cf78 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d004      	beq.n	800ce9e <HAL_TIM_OC_Stop_IT+0xe6>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a38      	ldr	r2, [pc, #224]	; (800cf7c <HAL_TIM_OC_Stop_IT+0x1c4>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d101      	bne.n	800cea2 <HAL_TIM_OC_Stop_IT+0xea>
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e000      	b.n	800cea4 <HAL_TIM_OC_Stop_IT+0xec>
 800cea2:	2300      	movs	r3, #0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d017      	beq.n	800ced8 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	6a1a      	ldr	r2, [r3, #32]
 800ceae:	f241 1311 	movw	r3, #4369	; 0x1111
 800ceb2:	4013      	ands	r3, r2
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d10f      	bne.n	800ced8 <HAL_TIM_OC_Stop_IT+0x120>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6a1a      	ldr	r2, [r3, #32]
 800cebe:	f240 4344 	movw	r3, #1092	; 0x444
 800cec2:	4013      	ands	r3, r2
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d107      	bne.n	800ced8 <HAL_TIM_OC_Stop_IT+0x120>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ced6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	6a1a      	ldr	r2, [r3, #32]
 800cede:	f241 1311 	movw	r3, #4369	; 0x1111
 800cee2:	4013      	ands	r3, r2
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10f      	bne.n	800cf08 <HAL_TIM_OC_Stop_IT+0x150>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6a1a      	ldr	r2, [r3, #32]
 800ceee:	f240 4344 	movw	r3, #1092	; 0x444
 800cef2:	4013      	ands	r3, r2
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d107      	bne.n	800cf08 <HAL_TIM_OC_Stop_IT+0x150>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f022 0201 	bic.w	r2, r2, #1
 800cf06:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d104      	bne.n	800cf18 <HAL_TIM_OC_Stop_IT+0x160>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2201      	movs	r2, #1
 800cf12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf16:	e023      	b.n	800cf60 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	2b04      	cmp	r3, #4
 800cf1c:	d104      	bne.n	800cf28 <HAL_TIM_OC_Stop_IT+0x170>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2201      	movs	r2, #1
 800cf22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf26:	e01b      	b.n	800cf60 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	2b08      	cmp	r3, #8
 800cf2c:	d104      	bne.n	800cf38 <HAL_TIM_OC_Stop_IT+0x180>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2201      	movs	r2, #1
 800cf32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf36:	e013      	b.n	800cf60 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b0c      	cmp	r3, #12
 800cf3c:	d104      	bne.n	800cf48 <HAL_TIM_OC_Stop_IT+0x190>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf46:	e00b      	b.n	800cf60 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2b10      	cmp	r3, #16
 800cf4c:	d104      	bne.n	800cf58 <HAL_TIM_OC_Stop_IT+0x1a0>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf56:	e003      	b.n	800cf60 <HAL_TIM_OC_Stop_IT+0x1a8>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	40010000 	.word	0x40010000
 800cf70:	40010400 	.word	0x40010400
 800cf74:	40014000 	.word	0x40014000
 800cf78:	40014400 	.word	0x40014400
 800cf7c:	40014800 	.word	0x40014800

0800cf80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d101      	bne.n	800cf92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e049      	b.n	800d026 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d106      	bne.n	800cfac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 f841 	bl	800d02e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2202      	movs	r2, #2
 800cfb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	3304      	adds	r3, #4
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	4610      	mov	r0, r2
 800cfc0:	f000 fb7a 	bl	800d6b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2201      	movs	r2, #1
 800cff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2201      	movs	r2, #1
 800d000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2201      	movs	r2, #1
 800d008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2201      	movs	r2, #1
 800d020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d02e:	b480      	push	{r7}
 800d030:	b083      	sub	sp, #12
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d036:	bf00      	nop
 800d038:	370c      	adds	r7, #12
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr

0800d042 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b084      	sub	sp, #16
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	691b      	ldr	r3, [r3, #16]
 800d058:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	f003 0302 	and.w	r3, r3, #2
 800d060:	2b00      	cmp	r3, #0
 800d062:	d020      	beq.n	800d0a6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f003 0302 	and.w	r3, r3, #2
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d01b      	beq.n	800d0a6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	f06f 0202 	mvn.w	r2, #2
 800d076:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	699b      	ldr	r3, [r3, #24]
 800d084:	f003 0303 	and.w	r3, r3, #3
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d003      	beq.n	800d094 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 faf5 	bl	800d67c <HAL_TIM_IC_CaptureCallback>
 800d092:	e005      	b.n	800d0a0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 fae7 	bl	800d668 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 faf8 	bl	800d690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	f003 0304 	and.w	r3, r3, #4
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d020      	beq.n	800d0f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f003 0304 	and.w	r3, r3, #4
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d01b      	beq.n	800d0f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	f06f 0204 	mvn.w	r2, #4
 800d0c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2202      	movs	r2, #2
 800d0c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	699b      	ldr	r3, [r3, #24]
 800d0d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d003      	beq.n	800d0e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 facf 	bl	800d67c <HAL_TIM_IC_CaptureCallback>
 800d0de:	e005      	b.n	800d0ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fac1 	bl	800d668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fad2 	bl	800d690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	f003 0308 	and.w	r3, r3, #8
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d020      	beq.n	800d13e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f003 0308 	and.w	r3, r3, #8
 800d102:	2b00      	cmp	r3, #0
 800d104:	d01b      	beq.n	800d13e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f06f 0208 	mvn.w	r2, #8
 800d10e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2204      	movs	r2, #4
 800d114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	69db      	ldr	r3, [r3, #28]
 800d11c:	f003 0303 	and.w	r3, r3, #3
 800d120:	2b00      	cmp	r3, #0
 800d122:	d003      	beq.n	800d12c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 faa9 	bl	800d67c <HAL_TIM_IC_CaptureCallback>
 800d12a:	e005      	b.n	800d138 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fa9b 	bl	800d668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 faac 	bl	800d690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	f003 0310 	and.w	r3, r3, #16
 800d144:	2b00      	cmp	r3, #0
 800d146:	d020      	beq.n	800d18a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f003 0310 	and.w	r3, r3, #16
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d01b      	beq.n	800d18a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f06f 0210 	mvn.w	r2, #16
 800d15a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2208      	movs	r2, #8
 800d160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	69db      	ldr	r3, [r3, #28]
 800d168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d003      	beq.n	800d178 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f000 fa83 	bl	800d67c <HAL_TIM_IC_CaptureCallback>
 800d176:	e005      	b.n	800d184 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f000 fa75 	bl	800d668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 fa86 	bl	800d690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	f003 0301 	and.w	r3, r3, #1
 800d190:	2b00      	cmp	r3, #0
 800d192:	d00c      	beq.n	800d1ae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f003 0301 	and.w	r3, r3, #1
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d007      	beq.n	800d1ae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f06f 0201 	mvn.w	r2, #1
 800d1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f7f4 fdef 	bl	8001d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d104      	bne.n	800d1c2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d00c      	beq.n	800d1dc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d007      	beq.n	800d1dc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800d1d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 ffc4 	bl	800e164 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00c      	beq.n	800d200 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d007      	beq.n	800d200 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d1f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 ffbc 	bl	800e178 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00c      	beq.n	800d224 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d210:	2b00      	cmp	r3, #0
 800d212:	d007      	beq.n	800d224 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d21c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 fa40 	bl	800d6a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	f003 0320 	and.w	r3, r3, #32
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00c      	beq.n	800d248 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f003 0320 	and.w	r3, r3, #32
 800d234:	2b00      	cmp	r3, #0
 800d236:	d007      	beq.n	800d248 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f06f 0220 	mvn.w	r2, #32
 800d240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 ff84 	bl	800e150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d248:	bf00      	nop
 800d24a:	3710      	adds	r7, #16
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b086      	sub	sp, #24
 800d254:	af00      	add	r7, sp, #0
 800d256:	60f8      	str	r0, [r7, #12]
 800d258:	60b9      	str	r1, [r7, #8]
 800d25a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d25c:	2300      	movs	r3, #0
 800d25e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d266:	2b01      	cmp	r3, #1
 800d268:	d101      	bne.n	800d26e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d26a:	2302      	movs	r3, #2
 800d26c:	e0ff      	b.n	800d46e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2201      	movs	r2, #1
 800d272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2b14      	cmp	r3, #20
 800d27a:	f200 80f0 	bhi.w	800d45e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d27e:	a201      	add	r2, pc, #4	; (adr r2, 800d284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d284:	0800d2d9 	.word	0x0800d2d9
 800d288:	0800d45f 	.word	0x0800d45f
 800d28c:	0800d45f 	.word	0x0800d45f
 800d290:	0800d45f 	.word	0x0800d45f
 800d294:	0800d319 	.word	0x0800d319
 800d298:	0800d45f 	.word	0x0800d45f
 800d29c:	0800d45f 	.word	0x0800d45f
 800d2a0:	0800d45f 	.word	0x0800d45f
 800d2a4:	0800d35b 	.word	0x0800d35b
 800d2a8:	0800d45f 	.word	0x0800d45f
 800d2ac:	0800d45f 	.word	0x0800d45f
 800d2b0:	0800d45f 	.word	0x0800d45f
 800d2b4:	0800d39b 	.word	0x0800d39b
 800d2b8:	0800d45f 	.word	0x0800d45f
 800d2bc:	0800d45f 	.word	0x0800d45f
 800d2c0:	0800d45f 	.word	0x0800d45f
 800d2c4:	0800d3dd 	.word	0x0800d3dd
 800d2c8:	0800d45f 	.word	0x0800d45f
 800d2cc:	0800d45f 	.word	0x0800d45f
 800d2d0:	0800d45f 	.word	0x0800d45f
 800d2d4:	0800d41d 	.word	0x0800d41d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	68b9      	ldr	r1, [r7, #8]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f000 fa90 	bl	800d804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	699a      	ldr	r2, [r3, #24]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f042 0208 	orr.w	r2, r2, #8
 800d2f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	699a      	ldr	r2, [r3, #24]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f022 0204 	bic.w	r2, r2, #4
 800d302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	6999      	ldr	r1, [r3, #24]
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	691a      	ldr	r2, [r3, #16]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	430a      	orrs	r2, r1
 800d314:	619a      	str	r2, [r3, #24]
      break;
 800d316:	e0a5      	b.n	800d464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	68b9      	ldr	r1, [r7, #8]
 800d31e:	4618      	mov	r0, r3
 800d320:	f000 fb00 	bl	800d924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	699a      	ldr	r2, [r3, #24]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	699a      	ldr	r2, [r3, #24]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	6999      	ldr	r1, [r3, #24]
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	021a      	lsls	r2, r3, #8
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	430a      	orrs	r2, r1
 800d356:	619a      	str	r2, [r3, #24]
      break;
 800d358:	e084      	b.n	800d464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	68b9      	ldr	r1, [r7, #8]
 800d360:	4618      	mov	r0, r3
 800d362:	f000 fb69 	bl	800da38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	69da      	ldr	r2, [r3, #28]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f042 0208 	orr.w	r2, r2, #8
 800d374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	69da      	ldr	r2, [r3, #28]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f022 0204 	bic.w	r2, r2, #4
 800d384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	69d9      	ldr	r1, [r3, #28]
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	691a      	ldr	r2, [r3, #16]
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	430a      	orrs	r2, r1
 800d396:	61da      	str	r2, [r3, #28]
      break;
 800d398:	e064      	b.n	800d464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	68b9      	ldr	r1, [r7, #8]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f000 fbd1 	bl	800db48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	69da      	ldr	r2, [r3, #28]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	69da      	ldr	r2, [r3, #28]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d3c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	69d9      	ldr	r1, [r3, #28]
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	021a      	lsls	r2, r3, #8
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	430a      	orrs	r2, r1
 800d3d8:	61da      	str	r2, [r3, #28]
      break;
 800d3da:	e043      	b.n	800d464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	68b9      	ldr	r1, [r7, #8]
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f000 fc1a 	bl	800dc1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f042 0208 	orr.w	r2, r2, #8
 800d3f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	f022 0204 	bic.w	r2, r2, #4
 800d406:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	691a      	ldr	r2, [r3, #16]
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	430a      	orrs	r2, r1
 800d418:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d41a:	e023      	b.n	800d464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	68b9      	ldr	r1, [r7, #8]
 800d422:	4618      	mov	r0, r3
 800d424:	f000 fc5e 	bl	800dce4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d436:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d446:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	691b      	ldr	r3, [r3, #16]
 800d452:	021a      	lsls	r2, r3, #8
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	430a      	orrs	r2, r1
 800d45a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d45c:	e002      	b.n	800d464 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d45e:	2301      	movs	r3, #1
 800d460:	75fb      	strb	r3, [r7, #23]
      break;
 800d462:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2200      	movs	r2, #0
 800d468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d46c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3718      	adds	r7, #24
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop

0800d478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d482:	2300      	movs	r3, #0
 800d484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d101      	bne.n	800d494 <HAL_TIM_ConfigClockSource+0x1c>
 800d490:	2302      	movs	r3, #2
 800d492:	e0dc      	b.n	800d64e <HAL_TIM_ConfigClockSource+0x1d6>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2201      	movs	r2, #1
 800d498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2202      	movs	r2, #2
 800d4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	689b      	ldr	r3, [r3, #8]
 800d4aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d4ac:	68ba      	ldr	r2, [r7, #8]
 800d4ae:	4b6a      	ldr	r3, [pc, #424]	; (800d658 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d4b0:	4013      	ands	r3, r2
 800d4b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	68ba      	ldr	r2, [r7, #8]
 800d4c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4a64      	ldr	r2, [pc, #400]	; (800d65c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	f000 80a9 	beq.w	800d622 <HAL_TIM_ConfigClockSource+0x1aa>
 800d4d0:	4a62      	ldr	r2, [pc, #392]	; (800d65c <HAL_TIM_ConfigClockSource+0x1e4>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	f200 80ae 	bhi.w	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4d8:	4a61      	ldr	r2, [pc, #388]	; (800d660 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	f000 80a1 	beq.w	800d622 <HAL_TIM_ConfigClockSource+0x1aa>
 800d4e0:	4a5f      	ldr	r2, [pc, #380]	; (800d660 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	f200 80a6 	bhi.w	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4e8:	4a5e      	ldr	r2, [pc, #376]	; (800d664 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	f000 8099 	beq.w	800d622 <HAL_TIM_ConfigClockSource+0x1aa>
 800d4f0:	4a5c      	ldr	r2, [pc, #368]	; (800d664 <HAL_TIM_ConfigClockSource+0x1ec>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	f200 809e 	bhi.w	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
 800d4f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d4fc:	f000 8091 	beq.w	800d622 <HAL_TIM_ConfigClockSource+0x1aa>
 800d500:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d504:	f200 8096 	bhi.w	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
 800d508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d50c:	f000 8089 	beq.w	800d622 <HAL_TIM_ConfigClockSource+0x1aa>
 800d510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d514:	f200 808e 	bhi.w	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
 800d518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d51c:	d03e      	beq.n	800d59c <HAL_TIM_ConfigClockSource+0x124>
 800d51e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d522:	f200 8087 	bhi.w	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
 800d526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d52a:	f000 8086 	beq.w	800d63a <HAL_TIM_ConfigClockSource+0x1c2>
 800d52e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d532:	d87f      	bhi.n	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
 800d534:	2b70      	cmp	r3, #112	; 0x70
 800d536:	d01a      	beq.n	800d56e <HAL_TIM_ConfigClockSource+0xf6>
 800d538:	2b70      	cmp	r3, #112	; 0x70
 800d53a:	d87b      	bhi.n	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
 800d53c:	2b60      	cmp	r3, #96	; 0x60
 800d53e:	d050      	beq.n	800d5e2 <HAL_TIM_ConfigClockSource+0x16a>
 800d540:	2b60      	cmp	r3, #96	; 0x60
 800d542:	d877      	bhi.n	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
 800d544:	2b50      	cmp	r3, #80	; 0x50
 800d546:	d03c      	beq.n	800d5c2 <HAL_TIM_ConfigClockSource+0x14a>
 800d548:	2b50      	cmp	r3, #80	; 0x50
 800d54a:	d873      	bhi.n	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
 800d54c:	2b40      	cmp	r3, #64	; 0x40
 800d54e:	d058      	beq.n	800d602 <HAL_TIM_ConfigClockSource+0x18a>
 800d550:	2b40      	cmp	r3, #64	; 0x40
 800d552:	d86f      	bhi.n	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
 800d554:	2b30      	cmp	r3, #48	; 0x30
 800d556:	d064      	beq.n	800d622 <HAL_TIM_ConfigClockSource+0x1aa>
 800d558:	2b30      	cmp	r3, #48	; 0x30
 800d55a:	d86b      	bhi.n	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
 800d55c:	2b20      	cmp	r3, #32
 800d55e:	d060      	beq.n	800d622 <HAL_TIM_ConfigClockSource+0x1aa>
 800d560:	2b20      	cmp	r3, #32
 800d562:	d867      	bhi.n	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
 800d564:	2b00      	cmp	r3, #0
 800d566:	d05c      	beq.n	800d622 <HAL_TIM_ConfigClockSource+0x1aa>
 800d568:	2b10      	cmp	r3, #16
 800d56a:	d05a      	beq.n	800d622 <HAL_TIM_ConfigClockSource+0x1aa>
 800d56c:	e062      	b.n	800d634 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6818      	ldr	r0, [r3, #0]
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	6899      	ldr	r1, [r3, #8]
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	685a      	ldr	r2, [r3, #4]
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	f000 fc95 	bl	800deac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	68ba      	ldr	r2, [r7, #8]
 800d598:	609a      	str	r2, [r3, #8]
      break;
 800d59a:	e04f      	b.n	800d63c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6818      	ldr	r0, [r3, #0]
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	6899      	ldr	r1, [r3, #8]
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	685a      	ldr	r2, [r3, #4]
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	f000 fc7e 	bl	800deac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	689a      	ldr	r2, [r3, #8]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d5be:	609a      	str	r2, [r3, #8]
      break;
 800d5c0:	e03c      	b.n	800d63c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6818      	ldr	r0, [r3, #0]
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	6859      	ldr	r1, [r3, #4]
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	68db      	ldr	r3, [r3, #12]
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	f000 fbee 	bl	800ddb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2150      	movs	r1, #80	; 0x50
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f000 fc48 	bl	800de70 <TIM_ITRx_SetConfig>
      break;
 800d5e0:	e02c      	b.n	800d63c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6818      	ldr	r0, [r3, #0]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	6859      	ldr	r1, [r3, #4]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	f000 fc0d 	bl	800de0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2160      	movs	r1, #96	; 0x60
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f000 fc38 	bl	800de70 <TIM_ITRx_SetConfig>
      break;
 800d600:	e01c      	b.n	800d63c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6818      	ldr	r0, [r3, #0]
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	6859      	ldr	r1, [r3, #4]
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	461a      	mov	r2, r3
 800d610:	f000 fbce 	bl	800ddb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2140      	movs	r1, #64	; 0x40
 800d61a:	4618      	mov	r0, r3
 800d61c:	f000 fc28 	bl	800de70 <TIM_ITRx_SetConfig>
      break;
 800d620:	e00c      	b.n	800d63c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681a      	ldr	r2, [r3, #0]
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	4619      	mov	r1, r3
 800d62c:	4610      	mov	r0, r2
 800d62e:	f000 fc1f 	bl	800de70 <TIM_ITRx_SetConfig>
      break;
 800d632:	e003      	b.n	800d63c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	73fb      	strb	r3, [r7, #15]
      break;
 800d638:	e000      	b.n	800d63c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d63a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2201      	movs	r2, #1
 800d640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	ffceff88 	.word	0xffceff88
 800d65c:	00100040 	.word	0x00100040
 800d660:	00100030 	.word	0x00100030
 800d664:	00100020 	.word	0x00100020

0800d668 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d684:	bf00      	nop
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d698:	bf00      	nop
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d6ac:	bf00      	nop
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4a46      	ldr	r2, [pc, #280]	; (800d7e4 <TIM_Base_SetConfig+0x12c>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d013      	beq.n	800d6f8 <TIM_Base_SetConfig+0x40>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6d6:	d00f      	beq.n	800d6f8 <TIM_Base_SetConfig+0x40>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4a43      	ldr	r2, [pc, #268]	; (800d7e8 <TIM_Base_SetConfig+0x130>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d00b      	beq.n	800d6f8 <TIM_Base_SetConfig+0x40>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4a42      	ldr	r2, [pc, #264]	; (800d7ec <TIM_Base_SetConfig+0x134>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d007      	beq.n	800d6f8 <TIM_Base_SetConfig+0x40>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a41      	ldr	r2, [pc, #260]	; (800d7f0 <TIM_Base_SetConfig+0x138>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d003      	beq.n	800d6f8 <TIM_Base_SetConfig+0x40>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4a40      	ldr	r2, [pc, #256]	; (800d7f4 <TIM_Base_SetConfig+0x13c>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d108      	bne.n	800d70a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	68fa      	ldr	r2, [r7, #12]
 800d706:	4313      	orrs	r3, r2
 800d708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4a35      	ldr	r2, [pc, #212]	; (800d7e4 <TIM_Base_SetConfig+0x12c>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d01f      	beq.n	800d752 <TIM_Base_SetConfig+0x9a>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d718:	d01b      	beq.n	800d752 <TIM_Base_SetConfig+0x9a>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4a32      	ldr	r2, [pc, #200]	; (800d7e8 <TIM_Base_SetConfig+0x130>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d017      	beq.n	800d752 <TIM_Base_SetConfig+0x9a>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	4a31      	ldr	r2, [pc, #196]	; (800d7ec <TIM_Base_SetConfig+0x134>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d013      	beq.n	800d752 <TIM_Base_SetConfig+0x9a>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4a30      	ldr	r2, [pc, #192]	; (800d7f0 <TIM_Base_SetConfig+0x138>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d00f      	beq.n	800d752 <TIM_Base_SetConfig+0x9a>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4a2f      	ldr	r2, [pc, #188]	; (800d7f4 <TIM_Base_SetConfig+0x13c>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d00b      	beq.n	800d752 <TIM_Base_SetConfig+0x9a>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	4a2e      	ldr	r2, [pc, #184]	; (800d7f8 <TIM_Base_SetConfig+0x140>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d007      	beq.n	800d752 <TIM_Base_SetConfig+0x9a>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	4a2d      	ldr	r2, [pc, #180]	; (800d7fc <TIM_Base_SetConfig+0x144>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d003      	beq.n	800d752 <TIM_Base_SetConfig+0x9a>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4a2c      	ldr	r2, [pc, #176]	; (800d800 <TIM_Base_SetConfig+0x148>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d108      	bne.n	800d764 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	68fa      	ldr	r2, [r7, #12]
 800d760:	4313      	orrs	r3, r2
 800d762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	695b      	ldr	r3, [r3, #20]
 800d76e:	4313      	orrs	r3, r2
 800d770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	689a      	ldr	r2, [r3, #8]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	681a      	ldr	r2, [r3, #0]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	4a16      	ldr	r2, [pc, #88]	; (800d7e4 <TIM_Base_SetConfig+0x12c>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	d00f      	beq.n	800d7b0 <TIM_Base_SetConfig+0xf8>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	4a18      	ldr	r2, [pc, #96]	; (800d7f4 <TIM_Base_SetConfig+0x13c>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d00b      	beq.n	800d7b0 <TIM_Base_SetConfig+0xf8>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	4a17      	ldr	r2, [pc, #92]	; (800d7f8 <TIM_Base_SetConfig+0x140>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d007      	beq.n	800d7b0 <TIM_Base_SetConfig+0xf8>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	4a16      	ldr	r2, [pc, #88]	; (800d7fc <TIM_Base_SetConfig+0x144>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d003      	beq.n	800d7b0 <TIM_Base_SetConfig+0xf8>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	4a15      	ldr	r2, [pc, #84]	; (800d800 <TIM_Base_SetConfig+0x148>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d103      	bne.n	800d7b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	691a      	ldr	r2, [r3, #16]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	f003 0301 	and.w	r3, r3, #1
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d105      	bne.n	800d7d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	691b      	ldr	r3, [r3, #16]
 800d7ce:	f023 0201 	bic.w	r2, r3, #1
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	611a      	str	r2, [r3, #16]
  }
}
 800d7d6:	bf00      	nop
 800d7d8:	3714      	adds	r7, #20
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	40010000 	.word	0x40010000
 800d7e8:	40000400 	.word	0x40000400
 800d7ec:	40000800 	.word	0x40000800
 800d7f0:	40000c00 	.word	0x40000c00
 800d7f4:	40010400 	.word	0x40010400
 800d7f8:	40014000 	.word	0x40014000
 800d7fc:	40014400 	.word	0x40014400
 800d800:	40014800 	.word	0x40014800

0800d804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d804:	b480      	push	{r7}
 800d806:	b087      	sub	sp, #28
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a1b      	ldr	r3, [r3, #32]
 800d812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6a1b      	ldr	r3, [r3, #32]
 800d818:	f023 0201 	bic.w	r2, r3, #1
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	699b      	ldr	r3, [r3, #24]
 800d82a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	4b37      	ldr	r3, [pc, #220]	; (800d90c <TIM_OC1_SetConfig+0x108>)
 800d830:	4013      	ands	r3, r2
 800d832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f023 0303 	bic.w	r3, r3, #3
 800d83a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	68fa      	ldr	r2, [r7, #12]
 800d842:	4313      	orrs	r3, r2
 800d844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	f023 0302 	bic.w	r3, r3, #2
 800d84c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	689b      	ldr	r3, [r3, #8]
 800d852:	697a      	ldr	r2, [r7, #20]
 800d854:	4313      	orrs	r3, r2
 800d856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	4a2d      	ldr	r2, [pc, #180]	; (800d910 <TIM_OC1_SetConfig+0x10c>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d00f      	beq.n	800d880 <TIM_OC1_SetConfig+0x7c>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	4a2c      	ldr	r2, [pc, #176]	; (800d914 <TIM_OC1_SetConfig+0x110>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d00b      	beq.n	800d880 <TIM_OC1_SetConfig+0x7c>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4a2b      	ldr	r2, [pc, #172]	; (800d918 <TIM_OC1_SetConfig+0x114>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d007      	beq.n	800d880 <TIM_OC1_SetConfig+0x7c>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	4a2a      	ldr	r2, [pc, #168]	; (800d91c <TIM_OC1_SetConfig+0x118>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d003      	beq.n	800d880 <TIM_OC1_SetConfig+0x7c>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4a29      	ldr	r2, [pc, #164]	; (800d920 <TIM_OC1_SetConfig+0x11c>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d10c      	bne.n	800d89a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	f023 0308 	bic.w	r3, r3, #8
 800d886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	697a      	ldr	r2, [r7, #20]
 800d88e:	4313      	orrs	r3, r2
 800d890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	f023 0304 	bic.w	r3, r3, #4
 800d898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	4a1c      	ldr	r2, [pc, #112]	; (800d910 <TIM_OC1_SetConfig+0x10c>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d00f      	beq.n	800d8c2 <TIM_OC1_SetConfig+0xbe>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	4a1b      	ldr	r2, [pc, #108]	; (800d914 <TIM_OC1_SetConfig+0x110>)
 800d8a6:	4293      	cmp	r3, r2
 800d8a8:	d00b      	beq.n	800d8c2 <TIM_OC1_SetConfig+0xbe>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4a1a      	ldr	r2, [pc, #104]	; (800d918 <TIM_OC1_SetConfig+0x114>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d007      	beq.n	800d8c2 <TIM_OC1_SetConfig+0xbe>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4a19      	ldr	r2, [pc, #100]	; (800d91c <TIM_OC1_SetConfig+0x118>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d003      	beq.n	800d8c2 <TIM_OC1_SetConfig+0xbe>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4a18      	ldr	r2, [pc, #96]	; (800d920 <TIM_OC1_SetConfig+0x11c>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d111      	bne.n	800d8e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d8c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d8d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	695b      	ldr	r3, [r3, #20]
 800d8d6:	693a      	ldr	r2, [r7, #16]
 800d8d8:	4313      	orrs	r3, r2
 800d8da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	699b      	ldr	r3, [r3, #24]
 800d8e0:	693a      	ldr	r2, [r7, #16]
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	693a      	ldr	r2, [r7, #16]
 800d8ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	68fa      	ldr	r2, [r7, #12]
 800d8f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	685a      	ldr	r2, [r3, #4]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	621a      	str	r2, [r3, #32]
}
 800d900:	bf00      	nop
 800d902:	371c      	adds	r7, #28
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr
 800d90c:	fffeff8f 	.word	0xfffeff8f
 800d910:	40010000 	.word	0x40010000
 800d914:	40010400 	.word	0x40010400
 800d918:	40014000 	.word	0x40014000
 800d91c:	40014400 	.word	0x40014400
 800d920:	40014800 	.word	0x40014800

0800d924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d924:	b480      	push	{r7}
 800d926:	b087      	sub	sp, #28
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6a1b      	ldr	r3, [r3, #32]
 800d932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6a1b      	ldr	r3, [r3, #32]
 800d938:	f023 0210 	bic.w	r2, r3, #16
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	699b      	ldr	r3, [r3, #24]
 800d94a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d94c:	68fa      	ldr	r2, [r7, #12]
 800d94e:	4b34      	ldr	r3, [pc, #208]	; (800da20 <TIM_OC2_SetConfig+0xfc>)
 800d950:	4013      	ands	r3, r2
 800d952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d95a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	021b      	lsls	r3, r3, #8
 800d962:	68fa      	ldr	r2, [r7, #12]
 800d964:	4313      	orrs	r3, r2
 800d966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	f023 0320 	bic.w	r3, r3, #32
 800d96e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	689b      	ldr	r3, [r3, #8]
 800d974:	011b      	lsls	r3, r3, #4
 800d976:	697a      	ldr	r2, [r7, #20]
 800d978:	4313      	orrs	r3, r2
 800d97a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	4a29      	ldr	r2, [pc, #164]	; (800da24 <TIM_OC2_SetConfig+0x100>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d003      	beq.n	800d98c <TIM_OC2_SetConfig+0x68>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4a28      	ldr	r2, [pc, #160]	; (800da28 <TIM_OC2_SetConfig+0x104>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d10d      	bne.n	800d9a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	011b      	lsls	r3, r3, #4
 800d99a:	697a      	ldr	r2, [r7, #20]
 800d99c:	4313      	orrs	r3, r2
 800d99e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a1e      	ldr	r2, [pc, #120]	; (800da24 <TIM_OC2_SetConfig+0x100>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d00f      	beq.n	800d9d0 <TIM_OC2_SetConfig+0xac>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a1d      	ldr	r2, [pc, #116]	; (800da28 <TIM_OC2_SetConfig+0x104>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d00b      	beq.n	800d9d0 <TIM_OC2_SetConfig+0xac>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4a1c      	ldr	r2, [pc, #112]	; (800da2c <TIM_OC2_SetConfig+0x108>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d007      	beq.n	800d9d0 <TIM_OC2_SetConfig+0xac>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	4a1b      	ldr	r2, [pc, #108]	; (800da30 <TIM_OC2_SetConfig+0x10c>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d003      	beq.n	800d9d0 <TIM_OC2_SetConfig+0xac>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a1a      	ldr	r2, [pc, #104]	; (800da34 <TIM_OC2_SetConfig+0x110>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d113      	bne.n	800d9f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d9d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	695b      	ldr	r3, [r3, #20]
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	699b      	ldr	r3, [r3, #24]
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	693a      	ldr	r2, [r7, #16]
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	693a      	ldr	r2, [r7, #16]
 800d9fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	68fa      	ldr	r2, [r7, #12]
 800da02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	685a      	ldr	r2, [r3, #4]
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	697a      	ldr	r2, [r7, #20]
 800da10:	621a      	str	r2, [r3, #32]
}
 800da12:	bf00      	nop
 800da14:	371c      	adds	r7, #28
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	feff8fff 	.word	0xfeff8fff
 800da24:	40010000 	.word	0x40010000
 800da28:	40010400 	.word	0x40010400
 800da2c:	40014000 	.word	0x40014000
 800da30:	40014400 	.word	0x40014400
 800da34:	40014800 	.word	0x40014800

0800da38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da38:	b480      	push	{r7}
 800da3a:	b087      	sub	sp, #28
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
 800da40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6a1b      	ldr	r3, [r3, #32]
 800da46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6a1b      	ldr	r3, [r3, #32]
 800da4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	69db      	ldr	r3, [r3, #28]
 800da5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800da60:	68fa      	ldr	r2, [r7, #12]
 800da62:	4b33      	ldr	r3, [pc, #204]	; (800db30 <TIM_OC3_SetConfig+0xf8>)
 800da64:	4013      	ands	r3, r2
 800da66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f023 0303 	bic.w	r3, r3, #3
 800da6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	68fa      	ldr	r2, [r7, #12]
 800da76:	4313      	orrs	r3, r2
 800da78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	689b      	ldr	r3, [r3, #8]
 800da86:	021b      	lsls	r3, r3, #8
 800da88:	697a      	ldr	r2, [r7, #20]
 800da8a:	4313      	orrs	r3, r2
 800da8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	4a28      	ldr	r2, [pc, #160]	; (800db34 <TIM_OC3_SetConfig+0xfc>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d003      	beq.n	800da9e <TIM_OC3_SetConfig+0x66>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4a27      	ldr	r2, [pc, #156]	; (800db38 <TIM_OC3_SetConfig+0x100>)
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d10d      	bne.n	800daba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800daa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	021b      	lsls	r3, r3, #8
 800daac:	697a      	ldr	r2, [r7, #20]
 800daae:	4313      	orrs	r3, r2
 800dab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4a1d      	ldr	r2, [pc, #116]	; (800db34 <TIM_OC3_SetConfig+0xfc>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d00f      	beq.n	800dae2 <TIM_OC3_SetConfig+0xaa>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4a1c      	ldr	r2, [pc, #112]	; (800db38 <TIM_OC3_SetConfig+0x100>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d00b      	beq.n	800dae2 <TIM_OC3_SetConfig+0xaa>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4a1b      	ldr	r2, [pc, #108]	; (800db3c <TIM_OC3_SetConfig+0x104>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d007      	beq.n	800dae2 <TIM_OC3_SetConfig+0xaa>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a1a      	ldr	r2, [pc, #104]	; (800db40 <TIM_OC3_SetConfig+0x108>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d003      	beq.n	800dae2 <TIM_OC3_SetConfig+0xaa>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4a19      	ldr	r2, [pc, #100]	; (800db44 <TIM_OC3_SetConfig+0x10c>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d113      	bne.n	800db0a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800daf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	695b      	ldr	r3, [r3, #20]
 800daf6:	011b      	lsls	r3, r3, #4
 800daf8:	693a      	ldr	r2, [r7, #16]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	699b      	ldr	r3, [r3, #24]
 800db02:	011b      	lsls	r3, r3, #4
 800db04:	693a      	ldr	r2, [r7, #16]
 800db06:	4313      	orrs	r3, r2
 800db08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	693a      	ldr	r2, [r7, #16]
 800db0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	68fa      	ldr	r2, [r7, #12]
 800db14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	685a      	ldr	r2, [r3, #4]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	697a      	ldr	r2, [r7, #20]
 800db22:	621a      	str	r2, [r3, #32]
}
 800db24:	bf00      	nop
 800db26:	371c      	adds	r7, #28
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr
 800db30:	fffeff8f 	.word	0xfffeff8f
 800db34:	40010000 	.word	0x40010000
 800db38:	40010400 	.word	0x40010400
 800db3c:	40014000 	.word	0x40014000
 800db40:	40014400 	.word	0x40014400
 800db44:	40014800 	.word	0x40014800

0800db48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db48:	b480      	push	{r7}
 800db4a:	b087      	sub	sp, #28
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6a1b      	ldr	r3, [r3, #32]
 800db56:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6a1b      	ldr	r3, [r3, #32]
 800db5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	69db      	ldr	r3, [r3, #28]
 800db6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800db70:	68fa      	ldr	r2, [r7, #12]
 800db72:	4b24      	ldr	r3, [pc, #144]	; (800dc04 <TIM_OC4_SetConfig+0xbc>)
 800db74:	4013      	ands	r3, r2
 800db76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800db7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	021b      	lsls	r3, r3, #8
 800db86:	68fa      	ldr	r2, [r7, #12]
 800db88:	4313      	orrs	r3, r2
 800db8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	031b      	lsls	r3, r3, #12
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	4313      	orrs	r3, r2
 800db9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	4a19      	ldr	r2, [pc, #100]	; (800dc08 <TIM_OC4_SetConfig+0xc0>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d00f      	beq.n	800dbc8 <TIM_OC4_SetConfig+0x80>
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4a18      	ldr	r2, [pc, #96]	; (800dc0c <TIM_OC4_SetConfig+0xc4>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d00b      	beq.n	800dbc8 <TIM_OC4_SetConfig+0x80>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4a17      	ldr	r2, [pc, #92]	; (800dc10 <TIM_OC4_SetConfig+0xc8>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d007      	beq.n	800dbc8 <TIM_OC4_SetConfig+0x80>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a16      	ldr	r2, [pc, #88]	; (800dc14 <TIM_OC4_SetConfig+0xcc>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d003      	beq.n	800dbc8 <TIM_OC4_SetConfig+0x80>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a15      	ldr	r2, [pc, #84]	; (800dc18 <TIM_OC4_SetConfig+0xd0>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d109      	bne.n	800dbdc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dbce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	695b      	ldr	r3, [r3, #20]
 800dbd4:	019b      	lsls	r3, r3, #6
 800dbd6:	697a      	ldr	r2, [r7, #20]
 800dbd8:	4313      	orrs	r3, r2
 800dbda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	697a      	ldr	r2, [r7, #20]
 800dbe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	685a      	ldr	r2, [r3, #4]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	693a      	ldr	r2, [r7, #16]
 800dbf4:	621a      	str	r2, [r3, #32]
}
 800dbf6:	bf00      	nop
 800dbf8:	371c      	adds	r7, #28
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	feff8fff 	.word	0xfeff8fff
 800dc08:	40010000 	.word	0x40010000
 800dc0c:	40010400 	.word	0x40010400
 800dc10:	40014000 	.word	0x40014000
 800dc14:	40014400 	.word	0x40014400
 800dc18:	40014800 	.word	0x40014800

0800dc1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b087      	sub	sp, #28
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a1b      	ldr	r3, [r3, #32]
 800dc2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6a1b      	ldr	r3, [r3, #32]
 800dc30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800dc44:	68fa      	ldr	r2, [r7, #12]
 800dc46:	4b21      	ldr	r3, [pc, #132]	; (800dccc <TIM_OC5_SetConfig+0xb0>)
 800dc48:	4013      	ands	r3, r2
 800dc4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	4313      	orrs	r3, r2
 800dc54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800dc5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	041b      	lsls	r3, r3, #16
 800dc64:	693a      	ldr	r2, [r7, #16]
 800dc66:	4313      	orrs	r3, r2
 800dc68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	4a18      	ldr	r2, [pc, #96]	; (800dcd0 <TIM_OC5_SetConfig+0xb4>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d00f      	beq.n	800dc92 <TIM_OC5_SetConfig+0x76>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4a17      	ldr	r2, [pc, #92]	; (800dcd4 <TIM_OC5_SetConfig+0xb8>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d00b      	beq.n	800dc92 <TIM_OC5_SetConfig+0x76>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4a16      	ldr	r2, [pc, #88]	; (800dcd8 <TIM_OC5_SetConfig+0xbc>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d007      	beq.n	800dc92 <TIM_OC5_SetConfig+0x76>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4a15      	ldr	r2, [pc, #84]	; (800dcdc <TIM_OC5_SetConfig+0xc0>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d003      	beq.n	800dc92 <TIM_OC5_SetConfig+0x76>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4a14      	ldr	r2, [pc, #80]	; (800dce0 <TIM_OC5_SetConfig+0xc4>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d109      	bne.n	800dca6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	695b      	ldr	r3, [r3, #20]
 800dc9e:	021b      	lsls	r3, r3, #8
 800dca0:	697a      	ldr	r2, [r7, #20]
 800dca2:	4313      	orrs	r3, r2
 800dca4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	68fa      	ldr	r2, [r7, #12]
 800dcb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	685a      	ldr	r2, [r3, #4]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	693a      	ldr	r2, [r7, #16]
 800dcbe:	621a      	str	r2, [r3, #32]
}
 800dcc0:	bf00      	nop
 800dcc2:	371c      	adds	r7, #28
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr
 800dccc:	fffeff8f 	.word	0xfffeff8f
 800dcd0:	40010000 	.word	0x40010000
 800dcd4:	40010400 	.word	0x40010400
 800dcd8:	40014000 	.word	0x40014000
 800dcdc:	40014400 	.word	0x40014400
 800dce0:	40014800 	.word	0x40014800

0800dce4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b087      	sub	sp, #28
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6a1b      	ldr	r3, [r3, #32]
 800dcf2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6a1b      	ldr	r3, [r3, #32]
 800dcf8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	4b22      	ldr	r3, [pc, #136]	; (800dd98 <TIM_OC6_SetConfig+0xb4>)
 800dd10:	4013      	ands	r3, r2
 800dd12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	021b      	lsls	r3, r3, #8
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dd26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	689b      	ldr	r3, [r3, #8]
 800dd2c:	051b      	lsls	r3, r3, #20
 800dd2e:	693a      	ldr	r2, [r7, #16]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	4a19      	ldr	r2, [pc, #100]	; (800dd9c <TIM_OC6_SetConfig+0xb8>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d00f      	beq.n	800dd5c <TIM_OC6_SetConfig+0x78>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4a18      	ldr	r2, [pc, #96]	; (800dda0 <TIM_OC6_SetConfig+0xbc>)
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d00b      	beq.n	800dd5c <TIM_OC6_SetConfig+0x78>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	4a17      	ldr	r2, [pc, #92]	; (800dda4 <TIM_OC6_SetConfig+0xc0>)
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d007      	beq.n	800dd5c <TIM_OC6_SetConfig+0x78>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a16      	ldr	r2, [pc, #88]	; (800dda8 <TIM_OC6_SetConfig+0xc4>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d003      	beq.n	800dd5c <TIM_OC6_SetConfig+0x78>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	4a15      	ldr	r2, [pc, #84]	; (800ddac <TIM_OC6_SetConfig+0xc8>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d109      	bne.n	800dd70 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dd62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	695b      	ldr	r3, [r3, #20]
 800dd68:	029b      	lsls	r3, r3, #10
 800dd6a:	697a      	ldr	r2, [r7, #20]
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	697a      	ldr	r2, [r7, #20]
 800dd74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	68fa      	ldr	r2, [r7, #12]
 800dd7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	685a      	ldr	r2, [r3, #4]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	693a      	ldr	r2, [r7, #16]
 800dd88:	621a      	str	r2, [r3, #32]
}
 800dd8a:	bf00      	nop
 800dd8c:	371c      	adds	r7, #28
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop
 800dd98:	feff8fff 	.word	0xfeff8fff
 800dd9c:	40010000 	.word	0x40010000
 800dda0:	40010400 	.word	0x40010400
 800dda4:	40014000 	.word	0x40014000
 800dda8:	40014400 	.word	0x40014400
 800ddac:	40014800 	.word	0x40014800

0800ddb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b087      	sub	sp, #28
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	6a1b      	ldr	r3, [r3, #32]
 800ddc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	6a1b      	ldr	r3, [r3, #32]
 800ddc6:	f023 0201 	bic.w	r2, r3, #1
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	699b      	ldr	r3, [r3, #24]
 800ddd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ddda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	011b      	lsls	r3, r3, #4
 800dde0:	693a      	ldr	r2, [r7, #16]
 800dde2:	4313      	orrs	r3, r2
 800dde4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	f023 030a 	bic.w	r3, r3, #10
 800ddec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ddee:	697a      	ldr	r2, [r7, #20]
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	693a      	ldr	r2, [r7, #16]
 800ddfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	697a      	ldr	r2, [r7, #20]
 800de00:	621a      	str	r2, [r3, #32]
}
 800de02:	bf00      	nop
 800de04:	371c      	adds	r7, #28
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr

0800de0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de0e:	b480      	push	{r7}
 800de10:	b087      	sub	sp, #28
 800de12:	af00      	add	r7, sp, #0
 800de14:	60f8      	str	r0, [r7, #12]
 800de16:	60b9      	str	r1, [r7, #8]
 800de18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	6a1b      	ldr	r3, [r3, #32]
 800de1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	6a1b      	ldr	r3, [r3, #32]
 800de24:	f023 0210 	bic.w	r2, r3, #16
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	699b      	ldr	r3, [r3, #24]
 800de30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800de38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	031b      	lsls	r3, r3, #12
 800de3e:	693a      	ldr	r2, [r7, #16]
 800de40:	4313      	orrs	r3, r2
 800de42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800de4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	011b      	lsls	r3, r3, #4
 800de50:	697a      	ldr	r2, [r7, #20]
 800de52:	4313      	orrs	r3, r2
 800de54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	693a      	ldr	r2, [r7, #16]
 800de5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	697a      	ldr	r2, [r7, #20]
 800de60:	621a      	str	r2, [r3, #32]
}
 800de62:	bf00      	nop
 800de64:	371c      	adds	r7, #28
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
	...

0800de70 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800de70:	b480      	push	{r7}
 800de72:	b085      	sub	sp, #20
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800de80:	68fa      	ldr	r2, [r7, #12]
 800de82:	4b09      	ldr	r3, [pc, #36]	; (800dea8 <TIM_ITRx_SetConfig+0x38>)
 800de84:	4013      	ands	r3, r2
 800de86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800de88:	683a      	ldr	r2, [r7, #0]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	f043 0307 	orr.w	r3, r3, #7
 800de92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	68fa      	ldr	r2, [r7, #12]
 800de98:	609a      	str	r2, [r3, #8]
}
 800de9a:	bf00      	nop
 800de9c:	3714      	adds	r7, #20
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr
 800dea6:	bf00      	nop
 800dea8:	ffcfff8f 	.word	0xffcfff8f

0800deac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800deac:	b480      	push	{r7}
 800deae:	b087      	sub	sp, #28
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	60f8      	str	r0, [r7, #12]
 800deb4:	60b9      	str	r1, [r7, #8]
 800deb6:	607a      	str	r2, [r7, #4]
 800deb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	021a      	lsls	r2, r3, #8
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	431a      	orrs	r2, r3
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	4313      	orrs	r3, r2
 800ded4:	697a      	ldr	r2, [r7, #20]
 800ded6:	4313      	orrs	r3, r2
 800ded8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	697a      	ldr	r2, [r7, #20]
 800dede:	609a      	str	r2, [r3, #8]
}
 800dee0:	bf00      	nop
 800dee2:	371c      	adds	r7, #28
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800deec:	b480      	push	{r7}
 800deee:	b087      	sub	sp, #28
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	f003 031f 	and.w	r3, r3, #31
 800defe:	2201      	movs	r2, #1
 800df00:	fa02 f303 	lsl.w	r3, r2, r3
 800df04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	6a1a      	ldr	r2, [r3, #32]
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	43db      	mvns	r3, r3
 800df0e:	401a      	ands	r2, r3
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6a1a      	ldr	r2, [r3, #32]
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	f003 031f 	and.w	r3, r3, #31
 800df1e:	6879      	ldr	r1, [r7, #4]
 800df20:	fa01 f303 	lsl.w	r3, r1, r3
 800df24:	431a      	orrs	r2, r3
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	621a      	str	r2, [r3, #32]
}
 800df2a:	bf00      	nop
 800df2c:	371c      	adds	r7, #28
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
	...

0800df38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df48:	2b01      	cmp	r3, #1
 800df4a:	d101      	bne.n	800df50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df4c:	2302      	movs	r3, #2
 800df4e:	e06d      	b.n	800e02c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2201      	movs	r2, #1
 800df54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2202      	movs	r2, #2
 800df5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	689b      	ldr	r3, [r3, #8]
 800df6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4a30      	ldr	r2, [pc, #192]	; (800e038 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d004      	beq.n	800df84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	4a2f      	ldr	r2, [pc, #188]	; (800e03c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d108      	bne.n	800df96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800df8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	68fa      	ldr	r2, [r7, #12]
 800df92:	4313      	orrs	r3, r2
 800df94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	68fa      	ldr	r2, [r7, #12]
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	68fa      	ldr	r2, [r7, #12]
 800dfae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4a20      	ldr	r2, [pc, #128]	; (800e038 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d022      	beq.n	800e000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfc2:	d01d      	beq.n	800e000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4a1d      	ldr	r2, [pc, #116]	; (800e040 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d018      	beq.n	800e000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	4a1c      	ldr	r2, [pc, #112]	; (800e044 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d013      	beq.n	800e000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a1a      	ldr	r2, [pc, #104]	; (800e048 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d00e      	beq.n	800e000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4a15      	ldr	r2, [pc, #84]	; (800e03c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d009      	beq.n	800e000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a16      	ldr	r2, [pc, #88]	; (800e04c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d004      	beq.n	800e000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4a15      	ldr	r2, [pc, #84]	; (800e050 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d10c      	bne.n	800e01a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e000:	68bb      	ldr	r3, [r7, #8]
 800e002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e006:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	689b      	ldr	r3, [r3, #8]
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	4313      	orrs	r3, r2
 800e010:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	68ba      	ldr	r2, [r7, #8]
 800e018:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2201      	movs	r2, #1
 800e01e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2200      	movs	r2, #0
 800e026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e02a:	2300      	movs	r3, #0
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3714      	adds	r7, #20
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	40010000 	.word	0x40010000
 800e03c:	40010400 	.word	0x40010400
 800e040:	40000400 	.word	0x40000400
 800e044:	40000800 	.word	0x40000800
 800e048:	40000c00 	.word	0x40000c00
 800e04c:	40001800 	.word	0x40001800
 800e050:	40014000 	.word	0x40014000

0800e054 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e054:	b480      	push	{r7}
 800e056:	b085      	sub	sp, #20
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e05e:	2300      	movs	r3, #0
 800e060:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d101      	bne.n	800e070 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e06c:	2302      	movs	r3, #2
 800e06e:	e065      	b.n	800e13c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2201      	movs	r2, #1
 800e074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	68db      	ldr	r3, [r3, #12]
 800e082:	4313      	orrs	r3, r2
 800e084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	689b      	ldr	r3, [r3, #8]
 800e090:	4313      	orrs	r3, r2
 800e092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	691b      	ldr	r3, [r3, #16]
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	695b      	ldr	r3, [r3, #20]
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0d6:	4313      	orrs	r3, r2
 800e0d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	699b      	ldr	r3, [r3, #24]
 800e0e4:	041b      	lsls	r3, r3, #16
 800e0e6:	4313      	orrs	r3, r2
 800e0e8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4a16      	ldr	r2, [pc, #88]	; (800e148 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d004      	beq.n	800e0fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4a14      	ldr	r2, [pc, #80]	; (800e14c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d115      	bne.n	800e12a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e108:	051b      	lsls	r3, r3, #20
 800e10a:	4313      	orrs	r3, r2
 800e10c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	69db      	ldr	r3, [r3, #28]
 800e118:	4313      	orrs	r3, r2
 800e11a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	6a1b      	ldr	r3, [r3, #32]
 800e126:	4313      	orrs	r3, r2
 800e128:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	68fa      	ldr	r2, [r7, #12]
 800e130:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2200      	movs	r2, #0
 800e136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e13a:	2300      	movs	r3, #0
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3714      	adds	r7, #20
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr
 800e148:	40010000 	.word	0x40010000
 800e14c:	40010400 	.word	0x40010400

0800e150 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e150:	b480      	push	{r7}
 800e152:	b083      	sub	sp, #12
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e158:	bf00      	nop
 800e15a:	370c      	adds	r7, #12
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e164:	b480      	push	{r7}
 800e166:	b083      	sub	sp, #12
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e16c:	bf00      	nop
 800e16e:	370c      	adds	r7, #12
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e180:	bf00      	nop
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d101      	bne.n	800e19e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e19a:	2301      	movs	r3, #1
 800e19c:	e042      	b.n	800e224 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d106      	bne.n	800e1b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f7f4 fd4f 	bl	8002c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2224      	movs	r2, #36	; 0x24
 800e1ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f022 0201 	bic.w	r2, r2, #1
 800e1cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d002      	beq.n	800e1dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f001 fbc2 	bl	800f960 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 fe57 	bl	800ee90 <UART_SetConfig>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d101      	bne.n	800e1ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	e01b      	b.n	800e224 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	685a      	ldr	r2, [r3, #4]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e1fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	689a      	ldr	r2, [r3, #8]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e20a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f042 0201 	orr.w	r2, r2, #1
 800e21a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f001 fc41 	bl	800faa4 <UART_CheckIdleState>
 800e222:	4603      	mov	r3, r0
}
 800e224:	4618      	mov	r0, r3
 800e226:	3708      	adds	r7, #8
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b08a      	sub	sp, #40	; 0x28
 800e230:	af02      	add	r7, sp, #8
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	603b      	str	r3, [r7, #0]
 800e238:	4613      	mov	r3, r2
 800e23a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e242:	2b20      	cmp	r3, #32
 800e244:	d17b      	bne.n	800e33e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d002      	beq.n	800e252 <HAL_UART_Transmit+0x26>
 800e24c:	88fb      	ldrh	r3, [r7, #6]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d101      	bne.n	800e256 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	e074      	b.n	800e340 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2200      	movs	r2, #0
 800e25a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	2221      	movs	r2, #33	; 0x21
 800e262:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e266:	f7f4 ffef 	bl	8003248 <HAL_GetTick>
 800e26a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	88fa      	ldrh	r2, [r7, #6]
 800e270:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	88fa      	ldrh	r2, [r7, #6]
 800e278:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e284:	d108      	bne.n	800e298 <HAL_UART_Transmit+0x6c>
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d104      	bne.n	800e298 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e28e:	2300      	movs	r3, #0
 800e290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	61bb      	str	r3, [r7, #24]
 800e296:	e003      	b.n	800e2a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e29c:	2300      	movs	r3, #0
 800e29e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e2a0:	e030      	b.n	800e304 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	9300      	str	r3, [sp, #0]
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	2180      	movs	r1, #128	; 0x80
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f001 fca3 	bl	800fbf8 <UART_WaitOnFlagUntilTimeout>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d005      	beq.n	800e2c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2220      	movs	r2, #32
 800e2bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e2c0:	2303      	movs	r3, #3
 800e2c2:	e03d      	b.n	800e340 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d10b      	bne.n	800e2e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	881b      	ldrh	r3, [r3, #0]
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e2d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	3302      	adds	r3, #2
 800e2de:	61bb      	str	r3, [r7, #24]
 800e2e0:	e007      	b.n	800e2f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	781a      	ldrb	r2, [r3, #0]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	3301      	adds	r3, #1
 800e2f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d1c8      	bne.n	800e2a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	2200      	movs	r2, #0
 800e318:	2140      	movs	r1, #64	; 0x40
 800e31a:	68f8      	ldr	r0, [r7, #12]
 800e31c:	f001 fc6c 	bl	800fbf8 <UART_WaitOnFlagUntilTimeout>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d005      	beq.n	800e332 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2220      	movs	r2, #32
 800e32a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e32e:	2303      	movs	r3, #3
 800e330:	e006      	b.n	800e340 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2220      	movs	r2, #32
 800e336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e33a:	2300      	movs	r3, #0
 800e33c:	e000      	b.n	800e340 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e33e:	2302      	movs	r3, #2
  }
}
 800e340:	4618      	mov	r0, r3
 800e342:	3720      	adds	r7, #32
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b08a      	sub	sp, #40	; 0x28
 800e34c:	af02      	add	r7, sp, #8
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	603b      	str	r3, [r7, #0]
 800e354:	4613      	mov	r3, r2
 800e356:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e35e:	2b20      	cmp	r3, #32
 800e360:	f040 80b5 	bne.w	800e4ce <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d002      	beq.n	800e370 <HAL_UART_Receive+0x28>
 800e36a:	88fb      	ldrh	r3, [r7, #6]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d101      	bne.n	800e374 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e370:	2301      	movs	r3, #1
 800e372:	e0ad      	b.n	800e4d0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2200      	movs	r2, #0
 800e378:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2222      	movs	r2, #34	; 0x22
 800e380:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2200      	movs	r2, #0
 800e388:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e38a:	f7f4 ff5d 	bl	8003248 <HAL_GetTick>
 800e38e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	88fa      	ldrh	r2, [r7, #6]
 800e394:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	88fa      	ldrh	r2, [r7, #6]
 800e39c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	689b      	ldr	r3, [r3, #8]
 800e3a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3a8:	d10e      	bne.n	800e3c8 <HAL_UART_Receive+0x80>
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d105      	bne.n	800e3be <HAL_UART_Receive+0x76>
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e3b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3bc:	e02d      	b.n	800e41a <HAL_UART_Receive+0xd2>
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	22ff      	movs	r2, #255	; 0xff
 800e3c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3c6:	e028      	b.n	800e41a <HAL_UART_Receive+0xd2>
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	689b      	ldr	r3, [r3, #8]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d10d      	bne.n	800e3ec <HAL_UART_Receive+0xa4>
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d104      	bne.n	800e3e2 <HAL_UART_Receive+0x9a>
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	22ff      	movs	r2, #255	; 0xff
 800e3dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3e0:	e01b      	b.n	800e41a <HAL_UART_Receive+0xd2>
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	227f      	movs	r2, #127	; 0x7f
 800e3e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e3ea:	e016      	b.n	800e41a <HAL_UART_Receive+0xd2>
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	689b      	ldr	r3, [r3, #8]
 800e3f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e3f4:	d10d      	bne.n	800e412 <HAL_UART_Receive+0xca>
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	691b      	ldr	r3, [r3, #16]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d104      	bne.n	800e408 <HAL_UART_Receive+0xc0>
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	227f      	movs	r2, #127	; 0x7f
 800e402:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e406:	e008      	b.n	800e41a <HAL_UART_Receive+0xd2>
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	223f      	movs	r2, #63	; 0x3f
 800e40c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e410:	e003      	b.n	800e41a <HAL_UART_Receive+0xd2>
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2200      	movs	r2, #0
 800e416:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e420:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	689b      	ldr	r3, [r3, #8]
 800e426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e42a:	d108      	bne.n	800e43e <HAL_UART_Receive+0xf6>
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	691b      	ldr	r3, [r3, #16]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d104      	bne.n	800e43e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e434:	2300      	movs	r3, #0
 800e436:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	61bb      	str	r3, [r7, #24]
 800e43c:	e003      	b.n	800e446 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e442:	2300      	movs	r3, #0
 800e444:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e446:	e036      	b.n	800e4b6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	9300      	str	r3, [sp, #0]
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	2200      	movs	r2, #0
 800e450:	2120      	movs	r1, #32
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	f001 fbd0 	bl	800fbf8 <UART_WaitOnFlagUntilTimeout>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d005      	beq.n	800e46a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	2220      	movs	r2, #32
 800e462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800e466:	2303      	movs	r3, #3
 800e468:	e032      	b.n	800e4d0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800e46a:	69fb      	ldr	r3, [r7, #28]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d10c      	bne.n	800e48a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e476:	b29a      	uxth	r2, r3
 800e478:	8a7b      	ldrh	r3, [r7, #18]
 800e47a:	4013      	ands	r3, r2
 800e47c:	b29a      	uxth	r2, r3
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	3302      	adds	r3, #2
 800e486:	61bb      	str	r3, [r7, #24]
 800e488:	e00c      	b.n	800e4a4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e490:	b2da      	uxtb	r2, r3
 800e492:	8a7b      	ldrh	r3, [r7, #18]
 800e494:	b2db      	uxtb	r3, r3
 800e496:	4013      	ands	r3, r2
 800e498:	b2da      	uxtb	r2, r3
 800e49a:	69fb      	ldr	r3, [r7, #28]
 800e49c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	3b01      	subs	r3, #1
 800e4ae:	b29a      	uxth	r2, r3
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d1c2      	bne.n	800e448 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2220      	movs	r2, #32
 800e4c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	e000      	b.n	800e4d0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800e4ce:	2302      	movs	r3, #2
  }
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3720      	adds	r7, #32
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b08a      	sub	sp, #40	; 0x28
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	60f8      	str	r0, [r7, #12]
 800e4e0:	60b9      	str	r1, [r7, #8]
 800e4e2:	4613      	mov	r3, r2
 800e4e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4ec:	2b20      	cmp	r3, #32
 800e4ee:	d137      	bne.n	800e560 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d002      	beq.n	800e4fc <HAL_UART_Receive_IT+0x24>
 800e4f6:	88fb      	ldrh	r3, [r7, #6]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d101      	bne.n	800e500 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e030      	b.n	800e562 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2200      	movs	r2, #0
 800e504:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a18      	ldr	r2, [pc, #96]	; (800e56c <HAL_UART_Receive_IT+0x94>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d01f      	beq.n	800e550 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d018      	beq.n	800e550 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	e853 3f00 	ldrex	r3, [r3]
 800e52a:	613b      	str	r3, [r7, #16]
   return(result);
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e532:	627b      	str	r3, [r7, #36]	; 0x24
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	461a      	mov	r2, r3
 800e53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53c:	623b      	str	r3, [r7, #32]
 800e53e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e540:	69f9      	ldr	r1, [r7, #28]
 800e542:	6a3a      	ldr	r2, [r7, #32]
 800e544:	e841 2300 	strex	r3, r2, [r1]
 800e548:	61bb      	str	r3, [r7, #24]
   return(result);
 800e54a:	69bb      	ldr	r3, [r7, #24]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1e6      	bne.n	800e51e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e550:	88fb      	ldrh	r3, [r7, #6]
 800e552:	461a      	mov	r2, r3
 800e554:	68b9      	ldr	r1, [r7, #8]
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f001 fbbc 	bl	800fcd4 <UART_Start_Receive_IT>
 800e55c:	4603      	mov	r3, r0
 800e55e:	e000      	b.n	800e562 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e560:	2302      	movs	r3, #2
  }
}
 800e562:	4618      	mov	r0, r3
 800e564:	3728      	adds	r7, #40	; 0x28
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
 800e56a:	bf00      	nop
 800e56c:	58000c00 	.word	0x58000c00

0800e570 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b09a      	sub	sp, #104	; 0x68
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e580:	e853 3f00 	ldrex	r3, [r3]
 800e584:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e588:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e58c:	667b      	str	r3, [r7, #100]	; 0x64
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	461a      	mov	r2, r3
 800e594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e596:	657b      	str	r3, [r7, #84]	; 0x54
 800e598:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e59a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e59c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e59e:	e841 2300 	strex	r3, r2, [r1]
 800e5a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e5a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1e6      	bne.n	800e578 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	3308      	adds	r3, #8
 800e5b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5b4:	e853 3f00 	ldrex	r3, [r3]
 800e5b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e5ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5bc:	4b46      	ldr	r3, [pc, #280]	; (800e6d8 <HAL_UART_AbortReceive+0x168>)
 800e5be:	4013      	ands	r3, r2
 800e5c0:	663b      	str	r3, [r7, #96]	; 0x60
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	3308      	adds	r3, #8
 800e5c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e5ca:	643a      	str	r2, [r7, #64]	; 0x40
 800e5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e5d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e5d2:	e841 2300 	strex	r3, r2, [r1]
 800e5d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d1e5      	bne.n	800e5aa <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5e2:	2b01      	cmp	r3, #1
 800e5e4:	d118      	bne.n	800e618 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ec:	6a3b      	ldr	r3, [r7, #32]
 800e5ee:	e853 3f00 	ldrex	r3, [r3]
 800e5f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	f023 0310 	bic.w	r3, r3, #16
 800e5fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	461a      	mov	r2, r3
 800e602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e604:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e606:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e60a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e60c:	e841 2300 	strex	r3, r2, [r1]
 800e610:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e614:	2b00      	cmp	r3, #0
 800e616:	d1e6      	bne.n	800e5e6 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e622:	2b40      	cmp	r3, #64	; 0x40
 800e624:	d13b      	bne.n	800e69e <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	3308      	adds	r3, #8
 800e62c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	e853 3f00 	ldrex	r3, [r3]
 800e634:	60bb      	str	r3, [r7, #8]
   return(result);
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e63c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3308      	adds	r3, #8
 800e644:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e646:	61ba      	str	r2, [r7, #24]
 800e648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e64a:	6979      	ldr	r1, [r7, #20]
 800e64c:	69ba      	ldr	r2, [r7, #24]
 800e64e:	e841 2300 	strex	r3, r2, [r1]
 800e652:	613b      	str	r3, [r7, #16]
   return(result);
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1e5      	bne.n	800e626 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e660:	2b00      	cmp	r3, #0
 800e662:	d01c      	beq.n	800e69e <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e66a:	2200      	movs	r2, #0
 800e66c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e674:	4618      	mov	r0, r3
 800e676:	f7f7 fcd5 	bl	8006024 <HAL_DMA_Abort>
 800e67a:	4603      	mov	r3, r0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d00e      	beq.n	800e69e <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e686:	4618      	mov	r0, r3
 800e688:	f7f9 f95a 	bl	8007940 <HAL_DMA_GetError>
 800e68c:	4603      	mov	r3, r0
 800e68e:	2b20      	cmp	r3, #32
 800e690:	d105      	bne.n	800e69e <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2210      	movs	r2, #16
 800e696:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800e69a:	2303      	movs	r3, #3
 800e69c:	e017      	b.n	800e6ce <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	220f      	movs	r2, #15
 800e6ac:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	699a      	ldr	r2, [r3, #24]
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	f042 0208 	orr.w	r2, r2, #8
 800e6bc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2220      	movs	r2, #32
 800e6c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800e6cc:	2300      	movs	r3, #0
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3768      	adds	r7, #104	; 0x68
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	effffffe 	.word	0xeffffffe

0800e6dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b0ba      	sub	sp, #232	; 0xe8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	69db      	ldr	r3, [r3, #28]
 800e6ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	689b      	ldr	r3, [r3, #8]
 800e6fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e702:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e706:	f640 030f 	movw	r3, #2063	; 0x80f
 800e70a:	4013      	ands	r3, r2
 800e70c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e714:	2b00      	cmp	r3, #0
 800e716:	d11b      	bne.n	800e750 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e71c:	f003 0320 	and.w	r3, r3, #32
 800e720:	2b00      	cmp	r3, #0
 800e722:	d015      	beq.n	800e750 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e728:	f003 0320 	and.w	r3, r3, #32
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d105      	bne.n	800e73c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d009      	beq.n	800e750 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e740:	2b00      	cmp	r3, #0
 800e742:	f000 8377 	beq.w	800ee34 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	4798      	blx	r3
      }
      return;
 800e74e:	e371      	b.n	800ee34 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e754:	2b00      	cmp	r3, #0
 800e756:	f000 8123 	beq.w	800e9a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e75a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e75e:	4b8d      	ldr	r3, [pc, #564]	; (800e994 <HAL_UART_IRQHandler+0x2b8>)
 800e760:	4013      	ands	r3, r2
 800e762:	2b00      	cmp	r3, #0
 800e764:	d106      	bne.n	800e774 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e766:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e76a:	4b8b      	ldr	r3, [pc, #556]	; (800e998 <HAL_UART_IRQHandler+0x2bc>)
 800e76c:	4013      	ands	r3, r2
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f000 8116 	beq.w	800e9a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e778:	f003 0301 	and.w	r3, r3, #1
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d011      	beq.n	800e7a4 <HAL_UART_IRQHandler+0xc8>
 800e780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00b      	beq.n	800e7a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2201      	movs	r2, #1
 800e792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e79a:	f043 0201 	orr.w	r2, r3, #1
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7a8:	f003 0302 	and.w	r3, r3, #2
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d011      	beq.n	800e7d4 <HAL_UART_IRQHandler+0xf8>
 800e7b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e7b4:	f003 0301 	and.w	r3, r3, #1
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d00b      	beq.n	800e7d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2202      	movs	r2, #2
 800e7c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7ca:	f043 0204 	orr.w	r2, r3, #4
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e7d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e7d8:	f003 0304 	and.w	r3, r3, #4
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d011      	beq.n	800e804 <HAL_UART_IRQHandler+0x128>
 800e7e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e7e4:	f003 0301 	and.w	r3, r3, #1
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d00b      	beq.n	800e804 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	2204      	movs	r2, #4
 800e7f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7fa:	f043 0202 	orr.w	r2, r3, #2
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e808:	f003 0308 	and.w	r3, r3, #8
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d017      	beq.n	800e840 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e814:	f003 0320 	and.w	r3, r3, #32
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d105      	bne.n	800e828 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e81c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e820:	4b5c      	ldr	r3, [pc, #368]	; (800e994 <HAL_UART_IRQHandler+0x2b8>)
 800e822:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e824:	2b00      	cmp	r3, #0
 800e826:	d00b      	beq.n	800e840 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2208      	movs	r2, #8
 800e82e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e836:	f043 0208 	orr.w	r2, r3, #8
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d012      	beq.n	800e872 <HAL_UART_IRQHandler+0x196>
 800e84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00c      	beq.n	800e872 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e868:	f043 0220 	orr.w	r2, r3, #32
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e878:	2b00      	cmp	r3, #0
 800e87a:	f000 82dd 	beq.w	800ee38 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e882:	f003 0320 	and.w	r3, r3, #32
 800e886:	2b00      	cmp	r3, #0
 800e888:	d013      	beq.n	800e8b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e88a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e88e:	f003 0320 	and.w	r3, r3, #32
 800e892:	2b00      	cmp	r3, #0
 800e894:	d105      	bne.n	800e8a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e89a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d007      	beq.n	800e8b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d003      	beq.n	800e8b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	689b      	ldr	r3, [r3, #8]
 800e8c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8c6:	2b40      	cmp	r3, #64	; 0x40
 800e8c8:	d005      	beq.n	800e8d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e8ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e8ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d054      	beq.n	800e980 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f001 fb1e 	bl	800ff18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8e6:	2b40      	cmp	r3, #64	; 0x40
 800e8e8:	d146      	bne.n	800e978 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	3308      	adds	r3, #8
 800e8f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e8f8:	e853 3f00 	ldrex	r3, [r3]
 800e8fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	3308      	adds	r3, #8
 800e912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e916:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e91a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e91e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e926:	e841 2300 	strex	r3, r2, [r1]
 800e92a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e92e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d1d9      	bne.n	800e8ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d017      	beq.n	800e970 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e946:	4a15      	ldr	r2, [pc, #84]	; (800e99c <HAL_UART_IRQHandler+0x2c0>)
 800e948:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e950:	4618      	mov	r0, r3
 800e952:	f7f7 fe85 	bl	8006660 <HAL_DMA_Abort_IT>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d019      	beq.n	800e990 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e96a:	4610      	mov	r0, r2
 800e96c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e96e:	e00f      	b.n	800e990 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 fa77 	bl	800ee64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e976:	e00b      	b.n	800e990 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 fa73 	bl	800ee64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e97e:	e007      	b.n	800e990 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f000 fa6f 	bl	800ee64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e98e:	e253      	b.n	800ee38 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e990:	bf00      	nop
    return;
 800e992:	e251      	b.n	800ee38 <HAL_UART_IRQHandler+0x75c>
 800e994:	10000001 	.word	0x10000001
 800e998:	04000120 	.word	0x04000120
 800e99c:	0800ffe5 	.word	0x0800ffe5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	f040 81e7 	bne.w	800ed78 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e9aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e9ae:	f003 0310 	and.w	r3, r3, #16
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f000 81e0 	beq.w	800ed78 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e9b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e9bc:	f003 0310 	and.w	r3, r3, #16
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	f000 81d9 	beq.w	800ed78 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2210      	movs	r2, #16
 800e9cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9d8:	2b40      	cmp	r3, #64	; 0x40
 800e9da:	f040 8151 	bne.w	800ec80 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4a96      	ldr	r2, [pc, #600]	; (800ec40 <HAL_UART_IRQHandler+0x564>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d068      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4a93      	ldr	r2, [pc, #588]	; (800ec44 <HAL_UART_IRQHandler+0x568>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d061      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4a91      	ldr	r2, [pc, #580]	; (800ec48 <HAL_UART_IRQHandler+0x56c>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d05a      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4a8e      	ldr	r2, [pc, #568]	; (800ec4c <HAL_UART_IRQHandler+0x570>)
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d053      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4a8c      	ldr	r2, [pc, #560]	; (800ec50 <HAL_UART_IRQHandler+0x574>)
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d04c      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a89      	ldr	r2, [pc, #548]	; (800ec54 <HAL_UART_IRQHandler+0x578>)
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	d045      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a87      	ldr	r2, [pc, #540]	; (800ec58 <HAL_UART_IRQHandler+0x57c>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d03e      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	4a84      	ldr	r2, [pc, #528]	; (800ec5c <HAL_UART_IRQHandler+0x580>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d037      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	4a82      	ldr	r2, [pc, #520]	; (800ec60 <HAL_UART_IRQHandler+0x584>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d030      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4a7f      	ldr	r2, [pc, #508]	; (800ec64 <HAL_UART_IRQHandler+0x588>)
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d029      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	4a7d      	ldr	r2, [pc, #500]	; (800ec68 <HAL_UART_IRQHandler+0x58c>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d022      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4a7a      	ldr	r2, [pc, #488]	; (800ec6c <HAL_UART_IRQHandler+0x590>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d01b      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	4a78      	ldr	r2, [pc, #480]	; (800ec70 <HAL_UART_IRQHandler+0x594>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d014      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4a75      	ldr	r2, [pc, #468]	; (800ec74 <HAL_UART_IRQHandler+0x598>)
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d00d      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	4a73      	ldr	r2, [pc, #460]	; (800ec78 <HAL_UART_IRQHandler+0x59c>)
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d006      	beq.n	800eabe <HAL_UART_IRQHandler+0x3e2>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a70      	ldr	r2, [pc, #448]	; (800ec7c <HAL_UART_IRQHandler+0x5a0>)
 800eaba:	4293      	cmp	r3, r2
 800eabc:	d106      	bne.n	800eacc <HAL_UART_IRQHandler+0x3f0>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	e005      	b.n	800ead8 <HAL_UART_IRQHandler+0x3fc>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eadc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f000 81ab 	beq.w	800ee3c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eaec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	f080 81a3 	bcs.w	800ee3c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800eafc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb06:	69db      	ldr	r3, [r3, #28]
 800eb08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb0c:	f000 8087 	beq.w	800ec1e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800eb1c:	e853 3f00 	ldrex	r3, [r3]
 800eb20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800eb24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800eb28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	461a      	mov	r2, r3
 800eb36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eb3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800eb3e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800eb46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800eb4a:	e841 2300 	strex	r3, r2, [r1]
 800eb4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800eb52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1da      	bne.n	800eb10 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	3308      	adds	r3, #8
 800eb60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eb64:	e853 3f00 	ldrex	r3, [r3]
 800eb68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800eb6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb6c:	f023 0301 	bic.w	r3, r3, #1
 800eb70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	3308      	adds	r3, #8
 800eb7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800eb7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800eb82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800eb86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800eb8a:	e841 2300 	strex	r3, r2, [r1]
 800eb8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800eb90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d1e1      	bne.n	800eb5a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	3308      	adds	r3, #8
 800eb9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eba0:	e853 3f00 	ldrex	r3, [r3]
 800eba4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800eba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eba8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	3308      	adds	r3, #8
 800ebb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ebba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ebbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ebc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ebc2:	e841 2300 	strex	r3, r2, [r1]
 800ebc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ebc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d1e3      	bne.n	800eb96 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2220      	movs	r2, #32
 800ebd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebe4:	e853 3f00 	ldrex	r3, [r3]
 800ebe8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ebea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebec:	f023 0310 	bic.w	r3, r3, #16
 800ebf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	461a      	mov	r2, r3
 800ebfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ebfe:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ec04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ec06:	e841 2300 	strex	r3, r2, [r1]
 800ec0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ec0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d1e4      	bne.n	800ebdc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7f7 fa03 	bl	8006024 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2202      	movs	r2, #2
 800ec22:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	4619      	mov	r1, r3
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 f91d 	bl	800ee78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ec3e:	e0fd      	b.n	800ee3c <HAL_UART_IRQHandler+0x760>
 800ec40:	40020010 	.word	0x40020010
 800ec44:	40020028 	.word	0x40020028
 800ec48:	40020040 	.word	0x40020040
 800ec4c:	40020058 	.word	0x40020058
 800ec50:	40020070 	.word	0x40020070
 800ec54:	40020088 	.word	0x40020088
 800ec58:	400200a0 	.word	0x400200a0
 800ec5c:	400200b8 	.word	0x400200b8
 800ec60:	40020410 	.word	0x40020410
 800ec64:	40020428 	.word	0x40020428
 800ec68:	40020440 	.word	0x40020440
 800ec6c:	40020458 	.word	0x40020458
 800ec70:	40020470 	.word	0x40020470
 800ec74:	40020488 	.word	0x40020488
 800ec78:	400204a0 	.word	0x400204a0
 800ec7c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	1ad3      	subs	r3, r2, r3
 800ec90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f000 80cf 	beq.w	800ee40 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800eca2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	f000 80ca 	beq.w	800ee40 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb4:	e853 3f00 	ldrex	r3, [r3]
 800ecb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ecba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ecc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	461a      	mov	r2, r3
 800ecca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ecce:	647b      	str	r3, [r7, #68]	; 0x44
 800ecd0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ecd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ecd6:	e841 2300 	strex	r3, r2, [r1]
 800ecda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ecdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d1e4      	bne.n	800ecac <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	3308      	adds	r3, #8
 800ece8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecec:	e853 3f00 	ldrex	r3, [r3]
 800ecf0:	623b      	str	r3, [r7, #32]
   return(result);
 800ecf2:	6a3a      	ldr	r2, [r7, #32]
 800ecf4:	4b55      	ldr	r3, [pc, #340]	; (800ee4c <HAL_UART_IRQHandler+0x770>)
 800ecf6:	4013      	ands	r3, r2
 800ecf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	3308      	adds	r3, #8
 800ed02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ed06:	633a      	str	r2, [r7, #48]	; 0x30
 800ed08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed0e:	e841 2300 	strex	r3, r2, [r1]
 800ed12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ed14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d1e3      	bne.n	800ece2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2220      	movs	r2, #32
 800ed1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2200      	movs	r2, #0
 800ed26:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	e853 3f00 	ldrex	r3, [r3]
 800ed3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f023 0310 	bic.w	r3, r3, #16
 800ed42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ed50:	61fb      	str	r3, [r7, #28]
 800ed52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed54:	69b9      	ldr	r1, [r7, #24]
 800ed56:	69fa      	ldr	r2, [r7, #28]
 800ed58:	e841 2300 	strex	r3, r2, [r1]
 800ed5c:	617b      	str	r3, [r7, #20]
   return(result);
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d1e4      	bne.n	800ed2e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2202      	movs	r2, #2
 800ed68:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ed6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ed6e:	4619      	mov	r1, r3
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f000 f881 	bl	800ee78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ed76:	e063      	b.n	800ee40 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ed78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d00e      	beq.n	800eda2 <HAL_UART_IRQHandler+0x6c6>
 800ed84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d008      	beq.n	800eda2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ed98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f001 fe80 	bl	8010aa0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eda0:	e051      	b.n	800ee46 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eda2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eda6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d014      	beq.n	800edd8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800edae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d105      	bne.n	800edc6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800edba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d008      	beq.n	800edd8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d03a      	beq.n	800ee44 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	4798      	blx	r3
    }
    return;
 800edd6:	e035      	b.n	800ee44 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800edd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d009      	beq.n	800edf8 <HAL_UART_IRQHandler+0x71c>
 800ede4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ede8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edec:	2b00      	cmp	r3, #0
 800edee:	d003      	beq.n	800edf8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f001 f90d 	bl	8010010 <UART_EndTransmit_IT>
    return;
 800edf6:	e026      	b.n	800ee46 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800edf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d009      	beq.n	800ee18 <HAL_UART_IRQHandler+0x73c>
 800ee04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d003      	beq.n	800ee18 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f001 fe59 	bl	8010ac8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ee16:	e016      	b.n	800ee46 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ee18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d010      	beq.n	800ee46 <HAL_UART_IRQHandler+0x76a>
 800ee24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	da0c      	bge.n	800ee46 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f001 fe41 	bl	8010ab4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ee32:	e008      	b.n	800ee46 <HAL_UART_IRQHandler+0x76a>
      return;
 800ee34:	bf00      	nop
 800ee36:	e006      	b.n	800ee46 <HAL_UART_IRQHandler+0x76a>
    return;
 800ee38:	bf00      	nop
 800ee3a:	e004      	b.n	800ee46 <HAL_UART_IRQHandler+0x76a>
      return;
 800ee3c:	bf00      	nop
 800ee3e:	e002      	b.n	800ee46 <HAL_UART_IRQHandler+0x76a>
      return;
 800ee40:	bf00      	nop
 800ee42:	e000      	b.n	800ee46 <HAL_UART_IRQHandler+0x76a>
    return;
 800ee44:	bf00      	nop
  }
}
 800ee46:	37e8      	adds	r7, #232	; 0xe8
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	effffffe 	.word	0xeffffffe

0800ee50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ee58:	bf00      	nop
 800ee5a:	370c      	adds	r7, #12
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr

0800ee64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ee6c:	bf00      	nop
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	460b      	mov	r3, r1
 800ee82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ee84:	bf00      	nop
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8e:	4770      	bx	lr

0800ee90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ee90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ee94:	b092      	sub	sp, #72	; 0x48
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	689a      	ldr	r2, [r3, #8]
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	691b      	ldr	r3, [r3, #16]
 800eea8:	431a      	orrs	r2, r3
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	695b      	ldr	r3, [r3, #20]
 800eeae:	431a      	orrs	r2, r3
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	69db      	ldr	r3, [r3, #28]
 800eeb4:	4313      	orrs	r3, r2
 800eeb6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	681a      	ldr	r2, [r3, #0]
 800eebe:	4bbe      	ldr	r3, [pc, #760]	; (800f1b8 <UART_SetConfig+0x328>)
 800eec0:	4013      	ands	r3, r2
 800eec2:	697a      	ldr	r2, [r7, #20]
 800eec4:	6812      	ldr	r2, [r2, #0]
 800eec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eec8:	430b      	orrs	r3, r1
 800eeca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	68da      	ldr	r2, [r3, #12]
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	430a      	orrs	r2, r1
 800eee0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	699b      	ldr	r3, [r3, #24]
 800eee6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4ab3      	ldr	r2, [pc, #716]	; (800f1bc <UART_SetConfig+0x32c>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d004      	beq.n	800eefc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	6a1b      	ldr	r3, [r3, #32]
 800eef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eef8:	4313      	orrs	r3, r2
 800eefa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	689a      	ldr	r2, [r3, #8]
 800ef02:	4baf      	ldr	r3, [pc, #700]	; (800f1c0 <UART_SetConfig+0x330>)
 800ef04:	4013      	ands	r3, r2
 800ef06:	697a      	ldr	r2, [r7, #20]
 800ef08:	6812      	ldr	r2, [r2, #0]
 800ef0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef0c:	430b      	orrs	r3, r1
 800ef0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef16:	f023 010f 	bic.w	r1, r3, #15
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	430a      	orrs	r2, r1
 800ef24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	4aa6      	ldr	r2, [pc, #664]	; (800f1c4 <UART_SetConfig+0x334>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d177      	bne.n	800f020 <UART_SetConfig+0x190>
 800ef30:	4ba5      	ldr	r3, [pc, #660]	; (800f1c8 <UART_SetConfig+0x338>)
 800ef32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef38:	2b28      	cmp	r3, #40	; 0x28
 800ef3a:	d86d      	bhi.n	800f018 <UART_SetConfig+0x188>
 800ef3c:	a201      	add	r2, pc, #4	; (adr r2, 800ef44 <UART_SetConfig+0xb4>)
 800ef3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef42:	bf00      	nop
 800ef44:	0800efe9 	.word	0x0800efe9
 800ef48:	0800f019 	.word	0x0800f019
 800ef4c:	0800f019 	.word	0x0800f019
 800ef50:	0800f019 	.word	0x0800f019
 800ef54:	0800f019 	.word	0x0800f019
 800ef58:	0800f019 	.word	0x0800f019
 800ef5c:	0800f019 	.word	0x0800f019
 800ef60:	0800f019 	.word	0x0800f019
 800ef64:	0800eff1 	.word	0x0800eff1
 800ef68:	0800f019 	.word	0x0800f019
 800ef6c:	0800f019 	.word	0x0800f019
 800ef70:	0800f019 	.word	0x0800f019
 800ef74:	0800f019 	.word	0x0800f019
 800ef78:	0800f019 	.word	0x0800f019
 800ef7c:	0800f019 	.word	0x0800f019
 800ef80:	0800f019 	.word	0x0800f019
 800ef84:	0800eff9 	.word	0x0800eff9
 800ef88:	0800f019 	.word	0x0800f019
 800ef8c:	0800f019 	.word	0x0800f019
 800ef90:	0800f019 	.word	0x0800f019
 800ef94:	0800f019 	.word	0x0800f019
 800ef98:	0800f019 	.word	0x0800f019
 800ef9c:	0800f019 	.word	0x0800f019
 800efa0:	0800f019 	.word	0x0800f019
 800efa4:	0800f001 	.word	0x0800f001
 800efa8:	0800f019 	.word	0x0800f019
 800efac:	0800f019 	.word	0x0800f019
 800efb0:	0800f019 	.word	0x0800f019
 800efb4:	0800f019 	.word	0x0800f019
 800efb8:	0800f019 	.word	0x0800f019
 800efbc:	0800f019 	.word	0x0800f019
 800efc0:	0800f019 	.word	0x0800f019
 800efc4:	0800f009 	.word	0x0800f009
 800efc8:	0800f019 	.word	0x0800f019
 800efcc:	0800f019 	.word	0x0800f019
 800efd0:	0800f019 	.word	0x0800f019
 800efd4:	0800f019 	.word	0x0800f019
 800efd8:	0800f019 	.word	0x0800f019
 800efdc:	0800f019 	.word	0x0800f019
 800efe0:	0800f019 	.word	0x0800f019
 800efe4:	0800f011 	.word	0x0800f011
 800efe8:	2301      	movs	r3, #1
 800efea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efee:	e222      	b.n	800f436 <UART_SetConfig+0x5a6>
 800eff0:	2304      	movs	r3, #4
 800eff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eff6:	e21e      	b.n	800f436 <UART_SetConfig+0x5a6>
 800eff8:	2308      	movs	r3, #8
 800effa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800effe:	e21a      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f000:	2310      	movs	r3, #16
 800f002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f006:	e216      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f008:	2320      	movs	r3, #32
 800f00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f00e:	e212      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f010:	2340      	movs	r3, #64	; 0x40
 800f012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f016:	e20e      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f018:	2380      	movs	r3, #128	; 0x80
 800f01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f01e:	e20a      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4a69      	ldr	r2, [pc, #420]	; (800f1cc <UART_SetConfig+0x33c>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d130      	bne.n	800f08c <UART_SetConfig+0x1fc>
 800f02a:	4b67      	ldr	r3, [pc, #412]	; (800f1c8 <UART_SetConfig+0x338>)
 800f02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f02e:	f003 0307 	and.w	r3, r3, #7
 800f032:	2b05      	cmp	r3, #5
 800f034:	d826      	bhi.n	800f084 <UART_SetConfig+0x1f4>
 800f036:	a201      	add	r2, pc, #4	; (adr r2, 800f03c <UART_SetConfig+0x1ac>)
 800f038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f03c:	0800f055 	.word	0x0800f055
 800f040:	0800f05d 	.word	0x0800f05d
 800f044:	0800f065 	.word	0x0800f065
 800f048:	0800f06d 	.word	0x0800f06d
 800f04c:	0800f075 	.word	0x0800f075
 800f050:	0800f07d 	.word	0x0800f07d
 800f054:	2300      	movs	r3, #0
 800f056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05a:	e1ec      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f05c:	2304      	movs	r3, #4
 800f05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f062:	e1e8      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f064:	2308      	movs	r3, #8
 800f066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f06a:	e1e4      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f06c:	2310      	movs	r3, #16
 800f06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f072:	e1e0      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f074:	2320      	movs	r3, #32
 800f076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f07a:	e1dc      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f07c:	2340      	movs	r3, #64	; 0x40
 800f07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f082:	e1d8      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f084:	2380      	movs	r3, #128	; 0x80
 800f086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f08a:	e1d4      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a4f      	ldr	r2, [pc, #316]	; (800f1d0 <UART_SetConfig+0x340>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d130      	bne.n	800f0f8 <UART_SetConfig+0x268>
 800f096:	4b4c      	ldr	r3, [pc, #304]	; (800f1c8 <UART_SetConfig+0x338>)
 800f098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f09a:	f003 0307 	and.w	r3, r3, #7
 800f09e:	2b05      	cmp	r3, #5
 800f0a0:	d826      	bhi.n	800f0f0 <UART_SetConfig+0x260>
 800f0a2:	a201      	add	r2, pc, #4	; (adr r2, 800f0a8 <UART_SetConfig+0x218>)
 800f0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a8:	0800f0c1 	.word	0x0800f0c1
 800f0ac:	0800f0c9 	.word	0x0800f0c9
 800f0b0:	0800f0d1 	.word	0x0800f0d1
 800f0b4:	0800f0d9 	.word	0x0800f0d9
 800f0b8:	0800f0e1 	.word	0x0800f0e1
 800f0bc:	0800f0e9 	.word	0x0800f0e9
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c6:	e1b6      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f0c8:	2304      	movs	r3, #4
 800f0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ce:	e1b2      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f0d0:	2308      	movs	r3, #8
 800f0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d6:	e1ae      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f0d8:	2310      	movs	r3, #16
 800f0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0de:	e1aa      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f0e0:	2320      	movs	r3, #32
 800f0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e6:	e1a6      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f0e8:	2340      	movs	r3, #64	; 0x40
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ee:	e1a2      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f0f0:	2380      	movs	r3, #128	; 0x80
 800f0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0f6:	e19e      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4a35      	ldr	r2, [pc, #212]	; (800f1d4 <UART_SetConfig+0x344>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d130      	bne.n	800f164 <UART_SetConfig+0x2d4>
 800f102:	4b31      	ldr	r3, [pc, #196]	; (800f1c8 <UART_SetConfig+0x338>)
 800f104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f106:	f003 0307 	and.w	r3, r3, #7
 800f10a:	2b05      	cmp	r3, #5
 800f10c:	d826      	bhi.n	800f15c <UART_SetConfig+0x2cc>
 800f10e:	a201      	add	r2, pc, #4	; (adr r2, 800f114 <UART_SetConfig+0x284>)
 800f110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f114:	0800f12d 	.word	0x0800f12d
 800f118:	0800f135 	.word	0x0800f135
 800f11c:	0800f13d 	.word	0x0800f13d
 800f120:	0800f145 	.word	0x0800f145
 800f124:	0800f14d 	.word	0x0800f14d
 800f128:	0800f155 	.word	0x0800f155
 800f12c:	2300      	movs	r3, #0
 800f12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f132:	e180      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f134:	2304      	movs	r3, #4
 800f136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f13a:	e17c      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f13c:	2308      	movs	r3, #8
 800f13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f142:	e178      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f144:	2310      	movs	r3, #16
 800f146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14a:	e174      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f14c:	2320      	movs	r3, #32
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f152:	e170      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f154:	2340      	movs	r3, #64	; 0x40
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f15a:	e16c      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f15c:	2380      	movs	r3, #128	; 0x80
 800f15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f162:	e168      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	4a1b      	ldr	r2, [pc, #108]	; (800f1d8 <UART_SetConfig+0x348>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d142      	bne.n	800f1f4 <UART_SetConfig+0x364>
 800f16e:	4b16      	ldr	r3, [pc, #88]	; (800f1c8 <UART_SetConfig+0x338>)
 800f170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f172:	f003 0307 	and.w	r3, r3, #7
 800f176:	2b05      	cmp	r3, #5
 800f178:	d838      	bhi.n	800f1ec <UART_SetConfig+0x35c>
 800f17a:	a201      	add	r2, pc, #4	; (adr r2, 800f180 <UART_SetConfig+0x2f0>)
 800f17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f180:	0800f199 	.word	0x0800f199
 800f184:	0800f1a1 	.word	0x0800f1a1
 800f188:	0800f1a9 	.word	0x0800f1a9
 800f18c:	0800f1b1 	.word	0x0800f1b1
 800f190:	0800f1dd 	.word	0x0800f1dd
 800f194:	0800f1e5 	.word	0x0800f1e5
 800f198:	2300      	movs	r3, #0
 800f19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f19e:	e14a      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f1a0:	2304      	movs	r3, #4
 800f1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1a6:	e146      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f1a8:	2308      	movs	r3, #8
 800f1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ae:	e142      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f1b0:	2310      	movs	r3, #16
 800f1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1b6:	e13e      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f1b8:	cfff69f3 	.word	0xcfff69f3
 800f1bc:	58000c00 	.word	0x58000c00
 800f1c0:	11fff4ff 	.word	0x11fff4ff
 800f1c4:	40011000 	.word	0x40011000
 800f1c8:	58024400 	.word	0x58024400
 800f1cc:	40004400 	.word	0x40004400
 800f1d0:	40004800 	.word	0x40004800
 800f1d4:	40004c00 	.word	0x40004c00
 800f1d8:	40005000 	.word	0x40005000
 800f1dc:	2320      	movs	r3, #32
 800f1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1e2:	e128      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f1e4:	2340      	movs	r3, #64	; 0x40
 800f1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ea:	e124      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f1ec:	2380      	movs	r3, #128	; 0x80
 800f1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1f2:	e120      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4acb      	ldr	r2, [pc, #812]	; (800f528 <UART_SetConfig+0x698>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d176      	bne.n	800f2ec <UART_SetConfig+0x45c>
 800f1fe:	4bcb      	ldr	r3, [pc, #812]	; (800f52c <UART_SetConfig+0x69c>)
 800f200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f206:	2b28      	cmp	r3, #40	; 0x28
 800f208:	d86c      	bhi.n	800f2e4 <UART_SetConfig+0x454>
 800f20a:	a201      	add	r2, pc, #4	; (adr r2, 800f210 <UART_SetConfig+0x380>)
 800f20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f210:	0800f2b5 	.word	0x0800f2b5
 800f214:	0800f2e5 	.word	0x0800f2e5
 800f218:	0800f2e5 	.word	0x0800f2e5
 800f21c:	0800f2e5 	.word	0x0800f2e5
 800f220:	0800f2e5 	.word	0x0800f2e5
 800f224:	0800f2e5 	.word	0x0800f2e5
 800f228:	0800f2e5 	.word	0x0800f2e5
 800f22c:	0800f2e5 	.word	0x0800f2e5
 800f230:	0800f2bd 	.word	0x0800f2bd
 800f234:	0800f2e5 	.word	0x0800f2e5
 800f238:	0800f2e5 	.word	0x0800f2e5
 800f23c:	0800f2e5 	.word	0x0800f2e5
 800f240:	0800f2e5 	.word	0x0800f2e5
 800f244:	0800f2e5 	.word	0x0800f2e5
 800f248:	0800f2e5 	.word	0x0800f2e5
 800f24c:	0800f2e5 	.word	0x0800f2e5
 800f250:	0800f2c5 	.word	0x0800f2c5
 800f254:	0800f2e5 	.word	0x0800f2e5
 800f258:	0800f2e5 	.word	0x0800f2e5
 800f25c:	0800f2e5 	.word	0x0800f2e5
 800f260:	0800f2e5 	.word	0x0800f2e5
 800f264:	0800f2e5 	.word	0x0800f2e5
 800f268:	0800f2e5 	.word	0x0800f2e5
 800f26c:	0800f2e5 	.word	0x0800f2e5
 800f270:	0800f2cd 	.word	0x0800f2cd
 800f274:	0800f2e5 	.word	0x0800f2e5
 800f278:	0800f2e5 	.word	0x0800f2e5
 800f27c:	0800f2e5 	.word	0x0800f2e5
 800f280:	0800f2e5 	.word	0x0800f2e5
 800f284:	0800f2e5 	.word	0x0800f2e5
 800f288:	0800f2e5 	.word	0x0800f2e5
 800f28c:	0800f2e5 	.word	0x0800f2e5
 800f290:	0800f2d5 	.word	0x0800f2d5
 800f294:	0800f2e5 	.word	0x0800f2e5
 800f298:	0800f2e5 	.word	0x0800f2e5
 800f29c:	0800f2e5 	.word	0x0800f2e5
 800f2a0:	0800f2e5 	.word	0x0800f2e5
 800f2a4:	0800f2e5 	.word	0x0800f2e5
 800f2a8:	0800f2e5 	.word	0x0800f2e5
 800f2ac:	0800f2e5 	.word	0x0800f2e5
 800f2b0:	0800f2dd 	.word	0x0800f2dd
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ba:	e0bc      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f2bc:	2304      	movs	r3, #4
 800f2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2c2:	e0b8      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f2c4:	2308      	movs	r3, #8
 800f2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ca:	e0b4      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f2cc:	2310      	movs	r3, #16
 800f2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2d2:	e0b0      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f2d4:	2320      	movs	r3, #32
 800f2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2da:	e0ac      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f2dc:	2340      	movs	r3, #64	; 0x40
 800f2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2e2:	e0a8      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f2e4:	2380      	movs	r3, #128	; 0x80
 800f2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ea:	e0a4      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4a8f      	ldr	r2, [pc, #572]	; (800f530 <UART_SetConfig+0x6a0>)
 800f2f2:	4293      	cmp	r3, r2
 800f2f4:	d130      	bne.n	800f358 <UART_SetConfig+0x4c8>
 800f2f6:	4b8d      	ldr	r3, [pc, #564]	; (800f52c <UART_SetConfig+0x69c>)
 800f2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2fa:	f003 0307 	and.w	r3, r3, #7
 800f2fe:	2b05      	cmp	r3, #5
 800f300:	d826      	bhi.n	800f350 <UART_SetConfig+0x4c0>
 800f302:	a201      	add	r2, pc, #4	; (adr r2, 800f308 <UART_SetConfig+0x478>)
 800f304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f308:	0800f321 	.word	0x0800f321
 800f30c:	0800f329 	.word	0x0800f329
 800f310:	0800f331 	.word	0x0800f331
 800f314:	0800f339 	.word	0x0800f339
 800f318:	0800f341 	.word	0x0800f341
 800f31c:	0800f349 	.word	0x0800f349
 800f320:	2300      	movs	r3, #0
 800f322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f326:	e086      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f328:	2304      	movs	r3, #4
 800f32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f32e:	e082      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f330:	2308      	movs	r3, #8
 800f332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f336:	e07e      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f338:	2310      	movs	r3, #16
 800f33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f33e:	e07a      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f340:	2320      	movs	r3, #32
 800f342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f346:	e076      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f348:	2340      	movs	r3, #64	; 0x40
 800f34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f34e:	e072      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f350:	2380      	movs	r3, #128	; 0x80
 800f352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f356:	e06e      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	4a75      	ldr	r2, [pc, #468]	; (800f534 <UART_SetConfig+0x6a4>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d130      	bne.n	800f3c4 <UART_SetConfig+0x534>
 800f362:	4b72      	ldr	r3, [pc, #456]	; (800f52c <UART_SetConfig+0x69c>)
 800f364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f366:	f003 0307 	and.w	r3, r3, #7
 800f36a:	2b05      	cmp	r3, #5
 800f36c:	d826      	bhi.n	800f3bc <UART_SetConfig+0x52c>
 800f36e:	a201      	add	r2, pc, #4	; (adr r2, 800f374 <UART_SetConfig+0x4e4>)
 800f370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f374:	0800f38d 	.word	0x0800f38d
 800f378:	0800f395 	.word	0x0800f395
 800f37c:	0800f39d 	.word	0x0800f39d
 800f380:	0800f3a5 	.word	0x0800f3a5
 800f384:	0800f3ad 	.word	0x0800f3ad
 800f388:	0800f3b5 	.word	0x0800f3b5
 800f38c:	2300      	movs	r3, #0
 800f38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f392:	e050      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f394:	2304      	movs	r3, #4
 800f396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f39a:	e04c      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f39c:	2308      	movs	r3, #8
 800f39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3a2:	e048      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f3a4:	2310      	movs	r3, #16
 800f3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3aa:	e044      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f3ac:	2320      	movs	r3, #32
 800f3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3b2:	e040      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f3b4:	2340      	movs	r3, #64	; 0x40
 800f3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3ba:	e03c      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f3bc:	2380      	movs	r3, #128	; 0x80
 800f3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3c2:	e038      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	4a5b      	ldr	r2, [pc, #364]	; (800f538 <UART_SetConfig+0x6a8>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d130      	bne.n	800f430 <UART_SetConfig+0x5a0>
 800f3ce:	4b57      	ldr	r3, [pc, #348]	; (800f52c <UART_SetConfig+0x69c>)
 800f3d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f3d2:	f003 0307 	and.w	r3, r3, #7
 800f3d6:	2b05      	cmp	r3, #5
 800f3d8:	d826      	bhi.n	800f428 <UART_SetConfig+0x598>
 800f3da:	a201      	add	r2, pc, #4	; (adr r2, 800f3e0 <UART_SetConfig+0x550>)
 800f3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3e0:	0800f3f9 	.word	0x0800f3f9
 800f3e4:	0800f401 	.word	0x0800f401
 800f3e8:	0800f409 	.word	0x0800f409
 800f3ec:	0800f411 	.word	0x0800f411
 800f3f0:	0800f419 	.word	0x0800f419
 800f3f4:	0800f421 	.word	0x0800f421
 800f3f8:	2302      	movs	r3, #2
 800f3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3fe:	e01a      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f400:	2304      	movs	r3, #4
 800f402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f406:	e016      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f408:	2308      	movs	r3, #8
 800f40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f40e:	e012      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f410:	2310      	movs	r3, #16
 800f412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f416:	e00e      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f418:	2320      	movs	r3, #32
 800f41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f41e:	e00a      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f420:	2340      	movs	r3, #64	; 0x40
 800f422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f426:	e006      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f428:	2380      	movs	r3, #128	; 0x80
 800f42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f42e:	e002      	b.n	800f436 <UART_SetConfig+0x5a6>
 800f430:	2380      	movs	r3, #128	; 0x80
 800f432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f436:	697b      	ldr	r3, [r7, #20]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	4a3f      	ldr	r2, [pc, #252]	; (800f538 <UART_SetConfig+0x6a8>)
 800f43c:	4293      	cmp	r3, r2
 800f43e:	f040 80f8 	bne.w	800f632 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f442:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f446:	2b20      	cmp	r3, #32
 800f448:	dc46      	bgt.n	800f4d8 <UART_SetConfig+0x648>
 800f44a:	2b02      	cmp	r3, #2
 800f44c:	f2c0 8082 	blt.w	800f554 <UART_SetConfig+0x6c4>
 800f450:	3b02      	subs	r3, #2
 800f452:	2b1e      	cmp	r3, #30
 800f454:	d87e      	bhi.n	800f554 <UART_SetConfig+0x6c4>
 800f456:	a201      	add	r2, pc, #4	; (adr r2, 800f45c <UART_SetConfig+0x5cc>)
 800f458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f45c:	0800f4df 	.word	0x0800f4df
 800f460:	0800f555 	.word	0x0800f555
 800f464:	0800f4e7 	.word	0x0800f4e7
 800f468:	0800f555 	.word	0x0800f555
 800f46c:	0800f555 	.word	0x0800f555
 800f470:	0800f555 	.word	0x0800f555
 800f474:	0800f4f7 	.word	0x0800f4f7
 800f478:	0800f555 	.word	0x0800f555
 800f47c:	0800f555 	.word	0x0800f555
 800f480:	0800f555 	.word	0x0800f555
 800f484:	0800f555 	.word	0x0800f555
 800f488:	0800f555 	.word	0x0800f555
 800f48c:	0800f555 	.word	0x0800f555
 800f490:	0800f555 	.word	0x0800f555
 800f494:	0800f507 	.word	0x0800f507
 800f498:	0800f555 	.word	0x0800f555
 800f49c:	0800f555 	.word	0x0800f555
 800f4a0:	0800f555 	.word	0x0800f555
 800f4a4:	0800f555 	.word	0x0800f555
 800f4a8:	0800f555 	.word	0x0800f555
 800f4ac:	0800f555 	.word	0x0800f555
 800f4b0:	0800f555 	.word	0x0800f555
 800f4b4:	0800f555 	.word	0x0800f555
 800f4b8:	0800f555 	.word	0x0800f555
 800f4bc:	0800f555 	.word	0x0800f555
 800f4c0:	0800f555 	.word	0x0800f555
 800f4c4:	0800f555 	.word	0x0800f555
 800f4c8:	0800f555 	.word	0x0800f555
 800f4cc:	0800f555 	.word	0x0800f555
 800f4d0:	0800f555 	.word	0x0800f555
 800f4d4:	0800f547 	.word	0x0800f547
 800f4d8:	2b40      	cmp	r3, #64	; 0x40
 800f4da:	d037      	beq.n	800f54c <UART_SetConfig+0x6bc>
 800f4dc:	e03a      	b.n	800f554 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f4de:	f7fc f931 	bl	800b744 <HAL_RCCEx_GetD3PCLK1Freq>
 800f4e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f4e4:	e03c      	b.n	800f560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fc f940 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4f4:	e034      	b.n	800f560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4f6:	f107 0318 	add.w	r3, r7, #24
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fc fa8c 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f504:	e02c      	b.n	800f560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f506:	4b09      	ldr	r3, [pc, #36]	; (800f52c <UART_SetConfig+0x69c>)
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	f003 0320 	and.w	r3, r3, #32
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d016      	beq.n	800f540 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f512:	4b06      	ldr	r3, [pc, #24]	; (800f52c <UART_SetConfig+0x69c>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	08db      	lsrs	r3, r3, #3
 800f518:	f003 0303 	and.w	r3, r3, #3
 800f51c:	4a07      	ldr	r2, [pc, #28]	; (800f53c <UART_SetConfig+0x6ac>)
 800f51e:	fa22 f303 	lsr.w	r3, r2, r3
 800f522:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f524:	e01c      	b.n	800f560 <UART_SetConfig+0x6d0>
 800f526:	bf00      	nop
 800f528:	40011400 	.word	0x40011400
 800f52c:	58024400 	.word	0x58024400
 800f530:	40007800 	.word	0x40007800
 800f534:	40007c00 	.word	0x40007c00
 800f538:	58000c00 	.word	0x58000c00
 800f53c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f540:	4b9d      	ldr	r3, [pc, #628]	; (800f7b8 <UART_SetConfig+0x928>)
 800f542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f544:	e00c      	b.n	800f560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f546:	4b9d      	ldr	r3, [pc, #628]	; (800f7bc <UART_SetConfig+0x92c>)
 800f548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f54a:	e009      	b.n	800f560 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f54c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f552:	e005      	b.n	800f560 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f554:	2300      	movs	r3, #0
 800f556:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f558:	2301      	movs	r3, #1
 800f55a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f55e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f562:	2b00      	cmp	r3, #0
 800f564:	f000 81de 	beq.w	800f924 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f56c:	4a94      	ldr	r2, [pc, #592]	; (800f7c0 <UART_SetConfig+0x930>)
 800f56e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f572:	461a      	mov	r2, r3
 800f574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f576:	fbb3 f3f2 	udiv	r3, r3, r2
 800f57a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	685a      	ldr	r2, [r3, #4]
 800f580:	4613      	mov	r3, r2
 800f582:	005b      	lsls	r3, r3, #1
 800f584:	4413      	add	r3, r2
 800f586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f588:	429a      	cmp	r2, r3
 800f58a:	d305      	bcc.n	800f598 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f594:	429a      	cmp	r2, r3
 800f596:	d903      	bls.n	800f5a0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f598:	2301      	movs	r3, #1
 800f59a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f59e:	e1c1      	b.n	800f924 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	60bb      	str	r3, [r7, #8]
 800f5a6:	60fa      	str	r2, [r7, #12]
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ac:	4a84      	ldr	r2, [pc, #528]	; (800f7c0 <UART_SetConfig+0x930>)
 800f5ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5b2:	b29b      	uxth	r3, r3
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	603b      	str	r3, [r7, #0]
 800f5b8:	607a      	str	r2, [r7, #4]
 800f5ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f5c2:	f7f0 fe8d 	bl	80002e0 <__aeabi_uldivmod>
 800f5c6:	4602      	mov	r2, r0
 800f5c8:	460b      	mov	r3, r1
 800f5ca:	4610      	mov	r0, r2
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	f04f 0200 	mov.w	r2, #0
 800f5d2:	f04f 0300 	mov.w	r3, #0
 800f5d6:	020b      	lsls	r3, r1, #8
 800f5d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f5dc:	0202      	lsls	r2, r0, #8
 800f5de:	6979      	ldr	r1, [r7, #20]
 800f5e0:	6849      	ldr	r1, [r1, #4]
 800f5e2:	0849      	lsrs	r1, r1, #1
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	4605      	mov	r5, r0
 800f5ea:	eb12 0804 	adds.w	r8, r2, r4
 800f5ee:	eb43 0905 	adc.w	r9, r3, r5
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	469a      	mov	sl, r3
 800f5fa:	4693      	mov	fp, r2
 800f5fc:	4652      	mov	r2, sl
 800f5fe:	465b      	mov	r3, fp
 800f600:	4640      	mov	r0, r8
 800f602:	4649      	mov	r1, r9
 800f604:	f7f0 fe6c 	bl	80002e0 <__aeabi_uldivmod>
 800f608:	4602      	mov	r2, r0
 800f60a:	460b      	mov	r3, r1
 800f60c:	4613      	mov	r3, r2
 800f60e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f616:	d308      	bcc.n	800f62a <UART_SetConfig+0x79a>
 800f618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f61e:	d204      	bcs.n	800f62a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f626:	60da      	str	r2, [r3, #12]
 800f628:	e17c      	b.n	800f924 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f62a:	2301      	movs	r3, #1
 800f62c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f630:	e178      	b.n	800f924 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	69db      	ldr	r3, [r3, #28]
 800f636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f63a:	f040 80c5 	bne.w	800f7c8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f63e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f642:	2b20      	cmp	r3, #32
 800f644:	dc48      	bgt.n	800f6d8 <UART_SetConfig+0x848>
 800f646:	2b00      	cmp	r3, #0
 800f648:	db7b      	blt.n	800f742 <UART_SetConfig+0x8b2>
 800f64a:	2b20      	cmp	r3, #32
 800f64c:	d879      	bhi.n	800f742 <UART_SetConfig+0x8b2>
 800f64e:	a201      	add	r2, pc, #4	; (adr r2, 800f654 <UART_SetConfig+0x7c4>)
 800f650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f654:	0800f6df 	.word	0x0800f6df
 800f658:	0800f6e7 	.word	0x0800f6e7
 800f65c:	0800f743 	.word	0x0800f743
 800f660:	0800f743 	.word	0x0800f743
 800f664:	0800f6ef 	.word	0x0800f6ef
 800f668:	0800f743 	.word	0x0800f743
 800f66c:	0800f743 	.word	0x0800f743
 800f670:	0800f743 	.word	0x0800f743
 800f674:	0800f6ff 	.word	0x0800f6ff
 800f678:	0800f743 	.word	0x0800f743
 800f67c:	0800f743 	.word	0x0800f743
 800f680:	0800f743 	.word	0x0800f743
 800f684:	0800f743 	.word	0x0800f743
 800f688:	0800f743 	.word	0x0800f743
 800f68c:	0800f743 	.word	0x0800f743
 800f690:	0800f743 	.word	0x0800f743
 800f694:	0800f70f 	.word	0x0800f70f
 800f698:	0800f743 	.word	0x0800f743
 800f69c:	0800f743 	.word	0x0800f743
 800f6a0:	0800f743 	.word	0x0800f743
 800f6a4:	0800f743 	.word	0x0800f743
 800f6a8:	0800f743 	.word	0x0800f743
 800f6ac:	0800f743 	.word	0x0800f743
 800f6b0:	0800f743 	.word	0x0800f743
 800f6b4:	0800f743 	.word	0x0800f743
 800f6b8:	0800f743 	.word	0x0800f743
 800f6bc:	0800f743 	.word	0x0800f743
 800f6c0:	0800f743 	.word	0x0800f743
 800f6c4:	0800f743 	.word	0x0800f743
 800f6c8:	0800f743 	.word	0x0800f743
 800f6cc:	0800f743 	.word	0x0800f743
 800f6d0:	0800f743 	.word	0x0800f743
 800f6d4:	0800f735 	.word	0x0800f735
 800f6d8:	2b40      	cmp	r3, #64	; 0x40
 800f6da:	d02e      	beq.n	800f73a <UART_SetConfig+0x8aa>
 800f6dc:	e031      	b.n	800f742 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f6de:	f7fa f839 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800f6e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f6e4:	e033      	b.n	800f74e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f6e6:	f7fa f84b 	bl	8009780 <HAL_RCC_GetPCLK2Freq>
 800f6ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f6ec:	e02f      	b.n	800f74e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7fc f83c 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6fc:	e027      	b.n	800f74e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6fe:	f107 0318 	add.w	r3, r7, #24
 800f702:	4618      	mov	r0, r3
 800f704:	f7fc f988 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f70c:	e01f      	b.n	800f74e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f70e:	4b2d      	ldr	r3, [pc, #180]	; (800f7c4 <UART_SetConfig+0x934>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	f003 0320 	and.w	r3, r3, #32
 800f716:	2b00      	cmp	r3, #0
 800f718:	d009      	beq.n	800f72e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f71a:	4b2a      	ldr	r3, [pc, #168]	; (800f7c4 <UART_SetConfig+0x934>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	08db      	lsrs	r3, r3, #3
 800f720:	f003 0303 	and.w	r3, r3, #3
 800f724:	4a24      	ldr	r2, [pc, #144]	; (800f7b8 <UART_SetConfig+0x928>)
 800f726:	fa22 f303 	lsr.w	r3, r2, r3
 800f72a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f72c:	e00f      	b.n	800f74e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f72e:	4b22      	ldr	r3, [pc, #136]	; (800f7b8 <UART_SetConfig+0x928>)
 800f730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f732:	e00c      	b.n	800f74e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f734:	4b21      	ldr	r3, [pc, #132]	; (800f7bc <UART_SetConfig+0x92c>)
 800f736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f738:	e009      	b.n	800f74e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f73a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f740:	e005      	b.n	800f74e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f742:	2300      	movs	r3, #0
 800f744:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f746:	2301      	movs	r3, #1
 800f748:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f74c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f750:	2b00      	cmp	r3, #0
 800f752:	f000 80e7 	beq.w	800f924 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f75a:	4a19      	ldr	r2, [pc, #100]	; (800f7c0 <UART_SetConfig+0x930>)
 800f75c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f760:	461a      	mov	r2, r3
 800f762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f764:	fbb3 f3f2 	udiv	r3, r3, r2
 800f768:	005a      	lsls	r2, r3, #1
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	085b      	lsrs	r3, r3, #1
 800f770:	441a      	add	r2, r3
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	fbb2 f3f3 	udiv	r3, r2, r3
 800f77a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f77e:	2b0f      	cmp	r3, #15
 800f780:	d916      	bls.n	800f7b0 <UART_SetConfig+0x920>
 800f782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f788:	d212      	bcs.n	800f7b0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78c:	b29b      	uxth	r3, r3
 800f78e:	f023 030f 	bic.w	r3, r3, #15
 800f792:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f796:	085b      	lsrs	r3, r3, #1
 800f798:	b29b      	uxth	r3, r3
 800f79a:	f003 0307 	and.w	r3, r3, #7
 800f79e:	b29a      	uxth	r2, r3
 800f7a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f7ac:	60da      	str	r2, [r3, #12]
 800f7ae:	e0b9      	b.n	800f924 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f7b6:	e0b5      	b.n	800f924 <UART_SetConfig+0xa94>
 800f7b8:	03d09000 	.word	0x03d09000
 800f7bc:	003d0900 	.word	0x003d0900
 800f7c0:	08014fa8 	.word	0x08014fa8
 800f7c4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f7c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f7cc:	2b20      	cmp	r3, #32
 800f7ce:	dc49      	bgt.n	800f864 <UART_SetConfig+0x9d4>
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	db7c      	blt.n	800f8ce <UART_SetConfig+0xa3e>
 800f7d4:	2b20      	cmp	r3, #32
 800f7d6:	d87a      	bhi.n	800f8ce <UART_SetConfig+0xa3e>
 800f7d8:	a201      	add	r2, pc, #4	; (adr r2, 800f7e0 <UART_SetConfig+0x950>)
 800f7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7de:	bf00      	nop
 800f7e0:	0800f86b 	.word	0x0800f86b
 800f7e4:	0800f873 	.word	0x0800f873
 800f7e8:	0800f8cf 	.word	0x0800f8cf
 800f7ec:	0800f8cf 	.word	0x0800f8cf
 800f7f0:	0800f87b 	.word	0x0800f87b
 800f7f4:	0800f8cf 	.word	0x0800f8cf
 800f7f8:	0800f8cf 	.word	0x0800f8cf
 800f7fc:	0800f8cf 	.word	0x0800f8cf
 800f800:	0800f88b 	.word	0x0800f88b
 800f804:	0800f8cf 	.word	0x0800f8cf
 800f808:	0800f8cf 	.word	0x0800f8cf
 800f80c:	0800f8cf 	.word	0x0800f8cf
 800f810:	0800f8cf 	.word	0x0800f8cf
 800f814:	0800f8cf 	.word	0x0800f8cf
 800f818:	0800f8cf 	.word	0x0800f8cf
 800f81c:	0800f8cf 	.word	0x0800f8cf
 800f820:	0800f89b 	.word	0x0800f89b
 800f824:	0800f8cf 	.word	0x0800f8cf
 800f828:	0800f8cf 	.word	0x0800f8cf
 800f82c:	0800f8cf 	.word	0x0800f8cf
 800f830:	0800f8cf 	.word	0x0800f8cf
 800f834:	0800f8cf 	.word	0x0800f8cf
 800f838:	0800f8cf 	.word	0x0800f8cf
 800f83c:	0800f8cf 	.word	0x0800f8cf
 800f840:	0800f8cf 	.word	0x0800f8cf
 800f844:	0800f8cf 	.word	0x0800f8cf
 800f848:	0800f8cf 	.word	0x0800f8cf
 800f84c:	0800f8cf 	.word	0x0800f8cf
 800f850:	0800f8cf 	.word	0x0800f8cf
 800f854:	0800f8cf 	.word	0x0800f8cf
 800f858:	0800f8cf 	.word	0x0800f8cf
 800f85c:	0800f8cf 	.word	0x0800f8cf
 800f860:	0800f8c1 	.word	0x0800f8c1
 800f864:	2b40      	cmp	r3, #64	; 0x40
 800f866:	d02e      	beq.n	800f8c6 <UART_SetConfig+0xa36>
 800f868:	e031      	b.n	800f8ce <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f86a:	f7f9 ff73 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800f86e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f870:	e033      	b.n	800f8da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f872:	f7f9 ff85 	bl	8009780 <HAL_RCC_GetPCLK2Freq>
 800f876:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f878:	e02f      	b.n	800f8da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f87a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f87e:	4618      	mov	r0, r3
 800f880:	f7fb ff76 	bl	800b770 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f888:	e027      	b.n	800f8da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f88a:	f107 0318 	add.w	r3, r7, #24
 800f88e:	4618      	mov	r0, r3
 800f890:	f7fc f8c2 	bl	800ba18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f898:	e01f      	b.n	800f8da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f89a:	4b2d      	ldr	r3, [pc, #180]	; (800f950 <UART_SetConfig+0xac0>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	f003 0320 	and.w	r3, r3, #32
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d009      	beq.n	800f8ba <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f8a6:	4b2a      	ldr	r3, [pc, #168]	; (800f950 <UART_SetConfig+0xac0>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	08db      	lsrs	r3, r3, #3
 800f8ac:	f003 0303 	and.w	r3, r3, #3
 800f8b0:	4a28      	ldr	r2, [pc, #160]	; (800f954 <UART_SetConfig+0xac4>)
 800f8b2:	fa22 f303 	lsr.w	r3, r2, r3
 800f8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f8b8:	e00f      	b.n	800f8da <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f8ba:	4b26      	ldr	r3, [pc, #152]	; (800f954 <UART_SetConfig+0xac4>)
 800f8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8be:	e00c      	b.n	800f8da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f8c0:	4b25      	ldr	r3, [pc, #148]	; (800f958 <UART_SetConfig+0xac8>)
 800f8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8c4:	e009      	b.n	800f8da <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f8c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8cc:	e005      	b.n	800f8da <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f8d8:	bf00      	nop
    }

    if (pclk != 0U)
 800f8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d021      	beq.n	800f924 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e4:	4a1d      	ldr	r2, [pc, #116]	; (800f95c <UART_SetConfig+0xacc>)
 800f8e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	085b      	lsrs	r3, r3, #1
 800f8f8:	441a      	add	r2, r3
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	685b      	ldr	r3, [r3, #4]
 800f8fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800f902:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f906:	2b0f      	cmp	r3, #15
 800f908:	d909      	bls.n	800f91e <UART_SetConfig+0xa8e>
 800f90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f910:	d205      	bcs.n	800f91e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f914:	b29a      	uxth	r2, r3
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	60da      	str	r2, [r3, #12]
 800f91c:	e002      	b.n	800f924 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f91e:	2301      	movs	r3, #1
 800f920:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	2201      	movs	r2, #1
 800f928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	2201      	movs	r2, #1
 800f930:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	2200      	movs	r2, #0
 800f938:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	2200      	movs	r2, #0
 800f93e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f940:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f944:	4618      	mov	r0, r3
 800f946:	3748      	adds	r7, #72	; 0x48
 800f948:	46bd      	mov	sp, r7
 800f94a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f94e:	bf00      	nop
 800f950:	58024400 	.word	0x58024400
 800f954:	03d09000 	.word	0x03d09000
 800f958:	003d0900 	.word	0x003d0900
 800f95c:	08014fa8 	.word	0x08014fa8

0800f960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f960:	b480      	push	{r7}
 800f962:	b083      	sub	sp, #12
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f96c:	f003 0308 	and.w	r3, r3, #8
 800f970:	2b00      	cmp	r3, #0
 800f972:	d00a      	beq.n	800f98a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	685b      	ldr	r3, [r3, #4]
 800f97a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	430a      	orrs	r2, r1
 800f988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f98e:	f003 0301 	and.w	r3, r3, #1
 800f992:	2b00      	cmp	r3, #0
 800f994:	d00a      	beq.n	800f9ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	430a      	orrs	r2, r1
 800f9aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9b0:	f003 0302 	and.w	r3, r3, #2
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d00a      	beq.n	800f9ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	685b      	ldr	r3, [r3, #4]
 800f9be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	430a      	orrs	r2, r1
 800f9cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d2:	f003 0304 	and.w	r3, r3, #4
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d00a      	beq.n	800f9f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	430a      	orrs	r2, r1
 800f9ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f4:	f003 0310 	and.w	r3, r3, #16
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d00a      	beq.n	800fa12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	689b      	ldr	r3, [r3, #8]
 800fa02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	430a      	orrs	r2, r1
 800fa10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa16:	f003 0320 	and.w	r3, r3, #32
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00a      	beq.n	800fa34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	689b      	ldr	r3, [r3, #8]
 800fa24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	430a      	orrs	r2, r1
 800fa32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d01a      	beq.n	800fa76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	430a      	orrs	r2, r1
 800fa54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fa5e:	d10a      	bne.n	800fa76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	430a      	orrs	r2, r1
 800fa74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d00a      	beq.n	800fa98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	430a      	orrs	r2, r1
 800fa96:	605a      	str	r2, [r3, #4]
  }
}
 800fa98:	bf00      	nop
 800fa9a:	370c      	adds	r7, #12
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr

0800faa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b098      	sub	sp, #96	; 0x60
 800faa8:	af02      	add	r7, sp, #8
 800faaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2200      	movs	r2, #0
 800fab0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fab4:	f7f3 fbc8 	bl	8003248 <HAL_GetTick>
 800fab8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f003 0308 	and.w	r3, r3, #8
 800fac4:	2b08      	cmp	r3, #8
 800fac6:	d12f      	bne.n	800fb28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800facc:	9300      	str	r3, [sp, #0]
 800face:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fad0:	2200      	movs	r2, #0
 800fad2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 f88e 	bl	800fbf8 <UART_WaitOnFlagUntilTimeout>
 800fadc:	4603      	mov	r3, r0
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d022      	beq.n	800fb28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faea:	e853 3f00 	ldrex	r3, [r3]
 800faee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800faf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800faf6:	653b      	str	r3, [r7, #80]	; 0x50
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	461a      	mov	r2, r3
 800fafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb00:	647b      	str	r3, [r7, #68]	; 0x44
 800fb02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fb06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb08:	e841 2300 	strex	r3, r2, [r1]
 800fb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fb0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d1e6      	bne.n	800fae2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2220      	movs	r2, #32
 800fb18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2200      	movs	r2, #0
 800fb20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fb24:	2303      	movs	r3, #3
 800fb26:	e063      	b.n	800fbf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f003 0304 	and.w	r3, r3, #4
 800fb32:	2b04      	cmp	r3, #4
 800fb34:	d149      	bne.n	800fbca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f000 f857 	bl	800fbf8 <UART_WaitOnFlagUntilTimeout>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d03c      	beq.n	800fbca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb58:	e853 3f00 	ldrex	r3, [r3]
 800fb5c:	623b      	str	r3, [r7, #32]
   return(result);
 800fb5e:	6a3b      	ldr	r3, [r7, #32]
 800fb60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fb64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	461a      	mov	r2, r3
 800fb6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb6e:	633b      	str	r3, [r7, #48]	; 0x30
 800fb70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb76:	e841 2300 	strex	r3, r2, [r1]
 800fb7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d1e6      	bne.n	800fb50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	3308      	adds	r3, #8
 800fb88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	e853 3f00 	ldrex	r3, [r3]
 800fb90:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	f023 0301 	bic.w	r3, r3, #1
 800fb98:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	3308      	adds	r3, #8
 800fba0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fba2:	61fa      	str	r2, [r7, #28]
 800fba4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fba6:	69b9      	ldr	r1, [r7, #24]
 800fba8:	69fa      	ldr	r2, [r7, #28]
 800fbaa:	e841 2300 	strex	r3, r2, [r1]
 800fbae:	617b      	str	r3, [r7, #20]
   return(result);
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1e5      	bne.n	800fb82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2220      	movs	r2, #32
 800fbba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fbc6:	2303      	movs	r3, #3
 800fbc8:	e012      	b.n	800fbf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2220      	movs	r2, #32
 800fbce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2220      	movs	r2, #32
 800fbd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800fbee:	2300      	movs	r3, #0
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3758      	adds	r7, #88	; 0x58
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	603b      	str	r3, [r7, #0]
 800fc04:	4613      	mov	r3, r2
 800fc06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc08:	e04f      	b.n	800fcaa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc10:	d04b      	beq.n	800fcaa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fc12:	f7f3 fb19 	bl	8003248 <HAL_GetTick>
 800fc16:	4602      	mov	r2, r0
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	1ad3      	subs	r3, r2, r3
 800fc1c:	69ba      	ldr	r2, [r7, #24]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d302      	bcc.n	800fc28 <UART_WaitOnFlagUntilTimeout+0x30>
 800fc22:	69bb      	ldr	r3, [r7, #24]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d101      	bne.n	800fc2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fc28:	2303      	movs	r3, #3
 800fc2a:	e04e      	b.n	800fcca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	f003 0304 	and.w	r3, r3, #4
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d037      	beq.n	800fcaa <UART_WaitOnFlagUntilTimeout+0xb2>
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	2b80      	cmp	r3, #128	; 0x80
 800fc3e:	d034      	beq.n	800fcaa <UART_WaitOnFlagUntilTimeout+0xb2>
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	2b40      	cmp	r3, #64	; 0x40
 800fc44:	d031      	beq.n	800fcaa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	69db      	ldr	r3, [r3, #28]
 800fc4c:	f003 0308 	and.w	r3, r3, #8
 800fc50:	2b08      	cmp	r3, #8
 800fc52:	d110      	bne.n	800fc76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	2208      	movs	r2, #8
 800fc5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f000 f95b 	bl	800ff18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2208      	movs	r2, #8
 800fc66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800fc72:	2301      	movs	r3, #1
 800fc74:	e029      	b.n	800fcca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	69db      	ldr	r3, [r3, #28]
 800fc7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fc80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc84:	d111      	bne.n	800fcaa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fc8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fc90:	68f8      	ldr	r0, [r7, #12]
 800fc92:	f000 f941 	bl	800ff18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2220      	movs	r2, #32
 800fc9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	2200      	movs	r2, #0
 800fca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800fca6:	2303      	movs	r3, #3
 800fca8:	e00f      	b.n	800fcca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	69da      	ldr	r2, [r3, #28]
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	4013      	ands	r3, r2
 800fcb4:	68ba      	ldr	r2, [r7, #8]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	bf0c      	ite	eq
 800fcba:	2301      	moveq	r3, #1
 800fcbc:	2300      	movne	r3, #0
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	79fb      	ldrb	r3, [r7, #7]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d0a0      	beq.n	800fc0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fcc8:	2300      	movs	r3, #0
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3710      	adds	r7, #16
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
	...

0800fcd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b0a3      	sub	sp, #140	; 0x8c
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	4613      	mov	r3, r2
 800fce0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	68ba      	ldr	r2, [r7, #8]
 800fce6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	88fa      	ldrh	r2, [r7, #6]
 800fcec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	88fa      	ldrh	r2, [r7, #6]
 800fcf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	689b      	ldr	r3, [r3, #8]
 800fd02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd06:	d10e      	bne.n	800fd26 <UART_Start_Receive_IT+0x52>
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	691b      	ldr	r3, [r3, #16]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d105      	bne.n	800fd1c <UART_Start_Receive_IT+0x48>
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fd16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd1a:	e02d      	b.n	800fd78 <UART_Start_Receive_IT+0xa4>
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	22ff      	movs	r2, #255	; 0xff
 800fd20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd24:	e028      	b.n	800fd78 <UART_Start_Receive_IT+0xa4>
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	689b      	ldr	r3, [r3, #8]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d10d      	bne.n	800fd4a <UART_Start_Receive_IT+0x76>
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	691b      	ldr	r3, [r3, #16]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d104      	bne.n	800fd40 <UART_Start_Receive_IT+0x6c>
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	22ff      	movs	r2, #255	; 0xff
 800fd3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd3e:	e01b      	b.n	800fd78 <UART_Start_Receive_IT+0xa4>
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	227f      	movs	r2, #127	; 0x7f
 800fd44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd48:	e016      	b.n	800fd78 <UART_Start_Receive_IT+0xa4>
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	689b      	ldr	r3, [r3, #8]
 800fd4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd52:	d10d      	bne.n	800fd70 <UART_Start_Receive_IT+0x9c>
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	691b      	ldr	r3, [r3, #16]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d104      	bne.n	800fd66 <UART_Start_Receive_IT+0x92>
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	227f      	movs	r2, #127	; 0x7f
 800fd60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd64:	e008      	b.n	800fd78 <UART_Start_Receive_IT+0xa4>
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	223f      	movs	r2, #63	; 0x3f
 800fd6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd6e:	e003      	b.n	800fd78 <UART_Start_Receive_IT+0xa4>
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2200      	movs	r2, #0
 800fd74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2222      	movs	r2, #34	; 0x22
 800fd84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	3308      	adds	r3, #8
 800fd8e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd92:	e853 3f00 	ldrex	r3, [r3]
 800fd96:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fd98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fd9a:	f043 0301 	orr.w	r3, r3, #1
 800fd9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	3308      	adds	r3, #8
 800fda8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fdac:	673a      	str	r2, [r7, #112]	; 0x70
 800fdae:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fdb2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fdb4:	e841 2300 	strex	r3, r2, [r1]
 800fdb8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fdba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1e3      	bne.n	800fd88 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fdc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fdc8:	d14f      	bne.n	800fe6a <UART_Start_Receive_IT+0x196>
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fdd0:	88fa      	ldrh	r2, [r7, #6]
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d349      	bcc.n	800fe6a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdde:	d107      	bne.n	800fdf0 <UART_Start_Receive_IT+0x11c>
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	691b      	ldr	r3, [r3, #16]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d103      	bne.n	800fdf0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	4a47      	ldr	r2, [pc, #284]	; (800ff08 <UART_Start_Receive_IT+0x234>)
 800fdec:	675a      	str	r2, [r3, #116]	; 0x74
 800fdee:	e002      	b.n	800fdf6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	4a46      	ldr	r2, [pc, #280]	; (800ff0c <UART_Start_Receive_IT+0x238>)
 800fdf4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	691b      	ldr	r3, [r3, #16]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d01a      	beq.n	800fe34 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe06:	e853 3f00 	ldrex	r3, [r3]
 800fe0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fe0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	461a      	mov	r2, r3
 800fe1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe22:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fe26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe28:	e841 2300 	strex	r3, r2, [r1]
 800fe2c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fe2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d1e4      	bne.n	800fdfe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	3308      	adds	r3, #8
 800fe3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe3e:	e853 3f00 	ldrex	r3, [r3]
 800fe42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fe44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe4a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	3308      	adds	r3, #8
 800fe52:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fe54:	64ba      	str	r2, [r7, #72]	; 0x48
 800fe56:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe5c:	e841 2300 	strex	r3, r2, [r1]
 800fe60:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fe62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d1e5      	bne.n	800fe34 <UART_Start_Receive_IT+0x160>
 800fe68:	e046      	b.n	800fef8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	689b      	ldr	r3, [r3, #8]
 800fe6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe72:	d107      	bne.n	800fe84 <UART_Start_Receive_IT+0x1b0>
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	691b      	ldr	r3, [r3, #16]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d103      	bne.n	800fe84 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	4a24      	ldr	r2, [pc, #144]	; (800ff10 <UART_Start_Receive_IT+0x23c>)
 800fe80:	675a      	str	r2, [r3, #116]	; 0x74
 800fe82:	e002      	b.n	800fe8a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	4a23      	ldr	r2, [pc, #140]	; (800ff14 <UART_Start_Receive_IT+0x240>)
 800fe88:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	691b      	ldr	r3, [r3, #16]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d019      	beq.n	800fec6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9a:	e853 3f00 	ldrex	r3, [r3]
 800fe9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fea6:	677b      	str	r3, [r7, #116]	; 0x74
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	461a      	mov	r2, r3
 800feae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800feb0:	637b      	str	r3, [r7, #52]	; 0x34
 800feb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800feb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800feb8:	e841 2300 	strex	r3, r2, [r1]
 800febc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800febe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d1e6      	bne.n	800fe92 <UART_Start_Receive_IT+0x1be>
 800fec4:	e018      	b.n	800fef8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	e853 3f00 	ldrex	r3, [r3]
 800fed2:	613b      	str	r3, [r7, #16]
   return(result);
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	f043 0320 	orr.w	r3, r3, #32
 800feda:	67bb      	str	r3, [r7, #120]	; 0x78
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	461a      	mov	r2, r3
 800fee2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fee4:	623b      	str	r3, [r7, #32]
 800fee6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fee8:	69f9      	ldr	r1, [r7, #28]
 800feea:	6a3a      	ldr	r2, [r7, #32]
 800feec:	e841 2300 	strex	r3, r2, [r1]
 800fef0:	61bb      	str	r3, [r7, #24]
   return(result);
 800fef2:	69bb      	ldr	r3, [r7, #24]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d1e6      	bne.n	800fec6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800fef8:	2300      	movs	r3, #0
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	378c      	adds	r7, #140	; 0x8c
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop
 800ff08:	08010739 	.word	0x08010739
 800ff0c:	080103d9 	.word	0x080103d9
 800ff10:	08010221 	.word	0x08010221
 800ff14:	08010069 	.word	0x08010069

0800ff18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b095      	sub	sp, #84	; 0x54
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff28:	e853 3f00 	ldrex	r3, [r3]
 800ff2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ff2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ff34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff3e:	643b      	str	r3, [r7, #64]	; 0x40
 800ff40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ff44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff46:	e841 2300 	strex	r3, r2, [r1]
 800ff4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ff4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d1e6      	bne.n	800ff20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	3308      	adds	r3, #8
 800ff58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff5a:	6a3b      	ldr	r3, [r7, #32]
 800ff5c:	e853 3f00 	ldrex	r3, [r3]
 800ff60:	61fb      	str	r3, [r7, #28]
   return(result);
 800ff62:	69fa      	ldr	r2, [r7, #28]
 800ff64:	4b1e      	ldr	r3, [pc, #120]	; (800ffe0 <UART_EndRxTransfer+0xc8>)
 800ff66:	4013      	ands	r3, r2
 800ff68:	64bb      	str	r3, [r7, #72]	; 0x48
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	3308      	adds	r3, #8
 800ff70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff72:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ff74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ff78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff7a:	e841 2300 	strex	r3, r2, [r1]
 800ff7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ff80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d1e5      	bne.n	800ff52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d118      	bne.n	800ffc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	e853 3f00 	ldrex	r3, [r3]
 800ff9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	f023 0310 	bic.w	r3, r3, #16
 800ffa2:	647b      	str	r3, [r7, #68]	; 0x44
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffac:	61bb      	str	r3, [r7, #24]
 800ffae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffb0:	6979      	ldr	r1, [r7, #20]
 800ffb2:	69ba      	ldr	r2, [r7, #24]
 800ffb4:	e841 2300 	strex	r3, r2, [r1]
 800ffb8:	613b      	str	r3, [r7, #16]
   return(result);
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d1e6      	bne.n	800ff8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2220      	movs	r2, #32
 800ffc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ffd4:	bf00      	nop
 800ffd6:	3754      	adds	r7, #84	; 0x54
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffde:	4770      	bx	lr
 800ffe0:	effffffe 	.word	0xeffffffe

0800ffe4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b084      	sub	sp, #16
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fff0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	2200      	movs	r2, #0
 800fff6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2200      	movs	r2, #0
 800fffe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f7fe ff2e 	bl	800ee64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010008:	bf00      	nop
 801000a:	3710      	adds	r7, #16
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b088      	sub	sp, #32
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	e853 3f00 	ldrex	r3, [r3]
 8010024:	60bb      	str	r3, [r7, #8]
   return(result);
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801002c:	61fb      	str	r3, [r7, #28]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	461a      	mov	r2, r3
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	61bb      	str	r3, [r7, #24]
 8010038:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801003a:	6979      	ldr	r1, [r7, #20]
 801003c:	69ba      	ldr	r2, [r7, #24]
 801003e:	e841 2300 	strex	r3, r2, [r1]
 8010042:	613b      	str	r3, [r7, #16]
   return(result);
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d1e6      	bne.n	8010018 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2220      	movs	r2, #32
 801004e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2200      	movs	r2, #0
 8010056:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7fe fef9 	bl	800ee50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801005e:	bf00      	nop
 8010060:	3720      	adds	r7, #32
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
	...

08010068 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b09c      	sub	sp, #112	; 0x70
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010076:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010080:	2b22      	cmp	r3, #34	; 0x22
 8010082:	f040 80be 	bne.w	8010202 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010090:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010094:	b2d9      	uxtb	r1, r3
 8010096:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801009a:	b2da      	uxtb	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100a0:	400a      	ands	r2, r1
 80100a2:	b2d2      	uxtb	r2, r2
 80100a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100aa:	1c5a      	adds	r2, r3, #1
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100b6:	b29b      	uxth	r3, r3
 80100b8:	3b01      	subs	r3, #1
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	f040 80a1 	bne.w	8010212 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100d8:	e853 3f00 	ldrex	r3, [r3]
 80100dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80100de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80100e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	461a      	mov	r2, r3
 80100ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80100ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80100f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80100f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80100f6:	e841 2300 	strex	r3, r2, [r1]
 80100fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80100fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d1e6      	bne.n	80100d0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	3308      	adds	r3, #8
 8010108:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801010a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801010c:	e853 3f00 	ldrex	r3, [r3]
 8010110:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010114:	f023 0301 	bic.w	r3, r3, #1
 8010118:	667b      	str	r3, [r7, #100]	; 0x64
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	3308      	adds	r3, #8
 8010120:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010122:	647a      	str	r2, [r7, #68]	; 0x44
 8010124:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010126:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801012a:	e841 2300 	strex	r3, r2, [r1]
 801012e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010132:	2b00      	cmp	r3, #0
 8010134:	d1e5      	bne.n	8010102 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2220      	movs	r2, #32
 801013a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2200      	movs	r2, #0
 8010142:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2200      	movs	r2, #0
 8010148:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4a33      	ldr	r2, [pc, #204]	; (801021c <UART_RxISR_8BIT+0x1b4>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d01f      	beq.n	8010194 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801015e:	2b00      	cmp	r3, #0
 8010160:	d018      	beq.n	8010194 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016a:	e853 3f00 	ldrex	r3, [r3]
 801016e:	623b      	str	r3, [r7, #32]
   return(result);
 8010170:	6a3b      	ldr	r3, [r7, #32]
 8010172:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010176:	663b      	str	r3, [r7, #96]	; 0x60
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	461a      	mov	r2, r3
 801017e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010180:	633b      	str	r3, [r7, #48]	; 0x30
 8010182:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010184:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010188:	e841 2300 	strex	r3, r2, [r1]
 801018c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801018e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010190:	2b00      	cmp	r3, #0
 8010192:	d1e6      	bne.n	8010162 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010198:	2b01      	cmp	r3, #1
 801019a:	d12e      	bne.n	80101fa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2200      	movs	r2, #0
 80101a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	e853 3f00 	ldrex	r3, [r3]
 80101ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f023 0310 	bic.w	r3, r3, #16
 80101b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	461a      	mov	r2, r3
 80101be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80101c0:	61fb      	str	r3, [r7, #28]
 80101c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101c4:	69b9      	ldr	r1, [r7, #24]
 80101c6:	69fa      	ldr	r2, [r7, #28]
 80101c8:	e841 2300 	strex	r3, r2, [r1]
 80101cc:	617b      	str	r3, [r7, #20]
   return(result);
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d1e6      	bne.n	80101a2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	69db      	ldr	r3, [r3, #28]
 80101da:	f003 0310 	and.w	r3, r3, #16
 80101de:	2b10      	cmp	r3, #16
 80101e0:	d103      	bne.n	80101ea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	2210      	movs	r2, #16
 80101e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80101f0:	4619      	mov	r1, r3
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f7fe fe40 	bl	800ee78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80101f8:	e00b      	b.n	8010212 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f7f1 f822 	bl	8001244 <HAL_UART_RxCpltCallback>
}
 8010200:	e007      	b.n	8010212 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	699a      	ldr	r2, [r3, #24]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	f042 0208 	orr.w	r2, r2, #8
 8010210:	619a      	str	r2, [r3, #24]
}
 8010212:	bf00      	nop
 8010214:	3770      	adds	r7, #112	; 0x70
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	58000c00 	.word	0x58000c00

08010220 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b09c      	sub	sp, #112	; 0x70
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801022e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010238:	2b22      	cmp	r3, #34	; 0x22
 801023a:	f040 80be 	bne.w	80103ba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010244:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801024c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801024e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8010252:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8010256:	4013      	ands	r3, r2
 8010258:	b29a      	uxth	r2, r3
 801025a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801025c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010262:	1c9a      	adds	r2, r3, #2
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801026e:	b29b      	uxth	r3, r3
 8010270:	3b01      	subs	r3, #1
 8010272:	b29a      	uxth	r2, r3
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010280:	b29b      	uxth	r3, r3
 8010282:	2b00      	cmp	r3, #0
 8010284:	f040 80a1 	bne.w	80103ca <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801028e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010290:	e853 3f00 	ldrex	r3, [r3]
 8010294:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010298:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801029c:	667b      	str	r3, [r7, #100]	; 0x64
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	461a      	mov	r2, r3
 80102a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102a6:	657b      	str	r3, [r7, #84]	; 0x54
 80102a8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80102ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102ae:	e841 2300 	strex	r3, r2, [r1]
 80102b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80102b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d1e6      	bne.n	8010288 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	3308      	adds	r3, #8
 80102c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102c4:	e853 3f00 	ldrex	r3, [r3]
 80102c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80102ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102cc:	f023 0301 	bic.w	r3, r3, #1
 80102d0:	663b      	str	r3, [r7, #96]	; 0x60
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	3308      	adds	r3, #8
 80102d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80102da:	643a      	str	r2, [r7, #64]	; 0x40
 80102dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80102e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102e2:	e841 2300 	strex	r3, r2, [r1]
 80102e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80102e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d1e5      	bne.n	80102ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2220      	movs	r2, #32
 80102f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2200      	movs	r2, #0
 80102fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2200      	movs	r2, #0
 8010300:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	4a33      	ldr	r2, [pc, #204]	; (80103d4 <UART_RxISR_16BIT+0x1b4>)
 8010308:	4293      	cmp	r3, r2
 801030a:	d01f      	beq.n	801034c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010316:	2b00      	cmp	r3, #0
 8010318:	d018      	beq.n	801034c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010320:	6a3b      	ldr	r3, [r7, #32]
 8010322:	e853 3f00 	ldrex	r3, [r3]
 8010326:	61fb      	str	r3, [r7, #28]
   return(result);
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801032e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	461a      	mov	r2, r3
 8010336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010338:	62fb      	str	r3, [r7, #44]	; 0x2c
 801033a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801033c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801033e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010340:	e841 2300 	strex	r3, r2, [r1]
 8010344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010348:	2b00      	cmp	r3, #0
 801034a:	d1e6      	bne.n	801031a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010350:	2b01      	cmp	r3, #1
 8010352:	d12e      	bne.n	80103b2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	e853 3f00 	ldrex	r3, [r3]
 8010366:	60bb      	str	r3, [r7, #8]
   return(result);
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	f023 0310 	bic.w	r3, r3, #16
 801036e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	461a      	mov	r2, r3
 8010376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010378:	61bb      	str	r3, [r7, #24]
 801037a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801037c:	6979      	ldr	r1, [r7, #20]
 801037e:	69ba      	ldr	r2, [r7, #24]
 8010380:	e841 2300 	strex	r3, r2, [r1]
 8010384:	613b      	str	r3, [r7, #16]
   return(result);
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d1e6      	bne.n	801035a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	69db      	ldr	r3, [r3, #28]
 8010392:	f003 0310 	and.w	r3, r3, #16
 8010396:	2b10      	cmp	r3, #16
 8010398:	d103      	bne.n	80103a2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	2210      	movs	r2, #16
 80103a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80103a8:	4619      	mov	r1, r3
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f7fe fd64 	bl	800ee78 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80103b0:	e00b      	b.n	80103ca <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f7f0 ff46 	bl	8001244 <HAL_UART_RxCpltCallback>
}
 80103b8:	e007      	b.n	80103ca <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	699a      	ldr	r2, [r3, #24]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f042 0208 	orr.w	r2, r2, #8
 80103c8:	619a      	str	r2, [r3, #24]
}
 80103ca:	bf00      	nop
 80103cc:	3770      	adds	r7, #112	; 0x70
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	bf00      	nop
 80103d4:	58000c00 	.word	0x58000c00

080103d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b0ac      	sub	sp, #176	; 0xb0
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80103e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	69db      	ldr	r3, [r3, #28]
 80103f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	689b      	ldr	r3, [r3, #8]
 8010404:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801040e:	2b22      	cmp	r3, #34	; 0x22
 8010410:	f040 8180 	bne.w	8010714 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801041a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801041e:	e123      	b.n	8010668 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010426:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801042a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801042e:	b2d9      	uxtb	r1, r3
 8010430:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010434:	b2da      	uxtb	r2, r3
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801043a:	400a      	ands	r2, r1
 801043c:	b2d2      	uxtb	r2, r2
 801043e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010444:	1c5a      	adds	r2, r3, #1
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010450:	b29b      	uxth	r3, r3
 8010452:	3b01      	subs	r3, #1
 8010454:	b29a      	uxth	r2, r3
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	69db      	ldr	r3, [r3, #28]
 8010462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801046a:	f003 0307 	and.w	r3, r3, #7
 801046e:	2b00      	cmp	r3, #0
 8010470:	d053      	beq.n	801051a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010476:	f003 0301 	and.w	r3, r3, #1
 801047a:	2b00      	cmp	r3, #0
 801047c:	d011      	beq.n	80104a2 <UART_RxISR_8BIT_FIFOEN+0xca>
 801047e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00b      	beq.n	80104a2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	2201      	movs	r2, #1
 8010490:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010498:	f043 0201 	orr.w	r2, r3, #1
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80104a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104a6:	f003 0302 	and.w	r3, r3, #2
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d011      	beq.n	80104d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80104ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104b2:	f003 0301 	and.w	r3, r3, #1
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d00b      	beq.n	80104d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	2202      	movs	r2, #2
 80104c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104c8:	f043 0204 	orr.w	r2, r3, #4
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80104d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104d6:	f003 0304 	and.w	r3, r3, #4
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d011      	beq.n	8010502 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80104de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104e2:	f003 0301 	and.w	r3, r3, #1
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d00b      	beq.n	8010502 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	2204      	movs	r2, #4
 80104f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104f8:	f043 0202 	orr.w	r2, r3, #2
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010508:	2b00      	cmp	r3, #0
 801050a:	d006      	beq.n	801051a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f7fe fca9 	bl	800ee64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2200      	movs	r2, #0
 8010516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010520:	b29b      	uxth	r3, r3
 8010522:	2b00      	cmp	r3, #0
 8010524:	f040 80a0 	bne.w	8010668 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801052e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010530:	e853 3f00 	ldrex	r3, [r3]
 8010534:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8010536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801053c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	461a      	mov	r2, r3
 8010546:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801054a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801054c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801054e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010550:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010552:	e841 2300 	strex	r3, r2, [r1]
 8010556:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801055a:	2b00      	cmp	r3, #0
 801055c:	d1e4      	bne.n	8010528 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3308      	adds	r3, #8
 8010564:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010568:	e853 3f00 	ldrex	r3, [r3]
 801056c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801056e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010570:	4b6e      	ldr	r3, [pc, #440]	; (801072c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010572:	4013      	ands	r3, r2
 8010574:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	3308      	adds	r3, #8
 801057e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010582:	66ba      	str	r2, [r7, #104]	; 0x68
 8010584:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010586:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010588:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801058a:	e841 2300 	strex	r3, r2, [r1]
 801058e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010592:	2b00      	cmp	r3, #0
 8010594:	d1e3      	bne.n	801055e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2220      	movs	r2, #32
 801059a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2200      	movs	r2, #0
 80105a2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2200      	movs	r2, #0
 80105a8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	4a60      	ldr	r2, [pc, #384]	; (8010730 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d021      	beq.n	80105f8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d01a      	beq.n	80105f8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105ca:	e853 3f00 	ldrex	r3, [r3]
 80105ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80105d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80105d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	461a      	mov	r2, r3
 80105e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80105e4:	657b      	str	r3, [r7, #84]	; 0x54
 80105e6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80105ec:	e841 2300 	strex	r3, r2, [r1]
 80105f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80105f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d1e4      	bne.n	80105c2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d130      	bne.n	8010662 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2200      	movs	r2, #0
 8010604:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801060e:	e853 3f00 	ldrex	r3, [r3]
 8010612:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010616:	f023 0310 	bic.w	r3, r3, #16
 801061a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	461a      	mov	r2, r3
 8010624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010628:	643b      	str	r3, [r7, #64]	; 0x40
 801062a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801062e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010630:	e841 2300 	strex	r3, r2, [r1]
 8010634:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010638:	2b00      	cmp	r3, #0
 801063a:	d1e4      	bne.n	8010606 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	69db      	ldr	r3, [r3, #28]
 8010642:	f003 0310 	and.w	r3, r3, #16
 8010646:	2b10      	cmp	r3, #16
 8010648:	d103      	bne.n	8010652 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	2210      	movs	r2, #16
 8010650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010658:	4619      	mov	r1, r3
 801065a:	6878      	ldr	r0, [r7, #4]
 801065c:	f7fe fc0c 	bl	800ee78 <HAL_UARTEx_RxEventCallback>
 8010660:	e002      	b.n	8010668 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f7f0 fdee 	bl	8001244 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010668:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801066c:	2b00      	cmp	r3, #0
 801066e:	d006      	beq.n	801067e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010674:	f003 0320 	and.w	r3, r3, #32
 8010678:	2b00      	cmp	r3, #0
 801067a:	f47f aed1 	bne.w	8010420 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010684:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010688:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801068c:	2b00      	cmp	r3, #0
 801068e:	d049      	beq.n	8010724 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010696:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801069a:	429a      	cmp	r2, r3
 801069c:	d242      	bcs.n	8010724 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	3308      	adds	r3, #8
 80106a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a6:	6a3b      	ldr	r3, [r7, #32]
 80106a8:	e853 3f00 	ldrex	r3, [r3]
 80106ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80106ae:	69fb      	ldr	r3, [r7, #28]
 80106b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80106b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	3308      	adds	r3, #8
 80106be:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80106c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80106c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80106c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106ca:	e841 2300 	strex	r3, r2, [r1]
 80106ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80106d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d1e3      	bne.n	801069e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	4a16      	ldr	r2, [pc, #88]	; (8010734 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80106da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	e853 3f00 	ldrex	r3, [r3]
 80106e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	f043 0320 	orr.w	r3, r3, #32
 80106f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	461a      	mov	r2, r3
 80106fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80106fe:	61bb      	str	r3, [r7, #24]
 8010700:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010702:	6979      	ldr	r1, [r7, #20]
 8010704:	69ba      	ldr	r2, [r7, #24]
 8010706:	e841 2300 	strex	r3, r2, [r1]
 801070a:	613b      	str	r3, [r7, #16]
   return(result);
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d1e4      	bne.n	80106dc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010712:	e007      	b.n	8010724 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	699a      	ldr	r2, [r3, #24]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f042 0208 	orr.w	r2, r2, #8
 8010722:	619a      	str	r2, [r3, #24]
}
 8010724:	bf00      	nop
 8010726:	37b0      	adds	r7, #176	; 0xb0
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}
 801072c:	effffffe 	.word	0xeffffffe
 8010730:	58000c00 	.word	0x58000c00
 8010734:	08010069 	.word	0x08010069

08010738 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b0ae      	sub	sp, #184	; 0xb8
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010746:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	69db      	ldr	r3, [r3, #28]
 8010750:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	689b      	ldr	r3, [r3, #8]
 8010764:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801076e:	2b22      	cmp	r3, #34	; 0x22
 8010770:	f040 8184 	bne.w	8010a7c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801077a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801077e:	e127      	b.n	80109d0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010786:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801078e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010792:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8010796:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801079a:	4013      	ands	r3, r2
 801079c:	b29a      	uxth	r2, r3
 801079e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80107a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107a8:	1c9a      	adds	r2, r3, #2
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	3b01      	subs	r3, #1
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	69db      	ldr	r3, [r3, #28]
 80107c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80107ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80107ce:	f003 0307 	and.w	r3, r3, #7
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d053      	beq.n	801087e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80107d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80107da:	f003 0301 	and.w	r3, r3, #1
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d011      	beq.n	8010806 <UART_RxISR_16BIT_FIFOEN+0xce>
 80107e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80107e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00b      	beq.n	8010806 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2201      	movs	r2, #1
 80107f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107fc:	f043 0201 	orr.w	r2, r3, #1
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010806:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801080a:	f003 0302 	and.w	r3, r3, #2
 801080e:	2b00      	cmp	r3, #0
 8010810:	d011      	beq.n	8010836 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010816:	f003 0301 	and.w	r3, r3, #1
 801081a:	2b00      	cmp	r3, #0
 801081c:	d00b      	beq.n	8010836 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	2202      	movs	r2, #2
 8010824:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801082c:	f043 0204 	orr.w	r2, r3, #4
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010836:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801083a:	f003 0304 	and.w	r3, r3, #4
 801083e:	2b00      	cmp	r3, #0
 8010840:	d011      	beq.n	8010866 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010842:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010846:	f003 0301 	and.w	r3, r3, #1
 801084a:	2b00      	cmp	r3, #0
 801084c:	d00b      	beq.n	8010866 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	2204      	movs	r2, #4
 8010854:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801085c:	f043 0202 	orr.w	r2, r3, #2
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801086c:	2b00      	cmp	r3, #0
 801086e:	d006      	beq.n	801087e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f7fe faf7 	bl	800ee64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2200      	movs	r2, #0
 801087a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010884:	b29b      	uxth	r3, r3
 8010886:	2b00      	cmp	r3, #0
 8010888:	f040 80a2 	bne.w	80109d0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010894:	e853 3f00 	ldrex	r3, [r3]
 8010898:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801089a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801089c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80108a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	461a      	mov	r2, r3
 80108aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80108ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80108b2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80108b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80108ba:	e841 2300 	strex	r3, r2, [r1]
 80108be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80108c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d1e2      	bne.n	801088c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	3308      	adds	r3, #8
 80108cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80108d0:	e853 3f00 	ldrex	r3, [r3]
 80108d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80108d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80108d8:	4b6e      	ldr	r3, [pc, #440]	; (8010a94 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80108da:	4013      	ands	r3, r2
 80108dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	3308      	adds	r3, #8
 80108e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80108ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80108ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80108f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80108f2:	e841 2300 	strex	r3, r2, [r1]
 80108f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80108f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d1e3      	bne.n	80108c6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2220      	movs	r2, #32
 8010902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2200      	movs	r2, #0
 801090a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2200      	movs	r2, #0
 8010910:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4a60      	ldr	r2, [pc, #384]	; (8010a98 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010918:	4293      	cmp	r3, r2
 801091a:	d021      	beq.n	8010960 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010926:	2b00      	cmp	r3, #0
 8010928:	d01a      	beq.n	8010960 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010932:	e853 3f00 	ldrex	r3, [r3]
 8010936:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801093a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801093e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	461a      	mov	r2, r3
 8010948:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801094c:	65bb      	str	r3, [r7, #88]	; 0x58
 801094e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010950:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010952:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010954:	e841 2300 	strex	r3, r2, [r1]
 8010958:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801095a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801095c:	2b00      	cmp	r3, #0
 801095e:	d1e4      	bne.n	801092a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010964:	2b01      	cmp	r3, #1
 8010966:	d130      	bne.n	80109ca <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2200      	movs	r2, #0
 801096c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010976:	e853 3f00 	ldrex	r3, [r3]
 801097a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801097c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801097e:	f023 0310 	bic.w	r3, r3, #16
 8010982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	461a      	mov	r2, r3
 801098c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010990:	647b      	str	r3, [r7, #68]	; 0x44
 8010992:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010994:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010998:	e841 2300 	strex	r3, r2, [r1]
 801099c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801099e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d1e4      	bne.n	801096e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	69db      	ldr	r3, [r3, #28]
 80109aa:	f003 0310 	and.w	r3, r3, #16
 80109ae:	2b10      	cmp	r3, #16
 80109b0:	d103      	bne.n	80109ba <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2210      	movs	r2, #16
 80109b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80109c0:	4619      	mov	r1, r3
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f7fe fa58 	bl	800ee78 <HAL_UARTEx_RxEventCallback>
 80109c8:	e002      	b.n	80109d0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f7f0 fc3a 	bl	8001244 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80109d0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d006      	beq.n	80109e6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 80109d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80109dc:	f003 0320 	and.w	r3, r3, #32
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	f47f aecd 	bne.w	8010780 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80109ec:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80109f0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d049      	beq.n	8010a8c <UART_RxISR_16BIT_FIFOEN+0x354>
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80109fe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d242      	bcs.n	8010a8c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	3308      	adds	r3, #8
 8010a0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a10:	e853 3f00 	ldrex	r3, [r3]
 8010a14:	623b      	str	r3, [r7, #32]
   return(result);
 8010a16:	6a3b      	ldr	r3, [r7, #32]
 8010a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	3308      	adds	r3, #8
 8010a26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010a2a:	633a      	str	r2, [r7, #48]	; 0x30
 8010a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a32:	e841 2300 	strex	r3, r2, [r1]
 8010a36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d1e3      	bne.n	8010a06 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	4a16      	ldr	r2, [pc, #88]	; (8010a9c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8010a42:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	e853 3f00 	ldrex	r3, [r3]
 8010a50:	60fb      	str	r3, [r7, #12]
   return(result);
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	f043 0320 	orr.w	r3, r3, #32
 8010a58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	461a      	mov	r2, r3
 8010a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010a66:	61fb      	str	r3, [r7, #28]
 8010a68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a6a:	69b9      	ldr	r1, [r7, #24]
 8010a6c:	69fa      	ldr	r2, [r7, #28]
 8010a6e:	e841 2300 	strex	r3, r2, [r1]
 8010a72:	617b      	str	r3, [r7, #20]
   return(result);
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d1e4      	bne.n	8010a44 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010a7a:	e007      	b.n	8010a8c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	699a      	ldr	r2, [r3, #24]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	f042 0208 	orr.w	r2, r2, #8
 8010a8a:	619a      	str	r2, [r3, #24]
}
 8010a8c:	bf00      	nop
 8010a8e:	37b8      	adds	r7, #184	; 0xb8
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	effffffe 	.word	0xeffffffe
 8010a98:	58000c00 	.word	0x58000c00
 8010a9c:	08010221 	.word	0x08010221

08010aa0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010aa8:	bf00      	nop
 8010aaa:	370c      	adds	r7, #12
 8010aac:	46bd      	mov	sp, r7
 8010aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab2:	4770      	bx	lr

08010ab4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b083      	sub	sp, #12
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010abc:	bf00      	nop
 8010abe:	370c      	adds	r7, #12
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac6:	4770      	bx	lr

08010ac8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010ac8:	b480      	push	{r7}
 8010aca:	b083      	sub	sp, #12
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010ad0:	bf00      	nop
 8010ad2:	370c      	adds	r7, #12
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ada:	4770      	bx	lr

08010adc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010adc:	b480      	push	{r7}
 8010ade:	b085      	sub	sp, #20
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	d101      	bne.n	8010af2 <HAL_UARTEx_DisableFifoMode+0x16>
 8010aee:	2302      	movs	r3, #2
 8010af0:	e027      	b.n	8010b42 <HAL_UARTEx_DisableFifoMode+0x66>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2201      	movs	r2, #1
 8010af6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2224      	movs	r2, #36	; 0x24
 8010afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	681a      	ldr	r2, [r3, #0]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f022 0201 	bic.w	r2, r2, #1
 8010b18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010b20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2200      	movs	r2, #0
 8010b26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	68fa      	ldr	r2, [r7, #12]
 8010b2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2220      	movs	r2, #32
 8010b34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010b40:	2300      	movs	r3, #0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3714      	adds	r7, #20
 8010b46:	46bd      	mov	sp, r7
 8010b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4c:	4770      	bx	lr

08010b4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b4e:	b580      	push	{r7, lr}
 8010b50:	b084      	sub	sp, #16
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	6078      	str	r0, [r7, #4]
 8010b56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010b5e:	2b01      	cmp	r3, #1
 8010b60:	d101      	bne.n	8010b66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010b62:	2302      	movs	r3, #2
 8010b64:	e02d      	b.n	8010bc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2201      	movs	r2, #1
 8010b6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2224      	movs	r2, #36	; 0x24
 8010b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	681a      	ldr	r2, [r3, #0]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	f022 0201 	bic.w	r2, r2, #1
 8010b8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	689b      	ldr	r3, [r3, #8]
 8010b94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	683a      	ldr	r2, [r7, #0]
 8010b9e:	430a      	orrs	r2, r1
 8010ba0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f000 f850 	bl	8010c48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	68fa      	ldr	r2, [r7, #12]
 8010bae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2220      	movs	r2, #32
 8010bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010bc0:	2300      	movs	r3, #0
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3710      	adds	r7, #16
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}

08010bca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010bca:	b580      	push	{r7, lr}
 8010bcc:	b084      	sub	sp, #16
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
 8010bd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010bda:	2b01      	cmp	r3, #1
 8010bdc:	d101      	bne.n	8010be2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010bde:	2302      	movs	r3, #2
 8010be0:	e02d      	b.n	8010c3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2201      	movs	r2, #1
 8010be6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2224      	movs	r2, #36	; 0x24
 8010bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	f022 0201 	bic.w	r2, r2, #1
 8010c08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	689b      	ldr	r3, [r3, #8]
 8010c10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	683a      	ldr	r2, [r7, #0]
 8010c1a:	430a      	orrs	r2, r1
 8010c1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f000 f812 	bl	8010c48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	68fa      	ldr	r2, [r7, #12]
 8010c2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2220      	movs	r2, #32
 8010c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	2200      	movs	r2, #0
 8010c38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010c3c:	2300      	movs	r3, #0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3710      	adds	r7, #16
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
	...

08010c48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b085      	sub	sp, #20
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d108      	bne.n	8010c6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2201      	movs	r2, #1
 8010c64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010c68:	e031      	b.n	8010cce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010c6a:	2310      	movs	r3, #16
 8010c6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010c6e:	2310      	movs	r3, #16
 8010c70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	689b      	ldr	r3, [r3, #8]
 8010c78:	0e5b      	lsrs	r3, r3, #25
 8010c7a:	b2db      	uxtb	r3, r3
 8010c7c:	f003 0307 	and.w	r3, r3, #7
 8010c80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	689b      	ldr	r3, [r3, #8]
 8010c88:	0f5b      	lsrs	r3, r3, #29
 8010c8a:	b2db      	uxtb	r3, r3
 8010c8c:	f003 0307 	and.w	r3, r3, #7
 8010c90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010c92:	7bbb      	ldrb	r3, [r7, #14]
 8010c94:	7b3a      	ldrb	r2, [r7, #12]
 8010c96:	4911      	ldr	r1, [pc, #68]	; (8010cdc <UARTEx_SetNbDataToProcess+0x94>)
 8010c98:	5c8a      	ldrb	r2, [r1, r2]
 8010c9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010c9e:	7b3a      	ldrb	r2, [r7, #12]
 8010ca0:	490f      	ldr	r1, [pc, #60]	; (8010ce0 <UARTEx_SetNbDataToProcess+0x98>)
 8010ca2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ca4:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010cb0:	7bfb      	ldrb	r3, [r7, #15]
 8010cb2:	7b7a      	ldrb	r2, [r7, #13]
 8010cb4:	4909      	ldr	r1, [pc, #36]	; (8010cdc <UARTEx_SetNbDataToProcess+0x94>)
 8010cb6:	5c8a      	ldrb	r2, [r1, r2]
 8010cb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010cbc:	7b7a      	ldrb	r2, [r7, #13]
 8010cbe:	4908      	ldr	r1, [pc, #32]	; (8010ce0 <UARTEx_SetNbDataToProcess+0x98>)
 8010cc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010cc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010cce:	bf00      	nop
 8010cd0:	3714      	adds	r7, #20
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd8:	4770      	bx	lr
 8010cda:	bf00      	nop
 8010cdc:	08014fc0 	.word	0x08014fc0
 8010ce0:	08014fc8 	.word	0x08014fc8

08010ce4 <__NVIC_SetPriority>:
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	4603      	mov	r3, r0
 8010cec:	6039      	str	r1, [r7, #0]
 8010cee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010cf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	db0a      	blt.n	8010d0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	b2da      	uxtb	r2, r3
 8010cfc:	490c      	ldr	r1, [pc, #48]	; (8010d30 <__NVIC_SetPriority+0x4c>)
 8010cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d02:	0112      	lsls	r2, r2, #4
 8010d04:	b2d2      	uxtb	r2, r2
 8010d06:	440b      	add	r3, r1
 8010d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010d0c:	e00a      	b.n	8010d24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	b2da      	uxtb	r2, r3
 8010d12:	4908      	ldr	r1, [pc, #32]	; (8010d34 <__NVIC_SetPriority+0x50>)
 8010d14:	88fb      	ldrh	r3, [r7, #6]
 8010d16:	f003 030f 	and.w	r3, r3, #15
 8010d1a:	3b04      	subs	r3, #4
 8010d1c:	0112      	lsls	r2, r2, #4
 8010d1e:	b2d2      	uxtb	r2, r2
 8010d20:	440b      	add	r3, r1
 8010d22:	761a      	strb	r2, [r3, #24]
}
 8010d24:	bf00      	nop
 8010d26:	370c      	adds	r7, #12
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr
 8010d30:	e000e100 	.word	0xe000e100
 8010d34:	e000ed00 	.word	0xe000ed00

08010d38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010d3c:	4b05      	ldr	r3, [pc, #20]	; (8010d54 <SysTick_Handler+0x1c>)
 8010d3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010d40:	f002 f948 	bl	8012fd4 <xTaskGetSchedulerState>
 8010d44:	4603      	mov	r3, r0
 8010d46:	2b01      	cmp	r3, #1
 8010d48:	d001      	beq.n	8010d4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010d4a:	f002 ff65 	bl	8013c18 <xPortSysTickHandler>
  }
}
 8010d4e:	bf00      	nop
 8010d50:	bd80      	pop	{r7, pc}
 8010d52:	bf00      	nop
 8010d54:	e000e010 	.word	0xe000e010

08010d58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010d5c:	2100      	movs	r1, #0
 8010d5e:	f06f 0004 	mvn.w	r0, #4
 8010d62:	f7ff ffbf 	bl	8010ce4 <__NVIC_SetPriority>
#endif
}
 8010d66:	bf00      	nop
 8010d68:	bd80      	pop	{r7, pc}
	...

08010d6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d72:	f3ef 8305 	mrs	r3, IPSR
 8010d76:	603b      	str	r3, [r7, #0]
  return(result);
 8010d78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d003      	beq.n	8010d86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010d7e:	f06f 0305 	mvn.w	r3, #5
 8010d82:	607b      	str	r3, [r7, #4]
 8010d84:	e00c      	b.n	8010da0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010d86:	4b0a      	ldr	r3, [pc, #40]	; (8010db0 <osKernelInitialize+0x44>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d105      	bne.n	8010d9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010d8e:	4b08      	ldr	r3, [pc, #32]	; (8010db0 <osKernelInitialize+0x44>)
 8010d90:	2201      	movs	r2, #1
 8010d92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010d94:	2300      	movs	r3, #0
 8010d96:	607b      	str	r3, [r7, #4]
 8010d98:	e002      	b.n	8010da0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010da0:	687b      	ldr	r3, [r7, #4]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	370c      	adds	r7, #12
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	24000890 	.word	0x24000890

08010db4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dba:	f3ef 8305 	mrs	r3, IPSR
 8010dbe:	603b      	str	r3, [r7, #0]
  return(result);
 8010dc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d003      	beq.n	8010dce <osKernelStart+0x1a>
    stat = osErrorISR;
 8010dc6:	f06f 0305 	mvn.w	r3, #5
 8010dca:	607b      	str	r3, [r7, #4]
 8010dcc:	e010      	b.n	8010df0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010dce:	4b0b      	ldr	r3, [pc, #44]	; (8010dfc <osKernelStart+0x48>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	d109      	bne.n	8010dea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010dd6:	f7ff ffbf 	bl	8010d58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010dda:	4b08      	ldr	r3, [pc, #32]	; (8010dfc <osKernelStart+0x48>)
 8010ddc:	2202      	movs	r2, #2
 8010dde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010de0:	f001 fc0a 	bl	80125f8 <vTaskStartScheduler>
      stat = osOK;
 8010de4:	2300      	movs	r3, #0
 8010de6:	607b      	str	r3, [r7, #4]
 8010de8:	e002      	b.n	8010df0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010dee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010df0:	687b      	ldr	r3, [r7, #4]
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3708      	adds	r7, #8
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	24000890 	.word	0x24000890

08010e00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b08e      	sub	sp, #56	; 0x38
 8010e04:	af04      	add	r7, sp, #16
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	60b9      	str	r1, [r7, #8]
 8010e0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e10:	f3ef 8305 	mrs	r3, IPSR
 8010e14:	617b      	str	r3, [r7, #20]
  return(result);
 8010e16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d17e      	bne.n	8010f1a <osThreadNew+0x11a>
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d07b      	beq.n	8010f1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010e22:	2380      	movs	r3, #128	; 0x80
 8010e24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010e26:	2318      	movs	r3, #24
 8010e28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d045      	beq.n	8010ec6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d002      	beq.n	8010e48 <osThreadNew+0x48>
        name = attr->name;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	699b      	ldr	r3, [r3, #24]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d002      	beq.n	8010e56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	699b      	ldr	r3, [r3, #24]
 8010e54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010e56:	69fb      	ldr	r3, [r7, #28]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d008      	beq.n	8010e6e <osThreadNew+0x6e>
 8010e5c:	69fb      	ldr	r3, [r7, #28]
 8010e5e:	2b38      	cmp	r3, #56	; 0x38
 8010e60:	d805      	bhi.n	8010e6e <osThreadNew+0x6e>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	f003 0301 	and.w	r3, r3, #1
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d001      	beq.n	8010e72 <osThreadNew+0x72>
        return (NULL);
 8010e6e:	2300      	movs	r3, #0
 8010e70:	e054      	b.n	8010f1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	695b      	ldr	r3, [r3, #20]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d003      	beq.n	8010e82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	695b      	ldr	r3, [r3, #20]
 8010e7e:	089b      	lsrs	r3, r3, #2
 8010e80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	689b      	ldr	r3, [r3, #8]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d00e      	beq.n	8010ea8 <osThreadNew+0xa8>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	68db      	ldr	r3, [r3, #12]
 8010e8e:	2b5b      	cmp	r3, #91	; 0x5b
 8010e90:	d90a      	bls.n	8010ea8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d006      	beq.n	8010ea8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	695b      	ldr	r3, [r3, #20]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d002      	beq.n	8010ea8 <osThreadNew+0xa8>
        mem = 1;
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	61bb      	str	r3, [r7, #24]
 8010ea6:	e010      	b.n	8010eca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	689b      	ldr	r3, [r3, #8]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d10c      	bne.n	8010eca <osThreadNew+0xca>
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	68db      	ldr	r3, [r3, #12]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d108      	bne.n	8010eca <osThreadNew+0xca>
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	691b      	ldr	r3, [r3, #16]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d104      	bne.n	8010eca <osThreadNew+0xca>
          mem = 0;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	61bb      	str	r3, [r7, #24]
 8010ec4:	e001      	b.n	8010eca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	d110      	bne.n	8010ef2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010ed4:	687a      	ldr	r2, [r7, #4]
 8010ed6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010ed8:	9202      	str	r2, [sp, #8]
 8010eda:	9301      	str	r3, [sp, #4]
 8010edc:	69fb      	ldr	r3, [r7, #28]
 8010ede:	9300      	str	r3, [sp, #0]
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	6a3a      	ldr	r2, [r7, #32]
 8010ee4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ee6:	68f8      	ldr	r0, [r7, #12]
 8010ee8:	f001 f9b0 	bl	801224c <xTaskCreateStatic>
 8010eec:	4603      	mov	r3, r0
 8010eee:	613b      	str	r3, [r7, #16]
 8010ef0:	e013      	b.n	8010f1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010ef2:	69bb      	ldr	r3, [r7, #24]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d110      	bne.n	8010f1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010ef8:	6a3b      	ldr	r3, [r7, #32]
 8010efa:	b29a      	uxth	r2, r3
 8010efc:	f107 0310 	add.w	r3, r7, #16
 8010f00:	9301      	str	r3, [sp, #4]
 8010f02:	69fb      	ldr	r3, [r7, #28]
 8010f04:	9300      	str	r3, [sp, #0]
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f0a:	68f8      	ldr	r0, [r7, #12]
 8010f0c:	f001 f9fb 	bl	8012306 <xTaskCreate>
 8010f10:	4603      	mov	r3, r0
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	d001      	beq.n	8010f1a <osThreadNew+0x11a>
            hTask = NULL;
 8010f16:	2300      	movs	r3, #0
 8010f18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010f1a:	693b      	ldr	r3, [r7, #16]
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	3728      	adds	r7, #40	; 0x28
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}

08010f24 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8010f24:	b480      	push	{r7}
 8010f26:	b083      	sub	sp, #12
 8010f28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f2a:	f3ef 8305 	mrs	r3, IPSR
 8010f2e:	603b      	str	r3, [r7, #0]
  return(result);
 8010f30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d003      	beq.n	8010f3e <osThreadYield+0x1a>
    stat = osErrorISR;
 8010f36:	f06f 0305 	mvn.w	r3, #5
 8010f3a:	607b      	str	r3, [r7, #4]
 8010f3c:	e009      	b.n	8010f52 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8010f42:	4b07      	ldr	r3, [pc, #28]	; (8010f60 <osThreadYield+0x3c>)
 8010f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f48:	601a      	str	r2, [r3, #0]
 8010f4a:	f3bf 8f4f 	dsb	sy
 8010f4e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8010f52:	687b      	ldr	r3, [r7, #4]
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	370c      	adds	r7, #12
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr
 8010f60:	e000ed04 	.word	0xe000ed04

08010f64 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b084      	sub	sp, #16
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f6c:	f3ef 8305 	mrs	r3, IPSR
 8010f70:	60bb      	str	r3, [r7, #8]
  return(result);
 8010f72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d003      	beq.n	8010f80 <osDelay+0x1c>
    stat = osErrorISR;
 8010f78:	f06f 0305 	mvn.w	r3, #5
 8010f7c:	60fb      	str	r3, [r7, #12]
 8010f7e:	e007      	b.n	8010f90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010f80:	2300      	movs	r3, #0
 8010f82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d002      	beq.n	8010f90 <osDelay+0x2c>
      vTaskDelay(ticks);
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f001 fb00 	bl	8012590 <vTaskDelay>
    }
  }

  return (stat);
 8010f90:	68fb      	ldr	r3, [r7, #12]
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3710      	adds	r7, #16
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}

08010f9a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8010f9a:	b580      	push	{r7, lr}
 8010f9c:	b086      	sub	sp, #24
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010fa6:	f3ef 8305 	mrs	r3, IPSR
 8010faa:	60fb      	str	r3, [r7, #12]
  return(result);
 8010fac:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d12d      	bne.n	801100e <osEventFlagsNew+0x74>
    mem = -1;
 8010fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010fb6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d015      	beq.n	8010fea <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	689b      	ldr	r3, [r3, #8]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d006      	beq.n	8010fd4 <osEventFlagsNew+0x3a>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	68db      	ldr	r3, [r3, #12]
 8010fca:	2b1f      	cmp	r3, #31
 8010fcc:	d902      	bls.n	8010fd4 <osEventFlagsNew+0x3a>
        mem = 1;
 8010fce:	2301      	movs	r3, #1
 8010fd0:	613b      	str	r3, [r7, #16]
 8010fd2:	e00c      	b.n	8010fee <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	689b      	ldr	r3, [r3, #8]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d108      	bne.n	8010fee <osEventFlagsNew+0x54>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	68db      	ldr	r3, [r3, #12]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d104      	bne.n	8010fee <osEventFlagsNew+0x54>
          mem = 0;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	613b      	str	r3, [r7, #16]
 8010fe8:	e001      	b.n	8010fee <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8010fea:	2300      	movs	r3, #0
 8010fec:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d106      	bne.n	8011002 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	689b      	ldr	r3, [r3, #8]
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f000 f95f 	bl	80112bc <xEventGroupCreateStatic>
 8010ffe:	6178      	str	r0, [r7, #20]
 8011000:	e005      	b.n	801100e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d102      	bne.n	801100e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8011008:	f000 f98f 	bl	801132a <xEventGroupCreate>
 801100c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 801100e:	697b      	ldr	r3, [r7, #20]
}
 8011010:	4618      	mov	r0, r3
 8011012:	3718      	adds	r7, #24
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8011018:	b580      	push	{r7, lr}
 801101a:	b086      	sub	sp, #24
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d004      	beq.n	8011036 <osEventFlagsSet+0x1e>
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011032:	2b00      	cmp	r3, #0
 8011034:	d003      	beq.n	801103e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8011036:	f06f 0303 	mvn.w	r3, #3
 801103a:	617b      	str	r3, [r7, #20]
 801103c:	e028      	b.n	8011090 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801103e:	f3ef 8305 	mrs	r3, IPSR
 8011042:	60fb      	str	r3, [r7, #12]
  return(result);
 8011044:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011046:	2b00      	cmp	r3, #0
 8011048:	d01d      	beq.n	8011086 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801104a:	2300      	movs	r3, #0
 801104c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801104e:	f107 0308 	add.w	r3, r7, #8
 8011052:	461a      	mov	r2, r3
 8011054:	6839      	ldr	r1, [r7, #0]
 8011056:	6938      	ldr	r0, [r7, #16]
 8011058:	f000 fb0a 	bl	8011670 <xEventGroupSetBitsFromISR>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	d103      	bne.n	801106a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8011062:	f06f 0302 	mvn.w	r3, #2
 8011066:	617b      	str	r3, [r7, #20]
 8011068:	e012      	b.n	8011090 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d00d      	beq.n	8011090 <osEventFlagsSet+0x78>
 8011074:	4b09      	ldr	r3, [pc, #36]	; (801109c <osEventFlagsSet+0x84>)
 8011076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801107a:	601a      	str	r2, [r3, #0]
 801107c:	f3bf 8f4f 	dsb	sy
 8011080:	f3bf 8f6f 	isb	sy
 8011084:	e004      	b.n	8011090 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8011086:	6839      	ldr	r1, [r7, #0]
 8011088:	6938      	ldr	r0, [r7, #16]
 801108a:	f000 fa37 	bl	80114fc <xEventGroupSetBits>
 801108e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8011090:	697b      	ldr	r3, [r7, #20]
}
 8011092:	4618      	mov	r0, r3
 8011094:	3718      	adds	r7, #24
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	e000ed04 	.word	0xe000ed04

080110a0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b08c      	sub	sp, #48	; 0x30
 80110a4:	af02      	add	r7, sp, #8
 80110a6:	60f8      	str	r0, [r7, #12]
 80110a8:	60b9      	str	r1, [r7, #8]
 80110aa:	607a      	str	r2, [r7, #4]
 80110ac:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80110b2:	69bb      	ldr	r3, [r7, #24]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d004      	beq.n	80110c2 <osEventFlagsWait+0x22>
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d003      	beq.n	80110ca <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80110c2:	f06f 0303 	mvn.w	r3, #3
 80110c6:	61fb      	str	r3, [r7, #28]
 80110c8:	e04b      	b.n	8011162 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110ca:	f3ef 8305 	mrs	r3, IPSR
 80110ce:	617b      	str	r3, [r7, #20]
  return(result);
 80110d0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d003      	beq.n	80110de <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80110d6:	f06f 0305 	mvn.w	r3, #5
 80110da:	61fb      	str	r3, [r7, #28]
 80110dc:	e041      	b.n	8011162 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f003 0301 	and.w	r3, r3, #1
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d002      	beq.n	80110ee <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80110e8:	2301      	movs	r3, #1
 80110ea:	627b      	str	r3, [r7, #36]	; 0x24
 80110ec:	e001      	b.n	80110f2 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80110ee:	2300      	movs	r3, #0
 80110f0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	f003 0302 	and.w	r3, r3, #2
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d002      	beq.n	8011102 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80110fc:	2300      	movs	r3, #0
 80110fe:	623b      	str	r3, [r7, #32]
 8011100:	e001      	b.n	8011106 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8011102:	2301      	movs	r3, #1
 8011104:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	9300      	str	r3, [sp, #0]
 801110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110c:	6a3a      	ldr	r2, [r7, #32]
 801110e:	68b9      	ldr	r1, [r7, #8]
 8011110:	69b8      	ldr	r0, [r7, #24]
 8011112:	f000 f925 	bl	8011360 <xEventGroupWaitBits>
 8011116:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	f003 0301 	and.w	r3, r3, #1
 801111e:	2b00      	cmp	r3, #0
 8011120:	d010      	beq.n	8011144 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8011122:	68ba      	ldr	r2, [r7, #8]
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	4013      	ands	r3, r2
 8011128:	68ba      	ldr	r2, [r7, #8]
 801112a:	429a      	cmp	r2, r3
 801112c:	d019      	beq.n	8011162 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d003      	beq.n	801113c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8011134:	f06f 0301 	mvn.w	r3, #1
 8011138:	61fb      	str	r3, [r7, #28]
 801113a:	e012      	b.n	8011162 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801113c:	f06f 0302 	mvn.w	r3, #2
 8011140:	61fb      	str	r3, [r7, #28]
 8011142:	e00e      	b.n	8011162 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8011144:	68ba      	ldr	r2, [r7, #8]
 8011146:	69fb      	ldr	r3, [r7, #28]
 8011148:	4013      	ands	r3, r2
 801114a:	2b00      	cmp	r3, #0
 801114c:	d109      	bne.n	8011162 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d003      	beq.n	801115c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8011154:	f06f 0301 	mvn.w	r3, #1
 8011158:	61fb      	str	r3, [r7, #28]
 801115a:	e002      	b.n	8011162 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801115c:	f06f 0302 	mvn.w	r3, #2
 8011160:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8011162:	69fb      	ldr	r3, [r7, #28]
}
 8011164:	4618      	mov	r0, r3
 8011166:	3728      	adds	r7, #40	; 0x28
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}

0801116c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801116c:	b580      	push	{r7, lr}
 801116e:	b08a      	sub	sp, #40	; 0x28
 8011170:	af02      	add	r7, sp, #8
 8011172:	60f8      	str	r0, [r7, #12]
 8011174:	60b9      	str	r1, [r7, #8]
 8011176:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011178:	2300      	movs	r3, #0
 801117a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801117c:	f3ef 8305 	mrs	r3, IPSR
 8011180:	613b      	str	r3, [r7, #16]
  return(result);
 8011182:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011184:	2b00      	cmp	r3, #0
 8011186:	d15f      	bne.n	8011248 <osMessageQueueNew+0xdc>
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d05c      	beq.n	8011248 <osMessageQueueNew+0xdc>
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d059      	beq.n	8011248 <osMessageQueueNew+0xdc>
    mem = -1;
 8011194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011198:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d029      	beq.n	80111f4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	689b      	ldr	r3, [r3, #8]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d012      	beq.n	80111ce <osMessageQueueNew+0x62>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	2b4f      	cmp	r3, #79	; 0x4f
 80111ae:	d90e      	bls.n	80111ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d00a      	beq.n	80111ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	695a      	ldr	r2, [r3, #20]
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	68b9      	ldr	r1, [r7, #8]
 80111c0:	fb01 f303 	mul.w	r3, r1, r3
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d302      	bcc.n	80111ce <osMessageQueueNew+0x62>
        mem = 1;
 80111c8:	2301      	movs	r3, #1
 80111ca:	61bb      	str	r3, [r7, #24]
 80111cc:	e014      	b.n	80111f8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	689b      	ldr	r3, [r3, #8]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d110      	bne.n	80111f8 <osMessageQueueNew+0x8c>
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	68db      	ldr	r3, [r3, #12]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d10c      	bne.n	80111f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d108      	bne.n	80111f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	695b      	ldr	r3, [r3, #20]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d104      	bne.n	80111f8 <osMessageQueueNew+0x8c>
          mem = 0;
 80111ee:	2300      	movs	r3, #0
 80111f0:	61bb      	str	r3, [r7, #24]
 80111f2:	e001      	b.n	80111f8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80111f4:	2300      	movs	r3, #0
 80111f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80111f8:	69bb      	ldr	r3, [r7, #24]
 80111fa:	2b01      	cmp	r3, #1
 80111fc:	d10b      	bne.n	8011216 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	691a      	ldr	r2, [r3, #16]
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	689b      	ldr	r3, [r3, #8]
 8011206:	2100      	movs	r1, #0
 8011208:	9100      	str	r1, [sp, #0]
 801120a:	68b9      	ldr	r1, [r7, #8]
 801120c:	68f8      	ldr	r0, [r7, #12]
 801120e:	f000 fb5f 	bl	80118d0 <xQueueGenericCreateStatic>
 8011212:	61f8      	str	r0, [r7, #28]
 8011214:	e008      	b.n	8011228 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8011216:	69bb      	ldr	r3, [r7, #24]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d105      	bne.n	8011228 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801121c:	2200      	movs	r2, #0
 801121e:	68b9      	ldr	r1, [r7, #8]
 8011220:	68f8      	ldr	r0, [r7, #12]
 8011222:	f000 fbcd 	bl	80119c0 <xQueueGenericCreate>
 8011226:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011228:	69fb      	ldr	r3, [r7, #28]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d00c      	beq.n	8011248 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d003      	beq.n	801123c <osMessageQueueNew+0xd0>
        name = attr->name;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	617b      	str	r3, [r7, #20]
 801123a:	e001      	b.n	8011240 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801123c:	2300      	movs	r3, #0
 801123e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011240:	6979      	ldr	r1, [r7, #20]
 8011242:	69f8      	ldr	r0, [r7, #28]
 8011244:	f000 ffa4 	bl	8012190 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011248:	69fb      	ldr	r3, [r7, #28]
}
 801124a:	4618      	mov	r0, r3
 801124c:	3720      	adds	r7, #32
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
	...

08011254 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011254:	b480      	push	{r7}
 8011256:	b085      	sub	sp, #20
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	4a07      	ldr	r2, [pc, #28]	; (8011280 <vApplicationGetIdleTaskMemory+0x2c>)
 8011264:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	4a06      	ldr	r2, [pc, #24]	; (8011284 <vApplicationGetIdleTaskMemory+0x30>)
 801126a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2280      	movs	r2, #128	; 0x80
 8011270:	601a      	str	r2, [r3, #0]
}
 8011272:	bf00      	nop
 8011274:	3714      	adds	r7, #20
 8011276:	46bd      	mov	sp, r7
 8011278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127c:	4770      	bx	lr
 801127e:	bf00      	nop
 8011280:	24000894 	.word	0x24000894
 8011284:	240008f0 	.word	0x240008f0

08011288 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011288:	b480      	push	{r7}
 801128a:	b085      	sub	sp, #20
 801128c:	af00      	add	r7, sp, #0
 801128e:	60f8      	str	r0, [r7, #12]
 8011290:	60b9      	str	r1, [r7, #8]
 8011292:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	4a07      	ldr	r2, [pc, #28]	; (80112b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8011298:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	4a06      	ldr	r2, [pc, #24]	; (80112b8 <vApplicationGetTimerTaskMemory+0x30>)
 801129e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80112a6:	601a      	str	r2, [r3, #0]
}
 80112a8:	bf00      	nop
 80112aa:	3714      	adds	r7, #20
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr
 80112b4:	24000af0 	.word	0x24000af0
 80112b8:	24000b4c 	.word	0x24000b4c

080112bc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b086      	sub	sp, #24
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d10a      	bne.n	80112e0 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80112ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ce:	f383 8811 	msr	BASEPRI, r3
 80112d2:	f3bf 8f6f 	isb	sy
 80112d6:	f3bf 8f4f 	dsb	sy
 80112da:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80112dc:	bf00      	nop
 80112de:	e7fe      	b.n	80112de <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80112e0:	2320      	movs	r3, #32
 80112e2:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	2b20      	cmp	r3, #32
 80112e8:	d00a      	beq.n	8011300 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80112ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ee:	f383 8811 	msr	BASEPRI, r3
 80112f2:	f3bf 8f6f 	isb	sy
 80112f6:	f3bf 8f4f 	dsb	sy
 80112fa:	60fb      	str	r3, [r7, #12]
}
 80112fc:	bf00      	nop
 80112fe:	e7fe      	b.n	80112fe <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d00a      	beq.n	8011320 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	2200      	movs	r2, #0
 801130e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	3304      	adds	r3, #4
 8011314:	4618      	mov	r0, r3
 8011316:	f000 f9bf 	bl	8011698 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	2201      	movs	r2, #1
 801131e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8011320:	697b      	ldr	r3, [r7, #20]
	}
 8011322:	4618      	mov	r0, r3
 8011324:	3718      	adds	r7, #24
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}

0801132a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801132a:	b580      	push	{r7, lr}
 801132c:	b082      	sub	sp, #8
 801132e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8011330:	2020      	movs	r0, #32
 8011332:	f002 fd01 	bl	8013d38 <pvPortMalloc>
 8011336:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d00a      	beq.n	8011354 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2200      	movs	r2, #0
 8011342:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	3304      	adds	r3, #4
 8011348:	4618      	mov	r0, r3
 801134a:	f000 f9a5 	bl	8011698 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2200      	movs	r2, #0
 8011352:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8011354:	687b      	ldr	r3, [r7, #4]
	}
 8011356:	4618      	mov	r0, r3
 8011358:	3708      	adds	r7, #8
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
	...

08011360 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b090      	sub	sp, #64	; 0x40
 8011364:	af00      	add	r7, sp, #0
 8011366:	60f8      	str	r0, [r7, #12]
 8011368:	60b9      	str	r1, [r7, #8]
 801136a:	607a      	str	r2, [r7, #4]
 801136c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8011372:	2300      	movs	r3, #0
 8011374:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8011376:	2300      	movs	r3, #0
 8011378:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d10a      	bne.n	8011396 <xEventGroupWaitBits+0x36>
	__asm volatile
 8011380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011384:	f383 8811 	msr	BASEPRI, r3
 8011388:	f3bf 8f6f 	isb	sy
 801138c:	f3bf 8f4f 	dsb	sy
 8011390:	623b      	str	r3, [r7, #32]
}
 8011392:	bf00      	nop
 8011394:	e7fe      	b.n	8011394 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801139c:	2b00      	cmp	r3, #0
 801139e:	d00a      	beq.n	80113b6 <xEventGroupWaitBits+0x56>
	__asm volatile
 80113a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a4:	f383 8811 	msr	BASEPRI, r3
 80113a8:	f3bf 8f6f 	isb	sy
 80113ac:	f3bf 8f4f 	dsb	sy
 80113b0:	61fb      	str	r3, [r7, #28]
}
 80113b2:	bf00      	nop
 80113b4:	e7fe      	b.n	80113b4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d10a      	bne.n	80113d2 <xEventGroupWaitBits+0x72>
	__asm volatile
 80113bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c0:	f383 8811 	msr	BASEPRI, r3
 80113c4:	f3bf 8f6f 	isb	sy
 80113c8:	f3bf 8f4f 	dsb	sy
 80113cc:	61bb      	str	r3, [r7, #24]
}
 80113ce:	bf00      	nop
 80113d0:	e7fe      	b.n	80113d0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80113d2:	f001 fdff 	bl	8012fd4 <xTaskGetSchedulerState>
 80113d6:	4603      	mov	r3, r0
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d102      	bne.n	80113e2 <xEventGroupWaitBits+0x82>
 80113dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d101      	bne.n	80113e6 <xEventGroupWaitBits+0x86>
 80113e2:	2301      	movs	r3, #1
 80113e4:	e000      	b.n	80113e8 <xEventGroupWaitBits+0x88>
 80113e6:	2300      	movs	r3, #0
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d10a      	bne.n	8011402 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80113ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f0:	f383 8811 	msr	BASEPRI, r3
 80113f4:	f3bf 8f6f 	isb	sy
 80113f8:	f3bf 8f4f 	dsb	sy
 80113fc:	617b      	str	r3, [r7, #20]
}
 80113fe:	bf00      	nop
 8011400:	e7fe      	b.n	8011400 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8011402:	f001 f95f 	bl	80126c4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8011406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 801140c:	683a      	ldr	r2, [r7, #0]
 801140e:	68b9      	ldr	r1, [r7, #8]
 8011410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011412:	f000 f90b 	bl	801162c <prvTestWaitCondition>
 8011416:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141a:	2b00      	cmp	r3, #0
 801141c:	d00e      	beq.n	801143c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 801141e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011420:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8011422:	2300      	movs	r3, #0
 8011424:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d028      	beq.n	801147e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	43db      	mvns	r3, r3
 8011434:	401a      	ands	r2, r3
 8011436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011438:	601a      	str	r2, [r3, #0]
 801143a:	e020      	b.n	801147e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 801143c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801143e:	2b00      	cmp	r3, #0
 8011440:	d104      	bne.n	801144c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8011442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011444:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8011446:	2301      	movs	r3, #1
 8011448:	633b      	str	r3, [r7, #48]	; 0x30
 801144a:	e018      	b.n	801147e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d003      	beq.n	801145a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8011452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011458:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d003      	beq.n	8011468 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8011460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011462:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011466:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8011468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801146a:	1d18      	adds	r0, r3, #4
 801146c:	68ba      	ldr	r2, [r7, #8]
 801146e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011470:	4313      	orrs	r3, r2
 8011472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011474:	4619      	mov	r1, r3
 8011476:	f001 fb25 	bl	8012ac4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801147a:	2300      	movs	r3, #0
 801147c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801147e:	f001 f92f 	bl	80126e0 <xTaskResumeAll>
 8011482:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8011484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011486:	2b00      	cmp	r3, #0
 8011488:	d031      	beq.n	80114ee <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148c:	2b00      	cmp	r3, #0
 801148e:	d107      	bne.n	80114a0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011490:	4b19      	ldr	r3, [pc, #100]	; (80114f8 <xEventGroupWaitBits+0x198>)
 8011492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011496:	601a      	str	r2, [r3, #0]
 8011498:	f3bf 8f4f 	dsb	sy
 801149c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80114a0:	f001 fe24 	bl	80130ec <uxTaskResetEventItemValue>
 80114a4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80114a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d11a      	bne.n	80114e6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80114b0:	f002 fb20 	bl	8013af4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80114b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80114ba:	683a      	ldr	r2, [r7, #0]
 80114bc:	68b9      	ldr	r1, [r7, #8]
 80114be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80114c0:	f000 f8b4 	bl	801162c <prvTestWaitCondition>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d009      	beq.n	80114de <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d006      	beq.n	80114de <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80114d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114d2:	681a      	ldr	r2, [r3, #0]
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	43db      	mvns	r3, r3
 80114d8:	401a      	ands	r2, r3
 80114da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114dc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80114de:	2301      	movs	r3, #1
 80114e0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80114e2:	f002 fb37 	bl	8013b54 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80114e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80114ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80114ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3740      	adds	r7, #64	; 0x40
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}
 80114f8:	e000ed04 	.word	0xe000ed04

080114fc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b08e      	sub	sp, #56	; 0x38
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
 8011504:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011506:	2300      	movs	r3, #0
 8011508:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801150e:	2300      	movs	r3, #0
 8011510:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d10a      	bne.n	801152e <xEventGroupSetBits+0x32>
	__asm volatile
 8011518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801151c:	f383 8811 	msr	BASEPRI, r3
 8011520:	f3bf 8f6f 	isb	sy
 8011524:	f3bf 8f4f 	dsb	sy
 8011528:	613b      	str	r3, [r7, #16]
}
 801152a:	bf00      	nop
 801152c:	e7fe      	b.n	801152c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011534:	2b00      	cmp	r3, #0
 8011536:	d00a      	beq.n	801154e <xEventGroupSetBits+0x52>
	__asm volatile
 8011538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801153c:	f383 8811 	msr	BASEPRI, r3
 8011540:	f3bf 8f6f 	isb	sy
 8011544:	f3bf 8f4f 	dsb	sy
 8011548:	60fb      	str	r3, [r7, #12]
}
 801154a:	bf00      	nop
 801154c:	e7fe      	b.n	801154c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011550:	3304      	adds	r3, #4
 8011552:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011556:	3308      	adds	r3, #8
 8011558:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801155a:	f001 f8b3 	bl	80126c4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8011564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011566:	681a      	ldr	r2, [r3, #0]
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	431a      	orrs	r2, r3
 801156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8011570:	e03c      	b.n	80115ec <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8011572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011574:	685b      	ldr	r3, [r3, #4]
 8011576:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8011578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801157e:	2300      	movs	r3, #0
 8011580:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8011582:	69bb      	ldr	r3, [r7, #24]
 8011584:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011588:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801158a:	69bb      	ldr	r3, [r7, #24]
 801158c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011590:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011598:	2b00      	cmp	r3, #0
 801159a:	d108      	bne.n	80115ae <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	69bb      	ldr	r3, [r7, #24]
 80115a2:	4013      	ands	r3, r2
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d00b      	beq.n	80115c0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80115a8:	2301      	movs	r3, #1
 80115aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80115ac:	e008      	b.n	80115c0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80115ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b0:	681a      	ldr	r2, [r3, #0]
 80115b2:	69bb      	ldr	r3, [r7, #24]
 80115b4:	4013      	ands	r3, r2
 80115b6:	69ba      	ldr	r2, [r7, #24]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d101      	bne.n	80115c0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80115bc:	2301      	movs	r3, #1
 80115be:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80115c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d010      	beq.n	80115e8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d003      	beq.n	80115d8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80115d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115d2:	69bb      	ldr	r3, [r7, #24]
 80115d4:	4313      	orrs	r3, r2
 80115d6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80115d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80115e0:	4619      	mov	r1, r3
 80115e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80115e4:	f001 fb3a 	bl	8012c5c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80115ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115ee:	6a3b      	ldr	r3, [r7, #32]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d1be      	bne.n	8011572 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80115f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115fa:	43db      	mvns	r3, r3
 80115fc:	401a      	ands	r2, r3
 80115fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011600:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8011602:	f001 f86d 	bl	80126e0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011608:	681b      	ldr	r3, [r3, #0]
}
 801160a:	4618      	mov	r0, r3
 801160c:	3738      	adds	r7, #56	; 0x38
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}

08011612 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8011612:	b580      	push	{r7, lr}
 8011614:	b082      	sub	sp, #8
 8011616:	af00      	add	r7, sp, #0
 8011618:	6078      	str	r0, [r7, #4]
 801161a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801161c:	6839      	ldr	r1, [r7, #0]
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f7ff ff6c 	bl	80114fc <xEventGroupSetBits>
}
 8011624:	bf00      	nop
 8011626:	3708      	adds	r7, #8
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801162c:	b480      	push	{r7}
 801162e:	b087      	sub	sp, #28
 8011630:	af00      	add	r7, sp, #0
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011638:	2300      	movs	r3, #0
 801163a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d107      	bne.n	8011652 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8011642:	68fa      	ldr	r2, [r7, #12]
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	4013      	ands	r3, r2
 8011648:	2b00      	cmp	r3, #0
 801164a:	d00a      	beq.n	8011662 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801164c:	2301      	movs	r3, #1
 801164e:	617b      	str	r3, [r7, #20]
 8011650:	e007      	b.n	8011662 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8011652:	68fa      	ldr	r2, [r7, #12]
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	4013      	ands	r3, r2
 8011658:	68ba      	ldr	r2, [r7, #8]
 801165a:	429a      	cmp	r2, r3
 801165c:	d101      	bne.n	8011662 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801165e:	2301      	movs	r3, #1
 8011660:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8011662:	697b      	ldr	r3, [r7, #20]
}
 8011664:	4618      	mov	r0, r3
 8011666:	371c      	adds	r7, #28
 8011668:	46bd      	mov	sp, r7
 801166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166e:	4770      	bx	lr

08011670 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011670:	b580      	push	{r7, lr}
 8011672:	b086      	sub	sp, #24
 8011674:	af00      	add	r7, sp, #0
 8011676:	60f8      	str	r0, [r7, #12]
 8011678:	60b9      	str	r1, [r7, #8]
 801167a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	68ba      	ldr	r2, [r7, #8]
 8011680:	68f9      	ldr	r1, [r7, #12]
 8011682:	4804      	ldr	r0, [pc, #16]	; (8011694 <xEventGroupSetBitsFromISR+0x24>)
 8011684:	f002 f8ec 	bl	8013860 <xTimerPendFunctionCallFromISR>
 8011688:	6178      	str	r0, [r7, #20]

		return xReturn;
 801168a:	697b      	ldr	r3, [r7, #20]
	}
 801168c:	4618      	mov	r0, r3
 801168e:	3718      	adds	r7, #24
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}
 8011694:	08011613 	.word	0x08011613

08011698 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011698:	b480      	push	{r7}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f103 0208 	add.w	r2, r3, #8
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f103 0208 	add.w	r2, r3, #8
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f103 0208 	add.w	r2, r3, #8
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2200      	movs	r2, #0
 80116ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80116cc:	bf00      	nop
 80116ce:	370c      	adds	r7, #12
 80116d0:	46bd      	mov	sp, r7
 80116d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d6:	4770      	bx	lr

080116d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80116d8:	b480      	push	{r7}
 80116da:	b083      	sub	sp, #12
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2200      	movs	r2, #0
 80116e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80116e6:	bf00      	nop
 80116e8:	370c      	adds	r7, #12
 80116ea:	46bd      	mov	sp, r7
 80116ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f0:	4770      	bx	lr

080116f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80116f2:	b480      	push	{r7}
 80116f4:	b085      	sub	sp, #20
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6078      	str	r0, [r7, #4]
 80116fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	685b      	ldr	r3, [r3, #4]
 8011700:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	68fa      	ldr	r2, [r7, #12]
 8011706:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	689a      	ldr	r2, [r3, #8]
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	689b      	ldr	r3, [r3, #8]
 8011714:	683a      	ldr	r2, [r7, #0]
 8011716:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	683a      	ldr	r2, [r7, #0]
 801171c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	1c5a      	adds	r2, r3, #1
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	601a      	str	r2, [r3, #0]
}
 801172e:	bf00      	nop
 8011730:	3714      	adds	r7, #20
 8011732:	46bd      	mov	sp, r7
 8011734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011738:	4770      	bx	lr

0801173a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801173a:	b480      	push	{r7}
 801173c:	b085      	sub	sp, #20
 801173e:	af00      	add	r7, sp, #0
 8011740:	6078      	str	r0, [r7, #4]
 8011742:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011750:	d103      	bne.n	801175a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	691b      	ldr	r3, [r3, #16]
 8011756:	60fb      	str	r3, [r7, #12]
 8011758:	e00c      	b.n	8011774 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	3308      	adds	r3, #8
 801175e:	60fb      	str	r3, [r7, #12]
 8011760:	e002      	b.n	8011768 <vListInsert+0x2e>
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	60fb      	str	r3, [r7, #12]
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	685b      	ldr	r3, [r3, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	68ba      	ldr	r2, [r7, #8]
 8011770:	429a      	cmp	r2, r3
 8011772:	d2f6      	bcs.n	8011762 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	685a      	ldr	r2, [r3, #4]
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	683a      	ldr	r2, [r7, #0]
 8011782:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	68fa      	ldr	r2, [r7, #12]
 8011788:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	683a      	ldr	r2, [r7, #0]
 801178e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	687a      	ldr	r2, [r7, #4]
 8011794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	1c5a      	adds	r2, r3, #1
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	601a      	str	r2, [r3, #0]
}
 80117a0:	bf00      	nop
 80117a2:	3714      	adds	r7, #20
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr

080117ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80117ac:	b480      	push	{r7}
 80117ae:	b085      	sub	sp, #20
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	691b      	ldr	r3, [r3, #16]
 80117b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	687a      	ldr	r2, [r7, #4]
 80117c0:	6892      	ldr	r2, [r2, #8]
 80117c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	689b      	ldr	r3, [r3, #8]
 80117c8:	687a      	ldr	r2, [r7, #4]
 80117ca:	6852      	ldr	r2, [r2, #4]
 80117cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	687a      	ldr	r2, [r7, #4]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d103      	bne.n	80117e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	689a      	ldr	r2, [r3, #8]
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	2200      	movs	r2, #0
 80117e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	1e5a      	subs	r2, r3, #1
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	681b      	ldr	r3, [r3, #0]
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3714      	adds	r7, #20
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr

08011800 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b084      	sub	sp, #16
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
 8011808:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d10a      	bne.n	801182a <xQueueGenericReset+0x2a>
	__asm volatile
 8011814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011818:	f383 8811 	msr	BASEPRI, r3
 801181c:	f3bf 8f6f 	isb	sy
 8011820:	f3bf 8f4f 	dsb	sy
 8011824:	60bb      	str	r3, [r7, #8]
}
 8011826:	bf00      	nop
 8011828:	e7fe      	b.n	8011828 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801182a:	f002 f963 	bl	8013af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	681a      	ldr	r2, [r3, #0]
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011836:	68f9      	ldr	r1, [r7, #12]
 8011838:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801183a:	fb01 f303 	mul.w	r3, r1, r3
 801183e:	441a      	add	r2, r3
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	2200      	movs	r2, #0
 8011848:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	681a      	ldr	r2, [r3, #0]
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801185a:	3b01      	subs	r3, #1
 801185c:	68f9      	ldr	r1, [r7, #12]
 801185e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011860:	fb01 f303 	mul.w	r3, r1, r3
 8011864:	441a      	add	r2, r3
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	22ff      	movs	r2, #255	; 0xff
 801186e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	22ff      	movs	r2, #255	; 0xff
 8011876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d114      	bne.n	80118aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	691b      	ldr	r3, [r3, #16]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d01a      	beq.n	80118be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	3310      	adds	r3, #16
 801188c:	4618      	mov	r0, r3
 801188e:	f001 f981 	bl	8012b94 <xTaskRemoveFromEventList>
 8011892:	4603      	mov	r3, r0
 8011894:	2b00      	cmp	r3, #0
 8011896:	d012      	beq.n	80118be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011898:	4b0c      	ldr	r3, [pc, #48]	; (80118cc <xQueueGenericReset+0xcc>)
 801189a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801189e:	601a      	str	r2, [r3, #0]
 80118a0:	f3bf 8f4f 	dsb	sy
 80118a4:	f3bf 8f6f 	isb	sy
 80118a8:	e009      	b.n	80118be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	3310      	adds	r3, #16
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7ff fef2 	bl	8011698 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	3324      	adds	r3, #36	; 0x24
 80118b8:	4618      	mov	r0, r3
 80118ba:	f7ff feed 	bl	8011698 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80118be:	f002 f949 	bl	8013b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80118c2:	2301      	movs	r3, #1
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3710      	adds	r7, #16
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}
 80118cc:	e000ed04 	.word	0xe000ed04

080118d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b08e      	sub	sp, #56	; 0x38
 80118d4:	af02      	add	r7, sp, #8
 80118d6:	60f8      	str	r0, [r7, #12]
 80118d8:	60b9      	str	r1, [r7, #8]
 80118da:	607a      	str	r2, [r7, #4]
 80118dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d10a      	bne.n	80118fa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80118e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e8:	f383 8811 	msr	BASEPRI, r3
 80118ec:	f3bf 8f6f 	isb	sy
 80118f0:	f3bf 8f4f 	dsb	sy
 80118f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80118f6:	bf00      	nop
 80118f8:	e7fe      	b.n	80118f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d10a      	bne.n	8011916 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011904:	f383 8811 	msr	BASEPRI, r3
 8011908:	f3bf 8f6f 	isb	sy
 801190c:	f3bf 8f4f 	dsb	sy
 8011910:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011912:	bf00      	nop
 8011914:	e7fe      	b.n	8011914 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d002      	beq.n	8011922 <xQueueGenericCreateStatic+0x52>
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d001      	beq.n	8011926 <xQueueGenericCreateStatic+0x56>
 8011922:	2301      	movs	r3, #1
 8011924:	e000      	b.n	8011928 <xQueueGenericCreateStatic+0x58>
 8011926:	2300      	movs	r3, #0
 8011928:	2b00      	cmp	r3, #0
 801192a:	d10a      	bne.n	8011942 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801192c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011930:	f383 8811 	msr	BASEPRI, r3
 8011934:	f3bf 8f6f 	isb	sy
 8011938:	f3bf 8f4f 	dsb	sy
 801193c:	623b      	str	r3, [r7, #32]
}
 801193e:	bf00      	nop
 8011940:	e7fe      	b.n	8011940 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d102      	bne.n	801194e <xQueueGenericCreateStatic+0x7e>
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d101      	bne.n	8011952 <xQueueGenericCreateStatic+0x82>
 801194e:	2301      	movs	r3, #1
 8011950:	e000      	b.n	8011954 <xQueueGenericCreateStatic+0x84>
 8011952:	2300      	movs	r3, #0
 8011954:	2b00      	cmp	r3, #0
 8011956:	d10a      	bne.n	801196e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011958:	f04f 0350 	mov.w	r3, #80	; 0x50
 801195c:	f383 8811 	msr	BASEPRI, r3
 8011960:	f3bf 8f6f 	isb	sy
 8011964:	f3bf 8f4f 	dsb	sy
 8011968:	61fb      	str	r3, [r7, #28]
}
 801196a:	bf00      	nop
 801196c:	e7fe      	b.n	801196c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801196e:	2350      	movs	r3, #80	; 0x50
 8011970:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	2b50      	cmp	r3, #80	; 0x50
 8011976:	d00a      	beq.n	801198e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801197c:	f383 8811 	msr	BASEPRI, r3
 8011980:	f3bf 8f6f 	isb	sy
 8011984:	f3bf 8f4f 	dsb	sy
 8011988:	61bb      	str	r3, [r7, #24]
}
 801198a:	bf00      	nop
 801198c:	e7fe      	b.n	801198c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801198e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011996:	2b00      	cmp	r3, #0
 8011998:	d00d      	beq.n	80119b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801199a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199c:	2201      	movs	r2, #1
 801199e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80119a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80119a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a8:	9300      	str	r3, [sp, #0]
 80119aa:	4613      	mov	r3, r2
 80119ac:	687a      	ldr	r2, [r7, #4]
 80119ae:	68b9      	ldr	r1, [r7, #8]
 80119b0:	68f8      	ldr	r0, [r7, #12]
 80119b2:	f000 f83f 	bl	8011a34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80119b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80119b8:	4618      	mov	r0, r3
 80119ba:	3730      	adds	r7, #48	; 0x30
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b08a      	sub	sp, #40	; 0x28
 80119c4:	af02      	add	r7, sp, #8
 80119c6:	60f8      	str	r0, [r7, #12]
 80119c8:	60b9      	str	r1, [r7, #8]
 80119ca:	4613      	mov	r3, r2
 80119cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d10a      	bne.n	80119ea <xQueueGenericCreate+0x2a>
	__asm volatile
 80119d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d8:	f383 8811 	msr	BASEPRI, r3
 80119dc:	f3bf 8f6f 	isb	sy
 80119e0:	f3bf 8f4f 	dsb	sy
 80119e4:	613b      	str	r3, [r7, #16]
}
 80119e6:	bf00      	nop
 80119e8:	e7fe      	b.n	80119e8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	68ba      	ldr	r2, [r7, #8]
 80119ee:	fb02 f303 	mul.w	r3, r2, r3
 80119f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80119f4:	69fb      	ldr	r3, [r7, #28]
 80119f6:	3350      	adds	r3, #80	; 0x50
 80119f8:	4618      	mov	r0, r3
 80119fa:	f002 f99d 	bl	8013d38 <pvPortMalloc>
 80119fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011a00:	69bb      	ldr	r3, [r7, #24]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d011      	beq.n	8011a2a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011a06:	69bb      	ldr	r3, [r7, #24]
 8011a08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	3350      	adds	r3, #80	; 0x50
 8011a0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	2200      	movs	r2, #0
 8011a14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011a18:	79fa      	ldrb	r2, [r7, #7]
 8011a1a:	69bb      	ldr	r3, [r7, #24]
 8011a1c:	9300      	str	r3, [sp, #0]
 8011a1e:	4613      	mov	r3, r2
 8011a20:	697a      	ldr	r2, [r7, #20]
 8011a22:	68b9      	ldr	r1, [r7, #8]
 8011a24:	68f8      	ldr	r0, [r7, #12]
 8011a26:	f000 f805 	bl	8011a34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011a2a:	69bb      	ldr	r3, [r7, #24]
	}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3720      	adds	r7, #32
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}

08011a34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b084      	sub	sp, #16
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	60f8      	str	r0, [r7, #12]
 8011a3c:	60b9      	str	r1, [r7, #8]
 8011a3e:	607a      	str	r2, [r7, #4]
 8011a40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d103      	bne.n	8011a50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011a48:	69bb      	ldr	r3, [r7, #24]
 8011a4a:	69ba      	ldr	r2, [r7, #24]
 8011a4c:	601a      	str	r2, [r3, #0]
 8011a4e:	e002      	b.n	8011a56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011a50:	69bb      	ldr	r3, [r7, #24]
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011a56:	69bb      	ldr	r3, [r7, #24]
 8011a58:	68fa      	ldr	r2, [r7, #12]
 8011a5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011a5c:	69bb      	ldr	r3, [r7, #24]
 8011a5e:	68ba      	ldr	r2, [r7, #8]
 8011a60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011a62:	2101      	movs	r1, #1
 8011a64:	69b8      	ldr	r0, [r7, #24]
 8011a66:	f7ff fecb 	bl	8011800 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011a6a:	69bb      	ldr	r3, [r7, #24]
 8011a6c:	78fa      	ldrb	r2, [r7, #3]
 8011a6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011a72:	bf00      	nop
 8011a74:	3710      	adds	r7, #16
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}
	...

08011a7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b08e      	sub	sp, #56	; 0x38
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	60f8      	str	r0, [r7, #12]
 8011a84:	60b9      	str	r1, [r7, #8]
 8011a86:	607a      	str	r2, [r7, #4]
 8011a88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d10a      	bne.n	8011aae <xQueueGenericSend+0x32>
	__asm volatile
 8011a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a9c:	f383 8811 	msr	BASEPRI, r3
 8011aa0:	f3bf 8f6f 	isb	sy
 8011aa4:	f3bf 8f4f 	dsb	sy
 8011aa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011aaa:	bf00      	nop
 8011aac:	e7fe      	b.n	8011aac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d103      	bne.n	8011abc <xQueueGenericSend+0x40>
 8011ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d101      	bne.n	8011ac0 <xQueueGenericSend+0x44>
 8011abc:	2301      	movs	r3, #1
 8011abe:	e000      	b.n	8011ac2 <xQueueGenericSend+0x46>
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d10a      	bne.n	8011adc <xQueueGenericSend+0x60>
	__asm volatile
 8011ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aca:	f383 8811 	msr	BASEPRI, r3
 8011ace:	f3bf 8f6f 	isb	sy
 8011ad2:	f3bf 8f4f 	dsb	sy
 8011ad6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011ad8:	bf00      	nop
 8011ada:	e7fe      	b.n	8011ada <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	2b02      	cmp	r3, #2
 8011ae0:	d103      	bne.n	8011aea <xQueueGenericSend+0x6e>
 8011ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ae6:	2b01      	cmp	r3, #1
 8011ae8:	d101      	bne.n	8011aee <xQueueGenericSend+0x72>
 8011aea:	2301      	movs	r3, #1
 8011aec:	e000      	b.n	8011af0 <xQueueGenericSend+0x74>
 8011aee:	2300      	movs	r3, #0
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d10a      	bne.n	8011b0a <xQueueGenericSend+0x8e>
	__asm volatile
 8011af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af8:	f383 8811 	msr	BASEPRI, r3
 8011afc:	f3bf 8f6f 	isb	sy
 8011b00:	f3bf 8f4f 	dsb	sy
 8011b04:	623b      	str	r3, [r7, #32]
}
 8011b06:	bf00      	nop
 8011b08:	e7fe      	b.n	8011b08 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b0a:	f001 fa63 	bl	8012fd4 <xTaskGetSchedulerState>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d102      	bne.n	8011b1a <xQueueGenericSend+0x9e>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d101      	bne.n	8011b1e <xQueueGenericSend+0xa2>
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	e000      	b.n	8011b20 <xQueueGenericSend+0xa4>
 8011b1e:	2300      	movs	r3, #0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d10a      	bne.n	8011b3a <xQueueGenericSend+0xbe>
	__asm volatile
 8011b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b28:	f383 8811 	msr	BASEPRI, r3
 8011b2c:	f3bf 8f6f 	isb	sy
 8011b30:	f3bf 8f4f 	dsb	sy
 8011b34:	61fb      	str	r3, [r7, #28]
}
 8011b36:	bf00      	nop
 8011b38:	e7fe      	b.n	8011b38 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b3a:	f001 ffdb 	bl	8013af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d302      	bcc.n	8011b50 <xQueueGenericSend+0xd4>
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	2b02      	cmp	r3, #2
 8011b4e:	d129      	bne.n	8011ba4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011b50:	683a      	ldr	r2, [r7, #0]
 8011b52:	68b9      	ldr	r1, [r7, #8]
 8011b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b56:	f000 fa0b 	bl	8011f70 <prvCopyDataToQueue>
 8011b5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d010      	beq.n	8011b86 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b66:	3324      	adds	r3, #36	; 0x24
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f001 f813 	bl	8012b94 <xTaskRemoveFromEventList>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d013      	beq.n	8011b9c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011b74:	4b3f      	ldr	r3, [pc, #252]	; (8011c74 <xQueueGenericSend+0x1f8>)
 8011b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b7a:	601a      	str	r2, [r3, #0]
 8011b7c:	f3bf 8f4f 	dsb	sy
 8011b80:	f3bf 8f6f 	isb	sy
 8011b84:	e00a      	b.n	8011b9c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d007      	beq.n	8011b9c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011b8c:	4b39      	ldr	r3, [pc, #228]	; (8011c74 <xQueueGenericSend+0x1f8>)
 8011b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b92:	601a      	str	r2, [r3, #0]
 8011b94:	f3bf 8f4f 	dsb	sy
 8011b98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011b9c:	f001 ffda 	bl	8013b54 <vPortExitCritical>
				return pdPASS;
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	e063      	b.n	8011c6c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d103      	bne.n	8011bb2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011baa:	f001 ffd3 	bl	8013b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	e05c      	b.n	8011c6c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d106      	bne.n	8011bc6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011bb8:	f107 0314 	add.w	r3, r7, #20
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f001 f8af 	bl	8012d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011bc6:	f001 ffc5 	bl	8013b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011bca:	f000 fd7b 	bl	80126c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011bce:	f001 ff91 	bl	8013af4 <vPortEnterCritical>
 8011bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011bd8:	b25b      	sxtb	r3, r3
 8011bda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bde:	d103      	bne.n	8011be8 <xQueueGenericSend+0x16c>
 8011be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be2:	2200      	movs	r2, #0
 8011be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011bee:	b25b      	sxtb	r3, r3
 8011bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011bf4:	d103      	bne.n	8011bfe <xQueueGenericSend+0x182>
 8011bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011bfe:	f001 ffa9 	bl	8013b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011c02:	1d3a      	adds	r2, r7, #4
 8011c04:	f107 0314 	add.w	r3, r7, #20
 8011c08:	4611      	mov	r1, r2
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f001 f89e 	bl	8012d4c <xTaskCheckForTimeOut>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d124      	bne.n	8011c60 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c18:	f000 faa2 	bl	8012160 <prvIsQueueFull>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d018      	beq.n	8011c54 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c24:	3310      	adds	r3, #16
 8011c26:	687a      	ldr	r2, [r7, #4]
 8011c28:	4611      	mov	r1, r2
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f000 ff26 	bl	8012a7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c32:	f000 fa2d 	bl	8012090 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011c36:	f000 fd53 	bl	80126e0 <xTaskResumeAll>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	f47f af7c 	bne.w	8011b3a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011c42:	4b0c      	ldr	r3, [pc, #48]	; (8011c74 <xQueueGenericSend+0x1f8>)
 8011c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c48:	601a      	str	r2, [r3, #0]
 8011c4a:	f3bf 8f4f 	dsb	sy
 8011c4e:	f3bf 8f6f 	isb	sy
 8011c52:	e772      	b.n	8011b3a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c56:	f000 fa1b 	bl	8012090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c5a:	f000 fd41 	bl	80126e0 <xTaskResumeAll>
 8011c5e:	e76c      	b.n	8011b3a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c62:	f000 fa15 	bl	8012090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c66:	f000 fd3b 	bl	80126e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011c6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3738      	adds	r7, #56	; 0x38
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}
 8011c74:	e000ed04 	.word	0xe000ed04

08011c78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b090      	sub	sp, #64	; 0x40
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	60f8      	str	r0, [r7, #12]
 8011c80:	60b9      	str	r1, [r7, #8]
 8011c82:	607a      	str	r2, [r7, #4]
 8011c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d10a      	bne.n	8011ca6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c94:	f383 8811 	msr	BASEPRI, r3
 8011c98:	f3bf 8f6f 	isb	sy
 8011c9c:	f3bf 8f4f 	dsb	sy
 8011ca0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011ca2:	bf00      	nop
 8011ca4:	e7fe      	b.n	8011ca4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d103      	bne.n	8011cb4 <xQueueGenericSendFromISR+0x3c>
 8011cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d101      	bne.n	8011cb8 <xQueueGenericSendFromISR+0x40>
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	e000      	b.n	8011cba <xQueueGenericSendFromISR+0x42>
 8011cb8:	2300      	movs	r3, #0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d10a      	bne.n	8011cd4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc2:	f383 8811 	msr	BASEPRI, r3
 8011cc6:	f3bf 8f6f 	isb	sy
 8011cca:	f3bf 8f4f 	dsb	sy
 8011cce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011cd0:	bf00      	nop
 8011cd2:	e7fe      	b.n	8011cd2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	2b02      	cmp	r3, #2
 8011cd8:	d103      	bne.n	8011ce2 <xQueueGenericSendFromISR+0x6a>
 8011cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cde:	2b01      	cmp	r3, #1
 8011ce0:	d101      	bne.n	8011ce6 <xQueueGenericSendFromISR+0x6e>
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	e000      	b.n	8011ce8 <xQueueGenericSendFromISR+0x70>
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d10a      	bne.n	8011d02 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf0:	f383 8811 	msr	BASEPRI, r3
 8011cf4:	f3bf 8f6f 	isb	sy
 8011cf8:	f3bf 8f4f 	dsb	sy
 8011cfc:	623b      	str	r3, [r7, #32]
}
 8011cfe:	bf00      	nop
 8011d00:	e7fe      	b.n	8011d00 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d02:	f001 ffd9 	bl	8013cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011d06:	f3ef 8211 	mrs	r2, BASEPRI
 8011d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0e:	f383 8811 	msr	BASEPRI, r3
 8011d12:	f3bf 8f6f 	isb	sy
 8011d16:	f3bf 8f4f 	dsb	sy
 8011d1a:	61fa      	str	r2, [r7, #28]
 8011d1c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011d1e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011d20:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d302      	bcc.n	8011d34 <xQueueGenericSendFromISR+0xbc>
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	2b02      	cmp	r3, #2
 8011d32:	d12f      	bne.n	8011d94 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d42:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011d44:	683a      	ldr	r2, [r7, #0]
 8011d46:	68b9      	ldr	r1, [r7, #8]
 8011d48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011d4a:	f000 f911 	bl	8011f70 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011d4e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011d52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d56:	d112      	bne.n	8011d7e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d016      	beq.n	8011d8e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d62:	3324      	adds	r3, #36	; 0x24
 8011d64:	4618      	mov	r0, r3
 8011d66:	f000 ff15 	bl	8012b94 <xTaskRemoveFromEventList>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d00e      	beq.n	8011d8e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d00b      	beq.n	8011d8e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2201      	movs	r2, #1
 8011d7a:	601a      	str	r2, [r3, #0]
 8011d7c:	e007      	b.n	8011d8e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011d7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011d82:	3301      	adds	r3, #1
 8011d84:	b2db      	uxtb	r3, r3
 8011d86:	b25a      	sxtb	r2, r3
 8011d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011d8e:	2301      	movs	r3, #1
 8011d90:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011d92:	e001      	b.n	8011d98 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011d94:	2300      	movs	r3, #0
 8011d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d9a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011da2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3740      	adds	r7, #64	; 0x40
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
	...

08011db0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b08c      	sub	sp, #48	; 0x30
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d10a      	bne.n	8011de0 <xQueueReceive+0x30>
	__asm volatile
 8011dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dce:	f383 8811 	msr	BASEPRI, r3
 8011dd2:	f3bf 8f6f 	isb	sy
 8011dd6:	f3bf 8f4f 	dsb	sy
 8011dda:	623b      	str	r3, [r7, #32]
}
 8011ddc:	bf00      	nop
 8011dde:	e7fe      	b.n	8011dde <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d103      	bne.n	8011dee <xQueueReceive+0x3e>
 8011de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d101      	bne.n	8011df2 <xQueueReceive+0x42>
 8011dee:	2301      	movs	r3, #1
 8011df0:	e000      	b.n	8011df4 <xQueueReceive+0x44>
 8011df2:	2300      	movs	r3, #0
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d10a      	bne.n	8011e0e <xQueueReceive+0x5e>
	__asm volatile
 8011df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dfc:	f383 8811 	msr	BASEPRI, r3
 8011e00:	f3bf 8f6f 	isb	sy
 8011e04:	f3bf 8f4f 	dsb	sy
 8011e08:	61fb      	str	r3, [r7, #28]
}
 8011e0a:	bf00      	nop
 8011e0c:	e7fe      	b.n	8011e0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e0e:	f001 f8e1 	bl	8012fd4 <xTaskGetSchedulerState>
 8011e12:	4603      	mov	r3, r0
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d102      	bne.n	8011e1e <xQueueReceive+0x6e>
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d101      	bne.n	8011e22 <xQueueReceive+0x72>
 8011e1e:	2301      	movs	r3, #1
 8011e20:	e000      	b.n	8011e24 <xQueueReceive+0x74>
 8011e22:	2300      	movs	r3, #0
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d10a      	bne.n	8011e3e <xQueueReceive+0x8e>
	__asm volatile
 8011e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e2c:	f383 8811 	msr	BASEPRI, r3
 8011e30:	f3bf 8f6f 	isb	sy
 8011e34:	f3bf 8f4f 	dsb	sy
 8011e38:	61bb      	str	r3, [r7, #24]
}
 8011e3a:	bf00      	nop
 8011e3c:	e7fe      	b.n	8011e3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011e3e:	f001 fe59 	bl	8013af4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d01f      	beq.n	8011e8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011e4e:	68b9      	ldr	r1, [r7, #8]
 8011e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e52:	f000 f8f7 	bl	8012044 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e58:	1e5a      	subs	r2, r3, #1
 8011e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e60:	691b      	ldr	r3, [r3, #16]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d00f      	beq.n	8011e86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e68:	3310      	adds	r3, #16
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f000 fe92 	bl	8012b94 <xTaskRemoveFromEventList>
 8011e70:	4603      	mov	r3, r0
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d007      	beq.n	8011e86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011e76:	4b3d      	ldr	r3, [pc, #244]	; (8011f6c <xQueueReceive+0x1bc>)
 8011e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e7c:	601a      	str	r2, [r3, #0]
 8011e7e:	f3bf 8f4f 	dsb	sy
 8011e82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011e86:	f001 fe65 	bl	8013b54 <vPortExitCritical>
				return pdPASS;
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	e069      	b.n	8011f62 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d103      	bne.n	8011e9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e94:	f001 fe5e 	bl	8013b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	e062      	b.n	8011f62 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d106      	bne.n	8011eb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ea2:	f107 0310 	add.w	r3, r7, #16
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f000 ff3a 	bl	8012d20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011eac:	2301      	movs	r3, #1
 8011eae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011eb0:	f001 fe50 	bl	8013b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011eb4:	f000 fc06 	bl	80126c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011eb8:	f001 fe1c 	bl	8013af4 <vPortEnterCritical>
 8011ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ec2:	b25b      	sxtb	r3, r3
 8011ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ec8:	d103      	bne.n	8011ed2 <xQueueReceive+0x122>
 8011eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ecc:	2200      	movs	r2, #0
 8011ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ed8:	b25b      	sxtb	r3, r3
 8011eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ede:	d103      	bne.n	8011ee8 <xQueueReceive+0x138>
 8011ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011ee8:	f001 fe34 	bl	8013b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011eec:	1d3a      	adds	r2, r7, #4
 8011eee:	f107 0310 	add.w	r3, r7, #16
 8011ef2:	4611      	mov	r1, r2
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f000 ff29 	bl	8012d4c <xTaskCheckForTimeOut>
 8011efa:	4603      	mov	r3, r0
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d123      	bne.n	8011f48 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f02:	f000 f917 	bl	8012134 <prvIsQueueEmpty>
 8011f06:	4603      	mov	r3, r0
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d017      	beq.n	8011f3c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f0e:	3324      	adds	r3, #36	; 0x24
 8011f10:	687a      	ldr	r2, [r7, #4]
 8011f12:	4611      	mov	r1, r2
 8011f14:	4618      	mov	r0, r3
 8011f16:	f000 fdb1 	bl	8012a7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f1c:	f000 f8b8 	bl	8012090 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011f20:	f000 fbde 	bl	80126e0 <xTaskResumeAll>
 8011f24:	4603      	mov	r3, r0
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d189      	bne.n	8011e3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011f2a:	4b10      	ldr	r3, [pc, #64]	; (8011f6c <xQueueReceive+0x1bc>)
 8011f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f30:	601a      	str	r2, [r3, #0]
 8011f32:	f3bf 8f4f 	dsb	sy
 8011f36:	f3bf 8f6f 	isb	sy
 8011f3a:	e780      	b.n	8011e3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f3e:	f000 f8a7 	bl	8012090 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011f42:	f000 fbcd 	bl	80126e0 <xTaskResumeAll>
 8011f46:	e77a      	b.n	8011e3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011f48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f4a:	f000 f8a1 	bl	8012090 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011f4e:	f000 fbc7 	bl	80126e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f54:	f000 f8ee 	bl	8012134 <prvIsQueueEmpty>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	f43f af6f 	beq.w	8011e3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011f60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011f62:	4618      	mov	r0, r3
 8011f64:	3730      	adds	r7, #48	; 0x30
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	e000ed04 	.word	0xe000ed04

08011f70 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b086      	sub	sp, #24
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	60f8      	str	r0, [r7, #12]
 8011f78:	60b9      	str	r1, [r7, #8]
 8011f7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f84:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d10d      	bne.n	8011faa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d14d      	bne.n	8012032 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	689b      	ldr	r3, [r3, #8]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f001 f838 	bl	8013010 <xTaskPriorityDisinherit>
 8011fa0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	609a      	str	r2, [r3, #8]
 8011fa8:	e043      	b.n	8012032 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d119      	bne.n	8011fe4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	6858      	ldr	r0, [r3, #4]
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fb8:	461a      	mov	r2, r3
 8011fba:	68b9      	ldr	r1, [r7, #8]
 8011fbc:	f002 f8d0 	bl	8014160 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	685a      	ldr	r2, [r3, #4]
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fc8:	441a      	add	r2, r3
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	685a      	ldr	r2, [r3, #4]
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	689b      	ldr	r3, [r3, #8]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d32b      	bcc.n	8012032 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	681a      	ldr	r2, [r3, #0]
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	605a      	str	r2, [r3, #4]
 8011fe2:	e026      	b.n	8012032 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	68d8      	ldr	r0, [r3, #12]
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fec:	461a      	mov	r2, r3
 8011fee:	68b9      	ldr	r1, [r7, #8]
 8011ff0:	f002 f8b6 	bl	8014160 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	68da      	ldr	r2, [r3, #12]
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ffc:	425b      	negs	r3, r3
 8011ffe:	441a      	add	r2, r3
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	68da      	ldr	r2, [r3, #12]
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	429a      	cmp	r2, r3
 801200e:	d207      	bcs.n	8012020 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	689a      	ldr	r2, [r3, #8]
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012018:	425b      	negs	r3, r3
 801201a:	441a      	add	r2, r3
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2b02      	cmp	r3, #2
 8012024:	d105      	bne.n	8012032 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012026:	693b      	ldr	r3, [r7, #16]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d002      	beq.n	8012032 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801202c:	693b      	ldr	r3, [r7, #16]
 801202e:	3b01      	subs	r3, #1
 8012030:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	1c5a      	adds	r2, r3, #1
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801203a:	697b      	ldr	r3, [r7, #20]
}
 801203c:	4618      	mov	r0, r3
 801203e:	3718      	adds	r7, #24
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}

08012044 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b082      	sub	sp, #8
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012052:	2b00      	cmp	r3, #0
 8012054:	d018      	beq.n	8012088 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	68da      	ldr	r2, [r3, #12]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801205e:	441a      	add	r2, r3
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	68da      	ldr	r2, [r3, #12]
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	689b      	ldr	r3, [r3, #8]
 801206c:	429a      	cmp	r2, r3
 801206e:	d303      	bcc.n	8012078 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	68d9      	ldr	r1, [r3, #12]
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012080:	461a      	mov	r2, r3
 8012082:	6838      	ldr	r0, [r7, #0]
 8012084:	f002 f86c 	bl	8014160 <memcpy>
	}
}
 8012088:	bf00      	nop
 801208a:	3708      	adds	r7, #8
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b084      	sub	sp, #16
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012098:	f001 fd2c 	bl	8013af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80120a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80120a4:	e011      	b.n	80120ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d012      	beq.n	80120d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	3324      	adds	r3, #36	; 0x24
 80120b2:	4618      	mov	r0, r3
 80120b4:	f000 fd6e 	bl	8012b94 <xTaskRemoveFromEventList>
 80120b8:	4603      	mov	r3, r0
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d001      	beq.n	80120c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80120be:	f000 fea7 	bl	8012e10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80120c2:	7bfb      	ldrb	r3, [r7, #15]
 80120c4:	3b01      	subs	r3, #1
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80120ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	dce9      	bgt.n	80120a6 <prvUnlockQueue+0x16>
 80120d2:	e000      	b.n	80120d6 <prvUnlockQueue+0x46>
					break;
 80120d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	22ff      	movs	r2, #255	; 0xff
 80120da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80120de:	f001 fd39 	bl	8013b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80120e2:	f001 fd07 	bl	8013af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80120ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80120ee:	e011      	b.n	8012114 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	691b      	ldr	r3, [r3, #16]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d012      	beq.n	801211e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	3310      	adds	r3, #16
 80120fc:	4618      	mov	r0, r3
 80120fe:	f000 fd49 	bl	8012b94 <xTaskRemoveFromEventList>
 8012102:	4603      	mov	r3, r0
 8012104:	2b00      	cmp	r3, #0
 8012106:	d001      	beq.n	801210c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012108:	f000 fe82 	bl	8012e10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801210c:	7bbb      	ldrb	r3, [r7, #14]
 801210e:	3b01      	subs	r3, #1
 8012110:	b2db      	uxtb	r3, r3
 8012112:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012118:	2b00      	cmp	r3, #0
 801211a:	dce9      	bgt.n	80120f0 <prvUnlockQueue+0x60>
 801211c:	e000      	b.n	8012120 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801211e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	22ff      	movs	r2, #255	; 0xff
 8012124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012128:	f001 fd14 	bl	8013b54 <vPortExitCritical>
}
 801212c:	bf00      	nop
 801212e:	3710      	adds	r7, #16
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}

08012134 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b084      	sub	sp, #16
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801213c:	f001 fcda 	bl	8013af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012144:	2b00      	cmp	r3, #0
 8012146:	d102      	bne.n	801214e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012148:	2301      	movs	r3, #1
 801214a:	60fb      	str	r3, [r7, #12]
 801214c:	e001      	b.n	8012152 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801214e:	2300      	movs	r3, #0
 8012150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012152:	f001 fcff 	bl	8013b54 <vPortExitCritical>

	return xReturn;
 8012156:	68fb      	ldr	r3, [r7, #12]
}
 8012158:	4618      	mov	r0, r3
 801215a:	3710      	adds	r7, #16
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b084      	sub	sp, #16
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012168:	f001 fcc4 	bl	8013af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012174:	429a      	cmp	r2, r3
 8012176:	d102      	bne.n	801217e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012178:	2301      	movs	r3, #1
 801217a:	60fb      	str	r3, [r7, #12]
 801217c:	e001      	b.n	8012182 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801217e:	2300      	movs	r3, #0
 8012180:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012182:	f001 fce7 	bl	8013b54 <vPortExitCritical>

	return xReturn;
 8012186:	68fb      	ldr	r3, [r7, #12]
}
 8012188:	4618      	mov	r0, r3
 801218a:	3710      	adds	r7, #16
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012190:	b480      	push	{r7}
 8012192:	b085      	sub	sp, #20
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801219a:	2300      	movs	r3, #0
 801219c:	60fb      	str	r3, [r7, #12]
 801219e:	e014      	b.n	80121ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80121a0:	4a0f      	ldr	r2, [pc, #60]	; (80121e0 <vQueueAddToRegistry+0x50>)
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d10b      	bne.n	80121c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80121ac:	490c      	ldr	r1, [pc, #48]	; (80121e0 <vQueueAddToRegistry+0x50>)
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	683a      	ldr	r2, [r7, #0]
 80121b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80121b6:	4a0a      	ldr	r2, [pc, #40]	; (80121e0 <vQueueAddToRegistry+0x50>)
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	00db      	lsls	r3, r3, #3
 80121bc:	4413      	add	r3, r2
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80121c2:	e006      	b.n	80121d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	3301      	adds	r3, #1
 80121c8:	60fb      	str	r3, [r7, #12]
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	2b07      	cmp	r3, #7
 80121ce:	d9e7      	bls.n	80121a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80121d0:	bf00      	nop
 80121d2:	bf00      	nop
 80121d4:	3714      	adds	r7, #20
 80121d6:	46bd      	mov	sp, r7
 80121d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121dc:	4770      	bx	lr
 80121de:	bf00      	nop
 80121e0:	24000f4c 	.word	0x24000f4c

080121e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b086      	sub	sp, #24
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	60f8      	str	r0, [r7, #12]
 80121ec:	60b9      	str	r1, [r7, #8]
 80121ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80121f4:	f001 fc7e 	bl	8013af4 <vPortEnterCritical>
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80121fe:	b25b      	sxtb	r3, r3
 8012200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012204:	d103      	bne.n	801220e <vQueueWaitForMessageRestricted+0x2a>
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	2200      	movs	r2, #0
 801220a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801220e:	697b      	ldr	r3, [r7, #20]
 8012210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012214:	b25b      	sxtb	r3, r3
 8012216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801221a:	d103      	bne.n	8012224 <vQueueWaitForMessageRestricted+0x40>
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	2200      	movs	r2, #0
 8012220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012224:	f001 fc96 	bl	8013b54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801222c:	2b00      	cmp	r3, #0
 801222e:	d106      	bne.n	801223e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	3324      	adds	r3, #36	; 0x24
 8012234:	687a      	ldr	r2, [r7, #4]
 8012236:	68b9      	ldr	r1, [r7, #8]
 8012238:	4618      	mov	r0, r3
 801223a:	f000 fc7f 	bl	8012b3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801223e:	6978      	ldr	r0, [r7, #20]
 8012240:	f7ff ff26 	bl	8012090 <prvUnlockQueue>
	}
 8012244:	bf00      	nop
 8012246:	3718      	adds	r7, #24
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}

0801224c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801224c:	b580      	push	{r7, lr}
 801224e:	b08e      	sub	sp, #56	; 0x38
 8012250:	af04      	add	r7, sp, #16
 8012252:	60f8      	str	r0, [r7, #12]
 8012254:	60b9      	str	r1, [r7, #8]
 8012256:	607a      	str	r2, [r7, #4]
 8012258:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801225c:	2b00      	cmp	r3, #0
 801225e:	d10a      	bne.n	8012276 <xTaskCreateStatic+0x2a>
	__asm volatile
 8012260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012264:	f383 8811 	msr	BASEPRI, r3
 8012268:	f3bf 8f6f 	isb	sy
 801226c:	f3bf 8f4f 	dsb	sy
 8012270:	623b      	str	r3, [r7, #32]
}
 8012272:	bf00      	nop
 8012274:	e7fe      	b.n	8012274 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012278:	2b00      	cmp	r3, #0
 801227a:	d10a      	bne.n	8012292 <xTaskCreateStatic+0x46>
	__asm volatile
 801227c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012280:	f383 8811 	msr	BASEPRI, r3
 8012284:	f3bf 8f6f 	isb	sy
 8012288:	f3bf 8f4f 	dsb	sy
 801228c:	61fb      	str	r3, [r7, #28]
}
 801228e:	bf00      	nop
 8012290:	e7fe      	b.n	8012290 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012292:	235c      	movs	r3, #92	; 0x5c
 8012294:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	2b5c      	cmp	r3, #92	; 0x5c
 801229a:	d00a      	beq.n	80122b2 <xTaskCreateStatic+0x66>
	__asm volatile
 801229c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122a0:	f383 8811 	msr	BASEPRI, r3
 80122a4:	f3bf 8f6f 	isb	sy
 80122a8:	f3bf 8f4f 	dsb	sy
 80122ac:	61bb      	str	r3, [r7, #24]
}
 80122ae:	bf00      	nop
 80122b0:	e7fe      	b.n	80122b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80122b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80122b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d01e      	beq.n	80122f8 <xTaskCreateStatic+0xac>
 80122ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d01b      	beq.n	80122f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80122c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80122c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80122ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122cc:	2202      	movs	r2, #2
 80122ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80122d2:	2300      	movs	r3, #0
 80122d4:	9303      	str	r3, [sp, #12]
 80122d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d8:	9302      	str	r3, [sp, #8]
 80122da:	f107 0314 	add.w	r3, r7, #20
 80122de:	9301      	str	r3, [sp, #4]
 80122e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e2:	9300      	str	r3, [sp, #0]
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	687a      	ldr	r2, [r7, #4]
 80122e8:	68b9      	ldr	r1, [r7, #8]
 80122ea:	68f8      	ldr	r0, [r7, #12]
 80122ec:	f000 f850 	bl	8012390 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80122f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122f2:	f000 f8dd 	bl	80124b0 <prvAddNewTaskToReadyList>
 80122f6:	e001      	b.n	80122fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80122f8:	2300      	movs	r3, #0
 80122fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80122fc:	697b      	ldr	r3, [r7, #20]
	}
 80122fe:	4618      	mov	r0, r3
 8012300:	3728      	adds	r7, #40	; 0x28
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}

08012306 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012306:	b580      	push	{r7, lr}
 8012308:	b08c      	sub	sp, #48	; 0x30
 801230a:	af04      	add	r7, sp, #16
 801230c:	60f8      	str	r0, [r7, #12]
 801230e:	60b9      	str	r1, [r7, #8]
 8012310:	603b      	str	r3, [r7, #0]
 8012312:	4613      	mov	r3, r2
 8012314:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012316:	88fb      	ldrh	r3, [r7, #6]
 8012318:	009b      	lsls	r3, r3, #2
 801231a:	4618      	mov	r0, r3
 801231c:	f001 fd0c 	bl	8013d38 <pvPortMalloc>
 8012320:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d00e      	beq.n	8012346 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012328:	205c      	movs	r0, #92	; 0x5c
 801232a:	f001 fd05 	bl	8013d38 <pvPortMalloc>
 801232e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012330:	69fb      	ldr	r3, [r7, #28]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d003      	beq.n	801233e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012336:	69fb      	ldr	r3, [r7, #28]
 8012338:	697a      	ldr	r2, [r7, #20]
 801233a:	631a      	str	r2, [r3, #48]	; 0x30
 801233c:	e005      	b.n	801234a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801233e:	6978      	ldr	r0, [r7, #20]
 8012340:	f001 fdc6 	bl	8013ed0 <vPortFree>
 8012344:	e001      	b.n	801234a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012346:	2300      	movs	r3, #0
 8012348:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801234a:	69fb      	ldr	r3, [r7, #28]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d017      	beq.n	8012380 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012350:	69fb      	ldr	r3, [r7, #28]
 8012352:	2200      	movs	r2, #0
 8012354:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012358:	88fa      	ldrh	r2, [r7, #6]
 801235a:	2300      	movs	r3, #0
 801235c:	9303      	str	r3, [sp, #12]
 801235e:	69fb      	ldr	r3, [r7, #28]
 8012360:	9302      	str	r3, [sp, #8]
 8012362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012364:	9301      	str	r3, [sp, #4]
 8012366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012368:	9300      	str	r3, [sp, #0]
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	68b9      	ldr	r1, [r7, #8]
 801236e:	68f8      	ldr	r0, [r7, #12]
 8012370:	f000 f80e 	bl	8012390 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012374:	69f8      	ldr	r0, [r7, #28]
 8012376:	f000 f89b 	bl	80124b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801237a:	2301      	movs	r3, #1
 801237c:	61bb      	str	r3, [r7, #24]
 801237e:	e002      	b.n	8012386 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012384:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012386:	69bb      	ldr	r3, [r7, #24]
	}
 8012388:	4618      	mov	r0, r3
 801238a:	3720      	adds	r7, #32
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b088      	sub	sp, #32
 8012394:	af00      	add	r7, sp, #0
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	60b9      	str	r1, [r7, #8]
 801239a:	607a      	str	r2, [r7, #4]
 801239c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	009b      	lsls	r3, r3, #2
 80123a6:	461a      	mov	r2, r3
 80123a8:	21a5      	movs	r1, #165	; 0xa5
 80123aa:	f001 fee7 	bl	801417c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80123ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80123b2:	6879      	ldr	r1, [r7, #4]
 80123b4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80123b8:	440b      	add	r3, r1
 80123ba:	009b      	lsls	r3, r3, #2
 80123bc:	4413      	add	r3, r2
 80123be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80123c0:	69bb      	ldr	r3, [r7, #24]
 80123c2:	f023 0307 	bic.w	r3, r3, #7
 80123c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80123c8:	69bb      	ldr	r3, [r7, #24]
 80123ca:	f003 0307 	and.w	r3, r3, #7
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d00a      	beq.n	80123e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80123d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d6:	f383 8811 	msr	BASEPRI, r3
 80123da:	f3bf 8f6f 	isb	sy
 80123de:	f3bf 8f4f 	dsb	sy
 80123e2:	617b      	str	r3, [r7, #20]
}
 80123e4:	bf00      	nop
 80123e6:	e7fe      	b.n	80123e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80123e8:	68bb      	ldr	r3, [r7, #8]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d01f      	beq.n	801242e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80123ee:	2300      	movs	r3, #0
 80123f0:	61fb      	str	r3, [r7, #28]
 80123f2:	e012      	b.n	801241a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80123f4:	68ba      	ldr	r2, [r7, #8]
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	4413      	add	r3, r2
 80123fa:	7819      	ldrb	r1, [r3, #0]
 80123fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123fe:	69fb      	ldr	r3, [r7, #28]
 8012400:	4413      	add	r3, r2
 8012402:	3334      	adds	r3, #52	; 0x34
 8012404:	460a      	mov	r2, r1
 8012406:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012408:	68ba      	ldr	r2, [r7, #8]
 801240a:	69fb      	ldr	r3, [r7, #28]
 801240c:	4413      	add	r3, r2
 801240e:	781b      	ldrb	r3, [r3, #0]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d006      	beq.n	8012422 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	3301      	adds	r3, #1
 8012418:	61fb      	str	r3, [r7, #28]
 801241a:	69fb      	ldr	r3, [r7, #28]
 801241c:	2b0f      	cmp	r3, #15
 801241e:	d9e9      	bls.n	80123f4 <prvInitialiseNewTask+0x64>
 8012420:	e000      	b.n	8012424 <prvInitialiseNewTask+0x94>
			{
				break;
 8012422:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012426:	2200      	movs	r2, #0
 8012428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801242c:	e003      	b.n	8012436 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012430:	2200      	movs	r2, #0
 8012432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012438:	2b37      	cmp	r3, #55	; 0x37
 801243a:	d901      	bls.n	8012440 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801243c:	2337      	movs	r3, #55	; 0x37
 801243e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012444:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801244a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801244e:	2200      	movs	r2, #0
 8012450:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012454:	3304      	adds	r3, #4
 8012456:	4618      	mov	r0, r3
 8012458:	f7ff f93e 	bl	80116d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801245e:	3318      	adds	r3, #24
 8012460:	4618      	mov	r0, r3
 8012462:	f7ff f939 	bl	80116d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801246a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801246c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801246e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012474:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801247a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247e:	2200      	movs	r2, #0
 8012480:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012484:	2200      	movs	r2, #0
 8012486:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801248a:	683a      	ldr	r2, [r7, #0]
 801248c:	68f9      	ldr	r1, [r7, #12]
 801248e:	69b8      	ldr	r0, [r7, #24]
 8012490:	f001 fa06 	bl	80138a0 <pxPortInitialiseStack>
 8012494:	4602      	mov	r2, r0
 8012496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012498:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801249a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801249c:	2b00      	cmp	r3, #0
 801249e:	d002      	beq.n	80124a6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80124a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80124a6:	bf00      	nop
 80124a8:	3720      	adds	r7, #32
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}
	...

080124b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b082      	sub	sp, #8
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80124b8:	f001 fb1c 	bl	8013af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80124bc:	4b2d      	ldr	r3, [pc, #180]	; (8012574 <prvAddNewTaskToReadyList+0xc4>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	3301      	adds	r3, #1
 80124c2:	4a2c      	ldr	r2, [pc, #176]	; (8012574 <prvAddNewTaskToReadyList+0xc4>)
 80124c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80124c6:	4b2c      	ldr	r3, [pc, #176]	; (8012578 <prvAddNewTaskToReadyList+0xc8>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d109      	bne.n	80124e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80124ce:	4a2a      	ldr	r2, [pc, #168]	; (8012578 <prvAddNewTaskToReadyList+0xc8>)
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80124d4:	4b27      	ldr	r3, [pc, #156]	; (8012574 <prvAddNewTaskToReadyList+0xc4>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	2b01      	cmp	r3, #1
 80124da:	d110      	bne.n	80124fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80124dc:	f000 fcbc 	bl	8012e58 <prvInitialiseTaskLists>
 80124e0:	e00d      	b.n	80124fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80124e2:	4b26      	ldr	r3, [pc, #152]	; (801257c <prvAddNewTaskToReadyList+0xcc>)
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d109      	bne.n	80124fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80124ea:	4b23      	ldr	r3, [pc, #140]	; (8012578 <prvAddNewTaskToReadyList+0xc8>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f4:	429a      	cmp	r2, r3
 80124f6:	d802      	bhi.n	80124fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80124f8:	4a1f      	ldr	r2, [pc, #124]	; (8012578 <prvAddNewTaskToReadyList+0xc8>)
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80124fe:	4b20      	ldr	r3, [pc, #128]	; (8012580 <prvAddNewTaskToReadyList+0xd0>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	3301      	adds	r3, #1
 8012504:	4a1e      	ldr	r2, [pc, #120]	; (8012580 <prvAddNewTaskToReadyList+0xd0>)
 8012506:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012508:	4b1d      	ldr	r3, [pc, #116]	; (8012580 <prvAddNewTaskToReadyList+0xd0>)
 801250a:	681a      	ldr	r2, [r3, #0]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012514:	4b1b      	ldr	r3, [pc, #108]	; (8012584 <prvAddNewTaskToReadyList+0xd4>)
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	429a      	cmp	r2, r3
 801251a:	d903      	bls.n	8012524 <prvAddNewTaskToReadyList+0x74>
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012520:	4a18      	ldr	r2, [pc, #96]	; (8012584 <prvAddNewTaskToReadyList+0xd4>)
 8012522:	6013      	str	r3, [r2, #0]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012528:	4613      	mov	r3, r2
 801252a:	009b      	lsls	r3, r3, #2
 801252c:	4413      	add	r3, r2
 801252e:	009b      	lsls	r3, r3, #2
 8012530:	4a15      	ldr	r2, [pc, #84]	; (8012588 <prvAddNewTaskToReadyList+0xd8>)
 8012532:	441a      	add	r2, r3
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	3304      	adds	r3, #4
 8012538:	4619      	mov	r1, r3
 801253a:	4610      	mov	r0, r2
 801253c:	f7ff f8d9 	bl	80116f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012540:	f001 fb08 	bl	8013b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012544:	4b0d      	ldr	r3, [pc, #52]	; (801257c <prvAddNewTaskToReadyList+0xcc>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d00e      	beq.n	801256a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801254c:	4b0a      	ldr	r3, [pc, #40]	; (8012578 <prvAddNewTaskToReadyList+0xc8>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012556:	429a      	cmp	r2, r3
 8012558:	d207      	bcs.n	801256a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801255a:	4b0c      	ldr	r3, [pc, #48]	; (801258c <prvAddNewTaskToReadyList+0xdc>)
 801255c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012560:	601a      	str	r2, [r3, #0]
 8012562:	f3bf 8f4f 	dsb	sy
 8012566:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801256a:	bf00      	nop
 801256c:	3708      	adds	r7, #8
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}
 8012572:	bf00      	nop
 8012574:	24001460 	.word	0x24001460
 8012578:	24000f8c 	.word	0x24000f8c
 801257c:	2400146c 	.word	0x2400146c
 8012580:	2400147c 	.word	0x2400147c
 8012584:	24001468 	.word	0x24001468
 8012588:	24000f90 	.word	0x24000f90
 801258c:	e000ed04 	.word	0xe000ed04

08012590 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012598:	2300      	movs	r3, #0
 801259a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d017      	beq.n	80125d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80125a2:	4b13      	ldr	r3, [pc, #76]	; (80125f0 <vTaskDelay+0x60>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d00a      	beq.n	80125c0 <vTaskDelay+0x30>
	__asm volatile
 80125aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ae:	f383 8811 	msr	BASEPRI, r3
 80125b2:	f3bf 8f6f 	isb	sy
 80125b6:	f3bf 8f4f 	dsb	sy
 80125ba:	60bb      	str	r3, [r7, #8]
}
 80125bc:	bf00      	nop
 80125be:	e7fe      	b.n	80125be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80125c0:	f000 f880 	bl	80126c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80125c4:	2100      	movs	r1, #0
 80125c6:	6878      	ldr	r0, [r7, #4]
 80125c8:	f000 fda8 	bl	801311c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80125cc:	f000 f888 	bl	80126e0 <xTaskResumeAll>
 80125d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d107      	bne.n	80125e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80125d8:	4b06      	ldr	r3, [pc, #24]	; (80125f4 <vTaskDelay+0x64>)
 80125da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125de:	601a      	str	r2, [r3, #0]
 80125e0:	f3bf 8f4f 	dsb	sy
 80125e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80125e8:	bf00      	nop
 80125ea:	3710      	adds	r7, #16
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}
 80125f0:	24001488 	.word	0x24001488
 80125f4:	e000ed04 	.word	0xe000ed04

080125f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b08a      	sub	sp, #40	; 0x28
 80125fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80125fe:	2300      	movs	r3, #0
 8012600:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012602:	2300      	movs	r3, #0
 8012604:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012606:	463a      	mov	r2, r7
 8012608:	1d39      	adds	r1, r7, #4
 801260a:	f107 0308 	add.w	r3, r7, #8
 801260e:	4618      	mov	r0, r3
 8012610:	f7fe fe20 	bl	8011254 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012614:	6839      	ldr	r1, [r7, #0]
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	68ba      	ldr	r2, [r7, #8]
 801261a:	9202      	str	r2, [sp, #8]
 801261c:	9301      	str	r3, [sp, #4]
 801261e:	2300      	movs	r3, #0
 8012620:	9300      	str	r3, [sp, #0]
 8012622:	2300      	movs	r3, #0
 8012624:	460a      	mov	r2, r1
 8012626:	4921      	ldr	r1, [pc, #132]	; (80126ac <vTaskStartScheduler+0xb4>)
 8012628:	4821      	ldr	r0, [pc, #132]	; (80126b0 <vTaskStartScheduler+0xb8>)
 801262a:	f7ff fe0f 	bl	801224c <xTaskCreateStatic>
 801262e:	4603      	mov	r3, r0
 8012630:	4a20      	ldr	r2, [pc, #128]	; (80126b4 <vTaskStartScheduler+0xbc>)
 8012632:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012634:	4b1f      	ldr	r3, [pc, #124]	; (80126b4 <vTaskStartScheduler+0xbc>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d002      	beq.n	8012642 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801263c:	2301      	movs	r3, #1
 801263e:	617b      	str	r3, [r7, #20]
 8012640:	e001      	b.n	8012646 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012642:	2300      	movs	r3, #0
 8012644:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	2b01      	cmp	r3, #1
 801264a:	d102      	bne.n	8012652 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801264c:	f000 fdba 	bl	80131c4 <xTimerCreateTimerTask>
 8012650:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012652:	697b      	ldr	r3, [r7, #20]
 8012654:	2b01      	cmp	r3, #1
 8012656:	d116      	bne.n	8012686 <vTaskStartScheduler+0x8e>
	__asm volatile
 8012658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801265c:	f383 8811 	msr	BASEPRI, r3
 8012660:	f3bf 8f6f 	isb	sy
 8012664:	f3bf 8f4f 	dsb	sy
 8012668:	613b      	str	r3, [r7, #16]
}
 801266a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801266c:	4b12      	ldr	r3, [pc, #72]	; (80126b8 <vTaskStartScheduler+0xc0>)
 801266e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012672:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012674:	4b11      	ldr	r3, [pc, #68]	; (80126bc <vTaskStartScheduler+0xc4>)
 8012676:	2201      	movs	r2, #1
 8012678:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801267a:	4b11      	ldr	r3, [pc, #68]	; (80126c0 <vTaskStartScheduler+0xc8>)
 801267c:	2200      	movs	r2, #0
 801267e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012680:	f001 f996 	bl	80139b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012684:	e00e      	b.n	80126a4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801268c:	d10a      	bne.n	80126a4 <vTaskStartScheduler+0xac>
	__asm volatile
 801268e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012692:	f383 8811 	msr	BASEPRI, r3
 8012696:	f3bf 8f6f 	isb	sy
 801269a:	f3bf 8f4f 	dsb	sy
 801269e:	60fb      	str	r3, [r7, #12]
}
 80126a0:	bf00      	nop
 80126a2:	e7fe      	b.n	80126a2 <vTaskStartScheduler+0xaa>
}
 80126a4:	bf00      	nop
 80126a6:	3718      	adds	r7, #24
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}
 80126ac:	08014dc8 	.word	0x08014dc8
 80126b0:	08012e29 	.word	0x08012e29
 80126b4:	24001484 	.word	0x24001484
 80126b8:	24001480 	.word	0x24001480
 80126bc:	2400146c 	.word	0x2400146c
 80126c0:	24001464 	.word	0x24001464

080126c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80126c4:	b480      	push	{r7}
 80126c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80126c8:	4b04      	ldr	r3, [pc, #16]	; (80126dc <vTaskSuspendAll+0x18>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	3301      	adds	r3, #1
 80126ce:	4a03      	ldr	r2, [pc, #12]	; (80126dc <vTaskSuspendAll+0x18>)
 80126d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80126d2:	bf00      	nop
 80126d4:	46bd      	mov	sp, r7
 80126d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126da:	4770      	bx	lr
 80126dc:	24001488 	.word	0x24001488

080126e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80126e6:	2300      	movs	r3, #0
 80126e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80126ea:	2300      	movs	r3, #0
 80126ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80126ee:	4b42      	ldr	r3, [pc, #264]	; (80127f8 <xTaskResumeAll+0x118>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d10a      	bne.n	801270c <xTaskResumeAll+0x2c>
	__asm volatile
 80126f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126fa:	f383 8811 	msr	BASEPRI, r3
 80126fe:	f3bf 8f6f 	isb	sy
 8012702:	f3bf 8f4f 	dsb	sy
 8012706:	603b      	str	r3, [r7, #0]
}
 8012708:	bf00      	nop
 801270a:	e7fe      	b.n	801270a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801270c:	f001 f9f2 	bl	8013af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012710:	4b39      	ldr	r3, [pc, #228]	; (80127f8 <xTaskResumeAll+0x118>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	3b01      	subs	r3, #1
 8012716:	4a38      	ldr	r2, [pc, #224]	; (80127f8 <xTaskResumeAll+0x118>)
 8012718:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801271a:	4b37      	ldr	r3, [pc, #220]	; (80127f8 <xTaskResumeAll+0x118>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d162      	bne.n	80127e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012722:	4b36      	ldr	r3, [pc, #216]	; (80127fc <xTaskResumeAll+0x11c>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d05e      	beq.n	80127e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801272a:	e02f      	b.n	801278c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801272c:	4b34      	ldr	r3, [pc, #208]	; (8012800 <xTaskResumeAll+0x120>)
 801272e:	68db      	ldr	r3, [r3, #12]
 8012730:	68db      	ldr	r3, [r3, #12]
 8012732:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	3318      	adds	r3, #24
 8012738:	4618      	mov	r0, r3
 801273a:	f7ff f837 	bl	80117ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	3304      	adds	r3, #4
 8012742:	4618      	mov	r0, r3
 8012744:	f7ff f832 	bl	80117ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801274c:	4b2d      	ldr	r3, [pc, #180]	; (8012804 <xTaskResumeAll+0x124>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	429a      	cmp	r2, r3
 8012752:	d903      	bls.n	801275c <xTaskResumeAll+0x7c>
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012758:	4a2a      	ldr	r2, [pc, #168]	; (8012804 <xTaskResumeAll+0x124>)
 801275a:	6013      	str	r3, [r2, #0]
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012760:	4613      	mov	r3, r2
 8012762:	009b      	lsls	r3, r3, #2
 8012764:	4413      	add	r3, r2
 8012766:	009b      	lsls	r3, r3, #2
 8012768:	4a27      	ldr	r2, [pc, #156]	; (8012808 <xTaskResumeAll+0x128>)
 801276a:	441a      	add	r2, r3
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	3304      	adds	r3, #4
 8012770:	4619      	mov	r1, r3
 8012772:	4610      	mov	r0, r2
 8012774:	f7fe ffbd 	bl	80116f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801277c:	4b23      	ldr	r3, [pc, #140]	; (801280c <xTaskResumeAll+0x12c>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012782:	429a      	cmp	r2, r3
 8012784:	d302      	bcc.n	801278c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012786:	4b22      	ldr	r3, [pc, #136]	; (8012810 <xTaskResumeAll+0x130>)
 8012788:	2201      	movs	r2, #1
 801278a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801278c:	4b1c      	ldr	r3, [pc, #112]	; (8012800 <xTaskResumeAll+0x120>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d1cb      	bne.n	801272c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d001      	beq.n	801279e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801279a:	f000 fbfb 	bl	8012f94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801279e:	4b1d      	ldr	r3, [pc, #116]	; (8012814 <xTaskResumeAll+0x134>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d010      	beq.n	80127cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80127aa:	f000 f847 	bl	801283c <xTaskIncrementTick>
 80127ae:	4603      	mov	r3, r0
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d002      	beq.n	80127ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80127b4:	4b16      	ldr	r3, [pc, #88]	; (8012810 <xTaskResumeAll+0x130>)
 80127b6:	2201      	movs	r2, #1
 80127b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	3b01      	subs	r3, #1
 80127be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d1f1      	bne.n	80127aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80127c6:	4b13      	ldr	r3, [pc, #76]	; (8012814 <xTaskResumeAll+0x134>)
 80127c8:	2200      	movs	r2, #0
 80127ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80127cc:	4b10      	ldr	r3, [pc, #64]	; (8012810 <xTaskResumeAll+0x130>)
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d009      	beq.n	80127e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80127d4:	2301      	movs	r3, #1
 80127d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80127d8:	4b0f      	ldr	r3, [pc, #60]	; (8012818 <xTaskResumeAll+0x138>)
 80127da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127de:	601a      	str	r2, [r3, #0]
 80127e0:	f3bf 8f4f 	dsb	sy
 80127e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80127e8:	f001 f9b4 	bl	8013b54 <vPortExitCritical>

	return xAlreadyYielded;
 80127ec:	68bb      	ldr	r3, [r7, #8]
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3710      	adds	r7, #16
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
 80127f6:	bf00      	nop
 80127f8:	24001488 	.word	0x24001488
 80127fc:	24001460 	.word	0x24001460
 8012800:	24001420 	.word	0x24001420
 8012804:	24001468 	.word	0x24001468
 8012808:	24000f90 	.word	0x24000f90
 801280c:	24000f8c 	.word	0x24000f8c
 8012810:	24001474 	.word	0x24001474
 8012814:	24001470 	.word	0x24001470
 8012818:	e000ed04 	.word	0xe000ed04

0801281c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012822:	4b05      	ldr	r3, [pc, #20]	; (8012838 <xTaskGetTickCount+0x1c>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012828:	687b      	ldr	r3, [r7, #4]
}
 801282a:	4618      	mov	r0, r3
 801282c:	370c      	adds	r7, #12
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop
 8012838:	24001464 	.word	0x24001464

0801283c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b086      	sub	sp, #24
 8012840:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012842:	2300      	movs	r3, #0
 8012844:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012846:	4b53      	ldr	r3, [pc, #332]	; (8012994 <xTaskIncrementTick+0x158>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	2b00      	cmp	r3, #0
 801284c:	f040 8095 	bne.w	801297a <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012850:	4b51      	ldr	r3, [pc, #324]	; (8012998 <xTaskIncrementTick+0x15c>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	3301      	adds	r3, #1
 8012856:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012858:	4a4f      	ldr	r2, [pc, #316]	; (8012998 <xTaskIncrementTick+0x15c>)
 801285a:	693b      	ldr	r3, [r7, #16]
 801285c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d120      	bne.n	80128a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012864:	4b4d      	ldr	r3, [pc, #308]	; (801299c <xTaskIncrementTick+0x160>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d00a      	beq.n	8012884 <xTaskIncrementTick+0x48>
	__asm volatile
 801286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012872:	f383 8811 	msr	BASEPRI, r3
 8012876:	f3bf 8f6f 	isb	sy
 801287a:	f3bf 8f4f 	dsb	sy
 801287e:	603b      	str	r3, [r7, #0]
}
 8012880:	bf00      	nop
 8012882:	e7fe      	b.n	8012882 <xTaskIncrementTick+0x46>
 8012884:	4b45      	ldr	r3, [pc, #276]	; (801299c <xTaskIncrementTick+0x160>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	60fb      	str	r3, [r7, #12]
 801288a:	4b45      	ldr	r3, [pc, #276]	; (80129a0 <xTaskIncrementTick+0x164>)
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	4a43      	ldr	r2, [pc, #268]	; (801299c <xTaskIncrementTick+0x160>)
 8012890:	6013      	str	r3, [r2, #0]
 8012892:	4a43      	ldr	r2, [pc, #268]	; (80129a0 <xTaskIncrementTick+0x164>)
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	6013      	str	r3, [r2, #0]
 8012898:	4b42      	ldr	r3, [pc, #264]	; (80129a4 <xTaskIncrementTick+0x168>)
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	3301      	adds	r3, #1
 801289e:	4a41      	ldr	r2, [pc, #260]	; (80129a4 <xTaskIncrementTick+0x168>)
 80128a0:	6013      	str	r3, [r2, #0]
 80128a2:	f000 fb77 	bl	8012f94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80128a6:	4b40      	ldr	r3, [pc, #256]	; (80129a8 <xTaskIncrementTick+0x16c>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	693a      	ldr	r2, [r7, #16]
 80128ac:	429a      	cmp	r2, r3
 80128ae:	d349      	bcc.n	8012944 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128b0:	4b3a      	ldr	r3, [pc, #232]	; (801299c <xTaskIncrementTick+0x160>)
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d104      	bne.n	80128c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80128ba:	4b3b      	ldr	r3, [pc, #236]	; (80129a8 <xTaskIncrementTick+0x16c>)
 80128bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128c0:	601a      	str	r2, [r3, #0]
					break;
 80128c2:	e03f      	b.n	8012944 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128c4:	4b35      	ldr	r3, [pc, #212]	; (801299c <xTaskIncrementTick+0x160>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	68db      	ldr	r3, [r3, #12]
 80128ca:	68db      	ldr	r3, [r3, #12]
 80128cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	685b      	ldr	r3, [r3, #4]
 80128d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80128d4:	693a      	ldr	r2, [r7, #16]
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	429a      	cmp	r2, r3
 80128da:	d203      	bcs.n	80128e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80128dc:	4a32      	ldr	r2, [pc, #200]	; (80129a8 <xTaskIncrementTick+0x16c>)
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80128e2:	e02f      	b.n	8012944 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	3304      	adds	r3, #4
 80128e8:	4618      	mov	r0, r3
 80128ea:	f7fe ff5f 	bl	80117ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d004      	beq.n	8012900 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	3318      	adds	r3, #24
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fe ff56 	bl	80117ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012904:	4b29      	ldr	r3, [pc, #164]	; (80129ac <xTaskIncrementTick+0x170>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	429a      	cmp	r2, r3
 801290a:	d903      	bls.n	8012914 <xTaskIncrementTick+0xd8>
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012910:	4a26      	ldr	r2, [pc, #152]	; (80129ac <xTaskIncrementTick+0x170>)
 8012912:	6013      	str	r3, [r2, #0]
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012918:	4613      	mov	r3, r2
 801291a:	009b      	lsls	r3, r3, #2
 801291c:	4413      	add	r3, r2
 801291e:	009b      	lsls	r3, r3, #2
 8012920:	4a23      	ldr	r2, [pc, #140]	; (80129b0 <xTaskIncrementTick+0x174>)
 8012922:	441a      	add	r2, r3
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	3304      	adds	r3, #4
 8012928:	4619      	mov	r1, r3
 801292a:	4610      	mov	r0, r2
 801292c:	f7fe fee1 	bl	80116f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012934:	4b1f      	ldr	r3, [pc, #124]	; (80129b4 <xTaskIncrementTick+0x178>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801293a:	429a      	cmp	r2, r3
 801293c:	d3b8      	bcc.n	80128b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801293e:	2301      	movs	r3, #1
 8012940:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012942:	e7b5      	b.n	80128b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012944:	4b1b      	ldr	r3, [pc, #108]	; (80129b4 <xTaskIncrementTick+0x178>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801294a:	4919      	ldr	r1, [pc, #100]	; (80129b0 <xTaskIncrementTick+0x174>)
 801294c:	4613      	mov	r3, r2
 801294e:	009b      	lsls	r3, r3, #2
 8012950:	4413      	add	r3, r2
 8012952:	009b      	lsls	r3, r3, #2
 8012954:	440b      	add	r3, r1
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	2b01      	cmp	r3, #1
 801295a:	d901      	bls.n	8012960 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801295c:	2301      	movs	r3, #1
 801295e:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8012960:	4b15      	ldr	r3, [pc, #84]	; (80129b8 <xTaskIncrementTick+0x17c>)
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d101      	bne.n	801296c <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8012968:	f7ee f9f6 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801296c:	4b13      	ldr	r3, [pc, #76]	; (80129bc <xTaskIncrementTick+0x180>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d009      	beq.n	8012988 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8012974:	2301      	movs	r3, #1
 8012976:	617b      	str	r3, [r7, #20]
 8012978:	e006      	b.n	8012988 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801297a:	4b0f      	ldr	r3, [pc, #60]	; (80129b8 <xTaskIncrementTick+0x17c>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	3301      	adds	r3, #1
 8012980:	4a0d      	ldr	r2, [pc, #52]	; (80129b8 <xTaskIncrementTick+0x17c>)
 8012982:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8012984:	f7ee f9e8 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8012988:	697b      	ldr	r3, [r7, #20]
}
 801298a:	4618      	mov	r0, r3
 801298c:	3718      	adds	r7, #24
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}
 8012992:	bf00      	nop
 8012994:	24001488 	.word	0x24001488
 8012998:	24001464 	.word	0x24001464
 801299c:	24001418 	.word	0x24001418
 80129a0:	2400141c 	.word	0x2400141c
 80129a4:	24001478 	.word	0x24001478
 80129a8:	24001480 	.word	0x24001480
 80129ac:	24001468 	.word	0x24001468
 80129b0:	24000f90 	.word	0x24000f90
 80129b4:	24000f8c 	.word	0x24000f8c
 80129b8:	24001470 	.word	0x24001470
 80129bc:	24001474 	.word	0x24001474

080129c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80129c0:	b480      	push	{r7}
 80129c2:	b085      	sub	sp, #20
 80129c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80129c6:	4b28      	ldr	r3, [pc, #160]	; (8012a68 <vTaskSwitchContext+0xa8>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d003      	beq.n	80129d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80129ce:	4b27      	ldr	r3, [pc, #156]	; (8012a6c <vTaskSwitchContext+0xac>)
 80129d0:	2201      	movs	r2, #1
 80129d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80129d4:	e041      	b.n	8012a5a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80129d6:	4b25      	ldr	r3, [pc, #148]	; (8012a6c <vTaskSwitchContext+0xac>)
 80129d8:	2200      	movs	r2, #0
 80129da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129dc:	4b24      	ldr	r3, [pc, #144]	; (8012a70 <vTaskSwitchContext+0xb0>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	60fb      	str	r3, [r7, #12]
 80129e2:	e010      	b.n	8012a06 <vTaskSwitchContext+0x46>
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d10a      	bne.n	8012a00 <vTaskSwitchContext+0x40>
	__asm volatile
 80129ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ee:	f383 8811 	msr	BASEPRI, r3
 80129f2:	f3bf 8f6f 	isb	sy
 80129f6:	f3bf 8f4f 	dsb	sy
 80129fa:	607b      	str	r3, [r7, #4]
}
 80129fc:	bf00      	nop
 80129fe:	e7fe      	b.n	80129fe <vTaskSwitchContext+0x3e>
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	3b01      	subs	r3, #1
 8012a04:	60fb      	str	r3, [r7, #12]
 8012a06:	491b      	ldr	r1, [pc, #108]	; (8012a74 <vTaskSwitchContext+0xb4>)
 8012a08:	68fa      	ldr	r2, [r7, #12]
 8012a0a:	4613      	mov	r3, r2
 8012a0c:	009b      	lsls	r3, r3, #2
 8012a0e:	4413      	add	r3, r2
 8012a10:	009b      	lsls	r3, r3, #2
 8012a12:	440b      	add	r3, r1
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d0e4      	beq.n	80129e4 <vTaskSwitchContext+0x24>
 8012a1a:	68fa      	ldr	r2, [r7, #12]
 8012a1c:	4613      	mov	r3, r2
 8012a1e:	009b      	lsls	r3, r3, #2
 8012a20:	4413      	add	r3, r2
 8012a22:	009b      	lsls	r3, r3, #2
 8012a24:	4a13      	ldr	r2, [pc, #76]	; (8012a74 <vTaskSwitchContext+0xb4>)
 8012a26:	4413      	add	r3, r2
 8012a28:	60bb      	str	r3, [r7, #8]
 8012a2a:	68bb      	ldr	r3, [r7, #8]
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	685a      	ldr	r2, [r3, #4]
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	605a      	str	r2, [r3, #4]
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	685a      	ldr	r2, [r3, #4]
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	3308      	adds	r3, #8
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d104      	bne.n	8012a4a <vTaskSwitchContext+0x8a>
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	685a      	ldr	r2, [r3, #4]
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	605a      	str	r2, [r3, #4]
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	685b      	ldr	r3, [r3, #4]
 8012a4e:	68db      	ldr	r3, [r3, #12]
 8012a50:	4a09      	ldr	r2, [pc, #36]	; (8012a78 <vTaskSwitchContext+0xb8>)
 8012a52:	6013      	str	r3, [r2, #0]
 8012a54:	4a06      	ldr	r2, [pc, #24]	; (8012a70 <vTaskSwitchContext+0xb0>)
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	6013      	str	r3, [r2, #0]
}
 8012a5a:	bf00      	nop
 8012a5c:	3714      	adds	r7, #20
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a64:	4770      	bx	lr
 8012a66:	bf00      	nop
 8012a68:	24001488 	.word	0x24001488
 8012a6c:	24001474 	.word	0x24001474
 8012a70:	24001468 	.word	0x24001468
 8012a74:	24000f90 	.word	0x24000f90
 8012a78:	24000f8c 	.word	0x24000f8c

08012a7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b084      	sub	sp, #16
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
 8012a84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d10a      	bne.n	8012aa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a90:	f383 8811 	msr	BASEPRI, r3
 8012a94:	f3bf 8f6f 	isb	sy
 8012a98:	f3bf 8f4f 	dsb	sy
 8012a9c:	60fb      	str	r3, [r7, #12]
}
 8012a9e:	bf00      	nop
 8012aa0:	e7fe      	b.n	8012aa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012aa2:	4b07      	ldr	r3, [pc, #28]	; (8012ac0 <vTaskPlaceOnEventList+0x44>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	3318      	adds	r3, #24
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	6878      	ldr	r0, [r7, #4]
 8012aac:	f7fe fe45 	bl	801173a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012ab0:	2101      	movs	r1, #1
 8012ab2:	6838      	ldr	r0, [r7, #0]
 8012ab4:	f000 fb32 	bl	801311c <prvAddCurrentTaskToDelayedList>
}
 8012ab8:	bf00      	nop
 8012aba:	3710      	adds	r7, #16
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}
 8012ac0:	24000f8c 	.word	0x24000f8c

08012ac4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b086      	sub	sp, #24
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	60b9      	str	r1, [r7, #8]
 8012ace:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d10a      	bne.n	8012aec <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8012ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ada:	f383 8811 	msr	BASEPRI, r3
 8012ade:	f3bf 8f6f 	isb	sy
 8012ae2:	f3bf 8f4f 	dsb	sy
 8012ae6:	617b      	str	r3, [r7, #20]
}
 8012ae8:	bf00      	nop
 8012aea:	e7fe      	b.n	8012aea <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8012aec:	4b11      	ldr	r3, [pc, #68]	; (8012b34 <vTaskPlaceOnUnorderedEventList+0x70>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d10a      	bne.n	8012b0a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8012af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af8:	f383 8811 	msr	BASEPRI, r3
 8012afc:	f3bf 8f6f 	isb	sy
 8012b00:	f3bf 8f4f 	dsb	sy
 8012b04:	613b      	str	r3, [r7, #16]
}
 8012b06:	bf00      	nop
 8012b08:	e7fe      	b.n	8012b08 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012b0a:	4b0b      	ldr	r3, [pc, #44]	; (8012b38 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	68ba      	ldr	r2, [r7, #8]
 8012b10:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8012b14:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012b16:	4b08      	ldr	r3, [pc, #32]	; (8012b38 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	3318      	adds	r3, #24
 8012b1c:	4619      	mov	r1, r3
 8012b1e:	68f8      	ldr	r0, [r7, #12]
 8012b20:	f7fe fde7 	bl	80116f2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012b24:	2101      	movs	r1, #1
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f000 faf8 	bl	801311c <prvAddCurrentTaskToDelayedList>
}
 8012b2c:	bf00      	nop
 8012b2e:	3718      	adds	r7, #24
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}
 8012b34:	24001488 	.word	0x24001488
 8012b38:	24000f8c 	.word	0x24000f8c

08012b3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b086      	sub	sp, #24
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	60f8      	str	r0, [r7, #12]
 8012b44:	60b9      	str	r1, [r7, #8]
 8012b46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d10a      	bne.n	8012b64 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8012b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b52:	f383 8811 	msr	BASEPRI, r3
 8012b56:	f3bf 8f6f 	isb	sy
 8012b5a:	f3bf 8f4f 	dsb	sy
 8012b5e:	617b      	str	r3, [r7, #20]
}
 8012b60:	bf00      	nop
 8012b62:	e7fe      	b.n	8012b62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012b64:	4b0a      	ldr	r3, [pc, #40]	; (8012b90 <vTaskPlaceOnEventListRestricted+0x54>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	3318      	adds	r3, #24
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	68f8      	ldr	r0, [r7, #12]
 8012b6e:	f7fe fdc0 	bl	80116f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d002      	beq.n	8012b7e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8012b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b7c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012b7e:	6879      	ldr	r1, [r7, #4]
 8012b80:	68b8      	ldr	r0, [r7, #8]
 8012b82:	f000 facb 	bl	801311c <prvAddCurrentTaskToDelayedList>
	}
 8012b86:	bf00      	nop
 8012b88:	3718      	adds	r7, #24
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}
 8012b8e:	bf00      	nop
 8012b90:	24000f8c 	.word	0x24000f8c

08012b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b086      	sub	sp, #24
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	68db      	ldr	r3, [r3, #12]
 8012ba0:	68db      	ldr	r3, [r3, #12]
 8012ba2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d10a      	bne.n	8012bc0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bae:	f383 8811 	msr	BASEPRI, r3
 8012bb2:	f3bf 8f6f 	isb	sy
 8012bb6:	f3bf 8f4f 	dsb	sy
 8012bba:	60fb      	str	r3, [r7, #12]
}
 8012bbc:	bf00      	nop
 8012bbe:	e7fe      	b.n	8012bbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012bc0:	693b      	ldr	r3, [r7, #16]
 8012bc2:	3318      	adds	r3, #24
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7fe fdf1 	bl	80117ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012bca:	4b1e      	ldr	r3, [pc, #120]	; (8012c44 <xTaskRemoveFromEventList+0xb0>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d11d      	bne.n	8012c0e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012bd2:	693b      	ldr	r3, [r7, #16]
 8012bd4:	3304      	adds	r3, #4
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7fe fde8 	bl	80117ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012be0:	4b19      	ldr	r3, [pc, #100]	; (8012c48 <xTaskRemoveFromEventList+0xb4>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	429a      	cmp	r2, r3
 8012be6:	d903      	bls.n	8012bf0 <xTaskRemoveFromEventList+0x5c>
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bec:	4a16      	ldr	r2, [pc, #88]	; (8012c48 <xTaskRemoveFromEventList+0xb4>)
 8012bee:	6013      	str	r3, [r2, #0]
 8012bf0:	693b      	ldr	r3, [r7, #16]
 8012bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	009b      	lsls	r3, r3, #2
 8012bf8:	4413      	add	r3, r2
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	4a13      	ldr	r2, [pc, #76]	; (8012c4c <xTaskRemoveFromEventList+0xb8>)
 8012bfe:	441a      	add	r2, r3
 8012c00:	693b      	ldr	r3, [r7, #16]
 8012c02:	3304      	adds	r3, #4
 8012c04:	4619      	mov	r1, r3
 8012c06:	4610      	mov	r0, r2
 8012c08:	f7fe fd73 	bl	80116f2 <vListInsertEnd>
 8012c0c:	e005      	b.n	8012c1a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012c0e:	693b      	ldr	r3, [r7, #16]
 8012c10:	3318      	adds	r3, #24
 8012c12:	4619      	mov	r1, r3
 8012c14:	480e      	ldr	r0, [pc, #56]	; (8012c50 <xTaskRemoveFromEventList+0xbc>)
 8012c16:	f7fe fd6c 	bl	80116f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c1e:	4b0d      	ldr	r3, [pc, #52]	; (8012c54 <xTaskRemoveFromEventList+0xc0>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d905      	bls.n	8012c34 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012c28:	2301      	movs	r3, #1
 8012c2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012c2c:	4b0a      	ldr	r3, [pc, #40]	; (8012c58 <xTaskRemoveFromEventList+0xc4>)
 8012c2e:	2201      	movs	r2, #1
 8012c30:	601a      	str	r2, [r3, #0]
 8012c32:	e001      	b.n	8012c38 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012c34:	2300      	movs	r3, #0
 8012c36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012c38:	697b      	ldr	r3, [r7, #20]
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3718      	adds	r7, #24
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	bd80      	pop	{r7, pc}
 8012c42:	bf00      	nop
 8012c44:	24001488 	.word	0x24001488
 8012c48:	24001468 	.word	0x24001468
 8012c4c:	24000f90 	.word	0x24000f90
 8012c50:	24001420 	.word	0x24001420
 8012c54:	24000f8c 	.word	0x24000f8c
 8012c58:	24001474 	.word	0x24001474

08012c5c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b086      	sub	sp, #24
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8012c66:	4b29      	ldr	r3, [pc, #164]	; (8012d0c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d10a      	bne.n	8012c84 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8012c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c72:	f383 8811 	msr	BASEPRI, r3
 8012c76:	f3bf 8f6f 	isb	sy
 8012c7a:	f3bf 8f4f 	dsb	sy
 8012c7e:	613b      	str	r3, [r7, #16]
}
 8012c80:	bf00      	nop
 8012c82:	e7fe      	b.n	8012c82 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	68db      	ldr	r3, [r3, #12]
 8012c92:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d10a      	bne.n	8012cb0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8012c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c9e:	f383 8811 	msr	BASEPRI, r3
 8012ca2:	f3bf 8f6f 	isb	sy
 8012ca6:	f3bf 8f4f 	dsb	sy
 8012caa:	60fb      	str	r3, [r7, #12]
}
 8012cac:	bf00      	nop
 8012cae:	e7fe      	b.n	8012cae <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f7fe fd7b 	bl	80117ac <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	3304      	adds	r3, #4
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7fe fd76 	bl	80117ac <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cc4:	4b12      	ldr	r3, [pc, #72]	; (8012d10 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d903      	bls.n	8012cd4 <vTaskRemoveFromUnorderedEventList+0x78>
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cd0:	4a0f      	ldr	r2, [pc, #60]	; (8012d10 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012cd2:	6013      	str	r3, [r2, #0]
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cd8:	4613      	mov	r3, r2
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	4413      	add	r3, r2
 8012cde:	009b      	lsls	r3, r3, #2
 8012ce0:	4a0c      	ldr	r2, [pc, #48]	; (8012d14 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8012ce2:	441a      	add	r2, r3
 8012ce4:	697b      	ldr	r3, [r7, #20]
 8012ce6:	3304      	adds	r3, #4
 8012ce8:	4619      	mov	r1, r3
 8012cea:	4610      	mov	r0, r2
 8012cec:	f7fe fd01 	bl	80116f2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cf4:	4b08      	ldr	r3, [pc, #32]	; (8012d18 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cfa:	429a      	cmp	r2, r3
 8012cfc:	d902      	bls.n	8012d04 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8012cfe:	4b07      	ldr	r3, [pc, #28]	; (8012d1c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8012d00:	2201      	movs	r2, #1
 8012d02:	601a      	str	r2, [r3, #0]
	}
}
 8012d04:	bf00      	nop
 8012d06:	3718      	adds	r7, #24
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}
 8012d0c:	24001488 	.word	0x24001488
 8012d10:	24001468 	.word	0x24001468
 8012d14:	24000f90 	.word	0x24000f90
 8012d18:	24000f8c 	.word	0x24000f8c
 8012d1c:	24001474 	.word	0x24001474

08012d20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012d20:	b480      	push	{r7}
 8012d22:	b083      	sub	sp, #12
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012d28:	4b06      	ldr	r3, [pc, #24]	; (8012d44 <vTaskInternalSetTimeOutState+0x24>)
 8012d2a:	681a      	ldr	r2, [r3, #0]
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012d30:	4b05      	ldr	r3, [pc, #20]	; (8012d48 <vTaskInternalSetTimeOutState+0x28>)
 8012d32:	681a      	ldr	r2, [r3, #0]
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	605a      	str	r2, [r3, #4]
}
 8012d38:	bf00      	nop
 8012d3a:	370c      	adds	r7, #12
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d42:	4770      	bx	lr
 8012d44:	24001478 	.word	0x24001478
 8012d48:	24001464 	.word	0x24001464

08012d4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b088      	sub	sp, #32
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
 8012d54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d10a      	bne.n	8012d72 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d60:	f383 8811 	msr	BASEPRI, r3
 8012d64:	f3bf 8f6f 	isb	sy
 8012d68:	f3bf 8f4f 	dsb	sy
 8012d6c:	613b      	str	r3, [r7, #16]
}
 8012d6e:	bf00      	nop
 8012d70:	e7fe      	b.n	8012d70 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d10a      	bne.n	8012d8e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d7c:	f383 8811 	msr	BASEPRI, r3
 8012d80:	f3bf 8f6f 	isb	sy
 8012d84:	f3bf 8f4f 	dsb	sy
 8012d88:	60fb      	str	r3, [r7, #12]
}
 8012d8a:	bf00      	nop
 8012d8c:	e7fe      	b.n	8012d8c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012d8e:	f000 feb1 	bl	8013af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012d92:	4b1d      	ldr	r3, [pc, #116]	; (8012e08 <xTaskCheckForTimeOut+0xbc>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	685b      	ldr	r3, [r3, #4]
 8012d9c:	69ba      	ldr	r2, [r7, #24]
 8012d9e:	1ad3      	subs	r3, r2, r3
 8012da0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012daa:	d102      	bne.n	8012db2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012dac:	2300      	movs	r3, #0
 8012dae:	61fb      	str	r3, [r7, #28]
 8012db0:	e023      	b.n	8012dfa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	681a      	ldr	r2, [r3, #0]
 8012db6:	4b15      	ldr	r3, [pc, #84]	; (8012e0c <xTaskCheckForTimeOut+0xc0>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d007      	beq.n	8012dce <xTaskCheckForTimeOut+0x82>
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	685b      	ldr	r3, [r3, #4]
 8012dc2:	69ba      	ldr	r2, [r7, #24]
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d302      	bcc.n	8012dce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	61fb      	str	r3, [r7, #28]
 8012dcc:	e015      	b.n	8012dfa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	697a      	ldr	r2, [r7, #20]
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	d20b      	bcs.n	8012df0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	681a      	ldr	r2, [r3, #0]
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	1ad2      	subs	r2, r2, r3
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012de4:	6878      	ldr	r0, [r7, #4]
 8012de6:	f7ff ff9b 	bl	8012d20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012dea:	2300      	movs	r3, #0
 8012dec:	61fb      	str	r3, [r7, #28]
 8012dee:	e004      	b.n	8012dfa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	2200      	movs	r2, #0
 8012df4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012df6:	2301      	movs	r3, #1
 8012df8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012dfa:	f000 feab 	bl	8013b54 <vPortExitCritical>

	return xReturn;
 8012dfe:	69fb      	ldr	r3, [r7, #28]
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	3720      	adds	r7, #32
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}
 8012e08:	24001464 	.word	0x24001464
 8012e0c:	24001478 	.word	0x24001478

08012e10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012e10:	b480      	push	{r7}
 8012e12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012e14:	4b03      	ldr	r3, [pc, #12]	; (8012e24 <vTaskMissedYield+0x14>)
 8012e16:	2201      	movs	r2, #1
 8012e18:	601a      	str	r2, [r3, #0]
}
 8012e1a:	bf00      	nop
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr
 8012e24:	24001474 	.word	0x24001474

08012e28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b082      	sub	sp, #8
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012e30:	f000 f852 	bl	8012ed8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012e34:	4b06      	ldr	r3, [pc, #24]	; (8012e50 <prvIdleTask+0x28>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	2b01      	cmp	r3, #1
 8012e3a:	d9f9      	bls.n	8012e30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012e3c:	4b05      	ldr	r3, [pc, #20]	; (8012e54 <prvIdleTask+0x2c>)
 8012e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e42:	601a      	str	r2, [r3, #0]
 8012e44:	f3bf 8f4f 	dsb	sy
 8012e48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012e4c:	e7f0      	b.n	8012e30 <prvIdleTask+0x8>
 8012e4e:	bf00      	nop
 8012e50:	24000f90 	.word	0x24000f90
 8012e54:	e000ed04 	.word	0xe000ed04

08012e58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012e5e:	2300      	movs	r3, #0
 8012e60:	607b      	str	r3, [r7, #4]
 8012e62:	e00c      	b.n	8012e7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012e64:	687a      	ldr	r2, [r7, #4]
 8012e66:	4613      	mov	r3, r2
 8012e68:	009b      	lsls	r3, r3, #2
 8012e6a:	4413      	add	r3, r2
 8012e6c:	009b      	lsls	r3, r3, #2
 8012e6e:	4a12      	ldr	r2, [pc, #72]	; (8012eb8 <prvInitialiseTaskLists+0x60>)
 8012e70:	4413      	add	r3, r2
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7fe fc10 	bl	8011698 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	607b      	str	r3, [r7, #4]
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	2b37      	cmp	r3, #55	; 0x37
 8012e82:	d9ef      	bls.n	8012e64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012e84:	480d      	ldr	r0, [pc, #52]	; (8012ebc <prvInitialiseTaskLists+0x64>)
 8012e86:	f7fe fc07 	bl	8011698 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012e8a:	480d      	ldr	r0, [pc, #52]	; (8012ec0 <prvInitialiseTaskLists+0x68>)
 8012e8c:	f7fe fc04 	bl	8011698 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012e90:	480c      	ldr	r0, [pc, #48]	; (8012ec4 <prvInitialiseTaskLists+0x6c>)
 8012e92:	f7fe fc01 	bl	8011698 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012e96:	480c      	ldr	r0, [pc, #48]	; (8012ec8 <prvInitialiseTaskLists+0x70>)
 8012e98:	f7fe fbfe 	bl	8011698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012e9c:	480b      	ldr	r0, [pc, #44]	; (8012ecc <prvInitialiseTaskLists+0x74>)
 8012e9e:	f7fe fbfb 	bl	8011698 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012ea2:	4b0b      	ldr	r3, [pc, #44]	; (8012ed0 <prvInitialiseTaskLists+0x78>)
 8012ea4:	4a05      	ldr	r2, [pc, #20]	; (8012ebc <prvInitialiseTaskLists+0x64>)
 8012ea6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012ea8:	4b0a      	ldr	r3, [pc, #40]	; (8012ed4 <prvInitialiseTaskLists+0x7c>)
 8012eaa:	4a05      	ldr	r2, [pc, #20]	; (8012ec0 <prvInitialiseTaskLists+0x68>)
 8012eac:	601a      	str	r2, [r3, #0]
}
 8012eae:	bf00      	nop
 8012eb0:	3708      	adds	r7, #8
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	24000f90 	.word	0x24000f90
 8012ebc:	240013f0 	.word	0x240013f0
 8012ec0:	24001404 	.word	0x24001404
 8012ec4:	24001420 	.word	0x24001420
 8012ec8:	24001434 	.word	0x24001434
 8012ecc:	2400144c 	.word	0x2400144c
 8012ed0:	24001418 	.word	0x24001418
 8012ed4:	2400141c 	.word	0x2400141c

08012ed8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b082      	sub	sp, #8
 8012edc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ede:	e019      	b.n	8012f14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012ee0:	f000 fe08 	bl	8013af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ee4:	4b10      	ldr	r3, [pc, #64]	; (8012f28 <prvCheckTasksWaitingTermination+0x50>)
 8012ee6:	68db      	ldr	r3, [r3, #12]
 8012ee8:	68db      	ldr	r3, [r3, #12]
 8012eea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	3304      	adds	r3, #4
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f7fe fc5b 	bl	80117ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012ef6:	4b0d      	ldr	r3, [pc, #52]	; (8012f2c <prvCheckTasksWaitingTermination+0x54>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	3b01      	subs	r3, #1
 8012efc:	4a0b      	ldr	r2, [pc, #44]	; (8012f2c <prvCheckTasksWaitingTermination+0x54>)
 8012efe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012f00:	4b0b      	ldr	r3, [pc, #44]	; (8012f30 <prvCheckTasksWaitingTermination+0x58>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	3b01      	subs	r3, #1
 8012f06:	4a0a      	ldr	r2, [pc, #40]	; (8012f30 <prvCheckTasksWaitingTermination+0x58>)
 8012f08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012f0a:	f000 fe23 	bl	8013b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f000 f810 	bl	8012f34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012f14:	4b06      	ldr	r3, [pc, #24]	; (8012f30 <prvCheckTasksWaitingTermination+0x58>)
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d1e1      	bne.n	8012ee0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012f1c:	bf00      	nop
 8012f1e:	bf00      	nop
 8012f20:	3708      	adds	r7, #8
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	24001434 	.word	0x24001434
 8012f2c:	24001460 	.word	0x24001460
 8012f30:	24001448 	.word	0x24001448

08012f34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d108      	bne.n	8012f58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f000 ffc0 	bl	8013ed0 <vPortFree>
				vPortFree( pxTCB );
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f000 ffbd 	bl	8013ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012f56:	e018      	b.n	8012f8a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012f5e:	2b01      	cmp	r3, #1
 8012f60:	d103      	bne.n	8012f6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f000 ffb4 	bl	8013ed0 <vPortFree>
	}
 8012f68:	e00f      	b.n	8012f8a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012f70:	2b02      	cmp	r3, #2
 8012f72:	d00a      	beq.n	8012f8a <prvDeleteTCB+0x56>
	__asm volatile
 8012f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f78:	f383 8811 	msr	BASEPRI, r3
 8012f7c:	f3bf 8f6f 	isb	sy
 8012f80:	f3bf 8f4f 	dsb	sy
 8012f84:	60fb      	str	r3, [r7, #12]
}
 8012f86:	bf00      	nop
 8012f88:	e7fe      	b.n	8012f88 <prvDeleteTCB+0x54>
	}
 8012f8a:	bf00      	nop
 8012f8c:	3710      	adds	r7, #16
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
	...

08012f94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012f94:	b480      	push	{r7}
 8012f96:	b083      	sub	sp, #12
 8012f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f9a:	4b0c      	ldr	r3, [pc, #48]	; (8012fcc <prvResetNextTaskUnblockTime+0x38>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d104      	bne.n	8012fae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012fa4:	4b0a      	ldr	r3, [pc, #40]	; (8012fd0 <prvResetNextTaskUnblockTime+0x3c>)
 8012fa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012faa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012fac:	e008      	b.n	8012fc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012fae:	4b07      	ldr	r3, [pc, #28]	; (8012fcc <prvResetNextTaskUnblockTime+0x38>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	68db      	ldr	r3, [r3, #12]
 8012fb4:	68db      	ldr	r3, [r3, #12]
 8012fb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	685b      	ldr	r3, [r3, #4]
 8012fbc:	4a04      	ldr	r2, [pc, #16]	; (8012fd0 <prvResetNextTaskUnblockTime+0x3c>)
 8012fbe:	6013      	str	r3, [r2, #0]
}
 8012fc0:	bf00      	nop
 8012fc2:	370c      	adds	r7, #12
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fca:	4770      	bx	lr
 8012fcc:	24001418 	.word	0x24001418
 8012fd0:	24001480 	.word	0x24001480

08012fd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012fd4:	b480      	push	{r7}
 8012fd6:	b083      	sub	sp, #12
 8012fd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012fda:	4b0b      	ldr	r3, [pc, #44]	; (8013008 <xTaskGetSchedulerState+0x34>)
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d102      	bne.n	8012fe8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012fe2:	2301      	movs	r3, #1
 8012fe4:	607b      	str	r3, [r7, #4]
 8012fe6:	e008      	b.n	8012ffa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012fe8:	4b08      	ldr	r3, [pc, #32]	; (801300c <xTaskGetSchedulerState+0x38>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d102      	bne.n	8012ff6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012ff0:	2302      	movs	r3, #2
 8012ff2:	607b      	str	r3, [r7, #4]
 8012ff4:	e001      	b.n	8012ffa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012ffa:	687b      	ldr	r3, [r7, #4]
	}
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	370c      	adds	r7, #12
 8013000:	46bd      	mov	sp, r7
 8013002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013006:	4770      	bx	lr
 8013008:	2400146c 	.word	0x2400146c
 801300c:	24001488 	.word	0x24001488

08013010 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013010:	b580      	push	{r7, lr}
 8013012:	b086      	sub	sp, #24
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801301c:	2300      	movs	r3, #0
 801301e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d056      	beq.n	80130d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013026:	4b2e      	ldr	r3, [pc, #184]	; (80130e0 <xTaskPriorityDisinherit+0xd0>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	693a      	ldr	r2, [r7, #16]
 801302c:	429a      	cmp	r2, r3
 801302e:	d00a      	beq.n	8013046 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013034:	f383 8811 	msr	BASEPRI, r3
 8013038:	f3bf 8f6f 	isb	sy
 801303c:	f3bf 8f4f 	dsb	sy
 8013040:	60fb      	str	r3, [r7, #12]
}
 8013042:	bf00      	nop
 8013044:	e7fe      	b.n	8013044 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013046:	693b      	ldr	r3, [r7, #16]
 8013048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801304a:	2b00      	cmp	r3, #0
 801304c:	d10a      	bne.n	8013064 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013052:	f383 8811 	msr	BASEPRI, r3
 8013056:	f3bf 8f6f 	isb	sy
 801305a:	f3bf 8f4f 	dsb	sy
 801305e:	60bb      	str	r3, [r7, #8]
}
 8013060:	bf00      	nop
 8013062:	e7fe      	b.n	8013062 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013068:	1e5a      	subs	r2, r3, #1
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013076:	429a      	cmp	r2, r3
 8013078:	d02c      	beq.n	80130d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801307e:	2b00      	cmp	r3, #0
 8013080:	d128      	bne.n	80130d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	3304      	adds	r3, #4
 8013086:	4618      	mov	r0, r3
 8013088:	f7fe fb90 	bl	80117ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801308c:	693b      	ldr	r3, [r7, #16]
 801308e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013098:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801309c:	693b      	ldr	r3, [r7, #16]
 801309e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80130a0:	693b      	ldr	r3, [r7, #16]
 80130a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130a4:	4b0f      	ldr	r3, [pc, #60]	; (80130e4 <xTaskPriorityDisinherit+0xd4>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	429a      	cmp	r2, r3
 80130aa:	d903      	bls.n	80130b4 <xTaskPriorityDisinherit+0xa4>
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130b0:	4a0c      	ldr	r2, [pc, #48]	; (80130e4 <xTaskPriorityDisinherit+0xd4>)
 80130b2:	6013      	str	r3, [r2, #0]
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130b8:	4613      	mov	r3, r2
 80130ba:	009b      	lsls	r3, r3, #2
 80130bc:	4413      	add	r3, r2
 80130be:	009b      	lsls	r3, r3, #2
 80130c0:	4a09      	ldr	r2, [pc, #36]	; (80130e8 <xTaskPriorityDisinherit+0xd8>)
 80130c2:	441a      	add	r2, r3
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	3304      	adds	r3, #4
 80130c8:	4619      	mov	r1, r3
 80130ca:	4610      	mov	r0, r2
 80130cc:	f7fe fb11 	bl	80116f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80130d0:	2301      	movs	r3, #1
 80130d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80130d4:	697b      	ldr	r3, [r7, #20]
	}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3718      	adds	r7, #24
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	24000f8c 	.word	0x24000f8c
 80130e4:	24001468 	.word	0x24001468
 80130e8:	24000f90 	.word	0x24000f90

080130ec <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80130ec:	b480      	push	{r7}
 80130ee:	b083      	sub	sp, #12
 80130f0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80130f2:	4b09      	ldr	r3, [pc, #36]	; (8013118 <uxTaskResetEventItemValue+0x2c>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	699b      	ldr	r3, [r3, #24]
 80130f8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130fa:	4b07      	ldr	r3, [pc, #28]	; (8013118 <uxTaskResetEventItemValue+0x2c>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013100:	4b05      	ldr	r3, [pc, #20]	; (8013118 <uxTaskResetEventItemValue+0x2c>)
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8013108:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801310a:	687b      	ldr	r3, [r7, #4]
}
 801310c:	4618      	mov	r0, r3
 801310e:	370c      	adds	r7, #12
 8013110:	46bd      	mov	sp, r7
 8013112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013116:	4770      	bx	lr
 8013118:	24000f8c 	.word	0x24000f8c

0801311c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b084      	sub	sp, #16
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013126:	4b21      	ldr	r3, [pc, #132]	; (80131ac <prvAddCurrentTaskToDelayedList+0x90>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801312c:	4b20      	ldr	r3, [pc, #128]	; (80131b0 <prvAddCurrentTaskToDelayedList+0x94>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	3304      	adds	r3, #4
 8013132:	4618      	mov	r0, r3
 8013134:	f7fe fb3a 	bl	80117ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801313e:	d10a      	bne.n	8013156 <prvAddCurrentTaskToDelayedList+0x3a>
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d007      	beq.n	8013156 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013146:	4b1a      	ldr	r3, [pc, #104]	; (80131b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	3304      	adds	r3, #4
 801314c:	4619      	mov	r1, r3
 801314e:	4819      	ldr	r0, [pc, #100]	; (80131b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8013150:	f7fe facf 	bl	80116f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013154:	e026      	b.n	80131a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013156:	68fa      	ldr	r2, [r7, #12]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	4413      	add	r3, r2
 801315c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801315e:	4b14      	ldr	r3, [pc, #80]	; (80131b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	68ba      	ldr	r2, [r7, #8]
 8013164:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013166:	68ba      	ldr	r2, [r7, #8]
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	429a      	cmp	r2, r3
 801316c:	d209      	bcs.n	8013182 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801316e:	4b12      	ldr	r3, [pc, #72]	; (80131b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013170:	681a      	ldr	r2, [r3, #0]
 8013172:	4b0f      	ldr	r3, [pc, #60]	; (80131b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	3304      	adds	r3, #4
 8013178:	4619      	mov	r1, r3
 801317a:	4610      	mov	r0, r2
 801317c:	f7fe fadd 	bl	801173a <vListInsert>
}
 8013180:	e010      	b.n	80131a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013182:	4b0e      	ldr	r3, [pc, #56]	; (80131bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8013184:	681a      	ldr	r2, [r3, #0]
 8013186:	4b0a      	ldr	r3, [pc, #40]	; (80131b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	3304      	adds	r3, #4
 801318c:	4619      	mov	r1, r3
 801318e:	4610      	mov	r0, r2
 8013190:	f7fe fad3 	bl	801173a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013194:	4b0a      	ldr	r3, [pc, #40]	; (80131c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	68ba      	ldr	r2, [r7, #8]
 801319a:	429a      	cmp	r2, r3
 801319c:	d202      	bcs.n	80131a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801319e:	4a08      	ldr	r2, [pc, #32]	; (80131c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80131a0:	68bb      	ldr	r3, [r7, #8]
 80131a2:	6013      	str	r3, [r2, #0]
}
 80131a4:	bf00      	nop
 80131a6:	3710      	adds	r7, #16
 80131a8:	46bd      	mov	sp, r7
 80131aa:	bd80      	pop	{r7, pc}
 80131ac:	24001464 	.word	0x24001464
 80131b0:	24000f8c 	.word	0x24000f8c
 80131b4:	2400144c 	.word	0x2400144c
 80131b8:	2400141c 	.word	0x2400141c
 80131bc:	24001418 	.word	0x24001418
 80131c0:	24001480 	.word	0x24001480

080131c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b08a      	sub	sp, #40	; 0x28
 80131c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80131ca:	2300      	movs	r3, #0
 80131cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80131ce:	f000 fb07 	bl	80137e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80131d2:	4b1c      	ldr	r3, [pc, #112]	; (8013244 <xTimerCreateTimerTask+0x80>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d021      	beq.n	801321e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80131da:	2300      	movs	r3, #0
 80131dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80131de:	2300      	movs	r3, #0
 80131e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80131e2:	1d3a      	adds	r2, r7, #4
 80131e4:	f107 0108 	add.w	r1, r7, #8
 80131e8:	f107 030c 	add.w	r3, r7, #12
 80131ec:	4618      	mov	r0, r3
 80131ee:	f7fe f84b 	bl	8011288 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80131f2:	6879      	ldr	r1, [r7, #4]
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	68fa      	ldr	r2, [r7, #12]
 80131f8:	9202      	str	r2, [sp, #8]
 80131fa:	9301      	str	r3, [sp, #4]
 80131fc:	2302      	movs	r3, #2
 80131fe:	9300      	str	r3, [sp, #0]
 8013200:	2300      	movs	r3, #0
 8013202:	460a      	mov	r2, r1
 8013204:	4910      	ldr	r1, [pc, #64]	; (8013248 <xTimerCreateTimerTask+0x84>)
 8013206:	4811      	ldr	r0, [pc, #68]	; (801324c <xTimerCreateTimerTask+0x88>)
 8013208:	f7ff f820 	bl	801224c <xTaskCreateStatic>
 801320c:	4603      	mov	r3, r0
 801320e:	4a10      	ldr	r2, [pc, #64]	; (8013250 <xTimerCreateTimerTask+0x8c>)
 8013210:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013212:	4b0f      	ldr	r3, [pc, #60]	; (8013250 <xTimerCreateTimerTask+0x8c>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d001      	beq.n	801321e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801321a:	2301      	movs	r3, #1
 801321c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d10a      	bne.n	801323a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013228:	f383 8811 	msr	BASEPRI, r3
 801322c:	f3bf 8f6f 	isb	sy
 8013230:	f3bf 8f4f 	dsb	sy
 8013234:	613b      	str	r3, [r7, #16]
}
 8013236:	bf00      	nop
 8013238:	e7fe      	b.n	8013238 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801323a:	697b      	ldr	r3, [r7, #20]
}
 801323c:	4618      	mov	r0, r3
 801323e:	3718      	adds	r7, #24
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}
 8013244:	240014bc 	.word	0x240014bc
 8013248:	08014dd0 	.word	0x08014dd0
 801324c:	08013389 	.word	0x08013389
 8013250:	240014c0 	.word	0x240014c0

08013254 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b08a      	sub	sp, #40	; 0x28
 8013258:	af00      	add	r7, sp, #0
 801325a:	60f8      	str	r0, [r7, #12]
 801325c:	60b9      	str	r1, [r7, #8]
 801325e:	607a      	str	r2, [r7, #4]
 8013260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013262:	2300      	movs	r3, #0
 8013264:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d10a      	bne.n	8013282 <xTimerGenericCommand+0x2e>
	__asm volatile
 801326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013270:	f383 8811 	msr	BASEPRI, r3
 8013274:	f3bf 8f6f 	isb	sy
 8013278:	f3bf 8f4f 	dsb	sy
 801327c:	623b      	str	r3, [r7, #32]
}
 801327e:	bf00      	nop
 8013280:	e7fe      	b.n	8013280 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013282:	4b1a      	ldr	r3, [pc, #104]	; (80132ec <xTimerGenericCommand+0x98>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d02a      	beq.n	80132e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	2b05      	cmp	r3, #5
 801329a:	dc18      	bgt.n	80132ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801329c:	f7ff fe9a 	bl	8012fd4 <xTaskGetSchedulerState>
 80132a0:	4603      	mov	r3, r0
 80132a2:	2b02      	cmp	r3, #2
 80132a4:	d109      	bne.n	80132ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80132a6:	4b11      	ldr	r3, [pc, #68]	; (80132ec <xTimerGenericCommand+0x98>)
 80132a8:	6818      	ldr	r0, [r3, #0]
 80132aa:	f107 0110 	add.w	r1, r7, #16
 80132ae:	2300      	movs	r3, #0
 80132b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132b2:	f7fe fbe3 	bl	8011a7c <xQueueGenericSend>
 80132b6:	6278      	str	r0, [r7, #36]	; 0x24
 80132b8:	e012      	b.n	80132e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80132ba:	4b0c      	ldr	r3, [pc, #48]	; (80132ec <xTimerGenericCommand+0x98>)
 80132bc:	6818      	ldr	r0, [r3, #0]
 80132be:	f107 0110 	add.w	r1, r7, #16
 80132c2:	2300      	movs	r3, #0
 80132c4:	2200      	movs	r2, #0
 80132c6:	f7fe fbd9 	bl	8011a7c <xQueueGenericSend>
 80132ca:	6278      	str	r0, [r7, #36]	; 0x24
 80132cc:	e008      	b.n	80132e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80132ce:	4b07      	ldr	r3, [pc, #28]	; (80132ec <xTimerGenericCommand+0x98>)
 80132d0:	6818      	ldr	r0, [r3, #0]
 80132d2:	f107 0110 	add.w	r1, r7, #16
 80132d6:	2300      	movs	r3, #0
 80132d8:	683a      	ldr	r2, [r7, #0]
 80132da:	f7fe fccd 	bl	8011c78 <xQueueGenericSendFromISR>
 80132de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80132e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	3728      	adds	r7, #40	; 0x28
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}
 80132ea:	bf00      	nop
 80132ec:	240014bc 	.word	0x240014bc

080132f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b088      	sub	sp, #32
 80132f4:	af02      	add	r7, sp, #8
 80132f6:	6078      	str	r0, [r7, #4]
 80132f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132fa:	4b22      	ldr	r3, [pc, #136]	; (8013384 <prvProcessExpiredTimer+0x94>)
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	68db      	ldr	r3, [r3, #12]
 8013300:	68db      	ldr	r3, [r3, #12]
 8013302:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013304:	697b      	ldr	r3, [r7, #20]
 8013306:	3304      	adds	r3, #4
 8013308:	4618      	mov	r0, r3
 801330a:	f7fe fa4f 	bl	80117ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013314:	f003 0304 	and.w	r3, r3, #4
 8013318:	2b00      	cmp	r3, #0
 801331a:	d022      	beq.n	8013362 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	699a      	ldr	r2, [r3, #24]
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	18d1      	adds	r1, r2, r3
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	683a      	ldr	r2, [r7, #0]
 8013328:	6978      	ldr	r0, [r7, #20]
 801332a:	f000 f8d1 	bl	80134d0 <prvInsertTimerInActiveList>
 801332e:	4603      	mov	r3, r0
 8013330:	2b00      	cmp	r3, #0
 8013332:	d01f      	beq.n	8013374 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013334:	2300      	movs	r3, #0
 8013336:	9300      	str	r3, [sp, #0]
 8013338:	2300      	movs	r3, #0
 801333a:	687a      	ldr	r2, [r7, #4]
 801333c:	2100      	movs	r1, #0
 801333e:	6978      	ldr	r0, [r7, #20]
 8013340:	f7ff ff88 	bl	8013254 <xTimerGenericCommand>
 8013344:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d113      	bne.n	8013374 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013350:	f383 8811 	msr	BASEPRI, r3
 8013354:	f3bf 8f6f 	isb	sy
 8013358:	f3bf 8f4f 	dsb	sy
 801335c:	60fb      	str	r3, [r7, #12]
}
 801335e:	bf00      	nop
 8013360:	e7fe      	b.n	8013360 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013362:	697b      	ldr	r3, [r7, #20]
 8013364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013368:	f023 0301 	bic.w	r3, r3, #1
 801336c:	b2da      	uxtb	r2, r3
 801336e:	697b      	ldr	r3, [r7, #20]
 8013370:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	6a1b      	ldr	r3, [r3, #32]
 8013378:	6978      	ldr	r0, [r7, #20]
 801337a:	4798      	blx	r3
}
 801337c:	bf00      	nop
 801337e:	3718      	adds	r7, #24
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}
 8013384:	240014b4 	.word	0x240014b4

08013388 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b084      	sub	sp, #16
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013390:	f107 0308 	add.w	r3, r7, #8
 8013394:	4618      	mov	r0, r3
 8013396:	f000 f857 	bl	8013448 <prvGetNextExpireTime>
 801339a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	4619      	mov	r1, r3
 80133a0:	68f8      	ldr	r0, [r7, #12]
 80133a2:	f000 f803 	bl	80133ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80133a6:	f000 f8d5 	bl	8013554 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80133aa:	e7f1      	b.n	8013390 <prvTimerTask+0x8>

080133ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b084      	sub	sp, #16
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80133b6:	f7ff f985 	bl	80126c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80133ba:	f107 0308 	add.w	r3, r7, #8
 80133be:	4618      	mov	r0, r3
 80133c0:	f000 f866 	bl	8013490 <prvSampleTimeNow>
 80133c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d130      	bne.n	801342e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d10a      	bne.n	80133e8 <prvProcessTimerOrBlockTask+0x3c>
 80133d2:	687a      	ldr	r2, [r7, #4]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d806      	bhi.n	80133e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80133da:	f7ff f981 	bl	80126e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80133de:	68f9      	ldr	r1, [r7, #12]
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f7ff ff85 	bl	80132f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80133e6:	e024      	b.n	8013432 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d008      	beq.n	8013400 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80133ee:	4b13      	ldr	r3, [pc, #76]	; (801343c <prvProcessTimerOrBlockTask+0x90>)
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d101      	bne.n	80133fc <prvProcessTimerOrBlockTask+0x50>
 80133f8:	2301      	movs	r3, #1
 80133fa:	e000      	b.n	80133fe <prvProcessTimerOrBlockTask+0x52>
 80133fc:	2300      	movs	r3, #0
 80133fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013400:	4b0f      	ldr	r3, [pc, #60]	; (8013440 <prvProcessTimerOrBlockTask+0x94>)
 8013402:	6818      	ldr	r0, [r3, #0]
 8013404:	687a      	ldr	r2, [r7, #4]
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	1ad3      	subs	r3, r2, r3
 801340a:	683a      	ldr	r2, [r7, #0]
 801340c:	4619      	mov	r1, r3
 801340e:	f7fe fee9 	bl	80121e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013412:	f7ff f965 	bl	80126e0 <xTaskResumeAll>
 8013416:	4603      	mov	r3, r0
 8013418:	2b00      	cmp	r3, #0
 801341a:	d10a      	bne.n	8013432 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801341c:	4b09      	ldr	r3, [pc, #36]	; (8013444 <prvProcessTimerOrBlockTask+0x98>)
 801341e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013422:	601a      	str	r2, [r3, #0]
 8013424:	f3bf 8f4f 	dsb	sy
 8013428:	f3bf 8f6f 	isb	sy
}
 801342c:	e001      	b.n	8013432 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801342e:	f7ff f957 	bl	80126e0 <xTaskResumeAll>
}
 8013432:	bf00      	nop
 8013434:	3710      	adds	r7, #16
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}
 801343a:	bf00      	nop
 801343c:	240014b8 	.word	0x240014b8
 8013440:	240014bc 	.word	0x240014bc
 8013444:	e000ed04 	.word	0xe000ed04

08013448 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013448:	b480      	push	{r7}
 801344a:	b085      	sub	sp, #20
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013450:	4b0e      	ldr	r3, [pc, #56]	; (801348c <prvGetNextExpireTime+0x44>)
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d101      	bne.n	801345e <prvGetNextExpireTime+0x16>
 801345a:	2201      	movs	r2, #1
 801345c:	e000      	b.n	8013460 <prvGetNextExpireTime+0x18>
 801345e:	2200      	movs	r2, #0
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d105      	bne.n	8013478 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801346c:	4b07      	ldr	r3, [pc, #28]	; (801348c <prvGetNextExpireTime+0x44>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	68db      	ldr	r3, [r3, #12]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	60fb      	str	r3, [r7, #12]
 8013476:	e001      	b.n	801347c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013478:	2300      	movs	r3, #0
 801347a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801347c:	68fb      	ldr	r3, [r7, #12]
}
 801347e:	4618      	mov	r0, r3
 8013480:	3714      	adds	r7, #20
 8013482:	46bd      	mov	sp, r7
 8013484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013488:	4770      	bx	lr
 801348a:	bf00      	nop
 801348c:	240014b4 	.word	0x240014b4

08013490 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b084      	sub	sp, #16
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013498:	f7ff f9c0 	bl	801281c <xTaskGetTickCount>
 801349c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801349e:	4b0b      	ldr	r3, [pc, #44]	; (80134cc <prvSampleTimeNow+0x3c>)
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	68fa      	ldr	r2, [r7, #12]
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d205      	bcs.n	80134b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80134a8:	f000 f936 	bl	8013718 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2201      	movs	r2, #1
 80134b0:	601a      	str	r2, [r3, #0]
 80134b2:	e002      	b.n	80134ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2200      	movs	r2, #0
 80134b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80134ba:	4a04      	ldr	r2, [pc, #16]	; (80134cc <prvSampleTimeNow+0x3c>)
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80134c0:	68fb      	ldr	r3, [r7, #12]
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	3710      	adds	r7, #16
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	bf00      	nop
 80134cc:	240014c4 	.word	0x240014c4

080134d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b086      	sub	sp, #24
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	60f8      	str	r0, [r7, #12]
 80134d8:	60b9      	str	r1, [r7, #8]
 80134da:	607a      	str	r2, [r7, #4]
 80134dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80134de:	2300      	movs	r3, #0
 80134e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	68ba      	ldr	r2, [r7, #8]
 80134e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	68fa      	ldr	r2, [r7, #12]
 80134ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80134ee:	68ba      	ldr	r2, [r7, #8]
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d812      	bhi.n	801351c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134f6:	687a      	ldr	r2, [r7, #4]
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	1ad2      	subs	r2, r2, r3
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	699b      	ldr	r3, [r3, #24]
 8013500:	429a      	cmp	r2, r3
 8013502:	d302      	bcc.n	801350a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013504:	2301      	movs	r3, #1
 8013506:	617b      	str	r3, [r7, #20]
 8013508:	e01b      	b.n	8013542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801350a:	4b10      	ldr	r3, [pc, #64]	; (801354c <prvInsertTimerInActiveList+0x7c>)
 801350c:	681a      	ldr	r2, [r3, #0]
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	3304      	adds	r3, #4
 8013512:	4619      	mov	r1, r3
 8013514:	4610      	mov	r0, r2
 8013516:	f7fe f910 	bl	801173a <vListInsert>
 801351a:	e012      	b.n	8013542 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801351c:	687a      	ldr	r2, [r7, #4]
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	429a      	cmp	r2, r3
 8013522:	d206      	bcs.n	8013532 <prvInsertTimerInActiveList+0x62>
 8013524:	68ba      	ldr	r2, [r7, #8]
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	429a      	cmp	r2, r3
 801352a:	d302      	bcc.n	8013532 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801352c:	2301      	movs	r3, #1
 801352e:	617b      	str	r3, [r7, #20]
 8013530:	e007      	b.n	8013542 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013532:	4b07      	ldr	r3, [pc, #28]	; (8013550 <prvInsertTimerInActiveList+0x80>)
 8013534:	681a      	ldr	r2, [r3, #0]
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	3304      	adds	r3, #4
 801353a:	4619      	mov	r1, r3
 801353c:	4610      	mov	r0, r2
 801353e:	f7fe f8fc 	bl	801173a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013542:	697b      	ldr	r3, [r7, #20]
}
 8013544:	4618      	mov	r0, r3
 8013546:	3718      	adds	r7, #24
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}
 801354c:	240014b8 	.word	0x240014b8
 8013550:	240014b4 	.word	0x240014b4

08013554 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b08e      	sub	sp, #56	; 0x38
 8013558:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801355a:	e0ca      	b.n	80136f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	2b00      	cmp	r3, #0
 8013560:	da18      	bge.n	8013594 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013562:	1d3b      	adds	r3, r7, #4
 8013564:	3304      	adds	r3, #4
 8013566:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801356a:	2b00      	cmp	r3, #0
 801356c:	d10a      	bne.n	8013584 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013572:	f383 8811 	msr	BASEPRI, r3
 8013576:	f3bf 8f6f 	isb	sy
 801357a:	f3bf 8f4f 	dsb	sy
 801357e:	61fb      	str	r3, [r7, #28]
}
 8013580:	bf00      	nop
 8013582:	e7fe      	b.n	8013582 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801358a:	6850      	ldr	r0, [r2, #4]
 801358c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801358e:	6892      	ldr	r2, [r2, #8]
 8013590:	4611      	mov	r1, r2
 8013592:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	2b00      	cmp	r3, #0
 8013598:	f2c0 80aa 	blt.w	80136f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80135a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a2:	695b      	ldr	r3, [r3, #20]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d004      	beq.n	80135b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80135a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135aa:	3304      	adds	r3, #4
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7fe f8fd 	bl	80117ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80135b2:	463b      	mov	r3, r7
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7ff ff6b 	bl	8013490 <prvSampleTimeNow>
 80135ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2b09      	cmp	r3, #9
 80135c0:	f200 8097 	bhi.w	80136f2 <prvProcessReceivedCommands+0x19e>
 80135c4:	a201      	add	r2, pc, #4	; (adr r2, 80135cc <prvProcessReceivedCommands+0x78>)
 80135c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135ca:	bf00      	nop
 80135cc:	080135f5 	.word	0x080135f5
 80135d0:	080135f5 	.word	0x080135f5
 80135d4:	080135f5 	.word	0x080135f5
 80135d8:	08013669 	.word	0x08013669
 80135dc:	0801367d 	.word	0x0801367d
 80135e0:	080136c7 	.word	0x080136c7
 80135e4:	080135f5 	.word	0x080135f5
 80135e8:	080135f5 	.word	0x080135f5
 80135ec:	08013669 	.word	0x08013669
 80135f0:	0801367d 	.word	0x0801367d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80135f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80135fa:	f043 0301 	orr.w	r3, r3, #1
 80135fe:	b2da      	uxtb	r2, r3
 8013600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013606:	68ba      	ldr	r2, [r7, #8]
 8013608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801360a:	699b      	ldr	r3, [r3, #24]
 801360c:	18d1      	adds	r1, r2, r3
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013614:	f7ff ff5c 	bl	80134d0 <prvInsertTimerInActiveList>
 8013618:	4603      	mov	r3, r0
 801361a:	2b00      	cmp	r3, #0
 801361c:	d069      	beq.n	80136f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013620:	6a1b      	ldr	r3, [r3, #32]
 8013622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013624:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801362c:	f003 0304 	and.w	r3, r3, #4
 8013630:	2b00      	cmp	r3, #0
 8013632:	d05e      	beq.n	80136f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013634:	68ba      	ldr	r2, [r7, #8]
 8013636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013638:	699b      	ldr	r3, [r3, #24]
 801363a:	441a      	add	r2, r3
 801363c:	2300      	movs	r3, #0
 801363e:	9300      	str	r3, [sp, #0]
 8013640:	2300      	movs	r3, #0
 8013642:	2100      	movs	r1, #0
 8013644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013646:	f7ff fe05 	bl	8013254 <xTimerGenericCommand>
 801364a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801364c:	6a3b      	ldr	r3, [r7, #32]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d14f      	bne.n	80136f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013656:	f383 8811 	msr	BASEPRI, r3
 801365a:	f3bf 8f6f 	isb	sy
 801365e:	f3bf 8f4f 	dsb	sy
 8013662:	61bb      	str	r3, [r7, #24]
}
 8013664:	bf00      	nop
 8013666:	e7fe      	b.n	8013666 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801366e:	f023 0301 	bic.w	r3, r3, #1
 8013672:	b2da      	uxtb	r2, r3
 8013674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013676:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801367a:	e03a      	b.n	80136f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801367e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013682:	f043 0301 	orr.w	r3, r3, #1
 8013686:	b2da      	uxtb	r2, r3
 8013688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801368a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801368e:	68ba      	ldr	r2, [r7, #8]
 8013690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013692:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013696:	699b      	ldr	r3, [r3, #24]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d10a      	bne.n	80136b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a0:	f383 8811 	msr	BASEPRI, r3
 80136a4:	f3bf 8f6f 	isb	sy
 80136a8:	f3bf 8f4f 	dsb	sy
 80136ac:	617b      	str	r3, [r7, #20]
}
 80136ae:	bf00      	nop
 80136b0:	e7fe      	b.n	80136b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80136b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b4:	699a      	ldr	r2, [r3, #24]
 80136b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b8:	18d1      	adds	r1, r2, r3
 80136ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136c0:	f7ff ff06 	bl	80134d0 <prvInsertTimerInActiveList>
					break;
 80136c4:	e015      	b.n	80136f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80136c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136cc:	f003 0302 	and.w	r3, r3, #2
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d103      	bne.n	80136dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80136d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136d6:	f000 fbfb 	bl	8013ed0 <vPortFree>
 80136da:	e00a      	b.n	80136f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80136dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136e2:	f023 0301 	bic.w	r3, r3, #1
 80136e6:	b2da      	uxtb	r2, r3
 80136e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80136ee:	e000      	b.n	80136f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80136f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80136f2:	4b08      	ldr	r3, [pc, #32]	; (8013714 <prvProcessReceivedCommands+0x1c0>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	1d39      	adds	r1, r7, #4
 80136f8:	2200      	movs	r2, #0
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7fe fb58 	bl	8011db0 <xQueueReceive>
 8013700:	4603      	mov	r3, r0
 8013702:	2b00      	cmp	r3, #0
 8013704:	f47f af2a 	bne.w	801355c <prvProcessReceivedCommands+0x8>
	}
}
 8013708:	bf00      	nop
 801370a:	bf00      	nop
 801370c:	3730      	adds	r7, #48	; 0x30
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}
 8013712:	bf00      	nop
 8013714:	240014bc 	.word	0x240014bc

08013718 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b088      	sub	sp, #32
 801371c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801371e:	e048      	b.n	80137b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013720:	4b2d      	ldr	r3, [pc, #180]	; (80137d8 <prvSwitchTimerLists+0xc0>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	68db      	ldr	r3, [r3, #12]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801372a:	4b2b      	ldr	r3, [pc, #172]	; (80137d8 <prvSwitchTimerLists+0xc0>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	68db      	ldr	r3, [r3, #12]
 8013730:	68db      	ldr	r3, [r3, #12]
 8013732:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	3304      	adds	r3, #4
 8013738:	4618      	mov	r0, r3
 801373a:	f7fe f837 	bl	80117ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	6a1b      	ldr	r3, [r3, #32]
 8013742:	68f8      	ldr	r0, [r7, #12]
 8013744:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801374c:	f003 0304 	and.w	r3, r3, #4
 8013750:	2b00      	cmp	r3, #0
 8013752:	d02e      	beq.n	80137b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	699b      	ldr	r3, [r3, #24]
 8013758:	693a      	ldr	r2, [r7, #16]
 801375a:	4413      	add	r3, r2
 801375c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801375e:	68ba      	ldr	r2, [r7, #8]
 8013760:	693b      	ldr	r3, [r7, #16]
 8013762:	429a      	cmp	r2, r3
 8013764:	d90e      	bls.n	8013784 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	68ba      	ldr	r2, [r7, #8]
 801376a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	68fa      	ldr	r2, [r7, #12]
 8013770:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013772:	4b19      	ldr	r3, [pc, #100]	; (80137d8 <prvSwitchTimerLists+0xc0>)
 8013774:	681a      	ldr	r2, [r3, #0]
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	3304      	adds	r3, #4
 801377a:	4619      	mov	r1, r3
 801377c:	4610      	mov	r0, r2
 801377e:	f7fd ffdc 	bl	801173a <vListInsert>
 8013782:	e016      	b.n	80137b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013784:	2300      	movs	r3, #0
 8013786:	9300      	str	r3, [sp, #0]
 8013788:	2300      	movs	r3, #0
 801378a:	693a      	ldr	r2, [r7, #16]
 801378c:	2100      	movs	r1, #0
 801378e:	68f8      	ldr	r0, [r7, #12]
 8013790:	f7ff fd60 	bl	8013254 <xTimerGenericCommand>
 8013794:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d10a      	bne.n	80137b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137a0:	f383 8811 	msr	BASEPRI, r3
 80137a4:	f3bf 8f6f 	isb	sy
 80137a8:	f3bf 8f4f 	dsb	sy
 80137ac:	603b      	str	r3, [r7, #0]
}
 80137ae:	bf00      	nop
 80137b0:	e7fe      	b.n	80137b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80137b2:	4b09      	ldr	r3, [pc, #36]	; (80137d8 <prvSwitchTimerLists+0xc0>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d1b1      	bne.n	8013720 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80137bc:	4b06      	ldr	r3, [pc, #24]	; (80137d8 <prvSwitchTimerLists+0xc0>)
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80137c2:	4b06      	ldr	r3, [pc, #24]	; (80137dc <prvSwitchTimerLists+0xc4>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	4a04      	ldr	r2, [pc, #16]	; (80137d8 <prvSwitchTimerLists+0xc0>)
 80137c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80137ca:	4a04      	ldr	r2, [pc, #16]	; (80137dc <prvSwitchTimerLists+0xc4>)
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	6013      	str	r3, [r2, #0]
}
 80137d0:	bf00      	nop
 80137d2:	3718      	adds	r7, #24
 80137d4:	46bd      	mov	sp, r7
 80137d6:	bd80      	pop	{r7, pc}
 80137d8:	240014b4 	.word	0x240014b4
 80137dc:	240014b8 	.word	0x240014b8

080137e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80137e6:	f000 f985 	bl	8013af4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80137ea:	4b15      	ldr	r3, [pc, #84]	; (8013840 <prvCheckForValidListAndQueue+0x60>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d120      	bne.n	8013834 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80137f2:	4814      	ldr	r0, [pc, #80]	; (8013844 <prvCheckForValidListAndQueue+0x64>)
 80137f4:	f7fd ff50 	bl	8011698 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80137f8:	4813      	ldr	r0, [pc, #76]	; (8013848 <prvCheckForValidListAndQueue+0x68>)
 80137fa:	f7fd ff4d 	bl	8011698 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80137fe:	4b13      	ldr	r3, [pc, #76]	; (801384c <prvCheckForValidListAndQueue+0x6c>)
 8013800:	4a10      	ldr	r2, [pc, #64]	; (8013844 <prvCheckForValidListAndQueue+0x64>)
 8013802:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013804:	4b12      	ldr	r3, [pc, #72]	; (8013850 <prvCheckForValidListAndQueue+0x70>)
 8013806:	4a10      	ldr	r2, [pc, #64]	; (8013848 <prvCheckForValidListAndQueue+0x68>)
 8013808:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801380a:	2300      	movs	r3, #0
 801380c:	9300      	str	r3, [sp, #0]
 801380e:	4b11      	ldr	r3, [pc, #68]	; (8013854 <prvCheckForValidListAndQueue+0x74>)
 8013810:	4a11      	ldr	r2, [pc, #68]	; (8013858 <prvCheckForValidListAndQueue+0x78>)
 8013812:	2110      	movs	r1, #16
 8013814:	200a      	movs	r0, #10
 8013816:	f7fe f85b 	bl	80118d0 <xQueueGenericCreateStatic>
 801381a:	4603      	mov	r3, r0
 801381c:	4a08      	ldr	r2, [pc, #32]	; (8013840 <prvCheckForValidListAndQueue+0x60>)
 801381e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013820:	4b07      	ldr	r3, [pc, #28]	; (8013840 <prvCheckForValidListAndQueue+0x60>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d005      	beq.n	8013834 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013828:	4b05      	ldr	r3, [pc, #20]	; (8013840 <prvCheckForValidListAndQueue+0x60>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	490b      	ldr	r1, [pc, #44]	; (801385c <prvCheckForValidListAndQueue+0x7c>)
 801382e:	4618      	mov	r0, r3
 8013830:	f7fe fcae 	bl	8012190 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013834:	f000 f98e 	bl	8013b54 <vPortExitCritical>
}
 8013838:	bf00      	nop
 801383a:	46bd      	mov	sp, r7
 801383c:	bd80      	pop	{r7, pc}
 801383e:	bf00      	nop
 8013840:	240014bc 	.word	0x240014bc
 8013844:	2400148c 	.word	0x2400148c
 8013848:	240014a0 	.word	0x240014a0
 801384c:	240014b4 	.word	0x240014b4
 8013850:	240014b8 	.word	0x240014b8
 8013854:	24001568 	.word	0x24001568
 8013858:	240014c8 	.word	0x240014c8
 801385c:	08014dd8 	.word	0x08014dd8

08013860 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013860:	b580      	push	{r7, lr}
 8013862:	b08a      	sub	sp, #40	; 0x28
 8013864:	af00      	add	r7, sp, #0
 8013866:	60f8      	str	r0, [r7, #12]
 8013868:	60b9      	str	r1, [r7, #8]
 801386a:	607a      	str	r2, [r7, #4]
 801386c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801386e:	f06f 0301 	mvn.w	r3, #1
 8013872:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8013878:	68bb      	ldr	r3, [r7, #8]
 801387a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013880:	4b06      	ldr	r3, [pc, #24]	; (801389c <xTimerPendFunctionCallFromISR+0x3c>)
 8013882:	6818      	ldr	r0, [r3, #0]
 8013884:	f107 0114 	add.w	r1, r7, #20
 8013888:	2300      	movs	r3, #0
 801388a:	683a      	ldr	r2, [r7, #0]
 801388c:	f7fe f9f4 	bl	8011c78 <xQueueGenericSendFromISR>
 8013890:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8013892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8013894:	4618      	mov	r0, r3
 8013896:	3728      	adds	r7, #40	; 0x28
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	240014bc 	.word	0x240014bc

080138a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80138a0:	b480      	push	{r7}
 80138a2:	b085      	sub	sp, #20
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	60f8      	str	r0, [r7, #12]
 80138a8:	60b9      	str	r1, [r7, #8]
 80138aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	3b04      	subs	r3, #4
 80138b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80138b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	3b04      	subs	r3, #4
 80138be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80138c0:	68bb      	ldr	r3, [r7, #8]
 80138c2:	f023 0201 	bic.w	r2, r3, #1
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	3b04      	subs	r3, #4
 80138ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80138d0:	4a0c      	ldr	r2, [pc, #48]	; (8013904 <pxPortInitialiseStack+0x64>)
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	3b14      	subs	r3, #20
 80138da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80138dc:	687a      	ldr	r2, [r7, #4]
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	3b04      	subs	r3, #4
 80138e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	f06f 0202 	mvn.w	r2, #2
 80138ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	3b20      	subs	r3, #32
 80138f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80138f6:	68fb      	ldr	r3, [r7, #12]
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3714      	adds	r7, #20
 80138fc:	46bd      	mov	sp, r7
 80138fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013902:	4770      	bx	lr
 8013904:	08013909 	.word	0x08013909

08013908 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013908:	b480      	push	{r7}
 801390a:	b085      	sub	sp, #20
 801390c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801390e:	2300      	movs	r3, #0
 8013910:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013912:	4b12      	ldr	r3, [pc, #72]	; (801395c <prvTaskExitError+0x54>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801391a:	d00a      	beq.n	8013932 <prvTaskExitError+0x2a>
	__asm volatile
 801391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013920:	f383 8811 	msr	BASEPRI, r3
 8013924:	f3bf 8f6f 	isb	sy
 8013928:	f3bf 8f4f 	dsb	sy
 801392c:	60fb      	str	r3, [r7, #12]
}
 801392e:	bf00      	nop
 8013930:	e7fe      	b.n	8013930 <prvTaskExitError+0x28>
	__asm volatile
 8013932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013936:	f383 8811 	msr	BASEPRI, r3
 801393a:	f3bf 8f6f 	isb	sy
 801393e:	f3bf 8f4f 	dsb	sy
 8013942:	60bb      	str	r3, [r7, #8]
}
 8013944:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013946:	bf00      	nop
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d0fc      	beq.n	8013948 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801394e:	bf00      	nop
 8013950:	bf00      	nop
 8013952:	3714      	adds	r7, #20
 8013954:	46bd      	mov	sp, r7
 8013956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395a:	4770      	bx	lr
 801395c:	24000098 	.word	0x24000098

08013960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013960:	4b07      	ldr	r3, [pc, #28]	; (8013980 <pxCurrentTCBConst2>)
 8013962:	6819      	ldr	r1, [r3, #0]
 8013964:	6808      	ldr	r0, [r1, #0]
 8013966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801396a:	f380 8809 	msr	PSP, r0
 801396e:	f3bf 8f6f 	isb	sy
 8013972:	f04f 0000 	mov.w	r0, #0
 8013976:	f380 8811 	msr	BASEPRI, r0
 801397a:	4770      	bx	lr
 801397c:	f3af 8000 	nop.w

08013980 <pxCurrentTCBConst2>:
 8013980:	24000f8c 	.word	0x24000f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013984:	bf00      	nop
 8013986:	bf00      	nop

08013988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013988:	4808      	ldr	r0, [pc, #32]	; (80139ac <prvPortStartFirstTask+0x24>)
 801398a:	6800      	ldr	r0, [r0, #0]
 801398c:	6800      	ldr	r0, [r0, #0]
 801398e:	f380 8808 	msr	MSP, r0
 8013992:	f04f 0000 	mov.w	r0, #0
 8013996:	f380 8814 	msr	CONTROL, r0
 801399a:	b662      	cpsie	i
 801399c:	b661      	cpsie	f
 801399e:	f3bf 8f4f 	dsb	sy
 80139a2:	f3bf 8f6f 	isb	sy
 80139a6:	df00      	svc	0
 80139a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80139aa:	bf00      	nop
 80139ac:	e000ed08 	.word	0xe000ed08

080139b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b086      	sub	sp, #24
 80139b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80139b6:	4b46      	ldr	r3, [pc, #280]	; (8013ad0 <xPortStartScheduler+0x120>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	4a46      	ldr	r2, [pc, #280]	; (8013ad4 <xPortStartScheduler+0x124>)
 80139bc:	4293      	cmp	r3, r2
 80139be:	d10a      	bne.n	80139d6 <xPortStartScheduler+0x26>
	__asm volatile
 80139c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139c4:	f383 8811 	msr	BASEPRI, r3
 80139c8:	f3bf 8f6f 	isb	sy
 80139cc:	f3bf 8f4f 	dsb	sy
 80139d0:	613b      	str	r3, [r7, #16]
}
 80139d2:	bf00      	nop
 80139d4:	e7fe      	b.n	80139d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80139d6:	4b3e      	ldr	r3, [pc, #248]	; (8013ad0 <xPortStartScheduler+0x120>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	4a3f      	ldr	r2, [pc, #252]	; (8013ad8 <xPortStartScheduler+0x128>)
 80139dc:	4293      	cmp	r3, r2
 80139de:	d10a      	bne.n	80139f6 <xPortStartScheduler+0x46>
	__asm volatile
 80139e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139e4:	f383 8811 	msr	BASEPRI, r3
 80139e8:	f3bf 8f6f 	isb	sy
 80139ec:	f3bf 8f4f 	dsb	sy
 80139f0:	60fb      	str	r3, [r7, #12]
}
 80139f2:	bf00      	nop
 80139f4:	e7fe      	b.n	80139f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80139f6:	4b39      	ldr	r3, [pc, #228]	; (8013adc <xPortStartScheduler+0x12c>)
 80139f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80139fa:	697b      	ldr	r3, [r7, #20]
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	b2db      	uxtb	r3, r3
 8013a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013a02:	697b      	ldr	r3, [r7, #20]
 8013a04:	22ff      	movs	r2, #255	; 0xff
 8013a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	781b      	ldrb	r3, [r3, #0]
 8013a0c:	b2db      	uxtb	r3, r3
 8013a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013a10:	78fb      	ldrb	r3, [r7, #3]
 8013a12:	b2db      	uxtb	r3, r3
 8013a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013a18:	b2da      	uxtb	r2, r3
 8013a1a:	4b31      	ldr	r3, [pc, #196]	; (8013ae0 <xPortStartScheduler+0x130>)
 8013a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013a1e:	4b31      	ldr	r3, [pc, #196]	; (8013ae4 <xPortStartScheduler+0x134>)
 8013a20:	2207      	movs	r2, #7
 8013a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013a24:	e009      	b.n	8013a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013a26:	4b2f      	ldr	r3, [pc, #188]	; (8013ae4 <xPortStartScheduler+0x134>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	3b01      	subs	r3, #1
 8013a2c:	4a2d      	ldr	r2, [pc, #180]	; (8013ae4 <xPortStartScheduler+0x134>)
 8013a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013a30:	78fb      	ldrb	r3, [r7, #3]
 8013a32:	b2db      	uxtb	r3, r3
 8013a34:	005b      	lsls	r3, r3, #1
 8013a36:	b2db      	uxtb	r3, r3
 8013a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013a3a:	78fb      	ldrb	r3, [r7, #3]
 8013a3c:	b2db      	uxtb	r3, r3
 8013a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a42:	2b80      	cmp	r3, #128	; 0x80
 8013a44:	d0ef      	beq.n	8013a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013a46:	4b27      	ldr	r3, [pc, #156]	; (8013ae4 <xPortStartScheduler+0x134>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	f1c3 0307 	rsb	r3, r3, #7
 8013a4e:	2b04      	cmp	r3, #4
 8013a50:	d00a      	beq.n	8013a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8013a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a56:	f383 8811 	msr	BASEPRI, r3
 8013a5a:	f3bf 8f6f 	isb	sy
 8013a5e:	f3bf 8f4f 	dsb	sy
 8013a62:	60bb      	str	r3, [r7, #8]
}
 8013a64:	bf00      	nop
 8013a66:	e7fe      	b.n	8013a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013a68:	4b1e      	ldr	r3, [pc, #120]	; (8013ae4 <xPortStartScheduler+0x134>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	021b      	lsls	r3, r3, #8
 8013a6e:	4a1d      	ldr	r2, [pc, #116]	; (8013ae4 <xPortStartScheduler+0x134>)
 8013a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013a72:	4b1c      	ldr	r3, [pc, #112]	; (8013ae4 <xPortStartScheduler+0x134>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013a7a:	4a1a      	ldr	r2, [pc, #104]	; (8013ae4 <xPortStartScheduler+0x134>)
 8013a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	b2da      	uxtb	r2, r3
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013a86:	4b18      	ldr	r3, [pc, #96]	; (8013ae8 <xPortStartScheduler+0x138>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	4a17      	ldr	r2, [pc, #92]	; (8013ae8 <xPortStartScheduler+0x138>)
 8013a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013a92:	4b15      	ldr	r3, [pc, #84]	; (8013ae8 <xPortStartScheduler+0x138>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	4a14      	ldr	r2, [pc, #80]	; (8013ae8 <xPortStartScheduler+0x138>)
 8013a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013a9e:	f000 f8dd 	bl	8013c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013aa2:	4b12      	ldr	r3, [pc, #72]	; (8013aec <xPortStartScheduler+0x13c>)
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013aa8:	f000 f8fc 	bl	8013ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013aac:	4b10      	ldr	r3, [pc, #64]	; (8013af0 <xPortStartScheduler+0x140>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	4a0f      	ldr	r2, [pc, #60]	; (8013af0 <xPortStartScheduler+0x140>)
 8013ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013ab8:	f7ff ff66 	bl	8013988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013abc:	f7fe ff80 	bl	80129c0 <vTaskSwitchContext>
	prvTaskExitError();
 8013ac0:	f7ff ff22 	bl	8013908 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013ac4:	2300      	movs	r3, #0
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3718      	adds	r7, #24
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
 8013ace:	bf00      	nop
 8013ad0:	e000ed00 	.word	0xe000ed00
 8013ad4:	410fc271 	.word	0x410fc271
 8013ad8:	410fc270 	.word	0x410fc270
 8013adc:	e000e400 	.word	0xe000e400
 8013ae0:	240015b8 	.word	0x240015b8
 8013ae4:	240015bc 	.word	0x240015bc
 8013ae8:	e000ed20 	.word	0xe000ed20
 8013aec:	24000098 	.word	0x24000098
 8013af0:	e000ef34 	.word	0xe000ef34

08013af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013af4:	b480      	push	{r7}
 8013af6:	b083      	sub	sp, #12
 8013af8:	af00      	add	r7, sp, #0
	__asm volatile
 8013afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013afe:	f383 8811 	msr	BASEPRI, r3
 8013b02:	f3bf 8f6f 	isb	sy
 8013b06:	f3bf 8f4f 	dsb	sy
 8013b0a:	607b      	str	r3, [r7, #4]
}
 8013b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013b0e:	4b0f      	ldr	r3, [pc, #60]	; (8013b4c <vPortEnterCritical+0x58>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	3301      	adds	r3, #1
 8013b14:	4a0d      	ldr	r2, [pc, #52]	; (8013b4c <vPortEnterCritical+0x58>)
 8013b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013b18:	4b0c      	ldr	r3, [pc, #48]	; (8013b4c <vPortEnterCritical+0x58>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	2b01      	cmp	r3, #1
 8013b1e:	d10f      	bne.n	8013b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013b20:	4b0b      	ldr	r3, [pc, #44]	; (8013b50 <vPortEnterCritical+0x5c>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	b2db      	uxtb	r3, r3
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d00a      	beq.n	8013b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8013b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b2e:	f383 8811 	msr	BASEPRI, r3
 8013b32:	f3bf 8f6f 	isb	sy
 8013b36:	f3bf 8f4f 	dsb	sy
 8013b3a:	603b      	str	r3, [r7, #0]
}
 8013b3c:	bf00      	nop
 8013b3e:	e7fe      	b.n	8013b3e <vPortEnterCritical+0x4a>
	}
}
 8013b40:	bf00      	nop
 8013b42:	370c      	adds	r7, #12
 8013b44:	46bd      	mov	sp, r7
 8013b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4a:	4770      	bx	lr
 8013b4c:	24000098 	.word	0x24000098
 8013b50:	e000ed04 	.word	0xe000ed04

08013b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013b54:	b480      	push	{r7}
 8013b56:	b083      	sub	sp, #12
 8013b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013b5a:	4b12      	ldr	r3, [pc, #72]	; (8013ba4 <vPortExitCritical+0x50>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d10a      	bne.n	8013b78 <vPortExitCritical+0x24>
	__asm volatile
 8013b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b66:	f383 8811 	msr	BASEPRI, r3
 8013b6a:	f3bf 8f6f 	isb	sy
 8013b6e:	f3bf 8f4f 	dsb	sy
 8013b72:	607b      	str	r3, [r7, #4]
}
 8013b74:	bf00      	nop
 8013b76:	e7fe      	b.n	8013b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013b78:	4b0a      	ldr	r3, [pc, #40]	; (8013ba4 <vPortExitCritical+0x50>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	3b01      	subs	r3, #1
 8013b7e:	4a09      	ldr	r2, [pc, #36]	; (8013ba4 <vPortExitCritical+0x50>)
 8013b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013b82:	4b08      	ldr	r3, [pc, #32]	; (8013ba4 <vPortExitCritical+0x50>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d105      	bne.n	8013b96 <vPortExitCritical+0x42>
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	f383 8811 	msr	BASEPRI, r3
}
 8013b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013b96:	bf00      	nop
 8013b98:	370c      	adds	r7, #12
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba0:	4770      	bx	lr
 8013ba2:	bf00      	nop
 8013ba4:	24000098 	.word	0x24000098
	...

08013bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013bb0:	f3ef 8009 	mrs	r0, PSP
 8013bb4:	f3bf 8f6f 	isb	sy
 8013bb8:	4b15      	ldr	r3, [pc, #84]	; (8013c10 <pxCurrentTCBConst>)
 8013bba:	681a      	ldr	r2, [r3, #0]
 8013bbc:	f01e 0f10 	tst.w	lr, #16
 8013bc0:	bf08      	it	eq
 8013bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bca:	6010      	str	r0, [r2, #0]
 8013bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013bd4:	f380 8811 	msr	BASEPRI, r0
 8013bd8:	f3bf 8f4f 	dsb	sy
 8013bdc:	f3bf 8f6f 	isb	sy
 8013be0:	f7fe feee 	bl	80129c0 <vTaskSwitchContext>
 8013be4:	f04f 0000 	mov.w	r0, #0
 8013be8:	f380 8811 	msr	BASEPRI, r0
 8013bec:	bc09      	pop	{r0, r3}
 8013bee:	6819      	ldr	r1, [r3, #0]
 8013bf0:	6808      	ldr	r0, [r1, #0]
 8013bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bf6:	f01e 0f10 	tst.w	lr, #16
 8013bfa:	bf08      	it	eq
 8013bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013c00:	f380 8809 	msr	PSP, r0
 8013c04:	f3bf 8f6f 	isb	sy
 8013c08:	4770      	bx	lr
 8013c0a:	bf00      	nop
 8013c0c:	f3af 8000 	nop.w

08013c10 <pxCurrentTCBConst>:
 8013c10:	24000f8c 	.word	0x24000f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013c14:	bf00      	nop
 8013c16:	bf00      	nop

08013c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8013c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c22:	f383 8811 	msr	BASEPRI, r3
 8013c26:	f3bf 8f6f 	isb	sy
 8013c2a:	f3bf 8f4f 	dsb	sy
 8013c2e:	607b      	str	r3, [r7, #4]
}
 8013c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013c32:	f7fe fe03 	bl	801283c <xTaskIncrementTick>
 8013c36:	4603      	mov	r3, r0
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d003      	beq.n	8013c44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013c3c:	4b06      	ldr	r3, [pc, #24]	; (8013c58 <xPortSysTickHandler+0x40>)
 8013c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c42:	601a      	str	r2, [r3, #0]
 8013c44:	2300      	movs	r3, #0
 8013c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013c48:	683b      	ldr	r3, [r7, #0]
 8013c4a:	f383 8811 	msr	BASEPRI, r3
}
 8013c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013c50:	bf00      	nop
 8013c52:	3708      	adds	r7, #8
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}
 8013c58:	e000ed04 	.word	0xe000ed04

08013c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013c5c:	b480      	push	{r7}
 8013c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013c60:	4b0b      	ldr	r3, [pc, #44]	; (8013c90 <vPortSetupTimerInterrupt+0x34>)
 8013c62:	2200      	movs	r2, #0
 8013c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013c66:	4b0b      	ldr	r3, [pc, #44]	; (8013c94 <vPortSetupTimerInterrupt+0x38>)
 8013c68:	2200      	movs	r2, #0
 8013c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013c6c:	4b0a      	ldr	r3, [pc, #40]	; (8013c98 <vPortSetupTimerInterrupt+0x3c>)
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	4a0a      	ldr	r2, [pc, #40]	; (8013c9c <vPortSetupTimerInterrupt+0x40>)
 8013c72:	fba2 2303 	umull	r2, r3, r2, r3
 8013c76:	099b      	lsrs	r3, r3, #6
 8013c78:	4a09      	ldr	r2, [pc, #36]	; (8013ca0 <vPortSetupTimerInterrupt+0x44>)
 8013c7a:	3b01      	subs	r3, #1
 8013c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013c7e:	4b04      	ldr	r3, [pc, #16]	; (8013c90 <vPortSetupTimerInterrupt+0x34>)
 8013c80:	2207      	movs	r2, #7
 8013c82:	601a      	str	r2, [r3, #0]
}
 8013c84:	bf00      	nop
 8013c86:	46bd      	mov	sp, r7
 8013c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8c:	4770      	bx	lr
 8013c8e:	bf00      	nop
 8013c90:	e000e010 	.word	0xe000e010
 8013c94:	e000e018 	.word	0xe000e018
 8013c98:	24000088 	.word	0x24000088
 8013c9c:	10624dd3 	.word	0x10624dd3
 8013ca0:	e000e014 	.word	0xe000e014

08013ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013cb4 <vPortEnableVFP+0x10>
 8013ca8:	6801      	ldr	r1, [r0, #0]
 8013caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013cae:	6001      	str	r1, [r0, #0]
 8013cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013cb2:	bf00      	nop
 8013cb4:	e000ed88 	.word	0xe000ed88

08013cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013cb8:	b480      	push	{r7}
 8013cba:	b085      	sub	sp, #20
 8013cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013cbe:	f3ef 8305 	mrs	r3, IPSR
 8013cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	2b0f      	cmp	r3, #15
 8013cc8:	d914      	bls.n	8013cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013cca:	4a17      	ldr	r2, [pc, #92]	; (8013d28 <vPortValidateInterruptPriority+0x70>)
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	4413      	add	r3, r2
 8013cd0:	781b      	ldrb	r3, [r3, #0]
 8013cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013cd4:	4b15      	ldr	r3, [pc, #84]	; (8013d2c <vPortValidateInterruptPriority+0x74>)
 8013cd6:	781b      	ldrb	r3, [r3, #0]
 8013cd8:	7afa      	ldrb	r2, [r7, #11]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d20a      	bcs.n	8013cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce2:	f383 8811 	msr	BASEPRI, r3
 8013ce6:	f3bf 8f6f 	isb	sy
 8013cea:	f3bf 8f4f 	dsb	sy
 8013cee:	607b      	str	r3, [r7, #4]
}
 8013cf0:	bf00      	nop
 8013cf2:	e7fe      	b.n	8013cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013cf4:	4b0e      	ldr	r3, [pc, #56]	; (8013d30 <vPortValidateInterruptPriority+0x78>)
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013cfc:	4b0d      	ldr	r3, [pc, #52]	; (8013d34 <vPortValidateInterruptPriority+0x7c>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	429a      	cmp	r2, r3
 8013d02:	d90a      	bls.n	8013d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d08:	f383 8811 	msr	BASEPRI, r3
 8013d0c:	f3bf 8f6f 	isb	sy
 8013d10:	f3bf 8f4f 	dsb	sy
 8013d14:	603b      	str	r3, [r7, #0]
}
 8013d16:	bf00      	nop
 8013d18:	e7fe      	b.n	8013d18 <vPortValidateInterruptPriority+0x60>
	}
 8013d1a:	bf00      	nop
 8013d1c:	3714      	adds	r7, #20
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d24:	4770      	bx	lr
 8013d26:	bf00      	nop
 8013d28:	e000e3f0 	.word	0xe000e3f0
 8013d2c:	240015b8 	.word	0x240015b8
 8013d30:	e000ed0c 	.word	0xe000ed0c
 8013d34:	240015bc 	.word	0x240015bc

08013d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b08a      	sub	sp, #40	; 0x28
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013d40:	2300      	movs	r3, #0
 8013d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013d44:	f7fe fcbe 	bl	80126c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013d48:	4b5b      	ldr	r3, [pc, #364]	; (8013eb8 <pvPortMalloc+0x180>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d101      	bne.n	8013d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013d50:	f000 f920 	bl	8013f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013d54:	4b59      	ldr	r3, [pc, #356]	; (8013ebc <pvPortMalloc+0x184>)
 8013d56:	681a      	ldr	r2, [r3, #0]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	4013      	ands	r3, r2
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	f040 8093 	bne.w	8013e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d01d      	beq.n	8013da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013d68:	2208      	movs	r2, #8
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	4413      	add	r3, r2
 8013d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f003 0307 	and.w	r3, r3, #7
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d014      	beq.n	8013da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f023 0307 	bic.w	r3, r3, #7
 8013d80:	3308      	adds	r3, #8
 8013d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f003 0307 	and.w	r3, r3, #7
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d00a      	beq.n	8013da4 <pvPortMalloc+0x6c>
	__asm volatile
 8013d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d92:	f383 8811 	msr	BASEPRI, r3
 8013d96:	f3bf 8f6f 	isb	sy
 8013d9a:	f3bf 8f4f 	dsb	sy
 8013d9e:	617b      	str	r3, [r7, #20]
}
 8013da0:	bf00      	nop
 8013da2:	e7fe      	b.n	8013da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d06e      	beq.n	8013e88 <pvPortMalloc+0x150>
 8013daa:	4b45      	ldr	r3, [pc, #276]	; (8013ec0 <pvPortMalloc+0x188>)
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	d869      	bhi.n	8013e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013db4:	4b43      	ldr	r3, [pc, #268]	; (8013ec4 <pvPortMalloc+0x18c>)
 8013db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013db8:	4b42      	ldr	r3, [pc, #264]	; (8013ec4 <pvPortMalloc+0x18c>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013dbe:	e004      	b.n	8013dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dcc:	685b      	ldr	r3, [r3, #4]
 8013dce:	687a      	ldr	r2, [r7, #4]
 8013dd0:	429a      	cmp	r2, r3
 8013dd2:	d903      	bls.n	8013ddc <pvPortMalloc+0xa4>
 8013dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d1f1      	bne.n	8013dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013ddc:	4b36      	ldr	r3, [pc, #216]	; (8013eb8 <pvPortMalloc+0x180>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d050      	beq.n	8013e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013de6:	6a3b      	ldr	r3, [r7, #32]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	2208      	movs	r2, #8
 8013dec:	4413      	add	r3, r2
 8013dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	6a3b      	ldr	r3, [r7, #32]
 8013df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dfa:	685a      	ldr	r2, [r3, #4]
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	1ad2      	subs	r2, r2, r3
 8013e00:	2308      	movs	r3, #8
 8013e02:	005b      	lsls	r3, r3, #1
 8013e04:	429a      	cmp	r2, r3
 8013e06:	d91f      	bls.n	8013e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	4413      	add	r3, r2
 8013e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013e10:	69bb      	ldr	r3, [r7, #24]
 8013e12:	f003 0307 	and.w	r3, r3, #7
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d00a      	beq.n	8013e30 <pvPortMalloc+0xf8>
	__asm volatile
 8013e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1e:	f383 8811 	msr	BASEPRI, r3
 8013e22:	f3bf 8f6f 	isb	sy
 8013e26:	f3bf 8f4f 	dsb	sy
 8013e2a:	613b      	str	r3, [r7, #16]
}
 8013e2c:	bf00      	nop
 8013e2e:	e7fe      	b.n	8013e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e32:	685a      	ldr	r2, [r3, #4]
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	1ad2      	subs	r2, r2, r3
 8013e38:	69bb      	ldr	r3, [r7, #24]
 8013e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013e42:	69b8      	ldr	r0, [r7, #24]
 8013e44:	f000 f908 	bl	8014058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013e48:	4b1d      	ldr	r3, [pc, #116]	; (8013ec0 <pvPortMalloc+0x188>)
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e4e:	685b      	ldr	r3, [r3, #4]
 8013e50:	1ad3      	subs	r3, r2, r3
 8013e52:	4a1b      	ldr	r2, [pc, #108]	; (8013ec0 <pvPortMalloc+0x188>)
 8013e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013e56:	4b1a      	ldr	r3, [pc, #104]	; (8013ec0 <pvPortMalloc+0x188>)
 8013e58:	681a      	ldr	r2, [r3, #0]
 8013e5a:	4b1b      	ldr	r3, [pc, #108]	; (8013ec8 <pvPortMalloc+0x190>)
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	d203      	bcs.n	8013e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013e62:	4b17      	ldr	r3, [pc, #92]	; (8013ec0 <pvPortMalloc+0x188>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	4a18      	ldr	r2, [pc, #96]	; (8013ec8 <pvPortMalloc+0x190>)
 8013e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6c:	685a      	ldr	r2, [r3, #4]
 8013e6e:	4b13      	ldr	r3, [pc, #76]	; (8013ebc <pvPortMalloc+0x184>)
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	431a      	orrs	r2, r3
 8013e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013e7e:	4b13      	ldr	r3, [pc, #76]	; (8013ecc <pvPortMalloc+0x194>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	3301      	adds	r3, #1
 8013e84:	4a11      	ldr	r2, [pc, #68]	; (8013ecc <pvPortMalloc+0x194>)
 8013e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013e88:	f7fe fc2a 	bl	80126e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013e8c:	69fb      	ldr	r3, [r7, #28]
 8013e8e:	f003 0307 	and.w	r3, r3, #7
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d00a      	beq.n	8013eac <pvPortMalloc+0x174>
	__asm volatile
 8013e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e9a:	f383 8811 	msr	BASEPRI, r3
 8013e9e:	f3bf 8f6f 	isb	sy
 8013ea2:	f3bf 8f4f 	dsb	sy
 8013ea6:	60fb      	str	r3, [r7, #12]
}
 8013ea8:	bf00      	nop
 8013eaa:	e7fe      	b.n	8013eaa <pvPortMalloc+0x172>
	return pvReturn;
 8013eac:	69fb      	ldr	r3, [r7, #28]
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3728      	adds	r7, #40	; 0x28
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	240051c8 	.word	0x240051c8
 8013ebc:	240051dc 	.word	0x240051dc
 8013ec0:	240051cc 	.word	0x240051cc
 8013ec4:	240051c0 	.word	0x240051c0
 8013ec8:	240051d0 	.word	0x240051d0
 8013ecc:	240051d4 	.word	0x240051d4

08013ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b086      	sub	sp, #24
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d04d      	beq.n	8013f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013ee2:	2308      	movs	r3, #8
 8013ee4:	425b      	negs	r3, r3
 8013ee6:	697a      	ldr	r2, [r7, #20]
 8013ee8:	4413      	add	r3, r2
 8013eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013ef0:	693b      	ldr	r3, [r7, #16]
 8013ef2:	685a      	ldr	r2, [r3, #4]
 8013ef4:	4b24      	ldr	r3, [pc, #144]	; (8013f88 <vPortFree+0xb8>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	4013      	ands	r3, r2
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d10a      	bne.n	8013f14 <vPortFree+0x44>
	__asm volatile
 8013efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f02:	f383 8811 	msr	BASEPRI, r3
 8013f06:	f3bf 8f6f 	isb	sy
 8013f0a:	f3bf 8f4f 	dsb	sy
 8013f0e:	60fb      	str	r3, [r7, #12]
}
 8013f10:	bf00      	nop
 8013f12:	e7fe      	b.n	8013f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013f14:	693b      	ldr	r3, [r7, #16]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d00a      	beq.n	8013f32 <vPortFree+0x62>
	__asm volatile
 8013f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f20:	f383 8811 	msr	BASEPRI, r3
 8013f24:	f3bf 8f6f 	isb	sy
 8013f28:	f3bf 8f4f 	dsb	sy
 8013f2c:	60bb      	str	r3, [r7, #8]
}
 8013f2e:	bf00      	nop
 8013f30:	e7fe      	b.n	8013f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	685a      	ldr	r2, [r3, #4]
 8013f36:	4b14      	ldr	r3, [pc, #80]	; (8013f88 <vPortFree+0xb8>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	4013      	ands	r3, r2
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d01e      	beq.n	8013f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013f40:	693b      	ldr	r3, [r7, #16]
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d11a      	bne.n	8013f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013f48:	693b      	ldr	r3, [r7, #16]
 8013f4a:	685a      	ldr	r2, [r3, #4]
 8013f4c:	4b0e      	ldr	r3, [pc, #56]	; (8013f88 <vPortFree+0xb8>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	43db      	mvns	r3, r3
 8013f52:	401a      	ands	r2, r3
 8013f54:	693b      	ldr	r3, [r7, #16]
 8013f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013f58:	f7fe fbb4 	bl	80126c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013f5c:	693b      	ldr	r3, [r7, #16]
 8013f5e:	685a      	ldr	r2, [r3, #4]
 8013f60:	4b0a      	ldr	r3, [pc, #40]	; (8013f8c <vPortFree+0xbc>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	4413      	add	r3, r2
 8013f66:	4a09      	ldr	r2, [pc, #36]	; (8013f8c <vPortFree+0xbc>)
 8013f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013f6a:	6938      	ldr	r0, [r7, #16]
 8013f6c:	f000 f874 	bl	8014058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013f70:	4b07      	ldr	r3, [pc, #28]	; (8013f90 <vPortFree+0xc0>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	3301      	adds	r3, #1
 8013f76:	4a06      	ldr	r2, [pc, #24]	; (8013f90 <vPortFree+0xc0>)
 8013f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013f7a:	f7fe fbb1 	bl	80126e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013f7e:	bf00      	nop
 8013f80:	3718      	adds	r7, #24
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}
 8013f86:	bf00      	nop
 8013f88:	240051dc 	.word	0x240051dc
 8013f8c:	240051cc 	.word	0x240051cc
 8013f90:	240051d8 	.word	0x240051d8

08013f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013f94:	b480      	push	{r7}
 8013f96:	b085      	sub	sp, #20
 8013f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013fa0:	4b27      	ldr	r3, [pc, #156]	; (8014040 <prvHeapInit+0xac>)
 8013fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	f003 0307 	and.w	r3, r3, #7
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d00c      	beq.n	8013fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	3307      	adds	r3, #7
 8013fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	f023 0307 	bic.w	r3, r3, #7
 8013fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013fbc:	68ba      	ldr	r2, [r7, #8]
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	1ad3      	subs	r3, r2, r3
 8013fc2:	4a1f      	ldr	r2, [pc, #124]	; (8014040 <prvHeapInit+0xac>)
 8013fc4:	4413      	add	r3, r2
 8013fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013fcc:	4a1d      	ldr	r2, [pc, #116]	; (8014044 <prvHeapInit+0xb0>)
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013fd2:	4b1c      	ldr	r3, [pc, #112]	; (8014044 <prvHeapInit+0xb0>)
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	68ba      	ldr	r2, [r7, #8]
 8013fdc:	4413      	add	r3, r2
 8013fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013fe0:	2208      	movs	r2, #8
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	1a9b      	subs	r3, r3, r2
 8013fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	f023 0307 	bic.w	r3, r3, #7
 8013fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	4a15      	ldr	r2, [pc, #84]	; (8014048 <prvHeapInit+0xb4>)
 8013ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013ff6:	4b14      	ldr	r3, [pc, #80]	; (8014048 <prvHeapInit+0xb4>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013ffe:	4b12      	ldr	r3, [pc, #72]	; (8014048 <prvHeapInit+0xb4>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	2200      	movs	r2, #0
 8014004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	68fa      	ldr	r2, [r7, #12]
 801400e:	1ad2      	subs	r2, r2, r3
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014014:	4b0c      	ldr	r3, [pc, #48]	; (8014048 <prvHeapInit+0xb4>)
 8014016:	681a      	ldr	r2, [r3, #0]
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	685b      	ldr	r3, [r3, #4]
 8014020:	4a0a      	ldr	r2, [pc, #40]	; (801404c <prvHeapInit+0xb8>)
 8014022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	4a09      	ldr	r2, [pc, #36]	; (8014050 <prvHeapInit+0xbc>)
 801402a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801402c:	4b09      	ldr	r3, [pc, #36]	; (8014054 <prvHeapInit+0xc0>)
 801402e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014032:	601a      	str	r2, [r3, #0]
}
 8014034:	bf00      	nop
 8014036:	3714      	adds	r7, #20
 8014038:	46bd      	mov	sp, r7
 801403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403e:	4770      	bx	lr
 8014040:	240015c0 	.word	0x240015c0
 8014044:	240051c0 	.word	0x240051c0
 8014048:	240051c8 	.word	0x240051c8
 801404c:	240051d0 	.word	0x240051d0
 8014050:	240051cc 	.word	0x240051cc
 8014054:	240051dc 	.word	0x240051dc

08014058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014058:	b480      	push	{r7}
 801405a:	b085      	sub	sp, #20
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014060:	4b28      	ldr	r3, [pc, #160]	; (8014104 <prvInsertBlockIntoFreeList+0xac>)
 8014062:	60fb      	str	r3, [r7, #12]
 8014064:	e002      	b.n	801406c <prvInsertBlockIntoFreeList+0x14>
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	60fb      	str	r3, [r7, #12]
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	687a      	ldr	r2, [r7, #4]
 8014072:	429a      	cmp	r2, r3
 8014074:	d8f7      	bhi.n	8014066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	685b      	ldr	r3, [r3, #4]
 801407e:	68ba      	ldr	r2, [r7, #8]
 8014080:	4413      	add	r3, r2
 8014082:	687a      	ldr	r2, [r7, #4]
 8014084:	429a      	cmp	r2, r3
 8014086:	d108      	bne.n	801409a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	685a      	ldr	r2, [r3, #4]
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	441a      	add	r2, r3
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	685b      	ldr	r3, [r3, #4]
 80140a2:	68ba      	ldr	r2, [r7, #8]
 80140a4:	441a      	add	r2, r3
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d118      	bne.n	80140e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	4b15      	ldr	r3, [pc, #84]	; (8014108 <prvInsertBlockIntoFreeList+0xb0>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d00d      	beq.n	80140d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	685a      	ldr	r2, [r3, #4]
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	441a      	add	r2, r3
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	681a      	ldr	r2, [r3, #0]
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	601a      	str	r2, [r3, #0]
 80140d4:	e008      	b.n	80140e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80140d6:	4b0c      	ldr	r3, [pc, #48]	; (8014108 <prvInsertBlockIntoFreeList+0xb0>)
 80140d8:	681a      	ldr	r2, [r3, #0]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	601a      	str	r2, [r3, #0]
 80140de:	e003      	b.n	80140e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	681a      	ldr	r2, [r3, #0]
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80140e8:	68fa      	ldr	r2, [r7, #12]
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d002      	beq.n	80140f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	687a      	ldr	r2, [r7, #4]
 80140f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80140f6:	bf00      	nop
 80140f8:	3714      	adds	r7, #20
 80140fa:	46bd      	mov	sp, r7
 80140fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014100:	4770      	bx	lr
 8014102:	bf00      	nop
 8014104:	240051c0 	.word	0x240051c0
 8014108:	240051c8 	.word	0x240051c8

0801410c <__errno>:
 801410c:	4b01      	ldr	r3, [pc, #4]	; (8014114 <__errno+0x8>)
 801410e:	6818      	ldr	r0, [r3, #0]
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop
 8014114:	2400009c 	.word	0x2400009c

08014118 <__libc_init_array>:
 8014118:	b570      	push	{r4, r5, r6, lr}
 801411a:	4d0d      	ldr	r5, [pc, #52]	; (8014150 <__libc_init_array+0x38>)
 801411c:	4c0d      	ldr	r4, [pc, #52]	; (8014154 <__libc_init_array+0x3c>)
 801411e:	1b64      	subs	r4, r4, r5
 8014120:	10a4      	asrs	r4, r4, #2
 8014122:	2600      	movs	r6, #0
 8014124:	42a6      	cmp	r6, r4
 8014126:	d109      	bne.n	801413c <__libc_init_array+0x24>
 8014128:	4d0b      	ldr	r5, [pc, #44]	; (8014158 <__libc_init_array+0x40>)
 801412a:	4c0c      	ldr	r4, [pc, #48]	; (801415c <__libc_init_array+0x44>)
 801412c:	f000 fd2c 	bl	8014b88 <_init>
 8014130:	1b64      	subs	r4, r4, r5
 8014132:	10a4      	asrs	r4, r4, #2
 8014134:	2600      	movs	r6, #0
 8014136:	42a6      	cmp	r6, r4
 8014138:	d105      	bne.n	8014146 <__libc_init_array+0x2e>
 801413a:	bd70      	pop	{r4, r5, r6, pc}
 801413c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014140:	4798      	blx	r3
 8014142:	3601      	adds	r6, #1
 8014144:	e7ee      	b.n	8014124 <__libc_init_array+0xc>
 8014146:	f855 3b04 	ldr.w	r3, [r5], #4
 801414a:	4798      	blx	r3
 801414c:	3601      	adds	r6, #1
 801414e:	e7f2      	b.n	8014136 <__libc_init_array+0x1e>
 8014150:	0801503c 	.word	0x0801503c
 8014154:	0801503c 	.word	0x0801503c
 8014158:	0801503c 	.word	0x0801503c
 801415c:	08015040 	.word	0x08015040

08014160 <memcpy>:
 8014160:	440a      	add	r2, r1
 8014162:	4291      	cmp	r1, r2
 8014164:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014168:	d100      	bne.n	801416c <memcpy+0xc>
 801416a:	4770      	bx	lr
 801416c:	b510      	push	{r4, lr}
 801416e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014176:	4291      	cmp	r1, r2
 8014178:	d1f9      	bne.n	801416e <memcpy+0xe>
 801417a:	bd10      	pop	{r4, pc}

0801417c <memset>:
 801417c:	4402      	add	r2, r0
 801417e:	4603      	mov	r3, r0
 8014180:	4293      	cmp	r3, r2
 8014182:	d100      	bne.n	8014186 <memset+0xa>
 8014184:	4770      	bx	lr
 8014186:	f803 1b01 	strb.w	r1, [r3], #1
 801418a:	e7f9      	b.n	8014180 <memset+0x4>

0801418c <_puts_r>:
 801418c:	b570      	push	{r4, r5, r6, lr}
 801418e:	460e      	mov	r6, r1
 8014190:	4605      	mov	r5, r0
 8014192:	b118      	cbz	r0, 801419c <_puts_r+0x10>
 8014194:	6983      	ldr	r3, [r0, #24]
 8014196:	b90b      	cbnz	r3, 801419c <_puts_r+0x10>
 8014198:	f000 fa48 	bl	801462c <__sinit>
 801419c:	69ab      	ldr	r3, [r5, #24]
 801419e:	68ac      	ldr	r4, [r5, #8]
 80141a0:	b913      	cbnz	r3, 80141a8 <_puts_r+0x1c>
 80141a2:	4628      	mov	r0, r5
 80141a4:	f000 fa42 	bl	801462c <__sinit>
 80141a8:	4b2c      	ldr	r3, [pc, #176]	; (801425c <_puts_r+0xd0>)
 80141aa:	429c      	cmp	r4, r3
 80141ac:	d120      	bne.n	80141f0 <_puts_r+0x64>
 80141ae:	686c      	ldr	r4, [r5, #4]
 80141b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80141b2:	07db      	lsls	r3, r3, #31
 80141b4:	d405      	bmi.n	80141c2 <_puts_r+0x36>
 80141b6:	89a3      	ldrh	r3, [r4, #12]
 80141b8:	0598      	lsls	r0, r3, #22
 80141ba:	d402      	bmi.n	80141c2 <_puts_r+0x36>
 80141bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80141be:	f000 fad3 	bl	8014768 <__retarget_lock_acquire_recursive>
 80141c2:	89a3      	ldrh	r3, [r4, #12]
 80141c4:	0719      	lsls	r1, r3, #28
 80141c6:	d51d      	bpl.n	8014204 <_puts_r+0x78>
 80141c8:	6923      	ldr	r3, [r4, #16]
 80141ca:	b1db      	cbz	r3, 8014204 <_puts_r+0x78>
 80141cc:	3e01      	subs	r6, #1
 80141ce:	68a3      	ldr	r3, [r4, #8]
 80141d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80141d4:	3b01      	subs	r3, #1
 80141d6:	60a3      	str	r3, [r4, #8]
 80141d8:	bb39      	cbnz	r1, 801422a <_puts_r+0x9e>
 80141da:	2b00      	cmp	r3, #0
 80141dc:	da38      	bge.n	8014250 <_puts_r+0xc4>
 80141de:	4622      	mov	r2, r4
 80141e0:	210a      	movs	r1, #10
 80141e2:	4628      	mov	r0, r5
 80141e4:	f000 f848 	bl	8014278 <__swbuf_r>
 80141e8:	3001      	adds	r0, #1
 80141ea:	d011      	beq.n	8014210 <_puts_r+0x84>
 80141ec:	250a      	movs	r5, #10
 80141ee:	e011      	b.n	8014214 <_puts_r+0x88>
 80141f0:	4b1b      	ldr	r3, [pc, #108]	; (8014260 <_puts_r+0xd4>)
 80141f2:	429c      	cmp	r4, r3
 80141f4:	d101      	bne.n	80141fa <_puts_r+0x6e>
 80141f6:	68ac      	ldr	r4, [r5, #8]
 80141f8:	e7da      	b.n	80141b0 <_puts_r+0x24>
 80141fa:	4b1a      	ldr	r3, [pc, #104]	; (8014264 <_puts_r+0xd8>)
 80141fc:	429c      	cmp	r4, r3
 80141fe:	bf08      	it	eq
 8014200:	68ec      	ldreq	r4, [r5, #12]
 8014202:	e7d5      	b.n	80141b0 <_puts_r+0x24>
 8014204:	4621      	mov	r1, r4
 8014206:	4628      	mov	r0, r5
 8014208:	f000 f888 	bl	801431c <__swsetup_r>
 801420c:	2800      	cmp	r0, #0
 801420e:	d0dd      	beq.n	80141cc <_puts_r+0x40>
 8014210:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014214:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014216:	07da      	lsls	r2, r3, #31
 8014218:	d405      	bmi.n	8014226 <_puts_r+0x9a>
 801421a:	89a3      	ldrh	r3, [r4, #12]
 801421c:	059b      	lsls	r3, r3, #22
 801421e:	d402      	bmi.n	8014226 <_puts_r+0x9a>
 8014220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014222:	f000 faa2 	bl	801476a <__retarget_lock_release_recursive>
 8014226:	4628      	mov	r0, r5
 8014228:	bd70      	pop	{r4, r5, r6, pc}
 801422a:	2b00      	cmp	r3, #0
 801422c:	da04      	bge.n	8014238 <_puts_r+0xac>
 801422e:	69a2      	ldr	r2, [r4, #24]
 8014230:	429a      	cmp	r2, r3
 8014232:	dc06      	bgt.n	8014242 <_puts_r+0xb6>
 8014234:	290a      	cmp	r1, #10
 8014236:	d004      	beq.n	8014242 <_puts_r+0xb6>
 8014238:	6823      	ldr	r3, [r4, #0]
 801423a:	1c5a      	adds	r2, r3, #1
 801423c:	6022      	str	r2, [r4, #0]
 801423e:	7019      	strb	r1, [r3, #0]
 8014240:	e7c5      	b.n	80141ce <_puts_r+0x42>
 8014242:	4622      	mov	r2, r4
 8014244:	4628      	mov	r0, r5
 8014246:	f000 f817 	bl	8014278 <__swbuf_r>
 801424a:	3001      	adds	r0, #1
 801424c:	d1bf      	bne.n	80141ce <_puts_r+0x42>
 801424e:	e7df      	b.n	8014210 <_puts_r+0x84>
 8014250:	6823      	ldr	r3, [r4, #0]
 8014252:	250a      	movs	r5, #10
 8014254:	1c5a      	adds	r2, r3, #1
 8014256:	6022      	str	r2, [r4, #0]
 8014258:	701d      	strb	r5, [r3, #0]
 801425a:	e7db      	b.n	8014214 <_puts_r+0x88>
 801425c:	08014ff4 	.word	0x08014ff4
 8014260:	08015014 	.word	0x08015014
 8014264:	08014fd4 	.word	0x08014fd4

08014268 <puts>:
 8014268:	4b02      	ldr	r3, [pc, #8]	; (8014274 <puts+0xc>)
 801426a:	4601      	mov	r1, r0
 801426c:	6818      	ldr	r0, [r3, #0]
 801426e:	f7ff bf8d 	b.w	801418c <_puts_r>
 8014272:	bf00      	nop
 8014274:	2400009c 	.word	0x2400009c

08014278 <__swbuf_r>:
 8014278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801427a:	460e      	mov	r6, r1
 801427c:	4614      	mov	r4, r2
 801427e:	4605      	mov	r5, r0
 8014280:	b118      	cbz	r0, 801428a <__swbuf_r+0x12>
 8014282:	6983      	ldr	r3, [r0, #24]
 8014284:	b90b      	cbnz	r3, 801428a <__swbuf_r+0x12>
 8014286:	f000 f9d1 	bl	801462c <__sinit>
 801428a:	4b21      	ldr	r3, [pc, #132]	; (8014310 <__swbuf_r+0x98>)
 801428c:	429c      	cmp	r4, r3
 801428e:	d12b      	bne.n	80142e8 <__swbuf_r+0x70>
 8014290:	686c      	ldr	r4, [r5, #4]
 8014292:	69a3      	ldr	r3, [r4, #24]
 8014294:	60a3      	str	r3, [r4, #8]
 8014296:	89a3      	ldrh	r3, [r4, #12]
 8014298:	071a      	lsls	r2, r3, #28
 801429a:	d52f      	bpl.n	80142fc <__swbuf_r+0x84>
 801429c:	6923      	ldr	r3, [r4, #16]
 801429e:	b36b      	cbz	r3, 80142fc <__swbuf_r+0x84>
 80142a0:	6923      	ldr	r3, [r4, #16]
 80142a2:	6820      	ldr	r0, [r4, #0]
 80142a4:	1ac0      	subs	r0, r0, r3
 80142a6:	6963      	ldr	r3, [r4, #20]
 80142a8:	b2f6      	uxtb	r6, r6
 80142aa:	4283      	cmp	r3, r0
 80142ac:	4637      	mov	r7, r6
 80142ae:	dc04      	bgt.n	80142ba <__swbuf_r+0x42>
 80142b0:	4621      	mov	r1, r4
 80142b2:	4628      	mov	r0, r5
 80142b4:	f000 f926 	bl	8014504 <_fflush_r>
 80142b8:	bb30      	cbnz	r0, 8014308 <__swbuf_r+0x90>
 80142ba:	68a3      	ldr	r3, [r4, #8]
 80142bc:	3b01      	subs	r3, #1
 80142be:	60a3      	str	r3, [r4, #8]
 80142c0:	6823      	ldr	r3, [r4, #0]
 80142c2:	1c5a      	adds	r2, r3, #1
 80142c4:	6022      	str	r2, [r4, #0]
 80142c6:	701e      	strb	r6, [r3, #0]
 80142c8:	6963      	ldr	r3, [r4, #20]
 80142ca:	3001      	adds	r0, #1
 80142cc:	4283      	cmp	r3, r0
 80142ce:	d004      	beq.n	80142da <__swbuf_r+0x62>
 80142d0:	89a3      	ldrh	r3, [r4, #12]
 80142d2:	07db      	lsls	r3, r3, #31
 80142d4:	d506      	bpl.n	80142e4 <__swbuf_r+0x6c>
 80142d6:	2e0a      	cmp	r6, #10
 80142d8:	d104      	bne.n	80142e4 <__swbuf_r+0x6c>
 80142da:	4621      	mov	r1, r4
 80142dc:	4628      	mov	r0, r5
 80142de:	f000 f911 	bl	8014504 <_fflush_r>
 80142e2:	b988      	cbnz	r0, 8014308 <__swbuf_r+0x90>
 80142e4:	4638      	mov	r0, r7
 80142e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142e8:	4b0a      	ldr	r3, [pc, #40]	; (8014314 <__swbuf_r+0x9c>)
 80142ea:	429c      	cmp	r4, r3
 80142ec:	d101      	bne.n	80142f2 <__swbuf_r+0x7a>
 80142ee:	68ac      	ldr	r4, [r5, #8]
 80142f0:	e7cf      	b.n	8014292 <__swbuf_r+0x1a>
 80142f2:	4b09      	ldr	r3, [pc, #36]	; (8014318 <__swbuf_r+0xa0>)
 80142f4:	429c      	cmp	r4, r3
 80142f6:	bf08      	it	eq
 80142f8:	68ec      	ldreq	r4, [r5, #12]
 80142fa:	e7ca      	b.n	8014292 <__swbuf_r+0x1a>
 80142fc:	4621      	mov	r1, r4
 80142fe:	4628      	mov	r0, r5
 8014300:	f000 f80c 	bl	801431c <__swsetup_r>
 8014304:	2800      	cmp	r0, #0
 8014306:	d0cb      	beq.n	80142a0 <__swbuf_r+0x28>
 8014308:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801430c:	e7ea      	b.n	80142e4 <__swbuf_r+0x6c>
 801430e:	bf00      	nop
 8014310:	08014ff4 	.word	0x08014ff4
 8014314:	08015014 	.word	0x08015014
 8014318:	08014fd4 	.word	0x08014fd4

0801431c <__swsetup_r>:
 801431c:	4b32      	ldr	r3, [pc, #200]	; (80143e8 <__swsetup_r+0xcc>)
 801431e:	b570      	push	{r4, r5, r6, lr}
 8014320:	681d      	ldr	r5, [r3, #0]
 8014322:	4606      	mov	r6, r0
 8014324:	460c      	mov	r4, r1
 8014326:	b125      	cbz	r5, 8014332 <__swsetup_r+0x16>
 8014328:	69ab      	ldr	r3, [r5, #24]
 801432a:	b913      	cbnz	r3, 8014332 <__swsetup_r+0x16>
 801432c:	4628      	mov	r0, r5
 801432e:	f000 f97d 	bl	801462c <__sinit>
 8014332:	4b2e      	ldr	r3, [pc, #184]	; (80143ec <__swsetup_r+0xd0>)
 8014334:	429c      	cmp	r4, r3
 8014336:	d10f      	bne.n	8014358 <__swsetup_r+0x3c>
 8014338:	686c      	ldr	r4, [r5, #4]
 801433a:	89a3      	ldrh	r3, [r4, #12]
 801433c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014340:	0719      	lsls	r1, r3, #28
 8014342:	d42c      	bmi.n	801439e <__swsetup_r+0x82>
 8014344:	06dd      	lsls	r5, r3, #27
 8014346:	d411      	bmi.n	801436c <__swsetup_r+0x50>
 8014348:	2309      	movs	r3, #9
 801434a:	6033      	str	r3, [r6, #0]
 801434c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014350:	81a3      	strh	r3, [r4, #12]
 8014352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014356:	e03e      	b.n	80143d6 <__swsetup_r+0xba>
 8014358:	4b25      	ldr	r3, [pc, #148]	; (80143f0 <__swsetup_r+0xd4>)
 801435a:	429c      	cmp	r4, r3
 801435c:	d101      	bne.n	8014362 <__swsetup_r+0x46>
 801435e:	68ac      	ldr	r4, [r5, #8]
 8014360:	e7eb      	b.n	801433a <__swsetup_r+0x1e>
 8014362:	4b24      	ldr	r3, [pc, #144]	; (80143f4 <__swsetup_r+0xd8>)
 8014364:	429c      	cmp	r4, r3
 8014366:	bf08      	it	eq
 8014368:	68ec      	ldreq	r4, [r5, #12]
 801436a:	e7e6      	b.n	801433a <__swsetup_r+0x1e>
 801436c:	0758      	lsls	r0, r3, #29
 801436e:	d512      	bpl.n	8014396 <__swsetup_r+0x7a>
 8014370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014372:	b141      	cbz	r1, 8014386 <__swsetup_r+0x6a>
 8014374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014378:	4299      	cmp	r1, r3
 801437a:	d002      	beq.n	8014382 <__swsetup_r+0x66>
 801437c:	4630      	mov	r0, r6
 801437e:	f000 fa5b 	bl	8014838 <_free_r>
 8014382:	2300      	movs	r3, #0
 8014384:	6363      	str	r3, [r4, #52]	; 0x34
 8014386:	89a3      	ldrh	r3, [r4, #12]
 8014388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801438c:	81a3      	strh	r3, [r4, #12]
 801438e:	2300      	movs	r3, #0
 8014390:	6063      	str	r3, [r4, #4]
 8014392:	6923      	ldr	r3, [r4, #16]
 8014394:	6023      	str	r3, [r4, #0]
 8014396:	89a3      	ldrh	r3, [r4, #12]
 8014398:	f043 0308 	orr.w	r3, r3, #8
 801439c:	81a3      	strh	r3, [r4, #12]
 801439e:	6923      	ldr	r3, [r4, #16]
 80143a0:	b94b      	cbnz	r3, 80143b6 <__swsetup_r+0x9a>
 80143a2:	89a3      	ldrh	r3, [r4, #12]
 80143a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80143a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80143ac:	d003      	beq.n	80143b6 <__swsetup_r+0x9a>
 80143ae:	4621      	mov	r1, r4
 80143b0:	4630      	mov	r0, r6
 80143b2:	f000 fa01 	bl	80147b8 <__smakebuf_r>
 80143b6:	89a0      	ldrh	r0, [r4, #12]
 80143b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80143bc:	f010 0301 	ands.w	r3, r0, #1
 80143c0:	d00a      	beq.n	80143d8 <__swsetup_r+0xbc>
 80143c2:	2300      	movs	r3, #0
 80143c4:	60a3      	str	r3, [r4, #8]
 80143c6:	6963      	ldr	r3, [r4, #20]
 80143c8:	425b      	negs	r3, r3
 80143ca:	61a3      	str	r3, [r4, #24]
 80143cc:	6923      	ldr	r3, [r4, #16]
 80143ce:	b943      	cbnz	r3, 80143e2 <__swsetup_r+0xc6>
 80143d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80143d4:	d1ba      	bne.n	801434c <__swsetup_r+0x30>
 80143d6:	bd70      	pop	{r4, r5, r6, pc}
 80143d8:	0781      	lsls	r1, r0, #30
 80143da:	bf58      	it	pl
 80143dc:	6963      	ldrpl	r3, [r4, #20]
 80143de:	60a3      	str	r3, [r4, #8]
 80143e0:	e7f4      	b.n	80143cc <__swsetup_r+0xb0>
 80143e2:	2000      	movs	r0, #0
 80143e4:	e7f7      	b.n	80143d6 <__swsetup_r+0xba>
 80143e6:	bf00      	nop
 80143e8:	2400009c 	.word	0x2400009c
 80143ec:	08014ff4 	.word	0x08014ff4
 80143f0:	08015014 	.word	0x08015014
 80143f4:	08014fd4 	.word	0x08014fd4

080143f8 <__sflush_r>:
 80143f8:	898a      	ldrh	r2, [r1, #12]
 80143fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143fe:	4605      	mov	r5, r0
 8014400:	0710      	lsls	r0, r2, #28
 8014402:	460c      	mov	r4, r1
 8014404:	d458      	bmi.n	80144b8 <__sflush_r+0xc0>
 8014406:	684b      	ldr	r3, [r1, #4]
 8014408:	2b00      	cmp	r3, #0
 801440a:	dc05      	bgt.n	8014418 <__sflush_r+0x20>
 801440c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801440e:	2b00      	cmp	r3, #0
 8014410:	dc02      	bgt.n	8014418 <__sflush_r+0x20>
 8014412:	2000      	movs	r0, #0
 8014414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801441a:	2e00      	cmp	r6, #0
 801441c:	d0f9      	beq.n	8014412 <__sflush_r+0x1a>
 801441e:	2300      	movs	r3, #0
 8014420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014424:	682f      	ldr	r7, [r5, #0]
 8014426:	602b      	str	r3, [r5, #0]
 8014428:	d032      	beq.n	8014490 <__sflush_r+0x98>
 801442a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801442c:	89a3      	ldrh	r3, [r4, #12]
 801442e:	075a      	lsls	r2, r3, #29
 8014430:	d505      	bpl.n	801443e <__sflush_r+0x46>
 8014432:	6863      	ldr	r3, [r4, #4]
 8014434:	1ac0      	subs	r0, r0, r3
 8014436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014438:	b10b      	cbz	r3, 801443e <__sflush_r+0x46>
 801443a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801443c:	1ac0      	subs	r0, r0, r3
 801443e:	2300      	movs	r3, #0
 8014440:	4602      	mov	r2, r0
 8014442:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014444:	6a21      	ldr	r1, [r4, #32]
 8014446:	4628      	mov	r0, r5
 8014448:	47b0      	blx	r6
 801444a:	1c43      	adds	r3, r0, #1
 801444c:	89a3      	ldrh	r3, [r4, #12]
 801444e:	d106      	bne.n	801445e <__sflush_r+0x66>
 8014450:	6829      	ldr	r1, [r5, #0]
 8014452:	291d      	cmp	r1, #29
 8014454:	d82c      	bhi.n	80144b0 <__sflush_r+0xb8>
 8014456:	4a2a      	ldr	r2, [pc, #168]	; (8014500 <__sflush_r+0x108>)
 8014458:	40ca      	lsrs	r2, r1
 801445a:	07d6      	lsls	r6, r2, #31
 801445c:	d528      	bpl.n	80144b0 <__sflush_r+0xb8>
 801445e:	2200      	movs	r2, #0
 8014460:	6062      	str	r2, [r4, #4]
 8014462:	04d9      	lsls	r1, r3, #19
 8014464:	6922      	ldr	r2, [r4, #16]
 8014466:	6022      	str	r2, [r4, #0]
 8014468:	d504      	bpl.n	8014474 <__sflush_r+0x7c>
 801446a:	1c42      	adds	r2, r0, #1
 801446c:	d101      	bne.n	8014472 <__sflush_r+0x7a>
 801446e:	682b      	ldr	r3, [r5, #0]
 8014470:	b903      	cbnz	r3, 8014474 <__sflush_r+0x7c>
 8014472:	6560      	str	r0, [r4, #84]	; 0x54
 8014474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014476:	602f      	str	r7, [r5, #0]
 8014478:	2900      	cmp	r1, #0
 801447a:	d0ca      	beq.n	8014412 <__sflush_r+0x1a>
 801447c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014480:	4299      	cmp	r1, r3
 8014482:	d002      	beq.n	801448a <__sflush_r+0x92>
 8014484:	4628      	mov	r0, r5
 8014486:	f000 f9d7 	bl	8014838 <_free_r>
 801448a:	2000      	movs	r0, #0
 801448c:	6360      	str	r0, [r4, #52]	; 0x34
 801448e:	e7c1      	b.n	8014414 <__sflush_r+0x1c>
 8014490:	6a21      	ldr	r1, [r4, #32]
 8014492:	2301      	movs	r3, #1
 8014494:	4628      	mov	r0, r5
 8014496:	47b0      	blx	r6
 8014498:	1c41      	adds	r1, r0, #1
 801449a:	d1c7      	bne.n	801442c <__sflush_r+0x34>
 801449c:	682b      	ldr	r3, [r5, #0]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d0c4      	beq.n	801442c <__sflush_r+0x34>
 80144a2:	2b1d      	cmp	r3, #29
 80144a4:	d001      	beq.n	80144aa <__sflush_r+0xb2>
 80144a6:	2b16      	cmp	r3, #22
 80144a8:	d101      	bne.n	80144ae <__sflush_r+0xb6>
 80144aa:	602f      	str	r7, [r5, #0]
 80144ac:	e7b1      	b.n	8014412 <__sflush_r+0x1a>
 80144ae:	89a3      	ldrh	r3, [r4, #12]
 80144b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144b4:	81a3      	strh	r3, [r4, #12]
 80144b6:	e7ad      	b.n	8014414 <__sflush_r+0x1c>
 80144b8:	690f      	ldr	r7, [r1, #16]
 80144ba:	2f00      	cmp	r7, #0
 80144bc:	d0a9      	beq.n	8014412 <__sflush_r+0x1a>
 80144be:	0793      	lsls	r3, r2, #30
 80144c0:	680e      	ldr	r6, [r1, #0]
 80144c2:	bf08      	it	eq
 80144c4:	694b      	ldreq	r3, [r1, #20]
 80144c6:	600f      	str	r7, [r1, #0]
 80144c8:	bf18      	it	ne
 80144ca:	2300      	movne	r3, #0
 80144cc:	eba6 0807 	sub.w	r8, r6, r7
 80144d0:	608b      	str	r3, [r1, #8]
 80144d2:	f1b8 0f00 	cmp.w	r8, #0
 80144d6:	dd9c      	ble.n	8014412 <__sflush_r+0x1a>
 80144d8:	6a21      	ldr	r1, [r4, #32]
 80144da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80144dc:	4643      	mov	r3, r8
 80144de:	463a      	mov	r2, r7
 80144e0:	4628      	mov	r0, r5
 80144e2:	47b0      	blx	r6
 80144e4:	2800      	cmp	r0, #0
 80144e6:	dc06      	bgt.n	80144f6 <__sflush_r+0xfe>
 80144e8:	89a3      	ldrh	r3, [r4, #12]
 80144ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144ee:	81a3      	strh	r3, [r4, #12]
 80144f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80144f4:	e78e      	b.n	8014414 <__sflush_r+0x1c>
 80144f6:	4407      	add	r7, r0
 80144f8:	eba8 0800 	sub.w	r8, r8, r0
 80144fc:	e7e9      	b.n	80144d2 <__sflush_r+0xda>
 80144fe:	bf00      	nop
 8014500:	20400001 	.word	0x20400001

08014504 <_fflush_r>:
 8014504:	b538      	push	{r3, r4, r5, lr}
 8014506:	690b      	ldr	r3, [r1, #16]
 8014508:	4605      	mov	r5, r0
 801450a:	460c      	mov	r4, r1
 801450c:	b913      	cbnz	r3, 8014514 <_fflush_r+0x10>
 801450e:	2500      	movs	r5, #0
 8014510:	4628      	mov	r0, r5
 8014512:	bd38      	pop	{r3, r4, r5, pc}
 8014514:	b118      	cbz	r0, 801451e <_fflush_r+0x1a>
 8014516:	6983      	ldr	r3, [r0, #24]
 8014518:	b90b      	cbnz	r3, 801451e <_fflush_r+0x1a>
 801451a:	f000 f887 	bl	801462c <__sinit>
 801451e:	4b14      	ldr	r3, [pc, #80]	; (8014570 <_fflush_r+0x6c>)
 8014520:	429c      	cmp	r4, r3
 8014522:	d11b      	bne.n	801455c <_fflush_r+0x58>
 8014524:	686c      	ldr	r4, [r5, #4]
 8014526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d0ef      	beq.n	801450e <_fflush_r+0xa>
 801452e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014530:	07d0      	lsls	r0, r2, #31
 8014532:	d404      	bmi.n	801453e <_fflush_r+0x3a>
 8014534:	0599      	lsls	r1, r3, #22
 8014536:	d402      	bmi.n	801453e <_fflush_r+0x3a>
 8014538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801453a:	f000 f915 	bl	8014768 <__retarget_lock_acquire_recursive>
 801453e:	4628      	mov	r0, r5
 8014540:	4621      	mov	r1, r4
 8014542:	f7ff ff59 	bl	80143f8 <__sflush_r>
 8014546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014548:	07da      	lsls	r2, r3, #31
 801454a:	4605      	mov	r5, r0
 801454c:	d4e0      	bmi.n	8014510 <_fflush_r+0xc>
 801454e:	89a3      	ldrh	r3, [r4, #12]
 8014550:	059b      	lsls	r3, r3, #22
 8014552:	d4dd      	bmi.n	8014510 <_fflush_r+0xc>
 8014554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014556:	f000 f908 	bl	801476a <__retarget_lock_release_recursive>
 801455a:	e7d9      	b.n	8014510 <_fflush_r+0xc>
 801455c:	4b05      	ldr	r3, [pc, #20]	; (8014574 <_fflush_r+0x70>)
 801455e:	429c      	cmp	r4, r3
 8014560:	d101      	bne.n	8014566 <_fflush_r+0x62>
 8014562:	68ac      	ldr	r4, [r5, #8]
 8014564:	e7df      	b.n	8014526 <_fflush_r+0x22>
 8014566:	4b04      	ldr	r3, [pc, #16]	; (8014578 <_fflush_r+0x74>)
 8014568:	429c      	cmp	r4, r3
 801456a:	bf08      	it	eq
 801456c:	68ec      	ldreq	r4, [r5, #12]
 801456e:	e7da      	b.n	8014526 <_fflush_r+0x22>
 8014570:	08014ff4 	.word	0x08014ff4
 8014574:	08015014 	.word	0x08015014
 8014578:	08014fd4 	.word	0x08014fd4

0801457c <std>:
 801457c:	2300      	movs	r3, #0
 801457e:	b510      	push	{r4, lr}
 8014580:	4604      	mov	r4, r0
 8014582:	e9c0 3300 	strd	r3, r3, [r0]
 8014586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801458a:	6083      	str	r3, [r0, #8]
 801458c:	8181      	strh	r1, [r0, #12]
 801458e:	6643      	str	r3, [r0, #100]	; 0x64
 8014590:	81c2      	strh	r2, [r0, #14]
 8014592:	6183      	str	r3, [r0, #24]
 8014594:	4619      	mov	r1, r3
 8014596:	2208      	movs	r2, #8
 8014598:	305c      	adds	r0, #92	; 0x5c
 801459a:	f7ff fdef 	bl	801417c <memset>
 801459e:	4b05      	ldr	r3, [pc, #20]	; (80145b4 <std+0x38>)
 80145a0:	6263      	str	r3, [r4, #36]	; 0x24
 80145a2:	4b05      	ldr	r3, [pc, #20]	; (80145b8 <std+0x3c>)
 80145a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80145a6:	4b05      	ldr	r3, [pc, #20]	; (80145bc <std+0x40>)
 80145a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80145aa:	4b05      	ldr	r3, [pc, #20]	; (80145c0 <std+0x44>)
 80145ac:	6224      	str	r4, [r4, #32]
 80145ae:	6323      	str	r3, [r4, #48]	; 0x30
 80145b0:	bd10      	pop	{r4, pc}
 80145b2:	bf00      	nop
 80145b4:	08014a19 	.word	0x08014a19
 80145b8:	08014a3b 	.word	0x08014a3b
 80145bc:	08014a73 	.word	0x08014a73
 80145c0:	08014a97 	.word	0x08014a97

080145c4 <_cleanup_r>:
 80145c4:	4901      	ldr	r1, [pc, #4]	; (80145cc <_cleanup_r+0x8>)
 80145c6:	f000 b8af 	b.w	8014728 <_fwalk_reent>
 80145ca:	bf00      	nop
 80145cc:	08014505 	.word	0x08014505

080145d0 <__sfmoreglue>:
 80145d0:	b570      	push	{r4, r5, r6, lr}
 80145d2:	2268      	movs	r2, #104	; 0x68
 80145d4:	1e4d      	subs	r5, r1, #1
 80145d6:	4355      	muls	r5, r2
 80145d8:	460e      	mov	r6, r1
 80145da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80145de:	f000 f997 	bl	8014910 <_malloc_r>
 80145e2:	4604      	mov	r4, r0
 80145e4:	b140      	cbz	r0, 80145f8 <__sfmoreglue+0x28>
 80145e6:	2100      	movs	r1, #0
 80145e8:	e9c0 1600 	strd	r1, r6, [r0]
 80145ec:	300c      	adds	r0, #12
 80145ee:	60a0      	str	r0, [r4, #8]
 80145f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80145f4:	f7ff fdc2 	bl	801417c <memset>
 80145f8:	4620      	mov	r0, r4
 80145fa:	bd70      	pop	{r4, r5, r6, pc}

080145fc <__sfp_lock_acquire>:
 80145fc:	4801      	ldr	r0, [pc, #4]	; (8014604 <__sfp_lock_acquire+0x8>)
 80145fe:	f000 b8b3 	b.w	8014768 <__retarget_lock_acquire_recursive>
 8014602:	bf00      	nop
 8014604:	240051e1 	.word	0x240051e1

08014608 <__sfp_lock_release>:
 8014608:	4801      	ldr	r0, [pc, #4]	; (8014610 <__sfp_lock_release+0x8>)
 801460a:	f000 b8ae 	b.w	801476a <__retarget_lock_release_recursive>
 801460e:	bf00      	nop
 8014610:	240051e1 	.word	0x240051e1

08014614 <__sinit_lock_acquire>:
 8014614:	4801      	ldr	r0, [pc, #4]	; (801461c <__sinit_lock_acquire+0x8>)
 8014616:	f000 b8a7 	b.w	8014768 <__retarget_lock_acquire_recursive>
 801461a:	bf00      	nop
 801461c:	240051e2 	.word	0x240051e2

08014620 <__sinit_lock_release>:
 8014620:	4801      	ldr	r0, [pc, #4]	; (8014628 <__sinit_lock_release+0x8>)
 8014622:	f000 b8a2 	b.w	801476a <__retarget_lock_release_recursive>
 8014626:	bf00      	nop
 8014628:	240051e2 	.word	0x240051e2

0801462c <__sinit>:
 801462c:	b510      	push	{r4, lr}
 801462e:	4604      	mov	r4, r0
 8014630:	f7ff fff0 	bl	8014614 <__sinit_lock_acquire>
 8014634:	69a3      	ldr	r3, [r4, #24]
 8014636:	b11b      	cbz	r3, 8014640 <__sinit+0x14>
 8014638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801463c:	f7ff bff0 	b.w	8014620 <__sinit_lock_release>
 8014640:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014644:	6523      	str	r3, [r4, #80]	; 0x50
 8014646:	4b13      	ldr	r3, [pc, #76]	; (8014694 <__sinit+0x68>)
 8014648:	4a13      	ldr	r2, [pc, #76]	; (8014698 <__sinit+0x6c>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	62a2      	str	r2, [r4, #40]	; 0x28
 801464e:	42a3      	cmp	r3, r4
 8014650:	bf04      	itt	eq
 8014652:	2301      	moveq	r3, #1
 8014654:	61a3      	streq	r3, [r4, #24]
 8014656:	4620      	mov	r0, r4
 8014658:	f000 f820 	bl	801469c <__sfp>
 801465c:	6060      	str	r0, [r4, #4]
 801465e:	4620      	mov	r0, r4
 8014660:	f000 f81c 	bl	801469c <__sfp>
 8014664:	60a0      	str	r0, [r4, #8]
 8014666:	4620      	mov	r0, r4
 8014668:	f000 f818 	bl	801469c <__sfp>
 801466c:	2200      	movs	r2, #0
 801466e:	60e0      	str	r0, [r4, #12]
 8014670:	2104      	movs	r1, #4
 8014672:	6860      	ldr	r0, [r4, #4]
 8014674:	f7ff ff82 	bl	801457c <std>
 8014678:	68a0      	ldr	r0, [r4, #8]
 801467a:	2201      	movs	r2, #1
 801467c:	2109      	movs	r1, #9
 801467e:	f7ff ff7d 	bl	801457c <std>
 8014682:	68e0      	ldr	r0, [r4, #12]
 8014684:	2202      	movs	r2, #2
 8014686:	2112      	movs	r1, #18
 8014688:	f7ff ff78 	bl	801457c <std>
 801468c:	2301      	movs	r3, #1
 801468e:	61a3      	str	r3, [r4, #24]
 8014690:	e7d2      	b.n	8014638 <__sinit+0xc>
 8014692:	bf00      	nop
 8014694:	08014fd0 	.word	0x08014fd0
 8014698:	080145c5 	.word	0x080145c5

0801469c <__sfp>:
 801469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801469e:	4607      	mov	r7, r0
 80146a0:	f7ff ffac 	bl	80145fc <__sfp_lock_acquire>
 80146a4:	4b1e      	ldr	r3, [pc, #120]	; (8014720 <__sfp+0x84>)
 80146a6:	681e      	ldr	r6, [r3, #0]
 80146a8:	69b3      	ldr	r3, [r6, #24]
 80146aa:	b913      	cbnz	r3, 80146b2 <__sfp+0x16>
 80146ac:	4630      	mov	r0, r6
 80146ae:	f7ff ffbd 	bl	801462c <__sinit>
 80146b2:	3648      	adds	r6, #72	; 0x48
 80146b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80146b8:	3b01      	subs	r3, #1
 80146ba:	d503      	bpl.n	80146c4 <__sfp+0x28>
 80146bc:	6833      	ldr	r3, [r6, #0]
 80146be:	b30b      	cbz	r3, 8014704 <__sfp+0x68>
 80146c0:	6836      	ldr	r6, [r6, #0]
 80146c2:	e7f7      	b.n	80146b4 <__sfp+0x18>
 80146c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80146c8:	b9d5      	cbnz	r5, 8014700 <__sfp+0x64>
 80146ca:	4b16      	ldr	r3, [pc, #88]	; (8014724 <__sfp+0x88>)
 80146cc:	60e3      	str	r3, [r4, #12]
 80146ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80146d2:	6665      	str	r5, [r4, #100]	; 0x64
 80146d4:	f000 f847 	bl	8014766 <__retarget_lock_init_recursive>
 80146d8:	f7ff ff96 	bl	8014608 <__sfp_lock_release>
 80146dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80146e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80146e4:	6025      	str	r5, [r4, #0]
 80146e6:	61a5      	str	r5, [r4, #24]
 80146e8:	2208      	movs	r2, #8
 80146ea:	4629      	mov	r1, r5
 80146ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80146f0:	f7ff fd44 	bl	801417c <memset>
 80146f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80146f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80146fc:	4620      	mov	r0, r4
 80146fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014700:	3468      	adds	r4, #104	; 0x68
 8014702:	e7d9      	b.n	80146b8 <__sfp+0x1c>
 8014704:	2104      	movs	r1, #4
 8014706:	4638      	mov	r0, r7
 8014708:	f7ff ff62 	bl	80145d0 <__sfmoreglue>
 801470c:	4604      	mov	r4, r0
 801470e:	6030      	str	r0, [r6, #0]
 8014710:	2800      	cmp	r0, #0
 8014712:	d1d5      	bne.n	80146c0 <__sfp+0x24>
 8014714:	f7ff ff78 	bl	8014608 <__sfp_lock_release>
 8014718:	230c      	movs	r3, #12
 801471a:	603b      	str	r3, [r7, #0]
 801471c:	e7ee      	b.n	80146fc <__sfp+0x60>
 801471e:	bf00      	nop
 8014720:	08014fd0 	.word	0x08014fd0
 8014724:	ffff0001 	.word	0xffff0001

08014728 <_fwalk_reent>:
 8014728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801472c:	4606      	mov	r6, r0
 801472e:	4688      	mov	r8, r1
 8014730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014734:	2700      	movs	r7, #0
 8014736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801473a:	f1b9 0901 	subs.w	r9, r9, #1
 801473e:	d505      	bpl.n	801474c <_fwalk_reent+0x24>
 8014740:	6824      	ldr	r4, [r4, #0]
 8014742:	2c00      	cmp	r4, #0
 8014744:	d1f7      	bne.n	8014736 <_fwalk_reent+0xe>
 8014746:	4638      	mov	r0, r7
 8014748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801474c:	89ab      	ldrh	r3, [r5, #12]
 801474e:	2b01      	cmp	r3, #1
 8014750:	d907      	bls.n	8014762 <_fwalk_reent+0x3a>
 8014752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014756:	3301      	adds	r3, #1
 8014758:	d003      	beq.n	8014762 <_fwalk_reent+0x3a>
 801475a:	4629      	mov	r1, r5
 801475c:	4630      	mov	r0, r6
 801475e:	47c0      	blx	r8
 8014760:	4307      	orrs	r7, r0
 8014762:	3568      	adds	r5, #104	; 0x68
 8014764:	e7e9      	b.n	801473a <_fwalk_reent+0x12>

08014766 <__retarget_lock_init_recursive>:
 8014766:	4770      	bx	lr

08014768 <__retarget_lock_acquire_recursive>:
 8014768:	4770      	bx	lr

0801476a <__retarget_lock_release_recursive>:
 801476a:	4770      	bx	lr

0801476c <__swhatbuf_r>:
 801476c:	b570      	push	{r4, r5, r6, lr}
 801476e:	460e      	mov	r6, r1
 8014770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014774:	2900      	cmp	r1, #0
 8014776:	b096      	sub	sp, #88	; 0x58
 8014778:	4614      	mov	r4, r2
 801477a:	461d      	mov	r5, r3
 801477c:	da08      	bge.n	8014790 <__swhatbuf_r+0x24>
 801477e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014782:	2200      	movs	r2, #0
 8014784:	602a      	str	r2, [r5, #0]
 8014786:	061a      	lsls	r2, r3, #24
 8014788:	d410      	bmi.n	80147ac <__swhatbuf_r+0x40>
 801478a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801478e:	e00e      	b.n	80147ae <__swhatbuf_r+0x42>
 8014790:	466a      	mov	r2, sp
 8014792:	f000 f9a7 	bl	8014ae4 <_fstat_r>
 8014796:	2800      	cmp	r0, #0
 8014798:	dbf1      	blt.n	801477e <__swhatbuf_r+0x12>
 801479a:	9a01      	ldr	r2, [sp, #4]
 801479c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80147a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80147a4:	425a      	negs	r2, r3
 80147a6:	415a      	adcs	r2, r3
 80147a8:	602a      	str	r2, [r5, #0]
 80147aa:	e7ee      	b.n	801478a <__swhatbuf_r+0x1e>
 80147ac:	2340      	movs	r3, #64	; 0x40
 80147ae:	2000      	movs	r0, #0
 80147b0:	6023      	str	r3, [r4, #0]
 80147b2:	b016      	add	sp, #88	; 0x58
 80147b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080147b8 <__smakebuf_r>:
 80147b8:	898b      	ldrh	r3, [r1, #12]
 80147ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80147bc:	079d      	lsls	r5, r3, #30
 80147be:	4606      	mov	r6, r0
 80147c0:	460c      	mov	r4, r1
 80147c2:	d507      	bpl.n	80147d4 <__smakebuf_r+0x1c>
 80147c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80147c8:	6023      	str	r3, [r4, #0]
 80147ca:	6123      	str	r3, [r4, #16]
 80147cc:	2301      	movs	r3, #1
 80147ce:	6163      	str	r3, [r4, #20]
 80147d0:	b002      	add	sp, #8
 80147d2:	bd70      	pop	{r4, r5, r6, pc}
 80147d4:	ab01      	add	r3, sp, #4
 80147d6:	466a      	mov	r2, sp
 80147d8:	f7ff ffc8 	bl	801476c <__swhatbuf_r>
 80147dc:	9900      	ldr	r1, [sp, #0]
 80147de:	4605      	mov	r5, r0
 80147e0:	4630      	mov	r0, r6
 80147e2:	f000 f895 	bl	8014910 <_malloc_r>
 80147e6:	b948      	cbnz	r0, 80147fc <__smakebuf_r+0x44>
 80147e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147ec:	059a      	lsls	r2, r3, #22
 80147ee:	d4ef      	bmi.n	80147d0 <__smakebuf_r+0x18>
 80147f0:	f023 0303 	bic.w	r3, r3, #3
 80147f4:	f043 0302 	orr.w	r3, r3, #2
 80147f8:	81a3      	strh	r3, [r4, #12]
 80147fa:	e7e3      	b.n	80147c4 <__smakebuf_r+0xc>
 80147fc:	4b0d      	ldr	r3, [pc, #52]	; (8014834 <__smakebuf_r+0x7c>)
 80147fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8014800:	89a3      	ldrh	r3, [r4, #12]
 8014802:	6020      	str	r0, [r4, #0]
 8014804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014808:	81a3      	strh	r3, [r4, #12]
 801480a:	9b00      	ldr	r3, [sp, #0]
 801480c:	6163      	str	r3, [r4, #20]
 801480e:	9b01      	ldr	r3, [sp, #4]
 8014810:	6120      	str	r0, [r4, #16]
 8014812:	b15b      	cbz	r3, 801482c <__smakebuf_r+0x74>
 8014814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014818:	4630      	mov	r0, r6
 801481a:	f000 f975 	bl	8014b08 <_isatty_r>
 801481e:	b128      	cbz	r0, 801482c <__smakebuf_r+0x74>
 8014820:	89a3      	ldrh	r3, [r4, #12]
 8014822:	f023 0303 	bic.w	r3, r3, #3
 8014826:	f043 0301 	orr.w	r3, r3, #1
 801482a:	81a3      	strh	r3, [r4, #12]
 801482c:	89a0      	ldrh	r0, [r4, #12]
 801482e:	4305      	orrs	r5, r0
 8014830:	81a5      	strh	r5, [r4, #12]
 8014832:	e7cd      	b.n	80147d0 <__smakebuf_r+0x18>
 8014834:	080145c5 	.word	0x080145c5

08014838 <_free_r>:
 8014838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801483a:	2900      	cmp	r1, #0
 801483c:	d044      	beq.n	80148c8 <_free_r+0x90>
 801483e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014842:	9001      	str	r0, [sp, #4]
 8014844:	2b00      	cmp	r3, #0
 8014846:	f1a1 0404 	sub.w	r4, r1, #4
 801484a:	bfb8      	it	lt
 801484c:	18e4      	addlt	r4, r4, r3
 801484e:	f000 f97d 	bl	8014b4c <__malloc_lock>
 8014852:	4a1e      	ldr	r2, [pc, #120]	; (80148cc <_free_r+0x94>)
 8014854:	9801      	ldr	r0, [sp, #4]
 8014856:	6813      	ldr	r3, [r2, #0]
 8014858:	b933      	cbnz	r3, 8014868 <_free_r+0x30>
 801485a:	6063      	str	r3, [r4, #4]
 801485c:	6014      	str	r4, [r2, #0]
 801485e:	b003      	add	sp, #12
 8014860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014864:	f000 b978 	b.w	8014b58 <__malloc_unlock>
 8014868:	42a3      	cmp	r3, r4
 801486a:	d908      	bls.n	801487e <_free_r+0x46>
 801486c:	6825      	ldr	r5, [r4, #0]
 801486e:	1961      	adds	r1, r4, r5
 8014870:	428b      	cmp	r3, r1
 8014872:	bf01      	itttt	eq
 8014874:	6819      	ldreq	r1, [r3, #0]
 8014876:	685b      	ldreq	r3, [r3, #4]
 8014878:	1949      	addeq	r1, r1, r5
 801487a:	6021      	streq	r1, [r4, #0]
 801487c:	e7ed      	b.n	801485a <_free_r+0x22>
 801487e:	461a      	mov	r2, r3
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	b10b      	cbz	r3, 8014888 <_free_r+0x50>
 8014884:	42a3      	cmp	r3, r4
 8014886:	d9fa      	bls.n	801487e <_free_r+0x46>
 8014888:	6811      	ldr	r1, [r2, #0]
 801488a:	1855      	adds	r5, r2, r1
 801488c:	42a5      	cmp	r5, r4
 801488e:	d10b      	bne.n	80148a8 <_free_r+0x70>
 8014890:	6824      	ldr	r4, [r4, #0]
 8014892:	4421      	add	r1, r4
 8014894:	1854      	adds	r4, r2, r1
 8014896:	42a3      	cmp	r3, r4
 8014898:	6011      	str	r1, [r2, #0]
 801489a:	d1e0      	bne.n	801485e <_free_r+0x26>
 801489c:	681c      	ldr	r4, [r3, #0]
 801489e:	685b      	ldr	r3, [r3, #4]
 80148a0:	6053      	str	r3, [r2, #4]
 80148a2:	4421      	add	r1, r4
 80148a4:	6011      	str	r1, [r2, #0]
 80148a6:	e7da      	b.n	801485e <_free_r+0x26>
 80148a8:	d902      	bls.n	80148b0 <_free_r+0x78>
 80148aa:	230c      	movs	r3, #12
 80148ac:	6003      	str	r3, [r0, #0]
 80148ae:	e7d6      	b.n	801485e <_free_r+0x26>
 80148b0:	6825      	ldr	r5, [r4, #0]
 80148b2:	1961      	adds	r1, r4, r5
 80148b4:	428b      	cmp	r3, r1
 80148b6:	bf04      	itt	eq
 80148b8:	6819      	ldreq	r1, [r3, #0]
 80148ba:	685b      	ldreq	r3, [r3, #4]
 80148bc:	6063      	str	r3, [r4, #4]
 80148be:	bf04      	itt	eq
 80148c0:	1949      	addeq	r1, r1, r5
 80148c2:	6021      	streq	r1, [r4, #0]
 80148c4:	6054      	str	r4, [r2, #4]
 80148c6:	e7ca      	b.n	801485e <_free_r+0x26>
 80148c8:	b003      	add	sp, #12
 80148ca:	bd30      	pop	{r4, r5, pc}
 80148cc:	240051e4 	.word	0x240051e4

080148d0 <sbrk_aligned>:
 80148d0:	b570      	push	{r4, r5, r6, lr}
 80148d2:	4e0e      	ldr	r6, [pc, #56]	; (801490c <sbrk_aligned+0x3c>)
 80148d4:	460c      	mov	r4, r1
 80148d6:	6831      	ldr	r1, [r6, #0]
 80148d8:	4605      	mov	r5, r0
 80148da:	b911      	cbnz	r1, 80148e2 <sbrk_aligned+0x12>
 80148dc:	f000 f88c 	bl	80149f8 <_sbrk_r>
 80148e0:	6030      	str	r0, [r6, #0]
 80148e2:	4621      	mov	r1, r4
 80148e4:	4628      	mov	r0, r5
 80148e6:	f000 f887 	bl	80149f8 <_sbrk_r>
 80148ea:	1c43      	adds	r3, r0, #1
 80148ec:	d00a      	beq.n	8014904 <sbrk_aligned+0x34>
 80148ee:	1cc4      	adds	r4, r0, #3
 80148f0:	f024 0403 	bic.w	r4, r4, #3
 80148f4:	42a0      	cmp	r0, r4
 80148f6:	d007      	beq.n	8014908 <sbrk_aligned+0x38>
 80148f8:	1a21      	subs	r1, r4, r0
 80148fa:	4628      	mov	r0, r5
 80148fc:	f000 f87c 	bl	80149f8 <_sbrk_r>
 8014900:	3001      	adds	r0, #1
 8014902:	d101      	bne.n	8014908 <sbrk_aligned+0x38>
 8014904:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014908:	4620      	mov	r0, r4
 801490a:	bd70      	pop	{r4, r5, r6, pc}
 801490c:	240051e8 	.word	0x240051e8

08014910 <_malloc_r>:
 8014910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014914:	1ccd      	adds	r5, r1, #3
 8014916:	f025 0503 	bic.w	r5, r5, #3
 801491a:	3508      	adds	r5, #8
 801491c:	2d0c      	cmp	r5, #12
 801491e:	bf38      	it	cc
 8014920:	250c      	movcc	r5, #12
 8014922:	2d00      	cmp	r5, #0
 8014924:	4607      	mov	r7, r0
 8014926:	db01      	blt.n	801492c <_malloc_r+0x1c>
 8014928:	42a9      	cmp	r1, r5
 801492a:	d905      	bls.n	8014938 <_malloc_r+0x28>
 801492c:	230c      	movs	r3, #12
 801492e:	603b      	str	r3, [r7, #0]
 8014930:	2600      	movs	r6, #0
 8014932:	4630      	mov	r0, r6
 8014934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014938:	4e2e      	ldr	r6, [pc, #184]	; (80149f4 <_malloc_r+0xe4>)
 801493a:	f000 f907 	bl	8014b4c <__malloc_lock>
 801493e:	6833      	ldr	r3, [r6, #0]
 8014940:	461c      	mov	r4, r3
 8014942:	bb34      	cbnz	r4, 8014992 <_malloc_r+0x82>
 8014944:	4629      	mov	r1, r5
 8014946:	4638      	mov	r0, r7
 8014948:	f7ff ffc2 	bl	80148d0 <sbrk_aligned>
 801494c:	1c43      	adds	r3, r0, #1
 801494e:	4604      	mov	r4, r0
 8014950:	d14d      	bne.n	80149ee <_malloc_r+0xde>
 8014952:	6834      	ldr	r4, [r6, #0]
 8014954:	4626      	mov	r6, r4
 8014956:	2e00      	cmp	r6, #0
 8014958:	d140      	bne.n	80149dc <_malloc_r+0xcc>
 801495a:	6823      	ldr	r3, [r4, #0]
 801495c:	4631      	mov	r1, r6
 801495e:	4638      	mov	r0, r7
 8014960:	eb04 0803 	add.w	r8, r4, r3
 8014964:	f000 f848 	bl	80149f8 <_sbrk_r>
 8014968:	4580      	cmp	r8, r0
 801496a:	d13a      	bne.n	80149e2 <_malloc_r+0xd2>
 801496c:	6821      	ldr	r1, [r4, #0]
 801496e:	3503      	adds	r5, #3
 8014970:	1a6d      	subs	r5, r5, r1
 8014972:	f025 0503 	bic.w	r5, r5, #3
 8014976:	3508      	adds	r5, #8
 8014978:	2d0c      	cmp	r5, #12
 801497a:	bf38      	it	cc
 801497c:	250c      	movcc	r5, #12
 801497e:	4629      	mov	r1, r5
 8014980:	4638      	mov	r0, r7
 8014982:	f7ff ffa5 	bl	80148d0 <sbrk_aligned>
 8014986:	3001      	adds	r0, #1
 8014988:	d02b      	beq.n	80149e2 <_malloc_r+0xd2>
 801498a:	6823      	ldr	r3, [r4, #0]
 801498c:	442b      	add	r3, r5
 801498e:	6023      	str	r3, [r4, #0]
 8014990:	e00e      	b.n	80149b0 <_malloc_r+0xa0>
 8014992:	6822      	ldr	r2, [r4, #0]
 8014994:	1b52      	subs	r2, r2, r5
 8014996:	d41e      	bmi.n	80149d6 <_malloc_r+0xc6>
 8014998:	2a0b      	cmp	r2, #11
 801499a:	d916      	bls.n	80149ca <_malloc_r+0xba>
 801499c:	1961      	adds	r1, r4, r5
 801499e:	42a3      	cmp	r3, r4
 80149a0:	6025      	str	r5, [r4, #0]
 80149a2:	bf18      	it	ne
 80149a4:	6059      	strne	r1, [r3, #4]
 80149a6:	6863      	ldr	r3, [r4, #4]
 80149a8:	bf08      	it	eq
 80149aa:	6031      	streq	r1, [r6, #0]
 80149ac:	5162      	str	r2, [r4, r5]
 80149ae:	604b      	str	r3, [r1, #4]
 80149b0:	4638      	mov	r0, r7
 80149b2:	f104 060b 	add.w	r6, r4, #11
 80149b6:	f000 f8cf 	bl	8014b58 <__malloc_unlock>
 80149ba:	f026 0607 	bic.w	r6, r6, #7
 80149be:	1d23      	adds	r3, r4, #4
 80149c0:	1af2      	subs	r2, r6, r3
 80149c2:	d0b6      	beq.n	8014932 <_malloc_r+0x22>
 80149c4:	1b9b      	subs	r3, r3, r6
 80149c6:	50a3      	str	r3, [r4, r2]
 80149c8:	e7b3      	b.n	8014932 <_malloc_r+0x22>
 80149ca:	6862      	ldr	r2, [r4, #4]
 80149cc:	42a3      	cmp	r3, r4
 80149ce:	bf0c      	ite	eq
 80149d0:	6032      	streq	r2, [r6, #0]
 80149d2:	605a      	strne	r2, [r3, #4]
 80149d4:	e7ec      	b.n	80149b0 <_malloc_r+0xa0>
 80149d6:	4623      	mov	r3, r4
 80149d8:	6864      	ldr	r4, [r4, #4]
 80149da:	e7b2      	b.n	8014942 <_malloc_r+0x32>
 80149dc:	4634      	mov	r4, r6
 80149de:	6876      	ldr	r6, [r6, #4]
 80149e0:	e7b9      	b.n	8014956 <_malloc_r+0x46>
 80149e2:	230c      	movs	r3, #12
 80149e4:	603b      	str	r3, [r7, #0]
 80149e6:	4638      	mov	r0, r7
 80149e8:	f000 f8b6 	bl	8014b58 <__malloc_unlock>
 80149ec:	e7a1      	b.n	8014932 <_malloc_r+0x22>
 80149ee:	6025      	str	r5, [r4, #0]
 80149f0:	e7de      	b.n	80149b0 <_malloc_r+0xa0>
 80149f2:	bf00      	nop
 80149f4:	240051e4 	.word	0x240051e4

080149f8 <_sbrk_r>:
 80149f8:	b538      	push	{r3, r4, r5, lr}
 80149fa:	4d06      	ldr	r5, [pc, #24]	; (8014a14 <_sbrk_r+0x1c>)
 80149fc:	2300      	movs	r3, #0
 80149fe:	4604      	mov	r4, r0
 8014a00:	4608      	mov	r0, r1
 8014a02:	602b      	str	r3, [r5, #0]
 8014a04:	f7ed fdca 	bl	800259c <_sbrk>
 8014a08:	1c43      	adds	r3, r0, #1
 8014a0a:	d102      	bne.n	8014a12 <_sbrk_r+0x1a>
 8014a0c:	682b      	ldr	r3, [r5, #0]
 8014a0e:	b103      	cbz	r3, 8014a12 <_sbrk_r+0x1a>
 8014a10:	6023      	str	r3, [r4, #0]
 8014a12:	bd38      	pop	{r3, r4, r5, pc}
 8014a14:	240051ec 	.word	0x240051ec

08014a18 <__sread>:
 8014a18:	b510      	push	{r4, lr}
 8014a1a:	460c      	mov	r4, r1
 8014a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a20:	f000 f8a0 	bl	8014b64 <_read_r>
 8014a24:	2800      	cmp	r0, #0
 8014a26:	bfab      	itete	ge
 8014a28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8014a2c:	181b      	addge	r3, r3, r0
 8014a2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014a32:	bfac      	ite	ge
 8014a34:	6563      	strge	r3, [r4, #84]	; 0x54
 8014a36:	81a3      	strhlt	r3, [r4, #12]
 8014a38:	bd10      	pop	{r4, pc}

08014a3a <__swrite>:
 8014a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a3e:	461f      	mov	r7, r3
 8014a40:	898b      	ldrh	r3, [r1, #12]
 8014a42:	05db      	lsls	r3, r3, #23
 8014a44:	4605      	mov	r5, r0
 8014a46:	460c      	mov	r4, r1
 8014a48:	4616      	mov	r6, r2
 8014a4a:	d505      	bpl.n	8014a58 <__swrite+0x1e>
 8014a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a50:	2302      	movs	r3, #2
 8014a52:	2200      	movs	r2, #0
 8014a54:	f000 f868 	bl	8014b28 <_lseek_r>
 8014a58:	89a3      	ldrh	r3, [r4, #12]
 8014a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014a62:	81a3      	strh	r3, [r4, #12]
 8014a64:	4632      	mov	r2, r6
 8014a66:	463b      	mov	r3, r7
 8014a68:	4628      	mov	r0, r5
 8014a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a6e:	f000 b817 	b.w	8014aa0 <_write_r>

08014a72 <__sseek>:
 8014a72:	b510      	push	{r4, lr}
 8014a74:	460c      	mov	r4, r1
 8014a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a7a:	f000 f855 	bl	8014b28 <_lseek_r>
 8014a7e:	1c43      	adds	r3, r0, #1
 8014a80:	89a3      	ldrh	r3, [r4, #12]
 8014a82:	bf15      	itete	ne
 8014a84:	6560      	strne	r0, [r4, #84]	; 0x54
 8014a86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014a8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014a8e:	81a3      	strheq	r3, [r4, #12]
 8014a90:	bf18      	it	ne
 8014a92:	81a3      	strhne	r3, [r4, #12]
 8014a94:	bd10      	pop	{r4, pc}

08014a96 <__sclose>:
 8014a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a9a:	f000 b813 	b.w	8014ac4 <_close_r>
	...

08014aa0 <_write_r>:
 8014aa0:	b538      	push	{r3, r4, r5, lr}
 8014aa2:	4d07      	ldr	r5, [pc, #28]	; (8014ac0 <_write_r+0x20>)
 8014aa4:	4604      	mov	r4, r0
 8014aa6:	4608      	mov	r0, r1
 8014aa8:	4611      	mov	r1, r2
 8014aaa:	2200      	movs	r2, #0
 8014aac:	602a      	str	r2, [r5, #0]
 8014aae:	461a      	mov	r2, r3
 8014ab0:	f7ed fd23 	bl	80024fa <_write>
 8014ab4:	1c43      	adds	r3, r0, #1
 8014ab6:	d102      	bne.n	8014abe <_write_r+0x1e>
 8014ab8:	682b      	ldr	r3, [r5, #0]
 8014aba:	b103      	cbz	r3, 8014abe <_write_r+0x1e>
 8014abc:	6023      	str	r3, [r4, #0]
 8014abe:	bd38      	pop	{r3, r4, r5, pc}
 8014ac0:	240051ec 	.word	0x240051ec

08014ac4 <_close_r>:
 8014ac4:	b538      	push	{r3, r4, r5, lr}
 8014ac6:	4d06      	ldr	r5, [pc, #24]	; (8014ae0 <_close_r+0x1c>)
 8014ac8:	2300      	movs	r3, #0
 8014aca:	4604      	mov	r4, r0
 8014acc:	4608      	mov	r0, r1
 8014ace:	602b      	str	r3, [r5, #0]
 8014ad0:	f7ed fd2f 	bl	8002532 <_close>
 8014ad4:	1c43      	adds	r3, r0, #1
 8014ad6:	d102      	bne.n	8014ade <_close_r+0x1a>
 8014ad8:	682b      	ldr	r3, [r5, #0]
 8014ada:	b103      	cbz	r3, 8014ade <_close_r+0x1a>
 8014adc:	6023      	str	r3, [r4, #0]
 8014ade:	bd38      	pop	{r3, r4, r5, pc}
 8014ae0:	240051ec 	.word	0x240051ec

08014ae4 <_fstat_r>:
 8014ae4:	b538      	push	{r3, r4, r5, lr}
 8014ae6:	4d07      	ldr	r5, [pc, #28]	; (8014b04 <_fstat_r+0x20>)
 8014ae8:	2300      	movs	r3, #0
 8014aea:	4604      	mov	r4, r0
 8014aec:	4608      	mov	r0, r1
 8014aee:	4611      	mov	r1, r2
 8014af0:	602b      	str	r3, [r5, #0]
 8014af2:	f7ed fd2a 	bl	800254a <_fstat>
 8014af6:	1c43      	adds	r3, r0, #1
 8014af8:	d102      	bne.n	8014b00 <_fstat_r+0x1c>
 8014afa:	682b      	ldr	r3, [r5, #0]
 8014afc:	b103      	cbz	r3, 8014b00 <_fstat_r+0x1c>
 8014afe:	6023      	str	r3, [r4, #0]
 8014b00:	bd38      	pop	{r3, r4, r5, pc}
 8014b02:	bf00      	nop
 8014b04:	240051ec 	.word	0x240051ec

08014b08 <_isatty_r>:
 8014b08:	b538      	push	{r3, r4, r5, lr}
 8014b0a:	4d06      	ldr	r5, [pc, #24]	; (8014b24 <_isatty_r+0x1c>)
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	4604      	mov	r4, r0
 8014b10:	4608      	mov	r0, r1
 8014b12:	602b      	str	r3, [r5, #0]
 8014b14:	f7ed fd29 	bl	800256a <_isatty>
 8014b18:	1c43      	adds	r3, r0, #1
 8014b1a:	d102      	bne.n	8014b22 <_isatty_r+0x1a>
 8014b1c:	682b      	ldr	r3, [r5, #0]
 8014b1e:	b103      	cbz	r3, 8014b22 <_isatty_r+0x1a>
 8014b20:	6023      	str	r3, [r4, #0]
 8014b22:	bd38      	pop	{r3, r4, r5, pc}
 8014b24:	240051ec 	.word	0x240051ec

08014b28 <_lseek_r>:
 8014b28:	b538      	push	{r3, r4, r5, lr}
 8014b2a:	4d07      	ldr	r5, [pc, #28]	; (8014b48 <_lseek_r+0x20>)
 8014b2c:	4604      	mov	r4, r0
 8014b2e:	4608      	mov	r0, r1
 8014b30:	4611      	mov	r1, r2
 8014b32:	2200      	movs	r2, #0
 8014b34:	602a      	str	r2, [r5, #0]
 8014b36:	461a      	mov	r2, r3
 8014b38:	f7ed fd22 	bl	8002580 <_lseek>
 8014b3c:	1c43      	adds	r3, r0, #1
 8014b3e:	d102      	bne.n	8014b46 <_lseek_r+0x1e>
 8014b40:	682b      	ldr	r3, [r5, #0]
 8014b42:	b103      	cbz	r3, 8014b46 <_lseek_r+0x1e>
 8014b44:	6023      	str	r3, [r4, #0]
 8014b46:	bd38      	pop	{r3, r4, r5, pc}
 8014b48:	240051ec 	.word	0x240051ec

08014b4c <__malloc_lock>:
 8014b4c:	4801      	ldr	r0, [pc, #4]	; (8014b54 <__malloc_lock+0x8>)
 8014b4e:	f7ff be0b 	b.w	8014768 <__retarget_lock_acquire_recursive>
 8014b52:	bf00      	nop
 8014b54:	240051e0 	.word	0x240051e0

08014b58 <__malloc_unlock>:
 8014b58:	4801      	ldr	r0, [pc, #4]	; (8014b60 <__malloc_unlock+0x8>)
 8014b5a:	f7ff be06 	b.w	801476a <__retarget_lock_release_recursive>
 8014b5e:	bf00      	nop
 8014b60:	240051e0 	.word	0x240051e0

08014b64 <_read_r>:
 8014b64:	b538      	push	{r3, r4, r5, lr}
 8014b66:	4d07      	ldr	r5, [pc, #28]	; (8014b84 <_read_r+0x20>)
 8014b68:	4604      	mov	r4, r0
 8014b6a:	4608      	mov	r0, r1
 8014b6c:	4611      	mov	r1, r2
 8014b6e:	2200      	movs	r2, #0
 8014b70:	602a      	str	r2, [r5, #0]
 8014b72:	461a      	mov	r2, r3
 8014b74:	f7ed fca4 	bl	80024c0 <_read>
 8014b78:	1c43      	adds	r3, r0, #1
 8014b7a:	d102      	bne.n	8014b82 <_read_r+0x1e>
 8014b7c:	682b      	ldr	r3, [r5, #0]
 8014b7e:	b103      	cbz	r3, 8014b82 <_read_r+0x1e>
 8014b80:	6023      	str	r3, [r4, #0]
 8014b82:	bd38      	pop	{r3, r4, r5, pc}
 8014b84:	240051ec 	.word	0x240051ec

08014b88 <_init>:
 8014b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b8a:	bf00      	nop
 8014b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b8e:	bc08      	pop	{r3}
 8014b90:	469e      	mov	lr, r3
 8014b92:	4770      	bx	lr

08014b94 <_fini>:
 8014b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b96:	bf00      	nop
 8014b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b9a:	bc08      	pop	{r3}
 8014b9c:	469e      	mov	lr, r3
 8014b9e:	4770      	bx	lr
