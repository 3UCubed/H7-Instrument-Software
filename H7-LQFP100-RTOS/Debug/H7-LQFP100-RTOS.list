
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016c1c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08016ebc  08016ebc  00026ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801731c  0801731c  0002731c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017324  08017324  00027324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017328  08017328  00027328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  0801732c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000549c  24000100  0801742c  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400559c  0801742c  0003559c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032a10  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005498  00000000  00000000  00062b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002638  00000000  00000000  00067fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002440  00000000  00000000  0006a610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a96  00000000  00000000  0006ca50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003099d  00000000  00000000  000744e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019461a  00000000  00000000  000a4e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023949d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ada4  00000000  00000000  002394f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016ea4 	.word	0x08016ea4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08016ea4 	.word	0x08016ea4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f012 f886 	bl	80127ac <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f012 f87b 	bl	80127ac <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f012 f870 	bl	80127ac <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f015 fd4a 	bl	8016168 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240004e8 	.word	0x240004e8
 80006e0:	24000b44 	.word	0x24000b44
 80006e4:	24000534 	.word	0x24000534
 80006e8:	24000580 	.word	0x24000580
 80006ec:	08016f1c 	.word	0x08016f1c

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49f2      	ldr	r1, [pc, #968]	; (8000ac4 <HAL_UART_RxCpltCallback+0x3d4>)
 80006fc:	48f2      	ldr	r0, [pc, #968]	; (8000ac8 <HAL_UART_RxCpltCallback+0x3d8>)
 80006fe:	f00f fb49 	bl	800fd94 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bf0      	ldr	r3, [pc, #960]	; (8000ac4 <HAL_UART_RxCpltCallback+0x3d4>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2be0      	cmp	r3, #224	; 0xe0
 800070c:	f200 83c6 	bhi.w	8000e9c <HAL_UART_RxCpltCallback+0x7ac>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000ab1 	.word	0x08000ab1
 800071c:	08000aed 	.word	0x08000aed
 8000720:	08000b73 	.word	0x08000b73
 8000724:	08000b9d 	.word	0x08000b9d
 8000728:	08000bc5 	.word	0x08000bc5
 800072c:	08000bef 	.word	0x08000bef
 8000730:	08000c1b 	.word	0x08000c1b
 8000734:	08000c47 	.word	0x08000c47
 8000738:	08000c71 	.word	0x08000c71
 800073c:	08000ca3 	.word	0x08000ca3
 8000740:	08000cc5 	.word	0x08000cc5
 8000744:	08000ce1 	.word	0x08000ce1
 8000748:	08000cfd 	.word	0x08000cfd
 800074c:	08000d47 	.word	0x08000d47
 8000750:	08000e41 	.word	0x08000e41
 8000754:	08000e71 	.word	0x08000e71
 8000758:	08000a9d 	.word	0x08000a9d
 800075c:	08000ad9 	.word	0x08000ad9
 8000760:	08000b5d 	.word	0x08000b5d
 8000764:	08000b89 	.word	0x08000b89
 8000768:	08000bb1 	.word	0x08000bb1
 800076c:	08000bd9 	.word	0x08000bd9
 8000770:	08000c05 	.word	0x08000c05
 8000774:	08000c31 	.word	0x08000c31
 8000778:	08000c5d 	.word	0x08000c5d
 800077c:	08000c85 	.word	0x08000c85
 8000780:	08000cb7 	.word	0x08000cb7
 8000784:	08000cd3 	.word	0x08000cd3
 8000788:	08000cef 	.word	0x08000cef
 800078c:	08000d0b 	.word	0x08000d0b
 8000790:	08000d83 	.word	0x08000d83
 8000794:	08000e69 	.word	0x08000e69
 8000798:	08000e9d 	.word	0x08000e9d
 800079c:	08000e9d 	.word	0x08000e9d
 80007a0:	08000e9d 	.word	0x08000e9d
 80007a4:	08000e9d 	.word	0x08000e9d
 80007a8:	08000e9d 	.word	0x08000e9d
 80007ac:	08000e9d 	.word	0x08000e9d
 80007b0:	08000e9d 	.word	0x08000e9d
 80007b4:	08000e9d 	.word	0x08000e9d
 80007b8:	08000e9d 	.word	0x08000e9d
 80007bc:	08000e9d 	.word	0x08000e9d
 80007c0:	08000e9d 	.word	0x08000e9d
 80007c4:	08000e9d 	.word	0x08000e9d
 80007c8:	08000e9d 	.word	0x08000e9d
 80007cc:	08000e9d 	.word	0x08000e9d
 80007d0:	08000e9d 	.word	0x08000e9d
 80007d4:	08000e9d 	.word	0x08000e9d
 80007d8:	08000e9d 	.word	0x08000e9d
 80007dc:	08000e9d 	.word	0x08000e9d
 80007e0:	08000e9d 	.word	0x08000e9d
 80007e4:	08000e9d 	.word	0x08000e9d
 80007e8:	08000e9d 	.word	0x08000e9d
 80007ec:	08000e9d 	.word	0x08000e9d
 80007f0:	08000e9d 	.word	0x08000e9d
 80007f4:	08000e9d 	.word	0x08000e9d
 80007f8:	08000e9d 	.word	0x08000e9d
 80007fc:	08000e9d 	.word	0x08000e9d
 8000800:	08000e9d 	.word	0x08000e9d
 8000804:	08000e9d 	.word	0x08000e9d
 8000808:	08000e9d 	.word	0x08000e9d
 800080c:	08000e9d 	.word	0x08000e9d
 8000810:	08000e9d 	.word	0x08000e9d
 8000814:	08000e9d 	.word	0x08000e9d
 8000818:	08000e9d 	.word	0x08000e9d
 800081c:	08000e9d 	.word	0x08000e9d
 8000820:	08000e9d 	.word	0x08000e9d
 8000824:	08000e9d 	.word	0x08000e9d
 8000828:	08000e9d 	.word	0x08000e9d
 800082c:	08000e9d 	.word	0x08000e9d
 8000830:	08000e9d 	.word	0x08000e9d
 8000834:	08000e9d 	.word	0x08000e9d
 8000838:	08000e9d 	.word	0x08000e9d
 800083c:	08000e9d 	.word	0x08000e9d
 8000840:	08000e9d 	.word	0x08000e9d
 8000844:	08000e9d 	.word	0x08000e9d
 8000848:	08000e9d 	.word	0x08000e9d
 800084c:	08000e9d 	.word	0x08000e9d
 8000850:	08000e9d 	.word	0x08000e9d
 8000854:	08000e9d 	.word	0x08000e9d
 8000858:	08000e9d 	.word	0x08000e9d
 800085c:	08000e9d 	.word	0x08000e9d
 8000860:	08000e9d 	.word	0x08000e9d
 8000864:	08000e9d 	.word	0x08000e9d
 8000868:	08000e9d 	.word	0x08000e9d
 800086c:	08000e9d 	.word	0x08000e9d
 8000870:	08000e9d 	.word	0x08000e9d
 8000874:	08000e9d 	.word	0x08000e9d
 8000878:	08000e9d 	.word	0x08000e9d
 800087c:	08000e9d 	.word	0x08000e9d
 8000880:	08000e9d 	.word	0x08000e9d
 8000884:	08000e9d 	.word	0x08000e9d
 8000888:	08000e9d 	.word	0x08000e9d
 800088c:	08000e9d 	.word	0x08000e9d
 8000890:	08000e9d 	.word	0x08000e9d
 8000894:	08000e9d 	.word	0x08000e9d
 8000898:	08000e9d 	.word	0x08000e9d
 800089c:	08000e9d 	.word	0x08000e9d
 80008a0:	08000e9d 	.word	0x08000e9d
 80008a4:	08000e9d 	.word	0x08000e9d
 80008a8:	08000e9d 	.word	0x08000e9d
 80008ac:	08000e9d 	.word	0x08000e9d
 80008b0:	08000e9d 	.word	0x08000e9d
 80008b4:	08000e9d 	.word	0x08000e9d
 80008b8:	08000e9d 	.word	0x08000e9d
 80008bc:	08000e9d 	.word	0x08000e9d
 80008c0:	08000e9d 	.word	0x08000e9d
 80008c4:	08000e9d 	.word	0x08000e9d
 80008c8:	08000e9d 	.word	0x08000e9d
 80008cc:	08000e9d 	.word	0x08000e9d
 80008d0:	08000e9d 	.word	0x08000e9d
 80008d4:	08000e9d 	.word	0x08000e9d
 80008d8:	08000e9d 	.word	0x08000e9d
 80008dc:	08000e9d 	.word	0x08000e9d
 80008e0:	08000e9d 	.word	0x08000e9d
 80008e4:	08000e9d 	.word	0x08000e9d
 80008e8:	08000e9d 	.word	0x08000e9d
 80008ec:	08000e9d 	.word	0x08000e9d
 80008f0:	08000e9d 	.word	0x08000e9d
 80008f4:	08000e9d 	.word	0x08000e9d
 80008f8:	08000e9d 	.word	0x08000e9d
 80008fc:	08000e9d 	.word	0x08000e9d
 8000900:	08000e9d 	.word	0x08000e9d
 8000904:	08000e9d 	.word	0x08000e9d
 8000908:	08000e9d 	.word	0x08000e9d
 800090c:	08000e9d 	.word	0x08000e9d
 8000910:	08000e9d 	.word	0x08000e9d
 8000914:	08000e9d 	.word	0x08000e9d
 8000918:	08000e9d 	.word	0x08000e9d
 800091c:	08000e9d 	.word	0x08000e9d
 8000920:	08000e9d 	.word	0x08000e9d
 8000924:	08000e9d 	.word	0x08000e9d
 8000928:	08000e9d 	.word	0x08000e9d
 800092c:	08000e9d 	.word	0x08000e9d
 8000930:	08000e9d 	.word	0x08000e9d
 8000934:	08000e9d 	.word	0x08000e9d
 8000938:	08000e9d 	.word	0x08000e9d
 800093c:	08000e9d 	.word	0x08000e9d
 8000940:	08000e9d 	.word	0x08000e9d
 8000944:	08000e9d 	.word	0x08000e9d
 8000948:	08000e9d 	.word	0x08000e9d
 800094c:	08000e9d 	.word	0x08000e9d
 8000950:	08000e9d 	.word	0x08000e9d
 8000954:	08000e9d 	.word	0x08000e9d
 8000958:	08000e9d 	.word	0x08000e9d
 800095c:	08000e9d 	.word	0x08000e9d
 8000960:	08000e9d 	.word	0x08000e9d
 8000964:	08000e9d 	.word	0x08000e9d
 8000968:	08000e9d 	.word	0x08000e9d
 800096c:	08000e9d 	.word	0x08000e9d
 8000970:	08000e9d 	.word	0x08000e9d
 8000974:	08000e9d 	.word	0x08000e9d
 8000978:	08000e9d 	.word	0x08000e9d
 800097c:	08000e9d 	.word	0x08000e9d
 8000980:	08000e9d 	.word	0x08000e9d
 8000984:	08000e9d 	.word	0x08000e9d
 8000988:	08000e9d 	.word	0x08000e9d
 800098c:	08000e9d 	.word	0x08000e9d
 8000990:	08000e9d 	.word	0x08000e9d
 8000994:	08000e9d 	.word	0x08000e9d
 8000998:	08000e9d 	.word	0x08000e9d
 800099c:	08000e9d 	.word	0x08000e9d
 80009a0:	08000e9d 	.word	0x08000e9d
 80009a4:	08000e9d 	.word	0x08000e9d
 80009a8:	08000e9d 	.word	0x08000e9d
 80009ac:	08000e9d 	.word	0x08000e9d
 80009b0:	08000e9d 	.word	0x08000e9d
 80009b4:	08000e9d 	.word	0x08000e9d
 80009b8:	08000e9d 	.word	0x08000e9d
 80009bc:	08000e9d 	.word	0x08000e9d
 80009c0:	08000e9d 	.word	0x08000e9d
 80009c4:	08000e9d 	.word	0x08000e9d
 80009c8:	08000e9d 	.word	0x08000e9d
 80009cc:	08000e9d 	.word	0x08000e9d
 80009d0:	08000e9d 	.word	0x08000e9d
 80009d4:	08000e9d 	.word	0x08000e9d
 80009d8:	08000e9d 	.word	0x08000e9d
 80009dc:	08000e9d 	.word	0x08000e9d
 80009e0:	08000e9d 	.word	0x08000e9d
 80009e4:	08000e9d 	.word	0x08000e9d
 80009e8:	08000e9d 	.word	0x08000e9d
 80009ec:	08000e9d 	.word	0x08000e9d
 80009f0:	08000e9d 	.word	0x08000e9d
 80009f4:	08000e9d 	.word	0x08000e9d
 80009f8:	08000e9d 	.word	0x08000e9d
 80009fc:	08000e9d 	.word	0x08000e9d
 8000a00:	08000e9d 	.word	0x08000e9d
 8000a04:	08000e9d 	.word	0x08000e9d
 8000a08:	08000e9d 	.word	0x08000e9d
 8000a0c:	08000e9d 	.word	0x08000e9d
 8000a10:	08000e9d 	.word	0x08000e9d
 8000a14:	08000e9d 	.word	0x08000e9d
 8000a18:	08000e9d 	.word	0x08000e9d
 8000a1c:	08000e9d 	.word	0x08000e9d
 8000a20:	08000e9d 	.word	0x08000e9d
 8000a24:	08000e9d 	.word	0x08000e9d
 8000a28:	08000e9d 	.word	0x08000e9d
 8000a2c:	08000e9d 	.word	0x08000e9d
 8000a30:	08000e9d 	.word	0x08000e9d
 8000a34:	08000e9d 	.word	0x08000e9d
 8000a38:	08000e9d 	.word	0x08000e9d
 8000a3c:	08000e9d 	.word	0x08000e9d
 8000a40:	08000e9d 	.word	0x08000e9d
 8000a44:	08000e9d 	.word	0x08000e9d
 8000a48:	08000e9d 	.word	0x08000e9d
 8000a4c:	08000e9d 	.word	0x08000e9d
 8000a50:	08000e9d 	.word	0x08000e9d
 8000a54:	08000e9d 	.word	0x08000e9d
 8000a58:	08000e8b 	.word	0x08000e8b
 8000a5c:	08000e9d 	.word	0x08000e9d
 8000a60:	08000e9d 	.word	0x08000e9d
 8000a64:	08000e9d 	.word	0x08000e9d
 8000a68:	08000e9d 	.word	0x08000e9d
 8000a6c:	08000e9d 	.word	0x08000e9d
 8000a70:	08000e9d 	.word	0x08000e9d
 8000a74:	08000e9d 	.word	0x08000e9d
 8000a78:	08000e9d 	.word	0x08000e9d
 8000a7c:	08000e9d 	.word	0x08000e9d
 8000a80:	08000e9d 	.word	0x08000e9d
 8000a84:	08000e9d 	.word	0x08000e9d
 8000a88:	08000e9d 	.word	0x08000e9d
 8000a8c:	08000e9d 	.word	0x08000e9d
 8000a90:	08000e9d 	.word	0x08000e9d
 8000a94:	08000e9d 	.word	0x08000e9d
 8000a98:	08000e79 	.word	0x08000e79
	case 0x10: {
		printf("SDN1 ON\n");
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <HAL_UART_RxCpltCallback+0x3dc>)
 8000a9e:	f015 fb63 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_UART_RxCpltCallback+0x3e0>)
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f008 f82b 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000aae:	e200      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000ab0:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <HAL_UART_RxCpltCallback+0x3e4>)
 8000ab2:	f015 fb59 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_UART_RxCpltCallback+0x3e0>)
 8000ab8:	2104      	movs	r1, #4
 8000aba:	2200      	movs	r2, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f008 f821 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000ac2:	e1f6      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
 8000ac4:	24000b48 	.word	0x24000b48
 8000ac8:	240005cc 	.word	0x240005cc
 8000acc:	08016f34 	.word	0x08016f34
 8000ad0:	58020400 	.word	0x58020400
 8000ad4:	08016f3c 	.word	0x08016f3c
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000ad8:	48b4      	ldr	r0, [pc, #720]	; (8000dac <HAL_UART_RxCpltCallback+0x6bc>)
 8000ada:	f015 fb45 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000ade:	4bb4      	ldr	r3, [pc, #720]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 f80d 	bl	8008b04 <HAL_GPIO_WritePin>

		break;
 8000aea:	e1e2      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000aec:	48b1      	ldr	r0, [pc, #708]	; (8000db4 <HAL_UART_RxCpltCallback+0x6c4>)
 8000aee:	f015 fb3b 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000af2:	4baf      	ldr	r3, [pc, #700]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000af4:	2120      	movs	r1, #32
 8000af6:	2200      	movs	r2, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f008 f803 	bl	8008b04 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000afe:	4bac      	ldr	r3, [pc, #688]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	2200      	movs	r2, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f007 fffd 	bl	8008b04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000b0a:	4bab      	ldr	r3, [pc, #684]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b10:	2200      	movs	r2, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f007 fff6 	bl	8008b04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b18:	4ba7      	ldr	r3, [pc, #668]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b1e:	2200      	movs	r2, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f007 ffef 	bl	8008b04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b26:	4ba4      	ldr	r3, [pc, #656]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 ffe8 	bl	8008b04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b34:	4ba0      	ldr	r3, [pc, #640]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f007 ffe2 	bl	8008b04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b40:	4b9d      	ldr	r3, [pc, #628]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b42:	2180      	movs	r1, #128	; 0x80
 8000b44:	2200      	movs	r2, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 ffdc 	bl	8008b04 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b4c:	4b9a      	ldr	r3, [pc, #616]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b52:	2200      	movs	r2, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f007 ffd5 	bl	8008b04 <HAL_GPIO_WritePin>

		break;
 8000b5a:	e1aa      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000b5c:	4897      	ldr	r0, [pc, #604]	; (8000dbc <HAL_UART_RxCpltCallback+0x6cc>)
 8000b5e:	f015 fb03 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000b62:	4b95      	ldr	r3, [pc, #596]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b68:	2201      	movs	r2, #1
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f007 ffca 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000b70:	e19f      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000b72:	4893      	ldr	r0, [pc, #588]	; (8000dc0 <HAL_UART_RxCpltCallback+0x6d0>)
 8000b74:	f015 faf8 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000b78:	4b8f      	ldr	r3, [pc, #572]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f007 ffbf 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000b86:	e194      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b88:	488e      	ldr	r0, [pc, #568]	; (8000dc4 <HAL_UART_RxCpltCallback+0x6d4>)
 8000b8a:	f015 faed 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b8e:	4b8a      	ldr	r3, [pc, #552]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	2201      	movs	r2, #1
 8000b94:	4618      	mov	r0, r3
 8000b96:	f007 ffb5 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000b9a:	e18a      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b9c:	488a      	ldr	r0, [pc, #552]	; (8000dc8 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b9e:	f015 fae3 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000ba2:	4b85      	ldr	r3, [pc, #532]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f007 ffab 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000bae:	e180      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000bb0:	4886      	ldr	r0, [pc, #536]	; (8000dcc <HAL_UART_RxCpltCallback+0x6dc>)
 8000bb2:	f015 fad9 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000bb6:	4b80      	ldr	r3, [pc, #512]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bb8:	2140      	movs	r1, #64	; 0x40
 8000bba:	2201      	movs	r2, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f007 ffa1 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000bc2:	e176      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000bc4:	4882      	ldr	r0, [pc, #520]	; (8000dd0 <HAL_UART_RxCpltCallback+0x6e0>)
 8000bc6:	f015 facf 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000bca:	4b7b      	ldr	r3, [pc, #492]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bcc:	2140      	movs	r1, #64	; 0x40
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f007 ff97 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000bd6:	e16c      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000bd8:	487e      	ldr	r0, [pc, #504]	; (8000dd4 <HAL_UART_RxCpltCallback+0x6e4>)
 8000bda:	f015 fac5 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000bde:	4b76      	ldr	r3, [pc, #472]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be4:	2201      	movs	r2, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f007 ff8c 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000bec:	e161      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000bee:	487a      	ldr	r0, [pc, #488]	; (8000dd8 <HAL_UART_RxCpltCallback+0x6e8>)
 8000bf0:	f015 faba 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000bf4:	4b70      	ldr	r3, [pc, #448]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f007 ff81 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000c02:	e156      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000c04:	4875      	ldr	r0, [pc, #468]	; (8000ddc <HAL_UART_RxCpltCallback+0x6ec>)
 8000c06:	f015 faaf 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000c0a:	4b6b      	ldr	r3, [pc, #428]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c10:	2201      	movs	r2, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	f007 ff76 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000c18:	e14b      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000c1a:	4871      	ldr	r0, [pc, #452]	; (8000de0 <HAL_UART_RxCpltCallback+0x6f0>)
 8000c1c:	f015 faa4 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000c20:	4b65      	ldr	r3, [pc, #404]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c26:	2200      	movs	r2, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f007 ff6b 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000c2e:	e140      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000c30:	486c      	ldr	r0, [pc, #432]	; (8000de4 <HAL_UART_RxCpltCallback+0x6f4>)
 8000c32:	f015 fa99 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000c36:	4b60      	ldr	r3, [pc, #384]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f007 ff60 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000c44:	e135      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000c46:	4868      	ldr	r0, [pc, #416]	; (8000de8 <HAL_UART_RxCpltCallback+0x6f8>)
 8000c48:	f015 fa8e 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000c4c:	4b5a      	ldr	r3, [pc, #360]	; (8000db8 <HAL_UART_RxCpltCallback+0x6c8>)
 8000c4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c52:	2200      	movs	r2, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f007 ff55 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000c5a:	e12a      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000c5c:	4863      	ldr	r0, [pc, #396]	; (8000dec <HAL_UART_RxCpltCallback+0x6fc>)
 8000c5e:	f015 fa83 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000c62:	4b53      	ldr	r3, [pc, #332]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000c64:	2140      	movs	r1, #64	; 0x40
 8000c66:	2201      	movs	r2, #1
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f007 ff4b 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000c6e:	e120      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000c70:	485f      	ldr	r0, [pc, #380]	; (8000df0 <HAL_UART_RxCpltCallback+0x700>)
 8000c72:	f015 fa79 	bl	8016168 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000c76:	4b4e      	ldr	r3, [pc, #312]	; (8000db0 <HAL_UART_RxCpltCallback+0x6c0>)
 8000c78:	2140      	movs	r1, #64	; 0x40
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f007 ff41 	bl	8008b04 <HAL_GPIO_WritePin>
		break;
 8000c82:	e116      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c84:	485b      	ldr	r0, [pc, #364]	; (8000df4 <HAL_UART_RxCpltCallback+0x704>)
 8000c86:	f015 fa6f 	bl	8016168 <puts>
		HAL_TIM_Base_Start(&htim2);
 8000c8a:	485b      	ldr	r0, [pc, #364]	; (8000df8 <HAL_UART_RxCpltCallback+0x708>)
 8000c8c:	f00d fa66 	bl	800e15c <HAL_TIM_Base_Start>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c90:	2300      	movs	r3, #0
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2320      	movs	r3, #32
 8000c96:	4a59      	ldr	r2, [pc, #356]	; (8000dfc <HAL_UART_RxCpltCallback+0x70c>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4859      	ldr	r0, [pc, #356]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000c9c:	f004 fba2 	bl	80053e4 <HAL_DAC_Start_DMA>
		break;
 8000ca0:	e107      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000ca2:	4858      	ldr	r0, [pc, #352]	; (8000e04 <HAL_UART_RxCpltCallback+0x714>)
 8000ca4:	f015 fa60 	bl	8016168 <puts>
		HAL_TIM_Base_Stop(&htim2);
 8000ca8:	4853      	ldr	r0, [pc, #332]	; (8000df8 <HAL_UART_RxCpltCallback+0x708>)
 8000caa:	f00d fac7 	bl	800e23c <HAL_TIM_Base_Stop>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4853      	ldr	r0, [pc, #332]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000cb2:	f004 fc57 	bl	8005564 <HAL_DAC_Stop_DMA>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000cb6:	4854      	ldr	r0, [pc, #336]	; (8000e08 <HAL_UART_RxCpltCallback+0x718>)
 8000cb8:	f015 fa56 	bl	8016168 <puts>
		ERPA_ON = 1;
 8000cbc:	4b53      	ldr	r3, [pc, #332]	; (8000e0c <HAL_UART_RxCpltCallback+0x71c>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
		break;
 8000cc2:	e0f6      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000cc4:	4852      	ldr	r0, [pc, #328]	; (8000e10 <HAL_UART_RxCpltCallback+0x720>)
 8000cc6:	f015 fa4f 	bl	8016168 <puts>
		ERPA_ON = 0;
 8000cca:	4b50      	ldr	r3, [pc, #320]	; (8000e0c <HAL_UART_RxCpltCallback+0x71c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
		break;
 8000cd0:	e0ef      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000cd2:	4850      	ldr	r0, [pc, #320]	; (8000e14 <HAL_UART_RxCpltCallback+0x724>)
 8000cd4:	f015 fa48 	bl	8016168 <puts>
		PMT_ON = 1;
 8000cd8:	4b4f      	ldr	r3, [pc, #316]	; (8000e18 <HAL_UART_RxCpltCallback+0x728>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	701a      	strb	r2, [r3, #0]
		break;
 8000cde:	e0e8      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000ce0:	484e      	ldr	r0, [pc, #312]	; (8000e1c <HAL_UART_RxCpltCallback+0x72c>)
 8000ce2:	f015 fa41 	bl	8016168 <puts>
		PMT_ON = 0;
 8000ce6:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <HAL_UART_RxCpltCallback+0x728>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
		break;
 8000cec:	e0e1      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000cee:	484c      	ldr	r0, [pc, #304]	; (8000e20 <HAL_UART_RxCpltCallback+0x730>)
 8000cf0:	f015 fa3a 	bl	8016168 <puts>
		HK_ON = 1;
 8000cf4:	4b4b      	ldr	r3, [pc, #300]	; (8000e24 <HAL_UART_RxCpltCallback+0x734>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
		break;
 8000cfa:	e0da      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000cfc:	484a      	ldr	r0, [pc, #296]	; (8000e28 <HAL_UART_RxCpltCallback+0x738>)
 8000cfe:	f015 fa33 	bl	8016168 <puts>
		HK_ON = 0;
 8000d02:	4b48      	ldr	r3, [pc, #288]	; (8000e24 <HAL_UART_RxCpltCallback+0x734>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
		break;
 8000d08:	e0d3      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000d0a:	4848      	ldr	r0, [pc, #288]	; (8000e2c <HAL_UART_RxCpltCallback+0x73c>)
 8000d0c:	f015 fa2c 	bl	8016168 <puts>
		if (step < 17) {
 8000d10:	4b47      	ldr	r3, [pc, #284]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b10      	cmp	r3, #16
 8000d16:	f200 80c5 	bhi.w	8000ea4 <HAL_UART_RxCpltCallback+0x7b4>
			step+=2;
 8000d1a:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	3302      	adds	r3, #2
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d24:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000d26:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <HAL_UART_RxCpltCallback+0x70c>)
 8000d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d32:	2200      	movs	r2, #0
 8000d34:	2100      	movs	r1, #0
 8000d36:	4832      	ldr	r0, [pc, #200]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d38:	f004 fcb7 	bl	80056aa <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4830      	ldr	r0, [pc, #192]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d40:	f004 faf8 	bl	8005334 <HAL_DAC_Start>
		}
		break;
 8000d44:	e0ae      	b.n	8000ea4 <HAL_UART_RxCpltCallback+0x7b4>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000d46:	483b      	ldr	r0, [pc, #236]	; (8000e34 <HAL_UART_RxCpltCallback+0x744>)
 8000d48:	f015 fa0e 	bl	8016168 <puts>
		if (step > 3) {
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	f240 80a9 	bls.w	8000ea8 <HAL_UART_RxCpltCallback+0x7b8>
			step-=2;
 8000d56:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	3b02      	subs	r3, #2
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d60:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000d62:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <HAL_UART_RxCpltCallback+0x740>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b24      	ldr	r3, [pc, #144]	; (8000dfc <HAL_UART_RxCpltCallback+0x70c>)
 8000d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	4823      	ldr	r0, [pc, #140]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d74:	f004 fc99 	bl	80056aa <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4821      	ldr	r0, [pc, #132]	; (8000e00 <HAL_UART_RxCpltCallback+0x710>)
 8000d7c:	f004 fada 	bl	8005334 <HAL_DAC_Start>
		}
		break;
 8000d80:	e092      	b.n	8000ea8 <HAL_UART_RxCpltCallback+0x7b8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000d82:	482d      	ldr	r0, [pc, #180]	; (8000e38 <HAL_UART_RxCpltCallback+0x748>)
 8000d84:	f015 f9f0 	bl	8016168 <puts>
		if (cadence <= 50000){
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000d90:	4293      	cmp	r3, r2
 8000d92:	f200 808b 	bhi.w	8000eac <HAL_UART_RxCpltCallback+0x7bc>
			cadence *= 2;
 8000d96:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000d9e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000da0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da4:	4b25      	ldr	r3, [pc, #148]	; (8000e3c <HAL_UART_RxCpltCallback+0x74c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000daa:	e07f      	b.n	8000eac <HAL_UART_RxCpltCallback+0x7bc>
 8000dac:	08016f48 	.word	0x08016f48
 8000db0:	58020400 	.word	0x58020400
 8000db4:	08016f54 	.word	0x08016f54
 8000db8:	58020800 	.word	0x58020800
 8000dbc:	08016f60 	.word	0x08016f60
 8000dc0:	08016f6c 	.word	0x08016f6c
 8000dc4:	08016f7c 	.word	0x08016f7c
 8000dc8:	08016f88 	.word	0x08016f88
 8000dcc:	08016f94 	.word	0x08016f94
 8000dd0:	08016fa0 	.word	0x08016fa0
 8000dd4:	08016fb0 	.word	0x08016fb0
 8000dd8:	08016fbc 	.word	0x08016fbc
 8000ddc:	08016fc8 	.word	0x08016fc8
 8000de0:	08016fd4 	.word	0x08016fd4
 8000de4:	08016fe0 	.word	0x08016fe0
 8000de8:	08016ff0 	.word	0x08016ff0
 8000dec:	08017000 	.word	0x08017000
 8000df0:	0801700c 	.word	0x0801700c
 8000df4:	0801701c 	.word	0x0801701c
 8000df8:	24000534 	.word	0x24000534
 8000dfc:	24000008 	.word	0x24000008
 8000e00:	240002d4 	.word	0x240002d4
 8000e04:	0801702c 	.word	0x0801702c
 8000e08:	0801703c 	.word	0x0801703c
 8000e0c:	24000b3f 	.word	0x24000b3f
 8000e10:	08017044 	.word	0x08017044
 8000e14:	08017050 	.word	0x08017050
 8000e18:	24000b3e 	.word	0x24000b3e
 8000e1c:	08017058 	.word	0x08017058
 8000e20:	08017060 	.word	0x08017060
 8000e24:	24000b40 	.word	0x24000b40
 8000e28:	08017068 	.word	0x08017068
 8000e2c:	08017070 	.word	0x08017070
 8000e30:	24000004 	.word	0x24000004
 8000e34:	08017078 	.word	0x08017078
 8000e38:	08017084 	.word	0x08017084
 8000e3c:	24000000 	.word	0x24000000
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e40:	481e      	ldr	r0, [pc, #120]	; (8000ebc <HAL_UART_RxCpltCallback+0x7cc>)
 8000e42:	f015 f991 	bl	8016168 <puts>
		if (cadence >= 6250){
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <HAL_UART_RxCpltCallback+0x7d0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d92e      	bls.n	8000eb0 <HAL_UART_RxCpltCallback+0x7c0>
			cadence /= 2;
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_UART_RxCpltCallback+0x7d0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	085b      	lsrs	r3, r3, #1
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_UART_RxCpltCallback+0x7d0>)
 8000e5a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_UART_RxCpltCallback+0x7d0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e66:	e023      	b.n	8000eb0 <HAL_UART_RxCpltCallback+0x7c0>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e68:	4816      	ldr	r0, [pc, #88]	; (8000ec4 <HAL_UART_RxCpltCallback+0x7d4>)
 8000e6a:	f015 f97d 	bl	8016168 <puts>
		// TODO: Exit stop mode
		break;
 8000e6e:	e020      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e70:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <HAL_UART_RxCpltCallback+0x7d8>)
 8000e72:	f015 f979 	bl	8016168 <puts>
		// TODO: Enter stop mode
		break;
 8000e76:	e01c      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e78:	4814      	ldr	r0, [pc, #80]	; (8000ecc <HAL_UART_RxCpltCallback+0x7dc>)
 8000e7a:	f015 f975 	bl	8016168 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_UART_RxCpltCallback+0x7e0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f013 f9c4 	bl	8014210 <xTaskResumeFromISR>
		break;
 8000e88:	e013      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e8a:	4812      	ldr	r0, [pc, #72]	; (8000ed4 <HAL_UART_RxCpltCallback+0x7e4>)
 8000e8c:	f015 f96c 	bl	8016168 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_UART_RxCpltCallback+0x7e8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f013 f9bb 	bl	8014210 <xTaskResumeFromISR>
		break;
 8000e9a:	e00a      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
	}
	default:{
		printf("Unknown Command\n");
 8000e9c:	480f      	ldr	r0, [pc, #60]	; (8000edc <HAL_UART_RxCpltCallback+0x7ec>)
 8000e9e:	f015 f963 	bl	8016168 <puts>
		break;
 8000ea2:	e006      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000ea4:	bf00      	nop
 8000ea6:	e004      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000ea8:	bf00      	nop
 8000eaa:	e002      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000eac:	bf00      	nop
 8000eae:	e000      	b.n	8000eb2 <HAL_UART_RxCpltCallback+0x7c2>
		break;
 8000eb0:	bf00      	nop
	}
	}
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	08017090 	.word	0x08017090
 8000ec0:	24000000 	.word	0x24000000
 8000ec4:	0801709c 	.word	0x0801709c
 8000ec8:	080170ac 	.word	0x080170ac
 8000ecc:	080170bc 	.word	0x080170bc
 8000ed0:	24000674 	.word	0x24000674
 8000ed4:	080170c8 	.word	0x080170c8
 8000ed8:	240008d4 	.word	0x240008d4
 8000edc:	080170d4 	.word	0x080170d4

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f002 fc92 	bl	800380c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f8b6 	bl	8001058 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eec:	f000 f934 	bl	8001158 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef0:	f000 fe82 	bl	8001bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ef4:	f000 fe50 	bl	8001b98 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ef8:	f000 fdb4 	bl	8001a64 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000efc:	f000 fe00 	bl	8001b00 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000f00:	f000 fb40 	bl	8001584 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000f04:	f000 fc32 	bl	800176c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000f08:	f000 fd36 	bl	8001978 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f0c:	f000 fc86 	bl	800181c <MX_TIM1_Init>
  MX_ADC3_Init();
 8000f10:	f000 fa74 	bl	80013fc <MX_ADC3_Init>
  MX_ADC1_Init();
 8000f14:	f000 f950 	bl	80011b8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000f18:	f000 fb02 	bl	8001520 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000f1c:	f000 fbce 	bl	80016bc <MX_SPI1_Init>
  MX_RTC_Init();
 8000f20:	f000 fb70 	bl	8001604 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000f24:	f001 f82a 	bl	8001f7c <handshake>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <main+0x52>
	{
		Error_Handler();
 8000f2e:	f001 fd91 	bl	8002a54 <Error_Handler>
	}


	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f32:	2100      	movs	r1, #0
 8000f34:	482d      	ldr	r0, [pc, #180]	; (8000fec <main+0x10c>)
 8000f36:	f00d fa21 	bl	800e37c <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	482c      	ldr	r0, [pc, #176]	; (8000ff0 <main+0x110>)
 8000f3e:	f00d fa1d 	bl	800e37c <HAL_TIM_OC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000f42:	2100      	movs	r1, #0
 8000f44:	482b      	ldr	r0, [pc, #172]	; (8000ff4 <main+0x114>)
 8000f46:	f00d fa19 	bl	800e37c <HAL_TIM_OC_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f4a:	f011 fab7 	bl	80124bc <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2108      	movs	r1, #8
 8000f52:	2010      	movs	r0, #16
 8000f54:	f011 fcd4 	bl	8012900 <osMessageQueueNew>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <main+0x118>)
 8000f5c:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000f5e:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <main+0x11c>)
 8000f60:	2100      	movs	r1, #0
 8000f62:	4827      	ldr	r0, [pc, #156]	; (8001000 <main+0x120>)
 8000f64:	f011 faf4 	bl	8012550 <osThreadNew>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a26      	ldr	r2, [pc, #152]	; (8001004 <main+0x124>)
 8000f6c:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f6e:	4a26      	ldr	r2, [pc, #152]	; (8001008 <main+0x128>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4826      	ldr	r0, [pc, #152]	; (800100c <main+0x12c>)
 8000f74:	f011 faec 	bl	8012550 <osThreadNew>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a25      	ldr	r2, [pc, #148]	; (8001010 <main+0x130>)
 8000f7c:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f7e:	4a25      	ldr	r2, [pc, #148]	; (8001014 <main+0x134>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	4825      	ldr	r0, [pc, #148]	; (8001018 <main+0x138>)
 8000f84:	f011 fae4 	bl	8012550 <osThreadNew>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a24      	ldr	r2, [pc, #144]	; (800101c <main+0x13c>)
 8000f8c:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000f8e:	4a24      	ldr	r2, [pc, #144]	; (8001020 <main+0x140>)
 8000f90:	2100      	movs	r1, #0
 8000f92:	4824      	ldr	r0, [pc, #144]	; (8001024 <main+0x144>)
 8000f94:	f011 fadc 	bl	8012550 <osThreadNew>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <main+0x148>)
 8000f9c:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f9e:	4a23      	ldr	r2, [pc, #140]	; (800102c <main+0x14c>)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4823      	ldr	r0, [pc, #140]	; (8001030 <main+0x150>)
 8000fa4:	f011 fad4 	bl	8012550 <osThreadNew>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a22      	ldr	r2, [pc, #136]	; (8001034 <main+0x154>)
 8000fac:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000fae:	4a22      	ldr	r2, [pc, #136]	; (8001038 <main+0x158>)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4822      	ldr	r0, [pc, #136]	; (800103c <main+0x15c>)
 8000fb4:	f011 facc 	bl	8012550 <osThreadNew>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a21      	ldr	r2, [pc, #132]	; (8001040 <main+0x160>)
 8000fbc:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000fbe:	4a21      	ldr	r2, [pc, #132]	; (8001044 <main+0x164>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4821      	ldr	r0, [pc, #132]	; (8001048 <main+0x168>)
 8000fc4:	f011 fac4 	bl	8012550 <osThreadNew>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a20      	ldr	r2, [pc, #128]	; (800104c <main+0x16c>)
 8000fcc:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f011 fbac 	bl	801272c <osEventFlagsNew>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <main+0x170>)
 8000fd8:	6013      	str	r3, [r2, #0]
	system_setup();
 8000fda:	f001 f85d 	bl	8002098 <system_setup>
	printf("Starting kernal...\n");
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <main+0x174>)
 8000fe0:	f015 f8c2 	bl	8016168 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fe4:	f011 fa8e 	bl	8012504 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fe8:	e7fe      	b.n	8000fe8 <main+0x108>
 8000fea:	bf00      	nop
 8000fec:	240004e8 	.word	0x240004e8
 8000ff0:	24000534 	.word	0x24000534
 8000ff4:	24000580 	.word	0x24000580
 8000ff8:	24000b34 	.word	0x24000b34
 8000ffc:	08017148 	.word	0x08017148
 8001000:	08002795 	.word	0x08002795
 8001004:	24000660 	.word	0x24000660
 8001008:	0801716c 	.word	0x0801716c
 800100c:	080027d9 	.word	0x080027d9
 8001010:	24000664 	.word	0x24000664
 8001014:	08017190 	.word	0x08017190
 8001018:	0800281d 	.word	0x0800281d
 800101c:	24000668 	.word	0x24000668
 8001020:	080171b4 	.word	0x080171b4
 8001024:	08002861 	.word	0x08002861
 8001028:	2400066c 	.word	0x2400066c
 800102c:	080171d8 	.word	0x080171d8
 8001030:	08002885 	.word	0x08002885
 8001034:	24000670 	.word	0x24000670
 8001038:	080171fc 	.word	0x080171fc
 800103c:	080028e1 	.word	0x080028e1
 8001040:	24000674 	.word	0x24000674
 8001044:	08017220 	.word	0x08017220
 8001048:	08002989 	.word	0x08002989
 800104c:	240008d4 	.word	0x240008d4
 8001050:	24000b44 	.word	0x24000b44
 8001054:	080170e4 	.word	0x080170e4

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09c      	sub	sp, #112	; 0x70
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	224c      	movs	r2, #76	; 0x4c
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f014 ff10 	bl	8015e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2220      	movs	r2, #32
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f014 ff0a 	bl	8015e8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001078:	2002      	movs	r0, #2
 800107a:	f008 fb45 	bl	8009708 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b33      	ldr	r3, [pc, #204]	; (8001150 <SystemClock_Config+0xf8>)
 8001084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001086:	4a32      	ldr	r2, [pc, #200]	; (8001150 <SystemClock_Config+0xf8>)
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800108e:	4b30      	ldr	r3, [pc, #192]	; (8001150 <SystemClock_Config+0xf8>)
 8001090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <SystemClock_Config+0xfc>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a0:	4a2c      	ldr	r2, [pc, #176]	; (8001154 <SystemClock_Config+0xfc>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <SystemClock_Config+0xfc>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010b4:	bf00      	nop
 80010b6:	4b27      	ldr	r3, [pc, #156]	; (8001154 <SystemClock_Config+0xfc>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010c2:	d1f8      	bne.n	80010b6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010c4:	230a      	movs	r3, #10
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2340      	movs	r3, #64	; 0x40
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010d0:	2301      	movs	r3, #1
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d8:	2300      	movs	r3, #0
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80010e0:	230c      	movs	r3, #12
 80010e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010f0:	230c      	movs	r3, #12
 80010f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	4618      	mov	r0, r3
 8001102:	f008 fb3b 	bl	800977c <HAL_RCC_OscConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800110c:	f001 fca2 	bl	8002a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001110:	233f      	movs	r3, #63	; 0x3f
 8001112:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001114:	2303      	movs	r3, #3
 8001116:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001124:	2340      	movs	r3, #64	; 0x40
 8001126:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2101      	movs	r1, #1
 8001136:	4618      	mov	r0, r3
 8001138:	f008 ff7a 	bl	800a030 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001142:	f001 fc87 	bl	8002a54 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3770      	adds	r7, #112	; 0x70
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	58000400 	.word	0x58000400
 8001154:	58024800 	.word	0x58024800

08001158 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0b0      	sub	sp, #192	; 0xc0
 800115c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	22c0      	movs	r2, #192	; 0xc0
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f014 fe91 	bl	8015e8c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800116a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001176:	2304      	movs	r3, #4
 8001178:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800117a:	2309      	movs	r3, #9
 800117c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800117e:	2304      	movs	r3, #4
 8001180:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001182:	2302      	movs	r3, #2
 8001184:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001186:	2302      	movs	r3, #2
 8001188:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800118a:	23c0      	movs	r3, #192	; 0xc0
 800118c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800118e:	2320      	movs	r3, #32
 8001190:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001192:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 fb13 	bl	800a7cc <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80011ac:	f001 fc52 	bl	8002a54 <Error_Handler>
  }
}
 80011b0:	bf00      	nop
 80011b2:	37c0      	adds	r7, #192	; 0xc0
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ca:	463b      	mov	r3, r7
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011dc:	4b7a      	ldr	r3, [pc, #488]	; (80013c8 <MX_ADC1_Init+0x210>)
 80011de:	4a7b      	ldr	r2, [pc, #492]	; (80013cc <MX_ADC1_Init+0x214>)
 80011e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80011e2:	4b79      	ldr	r3, [pc, #484]	; (80013c8 <MX_ADC1_Init+0x210>)
 80011e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <MX_ADC1_Init+0x210>)
 80011ec:	2208      	movs	r2, #8
 80011ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011f0:	4b75      	ldr	r3, [pc, #468]	; (80013c8 <MX_ADC1_Init+0x210>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f6:	4b74      	ldr	r3, [pc, #464]	; (80013c8 <MX_ADC1_Init+0x210>)
 80011f8:	2204      	movs	r2, #4
 80011fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011fc:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <MX_ADC1_Init+0x210>)
 80011fe:	2200      	movs	r2, #0
 8001200:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001202:	4b71      	ldr	r3, [pc, #452]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001204:	2201      	movs	r2, #1
 8001206:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8001208:	4b6f      	ldr	r3, [pc, #444]	; (80013c8 <MX_ADC1_Init+0x210>)
 800120a:	220b      	movs	r2, #11
 800120c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800120e:	4b6e      	ldr	r3, [pc, #440]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001210:	2200      	movs	r2, #0
 8001212:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001214:	4b6c      	ldr	r3, [pc, #432]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121a:	4b6b      	ldr	r3, [pc, #428]	; (80013c8 <MX_ADC1_Init+0x210>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001220:	4b69      	ldr	r3, [pc, #420]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001222:	2203      	movs	r2, #3
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001226:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800122c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800122e:	4b66      	ldr	r3, [pc, #408]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001230:	2200      	movs	r2, #0
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001234:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800123c:	4862      	ldr	r0, [pc, #392]	; (80013c8 <MX_ADC1_Init+0x210>)
 800123e:	f002 fd71 	bl	8003d24 <HAL_ADC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001248:	f001 fc04 	bl	8002a54 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	485c      	ldr	r0, [pc, #368]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001258:	f003 fe8c 	bl	8004f74 <HAL_ADCEx_MultiModeConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001262:	f001 fbf7 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001266:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <MX_ADC1_Init+0x218>)
 8001268:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800126a:	2306      	movs	r3, #6
 800126c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800126e:	2307      	movs	r3, #7
 8001270:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001272:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001276:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001278:	2304      	movs	r3, #4
 800127a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	4619      	mov	r1, r3
 8001288:	484f      	ldr	r0, [pc, #316]	; (80013c8 <MX_ADC1_Init+0x210>)
 800128a:	f002 ffcf 	bl	800422c <HAL_ADC_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001294:	f001 fbde 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001298:	4b4e      	ldr	r3, [pc, #312]	; (80013d4 <MX_ADC1_Init+0x21c>)
 800129a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800129c:	230c      	movs	r3, #12
 800129e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4848      	ldr	r0, [pc, #288]	; (80013c8 <MX_ADC1_Init+0x210>)
 80012a6:	f002 ffc1 	bl	800422c <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80012b0:	f001 fbd0 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012b4:	4b48      	ldr	r3, [pc, #288]	; (80013d8 <MX_ADC1_Init+0x220>)
 80012b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012b8:	2312      	movs	r3, #18
 80012ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	4841      	ldr	r0, [pc, #260]	; (80013c8 <MX_ADC1_Init+0x210>)
 80012c2:	f002 ffb3 	bl	800422c <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80012cc:	f001 fbc2 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80012d0:	4b42      	ldr	r3, [pc, #264]	; (80013dc <MX_ADC1_Init+0x224>)
 80012d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012d4:	2318      	movs	r3, #24
 80012d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	483a      	ldr	r0, [pc, #232]	; (80013c8 <MX_ADC1_Init+0x210>)
 80012de:	f002 ffa5 	bl	800422c <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80012e8:	f001 fbb4 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012ec:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <MX_ADC1_Init+0x228>)
 80012ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f6:	463b      	mov	r3, r7
 80012f8:	4619      	mov	r1, r3
 80012fa:	4833      	ldr	r0, [pc, #204]	; (80013c8 <MX_ADC1_Init+0x210>)
 80012fc:	f002 ff96 	bl	800422c <HAL_ADC_ConfigChannel>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001306:	f001 fba5 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800130a:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <MX_ADC1_Init+0x22c>)
 800130c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800130e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001312:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	482b      	ldr	r0, [pc, #172]	; (80013c8 <MX_ADC1_Init+0x210>)
 800131a:	f002 ff87 	bl	800422c <HAL_ADC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8001324:	f001 fb96 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <MX_ADC1_Init+0x230>)
 800132a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800132c:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001330:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	4619      	mov	r1, r3
 8001336:	4824      	ldr	r0, [pc, #144]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001338:	f002 ff78 	bl	800422c <HAL_ADC_ConfigChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8001342:	f001 fb87 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001346:	4b29      	ldr	r3, [pc, #164]	; (80013ec <MX_ADC1_Init+0x234>)
 8001348:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800134a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800134e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	463b      	mov	r3, r7
 8001352:	4619      	mov	r1, r3
 8001354:	481c      	ldr	r0, [pc, #112]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001356:	f002 ff69 	bl	800422c <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001360:	f001 fb78 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <MX_ADC1_Init+0x238>)
 8001366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001368:	f44f 738c 	mov.w	r3, #280	; 0x118
 800136c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	4619      	mov	r1, r3
 8001372:	4815      	ldr	r0, [pc, #84]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001374:	f002 ff5a 	bl	800422c <HAL_ADC_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800137e:	f001 fb69 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <MX_ADC1_Init+0x23c>)
 8001384:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <MX_ADC1_Init+0x210>)
 8001392:	f002 ff4b 	bl	800422c <HAL_ADC_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 800139c:	f001 fb5a 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <MX_ADC1_Init+0x240>)
 80013a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80013a4:	f240 2306 	movw	r3, #518	; 0x206
 80013a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <MX_ADC1_Init+0x210>)
 80013b0:	f002 ff3c 	bl	800422c <HAL_ADC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80013ba:	f001 fb4b 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2400011c 	.word	0x2400011c
 80013cc:	40022000 	.word	0x40022000
 80013d0:	0c900008 	.word	0x0c900008
 80013d4:	10c00010 	.word	0x10c00010
 80013d8:	14f00020 	.word	0x14f00020
 80013dc:	1d500080 	.word	0x1d500080
 80013e0:	21800100 	.word	0x21800100
 80013e4:	25b00200 	.word	0x25b00200
 80013e8:	2a000400 	.word	0x2a000400
 80013ec:	2e300800 	.word	0x2e300800
 80013f0:	3ac04000 	.word	0x3ac04000
 80013f4:	3ef08000 	.word	0x3ef08000
 80013f8:	47520000 	.word	0x47520000

080013fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001414:	4b3d      	ldr	r3, [pc, #244]	; (800150c <MX_ADC3_Init+0x110>)
 8001416:	4a3e      	ldr	r2, [pc, #248]	; (8001510 <MX_ADC3_Init+0x114>)
 8001418:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800141a:	4b3c      	ldr	r3, [pc, #240]	; (800150c <MX_ADC3_Init+0x110>)
 800141c:	2208      	movs	r2, #8
 800141e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001420:	4b3a      	ldr	r3, [pc, #232]	; (800150c <MX_ADC3_Init+0x110>)
 8001422:	2201      	movs	r2, #1
 8001424:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001426:	4b39      	ldr	r3, [pc, #228]	; (800150c <MX_ADC3_Init+0x110>)
 8001428:	2204      	movs	r2, #4
 800142a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800142c:	4b37      	ldr	r3, [pc, #220]	; (800150c <MX_ADC3_Init+0x110>)
 800142e:	2200      	movs	r2, #0
 8001430:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001432:	4b36      	ldr	r3, [pc, #216]	; (800150c <MX_ADC3_Init+0x110>)
 8001434:	2201      	movs	r2, #1
 8001436:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <MX_ADC3_Init+0x110>)
 800143a:	2204      	movs	r2, #4
 800143c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800143e:	4b33      	ldr	r3, [pc, #204]	; (800150c <MX_ADC3_Init+0x110>)
 8001440:	2200      	movs	r2, #0
 8001442:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <MX_ADC3_Init+0x110>)
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800144a:	4b30      	ldr	r3, [pc, #192]	; (800150c <MX_ADC3_Init+0x110>)
 800144c:	2200      	movs	r2, #0
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001450:	4b2e      	ldr	r3, [pc, #184]	; (800150c <MX_ADC3_Init+0x110>)
 8001452:	2203      	movs	r2, #3
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001456:	4b2d      	ldr	r3, [pc, #180]	; (800150c <MX_ADC3_Init+0x110>)
 8001458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800145c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800145e:	4b2b      	ldr	r3, [pc, #172]	; (800150c <MX_ADC3_Init+0x110>)
 8001460:	2200      	movs	r2, #0
 8001462:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <MX_ADC3_Init+0x110>)
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800146c:	4827      	ldr	r0, [pc, #156]	; (800150c <MX_ADC3_Init+0x110>)
 800146e:	f002 fc59 	bl	8003d24 <HAL_ADC_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001478:	f001 faec 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800147c:	4b25      	ldr	r3, [pc, #148]	; (8001514 <MX_ADC3_Init+0x118>)
 800147e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001480:	2306      	movs	r3, #6
 8001482:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001484:	2307      	movs	r3, #7
 8001486:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001488:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800148c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800148e:	2304      	movs	r3, #4
 8001490:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	481b      	ldr	r0, [pc, #108]	; (800150c <MX_ADC3_Init+0x110>)
 80014a0:	f002 fec4 	bl	800422c <HAL_ADC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80014aa:	f001 fad3 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_ADC3_Init+0x11c>)
 80014b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014b2:	230c      	movs	r3, #12
 80014b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	4814      	ldr	r0, [pc, #80]	; (800150c <MX_ADC3_Init+0x110>)
 80014bc:	f002 feb6 	bl	800422c <HAL_ADC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80014c6:	f001 fac5 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014ca:	2301      	movs	r3, #1
 80014cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014ce:	2312      	movs	r3, #18
 80014d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	4619      	mov	r1, r3
 80014d6:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_ADC3_Init+0x110>)
 80014d8:	f002 fea8 	bl	800422c <HAL_ADC_ConfigChannel>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80014e2:	f001 fab7 	bl	8002a54 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <MX_ADC3_Init+0x120>)
 80014e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014ea:	2318      	movs	r3, #24
 80014ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_ADC3_Init+0x110>)
 80014f4:	f002 fe9a 	bl	800422c <HAL_ADC_ConfigChannel>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80014fe:	f001 faa9 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	24000180 	.word	0x24000180
 8001510:	58026000 	.word	0x58026000
 8001514:	cb840000 	.word	0xcb840000
 8001518:	cfb80000 	.word	0xcfb80000
 800151c:	04300002 	.word	0x04300002

08001520 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2224      	movs	r2, #36	; 0x24
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f014 fcad 	bl	8015e8c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_DAC1_Init+0x5c>)
 8001534:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_DAC1_Init+0x60>)
 8001536:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <MX_DAC1_Init+0x5c>)
 800153a:	f003 fed9 	bl	80052f0 <HAL_DAC_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001544:	f001 fa86 	bl	8002a54 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800154c:	230a      	movs	r3, #10
 800154e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001554:	2301      	movs	r3, #1
 8001556:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2200      	movs	r2, #0
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	; (800157c <MX_DAC1_Init+0x5c>)
 8001564:	f004 f8f4 	bl	8005750 <HAL_DAC_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800156e:	f001 fa71 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	240002d4 	.word	0x240002d4
 8001580:	40007400 	.word	0x40007400

08001584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_I2C1_Init+0x74>)
 800158a:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <MX_I2C1_Init+0x78>)
 800158c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_I2C1_Init+0x74>)
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <MX_I2C1_Init+0x7c>)
 8001592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_I2C1_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_I2C1_Init+0x74>)
 800159c:	2201      	movs	r2, #1
 800159e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015be:	480e      	ldr	r0, [pc, #56]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015c0:	f007 faba 	bl	8008b38 <HAL_I2C_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015ca:	f001 fa43 	bl	8002a54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	4809      	ldr	r0, [pc, #36]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015d2:	f008 f801 	bl	80095d8 <HAL_I2CEx_ConfigAnalogFilter>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015dc:	f001 fa3a 	bl	8002a54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015e0:	2100      	movs	r1, #0
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_I2C1_Init+0x74>)
 80015e4:	f008 f843 	bl	800966e <HAL_I2CEx_ConfigDigitalFilter>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015ee:	f001 fa31 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	24000360 	.word	0x24000360
 80015fc:	40005400 	.word	0x40005400
 8001600:	00506682 	.word	0x00506682

08001604 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001618:	2300      	movs	r3, #0
 800161a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <MX_RTC_Init+0xb0>)
 800161e:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <MX_RTC_Init+0xb4>)
 8001620:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <MX_RTC_Init+0xb0>)
 8001624:	2200      	movs	r2, #0
 8001626:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <MX_RTC_Init+0xb0>)
 800162a:	227f      	movs	r2, #127	; 0x7f
 800162c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <MX_RTC_Init+0xb0>)
 8001630:	22ff      	movs	r2, #255	; 0xff
 8001632:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <MX_RTC_Init+0xb0>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800163a:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <MX_RTC_Init+0xb0>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <MX_RTC_Init+0xb0>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <MX_RTC_Init+0xb0>)
 8001648:	2200      	movs	r2, #0
 800164a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800164c:	4819      	ldr	r0, [pc, #100]	; (80016b4 <MX_RTC_Init+0xb0>)
 800164e:	f00b fdbb 	bl	800d1c8 <HAL_RTC_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001658:	f001 f9fc 	bl	8002a54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800165c:	2300      	movs	r3, #0
 800165e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001660:	2300      	movs	r3, #0
 8001662:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001664:	2300      	movs	r3, #0
 8001666:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2201      	movs	r2, #1
 8001674:	4619      	mov	r1, r3
 8001676:	480f      	ldr	r0, [pc, #60]	; (80016b4 <MX_RTC_Init+0xb0>)
 8001678:	f00b fe28 	bl	800d2cc <HAL_RTC_SetTime>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001682:	f001 f9e7 	bl	8002a54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001686:	2305      	movs	r3, #5
 8001688:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 800168a:	2305      	movs	r3, #5
 800168c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x31;
 800168e:	2331      	movs	r3, #49	; 0x31
 8001690:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8001692:	2324      	movs	r3, #36	; 0x24
 8001694:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001696:	463b      	mov	r3, r7
 8001698:	2201      	movs	r2, #1
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_RTC_Init+0xb0>)
 800169e:	f00b ff0f 	bl	800d4c0 <HAL_RTC_SetDate>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80016a8:	f001 f9d4 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	240003b4 	.word	0x240003b4
 80016b8:	58004000 	.word	0x58004000

080016bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016c0:	4b28      	ldr	r3, [pc, #160]	; (8001764 <MX_SPI1_Init+0xa8>)
 80016c2:	4a29      	ldr	r2, [pc, #164]	; (8001768 <MX_SPI1_Init+0xac>)
 80016c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016c6:	4b27      	ldr	r3, [pc, #156]	; (8001764 <MX_SPI1_Init+0xa8>)
 80016c8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <MX_SPI1_Init+0xa8>)
 80016d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80016d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016d6:	4b23      	ldr	r3, [pc, #140]	; (8001764 <MX_SPI1_Init+0xa8>)
 80016d8:	220f      	movs	r2, #15
 80016da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016dc:	4b21      	ldr	r3, [pc, #132]	; (8001764 <MX_SPI1_Init+0xa8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <MX_SPI1_Init+0xa8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016e8:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <MX_SPI1_Init+0xa8>)
 80016ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016f0:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <MX_SPI1_Init+0xa8>)
 80016f2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_SPI1_Init+0xa8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <MX_SPI1_Init+0xa8>)
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_SPI1_Init+0xa8>)
 8001706:	2200      	movs	r2, #0
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_SPI1_Init+0xa8>)
 800170c:	2200      	movs	r2, #0
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_SPI1_Init+0xa8>)
 8001712:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001716:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <MX_SPI1_Init+0xa8>)
 800171a:	2200      	movs	r2, #0
 800171c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_SPI1_Init+0xa8>)
 8001720:	2200      	movs	r2, #0
 8001722:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_SPI1_Init+0xa8>)
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_SPI1_Init+0xa8>)
 800172c:	2200      	movs	r2, #0
 800172e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_SPI1_Init+0xa8>)
 8001732:	2200      	movs	r2, #0
 8001734:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <MX_SPI1_Init+0xa8>)
 8001738:	2200      	movs	r2, #0
 800173a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_SPI1_Init+0xa8>)
 800173e:	2200      	movs	r2, #0
 8001740:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <MX_SPI1_Init+0xa8>)
 8001744:	2200      	movs	r2, #0
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_SPI1_Init+0xa8>)
 800174a:	2200      	movs	r2, #0
 800174c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_SPI1_Init+0xa8>)
 8001750:	f00c f85c 	bl	800d80c <HAL_SPI_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800175a:	f001 f97b 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	240003d8 	.word	0x240003d8
 8001768:	40013000 	.word	0x40013000

0800176c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001770:	4b28      	ldr	r3, [pc, #160]	; (8001814 <MX_SPI2_Init+0xa8>)
 8001772:	4a29      	ldr	r2, [pc, #164]	; (8001818 <MX_SPI2_Init+0xac>)
 8001774:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001776:	4b27      	ldr	r3, [pc, #156]	; (8001814 <MX_SPI2_Init+0xa8>)
 8001778:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800177c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <MX_SPI2_Init+0xa8>)
 8001780:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001784:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <MX_SPI2_Init+0xa8>)
 8001788:	220f      	movs	r2, #15
 800178a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <MX_SPI2_Init+0xa8>)
 800178e:	2200      	movs	r2, #0
 8001790:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <MX_SPI2_Init+0xa8>)
 8001794:	2200      	movs	r2, #0
 8001796:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001798:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <MX_SPI2_Init+0xa8>)
 800179a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800179e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017a0:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017a2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ae:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_SPI2_Init+0xa8>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_SPI2_Init+0xa8>)
 8001800:	f00c f804 	bl	800d80c <HAL_SPI_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 800180a:	f001 f923 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	24000460 	.word	0x24000460
 8001818:	40003800 	.word	0x40003800

0800181c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b09a      	sub	sp, #104	; 0x68
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
 800184c:	615a      	str	r2, [r3, #20]
 800184e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	222c      	movs	r2, #44	; 0x2c
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f014 fb18 	bl	8015e8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800185c:	4b44      	ldr	r3, [pc, #272]	; (8001970 <MX_TIM1_Init+0x154>)
 800185e:	4a45      	ldr	r2, [pc, #276]	; (8001974 <MX_TIM1_Init+0x158>)
 8001860:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 96-1;
 8001862:	4b43      	ldr	r3, [pc, #268]	; (8001970 <MX_TIM1_Init+0x154>)
 8001864:	225f      	movs	r2, #95	; 0x5f
 8001866:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b41      	ldr	r3, [pc, #260]	; (8001970 <MX_TIM1_Init+0x154>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800186e:	4b40      	ldr	r3, [pc, #256]	; (8001970 <MX_TIM1_Init+0x154>)
 8001870:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001874:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <MX_TIM1_Init+0x154>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800187c:	4b3c      	ldr	r3, [pc, #240]	; (8001970 <MX_TIM1_Init+0x154>)
 800187e:	2200      	movs	r2, #0
 8001880:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <MX_TIM1_Init+0x154>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001888:	4839      	ldr	r0, [pc, #228]	; (8001970 <MX_TIM1_Init+0x154>)
 800188a:	f00c fc10 	bl	800e0ae <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001894:	f001 f8de 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800189e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018a2:	4619      	mov	r1, r3
 80018a4:	4832      	ldr	r0, [pc, #200]	; (8001970 <MX_TIM1_Init+0x154>)
 80018a6:	f00d fa4f 	bl	800ed48 <HAL_TIM_ConfigClockSource>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018b0:	f001 f8d0 	bl	8002a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018b4:	482e      	ldr	r0, [pc, #184]	; (8001970 <MX_TIM1_Init+0x154>)
 80018b6:	f00c febb 	bl	800e630 <HAL_TIM_PWM_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018c0:	f001 f8c8 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018d4:	4619      	mov	r1, r3
 80018d6:	4826      	ldr	r0, [pc, #152]	; (8001970 <MX_TIM1_Init+0x154>)
 80018d8:	f00d ff8c 	bl	800f7f4 <HAL_TIMEx_MasterConfigSynchronization>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018e2:	f001 f8b7 	bl	8002a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e6:	2360      	movs	r3, #96	; 0x60
 80018e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80018ea:	f240 13df 	movw	r3, #479	; 0x1df
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f0:	2300      	movs	r3, #0
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001904:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001908:	2200      	movs	r2, #0
 800190a:	4619      	mov	r1, r3
 800190c:	4818      	ldr	r0, [pc, #96]	; (8001970 <MX_TIM1_Init+0x154>)
 800190e:	f00d f907 	bl	800eb20 <HAL_TIM_PWM_ConfigChannel>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001918:	f001 f89c 	bl	8002a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001934:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800193e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	4619      	mov	r1, r3
 8001950:	4807      	ldr	r0, [pc, #28]	; (8001970 <MX_TIM1_Init+0x154>)
 8001952:	f00d ffdd 	bl	800f910 <HAL_TIMEx_ConfigBreakDeadTime>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800195c:	f001 f87a 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <MX_TIM1_Init+0x154>)
 8001962:	f001 fc05 	bl	8003170 <HAL_TIM_MspPostInit>

}
 8001966:	bf00      	nop
 8001968:	3768      	adds	r7, #104	; 0x68
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	240004e8 	.word	0x240004e8
 8001974:	40010000 	.word	0x40010000

08001978 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08e      	sub	sp, #56	; 0x38
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001998:	463b      	mov	r3, r7
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	615a      	str	r2, [r3, #20]
 80019a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <MX_TIM2_Init+0xe8>)
 80019ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <MX_TIM2_Init+0xe8>)
 80019b4:	222f      	movs	r2, #47	; 0x2f
 80019b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <MX_TIM2_Init+0xe8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <MX_TIM2_Init+0xe8>)
 80019c0:	f640 4234 	movw	r2, #3124	; 0xc34
 80019c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <MX_TIM2_Init+0xe8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <MX_TIM2_Init+0xe8>)
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019d2:	4823      	ldr	r0, [pc, #140]	; (8001a60 <MX_TIM2_Init+0xe8>)
 80019d4:	f00c fb6b 	bl	800e0ae <HAL_TIM_Base_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019de:	f001 f839 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ec:	4619      	mov	r1, r3
 80019ee:	481c      	ldr	r0, [pc, #112]	; (8001a60 <MX_TIM2_Init+0xe8>)
 80019f0:	f00d f9aa 	bl	800ed48 <HAL_TIM_ConfigClockSource>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019fa:	f001 f82b 	bl	8002a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019fe:	4818      	ldr	r0, [pc, #96]	; (8001a60 <MX_TIM2_Init+0xe8>)
 8001a00:	f00c fe16 	bl	800e630 <HAL_TIM_PWM_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001a0a:	f001 f823 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a0e:	2320      	movs	r3, #32
 8001a10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4810      	ldr	r0, [pc, #64]	; (8001a60 <MX_TIM2_Init+0xe8>)
 8001a1e:	f00d fee9 	bl	800f7f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a28:	f001 f814 	bl	8002a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2c:	2360      	movs	r3, #96	; 0x60
 8001a2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	220c      	movs	r2, #12
 8001a40:	4619      	mov	r1, r3
 8001a42:	4807      	ldr	r0, [pc, #28]	; (8001a60 <MX_TIM2_Init+0xe8>)
 8001a44:	f00d f86c 	bl	800eb20 <HAL_TIM_PWM_ConfigChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a4e:	f001 f801 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a52:	4803      	ldr	r0, [pc, #12]	; (8001a60 <MX_TIM2_Init+0xe8>)
 8001a54:	f001 fb8c 	bl	8003170 <HAL_TIM_MspPostInit>

}
 8001a58:	bf00      	nop
 8001a5a:	3738      	adds	r7, #56	; 0x38
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	24000534 	.word	0x24000534

08001a64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <MX_TIM3_Init+0x94>)
 8001a84:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <MX_TIM3_Init+0x98>)
 8001a86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <MX_TIM3_Init+0x94>)
 8001a8a:	222f      	movs	r2, #47	; 0x2f
 8001a8c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <MX_TIM3_Init+0x94>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_TIM3_Init+0x94>)
 8001a96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_TIM3_Init+0x94>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_TIM3_Init+0x94>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aa8:	4813      	ldr	r0, [pc, #76]	; (8001af8 <MX_TIM3_Init+0x94>)
 8001aaa:	f00c fb00 	bl	800e0ae <HAL_TIM_Base_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ab4:	f000 ffce 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <MX_TIM3_Init+0x94>)
 8001ac6:	f00d f93f 	bl	800ed48 <HAL_TIM_ConfigClockSource>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ad0:	f000 ffc0 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_TIM3_Init+0x94>)
 8001ae2:	f00d fe87 	bl	800f7f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001aec:	f000 ffb2 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	3720      	adds	r7, #32
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	24000580 	.word	0x24000580
 8001afc:	40000400 	.word	0x40000400

08001b00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b04:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b06:	4a23      	ldr	r2, [pc, #140]	; (8001b94 <MX_USART1_UART_Init+0x94>)
 8001b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b0c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b12:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b48:	4811      	ldr	r0, [pc, #68]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b4a:	f00d ff7d 	bl	800fa48 <HAL_UART_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b54:	f000 ff7e 	bl	8002a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	480d      	ldr	r0, [pc, #52]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b5c:	f010 fb9f 	bl	801229e <HAL_UARTEx_SetTxFifoThreshold>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b66:	f000 ff75 	bl	8002a54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4808      	ldr	r0, [pc, #32]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b6e:	f010 fbd4 	bl	801231a <HAL_UARTEx_SetRxFifoThreshold>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b78:	f000 ff6c 	bl	8002a54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <MX_USART1_UART_Init+0x90>)
 8001b7e:	f010 fb55 	bl	801222c <HAL_UARTEx_DisableFifoMode>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b88:	f000 ff64 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	240005cc 	.word	0x240005cc
 8001b94:	40011000 	.word	0x40011000

08001b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <MX_DMA_Init+0x5c>)
 8001ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ba4:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <MX_DMA_Init+0x5c>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_DMA_Init+0x5c>)
 8001bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2105      	movs	r1, #5
 8001bc0:	200b      	movs	r0, #11
 8001bc2:	f003 fb6d 	bl	80052a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001bc6:	200b      	movs	r0, #11
 8001bc8:	f003 fb84 	bl	80052d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2105      	movs	r1, #5
 8001bd0:	200c      	movs	r0, #12
 8001bd2:	f003 fb65 	bl	80052a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bd6:	200c      	movs	r0, #12
 8001bd8:	f003 fb7c 	bl	80052d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2105      	movs	r1, #5
 8001be0:	2010      	movs	r0, #16
 8001be2:	f003 fb5d 	bl	80052a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001be6:	2010      	movs	r0, #16
 8001be8:	f003 fb74 	bl	80052d4 <HAL_NVIC_EnableIRQ>

}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	58024400 	.word	0x58024400

08001bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c14:	4a32      	ldr	r2, [pc, #200]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1e:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c32:	4a2b      	ldr	r2, [pc, #172]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <MX_GPIO_Init+0xe8>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c86:	2200      	movs	r2, #0
 8001c88:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c8c:	4815      	ldr	r0, [pc, #84]	; (8001ce4 <MX_GPIO_Init+0xec>)
 8001c8e:	f006 ff39 	bl	8008b04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2164      	movs	r1, #100	; 0x64
 8001c96:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <MX_GPIO_Init+0xf0>)
 8001c98:	f006 ff34 	bl	8008b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001c9c:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001ca0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	480b      	ldr	r0, [pc, #44]	; (8001ce4 <MX_GPIO_Init+0xec>)
 8001cb6:	f006 fd5d 	bl	8008774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001cba:	2364      	movs	r3, #100	; 0x64
 8001cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_GPIO_Init+0xf0>)
 8001cd2:	f006 fd4f 	bl	8008774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	; 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	58020800 	.word	0x58020800
 8001ce8:	58020400 	.word	0x58020400

08001cec <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	b299      	uxth	r1, r3
 8001cfe:	f107 0208 	add.w	r2, r7, #8
 8001d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	4817      	ldr	r0, [pc, #92]	; (8001d68 <poll_i2c_sensor+0x7c>)
 8001d0c:	f006 ffb0 	bl	8008c70 <HAL_I2C_Master_Transmit>
 8001d10:	4603      	mov	r3, r0
 8001d12:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001d14:	7b7b      	ldrb	r3, [r7, #13]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001d1a:	4814      	ldr	r0, [pc, #80]	; (8001d6c <poll_i2c_sensor+0x80>)
 8001d1c:	f014 fa24 	bl	8016168 <puts>
 8001d20:	e01c      	b.n	8001d5c <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	b299      	uxth	r1, r3
 8001d26:	f107 0208 	add.w	r2, r7, #8
 8001d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2302      	movs	r3, #2
 8001d32:	480d      	ldr	r0, [pc, #52]	; (8001d68 <poll_i2c_sensor+0x7c>)
 8001d34:	f007 f8b4 	bl	8008ea0 <HAL_I2C_Master_Receive>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001d3c:	7b7b      	ldrb	r3, [r7, #13]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001d42:	480b      	ldr	r0, [pc, #44]	; (8001d70 <poll_i2c_sensor+0x84>)
 8001d44:	f014 fa10 	bl	8016168 <puts>
 8001d48:	e008      	b.n	8001d5c <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001d4a:	7a3b      	ldrb	r3, [r7, #8]
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001d50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d54:	7a7a      	ldrb	r2, [r7, #9]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	10db      	asrs	r3, r3, #3
 8001d5a:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001d5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	24000360 	.word	0x24000360
 8001d6c:	080170f8 	.word	0x080170f8
 8001d70:	08017108 	.word	0x08017108

08001d74 <receive_pmt_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001d7c:	f107 010c 	add.w	r1, r7, #12
 8001d80:	2301      	movs	r3, #1
 8001d82:	2201      	movs	r2, #1
 8001d84:	480c      	ldr	r0, [pc, #48]	; (8001db8 <receive_pmt_spi+0x44>)
 8001d86:	f00b fe65 	bl	800da54 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d8e:	7b7b      	ldrb	r3, [r7, #13]
 8001d90:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <receive_pmt_spi+0x44>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <receive_pmt_spi+0x44>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001da0:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7bba      	ldrb	r2, [r7, #14]
 8001da6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3301      	adds	r3, #1
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	701a      	strb	r2, [r3, #0]
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	240003d8 	.word	0x240003d8

08001dbc <receive_erpa_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001dc4:	f107 010c 	add.w	r1, r7, #12
 8001dc8:	2364      	movs	r3, #100	; 0x64
 8001dca:	2201      	movs	r2, #1
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <receive_erpa_spi+0x44>)
 8001dce:	f00b fe41 	bl	800da54 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001dd6:	7b7b      	ldrb	r3, [r7, #13]
 8001dd8:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <receive_erpa_spi+0x44>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <receive_erpa_spi+0x44>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001de8:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7bba      	ldrb	r2, [r7, #14]
 8001dee:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3301      	adds	r3, #1
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	701a      	strb	r2, [r3, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	24000460 	.word	0x24000460

08001e04 <receive_erpa_adc>:
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];	// SWPmon --
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <receive_erpa_adc+0x30>)
 8001e0e:	885b      	ldrh	r3, [r3, #2]
 8001e10:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5]; 	// TEMP1 -- verified doesn't need to change
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <receive_erpa_adc+0x30>)
 8001e14:	895b      	ldrh	r3, [r3, #10]
 8001e16:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	89fa      	ldrh	r2, [r7, #14]
 8001e1c:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3302      	adds	r3, #2
 8001e22:	89ba      	ldrh	r2, [r7, #12]
 8001e24:	801a      	strh	r2, [r3, #0]
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	24000bc0 	.word	0x24000bc0

08001e38 <receive_hk_i2c>:
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001e40:	2390      	movs	r3, #144	; 0x90
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff ff52 	bl	8001cec <poll_i2c_sensor>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001e4c:	2394      	movs	r3, #148	; 0x94
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ff4c 	bl	8001cec <poll_i2c_sensor>
 8001e54:	4603      	mov	r3, r0
 8001e56:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001e58:	2392      	movs	r3, #146	; 0x92
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ff46 	bl	8001cec <poll_i2c_sensor>
 8001e60:	4603      	mov	r3, r0
 8001e62:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001e64:	2396      	movs	r3, #150	; 0x96
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff40 	bl	8001cec <poll_i2c_sensor>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	89fa      	ldrh	r2, [r7, #14]
 8001e74:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3302      	adds	r3, #2
 8001e7a:	89ba      	ldrh	r2, [r7, #12]
 8001e7c:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3304      	adds	r3, #4
 8001e82:	897a      	ldrh	r2, [r7, #10]
 8001e84:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3306      	adds	r3, #6
 8001e8a:	893a      	ldrh	r2, [r7, #8]
 8001e8c:	801a      	strh	r2, [r3, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <receive_hk_adc1>:
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];	// BUSVmon -- verified doesn't need to change
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <receive_hk_adc1+0x90>)
 8001ea2:	8a9b      	ldrh	r3, [r3, #20]
 8001ea4:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];	// BUSImon -- verified doesn't need to change
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <receive_hk_adc1+0x90>)
 8001ea8:	8a1b      	ldrh	r3, [r3, #16]
 8001eaa:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];	// 2v5mon -- verified doesn't need to change
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <receive_hk_adc1+0x90>)
 8001eae:	899b      	ldrh	r3, [r3, #12]
 8001eb0:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];	// n3v3mon --
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <receive_hk_adc1+0x90>)
 8001eb4:	8a5b      	ldrh	r3, [r3, #18]
 8001eb6:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];	// n200v -- verified doesn't need to change
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <receive_hk_adc1+0x90>)
 8001eba:	889b      	ldrh	r3, [r3, #4]
 8001ebc:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];	// n800v --
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <receive_hk_adc1+0x90>)
 8001ec0:	88db      	ldrh	r3, [r3, #6]
 8001ec2:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];	// 5vmon --
 8001ec4:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <receive_hk_adc1+0x90>)
 8001ec6:	89db      	ldrh	r3, [r3, #14]
 8001ec8:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];	// 15vmon -- verified doesn't need to change
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <receive_hk_adc1+0x90>)
 8001ecc:	891b      	ldrh	r3, [r3, #8]
 8001ece:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];	// 5vrefmon --
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <receive_hk_adc1+0x90>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	8bfa      	ldrh	r2, [r7, #30]
 8001eda:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3302      	adds	r3, #2
 8001ee0:	8bba      	ldrh	r2, [r7, #28]
 8001ee2:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	8b7a      	ldrh	r2, [r7, #26]
 8001eea:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3306      	adds	r3, #6
 8001ef0:	8b3a      	ldrh	r2, [r7, #24]
 8001ef2:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3308      	adds	r3, #8
 8001ef8:	8afa      	ldrh	r2, [r7, #22]
 8001efa:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	330a      	adds	r3, #10
 8001f00:	8aba      	ldrh	r2, [r7, #20]
 8001f02:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	330c      	adds	r3, #12
 8001f08:	8a7a      	ldrh	r2, [r7, #18]
 8001f0a:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	330e      	adds	r3, #14
 8001f10:	8a3a      	ldrh	r2, [r7, #16]
 8001f12:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3310      	adds	r3, #16
 8001f18:	89fa      	ldrh	r2, [r7, #14]
 8001f1a:	801a      	strh	r2, [r3, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	3724      	adds	r7, #36	; 0x24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	24000bc0 	.word	0x24000bc0

08001f2c <receive_hk_adc3>:
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <receive_hk_adc3+0x4c>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <receive_hk_adc3+0x4c>)
 8001f3c:	885b      	ldrh	r3, [r3, #2]
 8001f3e:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2]; 		// n5vmon --
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <receive_hk_adc3+0x4c>)
 8001f42:	889b      	ldrh	r3, [r3, #4]
 8001f44:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];		// 3v3mon --
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <receive_hk_adc3+0x4c>)
 8001f48:	88db      	ldrh	r3, [r3, #6]
 8001f4a:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	89fa      	ldrh	r2, [r7, #14]
 8001f50:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3302      	adds	r3, #2
 8001f56:	89ba      	ldrh	r2, [r7, #12]
 8001f58:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	897a      	ldrh	r2, [r7, #10]
 8001f60:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3306      	adds	r3, #6
 8001f66:	893a      	ldrh	r2, [r7, #8]
 8001f68:	801a      	strh	r2, [r3, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	24000be0 	.word	0x24000be0

08001f7c <handshake>:

// *********************************************************************************************************** HELPER FUNCTIONS


int handshake()
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b090      	sub	sp, #64	; 0x40
 8001f80:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001f82:	230a      	movs	r3, #10
 8001f84:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001f86:	f107 011c 	add.w	r1, r7, #28
 8001f8a:	2364      	movs	r3, #100	; 0x64
 8001f8c:	2209      	movs	r2, #9
 8001f8e:	4840      	ldr	r0, [pc, #256]	; (8002090 <handshake+0x114>)
 8001f90:	f00d fe38 	bl	800fc04 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001f94:	7f3b      	ldrb	r3, [r7, #28]
 8001f96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 8001f9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f9e:	2bff      	cmp	r3, #255	; 0xff
 8001fa0:	d1f1      	bne.n	8001f86 <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001fa2:	7f7b      	ldrb	r3, [r7, #29]
 8001fa4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001fa8:	7fbb      	ldrb	r3, [r7, #30]
 8001faa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001fae:	7ffb      	ldrb	r3, [r7, #31]
 8001fb0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001fb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001fbc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001fc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fc8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 8001fcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001fe0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001fe4:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001fe6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001fea:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001fec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001ff0:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001ff2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ff6:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8001ff8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001ffc:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8001ffe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002002:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds; // Set the milliseconds (if supported by your RTC)
 8002004:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002006:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8002008:	f107 0318 	add.w	r3, r7, #24
 800200c:	2200      	movs	r2, #0
 800200e:	4619      	mov	r1, r3
 8002010:	4820      	ldr	r0, [pc, #128]	; (8002094 <handshake+0x118>)
 8002012:	f00b fa55 	bl	800d4c0 <HAL_RTC_SetDate>
 8002016:	4603      	mov	r3, r0
 8002018:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 800201c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <handshake+0xac>
	{
		Error_Handler();
 8002024:	f000 fd16 	bl	8002a54 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8002028:	1d3b      	adds	r3, r7, #4
 800202a:	2200      	movs	r2, #0
 800202c:	4619      	mov	r1, r3
 800202e:	4819      	ldr	r0, [pc, #100]	; (8002094 <handshake+0x118>)
 8002030:	f00b f94c 	bl	800d2cc <HAL_RTC_SetTime>
 8002034:	4603      	mov	r3, r0
 8002036:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 800203a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <handshake+0xca>
	{
		Error_Handler();
 8002042:	f000 fd07 	bl	8002a54 <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8002046:	23fa      	movs	r3, #250	; 0xfa
 8002048:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 800204c:	2301      	movs	r3, #1
 800204e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 800205e:	2302      	movs	r3, #2
 8002060:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 8002064:	2300      	movs	r3, #0
 8002066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002068:	e009      	b.n	800207e <handshake+0x102>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 800206a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800206e:	2364      	movs	r3, #100	; 0x64
 8002070:	2205      	movs	r2, #5
 8002072:	4807      	ldr	r0, [pc, #28]	; (8002090 <handshake+0x114>)
 8002074:	f00d fd38 	bl	800fae8 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	3301      	adds	r3, #1
 800207c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002082:	429a      	cmp	r2, r3
 8002084:	dbf1      	blt.n	800206a <handshake+0xee>
	}

	return 1;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3740      	adds	r7, #64	; 0x40
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	240005cc 	.word	0x240005cc
 8002094:	240003b4 	.word	0x240003b4

08002098 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0

	TIM2->CCR4 = 312;
 800209c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020a0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80020a6:	210c      	movs	r1, #12
 80020a8:	4818      	ldr	r0, [pc, #96]	; (800210c <system_setup+0x74>)
 80020aa:	f00c fb23 	bl	800e6f4 <HAL_TIM_PWM_Start>

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80020ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020b6:	4816      	ldr	r0, [pc, #88]	; (8002110 <system_setup+0x78>)
 80020b8:	f002 fef8 	bl	8004eac <HAL_ADCEx_Calibration_Start>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <system_setup+0x2e>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 80020c2:	f000 fcc7 	bl	8002a54 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80020c6:	220b      	movs	r2, #11
 80020c8:	4912      	ldr	r1, [pc, #72]	; (8002114 <system_setup+0x7c>)
 80020ca:	4811      	ldr	r0, [pc, #68]	; (8002110 <system_setup+0x78>)
 80020cc:	f001 ffcc 	bl	8004068 <HAL_ADC_Start_DMA>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <system_setup+0x42>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80020d6:	f000 fcbd 	bl	8002a54 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80020da:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020e2:	480d      	ldr	r0, [pc, #52]	; (8002118 <system_setup+0x80>)
 80020e4:	f002 fee2 	bl	8004eac <HAL_ADCEx_Calibration_Start>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <system_setup+0x5a>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 80020ee:	f000 fcb1 	bl	8002a54 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80020f2:	2204      	movs	r2, #4
 80020f4:	4909      	ldr	r1, [pc, #36]	; (800211c <system_setup+0x84>)
 80020f6:	4808      	ldr	r0, [pc, #32]	; (8002118 <system_setup+0x80>)
 80020f8:	f001 ffb6 	bl	8004068 <HAL_ADC_Start_DMA>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <system_setup+0x6e>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002102:	f000 fca7 	bl	8002a54 <Error_Handler>
	}
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	24000534 	.word	0x24000534
 8002110:	2400011c 	.word	0x2400011c
 8002114:	24000bc0 	.word	0x24000bc0
 8002118:	24000180 	.word	0x24000180
 800211c:	24000be0 	.word	0x24000be0

08002120 <getTimestamp>:


void getTimestamp(uint8_t *buffer)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	2200      	movs	r2, #0
 800212e:	4619      	mov	r1, r3
 8002130:	481d      	ldr	r0, [pc, #116]	; (80021a8 <getTimestamp+0x88>)
 8002132:	f00b f969 	bl	800d408 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	2200      	movs	r2, #0
 800213c:	4619      	mov	r1, r3
 800213e:	481a      	ldr	r0, [pc, #104]	; (80021a8 <getTimestamp+0x88>)
 8002140:	f00b fa46 	bl	800d5d0 <HAL_RTC_GetDate>
	uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800214a:	fb03 f202 	mul.w	r2, r3, r2
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <getTimestamp+0x88>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800215a:	627b      	str	r3, [r7, #36]	; 0x24



	buffer[0] = currentDate.Year;		// 0-99
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3301      	adds	r3, #1
 8002166:	7b7a      	ldrb	r2, [r7, #13]
 8002168:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3302      	adds	r3, #2
 800216e:	7bba      	ldrb	r2, [r7, #14]
 8002170:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3303      	adds	r3, #3
 8002176:	7c3a      	ldrb	r2, [r7, #16]
 8002178:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3304      	adds	r3, #4
 800217e:	7c7a      	ldrb	r2, [r7, #17]
 8002180:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3305      	adds	r3, #5
 8002186:	7cba      	ldrb	r2, [r7, #18]
 8002188:	701a      	strb	r2, [r3, #0]
	buffer[6] = (milliseconds >> 8) & 0xFF;  // High byte of milliseconds
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	0a1a      	lsrs	r2, r3, #8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3306      	adds	r3, #6
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]
	buffer[7] = milliseconds & 0xFF;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3307      	adds	r3, #7
 800219a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	701a      	strb	r2, [r3, #0]

}
 80021a0:	bf00      	nop
 80021a2:	3728      	adds	r7, #40	; 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	240003b4 	.word	0x240003b4

080021ac <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	4618      	mov	r0, r3
 80021be:	f013 fe47 	bl	8015e50 <malloc>
 80021c2:	4603      	mov	r3, r0
 80021c4:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Memory allocation failed
		// Handle the error accordingly (e.g., return an error code or terminate the program)
	}
	memcpy(packet.array, data, size); // Copy the data into the packet array
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	88fa      	ldrh	r2, [r7, #6]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f013 fe4f 	bl	8015e70 <memcpy>
	packet.size = size;
 80021d2:	88fb      	ldrh	r3, [r7, #6]
 80021d4:	82bb      	strh	r3, [r7, #20]
	return packet;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	461a      	mov	r2, r3
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021e2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80021f6:	bf00      	nop
 80021f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021fc:	483d      	ldr	r0, [pc, #244]	; (80022f4 <sample_pmt+0x104>)
 80021fe:	f006 fc69 	bl	8008ad4 <HAL_GPIO_ReadPin>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f7      	bne.n	80021f8 <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002208:	200e      	movs	r0, #14
 800220a:	f013 fe21 	bl	8015e50 <malloc>
 800220e:	4603      	mov	r3, r0
 8002210:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8002212:	2002      	movs	r0, #2
 8002214:	f013 fe1c 	bl	8015e50 <malloc>
 8002218:	4603      	mov	r3, r0
 800221a:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 800221c:	2008      	movs	r0, #8
 800221e:	f013 fe17 	bl	8015e50 <malloc>
 8002222:	4603      	mov	r3, r0
 8002224:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f7ff ff7a 	bl	8002120 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 800222c:	6938      	ldr	r0, [r7, #16]
 800222e:	f7ff fda1 	bl	8001d74 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	22bb      	movs	r2, #187	; 0xbb
 8002236:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3301      	adds	r3, #1
 800223c:	22bb      	movs	r2, #187	; 0xbb
 800223e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <sample_pmt+0x108>)
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	b29a      	uxth	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3302      	adds	r3, #2
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002250:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <sample_pmt+0x108>)
 8002252:	881a      	ldrh	r2, [r3, #0]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3303      	adds	r3, #3
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3304      	adds	r3, #4
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	7812      	ldrb	r2, [r2, #0]
 8002264:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3305      	adds	r3, #5
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	7852      	ldrb	r2, [r2, #1]
 800226e:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3306      	adds	r3, #6
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	7812      	ldrb	r2, [r2, #0]
 8002278:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3307      	adds	r3, #7
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	7852      	ldrb	r2, [r2, #1]
 8002282:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3308      	adds	r3, #8
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	7892      	ldrb	r2, [r2, #2]
 800228c:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	3309      	adds	r3, #9
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	78d2      	ldrb	r2, [r2, #3]
 8002296:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	330a      	adds	r3, #10
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	7912      	ldrb	r2, [r2, #4]
 80022a0:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	330b      	adds	r3, #11
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	7952      	ldrb	r2, [r2, #5]
 80022aa:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	330c      	adds	r3, #12
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	7992      	ldrb	r2, [r2, #6]
 80022b4:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	330d      	adds	r3, #13
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	79d2      	ldrb	r2, [r2, #7]
 80022be:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	220e      	movs	r2, #14
 80022c4:	6979      	ldr	r1, [r7, #20]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff70 	bl	80021ac <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80022cc:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <sample_pmt+0x10c>)
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	1d39      	adds	r1, r7, #4
 80022d2:	2300      	movs	r3, #0
 80022d4:	2200      	movs	r2, #0
 80022d6:	f010 fb87 	bl	80129e8 <osMessageQueuePut>
	free(buffer);
 80022da:	6978      	ldr	r0, [r7, #20]
 80022dc:	f013 fdc0 	bl	8015e60 <free>
	free(pmt_spi);
 80022e0:	6938      	ldr	r0, [r7, #16]
 80022e2:	f013 fdbd 	bl	8015e60 <free>
	free(timestamp);
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f013 fdba 	bl	8015e60 <free>
}
 80022ec:	bf00      	nop
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	58020000 	.word	0x58020000
 80022f8:	24000b38 	.word	0x24000b38
 80022fc:	24000b34 	.word	0x24000b34

08002300 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8002306:	bf00      	nop
 8002308:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800230c:	4852      	ldr	r0, [pc, #328]	; (8002458 <sample_erpa+0x158>)
 800230e:	f006 fbe1 	bl	8008ad4 <HAL_GPIO_ReadPin>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f7      	bne.n	8002308 <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002318:	2012      	movs	r0, #18
 800231a:	f013 fd99 	bl	8015e50 <malloc>
 800231e:	4603      	mov	r3, r0
 8002320:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8002322:	2002      	movs	r0, #2
 8002324:	f013 fd94 	bl	8015e50 <malloc>
 8002328:	4603      	mov	r3, r0
 800232a:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 800232c:	2004      	movs	r0, #4
 800232e:	f013 fd8f 	bl	8015e50 <malloc>
 8002332:	4603      	mov	r3, r0
 8002334:	60fb      	str	r3, [r7, #12]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8002336:	2008      	movs	r0, #8
 8002338:	f013 fd8a 	bl	8015e50 <malloc>
 800233c:	4603      	mov	r3, r0
 800233e:	60bb      	str	r3, [r7, #8]
	getTimestamp(timestamp);
 8002340:	68b8      	ldr	r0, [r7, #8]
 8002342:	f7ff feed 	bl	8002120 <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 8002346:	6938      	ldr	r0, [r7, #16]
 8002348:	f7ff fd38 	bl	8001dbc <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7ff fd59 	bl	8001e04 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	22aa      	movs	r2, #170	; 0xaa
 8002356:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3301      	adds	r3, #1
 800235c:	22aa      	movs	r2, #170	; 0xaa
 800235e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002360:	4b3e      	ldr	r3, [pc, #248]	; (800245c <sample_erpa+0x15c>)
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	b29a      	uxth	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	3302      	adds	r3, #2
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002370:	4b3a      	ldr	r3, [pc, #232]	; (800245c <sample_erpa+0x15c>)
 8002372:	881a      	ldrh	r2, [r3, #0]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3303      	adds	r3, #3
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	b29a      	uxth	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3304      	adds	r3, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	881a      	ldrh	r2, [r3, #0]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3305      	adds	r3, #5
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3302      	adds	r3, #2
 800239c:	881b      	ldrh	r3, [r3, #0]
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3306      	adds	r3, #6
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	3302      	adds	r3, #2
 80023ae:	881a      	ldrh	r2, [r3, #0]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3307      	adds	r3, #7
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3308      	adds	r3, #8
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	7812      	ldrb	r2, [r2, #0]
 80023c0:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	3309      	adds	r3, #9
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	7852      	ldrb	r2, [r2, #1]
 80023ca:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	330a      	adds	r3, #10
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	7812      	ldrb	r2, [r2, #0]
 80023d4:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	330b      	adds	r3, #11
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	7852      	ldrb	r2, [r2, #1]
 80023de:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	330c      	adds	r3, #12
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	7892      	ldrb	r2, [r2, #2]
 80023e8:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	330d      	adds	r3, #13
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	78d2      	ldrb	r2, [r2, #3]
 80023f2:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	330e      	adds	r3, #14
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	7912      	ldrb	r2, [r2, #4]
 80023fc:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	330f      	adds	r3, #15
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	7952      	ldrb	r2, [r2, #5]
 8002406:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	3310      	adds	r3, #16
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	7992      	ldrb	r2, [r2, #6]
 8002410:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3311      	adds	r3, #17
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	79d2      	ldrb	r2, [r2, #7]
 800241a:	701a      	strb	r2, [r3, #0]



	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 800241c:	463b      	mov	r3, r7
 800241e:	2212      	movs	r2, #18
 8002420:	6979      	ldr	r1, [r7, #20]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fec2 	bl	80021ac <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002428:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <sample_erpa+0x160>)
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	4639      	mov	r1, r7
 800242e:	2300      	movs	r3, #0
 8002430:	2200      	movs	r2, #0
 8002432:	f010 fad9 	bl	80129e8 <osMessageQueuePut>
	free(buffer);
 8002436:	6978      	ldr	r0, [r7, #20]
 8002438:	f013 fd12 	bl	8015e60 <free>
	free(erpa_spi);
 800243c:	6938      	ldr	r0, [r7, #16]
 800243e:	f013 fd0f 	bl	8015e60 <free>
	free(erpa_adc);
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f013 fd0c 	bl	8015e60 <free>
	free(timestamp);
 8002448:	68b8      	ldr	r0, [r7, #8]
 800244a:	f013 fd09 	bl	8015e60 <free>
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	58020400 	.word	0x58020400
 800245c:	24000b3a 	.word	0x24000b3a
 8002460:	24000b34 	.word	0x24000b34

08002464 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 800246a:	202e      	movs	r0, #46	; 0x2e
 800246c:	f013 fcf0 	bl	8015e50 <malloc>
 8002470:	4603      	mov	r3, r0
 8002472:	61fb      	str	r3, [r7, #28]

	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8002474:	2008      	movs	r0, #8
 8002476:	f013 fceb 	bl	8015e50 <malloc>
 800247a:	4603      	mov	r3, r0
 800247c:	61bb      	str	r3, [r7, #24]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 800247e:	2012      	movs	r0, #18
 8002480:	f013 fce6 	bl	8015e50 <malloc>
 8002484:	4603      	mov	r3, r0
 8002486:	617b      	str	r3, [r7, #20]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8002488:	2008      	movs	r0, #8
 800248a:	f013 fce1 	bl	8015e50 <malloc>
 800248e:	4603      	mov	r3, r0
 8002490:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(8 * sizeof(uint8_t));
 8002492:	2008      	movs	r0, #8
 8002494:	f013 fcdc 	bl	8015e50 <malloc>
 8002498:	4603      	mov	r3, r0
 800249a:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f7ff fe3f 	bl	8002120 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	receive_hk_i2c(hk_i2c);
 80024a2:	69b8      	ldr	r0, [r7, #24]
 80024a4:	f7ff fcc8 	bl	8001e38 <receive_hk_i2c>
	receive_hk_adc1(hk_adc1);
 80024a8:	6978      	ldr	r0, [r7, #20]
 80024aa:	f7ff fcf5 	bl	8001e98 <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 80024ae:	6938      	ldr	r0, [r7, #16]
 80024b0:	f7ff fd3c 	bl	8001f2c <receive_hk_adc3>
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	22cc      	movs	r2, #204	; 0xcc
 80024b8:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3301      	adds	r3, #1
 80024be:	22cc      	movs	r2, #204	; 0xcc
 80024c0:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80024c2:	4ba5      	ldr	r3, [pc, #660]	; (8002758 <sample_hk+0x2f4>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3302      	adds	r3, #2
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80024d2:	4ba1      	ldr	r3, [pc, #644]	; (8002758 <sample_hk+0x2f4>)
 80024d4:	881a      	ldrh	r2, [r3, #0]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3303      	adds	r3, #3
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	3302      	adds	r3, #2
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	3304      	adds	r3, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	3302      	adds	r3, #2
 80024f4:	881a      	ldrh	r2, [r3, #0]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3305      	adds	r3, #5
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	b29a      	uxth	r2, r3
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3306      	adds	r3, #6
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	881a      	ldrh	r2, [r3, #0]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3307      	adds	r3, #7
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002520:	121a      	asrs	r2, r3, #8
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	3308      	adds	r3, #8
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	3309      	adds	r3, #9
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	3302      	adds	r3, #2
 800253c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002540:	121a      	asrs	r2, r3, #8
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	330a      	adds	r3, #10
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	3302      	adds	r3, #2
 800254e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	330b      	adds	r3, #11
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	3304      	adds	r3, #4
 800255e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002562:	121a      	asrs	r2, r3, #8
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	330c      	adds	r3, #12
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	3304      	adds	r3, #4
 8002570:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	330d      	adds	r3, #13
 8002578:	b2d2      	uxtb	r2, r2
 800257a:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	3306      	adds	r3, #6
 8002580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002584:	121a      	asrs	r2, r3, #8
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	330e      	adds	r3, #14
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	3306      	adds	r3, #6
 8002592:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	330f      	adds	r3, #15
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3310      	adds	r3, #16
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	881a      	ldrh	r2, [r3, #0]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3311      	adds	r3, #17
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	3302      	adds	r3, #2
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	3312      	adds	r3, #18
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3302      	adds	r3, #2
 80025d0:	881a      	ldrh	r2, [r3, #0]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3313      	adds	r3, #19
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3304      	adds	r3, #4
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	3314      	adds	r3, #20
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3304      	adds	r3, #4
 80025f0:	881a      	ldrh	r2, [r3, #0]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	3315      	adds	r3, #21
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	3306      	adds	r3, #6
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	b29a      	uxth	r2, r3
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	3316      	adds	r3, #22
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	3306      	adds	r3, #6
 8002610:	881a      	ldrh	r2, [r3, #0]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3317      	adds	r3, #23
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	330c      	adds	r3, #12
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	b29a      	uxth	r2, r3
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	3318      	adds	r3, #24
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	330c      	adds	r3, #12
 8002630:	881a      	ldrh	r2, [r3, #0]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3319      	adds	r3, #25
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3306      	adds	r3, #6
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	b29a      	uxth	r2, r3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	331a      	adds	r3, #26
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3306      	adds	r3, #6
 8002650:	881a      	ldrh	r2, [r3, #0]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	331b      	adds	r3, #27
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	3304      	adds	r3, #4
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	b29a      	uxth	r2, r3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	331c      	adds	r3, #28
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	3304      	adds	r3, #4
 8002670:	881a      	ldrh	r2, [r3, #0]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	331d      	adds	r3, #29
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	330e      	adds	r3, #14
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	b29a      	uxth	r2, r3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	331e      	adds	r3, #30
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	330e      	adds	r3, #14
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	331f      	adds	r3, #31
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3310      	adds	r3, #16
 800269e:	881b      	ldrh	r3, [r3, #0]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	3320      	adds	r3, #32
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3310      	adds	r3, #16
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3321      	adds	r3, #33	; 0x21
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3308      	adds	r3, #8
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	0a1b      	lsrs	r3, r3, #8
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	3322      	adds	r3, #34	; 0x22
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3308      	adds	r3, #8
 80026d0:	881a      	ldrh	r2, [r3, #0]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3323      	adds	r3, #35	; 0x23
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	330a      	adds	r3, #10
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3324      	adds	r3, #36	; 0x24
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	330a      	adds	r3, #10
 80026f0:	881a      	ldrh	r2, [r3, #0]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3325      	adds	r3, #37	; 0x25
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3326      	adds	r3, #38	; 0x26
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	7812      	ldrb	r2, [r2, #0]
 8002702:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	3327      	adds	r3, #39	; 0x27
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	7852      	ldrb	r2, [r2, #1]
 800270c:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3328      	adds	r3, #40	; 0x28
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	7892      	ldrb	r2, [r2, #2]
 8002716:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	3329      	adds	r3, #41	; 0x29
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	78d2      	ldrb	r2, [r2, #3]
 8002720:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	332a      	adds	r3, #42	; 0x2a
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	7912      	ldrb	r2, [r2, #4]
 800272a:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	332b      	adds	r3, #43	; 0x2b
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	7952      	ldrb	r2, [r2, #5]
 8002734:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	332c      	adds	r3, #44	; 0x2c
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	7992      	ldrb	r2, [r2, #6]
 800273e:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	332d      	adds	r3, #45	; 0x2d
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	79d2      	ldrb	r2, [r2, #7]
 8002748:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	222e      	movs	r2, #46	; 0x2e
 800274e:	69f9      	ldr	r1, [r7, #28]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fd2b 	bl	80021ac <create_packet>
 8002756:	e001      	b.n	800275c <sample_hk+0x2f8>
 8002758:	24000b3c 	.word	0x24000b3c
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <sample_hk+0x32c>)
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	1d39      	adds	r1, r7, #4
 8002762:	2300      	movs	r3, #0
 8002764:	2200      	movs	r2, #0
 8002766:	f010 f93f 	bl	80129e8 <osMessageQueuePut>
	free(buffer);
 800276a:	69f8      	ldr	r0, [r7, #28]
 800276c:	f013 fb78 	bl	8015e60 <free>
	free(hk_i2c);
 8002770:	69b8      	ldr	r0, [r7, #24]
 8002772:	f013 fb75 	bl	8015e60 <free>
	free(hk_adc1);
 8002776:	6978      	ldr	r0, [r7, #20]
 8002778:	f013 fb72 	bl	8015e60 <free>
	free(hk_adc3);
 800277c:	6938      	ldr	r0, [r7, #16]
 800277e:	f013 fb6f 	bl	8015e60 <free>
	free(timestamp);
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f013 fb6c 	bl	8015e60 <free>
}
 8002788:	bf00      	nop
 800278a:	3720      	adds	r7, #32
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	24000b34 	.word	0x24000b34

08002794 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <PMT_init+0x38>)
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027a4:	2200      	movs	r2, #0
 80027a6:	2101      	movs	r1, #1
 80027a8:	f010 f844 	bl	8012834 <osEventFlagsWait>
		if(PMT_ON){
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <PMT_init+0x3c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <PMT_init+0x30>
			sample_pmt();
 80027b4:	f7ff fd1c 	bl	80021f0 <sample_pmt>
			pmt_seq++;
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <PMT_init+0x40>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <PMT_init+0x40>)
 80027c2:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 80027c4:	f00f ff56 	bl	8012674 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80027c8:	e7e8      	b.n	800279c <PMT_init+0x8>
 80027ca:	bf00      	nop
 80027cc:	24000b44 	.word	0x24000b44
 80027d0:	24000b3e 	.word	0x24000b3e
 80027d4:	24000b38 	.word	0x24000b38

080027d8 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <ERPA_init+0x38>)
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027e8:	2200      	movs	r2, #0
 80027ea:	2102      	movs	r1, #2
 80027ec:	f010 f822 	bl	8012834 <osEventFlagsWait>
		if (ERPA_ON)
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <ERPA_init+0x3c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <ERPA_init+0x30>
		{
			sample_erpa();
 80027f8:	f7ff fd82 	bl	8002300 <sample_erpa>
			erpa_seq++;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <ERPA_init+0x40>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	b29a      	uxth	r2, r3
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <ERPA_init+0x40>)
 8002806:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 8002808:	f00f ff34 	bl	8012674 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800280c:	e7e8      	b.n	80027e0 <ERPA_init+0x8>
 800280e:	bf00      	nop
 8002810:	24000b44 	.word	0x24000b44
 8002814:	24000b3f 	.word	0x24000b3f
 8002818:	24000b3a 	.word	0x24000b3a

0800281c <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HK_init+0x38>)
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800282c:	2200      	movs	r2, #0
 800282e:	2104      	movs	r1, #4
 8002830:	f010 f800 	bl	8012834 <osEventFlagsWait>
		if(HK_ON)
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <HK_init+0x3c>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <HK_init+0x30>
		{
			sample_hk();
 800283c:	f7ff fe12 	bl	8002464 <sample_hk>
			hk_seq++;
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <HK_init+0x40>)
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <HK_init+0x40>)
 800284a:	801a      	strh	r2, [r3, #0]

		}
		osThreadYield();
 800284c:	f00f ff12 	bl	8012674 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002850:	e7e8      	b.n	8002824 <HK_init+0x8>
 8002852:	bf00      	nop
 8002854:	24000b44 	.word	0x24000b44
 8002858:	24000b40 	.word	0x24000b40
 800285c:	24000b3c 	.word	0x24000b3c

08002860 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002868:	2201      	movs	r2, #1
 800286a:	4904      	ldr	r1, [pc, #16]	; (800287c <UART_RX_init+0x1c>)
 800286c:	4804      	ldr	r0, [pc, #16]	; (8002880 <UART_RX_init+0x20>)
 800286e:	f00d fa91 	bl	800fd94 <HAL_UART_Receive_IT>
		osDelay(5);
 8002872:	2005      	movs	r0, #5
 8002874:	f00f ff3f 	bl	80126f6 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002878:	e7f6      	b.n	8002868 <UART_RX_init+0x8>
 800287a:	bf00      	nop
 800287c:	24000b48 	.word	0x24000b48
 8002880:	240005cc 	.word	0x240005cc

08002884 <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
		; // Insert thread code here...

		status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <UART_TX_init+0x50>)
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	f107 010c 	add.w	r1, r7, #12
 8002894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002898:	2200      	movs	r2, #0
 800289a:	f010 f905 	bl	8012aa8 <osMessageQueueGet>
 800289e:	6178      	str	r0, [r7, #20]

		if (status == osOK) {
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d113      	bne.n	80028ce <UART_TX_init+0x4a>
			printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 80028a6:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <UART_TX_init+0x50>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f010 f95a 	bl	8012b64 <osMessageQueueGetCount>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4619      	mov	r1, r3
 80028b4:	4808      	ldr	r0, [pc, #32]	; (80028d8 <UART_TX_init+0x54>)
 80028b6:	f013 fbd1 	bl	801605c <iprintf>
			HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 80028ba:	68f9      	ldr	r1, [r7, #12]
 80028bc:	8a3a      	ldrh	r2, [r7, #16]
 80028be:	2364      	movs	r3, #100	; 0x64
 80028c0:	4806      	ldr	r0, [pc, #24]	; (80028dc <UART_TX_init+0x58>)
 80028c2:	f00d f911 	bl	800fae8 <HAL_UART_Transmit>
			free(msg.array);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f013 fac9 	bl	8015e60 <free>
		}
		osThreadYield();
 80028ce:	f00f fed1 	bl	8012674 <osThreadYield>
		status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 80028d2:	e7db      	b.n	800288c <UART_TX_init+0x8>
 80028d4:	24000b34 	.word	0x24000b34
 80028d8:	08017118 	.word	0x08017118
 80028dc:	240005cc 	.word	0x240005cc

080028e0 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 80028e8:	4b24      	ldr	r3, [pc, #144]	; (800297c <GPIO_on_init+0x9c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f00f fee1 	bl	80126b4 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80028f2:	4b23      	ldr	r3, [pc, #140]	; (8002980 <GPIO_on_init+0xa0>)
 80028f4:	2104      	movs	r1, #4
 80028f6:	2201      	movs	r2, #1
 80028f8:	4618      	mov	r0, r3
 80028fa:	f006 f903 	bl	8008b04 <HAL_GPIO_WritePin>
		osDelay(100);
 80028fe:	2064      	movs	r0, #100	; 0x64
 8002900:	f00f fef9 	bl	80126f6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002904:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <GPIO_on_init+0xa0>)
 8002906:	2120      	movs	r1, #32
 8002908:	2201      	movs	r2, #1
 800290a:	4618      	mov	r0, r3
 800290c:	f006 f8fa 	bl	8008b04 <HAL_GPIO_WritePin>
		osDelay(100);
 8002910:	2064      	movs	r0, #100	; 0x64
 8002912:	f00f fef0 	bl	80126f6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002916:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <GPIO_on_init+0xa4>)
 8002918:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800291c:	2201      	movs	r2, #1
 800291e:	4618      	mov	r0, r3
 8002920:	f006 f8f0 	bl	8008b04 <HAL_GPIO_WritePin>
		osDelay(100);
 8002924:	2064      	movs	r0, #100	; 0x64
 8002926:	f00f fee6 	bl	80126f6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 800292a:	4b16      	ldr	r3, [pc, #88]	; (8002984 <GPIO_on_init+0xa4>)
 800292c:	2180      	movs	r1, #128	; 0x80
 800292e:	2201      	movs	r2, #1
 8002930:	4618      	mov	r0, r3
 8002932:	f006 f8e7 	bl	8008b04 <HAL_GPIO_WritePin>
		osDelay(100);
 8002936:	2064      	movs	r0, #100	; 0x64
 8002938:	f00f fedd 	bl	80126f6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <GPIO_on_init+0xa4>)
 800293e:	2140      	movs	r1, #64	; 0x40
 8002940:	2201      	movs	r2, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f006 f8de 	bl	8008b04 <HAL_GPIO_WritePin>
		osDelay(100);
 8002948:	2064      	movs	r0, #100	; 0x64
 800294a:	f00f fed4 	bl	80126f6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 800294e:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <GPIO_on_init+0xa4>)
 8002950:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002954:	2201      	movs	r2, #1
 8002956:	4618      	mov	r0, r3
 8002958:	f006 f8d4 	bl	8008b04 <HAL_GPIO_WritePin>
		osDelay(100);
 800295c:	2064      	movs	r0, #100	; 0x64
 800295e:	f00f feca 	bl	80126f6 <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <GPIO_on_init+0xa4>)
 8002964:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002968:	2201      	movs	r2, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f006 f8ca 	bl	8008b04 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002970:	4b02      	ldr	r3, [pc, #8]	; (800297c <GPIO_on_init+0x9c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f00f fe9d 	bl	80126b4 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 800297a:	e7ba      	b.n	80028f2 <GPIO_on_init+0x12>
 800297c:	24000674 	.word	0x24000674
 8002980:	58020400 	.word	0x58020400
 8002984:	58020800 	.word	0x58020800

08002988 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002990:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <GPIO_off_init+0x9c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f00f fe8d 	bl	80126b4 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 800299a:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <GPIO_off_init+0xa0>)
 800299c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029a0:	2200      	movs	r2, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f006 f8ae 	bl	8008b04 <HAL_GPIO_WritePin>
		osDelay(100);
 80029a8:	2064      	movs	r0, #100	; 0x64
 80029aa:	f00f fea4 	bl	80126f6 <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 80029ae:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <GPIO_off_init+0xa0>)
 80029b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029b4:	2200      	movs	r2, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f006 f8a4 	bl	8008b04 <HAL_GPIO_WritePin>
		osDelay(100);
 80029bc:	2064      	movs	r0, #100	; 0x64
 80029be:	f00f fe9a 	bl	80126f6 <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <GPIO_off_init+0xa0>)
 80029c4:	2140      	movs	r1, #64	; 0x40
 80029c6:	2200      	movs	r2, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f006 f89b 	bl	8008b04 <HAL_GPIO_WritePin>
		osDelay(100);
 80029ce:	2064      	movs	r0, #100	; 0x64
 80029d0:	f00f fe91 	bl	80126f6 <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <GPIO_off_init+0xa0>)
 80029d6:	2180      	movs	r1, #128	; 0x80
 80029d8:	2200      	movs	r2, #0
 80029da:	4618      	mov	r0, r3
 80029dc:	f006 f892 	bl	8008b04 <HAL_GPIO_WritePin>
		osDelay(100);
 80029e0:	2064      	movs	r0, #100	; 0x64
 80029e2:	f00f fe88 	bl	80126f6 <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 80029e6:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <GPIO_off_init+0xa0>)
 80029e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ec:	2200      	movs	r2, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f006 f888 	bl	8008b04 <HAL_GPIO_WritePin>
		osDelay(100);
 80029f4:	2064      	movs	r0, #100	; 0x64
 80029f6:	f00f fe7e 	bl	80126f6 <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <GPIO_off_init+0xa4>)
 80029fc:	2120      	movs	r1, #32
 80029fe:	2200      	movs	r2, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f006 f87f 	bl	8008b04 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a06:	2064      	movs	r0, #100	; 0x64
 8002a08:	f00f fe75 	bl	80126f6 <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <GPIO_off_init+0xa4>)
 8002a0e:	2104      	movs	r1, #4
 8002a10:	2200      	movs	r2, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f006 f876 	bl	8008b04 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002a18:	4b02      	ldr	r3, [pc, #8]	; (8002a24 <GPIO_off_init+0x9c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f00f fe49 	bl	80126b4 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002a22:	e7ba      	b.n	800299a <GPIO_off_init+0x12>
 8002a24:	240008d4 	.word	0x240008d4
 8002a28:	58020800 	.word	0x58020800
 8002a2c:	58020400 	.word	0x58020400

08002a30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a42:	f000 ff1f 	bl	8003884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40001000 	.word	0x40001000

08002a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a58:	b672      	cpsid	i
}
 8002a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a5c:	e7fe      	b.n	8002a5c <Error_Handler+0x8>
	...

08002a60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <HAL_MspInit+0x38>)
 8002a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_MspInit+0x38>)
 8002a6e:	f043 0302 	orr.w	r3, r3, #2
 8002a72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_MspInit+0x38>)
 8002a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	210f      	movs	r1, #15
 8002a88:	f06f 0001 	mvn.w	r0, #1
 8002a8c:	f002 fc08 	bl	80052a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	58024400 	.word	0x58024400

08002a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08e      	sub	sp, #56	; 0x38
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a7b      	ldr	r2, [pc, #492]	; (8002ca8 <HAL_ADC_MspInit+0x20c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	f040 8091 	bne.w	8002be2 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002ac0:	4b7a      	ldr	r3, [pc, #488]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002ac2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ac6:	4a79      	ldr	r2, [pc, #484]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002ac8:	f043 0320 	orr.w	r3, r3, #32
 8002acc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ad0:	4b76      	ldr	r3, [pc, #472]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002ad2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	623b      	str	r3, [r7, #32]
 8002adc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ade:	4b73      	ldr	r3, [pc, #460]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae4:	4a71      	ldr	r2, [pc, #452]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002ae6:	f043 0304 	orr.w	r3, r3, #4
 8002aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aee:	4b6f      	ldr	r3, [pc, #444]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afc:	4b6b      	ldr	r3, [pc, #428]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b02:	4a6a      	ldr	r2, [pc, #424]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b0c:	4b67      	ldr	r3, [pc, #412]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1a:	4b64      	ldr	r3, [pc, #400]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b20:	4a62      	ldr	r2, [pc, #392]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002b22:	f043 0302 	orr.w	r3, r3, #2
 8002b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b2a:	4b60      	ldr	r3, [pc, #384]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002b38:	2333      	movs	r3, #51	; 0x33
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4859      	ldr	r0, [pc, #356]	; (8002cb0 <HAL_ADC_MspInit+0x214>)
 8002b4c:	f005 fe12 	bl	8008774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002b50:	23ce      	movs	r3, #206	; 0xce
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b54:	2303      	movs	r3, #3
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b60:	4619      	mov	r1, r3
 8002b62:	4854      	ldr	r0, [pc, #336]	; (8002cb4 <HAL_ADC_MspInit+0x218>)
 8002b64:	f005 fe06 	bl	8008774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b78:	4619      	mov	r1, r3
 8002b7a:	484f      	ldr	r0, [pc, #316]	; (8002cb8 <HAL_ADC_MspInit+0x21c>)
 8002b7c:	f005 fdfa 	bl	8008774 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002b80:	4b4e      	ldr	r3, [pc, #312]	; (8002cbc <HAL_ADC_MspInit+0x220>)
 8002b82:	4a4f      	ldr	r2, [pc, #316]	; (8002cc0 <HAL_ADC_MspInit+0x224>)
 8002b84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002b86:	4b4d      	ldr	r3, [pc, #308]	; (8002cbc <HAL_ADC_MspInit+0x220>)
 8002b88:	2209      	movs	r2, #9
 8002b8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b8c:	4b4b      	ldr	r3, [pc, #300]	; (8002cbc <HAL_ADC_MspInit+0x220>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b92:	4b4a      	ldr	r3, [pc, #296]	; (8002cbc <HAL_ADC_MspInit+0x220>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b98:	4b48      	ldr	r3, [pc, #288]	; (8002cbc <HAL_ADC_MspInit+0x220>)
 8002b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b9e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ba0:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <HAL_ADC_MspInit+0x220>)
 8002ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ba6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ba8:	4b44      	ldr	r3, [pc, #272]	; (8002cbc <HAL_ADC_MspInit+0x220>)
 8002baa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002bb0:	4b42      	ldr	r3, [pc, #264]	; (8002cbc <HAL_ADC_MspInit+0x220>)
 8002bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bb6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002bb8:	4b40      	ldr	r3, [pc, #256]	; (8002cbc <HAL_ADC_MspInit+0x220>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bbe:	4b3f      	ldr	r3, [pc, #252]	; (8002cbc <HAL_ADC_MspInit+0x220>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002bc4:	483d      	ldr	r0, [pc, #244]	; (8002cbc <HAL_ADC_MspInit+0x220>)
 8002bc6:	f002 ff99 	bl	8005afc <HAL_DMA_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002bd0:	f7ff ff40 	bl	8002a54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a39      	ldr	r2, [pc, #228]	; (8002cbc <HAL_ADC_MspInit+0x220>)
 8002bd8:	64da      	str	r2, [r3, #76]	; 0x4c
 8002bda:	4a38      	ldr	r2, [pc, #224]	; (8002cbc <HAL_ADC_MspInit+0x220>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002be0:	e05e      	b.n	8002ca0 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a37      	ldr	r2, [pc, #220]	; (8002cc4 <HAL_ADC_MspInit+0x228>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d159      	bne.n	8002ca0 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002bec:	4b2f      	ldr	r3, [pc, #188]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf2:	4a2e      	ldr	r2, [pc, #184]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bfc:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c0a:	4b28      	ldr	r3, [pc, #160]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c10:	4a26      	ldr	r2, [pc, #152]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002c12:	f043 0304 	orr.w	r3, r3, #4
 8002c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c1a:	4b24      	ldr	r3, [pc, #144]	; (8002cac <HAL_ADC_MspInit+0x210>)
 8002c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002c28:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002c2c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002c30:	f000 fe54 	bl	80038dc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002c34:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002c38:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002c3c:	f000 fe4e 	bl	80038dc <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002c40:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <HAL_ADC_MspInit+0x22c>)
 8002c42:	4a22      	ldr	r2, [pc, #136]	; (8002ccc <HAL_ADC_MspInit+0x230>)
 8002c44:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_ADC_MspInit+0x22c>)
 8002c48:	2273      	movs	r2, #115	; 0x73
 8002c4a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_ADC_MspInit+0x22c>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_ADC_MspInit+0x22c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_ADC_MspInit+0x22c>)
 8002c5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c5e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_ADC_MspInit+0x22c>)
 8002c62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c66:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c68:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <HAL_ADC_MspInit+0x22c>)
 8002c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002c70:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_ADC_MspInit+0x22c>)
 8002c72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c76:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <HAL_ADC_MspInit+0x22c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_ADC_MspInit+0x22c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002c84:	4810      	ldr	r0, [pc, #64]	; (8002cc8 <HAL_ADC_MspInit+0x22c>)
 8002c86:	f002 ff39 	bl	8005afc <HAL_DMA_Init>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002c90:	f7ff fee0 	bl	8002a54 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0c      	ldr	r2, [pc, #48]	; (8002cc8 <HAL_ADC_MspInit+0x22c>)
 8002c98:	64da      	str	r2, [r3, #76]	; 0x4c
 8002c9a:	4a0b      	ldr	r2, [pc, #44]	; (8002cc8 <HAL_ADC_MspInit+0x22c>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ca0:	bf00      	nop
 8002ca2:	3738      	adds	r7, #56	; 0x38
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40022000 	.word	0x40022000
 8002cac:	58024400 	.word	0x58024400
 8002cb0:	58020800 	.word	0x58020800
 8002cb4:	58020000 	.word	0x58020000
 8002cb8:	58020400 	.word	0x58020400
 8002cbc:	240001e4 	.word	0x240001e4
 8002cc0:	40020010 	.word	0x40020010
 8002cc4:	58026000 	.word	0x58026000
 8002cc8:	2400025c 	.word	0x2400025c
 8002ccc:	40020028 	.word	0x40020028

08002cd0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a34      	ldr	r2, [pc, #208]	; (8002dc0 <HAL_DAC_MspInit+0xf0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d161      	bne.n	8002db6 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002cf2:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_DAC_MspInit+0xf4>)
 8002cf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cf8:	4a32      	ldr	r2, [pc, #200]	; (8002dc4 <HAL_DAC_MspInit+0xf4>)
 8002cfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d02:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <HAL_DAC_MspInit+0xf4>)
 8002d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d10:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <HAL_DAC_MspInit+0xf4>)
 8002d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d16:	4a2b      	ldr	r2, [pc, #172]	; (8002dc4 <HAL_DAC_MspInit+0xf4>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d20:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_DAC_MspInit+0xf4>)
 8002d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d2e:	2310      	movs	r3, #16
 8002d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d32:	2303      	movs	r3, #3
 8002d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4821      	ldr	r0, [pc, #132]	; (8002dc8 <HAL_DAC_MspInit+0xf8>)
 8002d42:	f005 fd17 	bl	8008774 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002d46:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <HAL_DAC_MspInit+0xfc>)
 8002d48:	4a21      	ldr	r2, [pc, #132]	; (8002dd0 <HAL_DAC_MspInit+0x100>)
 8002d4a:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <HAL_DAC_MspInit+0xfc>)
 8002d4e:	2243      	movs	r2, #67	; 0x43
 8002d50:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <HAL_DAC_MspInit+0xfc>)
 8002d54:	2240      	movs	r2, #64	; 0x40
 8002d56:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d58:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <HAL_DAC_MspInit+0xfc>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002d5e:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_DAC_MspInit+0xfc>)
 8002d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d64:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_DAC_MspInit+0xfc>)
 8002d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d6c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002d6e:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_DAC_MspInit+0xfc>)
 8002d70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d74:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002d76:	4b15      	ldr	r3, [pc, #84]	; (8002dcc <HAL_DAC_MspInit+0xfc>)
 8002d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d7c:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <HAL_DAC_MspInit+0xfc>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d84:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <HAL_DAC_MspInit+0xfc>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002d8a:	4810      	ldr	r0, [pc, #64]	; (8002dcc <HAL_DAC_MspInit+0xfc>)
 8002d8c:	f002 feb6 	bl	8005afc <HAL_DMA_Init>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002d96:	f7ff fe5d 	bl	8002a54 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <HAL_DAC_MspInit+0xfc>)
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <HAL_DAC_MspInit+0xfc>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002da6:	2200      	movs	r2, #0
 8002da8:	2105      	movs	r1, #5
 8002daa:	2036      	movs	r0, #54	; 0x36
 8002dac:	f002 fa78 	bl	80052a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002db0:	2036      	movs	r0, #54	; 0x36
 8002db2:	f002 fa8f 	bl	80052d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002db6:	bf00      	nop
 8002db8:	3728      	adds	r7, #40	; 0x28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40007400 	.word	0x40007400
 8002dc4:	58024400 	.word	0x58024400
 8002dc8:	58020000 	.word	0x58020000
 8002dcc:	240002e8 	.word	0x240002e8
 8002dd0:	40020088 	.word	0x40020088

08002dd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b0ba      	sub	sp, #232	; 0xe8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dec:	f107 0310 	add.w	r3, r7, #16
 8002df0:	22c0      	movs	r2, #192	; 0xc0
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f013 f849 	bl	8015e8c <memset>
  if(hi2c->Instance==I2C1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a27      	ldr	r2, [pc, #156]	; (8002e9c <HAL_I2C_MspInit+0xc8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d146      	bne.n	8002e92 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002e04:	f04f 0208 	mov.w	r2, #8
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e16:	f107 0310 	add.w	r3, r7, #16
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f007 fcd6 	bl	800a7cc <HAL_RCCEx_PeriphCLKConfig>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002e26:	f7ff fe15 	bl	8002a54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_I2C_MspInit+0xcc>)
 8002e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e30:	4a1b      	ldr	r2, [pc, #108]	; (8002ea0 <HAL_I2C_MspInit+0xcc>)
 8002e32:	f043 0302 	orr.w	r3, r3, #2
 8002e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e3a:	4b19      	ldr	r3, [pc, #100]	; (8002ea0 <HAL_I2C_MspInit+0xcc>)
 8002e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e50:	2312      	movs	r3, #18
 8002e52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e62:	2304      	movs	r3, #4
 8002e64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	480d      	ldr	r0, [pc, #52]	; (8002ea4 <HAL_I2C_MspInit+0xd0>)
 8002e70:	f005 fc80 	bl	8008774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e74:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <HAL_I2C_MspInit+0xcc>)
 8002e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <HAL_I2C_MspInit+0xcc>)
 8002e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_I2C_MspInit+0xcc>)
 8002e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e92:	bf00      	nop
 8002e94:	37e8      	adds	r7, #232	; 0xe8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40005400 	.word	0x40005400
 8002ea0:	58024400 	.word	0x58024400
 8002ea4:	58020400 	.word	0x58020400

08002ea8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b0b2      	sub	sp, #200	; 0xc8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002eb0:	f107 0308 	add.w	r3, r7, #8
 8002eb4:	22c0      	movs	r2, #192	; 0xc0
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f012 ffe7 	bl	8015e8c <memset>
  if(hrtc->Instance==RTC)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a10      	ldr	r2, [pc, #64]	; (8002f04 <HAL_RTC_MspInit+0x5c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d119      	bne.n	8002efc <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ec8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002edc:	f107 0308 	add.w	r3, r7, #8
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f007 fc73 	bl	800a7cc <HAL_RCCEx_PeriphCLKConfig>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002eec:	f7ff fdb2 	bl	8002a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ef0:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <HAL_RTC_MspInit+0x60>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <HAL_RTC_MspInit+0x60>)
 8002ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002efc:	bf00      	nop
 8002efe:	37c8      	adds	r7, #200	; 0xc8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	58004000 	.word	0x58004000
 8002f08:	58024400 	.word	0x58024400

08002f0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b0bc      	sub	sp, #240	; 0xf0
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f24:	f107 0318 	add.w	r3, r7, #24
 8002f28:	22c0      	movs	r2, #192	; 0xc0
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f012 ffad 	bl	8015e8c <memset>
  if(hspi->Instance==SPI1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4c      	ldr	r2, [pc, #304]	; (8003068 <HAL_SPI_MspInit+0x15c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d145      	bne.n	8002fc8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002f3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f4c:	f107 0318 	add.w	r3, r7, #24
 8002f50:	4618      	mov	r0, r3
 8002f52:	f007 fc3b 	bl	800a7cc <HAL_RCCEx_PeriphCLKConfig>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002f5c:	f7ff fd7a 	bl	8002a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f60:	4b42      	ldr	r3, [pc, #264]	; (800306c <HAL_SPI_MspInit+0x160>)
 8002f62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f66:	4a41      	ldr	r2, [pc, #260]	; (800306c <HAL_SPI_MspInit+0x160>)
 8002f68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f6c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002f70:	4b3e      	ldr	r3, [pc, #248]	; (800306c <HAL_SPI_MspInit+0x160>)
 8002f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <HAL_SPI_MspInit+0x160>)
 8002f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f84:	4a39      	ldr	r2, [pc, #228]	; (800306c <HAL_SPI_MspInit+0x160>)
 8002f86:	f043 0302 	orr.w	r3, r3, #2
 8002f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f8e:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_SPI_MspInit+0x160>)
 8002f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002f9c:	2318      	movs	r3, #24
 8002f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fb4:	2305      	movs	r3, #5
 8002fb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	482b      	ldr	r0, [pc, #172]	; (8003070 <HAL_SPI_MspInit+0x164>)
 8002fc2:	f005 fbd7 	bl	8008774 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002fc6:	e04a      	b.n	800305e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a29      	ldr	r2, [pc, #164]	; (8003074 <HAL_SPI_MspInit+0x168>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d145      	bne.n	800305e <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fe2:	f107 0318 	add.w	r3, r7, #24
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f007 fbf0 	bl	800a7cc <HAL_RCCEx_PeriphCLKConfig>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002ff2:	f7ff fd2f 	bl	8002a54 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_SPI_MspInit+0x160>)
 8002ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ffc:	4a1b      	ldr	r2, [pc, #108]	; (800306c <HAL_SPI_MspInit+0x160>)
 8002ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003002:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_SPI_MspInit+0x160>)
 8003008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800300c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003014:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_SPI_MspInit+0x160>)
 8003016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <HAL_SPI_MspInit+0x160>)
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <HAL_SPI_MspInit+0x160>)
 8003026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003032:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2302      	movs	r3, #2
 800303c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003046:	2300      	movs	r3, #0
 8003048:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800304c:	2305      	movs	r3, #5
 800304e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003052:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003056:	4619      	mov	r1, r3
 8003058:	4805      	ldr	r0, [pc, #20]	; (8003070 <HAL_SPI_MspInit+0x164>)
 800305a:	f005 fb8b 	bl	8008774 <HAL_GPIO_Init>
}
 800305e:	bf00      	nop
 8003060:	37f0      	adds	r7, #240	; 0xf0
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40013000 	.word	0x40013000
 800306c:	58024400 	.word	0x58024400
 8003070:	58020400 	.word	0x58020400
 8003074:	40003800 	.word	0x40003800

08003078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a37      	ldr	r2, [pc, #220]	; (8003164 <HAL_TIM_Base_MspInit+0xec>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d12f      	bne.n	80030ea <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800308a:	4b37      	ldr	r3, [pc, #220]	; (8003168 <HAL_TIM_Base_MspInit+0xf0>)
 800308c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003090:	4a35      	ldr	r2, [pc, #212]	; (8003168 <HAL_TIM_Base_MspInit+0xf0>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800309a:	4b33      	ldr	r3, [pc, #204]	; (8003168 <HAL_TIM_Base_MspInit+0xf0>)
 800309c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80030a8:	2200      	movs	r2, #0
 80030aa:	2105      	movs	r1, #5
 80030ac:	2018      	movs	r0, #24
 80030ae:	f002 f8f7 	bl	80052a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80030b2:	2018      	movs	r0, #24
 80030b4:	f002 f90e 	bl	80052d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80030b8:	2200      	movs	r2, #0
 80030ba:	2105      	movs	r1, #5
 80030bc:	2019      	movs	r0, #25
 80030be:	f002 f8ef 	bl	80052a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80030c2:	2019      	movs	r0, #25
 80030c4:	f002 f906 	bl	80052d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80030c8:	2200      	movs	r2, #0
 80030ca:	2105      	movs	r1, #5
 80030cc:	201a      	movs	r0, #26
 80030ce:	f002 f8e7 	bl	80052a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80030d2:	201a      	movs	r0, #26
 80030d4:	f002 f8fe 	bl	80052d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80030d8:	2200      	movs	r2, #0
 80030da:	2105      	movs	r1, #5
 80030dc:	201b      	movs	r0, #27
 80030de:	f002 f8df 	bl	80052a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80030e2:	201b      	movs	r0, #27
 80030e4:	f002 f8f6 	bl	80052d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80030e8:	e038      	b.n	800315c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f2:	d117      	bne.n	8003124 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030f4:	4b1c      	ldr	r3, [pc, #112]	; (8003168 <HAL_TIM_Base_MspInit+0xf0>)
 80030f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030fa:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <HAL_TIM_Base_MspInit+0xf0>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_TIM_Base_MspInit+0xf0>)
 8003106:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	613b      	str	r3, [r7, #16]
 8003110:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2105      	movs	r1, #5
 8003116:	201c      	movs	r0, #28
 8003118:	f002 f8c2 	bl	80052a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800311c:	201c      	movs	r0, #28
 800311e:	f002 f8d9 	bl	80052d4 <HAL_NVIC_EnableIRQ>
}
 8003122:	e01b      	b.n	800315c <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a10      	ldr	r2, [pc, #64]	; (800316c <HAL_TIM_Base_MspInit+0xf4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d116      	bne.n	800315c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <HAL_TIM_Base_MspInit+0xf0>)
 8003130:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003134:	4a0c      	ldr	r2, [pc, #48]	; (8003168 <HAL_TIM_Base_MspInit+0xf0>)
 8003136:	f043 0302 	orr.w	r3, r3, #2
 800313a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_TIM_Base_MspInit+0xf0>)
 8003140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800314c:	2200      	movs	r2, #0
 800314e:	2105      	movs	r1, #5
 8003150:	201d      	movs	r0, #29
 8003152:	f002 f8a5 	bl	80052a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003156:	201d      	movs	r0, #29
 8003158:	f002 f8bc 	bl	80052d4 <HAL_NVIC_EnableIRQ>
}
 800315c:	bf00      	nop
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40010000 	.word	0x40010000
 8003168:	58024400 	.word	0x58024400
 800316c:	40000400 	.word	0x40000400

08003170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a26      	ldr	r2, [pc, #152]	; (8003228 <HAL_TIM_MspPostInit+0xb8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d120      	bne.n	80031d4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003192:	4b26      	ldr	r3, [pc, #152]	; (800322c <HAL_TIM_MspPostInit+0xbc>)
 8003194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003198:	4a24      	ldr	r2, [pc, #144]	; (800322c <HAL_TIM_MspPostInit+0xbc>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a2:	4b22      	ldr	r3, [pc, #136]	; (800322c <HAL_TIM_MspPostInit+0xbc>)
 80031a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031c2:	2301      	movs	r3, #1
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	4619      	mov	r1, r3
 80031cc:	4818      	ldr	r0, [pc, #96]	; (8003230 <HAL_TIM_MspPostInit+0xc0>)
 80031ce:	f005 fad1 	bl	8008774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80031d2:	e024      	b.n	800321e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031dc:	d11f      	bne.n	800321e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <HAL_TIM_MspPostInit+0xbc>)
 80031e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e4:	4a11      	ldr	r2, [pc, #68]	; (800322c <HAL_TIM_MspPostInit+0xbc>)
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_TIM_MspPostInit+0xbc>)
 80031f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80031fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003202:	2302      	movs	r3, #2
 8003204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800320a:	2300      	movs	r3, #0
 800320c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800320e:	2301      	movs	r3, #1
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003212:	f107 0314 	add.w	r3, r7, #20
 8003216:	4619      	mov	r1, r3
 8003218:	4806      	ldr	r0, [pc, #24]	; (8003234 <HAL_TIM_MspPostInit+0xc4>)
 800321a:	f005 faab 	bl	8008774 <HAL_GPIO_Init>
}
 800321e:	bf00      	nop
 8003220:	3728      	adds	r7, #40	; 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40010000 	.word	0x40010000
 800322c:	58024400 	.word	0x58024400
 8003230:	58020000 	.word	0x58020000
 8003234:	58020400 	.word	0x58020400

08003238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b0ba      	sub	sp, #232	; 0xe8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003250:	f107 0310 	add.w	r3, r7, #16
 8003254:	22c0      	movs	r2, #192	; 0xc0
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f012 fe17 	bl	8015e8c <memset>
  if(huart->Instance==USART1)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2b      	ldr	r2, [pc, #172]	; (8003310 <HAL_UART_MspInit+0xd8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d14e      	bne.n	8003306 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003268:	f04f 0201 	mov.w	r2, #1
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8003274:	2300      	movs	r3, #0
 8003276:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800327a:	f107 0310 	add.w	r3, r7, #16
 800327e:	4618      	mov	r0, r3
 8003280:	f007 faa4 	bl	800a7cc <HAL_RCCEx_PeriphCLKConfig>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800328a:	f7ff fbe3 	bl	8002a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800328e:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_UART_MspInit+0xdc>)
 8003290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003294:	4a1f      	ldr	r2, [pc, #124]	; (8003314 <HAL_UART_MspInit+0xdc>)
 8003296:	f043 0310 	orr.w	r3, r3, #16
 800329a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_UART_MspInit+0xdc>)
 80032a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <HAL_UART_MspInit+0xdc>)
 80032ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_UART_MspInit+0xdc>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032bc:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_UART_MspInit+0xdc>)
 80032be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80032ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d2:	2302      	movs	r3, #2
 80032d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032de:	2300      	movs	r3, #0
 80032e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032e4:	2307      	movs	r3, #7
 80032e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032ee:	4619      	mov	r1, r3
 80032f0:	4809      	ldr	r0, [pc, #36]	; (8003318 <HAL_UART_MspInit+0xe0>)
 80032f2:	f005 fa3f 	bl	8008774 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80032f6:	2200      	movs	r2, #0
 80032f8:	2105      	movs	r1, #5
 80032fa:	2025      	movs	r0, #37	; 0x25
 80032fc:	f001 ffd0 	bl	80052a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003300:	2025      	movs	r0, #37	; 0x25
 8003302:	f001 ffe7 	bl	80052d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003306:	bf00      	nop
 8003308:	37e8      	adds	r7, #232	; 0xe8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40011000 	.word	0x40011000
 8003314:	58024400 	.word	0x58024400
 8003318:	58020000 	.word	0x58020000

0800331c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b090      	sub	sp, #64	; 0x40
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b0f      	cmp	r3, #15
 8003328:	d827      	bhi.n	800337a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800332a:	2200      	movs	r2, #0
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	2036      	movs	r0, #54	; 0x36
 8003330:	f001 ffb6 	bl	80052a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003334:	2036      	movs	r0, #54	; 0x36
 8003336:	f001 ffcd 	bl	80052d4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800333a:	4a29      	ldr	r2, [pc, #164]	; (80033e0 <HAL_InitTick+0xc4>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003340:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <HAL_InitTick+0xc8>)
 8003342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003346:	4a27      	ldr	r2, [pc, #156]	; (80033e4 <HAL_InitTick+0xc8>)
 8003348:	f043 0310 	orr.w	r3, r3, #16
 800334c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003350:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <HAL_InitTick+0xc8>)
 8003352:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800335e:	f107 0210 	add.w	r2, r7, #16
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f007 f9ed 	bl	800a748 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800336e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003370:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	2b00      	cmp	r3, #0
 8003376:	d106      	bne.n	8003386 <HAL_InitTick+0x6a>
 8003378:	e001      	b.n	800337e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e02b      	b.n	80033d6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800337e:	f007 f9b7 	bl	800a6f0 <HAL_RCC_GetPCLK1Freq>
 8003382:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003384:	e004      	b.n	8003390 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003386:	f007 f9b3 	bl	800a6f0 <HAL_RCC_GetPCLK1Freq>
 800338a:	4603      	mov	r3, r0
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003392:	4a15      	ldr	r2, [pc, #84]	; (80033e8 <HAL_InitTick+0xcc>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	0c9b      	lsrs	r3, r3, #18
 800339a:	3b01      	subs	r3, #1
 800339c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <HAL_InitTick+0xd0>)
 80033a0:	4a13      	ldr	r2, [pc, #76]	; (80033f0 <HAL_InitTick+0xd4>)
 80033a2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <HAL_InitTick+0xd0>)
 80033a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033aa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80033ac:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <HAL_InitTick+0xd0>)
 80033ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <HAL_InitTick+0xd0>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_InitTick+0xd0>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80033be:	480b      	ldr	r0, [pc, #44]	; (80033ec <HAL_InitTick+0xd0>)
 80033c0:	f00a fe75 	bl	800e0ae <HAL_TIM_Base_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d104      	bne.n	80033d4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80033ca:	4808      	ldr	r0, [pc, #32]	; (80033ec <HAL_InitTick+0xd0>)
 80033cc:	f00a ff5e 	bl	800e28c <HAL_TIM_Base_Start_IT>
 80033d0:	4603      	mov	r3, r0
 80033d2:	e000      	b.n	80033d6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3740      	adds	r7, #64	; 0x40
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	24000090 	.word	0x24000090
 80033e4:	58024400 	.word	0x58024400
 80033e8:	431bde83 	.word	0x431bde83
 80033ec:	24000be8 	.word	0x24000be8
 80033f0:	40001000 	.word	0x40001000

080033f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80033f8:	e7fe      	b.n	80033f8 <NMI_Handler+0x4>

080033fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033fe:	e7fe      	b.n	80033fe <HardFault_Handler+0x4>

08003400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003404:	e7fe      	b.n	8003404 <MemManage_Handler+0x4>

08003406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800340a:	e7fe      	b.n	800340a <BusFault_Handler+0x4>

0800340c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003410:	e7fe      	b.n	8003410 <UsageFault_Handler+0x4>

08003412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <DMA1_Stream0_IRQHandler+0x10>)
 8003426:	f003 fe93 	bl	8007150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	240001e4 	.word	0x240001e4

08003434 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003438:	4802      	ldr	r0, [pc, #8]	; (8003444 <DMA1_Stream1_IRQHandler+0x10>)
 800343a:	f003 fe89 	bl	8007150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	2400025c 	.word	0x2400025c

08003448 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800344c:	4802      	ldr	r0, [pc, #8]	; (8003458 <DMA1_Stream5_IRQHandler+0x10>)
 800344e:	f003 fe7f 	bl	8007150 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	240002e8 	.word	0x240002e8

0800345c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003460:	4802      	ldr	r0, [pc, #8]	; (800346c <TIM1_BRK_IRQHandler+0x10>)
 8003462:	f00b fa55 	bl	800e910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	240004e8 	.word	0x240004e8

08003470 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003474:	4802      	ldr	r0, [pc, #8]	; (8003480 <TIM1_UP_IRQHandler+0x10>)
 8003476:	f00b fa4b 	bl	800e910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	240004e8 	.word	0x240004e8

08003484 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003488:	4802      	ldr	r0, [pc, #8]	; (8003494 <TIM1_TRG_COM_IRQHandler+0x10>)
 800348a:	f00b fa41 	bl	800e910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	240004e8 	.word	0x240004e8

08003498 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800349c:	4802      	ldr	r0, [pc, #8]	; (80034a8 <TIM1_CC_IRQHandler+0x10>)
 800349e:	f00b fa37 	bl	800e910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	240004e8 	.word	0x240004e8

080034ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034b0:	4802      	ldr	r0, [pc, #8]	; (80034bc <TIM2_IRQHandler+0x10>)
 80034b2:	f00b fa2d 	bl	800e910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	24000534 	.word	0x24000534

080034c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034c4:	4802      	ldr	r0, [pc, #8]	; (80034d0 <TIM3_IRQHandler+0x10>)
 80034c6:	f00b fa23 	bl	800e910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	24000580 	.word	0x24000580

080034d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <USART1_IRQHandler+0x10>)
 80034da:	f00c fca7 	bl	800fe2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	240005cc 	.word	0x240005cc

080034e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <TIM6_DAC_IRQHandler+0x20>)
 80034ee:	791b      	ldrb	r3, [r3, #4]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80034f6:	4804      	ldr	r0, [pc, #16]	; (8003508 <TIM6_DAC_IRQHandler+0x20>)
 80034f8:	f002 f881 	bl	80055fe <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80034fc:	4803      	ldr	r0, [pc, #12]	; (800350c <TIM6_DAC_IRQHandler+0x24>)
 80034fe:	f00b fa07 	bl	800e910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	240002d4 	.word	0x240002d4
 800350c:	24000be8 	.word	0x24000be8

08003510 <ITM_SendChar>:
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	71fb      	strb	r3, [r7, #7]
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <ITM_SendChar+0x48>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a0e      	ldr	r2, [pc, #56]	; (8003558 <ITM_SendChar+0x48>)
 8003520:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <ITM_SendChar+0x4c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a0c      	ldr	r2, [pc, #48]	; (800355c <ITM_SendChar+0x4c>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	bf00      	nop
 8003534:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f8      	beq.n	8003534 <ITM_SendChar+0x24>
 8003542:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000edfc 	.word	0xe000edfc
 800355c:	e0000e00 	.word	0xe0000e00

08003560 <_read>:
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	e00a      	b.n	8003588 <_read+0x28>
 8003572:	f3af 8000 	nop.w
 8003576:	4601      	mov	r1, r0
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	60ba      	str	r2, [r7, #8]
 800357e:	b2ca      	uxtb	r2, r1
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	3301      	adds	r3, #1
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	429a      	cmp	r2, r3
 800358e:	dbf0      	blt.n	8003572 <_read+0x12>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <_write>:
 800359a:	b580      	push	{r7, lr}
 800359c:	b086      	sub	sp, #24
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	e009      	b.n	80035c0 <_write+0x26>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	60ba      	str	r2, [r7, #8]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff ffab 	bl	8003510 <ITM_SendChar>
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3301      	adds	r3, #1
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	dbf1      	blt.n	80035ac <_write+0x12>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <_close>:
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <_fstat>:
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	2300      	movs	r3, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <_isatty>:
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	2301      	movs	r3, #1
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <_lseek>:
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	2300      	movs	r3, #0
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <_sbrk>:
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	4a14      	ldr	r2, [pc, #80]	; (8003698 <_sbrk+0x5c>)
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <_sbrk+0x60>)
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <_sbrk+0x64>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d102      	bne.n	800365e <_sbrk+0x22>
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <_sbrk+0x64>)
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <_sbrk+0x68>)
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <_sbrk+0x64>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	429a      	cmp	r2, r3
 800366a:	d207      	bcs.n	800367c <_sbrk+0x40>
 800366c:	f012 fbc6 	bl	8015dfc <__errno>
 8003670:	4603      	mov	r3, r0
 8003672:	220c      	movs	r2, #12
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800367a:	e009      	b.n	8003690 <_sbrk+0x54>
 800367c:	4b08      	ldr	r3, [pc, #32]	; (80036a0 <_sbrk+0x64>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <_sbrk+0x64>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	4a05      	ldr	r2, [pc, #20]	; (80036a0 <_sbrk+0x64>)
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	24080000 	.word	0x24080000
 800369c:	00000400 	.word	0x00000400
 80036a0:	24000c34 	.word	0x24000c34
 80036a4:	240055a0 	.word	0x240055a0

080036a8 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80036ac:	4b37      	ldr	r3, [pc, #220]	; (800378c <SystemInit+0xe4>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	4a36      	ldr	r2, [pc, #216]	; (800378c <SystemInit+0xe4>)
 80036b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80036bc:	4b34      	ldr	r3, [pc, #208]	; (8003790 <SystemInit+0xe8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	2b06      	cmp	r3, #6
 80036c6:	d807      	bhi.n	80036d8 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80036c8:	4b31      	ldr	r3, [pc, #196]	; (8003790 <SystemInit+0xe8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 030f 	bic.w	r3, r3, #15
 80036d0:	4a2f      	ldr	r2, [pc, #188]	; (8003790 <SystemInit+0xe8>)
 80036d2:	f043 0307 	orr.w	r3, r3, #7
 80036d6:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80036d8:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <SystemInit+0xec>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <SystemInit+0xec>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80036e4:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <SystemInit+0xec>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80036ea:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <SystemInit+0xec>)
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	4929      	ldr	r1, [pc, #164]	; (8003794 <SystemInit+0xec>)
 80036f0:	4b29      	ldr	r3, [pc, #164]	; (8003798 <SystemInit+0xf0>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80036f6:	4b26      	ldr	r3, [pc, #152]	; (8003790 <SystemInit+0xe8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003702:	4b23      	ldr	r3, [pc, #140]	; (8003790 <SystemInit+0xe8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 030f 	bic.w	r3, r3, #15
 800370a:	4a21      	ldr	r2, [pc, #132]	; (8003790 <SystemInit+0xe8>)
 800370c:	f043 0307 	orr.w	r3, r3, #7
 8003710:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <SystemInit+0xec>)
 8003714:	2200      	movs	r2, #0
 8003716:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003718:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <SystemInit+0xec>)
 800371a:	2200      	movs	r2, #0
 800371c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <SystemInit+0xec>)
 8003720:	2200      	movs	r2, #0
 8003722:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <SystemInit+0xec>)
 8003726:	4a1d      	ldr	r2, [pc, #116]	; (800379c <SystemInit+0xf4>)
 8003728:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800372a:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <SystemInit+0xec>)
 800372c:	4a1c      	ldr	r2, [pc, #112]	; (80037a0 <SystemInit+0xf8>)
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003730:	4b18      	ldr	r3, [pc, #96]	; (8003794 <SystemInit+0xec>)
 8003732:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <SystemInit+0xfc>)
 8003734:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8003736:	4b17      	ldr	r3, [pc, #92]	; (8003794 <SystemInit+0xec>)
 8003738:	2200      	movs	r2, #0
 800373a:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 800373c:	4b15      	ldr	r3, [pc, #84]	; (8003794 <SystemInit+0xec>)
 800373e:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <SystemInit+0xfc>)
 8003740:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003742:	4b14      	ldr	r3, [pc, #80]	; (8003794 <SystemInit+0xec>)
 8003744:	2200      	movs	r2, #0
 8003746:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003748:	4b12      	ldr	r3, [pc, #72]	; (8003794 <SystemInit+0xec>)
 800374a:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <SystemInit+0xfc>)
 800374c:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <SystemInit+0xec>)
 8003750:	2200      	movs	r2, #0
 8003752:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <SystemInit+0xec>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0e      	ldr	r2, [pc, #56]	; (8003794 <SystemInit+0xec>)
 800375a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800375e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <SystemInit+0xec>)
 8003762:	2200      	movs	r2, #0
 8003764:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <SystemInit+0x100>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b10      	ldr	r3, [pc, #64]	; (80037ac <SystemInit+0x104>)
 800376c:	4013      	ands	r3, r2
 800376e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003772:	d202      	bcs.n	800377a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <SystemInit+0x108>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800377a:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <SystemInit+0x10c>)
 800377c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003780:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000ed00 	.word	0xe000ed00
 8003790:	52002000 	.word	0x52002000
 8003794:	58024400 	.word	0x58024400
 8003798:	eaf6ed7f 	.word	0xeaf6ed7f
 800379c:	02020200 	.word	0x02020200
 80037a0:	01ff0000 	.word	0x01ff0000
 80037a4:	01010280 	.word	0x01010280
 80037a8:	5c001000 	.word	0x5c001000
 80037ac:	ffff0000 	.word	0xffff0000
 80037b0:	51008108 	.word	0x51008108
 80037b4:	52004000 	.word	0x52004000

080037b8 <Reset_Handler>:
 80037b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037f0 <LoopFillZerobss+0xe>
 80037bc:	f7ff ff74 	bl	80036a8 <SystemInit>
 80037c0:	480c      	ldr	r0, [pc, #48]	; (80037f4 <LoopFillZerobss+0x12>)
 80037c2:	490d      	ldr	r1, [pc, #52]	; (80037f8 <LoopFillZerobss+0x16>)
 80037c4:	4a0d      	ldr	r2, [pc, #52]	; (80037fc <LoopFillZerobss+0x1a>)
 80037c6:	2300      	movs	r3, #0
 80037c8:	e002      	b.n	80037d0 <LoopCopyDataInit>

080037ca <CopyDataInit>:
 80037ca:	58d4      	ldr	r4, [r2, r3]
 80037cc:	50c4      	str	r4, [r0, r3]
 80037ce:	3304      	adds	r3, #4

080037d0 <LoopCopyDataInit>:
 80037d0:	18c4      	adds	r4, r0, r3
 80037d2:	428c      	cmp	r4, r1
 80037d4:	d3f9      	bcc.n	80037ca <CopyDataInit>
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <LoopFillZerobss+0x1e>)
 80037d8:	4c0a      	ldr	r4, [pc, #40]	; (8003804 <LoopFillZerobss+0x22>)
 80037da:	2300      	movs	r3, #0
 80037dc:	e001      	b.n	80037e2 <LoopFillZerobss>

080037de <FillZerobss>:
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	3204      	adds	r2, #4

080037e2 <LoopFillZerobss>:
 80037e2:	42a2      	cmp	r2, r4
 80037e4:	d3fb      	bcc.n	80037de <FillZerobss>
 80037e6:	f012 fb0f 	bl	8015e08 <__libc_init_array>
 80037ea:	f7fd fb79 	bl	8000ee0 <main>
 80037ee:	4770      	bx	lr
 80037f0:	24080000 	.word	0x24080000
 80037f4:	24000000 	.word	0x24000000
 80037f8:	24000100 	.word	0x24000100
 80037fc:	0801732c 	.word	0x0801732c
 8003800:	24000100 	.word	0x24000100
 8003804:	2400559c 	.word	0x2400559c

08003808 <ADC3_IRQHandler>:
 8003808:	e7fe      	b.n	8003808 <ADC3_IRQHandler>
	...

0800380c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003812:	2003      	movs	r0, #3
 8003814:	f001 fd39 	bl	800528a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003818:	f006 fdc0 	bl	800a39c <HAL_RCC_GetSysClockFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <HAL_Init+0x68>)
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	4913      	ldr	r1, [pc, #76]	; (8003878 <HAL_Init+0x6c>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	fa22 f303 	lsr.w	r3, r2, r3
 8003834:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003836:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <HAL_Init+0x68>)
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	4a0e      	ldr	r2, [pc, #56]	; (8003878 <HAL_Init+0x6c>)
 8003840:	5cd3      	ldrb	r3, [r2, r3]
 8003842:	f003 031f 	and.w	r3, r3, #31
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	fa22 f303 	lsr.w	r3, r2, r3
 800384c:	4a0b      	ldr	r2, [pc, #44]	; (800387c <HAL_Init+0x70>)
 800384e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003850:	4a0b      	ldr	r2, [pc, #44]	; (8003880 <HAL_Init+0x74>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003856:	2005      	movs	r0, #5
 8003858:	f7ff fd60 	bl	800331c <HAL_InitTick>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e002      	b.n	800386c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003866:	f7ff f8fb 	bl	8002a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	58024400 	.word	0x58024400
 8003878:	08017244 	.word	0x08017244
 800387c:	2400008c 	.word	0x2400008c
 8003880:	24000088 	.word	0x24000088

08003884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_IncTick+0x20>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_IncTick+0x24>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4413      	add	r3, r2
 8003894:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <HAL_IncTick+0x24>)
 8003896:	6013      	str	r3, [r2, #0]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	24000094 	.word	0x24000094
 80038a8:	24000c38 	.word	0x24000c38

080038ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return uwTick;
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <HAL_GetTick+0x14>)
 80038b2:	681b      	ldr	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	24000c38 	.word	0x24000c38

080038c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <HAL_GetREVID+0x14>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	0c1b      	lsrs	r3, r3, #16
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	5c001000 	.word	0x5c001000

080038dc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	401a      	ands	r2, r3
 80038f0:	4904      	ldr	r1, [pc, #16]	; (8003904 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	58000400 	.word	0x58000400

08003908 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	431a      	orrs	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	609a      	str	r2, [r3, #8]
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	609a      	str	r2, [r3, #8]
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	3360      	adds	r3, #96	; 0x60
 8003982:	461a      	mov	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	430b      	orrs	r3, r1
 800399e:	431a      	orrs	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80039a4:	bf00      	nop
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	431a      	orrs	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	611a      	str	r2, [r3, #16]
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b087      	sub	sp, #28
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	60f8      	str	r0, [r7, #12]
 80039ea:	60b9      	str	r1, [r7, #8]
 80039ec:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	3360      	adds	r3, #96	; 0x60
 80039f2:	461a      	mov	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	601a      	str	r2, [r3, #0]
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b087      	sub	sp, #28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	3330      	adds	r3, #48	; 0x30
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	4413      	add	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	211f      	movs	r1, #31
 8003a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	401a      	ands	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	0e9b      	lsrs	r3, r3, #26
 8003a76:	f003 011f 	and.w	r1, r3, #31
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	fa01 f303 	lsl.w	r3, r1, r3
 8003a84:	431a      	orrs	r2, r3
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a8a:	bf00      	nop
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f023 0203 	bic.w	r2, r3, #3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	60da      	str	r2, [r3, #12]
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3314      	adds	r3, #20
 8003acc:	461a      	mov	r2, r3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	0e5b      	lsrs	r3, r3, #25
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	4413      	add	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	0d1b      	lsrs	r3, r3, #20
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	2107      	movs	r1, #7
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	401a      	ands	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	0d1b      	lsrs	r3, r3, #20
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	431a      	orrs	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003b06:	bf00      	nop
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	401a      	ands	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f003 0318 	and.w	r3, r3, #24
 8003b36:	4908      	ldr	r1, [pc, #32]	; (8003b58 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003b38:	40d9      	lsrs	r1, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	400b      	ands	r3, r1
 8003b3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b42:	431a      	orrs	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	000fffff 	.word	0x000fffff

08003b5c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 031f 	and.w	r3, r3, #31
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6093      	str	r3, [r2, #8]
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	5fffffc0 	.word	0x5fffffc0

08003b9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bb0:	d101      	bne.n	8003bb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	6fffffc0 	.word	0x6fffffc0

08003bec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c00:	d101      	bne.n	8003c06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <LL_ADC_Enable+0x24>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	f043 0201 	orr.w	r2, r3, #1
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	7fffffc0 	.word	0x7fffffc0

08003c3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <LL_ADC_Disable+0x24>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	f043 0202 	orr.w	r2, r3, #2
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	7fffffc0 	.word	0x7fffffc0

08003c64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <LL_ADC_IsEnabled+0x18>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <LL_ADC_IsEnabled+0x1a>
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d101      	bne.n	8003ca2 <LL_ADC_IsDisableOngoing+0x18>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <LL_ADC_IsDisableOngoing+0x1a>
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	4b05      	ldr	r3, [pc, #20]	; (8003cd4 <LL_ADC_REG_StartConversion+0x24>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	f043 0204 	orr.w	r2, r3, #4
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	7fffffc0 	.word	0x7fffffc0

08003cd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d101      	bne.n	8003cf0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d101      	bne.n	8003d16 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d24:	b590      	push	{r4, r7, lr}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e18f      	b.n	800405e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7fe fea5 	bl	8002a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff19 	bl	8003b9c <LL_ADC_IsDeepPowerDownEnabled>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d004      	beq.n	8003d7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff feff 	bl	8003b78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff ff34 	bl	8003bec <LL_ADC_IsInternalRegulatorEnabled>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d114      	bne.n	8003db4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ff18 	bl	8003bc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d94:	4b87      	ldr	r3, [pc, #540]	; (8003fb4 <HAL_ADC_Init+0x290>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	099b      	lsrs	r3, r3, #6
 8003d9a:	4a87      	ldr	r2, [pc, #540]	; (8003fb8 <HAL_ADC_Init+0x294>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	099b      	lsrs	r3, r3, #6
 8003da2:	3301      	adds	r3, #1
 8003da4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003da6:	e002      	b.n	8003dae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f9      	bne.n	8003da8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ff17 	bl	8003bec <LL_ADC_IsInternalRegulatorEnabled>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10d      	bne.n	8003de0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc8:	f043 0210 	orr.w	r2, r3, #16
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	f043 0201 	orr.w	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff77 	bl	8003cd8 <LL_ADC_REG_IsConversionOngoing>
 8003dea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f040 8129 	bne.w	800404c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f040 8125 	bne.w	800404c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e0a:	f043 0202 	orr.w	r2, r3, #2
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff ff24 	bl	8003c64 <LL_ADC_IsEnabled>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d136      	bne.n	8003e90 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a65      	ldr	r2, [pc, #404]	; (8003fbc <HAL_ADC_Init+0x298>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d004      	beq.n	8003e36 <HAL_ADC_Init+0x112>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a63      	ldr	r2, [pc, #396]	; (8003fc0 <HAL_ADC_Init+0x29c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d10e      	bne.n	8003e54 <HAL_ADC_Init+0x130>
 8003e36:	4861      	ldr	r0, [pc, #388]	; (8003fbc <HAL_ADC_Init+0x298>)
 8003e38:	f7ff ff14 	bl	8003c64 <LL_ADC_IsEnabled>
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	4860      	ldr	r0, [pc, #384]	; (8003fc0 <HAL_ADC_Init+0x29c>)
 8003e40:	f7ff ff10 	bl	8003c64 <LL_ADC_IsEnabled>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4323      	orrs	r3, r4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	e008      	b.n	8003e66 <HAL_ADC_Init+0x142>
 8003e54:	485b      	ldr	r0, [pc, #364]	; (8003fc4 <HAL_ADC_Init+0x2a0>)
 8003e56:	f7ff ff05 	bl	8003c64 <LL_ADC_IsEnabled>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d012      	beq.n	8003e90 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a53      	ldr	r2, [pc, #332]	; (8003fbc <HAL_ADC_Init+0x298>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d004      	beq.n	8003e7e <HAL_ADC_Init+0x15a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a51      	ldr	r2, [pc, #324]	; (8003fc0 <HAL_ADC_Init+0x29c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_Init+0x15e>
 8003e7e:	4a52      	ldr	r2, [pc, #328]	; (8003fc8 <HAL_ADC_Init+0x2a4>)
 8003e80:	e000      	b.n	8003e84 <HAL_ADC_Init+0x160>
 8003e82:	4a52      	ldr	r2, [pc, #328]	; (8003fcc <HAL_ADC_Init+0x2a8>)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	f7ff fd3c 	bl	8003908 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003e90:	f7ff fd18 	bl	80038c4 <HAL_GetREVID>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d914      	bls.n	8003ec8 <HAL_ADC_Init+0x1a4>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d110      	bne.n	8003ec8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	7d5b      	ldrb	r3, [r3, #21]
 8003eaa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003eb0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003eb6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7f1b      	ldrb	r3, [r3, #28]
 8003ebc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003ebe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ec0:	f043 030c 	orr.w	r3, r3, #12
 8003ec4:	61bb      	str	r3, [r7, #24]
 8003ec6:	e00d      	b.n	8003ee4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	7d5b      	ldrb	r3, [r3, #21]
 8003ecc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ed2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ed8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	7f1b      	ldrb	r3, [r3, #28]
 8003ede:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	7f1b      	ldrb	r3, [r3, #28]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d106      	bne.n	8003efa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	045b      	lsls	r3, r3, #17
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	4b2c      	ldr	r3, [pc, #176]	; (8003fd0 <HAL_ADC_Init+0x2ac>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6812      	ldr	r2, [r2, #0]
 8003f24:	69b9      	ldr	r1, [r7, #24]
 8003f26:	430b      	orrs	r3, r1
 8003f28:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fed2 	bl	8003cd8 <LL_ADC_REG_IsConversionOngoing>
 8003f34:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff fedf 	bl	8003cfe <LL_ADC_INJ_IsConversionOngoing>
 8003f40:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d15f      	bne.n	8004008 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d15c      	bne.n	8004008 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	7d1b      	ldrb	r3, [r3, #20]
 8003f52:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <HAL_ADC_Init+0x2b0>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	69b9      	ldr	r1, [r7, #24]
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d130      	bne.n	8003fdc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <HAL_ADC_Init+0x2b4>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f8e:	3a01      	subs	r2, #1
 8003f90:	0411      	lsls	r1, r2, #16
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f96:	4311      	orrs	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f9c:	4311      	orrs	r1, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	611a      	str	r2, [r3, #16]
 8003fb0:	e01c      	b.n	8003fec <HAL_ADC_Init+0x2c8>
 8003fb2:	bf00      	nop
 8003fb4:	24000088 	.word	0x24000088
 8003fb8:	053e2d63 	.word	0x053e2d63
 8003fbc:	40022000 	.word	0x40022000
 8003fc0:	40022100 	.word	0x40022100
 8003fc4:	58026000 	.word	0x58026000
 8003fc8:	40022300 	.word	0x40022300
 8003fcc:	58026300 	.word	0x58026300
 8003fd0:	fff0c003 	.word	0xfff0c003
 8003fd4:	ffffbffc 	.word	0xffffbffc
 8003fd8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0201 	bic.w	r2, r2, #1
 8003fea:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fdec 	bl	8004be0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d10c      	bne.n	800402a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f023 010f 	bic.w	r1, r3, #15
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	1e5a      	subs	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
 8004028:	e007      	b.n	800403a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 020f 	bic.w	r2, r2, #15
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f023 0303 	bic.w	r3, r3, #3
 8004042:	f043 0201 	orr.w	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	655a      	str	r2, [r3, #84]	; 0x54
 800404a:	e007      	b.n	800405c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004050:	f043 0210 	orr.w	r2, r3, #16
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800405c:	7ffb      	ldrb	r3, [r7, #31]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3724      	adds	r7, #36	; 0x24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd90      	pop	{r4, r7, pc}
 8004066:	bf00      	nop

08004068 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a55      	ldr	r2, [pc, #340]	; (80041d0 <HAL_ADC_Start_DMA+0x168>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d004      	beq.n	8004088 <HAL_ADC_Start_DMA+0x20>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a54      	ldr	r2, [pc, #336]	; (80041d4 <HAL_ADC_Start_DMA+0x16c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_ADC_Start_DMA+0x24>
 8004088:	4b53      	ldr	r3, [pc, #332]	; (80041d8 <HAL_ADC_Start_DMA+0x170>)
 800408a:	e000      	b.n	800408e <HAL_ADC_Start_DMA+0x26>
 800408c:	4b53      	ldr	r3, [pc, #332]	; (80041dc <HAL_ADC_Start_DMA+0x174>)
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fd64 	bl	8003b5c <LL_ADC_GetMultimode>
 8004094:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fe1c 	bl	8003cd8 <LL_ADC_REG_IsConversionOngoing>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f040 808c 	bne.w	80041c0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_ADC_Start_DMA+0x4e>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e087      	b.n	80041c6 <HAL_ADC_Start_DMA+0x15e>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b05      	cmp	r3, #5
 80040c8:	d002      	beq.n	80040d0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b09      	cmp	r3, #9
 80040ce:	d170      	bne.n	80041b2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fc07 	bl	80048e4 <ADC_Enable>
 80040d6:	4603      	mov	r3, r0
 80040d8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80040da:	7dfb      	ldrb	r3, [r7, #23]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d163      	bne.n	80041a8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040e4:	4b3e      	ldr	r3, [pc, #248]	; (80041e0 <HAL_ADC_Start_DMA+0x178>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a37      	ldr	r2, [pc, #220]	; (80041d4 <HAL_ADC_Start_DMA+0x16c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d002      	beq.n	8004100 <HAL_ADC_Start_DMA+0x98>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	e000      	b.n	8004102 <HAL_ADC_Start_DMA+0x9a>
 8004100:	4b33      	ldr	r3, [pc, #204]	; (80041d0 <HAL_ADC_Start_DMA+0x168>)
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	4293      	cmp	r3, r2
 8004108:	d002      	beq.n	8004110 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d105      	bne.n	800411c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004114:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d006      	beq.n	8004136 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412c:	f023 0206 	bic.w	r2, r3, #6
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	659a      	str	r2, [r3, #88]	; 0x58
 8004134:	e002      	b.n	800413c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004140:	4a28      	ldr	r2, [pc, #160]	; (80041e4 <HAL_ADC_Start_DMA+0x17c>)
 8004142:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	4a27      	ldr	r2, [pc, #156]	; (80041e8 <HAL_ADC_Start_DMA+0x180>)
 800414a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004150:	4a26      	ldr	r2, [pc, #152]	; (80041ec <HAL_ADC_Start_DMA+0x184>)
 8004152:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	221c      	movs	r2, #28
 800415a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0210 	orr.w	r2, r2, #16
 8004172:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f7ff fc89 	bl	8003a96 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3340      	adds	r3, #64	; 0x40
 800418e:	4619      	mov	r1, r3
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f002 f80e 	bl	80061b4 <HAL_DMA_Start_IT>
 8004198:	4603      	mov	r3, r0
 800419a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7ff fd85 	bl	8003cb0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80041a6:	e00d      	b.n	80041c4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80041b0:	e008      	b.n	80041c4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80041be:	e001      	b.n	80041c4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80041c0:	2302      	movs	r3, #2
 80041c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40022000 	.word	0x40022000
 80041d4:	40022100 	.word	0x40022100
 80041d8:	40022300 	.word	0x40022300
 80041dc:	58026300 	.word	0x58026300
 80041e0:	fffff0fe 	.word	0xfffff0fe
 80041e4:	08004ab7 	.word	0x08004ab7
 80041e8:	08004b8f 	.word	0x08004b8f
 80041ec:	08004bab 	.word	0x08004bab

080041f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800422c:	b590      	push	{r4, r7, lr}
 800422e:	b0a1      	sub	sp, #132	; 0x84
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4a65      	ldr	r2, [pc, #404]	; (80043dc <HAL_ADC_ConfigChannel+0x1b0>)
 8004246:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x2a>
 8004252:	2302      	movs	r3, #2
 8004254:	e32e      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x688>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fd38 	bl	8003cd8 <LL_ADC_REG_IsConversionOngoing>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	f040 8313 	bne.w	8004896 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	db2c      	blt.n	80042d2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004280:	2b00      	cmp	r3, #0
 8004282:	d108      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x6a>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	0e9b      	lsrs	r3, r3, #26
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2201      	movs	r2, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	e016      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x98>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800429e:	fa93 f3a3 	rbit	r3, r3
 80042a2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80042ae:	2320      	movs	r3, #32
 80042b0:	e003      	b.n	80042ba <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80042b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042b4:	fab3 f383 	clz	r3, r3
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2201      	movs	r2, #1
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	69d1      	ldr	r1, [r2, #28]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	430b      	orrs	r3, r1
 80042d0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6859      	ldr	r1, [r3, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f7ff fbad 	bl	8003a3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fcf5 	bl	8003cd8 <LL_ADC_REG_IsConversionOngoing>
 80042ee:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fd02 	bl	8003cfe <LL_ADC_INJ_IsConversionOngoing>
 80042fa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80042fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f040 80b8 	bne.w	8004474 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004306:	2b00      	cmp	r3, #0
 8004308:	f040 80b4 	bne.w	8004474 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	461a      	mov	r2, r3
 800431a:	f7ff fbcf 	bl	8003abc <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800431e:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <HAL_ADC_ConfigChannel+0x1b4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800432a:	d10b      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x118>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	695a      	ldr	r2, [r3, #20]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	089b      	lsrs	r3, r3, #2
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	e01d      	b.n	8004380 <HAL_ADC_ConfigChannel+0x154>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0310 	and.w	r3, r3, #16
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10b      	bne.n	800436a <HAL_ADC_ConfigChannel+0x13e>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	089b      	lsrs	r3, r3, #2
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	e00a      	b.n	8004380 <HAL_ADC_ConfigChannel+0x154>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	089b      	lsrs	r3, r3, #2
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d02c      	beq.n	80043e4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6919      	ldr	r1, [r3, #16]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004398:	f7ff faea 	bl	8003970 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	6919      	ldr	r1, [r3, #16]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	7e5b      	ldrb	r3, [r3, #25]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d102      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x186>
 80043ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043b0:	e000      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x188>
 80043b2:	2300      	movs	r3, #0
 80043b4:	461a      	mov	r2, r3
 80043b6:	f7ff fb14 	bl	80039e2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6919      	ldr	r1, [r3, #16]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	7e1b      	ldrb	r3, [r3, #24]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d102      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x1a4>
 80043ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043ce:	e000      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x1a6>
 80043d0:	2300      	movs	r3, #0
 80043d2:	461a      	mov	r2, r3
 80043d4:	f7ff faec 	bl	80039b0 <LL_ADC_SetDataRightShift>
 80043d8:	e04c      	b.n	8004474 <HAL_ADC_ConfigChannel+0x248>
 80043da:	bf00      	nop
 80043dc:	47ff0000 	.word	0x47ff0000
 80043e0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	069b      	lsls	r3, r3, #26
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d107      	bne.n	8004408 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004406:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800440e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	069b      	lsls	r3, r3, #26
 8004418:	429a      	cmp	r2, r3
 800441a:	d107      	bne.n	800442c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800442a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004432:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	069b      	lsls	r3, r3, #26
 800443c:	429a      	cmp	r2, r3
 800443e:	d107      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800444e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004456:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	069b      	lsls	r3, r3, #26
 8004460:	429a      	cmp	r2, r3
 8004462:	d107      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004472:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff fbf3 	bl	8003c64 <LL_ADC_IsEnabled>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	f040 8211 	bne.w	80048a8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6819      	ldr	r1, [r3, #0]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	461a      	mov	r2, r3
 8004494:	f7ff fb3e 	bl	8003b14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4aa1      	ldr	r2, [pc, #644]	; (8004724 <HAL_ADC_ConfigChannel+0x4f8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	f040 812e 	bne.w	8004700 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x2a0>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	0e9b      	lsrs	r3, r3, #26
 80044ba:	3301      	adds	r3, #1
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2b09      	cmp	r3, #9
 80044c2:	bf94      	ite	ls
 80044c4:	2301      	movls	r3, #1
 80044c6:	2300      	movhi	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	e019      	b.n	8004500 <HAL_ADC_ConfigChannel+0x2d4>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044d4:	fa93 f3a3 	rbit	r3, r3
 80044d8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80044da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80044de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80044e4:	2320      	movs	r3, #32
 80044e6:	e003      	b.n	80044f0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80044e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ea:	fab3 f383 	clz	r3, r3
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	3301      	adds	r3, #1
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	2b09      	cmp	r3, #9
 80044f8:	bf94      	ite	ls
 80044fa:	2301      	movls	r3, #1
 80044fc:	2300      	movhi	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004500:	2b00      	cmp	r3, #0
 8004502:	d079      	beq.n	80045f8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800450c:	2b00      	cmp	r3, #0
 800450e:	d107      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x2f4>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	0e9b      	lsrs	r3, r3, #26
 8004516:	3301      	adds	r3, #1
 8004518:	069b      	lsls	r3, r3, #26
 800451a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800451e:	e015      	b.n	800454c <HAL_ADC_ConfigChannel+0x320>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004528:	fa93 f3a3 	rbit	r3, r3
 800452c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800452e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004530:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004538:	2320      	movs	r3, #32
 800453a:	e003      	b.n	8004544 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800453c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	3301      	adds	r3, #1
 8004546:	069b      	lsls	r3, r3, #26
 8004548:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004554:	2b00      	cmp	r3, #0
 8004556:	d109      	bne.n	800456c <HAL_ADC_ConfigChannel+0x340>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	0e9b      	lsrs	r3, r3, #26
 800455e:	3301      	adds	r3, #1
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	2101      	movs	r1, #1
 8004566:	fa01 f303 	lsl.w	r3, r1, r3
 800456a:	e017      	b.n	800459c <HAL_ADC_ConfigChannel+0x370>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004574:	fa93 f3a3 	rbit	r3, r3
 8004578:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800457a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800457e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004584:	2320      	movs	r3, #32
 8004586:	e003      	b.n	8004590 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	3301      	adds	r3, #1
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	2101      	movs	r1, #1
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	ea42 0103 	orr.w	r1, r2, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10a      	bne.n	80045c2 <HAL_ADC_ConfigChannel+0x396>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0e9b      	lsrs	r3, r3, #26
 80045b2:	3301      	adds	r3, #1
 80045b4:	f003 021f 	and.w	r2, r3, #31
 80045b8:	4613      	mov	r3, r2
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	4413      	add	r3, r2
 80045be:	051b      	lsls	r3, r3, #20
 80045c0:	e018      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x3c8>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ca:	fa93 f3a3 	rbit	r3, r3
 80045ce:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80045d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80045da:	2320      	movs	r3, #32
 80045dc:	e003      	b.n	80045e6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80045de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e0:	fab3 f383 	clz	r3, r3
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	3301      	adds	r3, #1
 80045e8:	f003 021f 	and.w	r2, r3, #31
 80045ec:	4613      	mov	r3, r2
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	4413      	add	r3, r2
 80045f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045f4:	430b      	orrs	r3, r1
 80045f6:	e07e      	b.n	80046f6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004600:	2b00      	cmp	r3, #0
 8004602:	d107      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x3e8>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	0e9b      	lsrs	r3, r3, #26
 800460a:	3301      	adds	r3, #1
 800460c:	069b      	lsls	r3, r3, #26
 800460e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004612:	e015      	b.n	8004640 <HAL_ADC_ConfigChannel+0x414>
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461c:	fa93 f3a3 	rbit	r3, r3
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800462c:	2320      	movs	r3, #32
 800462e:	e003      	b.n	8004638 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	3301      	adds	r3, #1
 800463a:	069b      	lsls	r3, r3, #26
 800463c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x434>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	0e9b      	lsrs	r3, r3, #26
 8004652:	3301      	adds	r3, #1
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	e017      	b.n	8004690 <HAL_ADC_ConfigChannel+0x464>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	61bb      	str	r3, [r7, #24]
  return result;
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004678:	2320      	movs	r3, #32
 800467a:	e003      	b.n	8004684 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	3301      	adds	r3, #1
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	2101      	movs	r1, #1
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	ea42 0103 	orr.w	r1, r2, r3
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10d      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x490>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	0e9b      	lsrs	r3, r3, #26
 80046a6:	3301      	adds	r3, #1
 80046a8:	f003 021f 	and.w	r2, r3, #31
 80046ac:	4613      	mov	r3, r2
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	4413      	add	r3, r2
 80046b2:	3b1e      	subs	r3, #30
 80046b4:	051b      	lsls	r3, r3, #20
 80046b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046ba:	e01b      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x4c8>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	60fb      	str	r3, [r7, #12]
  return result;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80046d4:	2320      	movs	r3, #32
 80046d6:	e003      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	f003 021f 	and.w	r2, r3, #31
 80046e6:	4613      	mov	r3, r2
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	4413      	add	r3, r2
 80046ec:	3b1e      	subs	r3, #30
 80046ee:	051b      	lsls	r3, r3, #20
 80046f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046f4:	430b      	orrs	r3, r1
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	6892      	ldr	r2, [r2, #8]
 80046fa:	4619      	mov	r1, r3
 80046fc:	f7ff f9de 	bl	8003abc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	f280 80cf 	bge.w	80048a8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a06      	ldr	r2, [pc, #24]	; (8004728 <HAL_ADC_ConfigChannel+0x4fc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_ADC_ConfigChannel+0x4f2>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a04      	ldr	r2, [pc, #16]	; (800472c <HAL_ADC_ConfigChannel+0x500>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d10a      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x508>
 800471e:	4b04      	ldr	r3, [pc, #16]	; (8004730 <HAL_ADC_ConfigChannel+0x504>)
 8004720:	e009      	b.n	8004736 <HAL_ADC_ConfigChannel+0x50a>
 8004722:	bf00      	nop
 8004724:	47ff0000 	.word	0x47ff0000
 8004728:	40022000 	.word	0x40022000
 800472c:	40022100 	.word	0x40022100
 8004730:	40022300 	.word	0x40022300
 8004734:	4b61      	ldr	r3, [pc, #388]	; (80048bc <HAL_ADC_ConfigChannel+0x690>)
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff f90c 	bl	8003954 <LL_ADC_GetCommonPathInternalCh>
 800473c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a5f      	ldr	r2, [pc, #380]	; (80048c0 <HAL_ADC_ConfigChannel+0x694>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <HAL_ADC_ConfigChannel+0x526>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a5d      	ldr	r2, [pc, #372]	; (80048c4 <HAL_ADC_ConfigChannel+0x698>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d10e      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x544>
 8004752:	485b      	ldr	r0, [pc, #364]	; (80048c0 <HAL_ADC_ConfigChannel+0x694>)
 8004754:	f7ff fa86 	bl	8003c64 <LL_ADC_IsEnabled>
 8004758:	4604      	mov	r4, r0
 800475a:	485a      	ldr	r0, [pc, #360]	; (80048c4 <HAL_ADC_ConfigChannel+0x698>)
 800475c:	f7ff fa82 	bl	8003c64 <LL_ADC_IsEnabled>
 8004760:	4603      	mov	r3, r0
 8004762:	4323      	orrs	r3, r4
 8004764:	2b00      	cmp	r3, #0
 8004766:	bf0c      	ite	eq
 8004768:	2301      	moveq	r3, #1
 800476a:	2300      	movne	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	e008      	b.n	8004782 <HAL_ADC_ConfigChannel+0x556>
 8004770:	4855      	ldr	r0, [pc, #340]	; (80048c8 <HAL_ADC_ConfigChannel+0x69c>)
 8004772:	f7ff fa77 	bl	8003c64 <LL_ADC_IsEnabled>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	bf0c      	ite	eq
 800477c:	2301      	moveq	r3, #1
 800477e:	2300      	movne	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d07d      	beq.n	8004882 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a50      	ldr	r2, [pc, #320]	; (80048cc <HAL_ADC_ConfigChannel+0x6a0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d130      	bne.n	80047f2 <HAL_ADC_ConfigChannel+0x5c6>
 8004790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d12b      	bne.n	80047f2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a4a      	ldr	r2, [pc, #296]	; (80048c8 <HAL_ADC_ConfigChannel+0x69c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	f040 8081 	bne.w	80048a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a45      	ldr	r2, [pc, #276]	; (80048c0 <HAL_ADC_ConfigChannel+0x694>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <HAL_ADC_ConfigChannel+0x58e>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a43      	ldr	r2, [pc, #268]	; (80048c4 <HAL_ADC_ConfigChannel+0x698>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <HAL_ADC_ConfigChannel+0x592>
 80047ba:	4a45      	ldr	r2, [pc, #276]	; (80048d0 <HAL_ADC_ConfigChannel+0x6a4>)
 80047bc:	e000      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x594>
 80047be:	4a3f      	ldr	r2, [pc, #252]	; (80048bc <HAL_ADC_ConfigChannel+0x690>)
 80047c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f7ff f8b0 	bl	800392e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80047ce:	4b41      	ldr	r3, [pc, #260]	; (80048d4 <HAL_ADC_ConfigChannel+0x6a8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	099b      	lsrs	r3, r3, #6
 80047d4:	4a40      	ldr	r2, [pc, #256]	; (80048d8 <HAL_ADC_ConfigChannel+0x6ac>)
 80047d6:	fba2 2303 	umull	r2, r3, r2, r3
 80047da:	099b      	lsrs	r3, r3, #6
 80047dc:	3301      	adds	r3, #1
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80047e2:	e002      	b.n	80047ea <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f9      	bne.n	80047e4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047f0:	e05a      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a39      	ldr	r2, [pc, #228]	; (80048dc <HAL_ADC_ConfigChannel+0x6b0>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d11e      	bne.n	800483a <HAL_ADC_ConfigChannel+0x60e>
 80047fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d119      	bne.n	800483a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a2f      	ldr	r2, [pc, #188]	; (80048c8 <HAL_ADC_ConfigChannel+0x69c>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d14b      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a2a      	ldr	r2, [pc, #168]	; (80048c0 <HAL_ADC_ConfigChannel+0x694>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d004      	beq.n	8004824 <HAL_ADC_ConfigChannel+0x5f8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a29      	ldr	r2, [pc, #164]	; (80048c4 <HAL_ADC_ConfigChannel+0x698>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d101      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x5fc>
 8004824:	4a2a      	ldr	r2, [pc, #168]	; (80048d0 <HAL_ADC_ConfigChannel+0x6a4>)
 8004826:	e000      	b.n	800482a <HAL_ADC_ConfigChannel+0x5fe>
 8004828:	4a24      	ldr	r2, [pc, #144]	; (80048bc <HAL_ADC_ConfigChannel+0x690>)
 800482a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f7ff f87b 	bl	800392e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004838:	e036      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a28      	ldr	r2, [pc, #160]	; (80048e0 <HAL_ADC_ConfigChannel+0x6b4>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d131      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x67c>
 8004844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d12c      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <HAL_ADC_ConfigChannel+0x69c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d127      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <HAL_ADC_ConfigChannel+0x694>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <HAL_ADC_ConfigChannel+0x640>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <HAL_ADC_ConfigChannel+0x698>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d101      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x644>
 800486c:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <HAL_ADC_ConfigChannel+0x6a4>)
 800486e:	e000      	b.n	8004872 <HAL_ADC_ConfigChannel+0x646>
 8004870:	4a12      	ldr	r2, [pc, #72]	; (80048bc <HAL_ADC_ConfigChannel+0x690>)
 8004872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004878:	4619      	mov	r1, r3
 800487a:	4610      	mov	r0, r2
 800487c:	f7ff f857 	bl	800392e <LL_ADC_SetCommonPathInternalCh>
 8004880:	e012      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004886:	f043 0220 	orr.w	r2, r3, #32
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004894:	e008      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489a:	f043 0220 	orr.w	r2, r3, #32
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80048b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3784      	adds	r7, #132	; 0x84
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd90      	pop	{r4, r7, pc}
 80048bc:	58026300 	.word	0x58026300
 80048c0:	40022000 	.word	0x40022000
 80048c4:	40022100 	.word	0x40022100
 80048c8:	58026000 	.word	0x58026000
 80048cc:	cb840000 	.word	0xcb840000
 80048d0:	40022300 	.word	0x40022300
 80048d4:	24000088 	.word	0x24000088
 80048d8:	053e2d63 	.word	0x053e2d63
 80048dc:	c7520000 	.word	0xc7520000
 80048e0:	cfb80000 	.word	0xcfb80000

080048e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff f9b7 	bl	8003c64 <LL_ADC_IsEnabled>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d16e      	bne.n	80049da <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	4b38      	ldr	r3, [pc, #224]	; (80049e4 <ADC_Enable+0x100>)
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00d      	beq.n	8004926 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490e:	f043 0210 	orr.w	r2, r3, #16
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491a:	f043 0201 	orr.w	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e05a      	b.n	80049dc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff f972 	bl	8003c14 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004930:	f7fe ffbc 	bl	80038ac <HAL_GetTick>
 8004934:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a2b      	ldr	r2, [pc, #172]	; (80049e8 <ADC_Enable+0x104>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <ADC_Enable+0x66>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a29      	ldr	r2, [pc, #164]	; (80049ec <ADC_Enable+0x108>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d101      	bne.n	800494e <ADC_Enable+0x6a>
 800494a:	4b29      	ldr	r3, [pc, #164]	; (80049f0 <ADC_Enable+0x10c>)
 800494c:	e000      	b.n	8004950 <ADC_Enable+0x6c>
 800494e:	4b29      	ldr	r3, [pc, #164]	; (80049f4 <ADC_Enable+0x110>)
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff f903 	bl	8003b5c <LL_ADC_GetMultimode>
 8004956:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a23      	ldr	r2, [pc, #140]	; (80049ec <ADC_Enable+0x108>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d002      	beq.n	8004968 <ADC_Enable+0x84>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	e000      	b.n	800496a <ADC_Enable+0x86>
 8004968:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <ADC_Enable+0x104>)
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6812      	ldr	r2, [r2, #0]
 800496e:	4293      	cmp	r3, r2
 8004970:	d02c      	beq.n	80049cc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d130      	bne.n	80049da <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004978:	e028      	b.n	80049cc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff f970 	bl	8003c64 <LL_ADC_IsEnabled>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff f940 	bl	8003c14 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004994:	f7fe ff8a 	bl	80038ac <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d914      	bls.n	80049cc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d00d      	beq.n	80049cc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b4:	f043 0210 	orr.w	r2, r3, #16
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c0:	f043 0201 	orr.w	r2, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e007      	b.n	80049dc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d1cf      	bne.n	800497a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	8000003f 	.word	0x8000003f
 80049e8:	40022000 	.word	0x40022000
 80049ec:	40022100 	.word	0x40022100
 80049f0:	40022300 	.word	0x40022300
 80049f4:	58026300 	.word	0x58026300

080049f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff f940 	bl	8003c8a <LL_ADC_IsDisableOngoing>
 8004a0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff f927 	bl	8003c64 <LL_ADC_IsEnabled>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d047      	beq.n	8004aac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d144      	bne.n	8004aac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 030d 	and.w	r3, r3, #13
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d10c      	bne.n	8004a4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff f901 	bl	8003c3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a42:	f7fe ff33 	bl	80038ac <HAL_GetTick>
 8004a46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a48:	e029      	b.n	8004a9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f043 0210 	orr.w	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5a:	f043 0201 	orr.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e023      	b.n	8004aae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004a66:	f7fe ff21 	bl	80038ac <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d914      	bls.n	8004a9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00d      	beq.n	8004a9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a86:	f043 0210 	orr.w	r2, r3, #16
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a92:	f043 0201 	orr.w	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e007      	b.n	8004aae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1dc      	bne.n	8004a66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d14b      	bne.n	8004b68 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d021      	beq.n	8004b2e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fe ff92 	bl	8003a18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d032      	beq.n	8004b60 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d12b      	bne.n	8004b60 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d11f      	bne.n	8004b60 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b24:	f043 0201 	orr.w	r2, r3, #1
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54
 8004b2c:	e018      	b.n	8004b60 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d111      	bne.n	8004b60 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b58:	f043 0201 	orr.w	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff fb45 	bl	80041f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b66:	e00e      	b.n	8004b86 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7ff fb4f 	bl	8004218 <HAL_ADC_ErrorCallback>
}
 8004b7a:	e004      	b.n	8004b86 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	4798      	blx	r3
}
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7ff fb31 	bl	8004204 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ba2:	bf00      	nop
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc8:	f043 0204 	orr.w	r2, r3, #4
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f7ff fb21 	bl	8004218 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bd6:	bf00      	nop
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a7a      	ldr	r2, [pc, #488]	; (8004dd8 <ADC_ConfigureBoostMode+0x1f8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <ADC_ConfigureBoostMode+0x1c>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a79      	ldr	r2, [pc, #484]	; (8004ddc <ADC_ConfigureBoostMode+0x1fc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d109      	bne.n	8004c10 <ADC_ConfigureBoostMode+0x30>
 8004bfc:	4b78      	ldr	r3, [pc, #480]	; (8004de0 <ADC_ConfigureBoostMode+0x200>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf14      	ite	ne
 8004c08:	2301      	movne	r3, #1
 8004c0a:	2300      	moveq	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	e008      	b.n	8004c22 <ADC_ConfigureBoostMode+0x42>
 8004c10:	4b74      	ldr	r3, [pc, #464]	; (8004de4 <ADC_ConfigureBoostMode+0x204>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bf14      	ite	ne
 8004c1c:	2301      	movne	r3, #1
 8004c1e:	2300      	moveq	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01c      	beq.n	8004c60 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004c26:	f005 fd33 	bl	800a690 <HAL_RCC_GetHCLKFreq>
 8004c2a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c34:	d010      	beq.n	8004c58 <ADC_ConfigureBoostMode+0x78>
 8004c36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c3a:	d873      	bhi.n	8004d24 <ADC_ConfigureBoostMode+0x144>
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c40:	d002      	beq.n	8004c48 <ADC_ConfigureBoostMode+0x68>
 8004c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c46:	d16d      	bne.n	8004d24 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	0c1b      	lsrs	r3, r3, #16
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	60fb      	str	r3, [r7, #12]
        break;
 8004c56:	e068      	b.n	8004d2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	089b      	lsrs	r3, r3, #2
 8004c5c:	60fb      	str	r3, [r7, #12]
        break;
 8004c5e:	e064      	b.n	8004d2a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004c60:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004c64:	f04f 0100 	mov.w	r1, #0
 8004c68:	f006 ffba 	bl	800bbe0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c6c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004c76:	d051      	beq.n	8004d1c <ADC_ConfigureBoostMode+0x13c>
 8004c78:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004c7c:	d854      	bhi.n	8004d28 <ADC_ConfigureBoostMode+0x148>
 8004c7e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004c82:	d047      	beq.n	8004d14 <ADC_ConfigureBoostMode+0x134>
 8004c84:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004c88:	d84e      	bhi.n	8004d28 <ADC_ConfigureBoostMode+0x148>
 8004c8a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c8e:	d03d      	beq.n	8004d0c <ADC_ConfigureBoostMode+0x12c>
 8004c90:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004c94:	d848      	bhi.n	8004d28 <ADC_ConfigureBoostMode+0x148>
 8004c96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c9a:	d033      	beq.n	8004d04 <ADC_ConfigureBoostMode+0x124>
 8004c9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ca0:	d842      	bhi.n	8004d28 <ADC_ConfigureBoostMode+0x148>
 8004ca2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ca6:	d029      	beq.n	8004cfc <ADC_ConfigureBoostMode+0x11c>
 8004ca8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004cac:	d83c      	bhi.n	8004d28 <ADC_ConfigureBoostMode+0x148>
 8004cae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004cb2:	d01a      	beq.n	8004cea <ADC_ConfigureBoostMode+0x10a>
 8004cb4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004cb8:	d836      	bhi.n	8004d28 <ADC_ConfigureBoostMode+0x148>
 8004cba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004cbe:	d014      	beq.n	8004cea <ADC_ConfigureBoostMode+0x10a>
 8004cc0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004cc4:	d830      	bhi.n	8004d28 <ADC_ConfigureBoostMode+0x148>
 8004cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cca:	d00e      	beq.n	8004cea <ADC_ConfigureBoostMode+0x10a>
 8004ccc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cd0:	d82a      	bhi.n	8004d28 <ADC_ConfigureBoostMode+0x148>
 8004cd2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004cd6:	d008      	beq.n	8004cea <ADC_ConfigureBoostMode+0x10a>
 8004cd8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004cdc:	d824      	bhi.n	8004d28 <ADC_ConfigureBoostMode+0x148>
 8004cde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ce2:	d002      	beq.n	8004cea <ADC_ConfigureBoostMode+0x10a>
 8004ce4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ce8:	d11e      	bne.n	8004d28 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	0c9b      	lsrs	r3, r3, #18
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	60fb      	str	r3, [r7, #12]
        break;
 8004cfa:	e016      	b.n	8004d2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	091b      	lsrs	r3, r3, #4
 8004d00:	60fb      	str	r3, [r7, #12]
        break;
 8004d02:	e012      	b.n	8004d2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	60fb      	str	r3, [r7, #12]
        break;
 8004d0a:	e00e      	b.n	8004d2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	099b      	lsrs	r3, r3, #6
 8004d10:	60fb      	str	r3, [r7, #12]
        break;
 8004d12:	e00a      	b.n	8004d2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	09db      	lsrs	r3, r3, #7
 8004d18:	60fb      	str	r3, [r7, #12]
        break;
 8004d1a:	e006      	b.n	8004d2a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	0a1b      	lsrs	r3, r3, #8
 8004d20:	60fb      	str	r3, [r7, #12]
        break;
 8004d22:	e002      	b.n	8004d2a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004d24:	bf00      	nop
 8004d26:	e000      	b.n	8004d2a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004d28:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004d2a:	f7fe fdcb 	bl	80038c4 <HAL_GetREVID>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d815      	bhi.n	8004d64 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4a2b      	ldr	r2, [pc, #172]	; (8004de8 <ADC_ConfigureBoostMode+0x208>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d908      	bls.n	8004d52 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004d50:	e03e      	b.n	8004dd0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d60:	609a      	str	r2, [r3, #8]
}
 8004d62:	e035      	b.n	8004dd0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	085b      	lsrs	r3, r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a1f      	ldr	r2, [pc, #124]	; (8004dec <ADC_ConfigureBoostMode+0x20c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d808      	bhi.n	8004d84 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d80:	609a      	str	r2, [r3, #8]
}
 8004d82:	e025      	b.n	8004dd0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4a1a      	ldr	r2, [pc, #104]	; (8004df0 <ADC_ConfigureBoostMode+0x210>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d80a      	bhi.n	8004da2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d9e:	609a      	str	r2, [r3, #8]
}
 8004da0:	e016      	b.n	8004dd0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <ADC_ConfigureBoostMode+0x214>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d80a      	bhi.n	8004dc0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dbc:	609a      	str	r2, [r3, #8]
}
 8004dbe:	e007      	b.n	8004dd0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004dce:	609a      	str	r2, [r3, #8]
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40022000 	.word	0x40022000
 8004ddc:	40022100 	.word	0x40022100
 8004de0:	40022300 	.word	0x40022300
 8004de4:	58026300 	.word	0x58026300
 8004de8:	01312d00 	.word	0x01312d00
 8004dec:	005f5e10 	.word	0x005f5e10
 8004df0:	00bebc20 	.word	0x00bebc20
 8004df4:	017d7840 	.word	0x017d7840

08004df8 <LL_ADC_IsEnabled>:
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <LL_ADC_IsEnabled+0x18>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <LL_ADC_IsEnabled+0x1a>
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <LL_ADC_StartCalibration>:
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <LL_ADC_StartCalibration+0x38>)
 8004e32:	4013      	ands	r3, r2
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e40:	430a      	orrs	r2, r1
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	609a      	str	r2, [r3, #8]
}
 8004e4c:	bf00      	nop
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	3ffeffc0 	.word	0x3ffeffc0

08004e5c <LL_ADC_IsCalibrationOnGoing>:
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e70:	d101      	bne.n	8004e76 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <LL_ADC_REG_IsConversionOngoing>:
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d101      	bne.n	8004e9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e000      	b.n	8004e9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d101      	bne.n	8004eca <HAL_ADCEx_Calibration_Start+0x1e>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e04c      	b.n	8004f64 <HAL_ADCEx_Calibration_Start+0xb8>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7ff fd90 	bl	80049f8 <ADC_Disable>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d135      	bne.n	8004f4e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ee6:	4b21      	ldr	r3, [pc, #132]	; (8004f6c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	f043 0202 	orr.w	r2, r3, #2
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff ff90 	bl	8004e20 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f00:	e014      	b.n	8004f2c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	3301      	adds	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4a19      	ldr	r2, [pc, #100]	; (8004f70 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d30d      	bcc.n	8004f2c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f14:	f023 0312 	bic.w	r3, r3, #18
 8004f18:	f043 0210 	orr.w	r2, r3, #16
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e01b      	b.n	8004f64 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff ff93 	bl	8004e5c <LL_ADC_IsCalibrationOnGoing>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e2      	bne.n	8004f02 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f40:	f023 0303 	bic.w	r3, r3, #3
 8004f44:	f043 0201 	orr.w	r2, r3, #1
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54
 8004f4c:	e005      	b.n	8004f5a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f52:	f043 0210 	orr.w	r2, r3, #16
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	ffffeefd 	.word	0xffffeefd
 8004f70:	25c3f800 	.word	0x25c3f800

08004f74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004f74:	b590      	push	{r4, r7, lr}
 8004f76:	b09f      	sub	sp, #124	; 0x7c
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e0be      	b.n	8005110 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a5c      	ldr	r2, [pc, #368]	; (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d102      	bne.n	8004fb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004fac:	4b5b      	ldr	r3, [pc, #364]	; (800511c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	e001      	b.n	8004fb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10b      	bne.n	8004fd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	f043 0220 	orr.w	r2, r3, #32
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e09d      	b.n	8005110 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff ff54 	bl	8004e84 <LL_ADC_REG_IsConversionOngoing>
 8004fdc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff ff4e 	bl	8004e84 <LL_ADC_REG_IsConversionOngoing>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d17f      	bne.n	80050ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d17c      	bne.n	80050ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a47      	ldr	r2, [pc, #284]	; (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a46      	ldr	r2, [pc, #280]	; (800511c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d101      	bne.n	800500c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005008:	4b45      	ldr	r3, [pc, #276]	; (8005120 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800500a:	e000      	b.n	800500e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800500c:	4b45      	ldr	r3, [pc, #276]	; (8005124 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800500e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d039      	beq.n	800508c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	431a      	orrs	r2, r3
 8005026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005028:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a3a      	ldr	r2, [pc, #232]	; (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a38      	ldr	r2, [pc, #224]	; (800511c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d10e      	bne.n	800505c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800503e:	4836      	ldr	r0, [pc, #216]	; (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005040:	f7ff feda 	bl	8004df8 <LL_ADC_IsEnabled>
 8005044:	4604      	mov	r4, r0
 8005046:	4835      	ldr	r0, [pc, #212]	; (800511c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005048:	f7ff fed6 	bl	8004df8 <LL_ADC_IsEnabled>
 800504c:	4603      	mov	r3, r0
 800504e:	4323      	orrs	r3, r4
 8005050:	2b00      	cmp	r3, #0
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	e008      	b.n	800506e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800505c:	4832      	ldr	r0, [pc, #200]	; (8005128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800505e:	f7ff fecb 	bl	8004df8 <LL_ADC_IsEnabled>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d047      	beq.n	8005102 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	4b2d      	ldr	r3, [pc, #180]	; (800512c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005078:	4013      	ands	r3, r2
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	6811      	ldr	r1, [r2, #0]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	6892      	ldr	r2, [r2, #8]
 8005082:	430a      	orrs	r2, r1
 8005084:	431a      	orrs	r2, r3
 8005086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005088:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800508a:	e03a      	b.n	8005102 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800508c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005096:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d004      	beq.n	80050ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1d      	ldr	r2, [pc, #116]	; (800511c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d10e      	bne.n	80050ca <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80050ac:	481a      	ldr	r0, [pc, #104]	; (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80050ae:	f7ff fea3 	bl	8004df8 <LL_ADC_IsEnabled>
 80050b2:	4604      	mov	r4, r0
 80050b4:	4819      	ldr	r0, [pc, #100]	; (800511c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80050b6:	f7ff fe9f 	bl	8004df8 <LL_ADC_IsEnabled>
 80050ba:	4603      	mov	r3, r0
 80050bc:	4323      	orrs	r3, r4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bf0c      	ite	eq
 80050c2:	2301      	moveq	r3, #1
 80050c4:	2300      	movne	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	e008      	b.n	80050dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80050ca:	4817      	ldr	r0, [pc, #92]	; (8005128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80050cc:	f7ff fe94 	bl	8004df8 <LL_ADC_IsEnabled>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bf0c      	ite	eq
 80050d6:	2301      	moveq	r3, #1
 80050d8:	2300      	movne	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d010      	beq.n	8005102 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	4b11      	ldr	r3, [pc, #68]	; (800512c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050ea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050ec:	e009      	b.n	8005102 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005100:	e000      	b.n	8005104 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005102:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800510c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005110:	4618      	mov	r0, r3
 8005112:	377c      	adds	r7, #124	; 0x7c
 8005114:	46bd      	mov	sp, r7
 8005116:	bd90      	pop	{r4, r7, pc}
 8005118:	40022000 	.word	0x40022000
 800511c:	40022100 	.word	0x40022100
 8005120:	40022300 	.word	0x40022300
 8005124:	58026300 	.word	0x58026300
 8005128:	58026000 	.word	0x58026000
 800512c:	fffff0e0 	.word	0xfffff0e0

08005130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <__NVIC_SetPriorityGrouping+0x40>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800514c:	4013      	ands	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005158:	4b06      	ldr	r3, [pc, #24]	; (8005174 <__NVIC_SetPriorityGrouping+0x44>)
 800515a:	4313      	orrs	r3, r2
 800515c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800515e:	4a04      	ldr	r2, [pc, #16]	; (8005170 <__NVIC_SetPriorityGrouping+0x40>)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	60d3      	str	r3, [r2, #12]
}
 8005164:	bf00      	nop
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	e000ed00 	.word	0xe000ed00
 8005174:	05fa0000 	.word	0x05fa0000

08005178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800517c:	4b04      	ldr	r3, [pc, #16]	; (8005190 <__NVIC_GetPriorityGrouping+0x18>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	0a1b      	lsrs	r3, r3, #8
 8005182:	f003 0307 	and.w	r3, r3, #7
}
 8005186:	4618      	mov	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	e000ed00 	.word	0xe000ed00

08005194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800519e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	db0b      	blt.n	80051be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	f003 021f 	and.w	r2, r3, #31
 80051ac:	4907      	ldr	r1, [pc, #28]	; (80051cc <__NVIC_EnableIRQ+0x38>)
 80051ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2001      	movs	r0, #1
 80051b6:	fa00 f202 	lsl.w	r2, r0, r2
 80051ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	e000e100 	.word	0xe000e100

080051d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	6039      	str	r1, [r7, #0]
 80051da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	db0a      	blt.n	80051fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	490c      	ldr	r1, [pc, #48]	; (800521c <__NVIC_SetPriority+0x4c>)
 80051ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ee:	0112      	lsls	r2, r2, #4
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	440b      	add	r3, r1
 80051f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051f8:	e00a      	b.n	8005210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	4908      	ldr	r1, [pc, #32]	; (8005220 <__NVIC_SetPriority+0x50>)
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	3b04      	subs	r3, #4
 8005208:	0112      	lsls	r2, r2, #4
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	440b      	add	r3, r1
 800520e:	761a      	strb	r2, [r3, #24]
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	e000e100 	.word	0xe000e100
 8005220:	e000ed00 	.word	0xe000ed00

08005224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005224:	b480      	push	{r7}
 8005226:	b089      	sub	sp, #36	; 0x24
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f1c3 0307 	rsb	r3, r3, #7
 800523e:	2b04      	cmp	r3, #4
 8005240:	bf28      	it	cs
 8005242:	2304      	movcs	r3, #4
 8005244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3304      	adds	r3, #4
 800524a:	2b06      	cmp	r3, #6
 800524c:	d902      	bls.n	8005254 <NVIC_EncodePriority+0x30>
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	3b03      	subs	r3, #3
 8005252:	e000      	b.n	8005256 <NVIC_EncodePriority+0x32>
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43da      	mvns	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	401a      	ands	r2, r3
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800526c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	fa01 f303 	lsl.w	r3, r1, r3
 8005276:	43d9      	mvns	r1, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800527c:	4313      	orrs	r3, r2
         );
}
 800527e:	4618      	mov	r0, r3
 8005280:	3724      	adds	r7, #36	; 0x24
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7ff ff4c 	bl	8005130 <__NVIC_SetPriorityGrouping>
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052ae:	f7ff ff63 	bl	8005178 <__NVIC_GetPriorityGrouping>
 80052b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	6978      	ldr	r0, [r7, #20]
 80052ba:	f7ff ffb3 	bl	8005224 <NVIC_EncodePriority>
 80052be:	4602      	mov	r2, r0
 80052c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052c4:	4611      	mov	r1, r2
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff ff82 	bl	80051d0 <__NVIC_SetPriority>
}
 80052cc:	bf00      	nop
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	4603      	mov	r3, r0
 80052dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff ff56 	bl	8005194 <__NVIC_EnableIRQ>
}
 80052e8:	bf00      	nop
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e014      	b.n	800532c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	791b      	ldrb	r3, [r3, #4]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d105      	bne.n	8005318 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fd fcdc 	bl	8002cd0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e046      	b.n	80053d6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	795b      	ldrb	r3, [r3, #5]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_DAC_Start+0x20>
 8005350:	2302      	movs	r3, #2
 8005352:	e040      	b.n	80053d6 <HAL_DAC_Start+0xa2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6819      	ldr	r1, [r3, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	f003 0310 	and.w	r3, r3, #16
 800536c:	2201      	movs	r2, #1
 800536e:	409a      	lsls	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10f      	bne.n	800539e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005388:	2b02      	cmp	r3, #2
 800538a:	d11d      	bne.n	80053c8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	e014      	b.n	80053c8 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	2102      	movs	r1, #2
 80053b0:	fa01 f303 	lsl.w	r3, r1, r3
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d107      	bne.n	80053c8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0202 	orr.w	r2, r2, #2
 80053c6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0a2      	b.n	8005542 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	795b      	ldrb	r3, [r3, #5]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_DAC_Start_DMA+0x24>
 8005404:	2302      	movs	r3, #2
 8005406:	e09c      	b.n	8005542 <HAL_DAC_Start_DMA+0x15e>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2201      	movs	r2, #1
 800540c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2202      	movs	r2, #2
 8005412:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d129      	bne.n	800546e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	4a4b      	ldr	r2, [pc, #300]	; (800554c <HAL_DAC_Start_DMA+0x168>)
 8005420:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	4a4a      	ldr	r2, [pc, #296]	; (8005550 <HAL_DAC_Start_DMA+0x16c>)
 8005428:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	4a49      	ldr	r2, [pc, #292]	; (8005554 <HAL_DAC_Start_DMA+0x170>)
 8005430:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005440:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_DAC_Start_DMA+0x6c>
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	2b04      	cmp	r3, #4
 800544c:	d005      	beq.n	800545a <HAL_DAC_Start_DMA+0x76>
 800544e:	e009      	b.n	8005464 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3308      	adds	r3, #8
 8005456:	613b      	str	r3, [r7, #16]
        break;
 8005458:	e033      	b.n	80054c2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	613b      	str	r3, [r7, #16]
        break;
 8005462:	e02e      	b.n	80054c2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3310      	adds	r3, #16
 800546a:	613b      	str	r3, [r7, #16]
        break;
 800546c:	e029      	b.n	80054c2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	4a39      	ldr	r2, [pc, #228]	; (8005558 <HAL_DAC_Start_DMA+0x174>)
 8005474:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	4a38      	ldr	r2, [pc, #224]	; (800555c <HAL_DAC_Start_DMA+0x178>)
 800547c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	4a37      	ldr	r2, [pc, #220]	; (8005560 <HAL_DAC_Start_DMA+0x17c>)
 8005484:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005494:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <HAL_DAC_Start_DMA+0xc0>
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d005      	beq.n	80054ae <HAL_DAC_Start_DMA+0xca>
 80054a2:	e009      	b.n	80054b8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3314      	adds	r3, #20
 80054aa:	613b      	str	r3, [r7, #16]
        break;
 80054ac:	e009      	b.n	80054c2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3318      	adds	r3, #24
 80054b4:	613b      	str	r3, [r7, #16]
        break;
 80054b6:	e004      	b.n	80054c2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	331c      	adds	r3, #28
 80054be:	613b      	str	r3, [r7, #16]
        break;
 80054c0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d111      	bne.n	80054ec <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6898      	ldr	r0, [r3, #8]
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	f000 fe67 	bl	80061b4 <HAL_DMA_Start_IT>
 80054e6:	4603      	mov	r3, r0
 80054e8:	75fb      	strb	r3, [r7, #23]
 80054ea:	e010      	b.n	800550e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80054fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	68d8      	ldr	r0, [r3, #12]
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	f000 fe55 	bl	80061b4 <HAL_DMA_Start_IT>
 800550a:	4603      	mov	r3, r0
 800550c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10c      	bne.n	8005534 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6819      	ldr	r1, [r3, #0]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2201      	movs	r2, #1
 8005528:	409a      	lsls	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e005      	b.n	8005540 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f043 0204 	orr.w	r2, r3, #4
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	080059d5 	.word	0x080059d5
 8005550:	080059f7 	.word	0x080059f7
 8005554:	08005a13 	.word	0x08005a13
 8005558:	08005a91 	.word	0x08005a91
 800555c:	08005ab3 	.word	0x08005ab3
 8005560:	08005acf 	.word	0x08005acf

08005564 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e03e      	b.n	80055f6 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6819      	ldr	r1, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	43da      	mvns	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	400a      	ands	r2, r1
 8005594:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6819      	ldr	r1, [r3, #0]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2201      	movs	r2, #1
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	43da      	mvns	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	400a      	ands	r2, r1
 80055b0:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10d      	bne.n	80055d4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 f863 	bl	8006688 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	e00c      	b.n	80055ee <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	4618      	mov	r0, r3
 80055da:	f001 f855 	bl	8006688 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80055ec:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005614:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01d      	beq.n	800565c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d018      	beq.n	800565c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2204      	movs	r2, #4
 800562e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f043 0201 	orr.w	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005644:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005654:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f86f 	bl	800573a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01d      	beq.n	80056a2 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d018      	beq.n	80056a2 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2204      	movs	r2, #4
 8005674:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f043 0202 	orr.w	r2, r3, #2
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800568a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800569a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f9ed 	bl	8005a7c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e015      	b.n	80056f2 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d105      	bne.n	80056de <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4413      	add	r3, r2
 80056d8:	3308      	adds	r3, #8
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e004      	b.n	80056e8 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4413      	add	r3, r2
 80056e4:	3314      	adds	r3, #20
 80056e6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	461a      	mov	r2, r3
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	; 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_DAC_ConfigChannel+0x1e>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e12a      	b.n	80059c8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	795b      	ldrb	r3, [r3, #5]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_DAC_ConfigChannel+0x2e>
 800577a:	2302      	movs	r3, #2
 800577c:	e124      	b.n	80059c8 <HAL_DAC_ConfigChannel+0x278>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2202      	movs	r2, #2
 8005788:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b04      	cmp	r3, #4
 8005790:	d17a      	bne.n	8005888 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005792:	f7fe f88b 	bl	80038ac <HAL_GetTick>
 8005796:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d13d      	bne.n	800581a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800579e:	e018      	b.n	80057d2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80057a0:	f7fe f884 	bl	80038ac <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d911      	bls.n	80057d2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b4:	4b86      	ldr	r3, [pc, #536]	; (80059d0 <HAL_DAC_ConfigChannel+0x280>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f043 0208 	orr.w	r2, r3, #8
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2203      	movs	r2, #3
 80057cc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e0fa      	b.n	80059c8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d8:	4b7d      	ldr	r3, [pc, #500]	; (80059d0 <HAL_DAC_ConfigChannel+0x280>)
 80057da:	4013      	ands	r3, r2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1df      	bne.n	80057a0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	6992      	ldr	r2, [r2, #24]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
 80057ea:	e020      	b.n	800582e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80057ec:	f7fe f85e 	bl	80038ac <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d90f      	bls.n	800581a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005800:	2b00      	cmp	r3, #0
 8005802:	da0a      	bge.n	800581a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f043 0208 	orr.w	r2, r3, #8
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2203      	movs	r2, #3
 8005814:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e0d6      	b.n	80059c8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005820:	2b00      	cmp	r3, #0
 8005822:	dbe3      	blt.n	80057ec <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	6992      	ldr	r2, [r2, #24]
 800582c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f003 0310 	and.w	r3, r3, #16
 800583a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800583e:	fa01 f303 	lsl.w	r3, r1, r3
 8005842:	43db      	mvns	r3, r3
 8005844:	ea02 0103 	and.w	r1, r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	409a      	lsls	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	430a      	orrs	r2, r1
 800585a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	21ff      	movs	r1, #255	; 0xff
 800586a:	fa01 f303 	lsl.w	r3, r1, r3
 800586e:	43db      	mvns	r3, r3
 8005870:	ea02 0103 	and.w	r1, r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	6a1a      	ldr	r2, [r3, #32]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f003 0310 	and.w	r3, r3, #16
 800587e:	409a      	lsls	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d11d      	bne.n	80058cc <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	221f      	movs	r2, #31
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	43db      	mvns	r3, r3
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	4013      	ands	r3, r2
 80058aa:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2207      	movs	r2, #7
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	43db      	mvns	r3, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d102      	bne.n	80058f6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
 80058f4:	e00f      	b.n	8005916 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d102      	bne.n	8005904 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80058fe:	2301      	movs	r3, #1
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
 8005902:	e008      	b.n	8005916 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d102      	bne.n	8005912 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800590c:	2301      	movs	r3, #1
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
 8005910:	e001      	b.n	8005916 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005912:	2300      	movs	r3, #0
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4313      	orrs	r3, r2
 8005920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	fa02 f303 	lsl.w	r3, r2, r3
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4313      	orrs	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6819      	ldr	r1, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	43da      	mvns	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	400a      	ands	r2, r1
 800595c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	4013      	ands	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	4313      	orrs	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6819      	ldr	r1, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	22c0      	movs	r2, #192	; 0xc0
 80059aa:	fa02 f303 	lsl.w	r3, r2, r3
 80059ae:	43da      	mvns	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	400a      	ands	r2, r1
 80059b6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80059c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3728      	adds	r7, #40	; 0x28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20008000 	.word	0x20008000

080059d4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff fe8b 	bl	80056fe <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	711a      	strb	r2, [r3, #4]
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a02:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff fe84 	bl	8005712 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005a0a:	bf00      	nop
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f043 0204 	orr.w	r2, r3, #4
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f7ff fe7a 	bl	8005726 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	711a      	strb	r2, [r3, #4]
}
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7ff ffce 	bl	8005a40 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	711a      	strb	r2, [r3, #4]
}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7ff ffc7 	bl	8005a54 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005ac6:	bf00      	nop
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	f043 0204 	orr.w	r2, r3, #4
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff ffbd 	bl	8005a68 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	711a      	strb	r2, [r3, #4]
}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005b04:	f7fd fed2 	bl	80038ac <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e316      	b.n	8006142 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a66      	ldr	r2, [pc, #408]	; (8005cb4 <HAL_DMA_Init+0x1b8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d04a      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a65      	ldr	r2, [pc, #404]	; (8005cb8 <HAL_DMA_Init+0x1bc>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d045      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a63      	ldr	r2, [pc, #396]	; (8005cbc <HAL_DMA_Init+0x1c0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d040      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a62      	ldr	r2, [pc, #392]	; (8005cc0 <HAL_DMA_Init+0x1c4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d03b      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a60      	ldr	r2, [pc, #384]	; (8005cc4 <HAL_DMA_Init+0x1c8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d036      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a5f      	ldr	r2, [pc, #380]	; (8005cc8 <HAL_DMA_Init+0x1cc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d031      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a5d      	ldr	r2, [pc, #372]	; (8005ccc <HAL_DMA_Init+0x1d0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d02c      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a5c      	ldr	r2, [pc, #368]	; (8005cd0 <HAL_DMA_Init+0x1d4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d027      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a5a      	ldr	r2, [pc, #360]	; (8005cd4 <HAL_DMA_Init+0x1d8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d022      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a59      	ldr	r2, [pc, #356]	; (8005cd8 <HAL_DMA_Init+0x1dc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d01d      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a57      	ldr	r2, [pc, #348]	; (8005cdc <HAL_DMA_Init+0x1e0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d018      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a56      	ldr	r2, [pc, #344]	; (8005ce0 <HAL_DMA_Init+0x1e4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d013      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a54      	ldr	r2, [pc, #336]	; (8005ce4 <HAL_DMA_Init+0x1e8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00e      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a53      	ldr	r2, [pc, #332]	; (8005ce8 <HAL_DMA_Init+0x1ec>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d009      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a51      	ldr	r2, [pc, #324]	; (8005cec <HAL_DMA_Init+0x1f0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <HAL_DMA_Init+0xb8>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a50      	ldr	r2, [pc, #320]	; (8005cf0 <HAL_DMA_Init+0x1f4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d101      	bne.n	8005bb8 <HAL_DMA_Init+0xbc>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <HAL_DMA_Init+0xbe>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f000 813b 	beq.w	8005e36 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a37      	ldr	r2, [pc, #220]	; (8005cb4 <HAL_DMA_Init+0x1b8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d04a      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a36      	ldr	r2, [pc, #216]	; (8005cb8 <HAL_DMA_Init+0x1bc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d045      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a34      	ldr	r2, [pc, #208]	; (8005cbc <HAL_DMA_Init+0x1c0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d040      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a33      	ldr	r2, [pc, #204]	; (8005cc0 <HAL_DMA_Init+0x1c4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d03b      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a31      	ldr	r2, [pc, #196]	; (8005cc4 <HAL_DMA_Init+0x1c8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d036      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a30      	ldr	r2, [pc, #192]	; (8005cc8 <HAL_DMA_Init+0x1cc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d031      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a2e      	ldr	r2, [pc, #184]	; (8005ccc <HAL_DMA_Init+0x1d0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d02c      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a2d      	ldr	r2, [pc, #180]	; (8005cd0 <HAL_DMA_Init+0x1d4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d027      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a2b      	ldr	r2, [pc, #172]	; (8005cd4 <HAL_DMA_Init+0x1d8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d022      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a2a      	ldr	r2, [pc, #168]	; (8005cd8 <HAL_DMA_Init+0x1dc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d01d      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a28      	ldr	r2, [pc, #160]	; (8005cdc <HAL_DMA_Init+0x1e0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d018      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a27      	ldr	r2, [pc, #156]	; (8005ce0 <HAL_DMA_Init+0x1e4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d013      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a25      	ldr	r2, [pc, #148]	; (8005ce4 <HAL_DMA_Init+0x1e8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00e      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a24      	ldr	r2, [pc, #144]	; (8005ce8 <HAL_DMA_Init+0x1ec>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d009      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a22      	ldr	r2, [pc, #136]	; (8005cec <HAL_DMA_Init+0x1f0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d004      	beq.n	8005c70 <HAL_DMA_Init+0x174>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a21      	ldr	r2, [pc, #132]	; (8005cf0 <HAL_DMA_Init+0x1f4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d108      	bne.n	8005c82 <HAL_DMA_Init+0x186>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	e007      	b.n	8005c92 <HAL_DMA_Init+0x196>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0201 	bic.w	r2, r2, #1
 8005c90:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c92:	e02f      	b.n	8005cf4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c94:	f7fd fe0a 	bl	80038ac <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	2b05      	cmp	r3, #5
 8005ca0:	d928      	bls.n	8005cf4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2203      	movs	r2, #3
 8005cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e246      	b.n	8006142 <HAL_DMA_Init+0x646>
 8005cb4:	40020010 	.word	0x40020010
 8005cb8:	40020028 	.word	0x40020028
 8005cbc:	40020040 	.word	0x40020040
 8005cc0:	40020058 	.word	0x40020058
 8005cc4:	40020070 	.word	0x40020070
 8005cc8:	40020088 	.word	0x40020088
 8005ccc:	400200a0 	.word	0x400200a0
 8005cd0:	400200b8 	.word	0x400200b8
 8005cd4:	40020410 	.word	0x40020410
 8005cd8:	40020428 	.word	0x40020428
 8005cdc:	40020440 	.word	0x40020440
 8005ce0:	40020458 	.word	0x40020458
 8005ce4:	40020470 	.word	0x40020470
 8005ce8:	40020488 	.word	0x40020488
 8005cec:	400204a0 	.word	0x400204a0
 8005cf0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1c8      	bne.n	8005c94 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4b83      	ldr	r3, [pc, #524]	; (8005f1c <HAL_DMA_Init+0x420>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005d1a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d26:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d32:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d107      	bne.n	8005d58 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	4313      	orrs	r3, r2
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005d58:	4b71      	ldr	r3, [pc, #452]	; (8005f20 <HAL_DMA_Init+0x424>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	4b71      	ldr	r3, [pc, #452]	; (8005f24 <HAL_DMA_Init+0x428>)
 8005d5e:	4013      	ands	r3, r2
 8005d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d64:	d328      	bcc.n	8005db8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b28      	cmp	r3, #40	; 0x28
 8005d6c:	d903      	bls.n	8005d76 <HAL_DMA_Init+0x27a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b2e      	cmp	r3, #46	; 0x2e
 8005d74:	d917      	bls.n	8005da6 <HAL_DMA_Init+0x2aa>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b3e      	cmp	r3, #62	; 0x3e
 8005d7c:	d903      	bls.n	8005d86 <HAL_DMA_Init+0x28a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b42      	cmp	r3, #66	; 0x42
 8005d84:	d90f      	bls.n	8005da6 <HAL_DMA_Init+0x2aa>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b46      	cmp	r3, #70	; 0x46
 8005d8c:	d903      	bls.n	8005d96 <HAL_DMA_Init+0x29a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b48      	cmp	r3, #72	; 0x48
 8005d94:	d907      	bls.n	8005da6 <HAL_DMA_Init+0x2aa>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b4e      	cmp	r3, #78	; 0x4e
 8005d9c:	d905      	bls.n	8005daa <HAL_DMA_Init+0x2ae>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b52      	cmp	r3, #82	; 0x52
 8005da4:	d801      	bhi.n	8005daa <HAL_DMA_Init+0x2ae>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <HAL_DMA_Init+0x2b0>
 8005daa:	2300      	movs	r3, #0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005db6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f023 0307 	bic.w	r3, r3, #7
 8005dce:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d117      	bne.n	8005e12 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00e      	beq.n	8005e12 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f002 fb33 	bl	8008460 <DMA_CheckFifoParam>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d008      	beq.n	8005e12 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2240      	movs	r2, #64	; 0x40
 8005e04:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e197      	b.n	8006142 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f002 fa6e 	bl	80082fc <DMA_CalcBaseAndBitshift>
 8005e20:	4603      	mov	r3, r0
 8005e22:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e28:	f003 031f 	and.w	r3, r3, #31
 8005e2c:	223f      	movs	r2, #63	; 0x3f
 8005e2e:	409a      	lsls	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	609a      	str	r2, [r3, #8]
 8005e34:	e0cd      	b.n	8005fd2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a3b      	ldr	r2, [pc, #236]	; (8005f28 <HAL_DMA_Init+0x42c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d022      	beq.n	8005e86 <HAL_DMA_Init+0x38a>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a39      	ldr	r2, [pc, #228]	; (8005f2c <HAL_DMA_Init+0x430>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d01d      	beq.n	8005e86 <HAL_DMA_Init+0x38a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a38      	ldr	r2, [pc, #224]	; (8005f30 <HAL_DMA_Init+0x434>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d018      	beq.n	8005e86 <HAL_DMA_Init+0x38a>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a36      	ldr	r2, [pc, #216]	; (8005f34 <HAL_DMA_Init+0x438>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d013      	beq.n	8005e86 <HAL_DMA_Init+0x38a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a35      	ldr	r2, [pc, #212]	; (8005f38 <HAL_DMA_Init+0x43c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00e      	beq.n	8005e86 <HAL_DMA_Init+0x38a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a33      	ldr	r2, [pc, #204]	; (8005f3c <HAL_DMA_Init+0x440>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d009      	beq.n	8005e86 <HAL_DMA_Init+0x38a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a32      	ldr	r2, [pc, #200]	; (8005f40 <HAL_DMA_Init+0x444>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_DMA_Init+0x38a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a30      	ldr	r2, [pc, #192]	; (8005f44 <HAL_DMA_Init+0x448>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d101      	bne.n	8005e8a <HAL_DMA_Init+0x38e>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <HAL_DMA_Init+0x390>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8097 	beq.w	8005fc0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a24      	ldr	r2, [pc, #144]	; (8005f28 <HAL_DMA_Init+0x42c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d021      	beq.n	8005ee0 <HAL_DMA_Init+0x3e4>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a22      	ldr	r2, [pc, #136]	; (8005f2c <HAL_DMA_Init+0x430>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d01c      	beq.n	8005ee0 <HAL_DMA_Init+0x3e4>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a21      	ldr	r2, [pc, #132]	; (8005f30 <HAL_DMA_Init+0x434>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d017      	beq.n	8005ee0 <HAL_DMA_Init+0x3e4>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a1f      	ldr	r2, [pc, #124]	; (8005f34 <HAL_DMA_Init+0x438>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d012      	beq.n	8005ee0 <HAL_DMA_Init+0x3e4>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a1e      	ldr	r2, [pc, #120]	; (8005f38 <HAL_DMA_Init+0x43c>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00d      	beq.n	8005ee0 <HAL_DMA_Init+0x3e4>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a1c      	ldr	r2, [pc, #112]	; (8005f3c <HAL_DMA_Init+0x440>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d008      	beq.n	8005ee0 <HAL_DMA_Init+0x3e4>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a1b      	ldr	r2, [pc, #108]	; (8005f40 <HAL_DMA_Init+0x444>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <HAL_DMA_Init+0x3e4>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a19      	ldr	r2, [pc, #100]	; (8005f44 <HAL_DMA_Init+0x448>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <HAL_DMA_Init+0x44c>)
 8005efe:	4013      	ands	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	2b40      	cmp	r3, #64	; 0x40
 8005f08:	d020      	beq.n	8005f4c <HAL_DMA_Init+0x450>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b80      	cmp	r3, #128	; 0x80
 8005f10:	d102      	bne.n	8005f18 <HAL_DMA_Init+0x41c>
 8005f12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f16:	e01a      	b.n	8005f4e <HAL_DMA_Init+0x452>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	e018      	b.n	8005f4e <HAL_DMA_Init+0x452>
 8005f1c:	fe10803f 	.word	0xfe10803f
 8005f20:	5c001000 	.word	0x5c001000
 8005f24:	ffff0000 	.word	0xffff0000
 8005f28:	58025408 	.word	0x58025408
 8005f2c:	5802541c 	.word	0x5802541c
 8005f30:	58025430 	.word	0x58025430
 8005f34:	58025444 	.word	0x58025444
 8005f38:	58025458 	.word	0x58025458
 8005f3c:	5802546c 	.word	0x5802546c
 8005f40:	58025480 	.word	0x58025480
 8005f44:	58025494 	.word	0x58025494
 8005f48:	fffe000f 	.word	0xfffe000f
 8005f4c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	68d2      	ldr	r2, [r2, #12]
 8005f52:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005f54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005f5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005f64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005f6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005f74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005f7c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	4b6e      	ldr	r3, [pc, #440]	; (800614c <HAL_DMA_Init+0x650>)
 8005f94:	4413      	add	r3, r2
 8005f96:	4a6e      	ldr	r2, [pc, #440]	; (8006150 <HAL_DMA_Init+0x654>)
 8005f98:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9c:	091b      	lsrs	r3, r3, #4
 8005f9e:	009a      	lsls	r2, r3, #2
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f002 f9a9 	bl	80082fc <DMA_CalcBaseAndBitshift>
 8005faa:	4603      	mov	r3, r0
 8005fac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	409a      	lsls	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	605a      	str	r2, [r3, #4]
 8005fbe:	e008      	b.n	8005fd2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2240      	movs	r2, #64	; 0x40
 8005fc4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2203      	movs	r2, #3
 8005fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e0b7      	b.n	8006142 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a5f      	ldr	r2, [pc, #380]	; (8006154 <HAL_DMA_Init+0x658>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d072      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a5d      	ldr	r2, [pc, #372]	; (8006158 <HAL_DMA_Init+0x65c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d06d      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a5c      	ldr	r2, [pc, #368]	; (800615c <HAL_DMA_Init+0x660>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d068      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a5a      	ldr	r2, [pc, #360]	; (8006160 <HAL_DMA_Init+0x664>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d063      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a59      	ldr	r2, [pc, #356]	; (8006164 <HAL_DMA_Init+0x668>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d05e      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a57      	ldr	r2, [pc, #348]	; (8006168 <HAL_DMA_Init+0x66c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d059      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a56      	ldr	r2, [pc, #344]	; (800616c <HAL_DMA_Init+0x670>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d054      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a54      	ldr	r2, [pc, #336]	; (8006170 <HAL_DMA_Init+0x674>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d04f      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a53      	ldr	r2, [pc, #332]	; (8006174 <HAL_DMA_Init+0x678>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d04a      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a51      	ldr	r2, [pc, #324]	; (8006178 <HAL_DMA_Init+0x67c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d045      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a50      	ldr	r2, [pc, #320]	; (800617c <HAL_DMA_Init+0x680>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d040      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a4e      	ldr	r2, [pc, #312]	; (8006180 <HAL_DMA_Init+0x684>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d03b      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a4d      	ldr	r2, [pc, #308]	; (8006184 <HAL_DMA_Init+0x688>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d036      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a4b      	ldr	r2, [pc, #300]	; (8006188 <HAL_DMA_Init+0x68c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d031      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a4a      	ldr	r2, [pc, #296]	; (800618c <HAL_DMA_Init+0x690>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d02c      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a48      	ldr	r2, [pc, #288]	; (8006190 <HAL_DMA_Init+0x694>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d027      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a47      	ldr	r2, [pc, #284]	; (8006194 <HAL_DMA_Init+0x698>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d022      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a45      	ldr	r2, [pc, #276]	; (8006198 <HAL_DMA_Init+0x69c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d01d      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a44      	ldr	r2, [pc, #272]	; (800619c <HAL_DMA_Init+0x6a0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d018      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a42      	ldr	r2, [pc, #264]	; (80061a0 <HAL_DMA_Init+0x6a4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d013      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a41      	ldr	r2, [pc, #260]	; (80061a4 <HAL_DMA_Init+0x6a8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00e      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a3f      	ldr	r2, [pc, #252]	; (80061a8 <HAL_DMA_Init+0x6ac>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d009      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a3e      	ldr	r2, [pc, #248]	; (80061ac <HAL_DMA_Init+0x6b0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d004      	beq.n	80060c2 <HAL_DMA_Init+0x5c6>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a3c      	ldr	r2, [pc, #240]	; (80061b0 <HAL_DMA_Init+0x6b4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d101      	bne.n	80060c6 <HAL_DMA_Init+0x5ca>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <HAL_DMA_Init+0x5cc>
 80060c6:	2300      	movs	r3, #0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d032      	beq.n	8006132 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f002 fa43 	bl	8008558 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b80      	cmp	r3, #128	; 0x80
 80060d8:	d102      	bne.n	80060e0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80060f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d010      	beq.n	8006120 <HAL_DMA_Init+0x624>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b08      	cmp	r3, #8
 8006104:	d80c      	bhi.n	8006120 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f002 fac0 	bl	800868c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800611c:	605a      	str	r2, [r3, #4]
 800611e:	e008      	b.n	8006132 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	a7fdabf8 	.word	0xa7fdabf8
 8006150:	cccccccd 	.word	0xcccccccd
 8006154:	40020010 	.word	0x40020010
 8006158:	40020028 	.word	0x40020028
 800615c:	40020040 	.word	0x40020040
 8006160:	40020058 	.word	0x40020058
 8006164:	40020070 	.word	0x40020070
 8006168:	40020088 	.word	0x40020088
 800616c:	400200a0 	.word	0x400200a0
 8006170:	400200b8 	.word	0x400200b8
 8006174:	40020410 	.word	0x40020410
 8006178:	40020428 	.word	0x40020428
 800617c:	40020440 	.word	0x40020440
 8006180:	40020458 	.word	0x40020458
 8006184:	40020470 	.word	0x40020470
 8006188:	40020488 	.word	0x40020488
 800618c:	400204a0 	.word	0x400204a0
 8006190:	400204b8 	.word	0x400204b8
 8006194:	58025408 	.word	0x58025408
 8006198:	5802541c 	.word	0x5802541c
 800619c:	58025430 	.word	0x58025430
 80061a0:	58025444 	.word	0x58025444
 80061a4:	58025458 	.word	0x58025458
 80061a8:	5802546c 	.word	0x5802546c
 80061ac:	58025480 	.word	0x58025480
 80061b0:	58025494 	.word	0x58025494

080061b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d101      	bne.n	80061d0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e226      	b.n	800661e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_DMA_Start_IT+0x2a>
 80061da:	2302      	movs	r3, #2
 80061dc:	e21f      	b.n	800661e <HAL_DMA_Start_IT+0x46a>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	f040 820a 	bne.w	8006608 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a68      	ldr	r2, [pc, #416]	; (80063a8 <HAL_DMA_Start_IT+0x1f4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d04a      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a66      	ldr	r2, [pc, #408]	; (80063ac <HAL_DMA_Start_IT+0x1f8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d045      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a65      	ldr	r2, [pc, #404]	; (80063b0 <HAL_DMA_Start_IT+0x1fc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d040      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a63      	ldr	r2, [pc, #396]	; (80063b4 <HAL_DMA_Start_IT+0x200>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d03b      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a62      	ldr	r2, [pc, #392]	; (80063b8 <HAL_DMA_Start_IT+0x204>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d036      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a60      	ldr	r2, [pc, #384]	; (80063bc <HAL_DMA_Start_IT+0x208>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d031      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a5f      	ldr	r2, [pc, #380]	; (80063c0 <HAL_DMA_Start_IT+0x20c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d02c      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a5d      	ldr	r2, [pc, #372]	; (80063c4 <HAL_DMA_Start_IT+0x210>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d027      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a5c      	ldr	r2, [pc, #368]	; (80063c8 <HAL_DMA_Start_IT+0x214>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d022      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a5a      	ldr	r2, [pc, #360]	; (80063cc <HAL_DMA_Start_IT+0x218>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01d      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a59      	ldr	r2, [pc, #356]	; (80063d0 <HAL_DMA_Start_IT+0x21c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d018      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a57      	ldr	r2, [pc, #348]	; (80063d4 <HAL_DMA_Start_IT+0x220>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a56      	ldr	r2, [pc, #344]	; (80063d8 <HAL_DMA_Start_IT+0x224>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00e      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a54      	ldr	r2, [pc, #336]	; (80063dc <HAL_DMA_Start_IT+0x228>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a53      	ldr	r2, [pc, #332]	; (80063e0 <HAL_DMA_Start_IT+0x22c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_DMA_Start_IT+0xee>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a51      	ldr	r2, [pc, #324]	; (80063e4 <HAL_DMA_Start_IT+0x230>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d108      	bne.n	80062b4 <HAL_DMA_Start_IT+0x100>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0201 	bic.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	e007      	b.n	80062c4 <HAL_DMA_Start_IT+0x110>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0201 	bic.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f001 fe6a 	bl	8007fa4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a34      	ldr	r2, [pc, #208]	; (80063a8 <HAL_DMA_Start_IT+0x1f4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d04a      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a33      	ldr	r2, [pc, #204]	; (80063ac <HAL_DMA_Start_IT+0x1f8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d045      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a31      	ldr	r2, [pc, #196]	; (80063b0 <HAL_DMA_Start_IT+0x1fc>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d040      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a30      	ldr	r2, [pc, #192]	; (80063b4 <HAL_DMA_Start_IT+0x200>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d03b      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a2e      	ldr	r2, [pc, #184]	; (80063b8 <HAL_DMA_Start_IT+0x204>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d036      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a2d      	ldr	r2, [pc, #180]	; (80063bc <HAL_DMA_Start_IT+0x208>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d031      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a2b      	ldr	r2, [pc, #172]	; (80063c0 <HAL_DMA_Start_IT+0x20c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d02c      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a2a      	ldr	r2, [pc, #168]	; (80063c4 <HAL_DMA_Start_IT+0x210>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d027      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a28      	ldr	r2, [pc, #160]	; (80063c8 <HAL_DMA_Start_IT+0x214>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d022      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a27      	ldr	r2, [pc, #156]	; (80063cc <HAL_DMA_Start_IT+0x218>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d01d      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a25      	ldr	r2, [pc, #148]	; (80063d0 <HAL_DMA_Start_IT+0x21c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d018      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a24      	ldr	r2, [pc, #144]	; (80063d4 <HAL_DMA_Start_IT+0x220>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d013      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a22      	ldr	r2, [pc, #136]	; (80063d8 <HAL_DMA_Start_IT+0x224>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00e      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a21      	ldr	r2, [pc, #132]	; (80063dc <HAL_DMA_Start_IT+0x228>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d009      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a1f      	ldr	r2, [pc, #124]	; (80063e0 <HAL_DMA_Start_IT+0x22c>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_DMA_Start_IT+0x1bc>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1e      	ldr	r2, [pc, #120]	; (80063e4 <HAL_DMA_Start_IT+0x230>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d101      	bne.n	8006374 <HAL_DMA_Start_IT+0x1c0>
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <HAL_DMA_Start_IT+0x1c2>
 8006374:	2300      	movs	r3, #0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d036      	beq.n	80063e8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f023 021e 	bic.w	r2, r3, #30
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0216 	orr.w	r2, r2, #22
 800638c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	2b00      	cmp	r3, #0
 8006394:	d03e      	beq.n	8006414 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f042 0208 	orr.w	r2, r2, #8
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	e035      	b.n	8006414 <HAL_DMA_Start_IT+0x260>
 80063a8:	40020010 	.word	0x40020010
 80063ac:	40020028 	.word	0x40020028
 80063b0:	40020040 	.word	0x40020040
 80063b4:	40020058 	.word	0x40020058
 80063b8:	40020070 	.word	0x40020070
 80063bc:	40020088 	.word	0x40020088
 80063c0:	400200a0 	.word	0x400200a0
 80063c4:	400200b8 	.word	0x400200b8
 80063c8:	40020410 	.word	0x40020410
 80063cc:	40020428 	.word	0x40020428
 80063d0:	40020440 	.word	0x40020440
 80063d4:	40020458 	.word	0x40020458
 80063d8:	40020470 	.word	0x40020470
 80063dc:	40020488 	.word	0x40020488
 80063e0:	400204a0 	.word	0x400204a0
 80063e4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 020e 	bic.w	r2, r3, #14
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 020a 	orr.w	r2, r2, #10
 80063fa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	2b00      	cmp	r3, #0
 8006402:	d007      	beq.n	8006414 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0204 	orr.w	r2, r2, #4
 8006412:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a83      	ldr	r2, [pc, #524]	; (8006628 <HAL_DMA_Start_IT+0x474>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d072      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a82      	ldr	r2, [pc, #520]	; (800662c <HAL_DMA_Start_IT+0x478>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d06d      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a80      	ldr	r2, [pc, #512]	; (8006630 <HAL_DMA_Start_IT+0x47c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d068      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a7f      	ldr	r2, [pc, #508]	; (8006634 <HAL_DMA_Start_IT+0x480>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d063      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a7d      	ldr	r2, [pc, #500]	; (8006638 <HAL_DMA_Start_IT+0x484>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d05e      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a7c      	ldr	r2, [pc, #496]	; (800663c <HAL_DMA_Start_IT+0x488>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d059      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a7a      	ldr	r2, [pc, #488]	; (8006640 <HAL_DMA_Start_IT+0x48c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d054      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a79      	ldr	r2, [pc, #484]	; (8006644 <HAL_DMA_Start_IT+0x490>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d04f      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a77      	ldr	r2, [pc, #476]	; (8006648 <HAL_DMA_Start_IT+0x494>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d04a      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a76      	ldr	r2, [pc, #472]	; (800664c <HAL_DMA_Start_IT+0x498>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d045      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a74      	ldr	r2, [pc, #464]	; (8006650 <HAL_DMA_Start_IT+0x49c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d040      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a73      	ldr	r2, [pc, #460]	; (8006654 <HAL_DMA_Start_IT+0x4a0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d03b      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a71      	ldr	r2, [pc, #452]	; (8006658 <HAL_DMA_Start_IT+0x4a4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d036      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a70      	ldr	r2, [pc, #448]	; (800665c <HAL_DMA_Start_IT+0x4a8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d031      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a6e      	ldr	r2, [pc, #440]	; (8006660 <HAL_DMA_Start_IT+0x4ac>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d02c      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a6d      	ldr	r2, [pc, #436]	; (8006664 <HAL_DMA_Start_IT+0x4b0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d027      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a6b      	ldr	r2, [pc, #428]	; (8006668 <HAL_DMA_Start_IT+0x4b4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d022      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a6a      	ldr	r2, [pc, #424]	; (800666c <HAL_DMA_Start_IT+0x4b8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d01d      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a68      	ldr	r2, [pc, #416]	; (8006670 <HAL_DMA_Start_IT+0x4bc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d018      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a67      	ldr	r2, [pc, #412]	; (8006674 <HAL_DMA_Start_IT+0x4c0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d013      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a65      	ldr	r2, [pc, #404]	; (8006678 <HAL_DMA_Start_IT+0x4c4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00e      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a64      	ldr	r2, [pc, #400]	; (800667c <HAL_DMA_Start_IT+0x4c8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d009      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a62      	ldr	r2, [pc, #392]	; (8006680 <HAL_DMA_Start_IT+0x4cc>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <HAL_DMA_Start_IT+0x350>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a61      	ldr	r2, [pc, #388]	; (8006684 <HAL_DMA_Start_IT+0x4d0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d101      	bne.n	8006508 <HAL_DMA_Start_IT+0x354>
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <HAL_DMA_Start_IT+0x356>
 8006508:	2300      	movs	r3, #0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d01a      	beq.n	8006544 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d007      	beq.n	800652c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006526:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800652a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d007      	beq.n	8006544 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800653e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006542:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a37      	ldr	r2, [pc, #220]	; (8006628 <HAL_DMA_Start_IT+0x474>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d04a      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a36      	ldr	r2, [pc, #216]	; (800662c <HAL_DMA_Start_IT+0x478>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d045      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a34      	ldr	r2, [pc, #208]	; (8006630 <HAL_DMA_Start_IT+0x47c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d040      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a33      	ldr	r2, [pc, #204]	; (8006634 <HAL_DMA_Start_IT+0x480>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d03b      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a31      	ldr	r2, [pc, #196]	; (8006638 <HAL_DMA_Start_IT+0x484>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d036      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a30      	ldr	r2, [pc, #192]	; (800663c <HAL_DMA_Start_IT+0x488>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d031      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a2e      	ldr	r2, [pc, #184]	; (8006640 <HAL_DMA_Start_IT+0x48c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d02c      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2d      	ldr	r2, [pc, #180]	; (8006644 <HAL_DMA_Start_IT+0x490>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d027      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a2b      	ldr	r2, [pc, #172]	; (8006648 <HAL_DMA_Start_IT+0x494>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d022      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a2a      	ldr	r2, [pc, #168]	; (800664c <HAL_DMA_Start_IT+0x498>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d01d      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a28      	ldr	r2, [pc, #160]	; (8006650 <HAL_DMA_Start_IT+0x49c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d018      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a27      	ldr	r2, [pc, #156]	; (8006654 <HAL_DMA_Start_IT+0x4a0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d013      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a25      	ldr	r2, [pc, #148]	; (8006658 <HAL_DMA_Start_IT+0x4a4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00e      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a24      	ldr	r2, [pc, #144]	; (800665c <HAL_DMA_Start_IT+0x4a8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d009      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a22      	ldr	r2, [pc, #136]	; (8006660 <HAL_DMA_Start_IT+0x4ac>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d004      	beq.n	80065e4 <HAL_DMA_Start_IT+0x430>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a21      	ldr	r2, [pc, #132]	; (8006664 <HAL_DMA_Start_IT+0x4b0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d108      	bne.n	80065f6 <HAL_DMA_Start_IT+0x442>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	e012      	b.n	800661c <HAL_DMA_Start_IT+0x468>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f042 0201 	orr.w	r2, r2, #1
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e009      	b.n	800661c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800660e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800661c:	7dfb      	ldrb	r3, [r7, #23]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40020010 	.word	0x40020010
 800662c:	40020028 	.word	0x40020028
 8006630:	40020040 	.word	0x40020040
 8006634:	40020058 	.word	0x40020058
 8006638:	40020070 	.word	0x40020070
 800663c:	40020088 	.word	0x40020088
 8006640:	400200a0 	.word	0x400200a0
 8006644:	400200b8 	.word	0x400200b8
 8006648:	40020410 	.word	0x40020410
 800664c:	40020428 	.word	0x40020428
 8006650:	40020440 	.word	0x40020440
 8006654:	40020458 	.word	0x40020458
 8006658:	40020470 	.word	0x40020470
 800665c:	40020488 	.word	0x40020488
 8006660:	400204a0 	.word	0x400204a0
 8006664:	400204b8 	.word	0x400204b8
 8006668:	58025408 	.word	0x58025408
 800666c:	5802541c 	.word	0x5802541c
 8006670:	58025430 	.word	0x58025430
 8006674:	58025444 	.word	0x58025444
 8006678:	58025458 	.word	0x58025458
 800667c:	5802546c 	.word	0x5802546c
 8006680:	58025480 	.word	0x58025480
 8006684:	58025494 	.word	0x58025494

08006688 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006690:	f7fd f90c 	bl	80038ac <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e2dc      	b.n	8006c5a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d008      	beq.n	80066be <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2280      	movs	r2, #128	; 0x80
 80066b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e2cd      	b.n	8006c5a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a76      	ldr	r2, [pc, #472]	; (800689c <HAL_DMA_Abort+0x214>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d04a      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a74      	ldr	r2, [pc, #464]	; (80068a0 <HAL_DMA_Abort+0x218>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d045      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a73      	ldr	r2, [pc, #460]	; (80068a4 <HAL_DMA_Abort+0x21c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d040      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a71      	ldr	r2, [pc, #452]	; (80068a8 <HAL_DMA_Abort+0x220>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d03b      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a70      	ldr	r2, [pc, #448]	; (80068ac <HAL_DMA_Abort+0x224>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d036      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a6e      	ldr	r2, [pc, #440]	; (80068b0 <HAL_DMA_Abort+0x228>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d031      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a6d      	ldr	r2, [pc, #436]	; (80068b4 <HAL_DMA_Abort+0x22c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d02c      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a6b      	ldr	r2, [pc, #428]	; (80068b8 <HAL_DMA_Abort+0x230>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d027      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a6a      	ldr	r2, [pc, #424]	; (80068bc <HAL_DMA_Abort+0x234>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d022      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a68      	ldr	r2, [pc, #416]	; (80068c0 <HAL_DMA_Abort+0x238>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d01d      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a67      	ldr	r2, [pc, #412]	; (80068c4 <HAL_DMA_Abort+0x23c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d018      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a65      	ldr	r2, [pc, #404]	; (80068c8 <HAL_DMA_Abort+0x240>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d013      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a64      	ldr	r2, [pc, #400]	; (80068cc <HAL_DMA_Abort+0x244>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00e      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a62      	ldr	r2, [pc, #392]	; (80068d0 <HAL_DMA_Abort+0x248>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d009      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a61      	ldr	r2, [pc, #388]	; (80068d4 <HAL_DMA_Abort+0x24c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d004      	beq.n	800675e <HAL_DMA_Abort+0xd6>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a5f      	ldr	r2, [pc, #380]	; (80068d8 <HAL_DMA_Abort+0x250>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d101      	bne.n	8006762 <HAL_DMA_Abort+0xda>
 800675e:	2301      	movs	r3, #1
 8006760:	e000      	b.n	8006764 <HAL_DMA_Abort+0xdc>
 8006762:	2300      	movs	r3, #0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d013      	beq.n	8006790 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 021e 	bic.w	r2, r2, #30
 8006776:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695a      	ldr	r2, [r3, #20]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006786:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e00a      	b.n	80067a6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 020e 	bic.w	r2, r2, #14
 800679e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a3c      	ldr	r2, [pc, #240]	; (800689c <HAL_DMA_Abort+0x214>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d072      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a3a      	ldr	r2, [pc, #232]	; (80068a0 <HAL_DMA_Abort+0x218>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d06d      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a39      	ldr	r2, [pc, #228]	; (80068a4 <HAL_DMA_Abort+0x21c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d068      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a37      	ldr	r2, [pc, #220]	; (80068a8 <HAL_DMA_Abort+0x220>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d063      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a36      	ldr	r2, [pc, #216]	; (80068ac <HAL_DMA_Abort+0x224>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d05e      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a34      	ldr	r2, [pc, #208]	; (80068b0 <HAL_DMA_Abort+0x228>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d059      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a33      	ldr	r2, [pc, #204]	; (80068b4 <HAL_DMA_Abort+0x22c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d054      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a31      	ldr	r2, [pc, #196]	; (80068b8 <HAL_DMA_Abort+0x230>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d04f      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a30      	ldr	r2, [pc, #192]	; (80068bc <HAL_DMA_Abort+0x234>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d04a      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a2e      	ldr	r2, [pc, #184]	; (80068c0 <HAL_DMA_Abort+0x238>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d045      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a2d      	ldr	r2, [pc, #180]	; (80068c4 <HAL_DMA_Abort+0x23c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d040      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a2b      	ldr	r2, [pc, #172]	; (80068c8 <HAL_DMA_Abort+0x240>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d03b      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a2a      	ldr	r2, [pc, #168]	; (80068cc <HAL_DMA_Abort+0x244>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d036      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a28      	ldr	r2, [pc, #160]	; (80068d0 <HAL_DMA_Abort+0x248>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d031      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a27      	ldr	r2, [pc, #156]	; (80068d4 <HAL_DMA_Abort+0x24c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d02c      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a25      	ldr	r2, [pc, #148]	; (80068d8 <HAL_DMA_Abort+0x250>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d027      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a24      	ldr	r2, [pc, #144]	; (80068dc <HAL_DMA_Abort+0x254>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d022      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a22      	ldr	r2, [pc, #136]	; (80068e0 <HAL_DMA_Abort+0x258>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d01d      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a21      	ldr	r2, [pc, #132]	; (80068e4 <HAL_DMA_Abort+0x25c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d018      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1f      	ldr	r2, [pc, #124]	; (80068e8 <HAL_DMA_Abort+0x260>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d013      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1e      	ldr	r2, [pc, #120]	; (80068ec <HAL_DMA_Abort+0x264>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00e      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a1c      	ldr	r2, [pc, #112]	; (80068f0 <HAL_DMA_Abort+0x268>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d009      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a1b      	ldr	r2, [pc, #108]	; (80068f4 <HAL_DMA_Abort+0x26c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d004      	beq.n	8006896 <HAL_DMA_Abort+0x20e>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a19      	ldr	r2, [pc, #100]	; (80068f8 <HAL_DMA_Abort+0x270>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d132      	bne.n	80068fc <HAL_DMA_Abort+0x274>
 8006896:	2301      	movs	r3, #1
 8006898:	e031      	b.n	80068fe <HAL_DMA_Abort+0x276>
 800689a:	bf00      	nop
 800689c:	40020010 	.word	0x40020010
 80068a0:	40020028 	.word	0x40020028
 80068a4:	40020040 	.word	0x40020040
 80068a8:	40020058 	.word	0x40020058
 80068ac:	40020070 	.word	0x40020070
 80068b0:	40020088 	.word	0x40020088
 80068b4:	400200a0 	.word	0x400200a0
 80068b8:	400200b8 	.word	0x400200b8
 80068bc:	40020410 	.word	0x40020410
 80068c0:	40020428 	.word	0x40020428
 80068c4:	40020440 	.word	0x40020440
 80068c8:	40020458 	.word	0x40020458
 80068cc:	40020470 	.word	0x40020470
 80068d0:	40020488 	.word	0x40020488
 80068d4:	400204a0 	.word	0x400204a0
 80068d8:	400204b8 	.word	0x400204b8
 80068dc:	58025408 	.word	0x58025408
 80068e0:	5802541c 	.word	0x5802541c
 80068e4:	58025430 	.word	0x58025430
 80068e8:	58025444 	.word	0x58025444
 80068ec:	58025458 	.word	0x58025458
 80068f0:	5802546c 	.word	0x5802546c
 80068f4:	58025480 	.word	0x58025480
 80068f8:	58025494 	.word	0x58025494
 80068fc:	2300      	movs	r3, #0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d007      	beq.n	8006912 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800690c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006910:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a6d      	ldr	r2, [pc, #436]	; (8006acc <HAL_DMA_Abort+0x444>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d04a      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a6b      	ldr	r2, [pc, #428]	; (8006ad0 <HAL_DMA_Abort+0x448>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d045      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a6a      	ldr	r2, [pc, #424]	; (8006ad4 <HAL_DMA_Abort+0x44c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d040      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a68      	ldr	r2, [pc, #416]	; (8006ad8 <HAL_DMA_Abort+0x450>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d03b      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a67      	ldr	r2, [pc, #412]	; (8006adc <HAL_DMA_Abort+0x454>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d036      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a65      	ldr	r2, [pc, #404]	; (8006ae0 <HAL_DMA_Abort+0x458>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d031      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a64      	ldr	r2, [pc, #400]	; (8006ae4 <HAL_DMA_Abort+0x45c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d02c      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a62      	ldr	r2, [pc, #392]	; (8006ae8 <HAL_DMA_Abort+0x460>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d027      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a61      	ldr	r2, [pc, #388]	; (8006aec <HAL_DMA_Abort+0x464>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d022      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a5f      	ldr	r2, [pc, #380]	; (8006af0 <HAL_DMA_Abort+0x468>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d01d      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a5e      	ldr	r2, [pc, #376]	; (8006af4 <HAL_DMA_Abort+0x46c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d018      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a5c      	ldr	r2, [pc, #368]	; (8006af8 <HAL_DMA_Abort+0x470>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d013      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a5b      	ldr	r2, [pc, #364]	; (8006afc <HAL_DMA_Abort+0x474>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00e      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a59      	ldr	r2, [pc, #356]	; (8006b00 <HAL_DMA_Abort+0x478>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d009      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a58      	ldr	r2, [pc, #352]	; (8006b04 <HAL_DMA_Abort+0x47c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d004      	beq.n	80069b2 <HAL_DMA_Abort+0x32a>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a56      	ldr	r2, [pc, #344]	; (8006b08 <HAL_DMA_Abort+0x480>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d108      	bne.n	80069c4 <HAL_DMA_Abort+0x33c>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f022 0201 	bic.w	r2, r2, #1
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	e007      	b.n	80069d4 <HAL_DMA_Abort+0x34c>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0201 	bic.w	r2, r2, #1
 80069d2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80069d4:	e013      	b.n	80069fe <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80069d6:	f7fc ff69 	bl	80038ac <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b05      	cmp	r3, #5
 80069e2:	d90c      	bls.n	80069fe <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2220      	movs	r2, #32
 80069e8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2203      	movs	r2, #3
 80069ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e12d      	b.n	8006c5a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e5      	bne.n	80069d6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a2f      	ldr	r2, [pc, #188]	; (8006acc <HAL_DMA_Abort+0x444>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d04a      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2d      	ldr	r2, [pc, #180]	; (8006ad0 <HAL_DMA_Abort+0x448>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d045      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a2c      	ldr	r2, [pc, #176]	; (8006ad4 <HAL_DMA_Abort+0x44c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d040      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a2a      	ldr	r2, [pc, #168]	; (8006ad8 <HAL_DMA_Abort+0x450>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d03b      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a29      	ldr	r2, [pc, #164]	; (8006adc <HAL_DMA_Abort+0x454>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d036      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a27      	ldr	r2, [pc, #156]	; (8006ae0 <HAL_DMA_Abort+0x458>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d031      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a26      	ldr	r2, [pc, #152]	; (8006ae4 <HAL_DMA_Abort+0x45c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d02c      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a24      	ldr	r2, [pc, #144]	; (8006ae8 <HAL_DMA_Abort+0x460>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d027      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a23      	ldr	r2, [pc, #140]	; (8006aec <HAL_DMA_Abort+0x464>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d022      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a21      	ldr	r2, [pc, #132]	; (8006af0 <HAL_DMA_Abort+0x468>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d01d      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a20      	ldr	r2, [pc, #128]	; (8006af4 <HAL_DMA_Abort+0x46c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d018      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a1e      	ldr	r2, [pc, #120]	; (8006af8 <HAL_DMA_Abort+0x470>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d013      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a1d      	ldr	r2, [pc, #116]	; (8006afc <HAL_DMA_Abort+0x474>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00e      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1b      	ldr	r2, [pc, #108]	; (8006b00 <HAL_DMA_Abort+0x478>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d009      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1a      	ldr	r2, [pc, #104]	; (8006b04 <HAL_DMA_Abort+0x47c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d004      	beq.n	8006aaa <HAL_DMA_Abort+0x422>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a18      	ldr	r2, [pc, #96]	; (8006b08 <HAL_DMA_Abort+0x480>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d101      	bne.n	8006aae <HAL_DMA_Abort+0x426>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e000      	b.n	8006ab0 <HAL_DMA_Abort+0x428>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d02b      	beq.n	8006b0c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	223f      	movs	r2, #63	; 0x3f
 8006ac4:	409a      	lsls	r2, r3
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	609a      	str	r2, [r3, #8]
 8006aca:	e02a      	b.n	8006b22 <HAL_DMA_Abort+0x49a>
 8006acc:	40020010 	.word	0x40020010
 8006ad0:	40020028 	.word	0x40020028
 8006ad4:	40020040 	.word	0x40020040
 8006ad8:	40020058 	.word	0x40020058
 8006adc:	40020070 	.word	0x40020070
 8006ae0:	40020088 	.word	0x40020088
 8006ae4:	400200a0 	.word	0x400200a0
 8006ae8:	400200b8 	.word	0x400200b8
 8006aec:	40020410 	.word	0x40020410
 8006af0:	40020428 	.word	0x40020428
 8006af4:	40020440 	.word	0x40020440
 8006af8:	40020458 	.word	0x40020458
 8006afc:	40020470 	.word	0x40020470
 8006b00:	40020488 	.word	0x40020488
 8006b04:	400204a0 	.word	0x400204a0
 8006b08:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b10:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b16:	f003 031f 	and.w	r3, r3, #31
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	409a      	lsls	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a4f      	ldr	r2, [pc, #316]	; (8006c64 <HAL_DMA_Abort+0x5dc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d072      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a4d      	ldr	r2, [pc, #308]	; (8006c68 <HAL_DMA_Abort+0x5e0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d06d      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a4c      	ldr	r2, [pc, #304]	; (8006c6c <HAL_DMA_Abort+0x5e4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d068      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a4a      	ldr	r2, [pc, #296]	; (8006c70 <HAL_DMA_Abort+0x5e8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d063      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a49      	ldr	r2, [pc, #292]	; (8006c74 <HAL_DMA_Abort+0x5ec>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d05e      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a47      	ldr	r2, [pc, #284]	; (8006c78 <HAL_DMA_Abort+0x5f0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d059      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a46      	ldr	r2, [pc, #280]	; (8006c7c <HAL_DMA_Abort+0x5f4>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d054      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a44      	ldr	r2, [pc, #272]	; (8006c80 <HAL_DMA_Abort+0x5f8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d04f      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a43      	ldr	r2, [pc, #268]	; (8006c84 <HAL_DMA_Abort+0x5fc>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d04a      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a41      	ldr	r2, [pc, #260]	; (8006c88 <HAL_DMA_Abort+0x600>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d045      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a40      	ldr	r2, [pc, #256]	; (8006c8c <HAL_DMA_Abort+0x604>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d040      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a3e      	ldr	r2, [pc, #248]	; (8006c90 <HAL_DMA_Abort+0x608>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d03b      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a3d      	ldr	r2, [pc, #244]	; (8006c94 <HAL_DMA_Abort+0x60c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d036      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a3b      	ldr	r2, [pc, #236]	; (8006c98 <HAL_DMA_Abort+0x610>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d031      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a3a      	ldr	r2, [pc, #232]	; (8006c9c <HAL_DMA_Abort+0x614>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d02c      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a38      	ldr	r2, [pc, #224]	; (8006ca0 <HAL_DMA_Abort+0x618>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d027      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a37      	ldr	r2, [pc, #220]	; (8006ca4 <HAL_DMA_Abort+0x61c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d022      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a35      	ldr	r2, [pc, #212]	; (8006ca8 <HAL_DMA_Abort+0x620>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d01d      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a34      	ldr	r2, [pc, #208]	; (8006cac <HAL_DMA_Abort+0x624>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d018      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a32      	ldr	r2, [pc, #200]	; (8006cb0 <HAL_DMA_Abort+0x628>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d013      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a31      	ldr	r2, [pc, #196]	; (8006cb4 <HAL_DMA_Abort+0x62c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00e      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a2f      	ldr	r2, [pc, #188]	; (8006cb8 <HAL_DMA_Abort+0x630>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d009      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a2e      	ldr	r2, [pc, #184]	; (8006cbc <HAL_DMA_Abort+0x634>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d004      	beq.n	8006c12 <HAL_DMA_Abort+0x58a>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a2c      	ldr	r2, [pc, #176]	; (8006cc0 <HAL_DMA_Abort+0x638>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d101      	bne.n	8006c16 <HAL_DMA_Abort+0x58e>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <HAL_DMA_Abort+0x590>
 8006c16:	2300      	movs	r3, #0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d015      	beq.n	8006c48 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006c24:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00c      	beq.n	8006c48 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c3c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c46:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3718      	adds	r7, #24
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	40020010 	.word	0x40020010
 8006c68:	40020028 	.word	0x40020028
 8006c6c:	40020040 	.word	0x40020040
 8006c70:	40020058 	.word	0x40020058
 8006c74:	40020070 	.word	0x40020070
 8006c78:	40020088 	.word	0x40020088
 8006c7c:	400200a0 	.word	0x400200a0
 8006c80:	400200b8 	.word	0x400200b8
 8006c84:	40020410 	.word	0x40020410
 8006c88:	40020428 	.word	0x40020428
 8006c8c:	40020440 	.word	0x40020440
 8006c90:	40020458 	.word	0x40020458
 8006c94:	40020470 	.word	0x40020470
 8006c98:	40020488 	.word	0x40020488
 8006c9c:	400204a0 	.word	0x400204a0
 8006ca0:	400204b8 	.word	0x400204b8
 8006ca4:	58025408 	.word	0x58025408
 8006ca8:	5802541c 	.word	0x5802541c
 8006cac:	58025430 	.word	0x58025430
 8006cb0:	58025444 	.word	0x58025444
 8006cb4:	58025458 	.word	0x58025458
 8006cb8:	5802546c 	.word	0x5802546c
 8006cbc:	58025480 	.word	0x58025480
 8006cc0:	58025494 	.word	0x58025494

08006cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e237      	b.n	8007146 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d004      	beq.n	8006cec <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2280      	movs	r2, #128	; 0x80
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e22c      	b.n	8007146 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a5c      	ldr	r2, [pc, #368]	; (8006e64 <HAL_DMA_Abort_IT+0x1a0>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d04a      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a5b      	ldr	r2, [pc, #364]	; (8006e68 <HAL_DMA_Abort_IT+0x1a4>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d045      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a59      	ldr	r2, [pc, #356]	; (8006e6c <HAL_DMA_Abort_IT+0x1a8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d040      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a58      	ldr	r2, [pc, #352]	; (8006e70 <HAL_DMA_Abort_IT+0x1ac>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d03b      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a56      	ldr	r2, [pc, #344]	; (8006e74 <HAL_DMA_Abort_IT+0x1b0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d036      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a55      	ldr	r2, [pc, #340]	; (8006e78 <HAL_DMA_Abort_IT+0x1b4>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d031      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a53      	ldr	r2, [pc, #332]	; (8006e7c <HAL_DMA_Abort_IT+0x1b8>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d02c      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a52      	ldr	r2, [pc, #328]	; (8006e80 <HAL_DMA_Abort_IT+0x1bc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d027      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a50      	ldr	r2, [pc, #320]	; (8006e84 <HAL_DMA_Abort_IT+0x1c0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d022      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a4f      	ldr	r2, [pc, #316]	; (8006e88 <HAL_DMA_Abort_IT+0x1c4>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d01d      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a4d      	ldr	r2, [pc, #308]	; (8006e8c <HAL_DMA_Abort_IT+0x1c8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d018      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a4c      	ldr	r2, [pc, #304]	; (8006e90 <HAL_DMA_Abort_IT+0x1cc>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d013      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a4a      	ldr	r2, [pc, #296]	; (8006e94 <HAL_DMA_Abort_IT+0x1d0>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00e      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a49      	ldr	r2, [pc, #292]	; (8006e98 <HAL_DMA_Abort_IT+0x1d4>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d009      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a47      	ldr	r2, [pc, #284]	; (8006e9c <HAL_DMA_Abort_IT+0x1d8>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d004      	beq.n	8006d8c <HAL_DMA_Abort_IT+0xc8>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a46      	ldr	r2, [pc, #280]	; (8006ea0 <HAL_DMA_Abort_IT+0x1dc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d101      	bne.n	8006d90 <HAL_DMA_Abort_IT+0xcc>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <HAL_DMA_Abort_IT+0xce>
 8006d90:	2300      	movs	r3, #0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 8086 	beq.w	8006ea4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a2f      	ldr	r2, [pc, #188]	; (8006e64 <HAL_DMA_Abort_IT+0x1a0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d04a      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a2e      	ldr	r2, [pc, #184]	; (8006e68 <HAL_DMA_Abort_IT+0x1a4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d045      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a2c      	ldr	r2, [pc, #176]	; (8006e6c <HAL_DMA_Abort_IT+0x1a8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d040      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a2b      	ldr	r2, [pc, #172]	; (8006e70 <HAL_DMA_Abort_IT+0x1ac>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d03b      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a29      	ldr	r2, [pc, #164]	; (8006e74 <HAL_DMA_Abort_IT+0x1b0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d036      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a28      	ldr	r2, [pc, #160]	; (8006e78 <HAL_DMA_Abort_IT+0x1b4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d031      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a26      	ldr	r2, [pc, #152]	; (8006e7c <HAL_DMA_Abort_IT+0x1b8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d02c      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a25      	ldr	r2, [pc, #148]	; (8006e80 <HAL_DMA_Abort_IT+0x1bc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d027      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a23      	ldr	r2, [pc, #140]	; (8006e84 <HAL_DMA_Abort_IT+0x1c0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d022      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a22      	ldr	r2, [pc, #136]	; (8006e88 <HAL_DMA_Abort_IT+0x1c4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d01d      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a20      	ldr	r2, [pc, #128]	; (8006e8c <HAL_DMA_Abort_IT+0x1c8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d018      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a1f      	ldr	r2, [pc, #124]	; (8006e90 <HAL_DMA_Abort_IT+0x1cc>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d013      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1d      	ldr	r2, [pc, #116]	; (8006e94 <HAL_DMA_Abort_IT+0x1d0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00e      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a1c      	ldr	r2, [pc, #112]	; (8006e98 <HAL_DMA_Abort_IT+0x1d4>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d009      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1a      	ldr	r2, [pc, #104]	; (8006e9c <HAL_DMA_Abort_IT+0x1d8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d004      	beq.n	8006e40 <HAL_DMA_Abort_IT+0x17c>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a19      	ldr	r2, [pc, #100]	; (8006ea0 <HAL_DMA_Abort_IT+0x1dc>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d108      	bne.n	8006e52 <HAL_DMA_Abort_IT+0x18e>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 0201 	bic.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	e178      	b.n	8007144 <HAL_DMA_Abort_IT+0x480>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0201 	bic.w	r2, r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	e16f      	b.n	8007144 <HAL_DMA_Abort_IT+0x480>
 8006e64:	40020010 	.word	0x40020010
 8006e68:	40020028 	.word	0x40020028
 8006e6c:	40020040 	.word	0x40020040
 8006e70:	40020058 	.word	0x40020058
 8006e74:	40020070 	.word	0x40020070
 8006e78:	40020088 	.word	0x40020088
 8006e7c:	400200a0 	.word	0x400200a0
 8006e80:	400200b8 	.word	0x400200b8
 8006e84:	40020410 	.word	0x40020410
 8006e88:	40020428 	.word	0x40020428
 8006e8c:	40020440 	.word	0x40020440
 8006e90:	40020458 	.word	0x40020458
 8006e94:	40020470 	.word	0x40020470
 8006e98:	40020488 	.word	0x40020488
 8006e9c:	400204a0 	.word	0x400204a0
 8006ea0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 020e 	bic.w	r2, r2, #14
 8006eb2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a6c      	ldr	r2, [pc, #432]	; (800706c <HAL_DMA_Abort_IT+0x3a8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d04a      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a6b      	ldr	r2, [pc, #428]	; (8007070 <HAL_DMA_Abort_IT+0x3ac>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d045      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a69      	ldr	r2, [pc, #420]	; (8007074 <HAL_DMA_Abort_IT+0x3b0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d040      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a68      	ldr	r2, [pc, #416]	; (8007078 <HAL_DMA_Abort_IT+0x3b4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d03b      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a66      	ldr	r2, [pc, #408]	; (800707c <HAL_DMA_Abort_IT+0x3b8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d036      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a65      	ldr	r2, [pc, #404]	; (8007080 <HAL_DMA_Abort_IT+0x3bc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d031      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a63      	ldr	r2, [pc, #396]	; (8007084 <HAL_DMA_Abort_IT+0x3c0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d02c      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a62      	ldr	r2, [pc, #392]	; (8007088 <HAL_DMA_Abort_IT+0x3c4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d027      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a60      	ldr	r2, [pc, #384]	; (800708c <HAL_DMA_Abort_IT+0x3c8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d022      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a5f      	ldr	r2, [pc, #380]	; (8007090 <HAL_DMA_Abort_IT+0x3cc>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d01d      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a5d      	ldr	r2, [pc, #372]	; (8007094 <HAL_DMA_Abort_IT+0x3d0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d018      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a5c      	ldr	r2, [pc, #368]	; (8007098 <HAL_DMA_Abort_IT+0x3d4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d013      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a5a      	ldr	r2, [pc, #360]	; (800709c <HAL_DMA_Abort_IT+0x3d8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00e      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a59      	ldr	r2, [pc, #356]	; (80070a0 <HAL_DMA_Abort_IT+0x3dc>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d009      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a57      	ldr	r2, [pc, #348]	; (80070a4 <HAL_DMA_Abort_IT+0x3e0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d004      	beq.n	8006f54 <HAL_DMA_Abort_IT+0x290>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a56      	ldr	r2, [pc, #344]	; (80070a8 <HAL_DMA_Abort_IT+0x3e4>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d108      	bne.n	8006f66 <HAL_DMA_Abort_IT+0x2a2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0201 	bic.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	e007      	b.n	8006f76 <HAL_DMA_Abort_IT+0x2b2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0201 	bic.w	r2, r2, #1
 8006f74:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a3c      	ldr	r2, [pc, #240]	; (800706c <HAL_DMA_Abort_IT+0x3a8>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d072      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a3a      	ldr	r2, [pc, #232]	; (8007070 <HAL_DMA_Abort_IT+0x3ac>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d06d      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a39      	ldr	r2, [pc, #228]	; (8007074 <HAL_DMA_Abort_IT+0x3b0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d068      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a37      	ldr	r2, [pc, #220]	; (8007078 <HAL_DMA_Abort_IT+0x3b4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d063      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a36      	ldr	r2, [pc, #216]	; (800707c <HAL_DMA_Abort_IT+0x3b8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d05e      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a34      	ldr	r2, [pc, #208]	; (8007080 <HAL_DMA_Abort_IT+0x3bc>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d059      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a33      	ldr	r2, [pc, #204]	; (8007084 <HAL_DMA_Abort_IT+0x3c0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d054      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a31      	ldr	r2, [pc, #196]	; (8007088 <HAL_DMA_Abort_IT+0x3c4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d04f      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a30      	ldr	r2, [pc, #192]	; (800708c <HAL_DMA_Abort_IT+0x3c8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d04a      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a2e      	ldr	r2, [pc, #184]	; (8007090 <HAL_DMA_Abort_IT+0x3cc>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d045      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a2d      	ldr	r2, [pc, #180]	; (8007094 <HAL_DMA_Abort_IT+0x3d0>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d040      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a2b      	ldr	r2, [pc, #172]	; (8007098 <HAL_DMA_Abort_IT+0x3d4>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d03b      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a2a      	ldr	r2, [pc, #168]	; (800709c <HAL_DMA_Abort_IT+0x3d8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d036      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a28      	ldr	r2, [pc, #160]	; (80070a0 <HAL_DMA_Abort_IT+0x3dc>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d031      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a27      	ldr	r2, [pc, #156]	; (80070a4 <HAL_DMA_Abort_IT+0x3e0>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d02c      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a25      	ldr	r2, [pc, #148]	; (80070a8 <HAL_DMA_Abort_IT+0x3e4>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d027      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a24      	ldr	r2, [pc, #144]	; (80070ac <HAL_DMA_Abort_IT+0x3e8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d022      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a22      	ldr	r2, [pc, #136]	; (80070b0 <HAL_DMA_Abort_IT+0x3ec>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d01d      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a21      	ldr	r2, [pc, #132]	; (80070b4 <HAL_DMA_Abort_IT+0x3f0>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d018      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a1f      	ldr	r2, [pc, #124]	; (80070b8 <HAL_DMA_Abort_IT+0x3f4>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d013      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a1e      	ldr	r2, [pc, #120]	; (80070bc <HAL_DMA_Abort_IT+0x3f8>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d00e      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a1c      	ldr	r2, [pc, #112]	; (80070c0 <HAL_DMA_Abort_IT+0x3fc>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d009      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a1b      	ldr	r2, [pc, #108]	; (80070c4 <HAL_DMA_Abort_IT+0x400>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d004      	beq.n	8007066 <HAL_DMA_Abort_IT+0x3a2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a19      	ldr	r2, [pc, #100]	; (80070c8 <HAL_DMA_Abort_IT+0x404>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d132      	bne.n	80070cc <HAL_DMA_Abort_IT+0x408>
 8007066:	2301      	movs	r3, #1
 8007068:	e031      	b.n	80070ce <HAL_DMA_Abort_IT+0x40a>
 800706a:	bf00      	nop
 800706c:	40020010 	.word	0x40020010
 8007070:	40020028 	.word	0x40020028
 8007074:	40020040 	.word	0x40020040
 8007078:	40020058 	.word	0x40020058
 800707c:	40020070 	.word	0x40020070
 8007080:	40020088 	.word	0x40020088
 8007084:	400200a0 	.word	0x400200a0
 8007088:	400200b8 	.word	0x400200b8
 800708c:	40020410 	.word	0x40020410
 8007090:	40020428 	.word	0x40020428
 8007094:	40020440 	.word	0x40020440
 8007098:	40020458 	.word	0x40020458
 800709c:	40020470 	.word	0x40020470
 80070a0:	40020488 	.word	0x40020488
 80070a4:	400204a0 	.word	0x400204a0
 80070a8:	400204b8 	.word	0x400204b8
 80070ac:	58025408 	.word	0x58025408
 80070b0:	5802541c 	.word	0x5802541c
 80070b4:	58025430 	.word	0x58025430
 80070b8:	58025444 	.word	0x58025444
 80070bc:	58025458 	.word	0x58025458
 80070c0:	5802546c 	.word	0x5802546c
 80070c4:	58025480 	.word	0x58025480
 80070c8:	58025494 	.word	0x58025494
 80070cc:	2300      	movs	r3, #0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d028      	beq.n	8007124 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070e0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070e6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ec:	f003 031f 	and.w	r3, r3, #31
 80070f0:	2201      	movs	r2, #1
 80070f2:	409a      	lsls	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007100:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00c      	beq.n	8007124 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007118:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007122:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop

08007150 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	; 0x28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800715c:	4b67      	ldr	r3, [pc, #412]	; (80072fc <HAL_DMA_IRQHandler+0x1ac>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a67      	ldr	r2, [pc, #412]	; (8007300 <HAL_DMA_IRQHandler+0x1b0>)
 8007162:	fba2 2303 	umull	r2, r3, r2, r3
 8007166:	0a9b      	lsrs	r3, r3, #10
 8007168:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800716e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007174:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a5f      	ldr	r2, [pc, #380]	; (8007304 <HAL_DMA_IRQHandler+0x1b4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d04a      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a5d      	ldr	r2, [pc, #372]	; (8007308 <HAL_DMA_IRQHandler+0x1b8>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d045      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a5c      	ldr	r2, [pc, #368]	; (800730c <HAL_DMA_IRQHandler+0x1bc>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d040      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a5a      	ldr	r2, [pc, #360]	; (8007310 <HAL_DMA_IRQHandler+0x1c0>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d03b      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a59      	ldr	r2, [pc, #356]	; (8007314 <HAL_DMA_IRQHandler+0x1c4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d036      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a57      	ldr	r2, [pc, #348]	; (8007318 <HAL_DMA_IRQHandler+0x1c8>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d031      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a56      	ldr	r2, [pc, #344]	; (800731c <HAL_DMA_IRQHandler+0x1cc>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d02c      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a54      	ldr	r2, [pc, #336]	; (8007320 <HAL_DMA_IRQHandler+0x1d0>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d027      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a53      	ldr	r2, [pc, #332]	; (8007324 <HAL_DMA_IRQHandler+0x1d4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d022      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a51      	ldr	r2, [pc, #324]	; (8007328 <HAL_DMA_IRQHandler+0x1d8>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d01d      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a50      	ldr	r2, [pc, #320]	; (800732c <HAL_DMA_IRQHandler+0x1dc>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d018      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a4e      	ldr	r2, [pc, #312]	; (8007330 <HAL_DMA_IRQHandler+0x1e0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d013      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a4d      	ldr	r2, [pc, #308]	; (8007334 <HAL_DMA_IRQHandler+0x1e4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00e      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a4b      	ldr	r2, [pc, #300]	; (8007338 <HAL_DMA_IRQHandler+0x1e8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d009      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a4a      	ldr	r2, [pc, #296]	; (800733c <HAL_DMA_IRQHandler+0x1ec>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d004      	beq.n	8007222 <HAL_DMA_IRQHandler+0xd2>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a48      	ldr	r2, [pc, #288]	; (8007340 <HAL_DMA_IRQHandler+0x1f0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d101      	bne.n	8007226 <HAL_DMA_IRQHandler+0xd6>
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <HAL_DMA_IRQHandler+0xd8>
 8007226:	2300      	movs	r3, #0
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 842b 	beq.w	8007a84 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007232:	f003 031f 	and.w	r3, r3, #31
 8007236:	2208      	movs	r2, #8
 8007238:	409a      	lsls	r2, r3
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	4013      	ands	r3, r2
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 80a2 	beq.w	8007388 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a2e      	ldr	r2, [pc, #184]	; (8007304 <HAL_DMA_IRQHandler+0x1b4>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d04a      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a2d      	ldr	r2, [pc, #180]	; (8007308 <HAL_DMA_IRQHandler+0x1b8>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d045      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a2b      	ldr	r2, [pc, #172]	; (800730c <HAL_DMA_IRQHandler+0x1bc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d040      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a2a      	ldr	r2, [pc, #168]	; (8007310 <HAL_DMA_IRQHandler+0x1c0>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d03b      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a28      	ldr	r2, [pc, #160]	; (8007314 <HAL_DMA_IRQHandler+0x1c4>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d036      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a27      	ldr	r2, [pc, #156]	; (8007318 <HAL_DMA_IRQHandler+0x1c8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d031      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a25      	ldr	r2, [pc, #148]	; (800731c <HAL_DMA_IRQHandler+0x1cc>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d02c      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a24      	ldr	r2, [pc, #144]	; (8007320 <HAL_DMA_IRQHandler+0x1d0>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d027      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a22      	ldr	r2, [pc, #136]	; (8007324 <HAL_DMA_IRQHandler+0x1d4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d022      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a21      	ldr	r2, [pc, #132]	; (8007328 <HAL_DMA_IRQHandler+0x1d8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d01d      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1f      	ldr	r2, [pc, #124]	; (800732c <HAL_DMA_IRQHandler+0x1dc>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d018      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1e      	ldr	r2, [pc, #120]	; (8007330 <HAL_DMA_IRQHandler+0x1e0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d013      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1c      	ldr	r2, [pc, #112]	; (8007334 <HAL_DMA_IRQHandler+0x1e4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00e      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a1b      	ldr	r2, [pc, #108]	; (8007338 <HAL_DMA_IRQHandler+0x1e8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d009      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a19      	ldr	r2, [pc, #100]	; (800733c <HAL_DMA_IRQHandler+0x1ec>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d004      	beq.n	80072e4 <HAL_DMA_IRQHandler+0x194>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a18      	ldr	r2, [pc, #96]	; (8007340 <HAL_DMA_IRQHandler+0x1f0>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d12f      	bne.n	8007344 <HAL_DMA_IRQHandler+0x1f4>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0304 	and.w	r3, r3, #4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bf14      	ite	ne
 80072f2:	2301      	movne	r3, #1
 80072f4:	2300      	moveq	r3, #0
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	e02e      	b.n	8007358 <HAL_DMA_IRQHandler+0x208>
 80072fa:	bf00      	nop
 80072fc:	24000088 	.word	0x24000088
 8007300:	1b4e81b5 	.word	0x1b4e81b5
 8007304:	40020010 	.word	0x40020010
 8007308:	40020028 	.word	0x40020028
 800730c:	40020040 	.word	0x40020040
 8007310:	40020058 	.word	0x40020058
 8007314:	40020070 	.word	0x40020070
 8007318:	40020088 	.word	0x40020088
 800731c:	400200a0 	.word	0x400200a0
 8007320:	400200b8 	.word	0x400200b8
 8007324:	40020410 	.word	0x40020410
 8007328:	40020428 	.word	0x40020428
 800732c:	40020440 	.word	0x40020440
 8007330:	40020458 	.word	0x40020458
 8007334:	40020470 	.word	0x40020470
 8007338:	40020488 	.word	0x40020488
 800733c:	400204a0 	.word	0x400204a0
 8007340:	400204b8 	.word	0x400204b8
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0308 	and.w	r3, r3, #8
 800734e:	2b00      	cmp	r3, #0
 8007350:	bf14      	ite	ne
 8007352:	2301      	movne	r3, #1
 8007354:	2300      	moveq	r3, #0
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d015      	beq.n	8007388 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 0204 	bic.w	r2, r2, #4
 800736a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007370:	f003 031f 	and.w	r3, r3, #31
 8007374:	2208      	movs	r2, #8
 8007376:	409a      	lsls	r2, r3
 8007378:	6a3b      	ldr	r3, [r7, #32]
 800737a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007380:	f043 0201 	orr.w	r2, r3, #1
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800738c:	f003 031f 	and.w	r3, r3, #31
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	fa22 f303 	lsr.w	r3, r2, r3
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d06e      	beq.n	800747c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a69      	ldr	r2, [pc, #420]	; (8007548 <HAL_DMA_IRQHandler+0x3f8>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d04a      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a67      	ldr	r2, [pc, #412]	; (800754c <HAL_DMA_IRQHandler+0x3fc>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d045      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a66      	ldr	r2, [pc, #408]	; (8007550 <HAL_DMA_IRQHandler+0x400>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d040      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a64      	ldr	r2, [pc, #400]	; (8007554 <HAL_DMA_IRQHandler+0x404>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d03b      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a63      	ldr	r2, [pc, #396]	; (8007558 <HAL_DMA_IRQHandler+0x408>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d036      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a61      	ldr	r2, [pc, #388]	; (800755c <HAL_DMA_IRQHandler+0x40c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d031      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a60      	ldr	r2, [pc, #384]	; (8007560 <HAL_DMA_IRQHandler+0x410>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d02c      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a5e      	ldr	r2, [pc, #376]	; (8007564 <HAL_DMA_IRQHandler+0x414>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d027      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a5d      	ldr	r2, [pc, #372]	; (8007568 <HAL_DMA_IRQHandler+0x418>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d022      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a5b      	ldr	r2, [pc, #364]	; (800756c <HAL_DMA_IRQHandler+0x41c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d01d      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a5a      	ldr	r2, [pc, #360]	; (8007570 <HAL_DMA_IRQHandler+0x420>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d018      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a58      	ldr	r2, [pc, #352]	; (8007574 <HAL_DMA_IRQHandler+0x424>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d013      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a57      	ldr	r2, [pc, #348]	; (8007578 <HAL_DMA_IRQHandler+0x428>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00e      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a55      	ldr	r2, [pc, #340]	; (800757c <HAL_DMA_IRQHandler+0x42c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d009      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a54      	ldr	r2, [pc, #336]	; (8007580 <HAL_DMA_IRQHandler+0x430>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d004      	beq.n	800743e <HAL_DMA_IRQHandler+0x2ee>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a52      	ldr	r2, [pc, #328]	; (8007584 <HAL_DMA_IRQHandler+0x434>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d10a      	bne.n	8007454 <HAL_DMA_IRQHandler+0x304>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007448:	2b00      	cmp	r3, #0
 800744a:	bf14      	ite	ne
 800744c:	2301      	movne	r3, #1
 800744e:	2300      	moveq	r3, #0
 8007450:	b2db      	uxtb	r3, r3
 8007452:	e003      	b.n	800745c <HAL_DMA_IRQHandler+0x30c>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2300      	movs	r3, #0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00d      	beq.n	800747c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	2201      	movs	r2, #1
 800746a:	409a      	lsls	r2, r3
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007474:	f043 0202 	orr.w	r2, r3, #2
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007480:	f003 031f 	and.w	r3, r3, #31
 8007484:	2204      	movs	r2, #4
 8007486:	409a      	lsls	r2, r3
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	4013      	ands	r3, r2
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 808f 	beq.w	80075b0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a2c      	ldr	r2, [pc, #176]	; (8007548 <HAL_DMA_IRQHandler+0x3f8>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d04a      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a2a      	ldr	r2, [pc, #168]	; (800754c <HAL_DMA_IRQHandler+0x3fc>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d045      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a29      	ldr	r2, [pc, #164]	; (8007550 <HAL_DMA_IRQHandler+0x400>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d040      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a27      	ldr	r2, [pc, #156]	; (8007554 <HAL_DMA_IRQHandler+0x404>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d03b      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a26      	ldr	r2, [pc, #152]	; (8007558 <HAL_DMA_IRQHandler+0x408>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d036      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a24      	ldr	r2, [pc, #144]	; (800755c <HAL_DMA_IRQHandler+0x40c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d031      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a23      	ldr	r2, [pc, #140]	; (8007560 <HAL_DMA_IRQHandler+0x410>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d02c      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a21      	ldr	r2, [pc, #132]	; (8007564 <HAL_DMA_IRQHandler+0x414>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d027      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a20      	ldr	r2, [pc, #128]	; (8007568 <HAL_DMA_IRQHandler+0x418>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d022      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a1e      	ldr	r2, [pc, #120]	; (800756c <HAL_DMA_IRQHandler+0x41c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d01d      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a1d      	ldr	r2, [pc, #116]	; (8007570 <HAL_DMA_IRQHandler+0x420>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d018      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a1b      	ldr	r2, [pc, #108]	; (8007574 <HAL_DMA_IRQHandler+0x424>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d013      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a1a      	ldr	r2, [pc, #104]	; (8007578 <HAL_DMA_IRQHandler+0x428>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00e      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a18      	ldr	r2, [pc, #96]	; (800757c <HAL_DMA_IRQHandler+0x42c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d009      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a17      	ldr	r2, [pc, #92]	; (8007580 <HAL_DMA_IRQHandler+0x430>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d004      	beq.n	8007532 <HAL_DMA_IRQHandler+0x3e2>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a15      	ldr	r2, [pc, #84]	; (8007584 <HAL_DMA_IRQHandler+0x434>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d12a      	bne.n	8007588 <HAL_DMA_IRQHandler+0x438>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b00      	cmp	r3, #0
 800753e:	bf14      	ite	ne
 8007540:	2301      	movne	r3, #1
 8007542:	2300      	moveq	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	e023      	b.n	8007590 <HAL_DMA_IRQHandler+0x440>
 8007548:	40020010 	.word	0x40020010
 800754c:	40020028 	.word	0x40020028
 8007550:	40020040 	.word	0x40020040
 8007554:	40020058 	.word	0x40020058
 8007558:	40020070 	.word	0x40020070
 800755c:	40020088 	.word	0x40020088
 8007560:	400200a0 	.word	0x400200a0
 8007564:	400200b8 	.word	0x400200b8
 8007568:	40020410 	.word	0x40020410
 800756c:	40020428 	.word	0x40020428
 8007570:	40020440 	.word	0x40020440
 8007574:	40020458 	.word	0x40020458
 8007578:	40020470 	.word	0x40020470
 800757c:	40020488 	.word	0x40020488
 8007580:	400204a0 	.word	0x400204a0
 8007584:	400204b8 	.word	0x400204b8
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2300      	movs	r3, #0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00d      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007598:	f003 031f 	and.w	r3, r3, #31
 800759c:	2204      	movs	r2, #4
 800759e:	409a      	lsls	r2, r3
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a8:	f043 0204 	orr.w	r2, r3, #4
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b4:	f003 031f 	and.w	r3, r3, #31
 80075b8:	2210      	movs	r2, #16
 80075ba:	409a      	lsls	r2, r3
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	4013      	ands	r3, r2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 80a6 	beq.w	8007712 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a85      	ldr	r2, [pc, #532]	; (80077e0 <HAL_DMA_IRQHandler+0x690>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d04a      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a83      	ldr	r2, [pc, #524]	; (80077e4 <HAL_DMA_IRQHandler+0x694>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d045      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a82      	ldr	r2, [pc, #520]	; (80077e8 <HAL_DMA_IRQHandler+0x698>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d040      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a80      	ldr	r2, [pc, #512]	; (80077ec <HAL_DMA_IRQHandler+0x69c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d03b      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a7f      	ldr	r2, [pc, #508]	; (80077f0 <HAL_DMA_IRQHandler+0x6a0>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d036      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a7d      	ldr	r2, [pc, #500]	; (80077f4 <HAL_DMA_IRQHandler+0x6a4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d031      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a7c      	ldr	r2, [pc, #496]	; (80077f8 <HAL_DMA_IRQHandler+0x6a8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d02c      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a7a      	ldr	r2, [pc, #488]	; (80077fc <HAL_DMA_IRQHandler+0x6ac>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d027      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a79      	ldr	r2, [pc, #484]	; (8007800 <HAL_DMA_IRQHandler+0x6b0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d022      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a77      	ldr	r2, [pc, #476]	; (8007804 <HAL_DMA_IRQHandler+0x6b4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d01d      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a76      	ldr	r2, [pc, #472]	; (8007808 <HAL_DMA_IRQHandler+0x6b8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d018      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a74      	ldr	r2, [pc, #464]	; (800780c <HAL_DMA_IRQHandler+0x6bc>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d013      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a73      	ldr	r2, [pc, #460]	; (8007810 <HAL_DMA_IRQHandler+0x6c0>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d00e      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a71      	ldr	r2, [pc, #452]	; (8007814 <HAL_DMA_IRQHandler+0x6c4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d009      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a70      	ldr	r2, [pc, #448]	; (8007818 <HAL_DMA_IRQHandler+0x6c8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d004      	beq.n	8007666 <HAL_DMA_IRQHandler+0x516>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a6e      	ldr	r2, [pc, #440]	; (800781c <HAL_DMA_IRQHandler+0x6cc>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d10a      	bne.n	800767c <HAL_DMA_IRQHandler+0x52c>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b00      	cmp	r3, #0
 8007672:	bf14      	ite	ne
 8007674:	2301      	movne	r3, #1
 8007676:	2300      	moveq	r3, #0
 8007678:	b2db      	uxtb	r3, r3
 800767a:	e009      	b.n	8007690 <HAL_DMA_IRQHandler+0x540>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b00      	cmp	r3, #0
 8007688:	bf14      	ite	ne
 800768a:	2301      	movne	r3, #1
 800768c:	2300      	moveq	r3, #0
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d03e      	beq.n	8007712 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007698:	f003 031f 	and.w	r3, r3, #31
 800769c:	2210      	movs	r2, #16
 800769e:	409a      	lsls	r2, r3
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d018      	beq.n	80076e4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d108      	bne.n	80076d2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d024      	beq.n	8007712 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	4798      	blx	r3
 80076d0:	e01f      	b.n	8007712 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d01b      	beq.n	8007712 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	4798      	blx	r3
 80076e2:	e016      	b.n	8007712 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d107      	bne.n	8007702 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0208 	bic.w	r2, r2, #8
 8007700:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007716:	f003 031f 	and.w	r3, r3, #31
 800771a:	2220      	movs	r2, #32
 800771c:	409a      	lsls	r2, r3
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	4013      	ands	r3, r2
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 8110 	beq.w	8007948 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a2c      	ldr	r2, [pc, #176]	; (80077e0 <HAL_DMA_IRQHandler+0x690>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d04a      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a2b      	ldr	r2, [pc, #172]	; (80077e4 <HAL_DMA_IRQHandler+0x694>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d045      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a29      	ldr	r2, [pc, #164]	; (80077e8 <HAL_DMA_IRQHandler+0x698>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d040      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a28      	ldr	r2, [pc, #160]	; (80077ec <HAL_DMA_IRQHandler+0x69c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d03b      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a26      	ldr	r2, [pc, #152]	; (80077f0 <HAL_DMA_IRQHandler+0x6a0>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d036      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a25      	ldr	r2, [pc, #148]	; (80077f4 <HAL_DMA_IRQHandler+0x6a4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d031      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a23      	ldr	r2, [pc, #140]	; (80077f8 <HAL_DMA_IRQHandler+0x6a8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d02c      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a22      	ldr	r2, [pc, #136]	; (80077fc <HAL_DMA_IRQHandler+0x6ac>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d027      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a20      	ldr	r2, [pc, #128]	; (8007800 <HAL_DMA_IRQHandler+0x6b0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d022      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a1f      	ldr	r2, [pc, #124]	; (8007804 <HAL_DMA_IRQHandler+0x6b4>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d01d      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a1d      	ldr	r2, [pc, #116]	; (8007808 <HAL_DMA_IRQHandler+0x6b8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d018      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a1c      	ldr	r2, [pc, #112]	; (800780c <HAL_DMA_IRQHandler+0x6bc>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d013      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a1a      	ldr	r2, [pc, #104]	; (8007810 <HAL_DMA_IRQHandler+0x6c0>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00e      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a19      	ldr	r2, [pc, #100]	; (8007814 <HAL_DMA_IRQHandler+0x6c4>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d009      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a17      	ldr	r2, [pc, #92]	; (8007818 <HAL_DMA_IRQHandler+0x6c8>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d004      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x678>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a16      	ldr	r2, [pc, #88]	; (800781c <HAL_DMA_IRQHandler+0x6cc>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d12b      	bne.n	8007820 <HAL_DMA_IRQHandler+0x6d0>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0310 	and.w	r3, r3, #16
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bf14      	ite	ne
 80077d6:	2301      	movne	r3, #1
 80077d8:	2300      	moveq	r3, #0
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	e02a      	b.n	8007834 <HAL_DMA_IRQHandler+0x6e4>
 80077de:	bf00      	nop
 80077e0:	40020010 	.word	0x40020010
 80077e4:	40020028 	.word	0x40020028
 80077e8:	40020040 	.word	0x40020040
 80077ec:	40020058 	.word	0x40020058
 80077f0:	40020070 	.word	0x40020070
 80077f4:	40020088 	.word	0x40020088
 80077f8:	400200a0 	.word	0x400200a0
 80077fc:	400200b8 	.word	0x400200b8
 8007800:	40020410 	.word	0x40020410
 8007804:	40020428 	.word	0x40020428
 8007808:	40020440 	.word	0x40020440
 800780c:	40020458 	.word	0x40020458
 8007810:	40020470 	.word	0x40020470
 8007814:	40020488 	.word	0x40020488
 8007818:	400204a0 	.word	0x400204a0
 800781c:	400204b8 	.word	0x400204b8
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	bf14      	ite	ne
 800782e:	2301      	movne	r3, #1
 8007830:	2300      	moveq	r3, #0
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 8087 	beq.w	8007948 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800783e:	f003 031f 	and.w	r3, r3, #31
 8007842:	2220      	movs	r2, #32
 8007844:	409a      	lsls	r2, r3
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b04      	cmp	r3, #4
 8007854:	d139      	bne.n	80078ca <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0216 	bic.w	r2, r2, #22
 8007864:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	695a      	ldr	r2, [r3, #20]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007874:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	2b00      	cmp	r3, #0
 800787c:	d103      	bne.n	8007886 <HAL_DMA_IRQHandler+0x736>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007882:	2b00      	cmp	r3, #0
 8007884:	d007      	beq.n	8007896 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0208 	bic.w	r2, r2, #8
 8007894:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	223f      	movs	r2, #63	; 0x3f
 80078a0:	409a      	lsls	r2, r3
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 834a 	beq.w	8007f54 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	4798      	blx	r3
          }
          return;
 80078c8:	e344      	b.n	8007f54 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d018      	beq.n	800790a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d108      	bne.n	80078f8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d02c      	beq.n	8007948 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	4798      	blx	r3
 80078f6:	e027      	b.n	8007948 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d023      	beq.n	8007948 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	4798      	blx	r3
 8007908:	e01e      	b.n	8007948 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10f      	bne.n	8007938 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0210 	bic.w	r2, r2, #16
 8007926:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793c:	2b00      	cmp	r3, #0
 800793e:	d003      	beq.n	8007948 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 8306 	beq.w	8007f5e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 8088 	beq.w	8007a70 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2204      	movs	r2, #4
 8007964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a7a      	ldr	r2, [pc, #488]	; (8007b58 <HAL_DMA_IRQHandler+0xa08>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d04a      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a79      	ldr	r2, [pc, #484]	; (8007b5c <HAL_DMA_IRQHandler+0xa0c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d045      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a77      	ldr	r2, [pc, #476]	; (8007b60 <HAL_DMA_IRQHandler+0xa10>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d040      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a76      	ldr	r2, [pc, #472]	; (8007b64 <HAL_DMA_IRQHandler+0xa14>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d03b      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a74      	ldr	r2, [pc, #464]	; (8007b68 <HAL_DMA_IRQHandler+0xa18>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d036      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a73      	ldr	r2, [pc, #460]	; (8007b6c <HAL_DMA_IRQHandler+0xa1c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d031      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a71      	ldr	r2, [pc, #452]	; (8007b70 <HAL_DMA_IRQHandler+0xa20>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d02c      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a70      	ldr	r2, [pc, #448]	; (8007b74 <HAL_DMA_IRQHandler+0xa24>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d027      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a6e      	ldr	r2, [pc, #440]	; (8007b78 <HAL_DMA_IRQHandler+0xa28>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d022      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a6d      	ldr	r2, [pc, #436]	; (8007b7c <HAL_DMA_IRQHandler+0xa2c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d01d      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a6b      	ldr	r2, [pc, #428]	; (8007b80 <HAL_DMA_IRQHandler+0xa30>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d018      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a6a      	ldr	r2, [pc, #424]	; (8007b84 <HAL_DMA_IRQHandler+0xa34>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d013      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a68      	ldr	r2, [pc, #416]	; (8007b88 <HAL_DMA_IRQHandler+0xa38>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00e      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a67      	ldr	r2, [pc, #412]	; (8007b8c <HAL_DMA_IRQHandler+0xa3c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d009      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a65      	ldr	r2, [pc, #404]	; (8007b90 <HAL_DMA_IRQHandler+0xa40>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d004      	beq.n	8007a08 <HAL_DMA_IRQHandler+0x8b8>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a64      	ldr	r2, [pc, #400]	; (8007b94 <HAL_DMA_IRQHandler+0xa44>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d108      	bne.n	8007a1a <HAL_DMA_IRQHandler+0x8ca>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0201 	bic.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	e007      	b.n	8007a2a <HAL_DMA_IRQHandler+0x8da>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0201 	bic.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d307      	bcc.n	8007a46 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1f2      	bne.n	8007a2a <HAL_DMA_IRQHandler+0x8da>
 8007a44:	e000      	b.n	8007a48 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007a46:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d004      	beq.n	8007a60 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2203      	movs	r2, #3
 8007a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007a5e:	e003      	b.n	8007a68 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 8272 	beq.w	8007f5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
 8007a82:	e26c      	b.n	8007f5e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a43      	ldr	r2, [pc, #268]	; (8007b98 <HAL_DMA_IRQHandler+0xa48>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d022      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x984>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a42      	ldr	r2, [pc, #264]	; (8007b9c <HAL_DMA_IRQHandler+0xa4c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d01d      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x984>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a40      	ldr	r2, [pc, #256]	; (8007ba0 <HAL_DMA_IRQHandler+0xa50>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d018      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x984>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a3f      	ldr	r2, [pc, #252]	; (8007ba4 <HAL_DMA_IRQHandler+0xa54>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d013      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x984>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a3d      	ldr	r2, [pc, #244]	; (8007ba8 <HAL_DMA_IRQHandler+0xa58>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d00e      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x984>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a3c      	ldr	r2, [pc, #240]	; (8007bac <HAL_DMA_IRQHandler+0xa5c>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d009      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x984>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a3a      	ldr	r2, [pc, #232]	; (8007bb0 <HAL_DMA_IRQHandler+0xa60>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d004      	beq.n	8007ad4 <HAL_DMA_IRQHandler+0x984>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a39      	ldr	r2, [pc, #228]	; (8007bb4 <HAL_DMA_IRQHandler+0xa64>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d101      	bne.n	8007ad8 <HAL_DMA_IRQHandler+0x988>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e000      	b.n	8007ada <HAL_DMA_IRQHandler+0x98a>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 823f 	beq.w	8007f5e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aec:	f003 031f 	and.w	r3, r3, #31
 8007af0:	2204      	movs	r2, #4
 8007af2:	409a      	lsls	r2, r3
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	4013      	ands	r3, r2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 80cd 	beq.w	8007c98 <HAL_DMA_IRQHandler+0xb48>
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 80c7 	beq.w	8007c98 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b0e:	f003 031f 	and.w	r3, r3, #31
 8007b12:	2204      	movs	r2, #4
 8007b14:	409a      	lsls	r2, r3
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d049      	beq.n	8007bb8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d109      	bne.n	8007b42 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 8210 	beq.w	8007f58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b40:	e20a      	b.n	8007f58 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 8206 	beq.w	8007f58 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b54:	e200      	b.n	8007f58 <HAL_DMA_IRQHandler+0xe08>
 8007b56:	bf00      	nop
 8007b58:	40020010 	.word	0x40020010
 8007b5c:	40020028 	.word	0x40020028
 8007b60:	40020040 	.word	0x40020040
 8007b64:	40020058 	.word	0x40020058
 8007b68:	40020070 	.word	0x40020070
 8007b6c:	40020088 	.word	0x40020088
 8007b70:	400200a0 	.word	0x400200a0
 8007b74:	400200b8 	.word	0x400200b8
 8007b78:	40020410 	.word	0x40020410
 8007b7c:	40020428 	.word	0x40020428
 8007b80:	40020440 	.word	0x40020440
 8007b84:	40020458 	.word	0x40020458
 8007b88:	40020470 	.word	0x40020470
 8007b8c:	40020488 	.word	0x40020488
 8007b90:	400204a0 	.word	0x400204a0
 8007b94:	400204b8 	.word	0x400204b8
 8007b98:	58025408 	.word	0x58025408
 8007b9c:	5802541c 	.word	0x5802541c
 8007ba0:	58025430 	.word	0x58025430
 8007ba4:	58025444 	.word	0x58025444
 8007ba8:	58025458 	.word	0x58025458
 8007bac:	5802546c 	.word	0x5802546c
 8007bb0:	58025480 	.word	0x58025480
 8007bb4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	f003 0320 	and.w	r3, r3, #32
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d160      	bne.n	8007c84 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a7f      	ldr	r2, [pc, #508]	; (8007dc4 <HAL_DMA_IRQHandler+0xc74>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d04a      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a7d      	ldr	r2, [pc, #500]	; (8007dc8 <HAL_DMA_IRQHandler+0xc78>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d045      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a7c      	ldr	r2, [pc, #496]	; (8007dcc <HAL_DMA_IRQHandler+0xc7c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d040      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a7a      	ldr	r2, [pc, #488]	; (8007dd0 <HAL_DMA_IRQHandler+0xc80>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d03b      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a79      	ldr	r2, [pc, #484]	; (8007dd4 <HAL_DMA_IRQHandler+0xc84>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d036      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a77      	ldr	r2, [pc, #476]	; (8007dd8 <HAL_DMA_IRQHandler+0xc88>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d031      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a76      	ldr	r2, [pc, #472]	; (8007ddc <HAL_DMA_IRQHandler+0xc8c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d02c      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a74      	ldr	r2, [pc, #464]	; (8007de0 <HAL_DMA_IRQHandler+0xc90>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d027      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a73      	ldr	r2, [pc, #460]	; (8007de4 <HAL_DMA_IRQHandler+0xc94>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d022      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a71      	ldr	r2, [pc, #452]	; (8007de8 <HAL_DMA_IRQHandler+0xc98>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d01d      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a70      	ldr	r2, [pc, #448]	; (8007dec <HAL_DMA_IRQHandler+0xc9c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d018      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a6e      	ldr	r2, [pc, #440]	; (8007df0 <HAL_DMA_IRQHandler+0xca0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d013      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a6d      	ldr	r2, [pc, #436]	; (8007df4 <HAL_DMA_IRQHandler+0xca4>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d00e      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a6b      	ldr	r2, [pc, #428]	; (8007df8 <HAL_DMA_IRQHandler+0xca8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d009      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a6a      	ldr	r2, [pc, #424]	; (8007dfc <HAL_DMA_IRQHandler+0xcac>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d004      	beq.n	8007c62 <HAL_DMA_IRQHandler+0xb12>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a68      	ldr	r2, [pc, #416]	; (8007e00 <HAL_DMA_IRQHandler+0xcb0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d108      	bne.n	8007c74 <HAL_DMA_IRQHandler+0xb24>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 0208 	bic.w	r2, r2, #8
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	e007      	b.n	8007c84 <HAL_DMA_IRQHandler+0xb34>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0204 	bic.w	r2, r2, #4
 8007c82:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 8165 	beq.w	8007f58 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c96:	e15f      	b.n	8007f58 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c9c:	f003 031f 	and.w	r3, r3, #31
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	409a      	lsls	r2, r3
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 80c5 	beq.w	8007e38 <HAL_DMA_IRQHandler+0xce8>
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80bf 	beq.w	8007e38 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cbe:	f003 031f 	and.w	r3, r3, #31
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	409a      	lsls	r2, r3
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d018      	beq.n	8007d06 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d109      	bne.n	8007cf2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 813a 	beq.w	8007f5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cf0:	e134      	b.n	8007f5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 8130 	beq.w	8007f5c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d04:	e12a      	b.n	8007f5c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f003 0320 	and.w	r3, r3, #32
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 8089 	bne.w	8007e24 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a2b      	ldr	r2, [pc, #172]	; (8007dc4 <HAL_DMA_IRQHandler+0xc74>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d04a      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a29      	ldr	r2, [pc, #164]	; (8007dc8 <HAL_DMA_IRQHandler+0xc78>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d045      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a28      	ldr	r2, [pc, #160]	; (8007dcc <HAL_DMA_IRQHandler+0xc7c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d040      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a26      	ldr	r2, [pc, #152]	; (8007dd0 <HAL_DMA_IRQHandler+0xc80>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d03b      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a25      	ldr	r2, [pc, #148]	; (8007dd4 <HAL_DMA_IRQHandler+0xc84>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d036      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a23      	ldr	r2, [pc, #140]	; (8007dd8 <HAL_DMA_IRQHandler+0xc88>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d031      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a22      	ldr	r2, [pc, #136]	; (8007ddc <HAL_DMA_IRQHandler+0xc8c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d02c      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a20      	ldr	r2, [pc, #128]	; (8007de0 <HAL_DMA_IRQHandler+0xc90>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d027      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1f      	ldr	r2, [pc, #124]	; (8007de4 <HAL_DMA_IRQHandler+0xc94>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d022      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a1d      	ldr	r2, [pc, #116]	; (8007de8 <HAL_DMA_IRQHandler+0xc98>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d01d      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a1c      	ldr	r2, [pc, #112]	; (8007dec <HAL_DMA_IRQHandler+0xc9c>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d018      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a1a      	ldr	r2, [pc, #104]	; (8007df0 <HAL_DMA_IRQHandler+0xca0>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a19      	ldr	r2, [pc, #100]	; (8007df4 <HAL_DMA_IRQHandler+0xca4>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00e      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a17      	ldr	r2, [pc, #92]	; (8007df8 <HAL_DMA_IRQHandler+0xca8>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d009      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a16      	ldr	r2, [pc, #88]	; (8007dfc <HAL_DMA_IRQHandler+0xcac>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d004      	beq.n	8007db2 <HAL_DMA_IRQHandler+0xc62>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a14      	ldr	r2, [pc, #80]	; (8007e00 <HAL_DMA_IRQHandler+0xcb0>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d128      	bne.n	8007e04 <HAL_DMA_IRQHandler+0xcb4>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0214 	bic.w	r2, r2, #20
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	e027      	b.n	8007e14 <HAL_DMA_IRQHandler+0xcc4>
 8007dc4:	40020010 	.word	0x40020010
 8007dc8:	40020028 	.word	0x40020028
 8007dcc:	40020040 	.word	0x40020040
 8007dd0:	40020058 	.word	0x40020058
 8007dd4:	40020070 	.word	0x40020070
 8007dd8:	40020088 	.word	0x40020088
 8007ddc:	400200a0 	.word	0x400200a0
 8007de0:	400200b8 	.word	0x400200b8
 8007de4:	40020410 	.word	0x40020410
 8007de8:	40020428 	.word	0x40020428
 8007dec:	40020440 	.word	0x40020440
 8007df0:	40020458 	.word	0x40020458
 8007df4:	40020470 	.word	0x40020470
 8007df8:	40020488 	.word	0x40020488
 8007dfc:	400204a0 	.word	0x400204a0
 8007e00:	400204b8 	.word	0x400204b8
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f022 020a 	bic.w	r2, r2, #10
 8007e12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 8097 	beq.w	8007f5c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e36:	e091      	b.n	8007f5c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e3c:	f003 031f 	and.w	r3, r3, #31
 8007e40:	2208      	movs	r2, #8
 8007e42:	409a      	lsls	r2, r3
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	4013      	ands	r3, r2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 8088 	beq.w	8007f5e <HAL_DMA_IRQHandler+0xe0e>
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f003 0308 	and.w	r3, r3, #8
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 8082 	beq.w	8007f5e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a41      	ldr	r2, [pc, #260]	; (8007f64 <HAL_DMA_IRQHandler+0xe14>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d04a      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a3f      	ldr	r2, [pc, #252]	; (8007f68 <HAL_DMA_IRQHandler+0xe18>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d045      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a3e      	ldr	r2, [pc, #248]	; (8007f6c <HAL_DMA_IRQHandler+0xe1c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d040      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a3c      	ldr	r2, [pc, #240]	; (8007f70 <HAL_DMA_IRQHandler+0xe20>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d03b      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a3b      	ldr	r2, [pc, #236]	; (8007f74 <HAL_DMA_IRQHandler+0xe24>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d036      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a39      	ldr	r2, [pc, #228]	; (8007f78 <HAL_DMA_IRQHandler+0xe28>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d031      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a38      	ldr	r2, [pc, #224]	; (8007f7c <HAL_DMA_IRQHandler+0xe2c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d02c      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a36      	ldr	r2, [pc, #216]	; (8007f80 <HAL_DMA_IRQHandler+0xe30>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d027      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a35      	ldr	r2, [pc, #212]	; (8007f84 <HAL_DMA_IRQHandler+0xe34>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d022      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a33      	ldr	r2, [pc, #204]	; (8007f88 <HAL_DMA_IRQHandler+0xe38>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d01d      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a32      	ldr	r2, [pc, #200]	; (8007f8c <HAL_DMA_IRQHandler+0xe3c>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d018      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a30      	ldr	r2, [pc, #192]	; (8007f90 <HAL_DMA_IRQHandler+0xe40>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d013      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a2f      	ldr	r2, [pc, #188]	; (8007f94 <HAL_DMA_IRQHandler+0xe44>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d00e      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a2d      	ldr	r2, [pc, #180]	; (8007f98 <HAL_DMA_IRQHandler+0xe48>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d009      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a2c      	ldr	r2, [pc, #176]	; (8007f9c <HAL_DMA_IRQHandler+0xe4c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d004      	beq.n	8007efa <HAL_DMA_IRQHandler+0xdaa>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a2a      	ldr	r2, [pc, #168]	; (8007fa0 <HAL_DMA_IRQHandler+0xe50>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d108      	bne.n	8007f0c <HAL_DMA_IRQHandler+0xdbc>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 021c 	bic.w	r2, r2, #28
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	e007      	b.n	8007f1c <HAL_DMA_IRQHandler+0xdcc>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 020e 	bic.w	r2, r2, #14
 8007f1a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f20:	f003 031f 	and.w	r3, r3, #31
 8007f24:	2201      	movs	r2, #1
 8007f26:	409a      	lsls	r2, r3
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d009      	beq.n	8007f5e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
 8007f52:	e004      	b.n	8007f5e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007f54:	bf00      	nop
 8007f56:	e002      	b.n	8007f5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f58:	bf00      	nop
 8007f5a:	e000      	b.n	8007f5e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f5c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007f5e:	3728      	adds	r7, #40	; 0x28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40020010 	.word	0x40020010
 8007f68:	40020028 	.word	0x40020028
 8007f6c:	40020040 	.word	0x40020040
 8007f70:	40020058 	.word	0x40020058
 8007f74:	40020070 	.word	0x40020070
 8007f78:	40020088 	.word	0x40020088
 8007f7c:	400200a0 	.word	0x400200a0
 8007f80:	400200b8 	.word	0x400200b8
 8007f84:	40020410 	.word	0x40020410
 8007f88:	40020428 	.word	0x40020428
 8007f8c:	40020440 	.word	0x40020440
 8007f90:	40020458 	.word	0x40020458
 8007f94:	40020470 	.word	0x40020470
 8007f98:	40020488 	.word	0x40020488
 8007f9c:	400204a0 	.word	0x400204a0
 8007fa0:	400204b8 	.word	0x400204b8

08007fa4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b087      	sub	sp, #28
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
 8007fb0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fbc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a7f      	ldr	r2, [pc, #508]	; (80081c0 <DMA_SetConfig+0x21c>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d072      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a7d      	ldr	r2, [pc, #500]	; (80081c4 <DMA_SetConfig+0x220>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d06d      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a7c      	ldr	r2, [pc, #496]	; (80081c8 <DMA_SetConfig+0x224>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d068      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a7a      	ldr	r2, [pc, #488]	; (80081cc <DMA_SetConfig+0x228>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d063      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a79      	ldr	r2, [pc, #484]	; (80081d0 <DMA_SetConfig+0x22c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d05e      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a77      	ldr	r2, [pc, #476]	; (80081d4 <DMA_SetConfig+0x230>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d059      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a76      	ldr	r2, [pc, #472]	; (80081d8 <DMA_SetConfig+0x234>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d054      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a74      	ldr	r2, [pc, #464]	; (80081dc <DMA_SetConfig+0x238>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d04f      	beq.n	80080ae <DMA_SetConfig+0x10a>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a73      	ldr	r2, [pc, #460]	; (80081e0 <DMA_SetConfig+0x23c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d04a      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a71      	ldr	r2, [pc, #452]	; (80081e4 <DMA_SetConfig+0x240>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d045      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a70      	ldr	r2, [pc, #448]	; (80081e8 <DMA_SetConfig+0x244>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d040      	beq.n	80080ae <DMA_SetConfig+0x10a>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a6e      	ldr	r2, [pc, #440]	; (80081ec <DMA_SetConfig+0x248>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d03b      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a6d      	ldr	r2, [pc, #436]	; (80081f0 <DMA_SetConfig+0x24c>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d036      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a6b      	ldr	r2, [pc, #428]	; (80081f4 <DMA_SetConfig+0x250>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d031      	beq.n	80080ae <DMA_SetConfig+0x10a>
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a6a      	ldr	r2, [pc, #424]	; (80081f8 <DMA_SetConfig+0x254>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d02c      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a68      	ldr	r2, [pc, #416]	; (80081fc <DMA_SetConfig+0x258>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d027      	beq.n	80080ae <DMA_SetConfig+0x10a>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a67      	ldr	r2, [pc, #412]	; (8008200 <DMA_SetConfig+0x25c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d022      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a65      	ldr	r2, [pc, #404]	; (8008204 <DMA_SetConfig+0x260>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d01d      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a64      	ldr	r2, [pc, #400]	; (8008208 <DMA_SetConfig+0x264>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d018      	beq.n	80080ae <DMA_SetConfig+0x10a>
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a62      	ldr	r2, [pc, #392]	; (800820c <DMA_SetConfig+0x268>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d013      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a61      	ldr	r2, [pc, #388]	; (8008210 <DMA_SetConfig+0x26c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d00e      	beq.n	80080ae <DMA_SetConfig+0x10a>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a5f      	ldr	r2, [pc, #380]	; (8008214 <DMA_SetConfig+0x270>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d009      	beq.n	80080ae <DMA_SetConfig+0x10a>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a5e      	ldr	r2, [pc, #376]	; (8008218 <DMA_SetConfig+0x274>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d004      	beq.n	80080ae <DMA_SetConfig+0x10a>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a5c      	ldr	r2, [pc, #368]	; (800821c <DMA_SetConfig+0x278>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d101      	bne.n	80080b2 <DMA_SetConfig+0x10e>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <DMA_SetConfig+0x110>
 80080b2:	2300      	movs	r3, #0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00d      	beq.n	80080d4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80080c0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d004      	beq.n	80080d4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80080d2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a39      	ldr	r2, [pc, #228]	; (80081c0 <DMA_SetConfig+0x21c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d04a      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a38      	ldr	r2, [pc, #224]	; (80081c4 <DMA_SetConfig+0x220>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d045      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a36      	ldr	r2, [pc, #216]	; (80081c8 <DMA_SetConfig+0x224>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d040      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a35      	ldr	r2, [pc, #212]	; (80081cc <DMA_SetConfig+0x228>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d03b      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a33      	ldr	r2, [pc, #204]	; (80081d0 <DMA_SetConfig+0x22c>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d036      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a32      	ldr	r2, [pc, #200]	; (80081d4 <DMA_SetConfig+0x230>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d031      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a30      	ldr	r2, [pc, #192]	; (80081d8 <DMA_SetConfig+0x234>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d02c      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a2f      	ldr	r2, [pc, #188]	; (80081dc <DMA_SetConfig+0x238>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d027      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a2d      	ldr	r2, [pc, #180]	; (80081e0 <DMA_SetConfig+0x23c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d022      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a2c      	ldr	r2, [pc, #176]	; (80081e4 <DMA_SetConfig+0x240>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d01d      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a2a      	ldr	r2, [pc, #168]	; (80081e8 <DMA_SetConfig+0x244>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d018      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a29      	ldr	r2, [pc, #164]	; (80081ec <DMA_SetConfig+0x248>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d013      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a27      	ldr	r2, [pc, #156]	; (80081f0 <DMA_SetConfig+0x24c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d00e      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a26      	ldr	r2, [pc, #152]	; (80081f4 <DMA_SetConfig+0x250>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d009      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a24      	ldr	r2, [pc, #144]	; (80081f8 <DMA_SetConfig+0x254>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d004      	beq.n	8008174 <DMA_SetConfig+0x1d0>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a23      	ldr	r2, [pc, #140]	; (80081fc <DMA_SetConfig+0x258>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d101      	bne.n	8008178 <DMA_SetConfig+0x1d4>
 8008174:	2301      	movs	r3, #1
 8008176:	e000      	b.n	800817a <DMA_SetConfig+0x1d6>
 8008178:	2300      	movs	r3, #0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d059      	beq.n	8008232 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008182:	f003 031f 	and.w	r3, r3, #31
 8008186:	223f      	movs	r2, #63	; 0x3f
 8008188:	409a      	lsls	r2, r3
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800819c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	2b40      	cmp	r3, #64	; 0x40
 80081ac:	d138      	bne.n	8008220 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68ba      	ldr	r2, [r7, #8]
 80081bc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80081be:	e086      	b.n	80082ce <DMA_SetConfig+0x32a>
 80081c0:	40020010 	.word	0x40020010
 80081c4:	40020028 	.word	0x40020028
 80081c8:	40020040 	.word	0x40020040
 80081cc:	40020058 	.word	0x40020058
 80081d0:	40020070 	.word	0x40020070
 80081d4:	40020088 	.word	0x40020088
 80081d8:	400200a0 	.word	0x400200a0
 80081dc:	400200b8 	.word	0x400200b8
 80081e0:	40020410 	.word	0x40020410
 80081e4:	40020428 	.word	0x40020428
 80081e8:	40020440 	.word	0x40020440
 80081ec:	40020458 	.word	0x40020458
 80081f0:	40020470 	.word	0x40020470
 80081f4:	40020488 	.word	0x40020488
 80081f8:	400204a0 	.word	0x400204a0
 80081fc:	400204b8 	.word	0x400204b8
 8008200:	58025408 	.word	0x58025408
 8008204:	5802541c 	.word	0x5802541c
 8008208:	58025430 	.word	0x58025430
 800820c:	58025444 	.word	0x58025444
 8008210:	58025458 	.word	0x58025458
 8008214:	5802546c 	.word	0x5802546c
 8008218:	58025480 	.word	0x58025480
 800821c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	60da      	str	r2, [r3, #12]
}
 8008230:	e04d      	b.n	80082ce <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a29      	ldr	r2, [pc, #164]	; (80082dc <DMA_SetConfig+0x338>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d022      	beq.n	8008282 <DMA_SetConfig+0x2de>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a27      	ldr	r2, [pc, #156]	; (80082e0 <DMA_SetConfig+0x33c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d01d      	beq.n	8008282 <DMA_SetConfig+0x2de>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a26      	ldr	r2, [pc, #152]	; (80082e4 <DMA_SetConfig+0x340>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d018      	beq.n	8008282 <DMA_SetConfig+0x2de>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a24      	ldr	r2, [pc, #144]	; (80082e8 <DMA_SetConfig+0x344>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d013      	beq.n	8008282 <DMA_SetConfig+0x2de>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a23      	ldr	r2, [pc, #140]	; (80082ec <DMA_SetConfig+0x348>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00e      	beq.n	8008282 <DMA_SetConfig+0x2de>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a21      	ldr	r2, [pc, #132]	; (80082f0 <DMA_SetConfig+0x34c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d009      	beq.n	8008282 <DMA_SetConfig+0x2de>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a20      	ldr	r2, [pc, #128]	; (80082f4 <DMA_SetConfig+0x350>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d004      	beq.n	8008282 <DMA_SetConfig+0x2de>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a1e      	ldr	r2, [pc, #120]	; (80082f8 <DMA_SetConfig+0x354>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d101      	bne.n	8008286 <DMA_SetConfig+0x2e2>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <DMA_SetConfig+0x2e4>
 8008286:	2300      	movs	r3, #0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d020      	beq.n	80082ce <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008290:	f003 031f 	and.w	r3, r3, #31
 8008294:	2201      	movs	r2, #1
 8008296:	409a      	lsls	r2, r3
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	2b40      	cmp	r3, #64	; 0x40
 80082aa:	d108      	bne.n	80082be <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	60da      	str	r2, [r3, #12]
}
 80082bc:	e007      	b.n	80082ce <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	60da      	str	r2, [r3, #12]
}
 80082ce:	bf00      	nop
 80082d0:	371c      	adds	r7, #28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	58025408 	.word	0x58025408
 80082e0:	5802541c 	.word	0x5802541c
 80082e4:	58025430 	.word	0x58025430
 80082e8:	58025444 	.word	0x58025444
 80082ec:	58025458 	.word	0x58025458
 80082f0:	5802546c 	.word	0x5802546c
 80082f4:	58025480 	.word	0x58025480
 80082f8:	58025494 	.word	0x58025494

080082fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a42      	ldr	r2, [pc, #264]	; (8008414 <DMA_CalcBaseAndBitshift+0x118>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d04a      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a41      	ldr	r2, [pc, #260]	; (8008418 <DMA_CalcBaseAndBitshift+0x11c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d045      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a3f      	ldr	r2, [pc, #252]	; (800841c <DMA_CalcBaseAndBitshift+0x120>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d040      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a3e      	ldr	r2, [pc, #248]	; (8008420 <DMA_CalcBaseAndBitshift+0x124>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d03b      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a3c      	ldr	r2, [pc, #240]	; (8008424 <DMA_CalcBaseAndBitshift+0x128>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d036      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a3b      	ldr	r2, [pc, #236]	; (8008428 <DMA_CalcBaseAndBitshift+0x12c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d031      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a39      	ldr	r2, [pc, #228]	; (800842c <DMA_CalcBaseAndBitshift+0x130>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d02c      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a38      	ldr	r2, [pc, #224]	; (8008430 <DMA_CalcBaseAndBitshift+0x134>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d027      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a36      	ldr	r2, [pc, #216]	; (8008434 <DMA_CalcBaseAndBitshift+0x138>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d022      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a35      	ldr	r2, [pc, #212]	; (8008438 <DMA_CalcBaseAndBitshift+0x13c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d01d      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a33      	ldr	r2, [pc, #204]	; (800843c <DMA_CalcBaseAndBitshift+0x140>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d018      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a32      	ldr	r2, [pc, #200]	; (8008440 <DMA_CalcBaseAndBitshift+0x144>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d013      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a30      	ldr	r2, [pc, #192]	; (8008444 <DMA_CalcBaseAndBitshift+0x148>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d00e      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a2f      	ldr	r2, [pc, #188]	; (8008448 <DMA_CalcBaseAndBitshift+0x14c>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d009      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a2d      	ldr	r2, [pc, #180]	; (800844c <DMA_CalcBaseAndBitshift+0x150>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d004      	beq.n	80083a4 <DMA_CalcBaseAndBitshift+0xa8>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a2c      	ldr	r2, [pc, #176]	; (8008450 <DMA_CalcBaseAndBitshift+0x154>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d101      	bne.n	80083a8 <DMA_CalcBaseAndBitshift+0xac>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e000      	b.n	80083aa <DMA_CalcBaseAndBitshift+0xae>
 80083a8:	2300      	movs	r3, #0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d024      	beq.n	80083f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	3b10      	subs	r3, #16
 80083b6:	4a27      	ldr	r2, [pc, #156]	; (8008454 <DMA_CalcBaseAndBitshift+0x158>)
 80083b8:	fba2 2303 	umull	r2, r3, r2, r3
 80083bc:	091b      	lsrs	r3, r3, #4
 80083be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	4a24      	ldr	r2, [pc, #144]	; (8008458 <DMA_CalcBaseAndBitshift+0x15c>)
 80083c8:	5cd3      	ldrb	r3, [r2, r3]
 80083ca:	461a      	mov	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d908      	bls.n	80083e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	4b1f      	ldr	r3, [pc, #124]	; (800845c <DMA_CalcBaseAndBitshift+0x160>)
 80083de:	4013      	ands	r3, r2
 80083e0:	1d1a      	adds	r2, r3, #4
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	659a      	str	r2, [r3, #88]	; 0x58
 80083e6:	e00d      	b.n	8008404 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	461a      	mov	r2, r3
 80083ee:	4b1b      	ldr	r3, [pc, #108]	; (800845c <DMA_CalcBaseAndBitshift+0x160>)
 80083f0:	4013      	ands	r3, r2
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	6593      	str	r3, [r2, #88]	; 0x58
 80083f6:	e005      	b.n	8008404 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	40020010 	.word	0x40020010
 8008418:	40020028 	.word	0x40020028
 800841c:	40020040 	.word	0x40020040
 8008420:	40020058 	.word	0x40020058
 8008424:	40020070 	.word	0x40020070
 8008428:	40020088 	.word	0x40020088
 800842c:	400200a0 	.word	0x400200a0
 8008430:	400200b8 	.word	0x400200b8
 8008434:	40020410 	.word	0x40020410
 8008438:	40020428 	.word	0x40020428
 800843c:	40020440 	.word	0x40020440
 8008440:	40020458 	.word	0x40020458
 8008444:	40020470 	.word	0x40020470
 8008448:	40020488 	.word	0x40020488
 800844c:	400204a0 	.word	0x400204a0
 8008450:	400204b8 	.word	0x400204b8
 8008454:	aaaaaaab 	.word	0xaaaaaaab
 8008458:	08017254 	.word	0x08017254
 800845c:	fffffc00 	.word	0xfffffc00

08008460 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d120      	bne.n	80084b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008478:	2b03      	cmp	r3, #3
 800847a:	d858      	bhi.n	800852e <DMA_CheckFifoParam+0xce>
 800847c:	a201      	add	r2, pc, #4	; (adr r2, 8008484 <DMA_CheckFifoParam+0x24>)
 800847e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008482:	bf00      	nop
 8008484:	08008495 	.word	0x08008495
 8008488:	080084a7 	.word	0x080084a7
 800848c:	08008495 	.word	0x08008495
 8008490:	0800852f 	.word	0x0800852f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d048      	beq.n	8008532 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084a4:	e045      	b.n	8008532 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80084ae:	d142      	bne.n	8008536 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084b4:	e03f      	b.n	8008536 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084be:	d123      	bne.n	8008508 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d838      	bhi.n	800853a <DMA_CheckFifoParam+0xda>
 80084c8:	a201      	add	r2, pc, #4	; (adr r2, 80084d0 <DMA_CheckFifoParam+0x70>)
 80084ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ce:	bf00      	nop
 80084d0:	080084e1 	.word	0x080084e1
 80084d4:	080084e7 	.word	0x080084e7
 80084d8:	080084e1 	.word	0x080084e1
 80084dc:	080084f9 	.word	0x080084f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	73fb      	strb	r3, [r7, #15]
        break;
 80084e4:	e030      	b.n	8008548 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d025      	beq.n	800853e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084f6:	e022      	b.n	800853e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008500:	d11f      	bne.n	8008542 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008506:	e01c      	b.n	8008542 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800850c:	2b02      	cmp	r3, #2
 800850e:	d902      	bls.n	8008516 <DMA_CheckFifoParam+0xb6>
 8008510:	2b03      	cmp	r3, #3
 8008512:	d003      	beq.n	800851c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008514:	e018      	b.n	8008548 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	73fb      	strb	r3, [r7, #15]
        break;
 800851a:	e015      	b.n	8008548 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00e      	beq.n	8008546 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	73fb      	strb	r3, [r7, #15]
    break;
 800852c:	e00b      	b.n	8008546 <DMA_CheckFifoParam+0xe6>
        break;
 800852e:	bf00      	nop
 8008530:	e00a      	b.n	8008548 <DMA_CheckFifoParam+0xe8>
        break;
 8008532:	bf00      	nop
 8008534:	e008      	b.n	8008548 <DMA_CheckFifoParam+0xe8>
        break;
 8008536:	bf00      	nop
 8008538:	e006      	b.n	8008548 <DMA_CheckFifoParam+0xe8>
        break;
 800853a:	bf00      	nop
 800853c:	e004      	b.n	8008548 <DMA_CheckFifoParam+0xe8>
        break;
 800853e:	bf00      	nop
 8008540:	e002      	b.n	8008548 <DMA_CheckFifoParam+0xe8>
        break;
 8008542:	bf00      	nop
 8008544:	e000      	b.n	8008548 <DMA_CheckFifoParam+0xe8>
    break;
 8008546:	bf00      	nop
    }
  }

  return status;
 8008548:	7bfb      	ldrb	r3, [r7, #15]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop

08008558 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a38      	ldr	r2, [pc, #224]	; (800864c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d022      	beq.n	80085b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a36      	ldr	r2, [pc, #216]	; (8008650 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d01d      	beq.n	80085b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a35      	ldr	r2, [pc, #212]	; (8008654 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d018      	beq.n	80085b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a33      	ldr	r2, [pc, #204]	; (8008658 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d013      	beq.n	80085b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a32      	ldr	r2, [pc, #200]	; (800865c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00e      	beq.n	80085b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a30      	ldr	r2, [pc, #192]	; (8008660 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d009      	beq.n	80085b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a2f      	ldr	r2, [pc, #188]	; (8008664 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d004      	beq.n	80085b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a2d      	ldr	r2, [pc, #180]	; (8008668 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d101      	bne.n	80085ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80085b6:	2301      	movs	r3, #1
 80085b8:	e000      	b.n	80085bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80085ba:	2300      	movs	r3, #0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01a      	beq.n	80085f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	3b08      	subs	r3, #8
 80085c8:	4a28      	ldr	r2, [pc, #160]	; (800866c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80085ca:	fba2 2303 	umull	r2, r3, r2, r3
 80085ce:	091b      	lsrs	r3, r3, #4
 80085d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	4b26      	ldr	r3, [pc, #152]	; (8008670 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	461a      	mov	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a24      	ldr	r2, [pc, #144]	; (8008674 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80085e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f003 031f 	and.w	r3, r3, #31
 80085ec:	2201      	movs	r2, #1
 80085ee:	409a      	lsls	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80085f4:	e024      	b.n	8008640 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	3b10      	subs	r3, #16
 80085fe:	4a1e      	ldr	r2, [pc, #120]	; (8008678 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008600:	fba2 2303 	umull	r2, r3, r2, r3
 8008604:	091b      	lsrs	r3, r3, #4
 8008606:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	4a1c      	ldr	r2, [pc, #112]	; (800867c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d806      	bhi.n	800861e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	4a1b      	ldr	r2, [pc, #108]	; (8008680 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d902      	bls.n	800861e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3308      	adds	r3, #8
 800861c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	4b18      	ldr	r3, [pc, #96]	; (8008684 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	461a      	mov	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a16      	ldr	r2, [pc, #88]	; (8008688 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008630:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f003 031f 	and.w	r3, r3, #31
 8008638:	2201      	movs	r2, #1
 800863a:	409a      	lsls	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008640:	bf00      	nop
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	58025408 	.word	0x58025408
 8008650:	5802541c 	.word	0x5802541c
 8008654:	58025430 	.word	0x58025430
 8008658:	58025444 	.word	0x58025444
 800865c:	58025458 	.word	0x58025458
 8008660:	5802546c 	.word	0x5802546c
 8008664:	58025480 	.word	0x58025480
 8008668:	58025494 	.word	0x58025494
 800866c:	cccccccd 	.word	0xcccccccd
 8008670:	16009600 	.word	0x16009600
 8008674:	58025880 	.word	0x58025880
 8008678:	aaaaaaab 	.word	0xaaaaaaab
 800867c:	400204b8 	.word	0x400204b8
 8008680:	4002040f 	.word	0x4002040f
 8008684:	10008200 	.word	0x10008200
 8008688:	40020880 	.word	0x40020880

0800868c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	b2db      	uxtb	r3, r3
 800869a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d04a      	beq.n	8008738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d847      	bhi.n	8008738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a25      	ldr	r2, [pc, #148]	; (8008744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d022      	beq.n	80086f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a24      	ldr	r2, [pc, #144]	; (8008748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d01d      	beq.n	80086f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a22      	ldr	r2, [pc, #136]	; (800874c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d018      	beq.n	80086f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a21      	ldr	r2, [pc, #132]	; (8008750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d013      	beq.n	80086f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a1f      	ldr	r2, [pc, #124]	; (8008754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00e      	beq.n	80086f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a1e      	ldr	r2, [pc, #120]	; (8008758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d009      	beq.n	80086f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a1c      	ldr	r2, [pc, #112]	; (800875c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d004      	beq.n	80086f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a1b      	ldr	r2, [pc, #108]	; (8008760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d101      	bne.n	80086fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80086f8:	2301      	movs	r3, #1
 80086fa:	e000      	b.n	80086fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80086fc:	2300      	movs	r3, #0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00a      	beq.n	8008718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	4b17      	ldr	r3, [pc, #92]	; (8008764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	461a      	mov	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a15      	ldr	r2, [pc, #84]	; (8008768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008714:	671a      	str	r2, [r3, #112]	; 0x70
 8008716:	e009      	b.n	800872c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4b14      	ldr	r3, [pc, #80]	; (800876c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800871c:	4413      	add	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	461a      	mov	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a11      	ldr	r2, [pc, #68]	; (8008770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800872a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	3b01      	subs	r3, #1
 8008730:	2201      	movs	r2, #1
 8008732:	409a      	lsls	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008738:	bf00      	nop
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	58025408 	.word	0x58025408
 8008748:	5802541c 	.word	0x5802541c
 800874c:	58025430 	.word	0x58025430
 8008750:	58025444 	.word	0x58025444
 8008754:	58025458 	.word	0x58025458
 8008758:	5802546c 	.word	0x5802546c
 800875c:	58025480 	.word	0x58025480
 8008760:	58025494 	.word	0x58025494
 8008764:	1600963f 	.word	0x1600963f
 8008768:	58025940 	.word	0x58025940
 800876c:	1000823f 	.word	0x1000823f
 8008770:	40020940 	.word	0x40020940

08008774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008774:	b480      	push	{r7}
 8008776:	b089      	sub	sp, #36	; 0x24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800877e:	2300      	movs	r3, #0
 8008780:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008782:	4b89      	ldr	r3, [pc, #548]	; (80089a8 <HAL_GPIO_Init+0x234>)
 8008784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008786:	e194      	b.n	8008ab2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	2101      	movs	r1, #1
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	fa01 f303 	lsl.w	r3, r1, r3
 8008794:	4013      	ands	r3, r2
 8008796:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 8186 	beq.w	8008aac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f003 0303 	and.w	r3, r3, #3
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d005      	beq.n	80087b8 <HAL_GPIO_Init+0x44>
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f003 0303 	and.w	r3, r3, #3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d130      	bne.n	800881a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	2203      	movs	r2, #3
 80087c4:	fa02 f303 	lsl.w	r3, r2, r3
 80087c8:	43db      	mvns	r3, r3
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	4013      	ands	r3, r2
 80087ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	fa02 f303 	lsl.w	r3, r2, r3
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	4313      	orrs	r3, r2
 80087e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80087ee:	2201      	movs	r2, #1
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	fa02 f303 	lsl.w	r3, r2, r3
 80087f6:	43db      	mvns	r3, r3
 80087f8:	69ba      	ldr	r2, [r7, #24]
 80087fa:	4013      	ands	r3, r2
 80087fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	091b      	lsrs	r3, r3, #4
 8008804:	f003 0201 	and.w	r2, r3, #1
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	fa02 f303 	lsl.w	r3, r2, r3
 800880e:	69ba      	ldr	r2, [r7, #24]
 8008810:	4313      	orrs	r3, r2
 8008812:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	2b03      	cmp	r3, #3
 8008824:	d017      	beq.n	8008856 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	2203      	movs	r2, #3
 8008832:	fa02 f303 	lsl.w	r3, r2, r3
 8008836:	43db      	mvns	r3, r3
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	4013      	ands	r3, r2
 800883c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	689a      	ldr	r2, [r3, #8]
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	fa02 f303 	lsl.w	r3, r2, r3
 800884a:	69ba      	ldr	r2, [r7, #24]
 800884c:	4313      	orrs	r3, r2
 800884e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f003 0303 	and.w	r3, r3, #3
 800885e:	2b02      	cmp	r3, #2
 8008860:	d123      	bne.n	80088aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	08da      	lsrs	r2, r3, #3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	3208      	adds	r2, #8
 800886a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	220f      	movs	r2, #15
 800887a:	fa02 f303 	lsl.w	r3, r2, r3
 800887e:	43db      	mvns	r3, r3
 8008880:	69ba      	ldr	r2, [r7, #24]
 8008882:	4013      	ands	r3, r2
 8008884:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	691a      	ldr	r2, [r3, #16]
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	f003 0307 	and.w	r3, r3, #7
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	fa02 f303 	lsl.w	r3, r2, r3
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	4313      	orrs	r3, r2
 800889a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	08da      	lsrs	r2, r3, #3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3208      	adds	r2, #8
 80088a4:	69b9      	ldr	r1, [r7, #24]
 80088a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	2203      	movs	r2, #3
 80088b6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ba:	43db      	mvns	r3, r3
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	4013      	ands	r3, r2
 80088c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	f003 0203 	and.w	r2, r3, #3
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	fa02 f303 	lsl.w	r3, r2, r3
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	69ba      	ldr	r2, [r7, #24]
 80088dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 80e0 	beq.w	8008aac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088ec:	4b2f      	ldr	r3, [pc, #188]	; (80089ac <HAL_GPIO_Init+0x238>)
 80088ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088f2:	4a2e      	ldr	r2, [pc, #184]	; (80089ac <HAL_GPIO_Init+0x238>)
 80088f4:	f043 0302 	orr.w	r3, r3, #2
 80088f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80088fc:	4b2b      	ldr	r3, [pc, #172]	; (80089ac <HAL_GPIO_Init+0x238>)
 80088fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800890a:	4a29      	ldr	r2, [pc, #164]	; (80089b0 <HAL_GPIO_Init+0x23c>)
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	089b      	lsrs	r3, r3, #2
 8008910:	3302      	adds	r3, #2
 8008912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	220f      	movs	r2, #15
 8008922:	fa02 f303 	lsl.w	r3, r2, r3
 8008926:	43db      	mvns	r3, r3
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	4013      	ands	r3, r2
 800892c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a20      	ldr	r2, [pc, #128]	; (80089b4 <HAL_GPIO_Init+0x240>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d052      	beq.n	80089dc <HAL_GPIO_Init+0x268>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a1f      	ldr	r2, [pc, #124]	; (80089b8 <HAL_GPIO_Init+0x244>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d031      	beq.n	80089a2 <HAL_GPIO_Init+0x22e>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a1e      	ldr	r2, [pc, #120]	; (80089bc <HAL_GPIO_Init+0x248>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d02b      	beq.n	800899e <HAL_GPIO_Init+0x22a>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a1d      	ldr	r2, [pc, #116]	; (80089c0 <HAL_GPIO_Init+0x24c>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d025      	beq.n	800899a <HAL_GPIO_Init+0x226>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a1c      	ldr	r2, [pc, #112]	; (80089c4 <HAL_GPIO_Init+0x250>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d01f      	beq.n	8008996 <HAL_GPIO_Init+0x222>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a1b      	ldr	r2, [pc, #108]	; (80089c8 <HAL_GPIO_Init+0x254>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d019      	beq.n	8008992 <HAL_GPIO_Init+0x21e>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a1a      	ldr	r2, [pc, #104]	; (80089cc <HAL_GPIO_Init+0x258>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d013      	beq.n	800898e <HAL_GPIO_Init+0x21a>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a19      	ldr	r2, [pc, #100]	; (80089d0 <HAL_GPIO_Init+0x25c>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d00d      	beq.n	800898a <HAL_GPIO_Init+0x216>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a18      	ldr	r2, [pc, #96]	; (80089d4 <HAL_GPIO_Init+0x260>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d007      	beq.n	8008986 <HAL_GPIO_Init+0x212>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a17      	ldr	r2, [pc, #92]	; (80089d8 <HAL_GPIO_Init+0x264>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d101      	bne.n	8008982 <HAL_GPIO_Init+0x20e>
 800897e:	2309      	movs	r3, #9
 8008980:	e02d      	b.n	80089de <HAL_GPIO_Init+0x26a>
 8008982:	230a      	movs	r3, #10
 8008984:	e02b      	b.n	80089de <HAL_GPIO_Init+0x26a>
 8008986:	2308      	movs	r3, #8
 8008988:	e029      	b.n	80089de <HAL_GPIO_Init+0x26a>
 800898a:	2307      	movs	r3, #7
 800898c:	e027      	b.n	80089de <HAL_GPIO_Init+0x26a>
 800898e:	2306      	movs	r3, #6
 8008990:	e025      	b.n	80089de <HAL_GPIO_Init+0x26a>
 8008992:	2305      	movs	r3, #5
 8008994:	e023      	b.n	80089de <HAL_GPIO_Init+0x26a>
 8008996:	2304      	movs	r3, #4
 8008998:	e021      	b.n	80089de <HAL_GPIO_Init+0x26a>
 800899a:	2303      	movs	r3, #3
 800899c:	e01f      	b.n	80089de <HAL_GPIO_Init+0x26a>
 800899e:	2302      	movs	r3, #2
 80089a0:	e01d      	b.n	80089de <HAL_GPIO_Init+0x26a>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e01b      	b.n	80089de <HAL_GPIO_Init+0x26a>
 80089a6:	bf00      	nop
 80089a8:	58000080 	.word	0x58000080
 80089ac:	58024400 	.word	0x58024400
 80089b0:	58000400 	.word	0x58000400
 80089b4:	58020000 	.word	0x58020000
 80089b8:	58020400 	.word	0x58020400
 80089bc:	58020800 	.word	0x58020800
 80089c0:	58020c00 	.word	0x58020c00
 80089c4:	58021000 	.word	0x58021000
 80089c8:	58021400 	.word	0x58021400
 80089cc:	58021800 	.word	0x58021800
 80089d0:	58021c00 	.word	0x58021c00
 80089d4:	58022000 	.word	0x58022000
 80089d8:	58022400 	.word	0x58022400
 80089dc:	2300      	movs	r3, #0
 80089de:	69fa      	ldr	r2, [r7, #28]
 80089e0:	f002 0203 	and.w	r2, r2, #3
 80089e4:	0092      	lsls	r2, r2, #2
 80089e6:	4093      	lsls	r3, r2
 80089e8:	69ba      	ldr	r2, [r7, #24]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80089ee:	4938      	ldr	r1, [pc, #224]	; (8008ad0 <HAL_GPIO_Init+0x35c>)
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	089b      	lsrs	r3, r3, #2
 80089f4:	3302      	adds	r3, #2
 80089f6:	69ba      	ldr	r2, [r7, #24]
 80089f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80089fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	43db      	mvns	r3, r3
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	43db      	mvns	r3, r3
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	43db      	mvns	r3, r3
 8008a62:	69ba      	ldr	r2, [r7, #24]
 8008a64:	4013      	ands	r3, r2
 8008a66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	43db      	mvns	r3, r3
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d003      	beq.n	8008aa6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f47f ae63 	bne.w	8008788 <HAL_GPIO_Init+0x14>
  }
}
 8008ac2:	bf00      	nop
 8008ac4:	bf00      	nop
 8008ac6:	3724      	adds	r7, #36	; 0x24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	58000400 	.word	0x58000400

08008ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	460b      	mov	r3, r1
 8008ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	691a      	ldr	r2, [r3, #16]
 8008ae4:	887b      	ldrh	r3, [r7, #2]
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008aec:	2301      	movs	r3, #1
 8008aee:	73fb      	strb	r3, [r7, #15]
 8008af0:	e001      	b.n	8008af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008af2:	2300      	movs	r3, #0
 8008af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	807b      	strh	r3, [r7, #2]
 8008b10:	4613      	mov	r3, r2
 8008b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b14:	787b      	ldrb	r3, [r7, #1]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b1a:	887a      	ldrh	r2, [r7, #2]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008b20:	e003      	b.n	8008b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008b22:	887b      	ldrh	r3, [r7, #2]
 8008b24:	041a      	lsls	r2, r3, #16
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	619a      	str	r2, [r3, #24]
}
 8008b2a:	bf00      	nop
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
	...

08008b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e08b      	b.n	8008c62 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d106      	bne.n	8008b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f7fa f938 	bl	8002dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2224      	movs	r2, #36	; 0x24
 8008b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0201 	bic.w	r2, r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685a      	ldr	r2, [r3, #4]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008b88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d107      	bne.n	8008bb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bae:	609a      	str	r2, [r3, #8]
 8008bb0:	e006      	b.n	8008bc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008bbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d108      	bne.n	8008bda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685a      	ldr	r2, [r3, #4]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bd6:	605a      	str	r2, [r3, #4]
 8008bd8:	e007      	b.n	8008bea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008be8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6859      	ldr	r1, [r3, #4]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	4b1d      	ldr	r3, [pc, #116]	; (8008c6c <HAL_I2C_Init+0x134>)
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	691a      	ldr	r2, [r3, #16]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	69d9      	ldr	r1, [r3, #28]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a1a      	ldr	r2, [r3, #32]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	430a      	orrs	r2, r1
 8008c32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f042 0201 	orr.w	r2, r2, #1
 8008c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	02008000 	.word	0x02008000

08008c70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b088      	sub	sp, #32
 8008c74:	af02      	add	r7, sp, #8
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	607a      	str	r2, [r7, #4]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	817b      	strh	r3, [r7, #10]
 8008c80:	4613      	mov	r3, r2
 8008c82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b20      	cmp	r3, #32
 8008c8e:	f040 80fd 	bne.w	8008e8c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <HAL_I2C_Master_Transmit+0x30>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e0f6      	b.n	8008e8e <HAL_I2C_Master_Transmit+0x21e>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ca8:	f7fa fe00 	bl	80038ac <HAL_GetTick>
 8008cac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	2319      	movs	r3, #25
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	f000 fa0a 	bl	80090d4 <I2C_WaitOnFlagUntilTimeout>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e0e1      	b.n	8008e8e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2221      	movs	r2, #33	; 0x21
 8008cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2210      	movs	r2, #16
 8008cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	893a      	ldrh	r2, [r7, #8]
 8008cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	2bff      	cmp	r3, #255	; 0xff
 8008cfa:	d906      	bls.n	8008d0a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	22ff      	movs	r2, #255	; 0xff
 8008d00:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008d02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	e007      	b.n	8008d1a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008d14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d18:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d024      	beq.n	8008d6c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	781a      	ldrb	r2, [r3, #0]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	1c5a      	adds	r2, r3, #1
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	3301      	adds	r3, #1
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	8979      	ldrh	r1, [r7, #10]
 8008d5e:	4b4e      	ldr	r3, [pc, #312]	; (8008e98 <HAL_I2C_Master_Transmit+0x228>)
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 fc05 	bl	8009574 <I2C_TransferConfig>
 8008d6a:	e066      	b.n	8008e3a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d70:	b2da      	uxtb	r2, r3
 8008d72:	8979      	ldrh	r1, [r7, #10]
 8008d74:	4b48      	ldr	r3, [pc, #288]	; (8008e98 <HAL_I2C_Master_Transmit+0x228>)
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 fbfa 	bl	8009574 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008d80:	e05b      	b.n	8008e3a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	6a39      	ldr	r1, [r7, #32]
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 f9fd 	bl	8009186 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e07b      	b.n	8008e8e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	781a      	ldrb	r2, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	3b01      	subs	r3, #1
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d034      	beq.n	8008e3a <HAL_I2C_Master_Transmit+0x1ca>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d130      	bne.n	8008e3a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	6a3b      	ldr	r3, [r7, #32]
 8008dde:	2200      	movs	r2, #0
 8008de0:	2180      	movs	r1, #128	; 0x80
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 f976 	bl	80090d4 <I2C_WaitOnFlagUntilTimeout>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e04d      	b.n	8008e8e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008df6:	b29b      	uxth	r3, r3
 8008df8:	2bff      	cmp	r3, #255	; 0xff
 8008dfa:	d90e      	bls.n	8008e1a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	22ff      	movs	r2, #255	; 0xff
 8008e00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	8979      	ldrh	r1, [r7, #10]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 fbae 	bl	8009574 <I2C_TransferConfig>
 8008e18:	e00f      	b.n	8008e3a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	8979      	ldrh	r1, [r7, #10]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 fb9d 	bl	8009574 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d19e      	bne.n	8008d82 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	6a39      	ldr	r1, [r7, #32]
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 f9e3 	bl	8009214 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e01a      	b.n	8008e8e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6859      	ldr	r1, [r3, #4]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <HAL_I2C_Master_Transmit+0x22c>)
 8008e6c:	400b      	ands	r3, r1
 8008e6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2220      	movs	r2, #32
 8008e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	e000      	b.n	8008e8e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008e8c:	2302      	movs	r3, #2
  }
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3718      	adds	r7, #24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	80002000 	.word	0x80002000
 8008e9c:	fe00e800 	.word	0xfe00e800

08008ea0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af02      	add	r7, sp, #8
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	607a      	str	r2, [r7, #4]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	460b      	mov	r3, r1
 8008eae:	817b      	strh	r3, [r7, #10]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b20      	cmp	r3, #32
 8008ebe:	f040 80db 	bne.w	8009078 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d101      	bne.n	8008ed0 <HAL_I2C_Master_Receive+0x30>
 8008ecc:	2302      	movs	r3, #2
 8008ece:	e0d4      	b.n	800907a <HAL_I2C_Master_Receive+0x1da>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ed8:	f7fa fce8 	bl	80038ac <HAL_GetTick>
 8008edc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	2319      	movs	r3, #25
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 f8f2 	bl	80090d4 <I2C_WaitOnFlagUntilTimeout>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e0bf      	b.n	800907a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2222      	movs	r2, #34	; 0x22
 8008efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2210      	movs	r2, #16
 8008f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	893a      	ldrh	r2, [r7, #8]
 8008f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	2bff      	cmp	r3, #255	; 0xff
 8008f2a:	d90e      	bls.n	8008f4a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	22ff      	movs	r2, #255	; 0xff
 8008f30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	8979      	ldrh	r1, [r7, #10]
 8008f3a:	4b52      	ldr	r3, [pc, #328]	; (8009084 <HAL_I2C_Master_Receive+0x1e4>)
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 fb16 	bl	8009574 <I2C_TransferConfig>
 8008f48:	e06d      	b.n	8009026 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	8979      	ldrh	r1, [r7, #10]
 8008f5c:	4b49      	ldr	r3, [pc, #292]	; (8009084 <HAL_I2C_Master_Receive+0x1e4>)
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 fb05 	bl	8009574 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008f6a:	e05c      	b.n	8009026 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	6a39      	ldr	r1, [r7, #32]
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 f993 	bl	800929c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e07c      	b.n	800907a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8a:	b2d2      	uxtb	r2, r2
 8008f8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	3b01      	subs	r3, #1
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d034      	beq.n	8009026 <HAL_I2C_Master_Receive+0x186>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d130      	bne.n	8009026 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2180      	movs	r1, #128	; 0x80
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 f880 	bl	80090d4 <I2C_WaitOnFlagUntilTimeout>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d001      	beq.n	8008fde <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e04d      	b.n	800907a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	2bff      	cmp	r3, #255	; 0xff
 8008fe6:	d90e      	bls.n	8009006 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	22ff      	movs	r2, #255	; 0xff
 8008fec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	8979      	ldrh	r1, [r7, #10]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f000 fab8 	bl	8009574 <I2C_TransferConfig>
 8009004:	e00f      	b.n	8009026 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800900a:	b29a      	uxth	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009014:	b2da      	uxtb	r2, r3
 8009016:	8979      	ldrh	r1, [r7, #10]
 8009018:	2300      	movs	r3, #0
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 faa7 	bl	8009574 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800902a:	b29b      	uxth	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	d19d      	bne.n	8008f6c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	6a39      	ldr	r1, [r7, #32]
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 f8ed 	bl	8009214 <I2C_WaitOnSTOPFlagUntilTimeout>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e01a      	b.n	800907a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2220      	movs	r2, #32
 800904a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6859      	ldr	r1, [r3, #4]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <HAL_I2C_Master_Receive+0x1e8>)
 8009058:	400b      	ands	r3, r1
 800905a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2220      	movs	r2, #32
 8009060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	e000      	b.n	800907a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009078:	2302      	movs	r3, #2
  }
}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	80002400 	.word	0x80002400
 8009088:	fe00e800 	.word	0xfe00e800

0800908c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	f003 0302 	and.w	r3, r3, #2
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d103      	bne.n	80090aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2200      	movs	r2, #0
 80090a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d007      	beq.n	80090c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	699a      	ldr	r2, [r3, #24]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f042 0201 	orr.w	r2, r2, #1
 80090c6:	619a      	str	r2, [r3, #24]
  }
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	603b      	str	r3, [r7, #0]
 80090e0:	4613      	mov	r3, r2
 80090e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090e4:	e03b      	b.n	800915e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f000 f962 	bl	80093b4 <I2C_IsErrorOccurred>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e041      	b.n	800917e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009100:	d02d      	beq.n	800915e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009102:	f7fa fbd3 	bl	80038ac <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	683a      	ldr	r2, [r7, #0]
 800910e:	429a      	cmp	r2, r3
 8009110:	d302      	bcc.n	8009118 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d122      	bne.n	800915e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	699a      	ldr	r2, [r3, #24]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	4013      	ands	r3, r2
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	429a      	cmp	r2, r3
 8009126:	bf0c      	ite	eq
 8009128:	2301      	moveq	r3, #1
 800912a:	2300      	movne	r3, #0
 800912c:	b2db      	uxtb	r3, r3
 800912e:	461a      	mov	r2, r3
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	429a      	cmp	r2, r3
 8009134:	d113      	bne.n	800915e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800913a:	f043 0220 	orr.w	r2, r3, #32
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2220      	movs	r2, #32
 8009146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e00f      	b.n	800917e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	699a      	ldr	r2, [r3, #24]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	4013      	ands	r3, r2
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	429a      	cmp	r2, r3
 800916c:	bf0c      	ite	eq
 800916e:	2301      	moveq	r3, #1
 8009170:	2300      	movne	r3, #0
 8009172:	b2db      	uxtb	r3, r3
 8009174:	461a      	mov	r2, r3
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	429a      	cmp	r2, r3
 800917a:	d0b4      	beq.n	80090e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	60f8      	str	r0, [r7, #12]
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009192:	e033      	b.n	80091fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	68b9      	ldr	r1, [r7, #8]
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 f90b 	bl	80093b4 <I2C_IsErrorOccurred>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e031      	b.n	800920c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ae:	d025      	beq.n	80091fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091b0:	f7fa fb7c 	bl	80038ac <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d302      	bcc.n	80091c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d11a      	bne.n	80091fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d013      	beq.n	80091fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d8:	f043 0220 	orr.w	r2, r3, #32
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e007      	b.n	800920c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	2b02      	cmp	r3, #2
 8009208:	d1c4      	bne.n	8009194 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009220:	e02f      	b.n	8009282 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	68b9      	ldr	r1, [r7, #8]
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 f8c4 	bl	80093b4 <I2C_IsErrorOccurred>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e02d      	b.n	8009292 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009236:	f7fa fb39 	bl	80038ac <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	429a      	cmp	r2, r3
 8009244:	d302      	bcc.n	800924c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d11a      	bne.n	8009282 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b20      	cmp	r3, #32
 8009258:	d013      	beq.n	8009282 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800925e:	f043 0220 	orr.w	r2, r3, #32
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2220      	movs	r2, #32
 800926a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e007      	b.n	8009292 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	f003 0320 	and.w	r3, r3, #32
 800928c:	2b20      	cmp	r3, #32
 800928e:	d1c8      	bne.n	8009222 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80092ac:	e071      	b.n	8009392 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	68b9      	ldr	r1, [r7, #8]
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f000 f87e 	bl	80093b4 <I2C_IsErrorOccurred>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	f003 0320 	and.w	r3, r3, #32
 80092cc:	2b20      	cmp	r3, #32
 80092ce:	d13b      	bne.n	8009348 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d138      	bne.n	8009348 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	f003 0304 	and.w	r3, r3, #4
 80092e0:	2b04      	cmp	r3, #4
 80092e2:	d105      	bne.n	80092f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d001      	beq.n	80092f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	f003 0310 	and.w	r3, r3, #16
 80092fa:	2b10      	cmp	r3, #16
 80092fc:	d121      	bne.n	8009342 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2210      	movs	r2, #16
 8009304:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2204      	movs	r2, #4
 800930a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2220      	movs	r2, #32
 8009312:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6859      	ldr	r1, [r3, #4]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	4b24      	ldr	r3, [pc, #144]	; (80093b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009320:	400b      	ands	r3, r1
 8009322:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2220      	movs	r2, #32
 8009328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	75fb      	strb	r3, [r7, #23]
 8009340:	e002      	b.n	8009348 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009348:	f7fa fab0 	bl	80038ac <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	429a      	cmp	r2, r3
 8009356:	d302      	bcc.n	800935e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d119      	bne.n	8009392 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d116      	bne.n	8009392 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	f003 0304 	and.w	r3, r3, #4
 800936e:	2b04      	cmp	r3, #4
 8009370:	d00f      	beq.n	8009392 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009376:	f043 0220 	orr.w	r2, r3, #32
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2220      	movs	r2, #32
 8009382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	f003 0304 	and.w	r3, r3, #4
 800939c:	2b04      	cmp	r3, #4
 800939e:	d002      	beq.n	80093a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80093a0:	7dfb      	ldrb	r3, [r7, #23]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d083      	beq.n	80092ae <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3718      	adds	r7, #24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	fe00e800 	.word	0xfe00e800

080093b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b08a      	sub	sp, #40	; 0x28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	f003 0310 	and.w	r3, r3, #16
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d068      	beq.n	80094b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2210      	movs	r2, #16
 80093e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80093e8:	e049      	b.n	800947e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f0:	d045      	beq.n	800947e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80093f2:	f7fa fa5b 	bl	80038ac <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d302      	bcc.n	8009408 <I2C_IsErrorOccurred+0x54>
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d13a      	bne.n	800947e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009412:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800941a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	699b      	ldr	r3, [r3, #24]
 8009422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800942a:	d121      	bne.n	8009470 <I2C_IsErrorOccurred+0xbc>
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009432:	d01d      	beq.n	8009470 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009434:	7cfb      	ldrb	r3, [r7, #19]
 8009436:	2b20      	cmp	r3, #32
 8009438:	d01a      	beq.n	8009470 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009448:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800944a:	f7fa fa2f 	bl	80038ac <HAL_GetTick>
 800944e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009450:	e00e      	b.n	8009470 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009452:	f7fa fa2b 	bl	80038ac <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	2b19      	cmp	r3, #25
 800945e:	d907      	bls.n	8009470 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009460:	6a3b      	ldr	r3, [r7, #32]
 8009462:	f043 0320 	orr.w	r3, r3, #32
 8009466:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800946e:	e006      	b.n	800947e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	f003 0320 	and.w	r3, r3, #32
 800947a:	2b20      	cmp	r3, #32
 800947c:	d1e9      	bne.n	8009452 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	f003 0320 	and.w	r3, r3, #32
 8009488:	2b20      	cmp	r3, #32
 800948a:	d003      	beq.n	8009494 <I2C_IsErrorOccurred+0xe0>
 800948c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0aa      	beq.n	80093ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009498:	2b00      	cmp	r3, #0
 800949a:	d103      	bne.n	80094a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2220      	movs	r2, #32
 80094a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	f043 0304 	orr.w	r3, r3, #4
 80094aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80094ac:	2301      	movs	r3, #1
 80094ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00b      	beq.n	80094dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	f043 0301 	orr.w	r3, r3, #1
 80094ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00b      	beq.n	80094fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	f043 0308 	orr.w	r3, r3, #8
 80094ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00b      	beq.n	8009520 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	f043 0302 	orr.w	r3, r3, #2
 800950e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009524:	2b00      	cmp	r3, #0
 8009526:	d01c      	beq.n	8009562 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f7ff fdaf 	bl	800908c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	6859      	ldr	r1, [r3, #4]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	4b0d      	ldr	r3, [pc, #52]	; (8009570 <I2C_IsErrorOccurred+0x1bc>)
 800953a:	400b      	ands	r3, r1
 800953c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	431a      	orrs	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2220      	movs	r2, #32
 800954e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009566:	4618      	mov	r0, r3
 8009568:	3728      	adds	r7, #40	; 0x28
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	fe00e800 	.word	0xfe00e800

08009574 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	607b      	str	r3, [r7, #4]
 800957e:	460b      	mov	r3, r1
 8009580:	817b      	strh	r3, [r7, #10]
 8009582:	4613      	mov	r3, r2
 8009584:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009586:	897b      	ldrh	r3, [r7, #10]
 8009588:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800958c:	7a7b      	ldrb	r3, [r7, #9]
 800958e:	041b      	lsls	r3, r3, #16
 8009590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009594:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	4313      	orrs	r3, r2
 800959e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	685a      	ldr	r2, [r3, #4]
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	0d5b      	lsrs	r3, r3, #21
 80095ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80095b2:	4b08      	ldr	r3, [pc, #32]	; (80095d4 <I2C_TransferConfig+0x60>)
 80095b4:	430b      	orrs	r3, r1
 80095b6:	43db      	mvns	r3, r3
 80095b8:	ea02 0103 	and.w	r1, r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	430a      	orrs	r2, r1
 80095c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80095c6:	bf00      	nop
 80095c8:	371c      	adds	r7, #28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	03ff63ff 	.word	0x03ff63ff

080095d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d138      	bne.n	8009660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d101      	bne.n	80095fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80095f8:	2302      	movs	r3, #2
 80095fa:	e032      	b.n	8009662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2224      	movs	r2, #36	; 0x24
 8009608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0201 	bic.w	r2, r2, #1
 800961a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800962a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6819      	ldr	r1, [r3, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	430a      	orrs	r2, r1
 800963a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f042 0201 	orr.w	r2, r2, #1
 800964a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2220      	movs	r2, #32
 8009650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	e000      	b.n	8009662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009660:	2302      	movs	r3, #2
  }
}
 8009662:	4618      	mov	r0, r3
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800966e:	b480      	push	{r7}
 8009670:	b085      	sub	sp, #20
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b20      	cmp	r3, #32
 8009682:	d139      	bne.n	80096f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800968a:	2b01      	cmp	r3, #1
 800968c:	d101      	bne.n	8009692 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800968e:	2302      	movs	r3, #2
 8009690:	e033      	b.n	80096fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2224      	movs	r2, #36	; 0x24
 800969e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 0201 	bic.w	r2, r2, #1
 80096b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80096c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	021b      	lsls	r3, r3, #8
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f042 0201 	orr.w	r2, r2, #1
 80096e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2220      	movs	r2, #32
 80096e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	e000      	b.n	80096fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80096f8:	2302      	movs	r3, #2
  }
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
	...

08009708 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009710:	4b19      	ldr	r3, [pc, #100]	; (8009778 <HAL_PWREx_ConfigSupply+0x70>)
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b04      	cmp	r3, #4
 800971a:	d00a      	beq.n	8009732 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800971c:	4b16      	ldr	r3, [pc, #88]	; (8009778 <HAL_PWREx_ConfigSupply+0x70>)
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	f003 0307 	and.w	r3, r3, #7
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	429a      	cmp	r2, r3
 8009728:	d001      	beq.n	800972e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e01f      	b.n	800976e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	e01d      	b.n	800976e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009732:	4b11      	ldr	r3, [pc, #68]	; (8009778 <HAL_PWREx_ConfigSupply+0x70>)
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	f023 0207 	bic.w	r2, r3, #7
 800973a:	490f      	ldr	r1, [pc, #60]	; (8009778 <HAL_PWREx_ConfigSupply+0x70>)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4313      	orrs	r3, r2
 8009740:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009742:	f7fa f8b3 	bl	80038ac <HAL_GetTick>
 8009746:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009748:	e009      	b.n	800975e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800974a:	f7fa f8af 	bl	80038ac <HAL_GetTick>
 800974e:	4602      	mov	r2, r0
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009758:	d901      	bls.n	800975e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e007      	b.n	800976e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800975e:	4b06      	ldr	r3, [pc, #24]	; (8009778 <HAL_PWREx_ConfigSupply+0x70>)
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800976a:	d1ee      	bne.n	800974a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	58024800 	.word	0x58024800

0800977c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b08c      	sub	sp, #48	; 0x30
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d102      	bne.n	8009790 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	f000 bc48 	b.w	800a020 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 8088 	beq.w	80098ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800979e:	4b99      	ldr	r3, [pc, #612]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097a8:	4b96      	ldr	r3, [pc, #600]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80097aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b0:	2b10      	cmp	r3, #16
 80097b2:	d007      	beq.n	80097c4 <HAL_RCC_OscConfig+0x48>
 80097b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b6:	2b18      	cmp	r3, #24
 80097b8:	d111      	bne.n	80097de <HAL_RCC_OscConfig+0x62>
 80097ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097bc:	f003 0303 	and.w	r3, r3, #3
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d10c      	bne.n	80097de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097c4:	4b8f      	ldr	r3, [pc, #572]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d06d      	beq.n	80098ac <HAL_RCC_OscConfig+0x130>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d169      	bne.n	80098ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	f000 bc21 	b.w	800a020 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097e6:	d106      	bne.n	80097f6 <HAL_RCC_OscConfig+0x7a>
 80097e8:	4b86      	ldr	r3, [pc, #536]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a85      	ldr	r2, [pc, #532]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80097ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	e02e      	b.n	8009854 <HAL_RCC_OscConfig+0xd8>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10c      	bne.n	8009818 <HAL_RCC_OscConfig+0x9c>
 80097fe:	4b81      	ldr	r3, [pc, #516]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a80      	ldr	r2, [pc, #512]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009808:	6013      	str	r3, [r2, #0]
 800980a:	4b7e      	ldr	r3, [pc, #504]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a7d      	ldr	r2, [pc, #500]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009810:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009814:	6013      	str	r3, [r2, #0]
 8009816:	e01d      	b.n	8009854 <HAL_RCC_OscConfig+0xd8>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009820:	d10c      	bne.n	800983c <HAL_RCC_OscConfig+0xc0>
 8009822:	4b78      	ldr	r3, [pc, #480]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a77      	ldr	r2, [pc, #476]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800982c:	6013      	str	r3, [r2, #0]
 800982e:	4b75      	ldr	r3, [pc, #468]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a74      	ldr	r2, [pc, #464]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009838:	6013      	str	r3, [r2, #0]
 800983a:	e00b      	b.n	8009854 <HAL_RCC_OscConfig+0xd8>
 800983c:	4b71      	ldr	r3, [pc, #452]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a70      	ldr	r2, [pc, #448]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	4b6e      	ldr	r3, [pc, #440]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a6d      	ldr	r2, [pc, #436]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 800984e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d013      	beq.n	8009884 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800985c:	f7fa f826 	bl	80038ac <HAL_GetTick>
 8009860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009862:	e008      	b.n	8009876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009864:	f7fa f822 	bl	80038ac <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	2b64      	cmp	r3, #100	; 0x64
 8009870:	d901      	bls.n	8009876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009872:	2303      	movs	r3, #3
 8009874:	e3d4      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009876:	4b63      	ldr	r3, [pc, #396]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d0f0      	beq.n	8009864 <HAL_RCC_OscConfig+0xe8>
 8009882:	e014      	b.n	80098ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009884:	f7fa f812 	bl	80038ac <HAL_GetTick>
 8009888:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800988a:	e008      	b.n	800989e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800988c:	f7fa f80e 	bl	80038ac <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	2b64      	cmp	r3, #100	; 0x64
 8009898:	d901      	bls.n	800989e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	e3c0      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800989e:	4b59      	ldr	r3, [pc, #356]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1f0      	bne.n	800988c <HAL_RCC_OscConfig+0x110>
 80098aa:	e000      	b.n	80098ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 80ca 	beq.w	8009a50 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098bc:	4b51      	ldr	r3, [pc, #324]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098c6:	4b4f      	ldr	r3, [pc, #316]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d007      	beq.n	80098e2 <HAL_RCC_OscConfig+0x166>
 80098d2:	6a3b      	ldr	r3, [r7, #32]
 80098d4:	2b18      	cmp	r3, #24
 80098d6:	d156      	bne.n	8009986 <HAL_RCC_OscConfig+0x20a>
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	f003 0303 	and.w	r3, r3, #3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d151      	bne.n	8009986 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098e2:	4b48      	ldr	r3, [pc, #288]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 0304 	and.w	r3, r3, #4
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d005      	beq.n	80098fa <HAL_RCC_OscConfig+0x17e>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d101      	bne.n	80098fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e392      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80098fa:	4b42      	ldr	r3, [pc, #264]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f023 0219 	bic.w	r2, r3, #25
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	493f      	ldr	r1, [pc, #252]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009908:	4313      	orrs	r3, r2
 800990a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800990c:	f7f9 ffce 	bl	80038ac <HAL_GetTick>
 8009910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009912:	e008      	b.n	8009926 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009914:	f7f9 ffca 	bl	80038ac <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	2b02      	cmp	r3, #2
 8009920:	d901      	bls.n	8009926 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e37c      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009926:	4b37      	ldr	r3, [pc, #220]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0304 	and.w	r3, r3, #4
 800992e:	2b00      	cmp	r3, #0
 8009930:	d0f0      	beq.n	8009914 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009932:	f7f9 ffc7 	bl	80038c4 <HAL_GetREVID>
 8009936:	4603      	mov	r3, r0
 8009938:	f241 0203 	movw	r2, #4099	; 0x1003
 800993c:	4293      	cmp	r3, r2
 800993e:	d817      	bhi.n	8009970 <HAL_RCC_OscConfig+0x1f4>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	2b40      	cmp	r3, #64	; 0x40
 8009946:	d108      	bne.n	800995a <HAL_RCC_OscConfig+0x1de>
 8009948:	4b2e      	ldr	r3, [pc, #184]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009950:	4a2c      	ldr	r2, [pc, #176]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009956:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009958:	e07a      	b.n	8009a50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800995a:	4b2a      	ldr	r3, [pc, #168]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	031b      	lsls	r3, r3, #12
 8009968:	4926      	ldr	r1, [pc, #152]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 800996a:	4313      	orrs	r3, r2
 800996c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800996e:	e06f      	b.n	8009a50 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009970:	4b24      	ldr	r3, [pc, #144]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	061b      	lsls	r3, r3, #24
 800997e:	4921      	ldr	r1, [pc, #132]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009980:	4313      	orrs	r3, r2
 8009982:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009984:	e064      	b.n	8009a50 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d047      	beq.n	8009a1e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800998e:	4b1d      	ldr	r3, [pc, #116]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f023 0219 	bic.w	r2, r3, #25
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	491a      	ldr	r1, [pc, #104]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 800999c:	4313      	orrs	r3, r2
 800999e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a0:	f7f9 ff84 	bl	80038ac <HAL_GetTick>
 80099a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099a6:	e008      	b.n	80099ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099a8:	f7f9 ff80 	bl	80038ac <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e332      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099ba:	4b12      	ldr	r3, [pc, #72]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f003 0304 	and.w	r3, r3, #4
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d0f0      	beq.n	80099a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099c6:	f7f9 ff7d 	bl	80038c4 <HAL_GetREVID>
 80099ca:	4603      	mov	r3, r0
 80099cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d819      	bhi.n	8009a08 <HAL_RCC_OscConfig+0x28c>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	2b40      	cmp	r3, #64	; 0x40
 80099da:	d108      	bne.n	80099ee <HAL_RCC_OscConfig+0x272>
 80099dc:	4b09      	ldr	r3, [pc, #36]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80099e4:	4a07      	ldr	r2, [pc, #28]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80099e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099ea:	6053      	str	r3, [r2, #4]
 80099ec:	e030      	b.n	8009a50 <HAL_RCC_OscConfig+0x2d4>
 80099ee:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	031b      	lsls	r3, r3, #12
 80099fc:	4901      	ldr	r1, [pc, #4]	; (8009a04 <HAL_RCC_OscConfig+0x288>)
 80099fe:	4313      	orrs	r3, r2
 8009a00:	604b      	str	r3, [r1, #4]
 8009a02:	e025      	b.n	8009a50 <HAL_RCC_OscConfig+0x2d4>
 8009a04:	58024400 	.word	0x58024400
 8009a08:	4b9a      	ldr	r3, [pc, #616]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	061b      	lsls	r3, r3, #24
 8009a16:	4997      	ldr	r1, [pc, #604]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	604b      	str	r3, [r1, #4]
 8009a1c:	e018      	b.n	8009a50 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a1e:	4b95      	ldr	r3, [pc, #596]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a94      	ldr	r2, [pc, #592]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009a24:	f023 0301 	bic.w	r3, r3, #1
 8009a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a2a:	f7f9 ff3f 	bl	80038ac <HAL_GetTick>
 8009a2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a30:	e008      	b.n	8009a44 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a32:	f7f9 ff3b 	bl	80038ac <HAL_GetTick>
 8009a36:	4602      	mov	r2, r0
 8009a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d901      	bls.n	8009a44 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009a40:	2303      	movs	r3, #3
 8009a42:	e2ed      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a44:	4b8b      	ldr	r3, [pc, #556]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0304 	and.w	r3, r3, #4
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1f0      	bne.n	8009a32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f003 0310 	and.w	r3, r3, #16
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	f000 80a9 	beq.w	8009bb0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a5e:	4b85      	ldr	r3, [pc, #532]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a66:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a68:	4b82      	ldr	r3, [pc, #520]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b08      	cmp	r3, #8
 8009a72:	d007      	beq.n	8009a84 <HAL_RCC_OscConfig+0x308>
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	2b18      	cmp	r3, #24
 8009a78:	d13a      	bne.n	8009af0 <HAL_RCC_OscConfig+0x374>
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f003 0303 	and.w	r3, r3, #3
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d135      	bne.n	8009af0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a84:	4b7b      	ldr	r3, [pc, #492]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d005      	beq.n	8009a9c <HAL_RCC_OscConfig+0x320>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	69db      	ldr	r3, [r3, #28]
 8009a94:	2b80      	cmp	r3, #128	; 0x80
 8009a96:	d001      	beq.n	8009a9c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e2c1      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a9c:	f7f9 ff12 	bl	80038c4 <HAL_GetREVID>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	f241 0203 	movw	r2, #4099	; 0x1003
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d817      	bhi.n	8009ada <HAL_RCC_OscConfig+0x35e>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	2b20      	cmp	r3, #32
 8009ab0:	d108      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x348>
 8009ab2:	4b70      	ldr	r3, [pc, #448]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009aba:	4a6e      	ldr	r2, [pc, #440]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ac0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ac2:	e075      	b.n	8009bb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ac4:	4b6b      	ldr	r3, [pc, #428]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	069b      	lsls	r3, r3, #26
 8009ad2:	4968      	ldr	r1, [pc, #416]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ad8:	e06a      	b.n	8009bb0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ada:	4b66      	ldr	r3, [pc, #408]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	061b      	lsls	r3, r3, #24
 8009ae8:	4962      	ldr	r1, [pc, #392]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009aee:	e05f      	b.n	8009bb0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	69db      	ldr	r3, [r3, #28]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d042      	beq.n	8009b7e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009af8:	4b5e      	ldr	r3, [pc, #376]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a5d      	ldr	r2, [pc, #372]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b04:	f7f9 fed2 	bl	80038ac <HAL_GetTick>
 8009b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b0a:	e008      	b.n	8009b1e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b0c:	f7f9 fece 	bl	80038ac <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d901      	bls.n	8009b1e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e280      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b1e:	4b55      	ldr	r3, [pc, #340]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0f0      	beq.n	8009b0c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b2a:	f7f9 fecb 	bl	80038c4 <HAL_GetREVID>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d817      	bhi.n	8009b68 <HAL_RCC_OscConfig+0x3ec>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a1b      	ldr	r3, [r3, #32]
 8009b3c:	2b20      	cmp	r3, #32
 8009b3e:	d108      	bne.n	8009b52 <HAL_RCC_OscConfig+0x3d6>
 8009b40:	4b4c      	ldr	r3, [pc, #304]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009b48:	4a4a      	ldr	r2, [pc, #296]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009b4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b4e:	6053      	str	r3, [r2, #4]
 8009b50:	e02e      	b.n	8009bb0 <HAL_RCC_OscConfig+0x434>
 8009b52:	4b48      	ldr	r3, [pc, #288]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	069b      	lsls	r3, r3, #26
 8009b60:	4944      	ldr	r1, [pc, #272]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	604b      	str	r3, [r1, #4]
 8009b66:	e023      	b.n	8009bb0 <HAL_RCC_OscConfig+0x434>
 8009b68:	4b42      	ldr	r3, [pc, #264]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	061b      	lsls	r3, r3, #24
 8009b76:	493f      	ldr	r1, [pc, #252]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	60cb      	str	r3, [r1, #12]
 8009b7c:	e018      	b.n	8009bb0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009b7e:	4b3d      	ldr	r3, [pc, #244]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a3c      	ldr	r2, [pc, #240]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b8a:	f7f9 fe8f 	bl	80038ac <HAL_GetTick>
 8009b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b90:	e008      	b.n	8009ba4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b92:	f7f9 fe8b 	bl	80038ac <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d901      	bls.n	8009ba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e23d      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ba4:	4b33      	ldr	r3, [pc, #204]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1f0      	bne.n	8009b92 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 0308 	and.w	r3, r3, #8
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d036      	beq.n	8009c2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d019      	beq.n	8009bf8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bc4:	4b2b      	ldr	r3, [pc, #172]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bc8:	4a2a      	ldr	r2, [pc, #168]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009bca:	f043 0301 	orr.w	r3, r3, #1
 8009bce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bd0:	f7f9 fe6c 	bl	80038ac <HAL_GetTick>
 8009bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009bd6:	e008      	b.n	8009bea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bd8:	f7f9 fe68 	bl	80038ac <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d901      	bls.n	8009bea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e21a      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009bea:	4b22      	ldr	r3, [pc, #136]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bee:	f003 0302 	and.w	r3, r3, #2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0f0      	beq.n	8009bd8 <HAL_RCC_OscConfig+0x45c>
 8009bf6:	e018      	b.n	8009c2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009bf8:	4b1e      	ldr	r3, [pc, #120]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bfc:	4a1d      	ldr	r2, [pc, #116]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009bfe:	f023 0301 	bic.w	r3, r3, #1
 8009c02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c04:	f7f9 fe52 	bl	80038ac <HAL_GetTick>
 8009c08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c0a:	e008      	b.n	8009c1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c0c:	f7f9 fe4e 	bl	80038ac <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d901      	bls.n	8009c1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e200      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c1e:	4b15      	ldr	r3, [pc, #84]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c22:	f003 0302 	and.w	r3, r3, #2
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1f0      	bne.n	8009c0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0320 	and.w	r3, r3, #32
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d039      	beq.n	8009caa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d01c      	beq.n	8009c78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c3e:	4b0d      	ldr	r3, [pc, #52]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a0c      	ldr	r2, [pc, #48]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009c44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c4a:	f7f9 fe2f 	bl	80038ac <HAL_GetTick>
 8009c4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c50:	e008      	b.n	8009c64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c52:	f7f9 fe2b 	bl	80038ac <HAL_GetTick>
 8009c56:	4602      	mov	r2, r0
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d901      	bls.n	8009c64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009c60:	2303      	movs	r3, #3
 8009c62:	e1dd      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c64:	4b03      	ldr	r3, [pc, #12]	; (8009c74 <HAL_RCC_OscConfig+0x4f8>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0f0      	beq.n	8009c52 <HAL_RCC_OscConfig+0x4d6>
 8009c70:	e01b      	b.n	8009caa <HAL_RCC_OscConfig+0x52e>
 8009c72:	bf00      	nop
 8009c74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c78:	4b9b      	ldr	r3, [pc, #620]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a9a      	ldr	r2, [pc, #616]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c84:	f7f9 fe12 	bl	80038ac <HAL_GetTick>
 8009c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c8a:	e008      	b.n	8009c9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c8c:	f7f9 fe0e 	bl	80038ac <HAL_GetTick>
 8009c90:	4602      	mov	r2, r0
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d901      	bls.n	8009c9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009c9a:	2303      	movs	r3, #3
 8009c9c:	e1c0      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c9e:	4b92      	ldr	r3, [pc, #584]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1f0      	bne.n	8009c8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 0304 	and.w	r3, r3, #4
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f000 8081 	beq.w	8009dba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009cb8:	4b8c      	ldr	r3, [pc, #560]	; (8009eec <HAL_RCC_OscConfig+0x770>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a8b      	ldr	r2, [pc, #556]	; (8009eec <HAL_RCC_OscConfig+0x770>)
 8009cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cc4:	f7f9 fdf2 	bl	80038ac <HAL_GetTick>
 8009cc8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cca:	e008      	b.n	8009cde <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ccc:	f7f9 fdee 	bl	80038ac <HAL_GetTick>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	2b64      	cmp	r3, #100	; 0x64
 8009cd8:	d901      	bls.n	8009cde <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	e1a0      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cde:	4b83      	ldr	r3, [pc, #524]	; (8009eec <HAL_RCC_OscConfig+0x770>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d0f0      	beq.n	8009ccc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d106      	bne.n	8009d00 <HAL_RCC_OscConfig+0x584>
 8009cf2:	4b7d      	ldr	r3, [pc, #500]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf6:	4a7c      	ldr	r2, [pc, #496]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009cf8:	f043 0301 	orr.w	r3, r3, #1
 8009cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8009cfe:	e02d      	b.n	8009d5c <HAL_RCC_OscConfig+0x5e0>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	689b      	ldr	r3, [r3, #8]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10c      	bne.n	8009d22 <HAL_RCC_OscConfig+0x5a6>
 8009d08:	4b77      	ldr	r3, [pc, #476]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d0c:	4a76      	ldr	r2, [pc, #472]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009d0e:	f023 0301 	bic.w	r3, r3, #1
 8009d12:	6713      	str	r3, [r2, #112]	; 0x70
 8009d14:	4b74      	ldr	r3, [pc, #464]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d18:	4a73      	ldr	r2, [pc, #460]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009d1a:	f023 0304 	bic.w	r3, r3, #4
 8009d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8009d20:	e01c      	b.n	8009d5c <HAL_RCC_OscConfig+0x5e0>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	2b05      	cmp	r3, #5
 8009d28:	d10c      	bne.n	8009d44 <HAL_RCC_OscConfig+0x5c8>
 8009d2a:	4b6f      	ldr	r3, [pc, #444]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d2e:	4a6e      	ldr	r2, [pc, #440]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009d30:	f043 0304 	orr.w	r3, r3, #4
 8009d34:	6713      	str	r3, [r2, #112]	; 0x70
 8009d36:	4b6c      	ldr	r3, [pc, #432]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3a:	4a6b      	ldr	r2, [pc, #428]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009d3c:	f043 0301 	orr.w	r3, r3, #1
 8009d40:	6713      	str	r3, [r2, #112]	; 0x70
 8009d42:	e00b      	b.n	8009d5c <HAL_RCC_OscConfig+0x5e0>
 8009d44:	4b68      	ldr	r3, [pc, #416]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d48:	4a67      	ldr	r2, [pc, #412]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009d4a:	f023 0301 	bic.w	r3, r3, #1
 8009d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8009d50:	4b65      	ldr	r3, [pc, #404]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d54:	4a64      	ldr	r2, [pc, #400]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009d56:	f023 0304 	bic.w	r3, r3, #4
 8009d5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d015      	beq.n	8009d90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d64:	f7f9 fda2 	bl	80038ac <HAL_GetTick>
 8009d68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d6a:	e00a      	b.n	8009d82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d6c:	f7f9 fd9e 	bl	80038ac <HAL_GetTick>
 8009d70:	4602      	mov	r2, r0
 8009d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d901      	bls.n	8009d82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e14e      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d82:	4b59      	ldr	r3, [pc, #356]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d86:	f003 0302 	and.w	r3, r3, #2
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0ee      	beq.n	8009d6c <HAL_RCC_OscConfig+0x5f0>
 8009d8e:	e014      	b.n	8009dba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d90:	f7f9 fd8c 	bl	80038ac <HAL_GetTick>
 8009d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d96:	e00a      	b.n	8009dae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d98:	f7f9 fd88 	bl	80038ac <HAL_GetTick>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d901      	bls.n	8009dae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e138      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009dae:	4b4e      	ldr	r3, [pc, #312]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db2:	f003 0302 	and.w	r3, r3, #2
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1ee      	bne.n	8009d98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	f000 812d 	beq.w	800a01e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009dc4:	4b48      	ldr	r3, [pc, #288]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dcc:	2b18      	cmp	r3, #24
 8009dce:	f000 80bd 	beq.w	8009f4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	2b02      	cmp	r3, #2
 8009dd8:	f040 809e 	bne.w	8009f18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ddc:	4b42      	ldr	r3, [pc, #264]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a41      	ldr	r2, [pc, #260]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009de8:	f7f9 fd60 	bl	80038ac <HAL_GetTick>
 8009dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009dee:	e008      	b.n	8009e02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009df0:	f7f9 fd5c 	bl	80038ac <HAL_GetTick>
 8009df4:	4602      	mov	r2, r0
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d901      	bls.n	8009e02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e10e      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e02:	4b39      	ldr	r3, [pc, #228]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1f0      	bne.n	8009df0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e0e:	4b36      	ldr	r3, [pc, #216]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e12:	4b37      	ldr	r3, [pc, #220]	; (8009ef0 <HAL_RCC_OscConfig+0x774>)
 8009e14:	4013      	ands	r3, r2
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009e1e:	0112      	lsls	r2, r2, #4
 8009e20:	430a      	orrs	r2, r1
 8009e22:	4931      	ldr	r1, [pc, #196]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009e24:	4313      	orrs	r3, r2
 8009e26:	628b      	str	r3, [r1, #40]	; 0x28
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e36:	3b01      	subs	r3, #1
 8009e38:	025b      	lsls	r3, r3, #9
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	431a      	orrs	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e42:	3b01      	subs	r3, #1
 8009e44:	041b      	lsls	r3, r3, #16
 8009e46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e4a:	431a      	orrs	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e50:	3b01      	subs	r3, #1
 8009e52:	061b      	lsls	r3, r3, #24
 8009e54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e58:	4923      	ldr	r1, [pc, #140]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009e5e:	4b22      	ldr	r3, [pc, #136]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e62:	4a21      	ldr	r2, [pc, #132]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009e64:	f023 0301 	bic.w	r3, r3, #1
 8009e68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e6a:	4b1f      	ldr	r3, [pc, #124]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e6e:	4b21      	ldr	r3, [pc, #132]	; (8009ef4 <HAL_RCC_OscConfig+0x778>)
 8009e70:	4013      	ands	r3, r2
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009e76:	00d2      	lsls	r2, r2, #3
 8009e78:	491b      	ldr	r1, [pc, #108]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009e7e:	4b1a      	ldr	r3, [pc, #104]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e82:	f023 020c 	bic.w	r2, r3, #12
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	4917      	ldr	r1, [pc, #92]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009e90:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	f023 0202 	bic.w	r2, r3, #2
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e9c:	4912      	ldr	r1, [pc, #72]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009ea2:	4b11      	ldr	r3, [pc, #68]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea6:	4a10      	ldr	r2, [pc, #64]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eae:	4b0e      	ldr	r3, [pc, #56]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb2:	4a0d      	ldr	r2, [pc, #52]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009eba:	4b0b      	ldr	r3, [pc, #44]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebe:	4a0a      	ldr	r2, [pc, #40]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009ec6:	4b08      	ldr	r3, [pc, #32]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eca:	4a07      	ldr	r2, [pc, #28]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009ecc:	f043 0301 	orr.w	r3, r3, #1
 8009ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ed2:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a04      	ldr	r2, [pc, #16]	; (8009ee8 <HAL_RCC_OscConfig+0x76c>)
 8009ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ede:	f7f9 fce5 	bl	80038ac <HAL_GetTick>
 8009ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ee4:	e011      	b.n	8009f0a <HAL_RCC_OscConfig+0x78e>
 8009ee6:	bf00      	nop
 8009ee8:	58024400 	.word	0x58024400
 8009eec:	58024800 	.word	0x58024800
 8009ef0:	fffffc0c 	.word	0xfffffc0c
 8009ef4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ef8:	f7f9 fcd8 	bl	80038ac <HAL_GetTick>
 8009efc:	4602      	mov	r2, r0
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d901      	bls.n	8009f0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e08a      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f0a:	4b47      	ldr	r3, [pc, #284]	; (800a028 <HAL_RCC_OscConfig+0x8ac>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d0f0      	beq.n	8009ef8 <HAL_RCC_OscConfig+0x77c>
 8009f16:	e082      	b.n	800a01e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f18:	4b43      	ldr	r3, [pc, #268]	; (800a028 <HAL_RCC_OscConfig+0x8ac>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a42      	ldr	r2, [pc, #264]	; (800a028 <HAL_RCC_OscConfig+0x8ac>)
 8009f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f24:	f7f9 fcc2 	bl	80038ac <HAL_GetTick>
 8009f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f2a:	e008      	b.n	8009f3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f2c:	f7f9 fcbe 	bl	80038ac <HAL_GetTick>
 8009f30:	4602      	mov	r2, r0
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d901      	bls.n	8009f3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e070      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f3e:	4b3a      	ldr	r3, [pc, #232]	; (800a028 <HAL_RCC_OscConfig+0x8ac>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1f0      	bne.n	8009f2c <HAL_RCC_OscConfig+0x7b0>
 8009f4a:	e068      	b.n	800a01e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009f4c:	4b36      	ldr	r3, [pc, #216]	; (800a028 <HAL_RCC_OscConfig+0x8ac>)
 8009f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f52:	4b35      	ldr	r3, [pc, #212]	; (800a028 <HAL_RCC_OscConfig+0x8ac>)
 8009f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d031      	beq.n	8009fc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	f003 0203 	and.w	r2, r3, #3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d12a      	bne.n	8009fc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	091b      	lsrs	r3, r3, #4
 8009f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d122      	bne.n	8009fc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d11a      	bne.n	8009fc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	0a5b      	lsrs	r3, r3, #9
 8009f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d111      	bne.n	8009fc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	0c1b      	lsrs	r3, r3, #16
 8009fa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d108      	bne.n	8009fc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	0e1b      	lsrs	r3, r3, #24
 8009fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d001      	beq.n	8009fc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e02b      	b.n	800a020 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009fc8:	4b17      	ldr	r3, [pc, #92]	; (800a028 <HAL_RCC_OscConfig+0x8ac>)
 8009fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fcc:	08db      	lsrs	r3, r3, #3
 8009fce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fd2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d01f      	beq.n	800a01e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009fde:	4b12      	ldr	r3, [pc, #72]	; (800a028 <HAL_RCC_OscConfig+0x8ac>)
 8009fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe2:	4a11      	ldr	r2, [pc, #68]	; (800a028 <HAL_RCC_OscConfig+0x8ac>)
 8009fe4:	f023 0301 	bic.w	r3, r3, #1
 8009fe8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009fea:	f7f9 fc5f 	bl	80038ac <HAL_GetTick>
 8009fee:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009ff0:	bf00      	nop
 8009ff2:	f7f9 fc5b 	bl	80038ac <HAL_GetTick>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d0f9      	beq.n	8009ff2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ffe:	4b0a      	ldr	r3, [pc, #40]	; (800a028 <HAL_RCC_OscConfig+0x8ac>)
 800a000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a002:	4b0a      	ldr	r3, [pc, #40]	; (800a02c <HAL_RCC_OscConfig+0x8b0>)
 800a004:	4013      	ands	r3, r2
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a00a:	00d2      	lsls	r2, r2, #3
 800a00c:	4906      	ldr	r1, [pc, #24]	; (800a028 <HAL_RCC_OscConfig+0x8ac>)
 800a00e:	4313      	orrs	r3, r2
 800a010:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a012:	4b05      	ldr	r3, [pc, #20]	; (800a028 <HAL_RCC_OscConfig+0x8ac>)
 800a014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a016:	4a04      	ldr	r2, [pc, #16]	; (800a028 <HAL_RCC_OscConfig+0x8ac>)
 800a018:	f043 0301 	orr.w	r3, r3, #1
 800a01c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3730      	adds	r7, #48	; 0x30
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	58024400 	.word	0x58024400
 800a02c:	ffff0007 	.word	0xffff0007

0800a030 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e19c      	b.n	800a37e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a044:	4b8a      	ldr	r3, [pc, #552]	; (800a270 <HAL_RCC_ClockConfig+0x240>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 030f 	and.w	r3, r3, #15
 800a04c:	683a      	ldr	r2, [r7, #0]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d910      	bls.n	800a074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a052:	4b87      	ldr	r3, [pc, #540]	; (800a270 <HAL_RCC_ClockConfig+0x240>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f023 020f 	bic.w	r2, r3, #15
 800a05a:	4985      	ldr	r1, [pc, #532]	; (800a270 <HAL_RCC_ClockConfig+0x240>)
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	4313      	orrs	r3, r2
 800a060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a062:	4b83      	ldr	r3, [pc, #524]	; (800a270 <HAL_RCC_ClockConfig+0x240>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 030f 	and.w	r3, r3, #15
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d001      	beq.n	800a074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e184      	b.n	800a37e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0304 	and.w	r3, r3, #4
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d010      	beq.n	800a0a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	691a      	ldr	r2, [r3, #16]
 800a084:	4b7b      	ldr	r3, [pc, #492]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d908      	bls.n	800a0a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a090:	4b78      	ldr	r3, [pc, #480]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	4975      	ldr	r1, [pc, #468]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 0308 	and.w	r3, r3, #8
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d010      	beq.n	800a0d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	695a      	ldr	r2, [r3, #20]
 800a0b2:	4b70      	ldr	r3, [pc, #448]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a0b4:	69db      	ldr	r3, [r3, #28]
 800a0b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d908      	bls.n	800a0d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a0be:	4b6d      	ldr	r3, [pc, #436]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	496a      	ldr	r1, [pc, #424]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 0310 	and.w	r3, r3, #16
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d010      	beq.n	800a0fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	699a      	ldr	r2, [r3, #24]
 800a0e0:	4b64      	ldr	r3, [pc, #400]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a0e2:	69db      	ldr	r3, [r3, #28]
 800a0e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d908      	bls.n	800a0fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a0ec:	4b61      	ldr	r3, [pc, #388]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a0ee:	69db      	ldr	r3, [r3, #28]
 800a0f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	495e      	ldr	r1, [pc, #376]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f003 0320 	and.w	r3, r3, #32
 800a106:	2b00      	cmp	r3, #0
 800a108:	d010      	beq.n	800a12c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	69da      	ldr	r2, [r3, #28]
 800a10e:	4b59      	ldr	r3, [pc, #356]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a116:	429a      	cmp	r2, r3
 800a118:	d908      	bls.n	800a12c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a11a:	4b56      	ldr	r3, [pc, #344]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	69db      	ldr	r3, [r3, #28]
 800a126:	4953      	ldr	r1, [pc, #332]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a128:	4313      	orrs	r3, r2
 800a12a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 0302 	and.w	r3, r3, #2
 800a134:	2b00      	cmp	r3, #0
 800a136:	d010      	beq.n	800a15a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68da      	ldr	r2, [r3, #12]
 800a13c:	4b4d      	ldr	r3, [pc, #308]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	f003 030f 	and.w	r3, r3, #15
 800a144:	429a      	cmp	r2, r3
 800a146:	d908      	bls.n	800a15a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a148:	4b4a      	ldr	r3, [pc, #296]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	f023 020f 	bic.w	r2, r3, #15
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	4947      	ldr	r1, [pc, #284]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a156:	4313      	orrs	r3, r2
 800a158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 0301 	and.w	r3, r3, #1
 800a162:	2b00      	cmp	r3, #0
 800a164:	d055      	beq.n	800a212 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a166:	4b43      	ldr	r3, [pc, #268]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	4940      	ldr	r1, [pc, #256]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a174:	4313      	orrs	r3, r2
 800a176:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d107      	bne.n	800a190 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a180:	4b3c      	ldr	r3, [pc, #240]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d121      	bne.n	800a1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e0f6      	b.n	800a37e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	2b03      	cmp	r3, #3
 800a196:	d107      	bne.n	800a1a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a198:	4b36      	ldr	r3, [pc, #216]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d115      	bne.n	800a1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e0ea      	b.n	800a37e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d107      	bne.n	800a1c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1b0:	4b30      	ldr	r3, [pc, #192]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d109      	bne.n	800a1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e0de      	b.n	800a37e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1c0:	4b2c      	ldr	r3, [pc, #176]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 0304 	and.w	r3, r3, #4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d101      	bne.n	800a1d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e0d6      	b.n	800a37e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a1d0:	4b28      	ldr	r3, [pc, #160]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	f023 0207 	bic.w	r2, r3, #7
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	4925      	ldr	r1, [pc, #148]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1e2:	f7f9 fb63 	bl	80038ac <HAL_GetTick>
 800a1e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1e8:	e00a      	b.n	800a200 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1ea:	f7f9 fb5f 	bl	80038ac <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d901      	bls.n	800a200 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a1fc:	2303      	movs	r3, #3
 800a1fe:	e0be      	b.n	800a37e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a200:	4b1c      	ldr	r3, [pc, #112]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	00db      	lsls	r3, r3, #3
 800a20e:	429a      	cmp	r2, r3
 800a210:	d1eb      	bne.n	800a1ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0302 	and.w	r3, r3, #2
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d010      	beq.n	800a240 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68da      	ldr	r2, [r3, #12]
 800a222:	4b14      	ldr	r3, [pc, #80]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	f003 030f 	and.w	r3, r3, #15
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d208      	bcs.n	800a240 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a22e:	4b11      	ldr	r3, [pc, #68]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	f023 020f 	bic.w	r2, r3, #15
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	490e      	ldr	r1, [pc, #56]	; (800a274 <HAL_RCC_ClockConfig+0x244>)
 800a23c:	4313      	orrs	r3, r2
 800a23e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a240:	4b0b      	ldr	r3, [pc, #44]	; (800a270 <HAL_RCC_ClockConfig+0x240>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 030f 	and.w	r3, r3, #15
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d214      	bcs.n	800a278 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a24e:	4b08      	ldr	r3, [pc, #32]	; (800a270 <HAL_RCC_ClockConfig+0x240>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f023 020f 	bic.w	r2, r3, #15
 800a256:	4906      	ldr	r1, [pc, #24]	; (800a270 <HAL_RCC_ClockConfig+0x240>)
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a25e:	4b04      	ldr	r3, [pc, #16]	; (800a270 <HAL_RCC_ClockConfig+0x240>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f003 030f 	and.w	r3, r3, #15
 800a266:	683a      	ldr	r2, [r7, #0]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d005      	beq.n	800a278 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e086      	b.n	800a37e <HAL_RCC_ClockConfig+0x34e>
 800a270:	52002000 	.word	0x52002000
 800a274:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 0304 	and.w	r3, r3, #4
 800a280:	2b00      	cmp	r3, #0
 800a282:	d010      	beq.n	800a2a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	691a      	ldr	r2, [r3, #16]
 800a288:	4b3f      	ldr	r3, [pc, #252]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a290:	429a      	cmp	r2, r3
 800a292:	d208      	bcs.n	800a2a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a294:	4b3c      	ldr	r3, [pc, #240]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	4939      	ldr	r1, [pc, #228]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0308 	and.w	r3, r3, #8
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d010      	beq.n	800a2d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	695a      	ldr	r2, [r3, #20]
 800a2b6:	4b34      	ldr	r3, [pc, #208]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a2b8:	69db      	ldr	r3, [r3, #28]
 800a2ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d208      	bcs.n	800a2d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a2c2:	4b31      	ldr	r3, [pc, #196]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	492e      	ldr	r1, [pc, #184]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 0310 	and.w	r3, r3, #16
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d010      	beq.n	800a302 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	699a      	ldr	r2, [r3, #24]
 800a2e4:	4b28      	ldr	r3, [pc, #160]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d208      	bcs.n	800a302 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a2f0:	4b25      	ldr	r3, [pc, #148]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	4922      	ldr	r1, [pc, #136]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 0320 	and.w	r3, r3, #32
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d010      	beq.n	800a330 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	69da      	ldr	r2, [r3, #28]
 800a312:	4b1d      	ldr	r3, [pc, #116]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d208      	bcs.n	800a330 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a31e:	4b1a      	ldr	r3, [pc, #104]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	4917      	ldr	r1, [pc, #92]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a330:	f000 f834 	bl	800a39c <HAL_RCC_GetSysClockFreq>
 800a334:	4602      	mov	r2, r0
 800a336:	4b14      	ldr	r3, [pc, #80]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a338:	699b      	ldr	r3, [r3, #24]
 800a33a:	0a1b      	lsrs	r3, r3, #8
 800a33c:	f003 030f 	and.w	r3, r3, #15
 800a340:	4912      	ldr	r1, [pc, #72]	; (800a38c <HAL_RCC_ClockConfig+0x35c>)
 800a342:	5ccb      	ldrb	r3, [r1, r3]
 800a344:	f003 031f 	and.w	r3, r3, #31
 800a348:	fa22 f303 	lsr.w	r3, r2, r3
 800a34c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a34e:	4b0e      	ldr	r3, [pc, #56]	; (800a388 <HAL_RCC_ClockConfig+0x358>)
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	f003 030f 	and.w	r3, r3, #15
 800a356:	4a0d      	ldr	r2, [pc, #52]	; (800a38c <HAL_RCC_ClockConfig+0x35c>)
 800a358:	5cd3      	ldrb	r3, [r2, r3]
 800a35a:	f003 031f 	and.w	r3, r3, #31
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	fa22 f303 	lsr.w	r3, r2, r3
 800a364:	4a0a      	ldr	r2, [pc, #40]	; (800a390 <HAL_RCC_ClockConfig+0x360>)
 800a366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a368:	4a0a      	ldr	r2, [pc, #40]	; (800a394 <HAL_RCC_ClockConfig+0x364>)
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a36e:	4b0a      	ldr	r3, [pc, #40]	; (800a398 <HAL_RCC_ClockConfig+0x368>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4618      	mov	r0, r3
 800a374:	f7f8 ffd2 	bl	800331c <HAL_InitTick>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3718      	adds	r7, #24
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	58024400 	.word	0x58024400
 800a38c:	08017244 	.word	0x08017244
 800a390:	2400008c 	.word	0x2400008c
 800a394:	24000088 	.word	0x24000088
 800a398:	24000090 	.word	0x24000090

0800a39c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b089      	sub	sp, #36	; 0x24
 800a3a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a3a2:	4bb3      	ldr	r3, [pc, #716]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3aa:	2b18      	cmp	r3, #24
 800a3ac:	f200 8155 	bhi.w	800a65a <HAL_RCC_GetSysClockFreq+0x2be>
 800a3b0:	a201      	add	r2, pc, #4	; (adr r2, 800a3b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b6:	bf00      	nop
 800a3b8:	0800a41d 	.word	0x0800a41d
 800a3bc:	0800a65b 	.word	0x0800a65b
 800a3c0:	0800a65b 	.word	0x0800a65b
 800a3c4:	0800a65b 	.word	0x0800a65b
 800a3c8:	0800a65b 	.word	0x0800a65b
 800a3cc:	0800a65b 	.word	0x0800a65b
 800a3d0:	0800a65b 	.word	0x0800a65b
 800a3d4:	0800a65b 	.word	0x0800a65b
 800a3d8:	0800a443 	.word	0x0800a443
 800a3dc:	0800a65b 	.word	0x0800a65b
 800a3e0:	0800a65b 	.word	0x0800a65b
 800a3e4:	0800a65b 	.word	0x0800a65b
 800a3e8:	0800a65b 	.word	0x0800a65b
 800a3ec:	0800a65b 	.word	0x0800a65b
 800a3f0:	0800a65b 	.word	0x0800a65b
 800a3f4:	0800a65b 	.word	0x0800a65b
 800a3f8:	0800a449 	.word	0x0800a449
 800a3fc:	0800a65b 	.word	0x0800a65b
 800a400:	0800a65b 	.word	0x0800a65b
 800a404:	0800a65b 	.word	0x0800a65b
 800a408:	0800a65b 	.word	0x0800a65b
 800a40c:	0800a65b 	.word	0x0800a65b
 800a410:	0800a65b 	.word	0x0800a65b
 800a414:	0800a65b 	.word	0x0800a65b
 800a418:	0800a44f 	.word	0x0800a44f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a41c:	4b94      	ldr	r3, [pc, #592]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 0320 	and.w	r3, r3, #32
 800a424:	2b00      	cmp	r3, #0
 800a426:	d009      	beq.n	800a43c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a428:	4b91      	ldr	r3, [pc, #580]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	08db      	lsrs	r3, r3, #3
 800a42e:	f003 0303 	and.w	r3, r3, #3
 800a432:	4a90      	ldr	r2, [pc, #576]	; (800a674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a434:	fa22 f303 	lsr.w	r3, r2, r3
 800a438:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a43a:	e111      	b.n	800a660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a43c:	4b8d      	ldr	r3, [pc, #564]	; (800a674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a43e:	61bb      	str	r3, [r7, #24]
      break;
 800a440:	e10e      	b.n	800a660 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a442:	4b8d      	ldr	r3, [pc, #564]	; (800a678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a444:	61bb      	str	r3, [r7, #24]
      break;
 800a446:	e10b      	b.n	800a660 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a448:	4b8c      	ldr	r3, [pc, #560]	; (800a67c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a44a:	61bb      	str	r3, [r7, #24]
      break;
 800a44c:	e108      	b.n	800a660 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a44e:	4b88      	ldr	r3, [pc, #544]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a452:	f003 0303 	and.w	r3, r3, #3
 800a456:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a458:	4b85      	ldr	r3, [pc, #532]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a45c:	091b      	lsrs	r3, r3, #4
 800a45e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a462:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a464:	4b82      	ldr	r3, [pc, #520]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a46e:	4b80      	ldr	r3, [pc, #512]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a472:	08db      	lsrs	r3, r3, #3
 800a474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	fb02 f303 	mul.w	r3, r2, r3
 800a47e:	ee07 3a90 	vmov	s15, r3
 800a482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a486:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 80e1 	beq.w	800a654 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	2b02      	cmp	r3, #2
 800a496:	f000 8083 	beq.w	800a5a0 <HAL_RCC_GetSysClockFreq+0x204>
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	f200 80a1 	bhi.w	800a5e4 <HAL_RCC_GetSysClockFreq+0x248>
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d003      	beq.n	800a4b0 <HAL_RCC_GetSysClockFreq+0x114>
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d056      	beq.n	800a55c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a4ae:	e099      	b.n	800a5e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4b0:	4b6f      	ldr	r3, [pc, #444]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 0320 	and.w	r3, r3, #32
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d02d      	beq.n	800a518 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4bc:	4b6c      	ldr	r3, [pc, #432]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	08db      	lsrs	r3, r3, #3
 800a4c2:	f003 0303 	and.w	r3, r3, #3
 800a4c6:	4a6b      	ldr	r2, [pc, #428]	; (800a674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	ee07 3a90 	vmov	s15, r3
 800a4d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	ee07 3a90 	vmov	s15, r3
 800a4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4e6:	4b62      	ldr	r3, [pc, #392]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ee:	ee07 3a90 	vmov	s15, r3
 800a4f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a50a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a512:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a516:	e087      	b.n	800a628 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	ee07 3a90 	vmov	s15, r3
 800a51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a522:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a684 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a52a:	4b51      	ldr	r3, [pc, #324]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a532:	ee07 3a90 	vmov	s15, r3
 800a536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a53a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a53e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a54a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a556:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a55a:	e065      	b.n	800a628 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a566:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a56e:	4b40      	ldr	r3, [pc, #256]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a576:	ee07 3a90 	vmov	s15, r3
 800a57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a57e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a582:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a58e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a59a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a59e:	e043      	b.n	800a628 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a68c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5b2:	4b2f      	ldr	r3, [pc, #188]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ba:	ee07 3a90 	vmov	s15, r3
 800a5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5e2:	e021      	b.n	800a628 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	ee07 3a90 	vmov	s15, r3
 800a5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5f6:	4b1e      	ldr	r3, [pc, #120]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5fe:	ee07 3a90 	vmov	s15, r3
 800a602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a606:	ed97 6a02 	vldr	s12, [r7, #8]
 800a60a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a60e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a622:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a626:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a628:	4b11      	ldr	r3, [pc, #68]	; (800a670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62c:	0a5b      	lsrs	r3, r3, #9
 800a62e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a632:	3301      	adds	r3, #1
 800a634:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	ee07 3a90 	vmov	s15, r3
 800a63c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a640:	edd7 6a07 	vldr	s13, [r7, #28]
 800a644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a64c:	ee17 3a90 	vmov	r3, s15
 800a650:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a652:	e005      	b.n	800a660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a654:	2300      	movs	r3, #0
 800a656:	61bb      	str	r3, [r7, #24]
      break;
 800a658:	e002      	b.n	800a660 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a65a:	4b07      	ldr	r3, [pc, #28]	; (800a678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a65c:	61bb      	str	r3, [r7, #24]
      break;
 800a65e:	bf00      	nop
  }

  return sysclockfreq;
 800a660:	69bb      	ldr	r3, [r7, #24]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3724      	adds	r7, #36	; 0x24
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	58024400 	.word	0x58024400
 800a674:	03d09000 	.word	0x03d09000
 800a678:	003d0900 	.word	0x003d0900
 800a67c:	017d7840 	.word	0x017d7840
 800a680:	46000000 	.word	0x46000000
 800a684:	4c742400 	.word	0x4c742400
 800a688:	4a742400 	.word	0x4a742400
 800a68c:	4bbebc20 	.word	0x4bbebc20

0800a690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a696:	f7ff fe81 	bl	800a39c <HAL_RCC_GetSysClockFreq>
 800a69a:	4602      	mov	r2, r0
 800a69c:	4b10      	ldr	r3, [pc, #64]	; (800a6e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	0a1b      	lsrs	r3, r3, #8
 800a6a2:	f003 030f 	and.w	r3, r3, #15
 800a6a6:	490f      	ldr	r1, [pc, #60]	; (800a6e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a6a8:	5ccb      	ldrb	r3, [r1, r3]
 800a6aa:	f003 031f 	and.w	r3, r3, #31
 800a6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a6b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a6b4:	4b0a      	ldr	r3, [pc, #40]	; (800a6e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	f003 030f 	and.w	r3, r3, #15
 800a6bc:	4a09      	ldr	r2, [pc, #36]	; (800a6e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a6be:	5cd3      	ldrb	r3, [r2, r3]
 800a6c0:	f003 031f 	and.w	r3, r3, #31
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ca:	4a07      	ldr	r2, [pc, #28]	; (800a6e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a6ce:	4a07      	ldr	r2, [pc, #28]	; (800a6ec <HAL_RCC_GetHCLKFreq+0x5c>)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a6d4:	4b04      	ldr	r3, [pc, #16]	; (800a6e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	58024400 	.word	0x58024400
 800a6e4:	08017244 	.word	0x08017244
 800a6e8:	2400008c 	.word	0x2400008c
 800a6ec:	24000088 	.word	0x24000088

0800a6f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a6f4:	f7ff ffcc 	bl	800a690 <HAL_RCC_GetHCLKFreq>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	4b06      	ldr	r3, [pc, #24]	; (800a714 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	091b      	lsrs	r3, r3, #4
 800a700:	f003 0307 	and.w	r3, r3, #7
 800a704:	4904      	ldr	r1, [pc, #16]	; (800a718 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a706:	5ccb      	ldrb	r3, [r1, r3]
 800a708:	f003 031f 	and.w	r3, r3, #31
 800a70c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a710:	4618      	mov	r0, r3
 800a712:	bd80      	pop	{r7, pc}
 800a714:	58024400 	.word	0x58024400
 800a718:	08017244 	.word	0x08017244

0800a71c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a720:	f7ff ffb6 	bl	800a690 <HAL_RCC_GetHCLKFreq>
 800a724:	4602      	mov	r2, r0
 800a726:	4b06      	ldr	r3, [pc, #24]	; (800a740 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a728:	69db      	ldr	r3, [r3, #28]
 800a72a:	0a1b      	lsrs	r3, r3, #8
 800a72c:	f003 0307 	and.w	r3, r3, #7
 800a730:	4904      	ldr	r1, [pc, #16]	; (800a744 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a732:	5ccb      	ldrb	r3, [r1, r3]
 800a734:	f003 031f 	and.w	r3, r3, #31
 800a738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	58024400 	.word	0x58024400
 800a744:	08017244 	.word	0x08017244

0800a748 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	223f      	movs	r2, #63	; 0x3f
 800a756:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a758:	4b1a      	ldr	r3, [pc, #104]	; (800a7c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	f003 0207 	and.w	r2, r3, #7
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a764:	4b17      	ldr	r3, [pc, #92]	; (800a7c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a766:	699b      	ldr	r3, [r3, #24]
 800a768:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a770:	4b14      	ldr	r3, [pc, #80]	; (800a7c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	f003 020f 	and.w	r2, r3, #15
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a77c:	4b11      	ldr	r3, [pc, #68]	; (800a7c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a788:	4b0e      	ldr	r3, [pc, #56]	; (800a7c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a78a:	69db      	ldr	r3, [r3, #28]
 800a78c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a794:	4b0b      	ldr	r3, [pc, #44]	; (800a7c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a796:	69db      	ldr	r3, [r3, #28]
 800a798:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a7a0:	4b08      	ldr	r3, [pc, #32]	; (800a7c4 <HAL_RCC_GetClockConfig+0x7c>)
 800a7a2:	6a1b      	ldr	r3, [r3, #32]
 800a7a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a7ac:	4b06      	ldr	r3, [pc, #24]	; (800a7c8 <HAL_RCC_GetClockConfig+0x80>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 020f 	and.w	r2, r3, #15
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	601a      	str	r2, [r3, #0]
}
 800a7b8:	bf00      	nop
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr
 800a7c4:	58024400 	.word	0x58024400
 800a7c8:	52002000 	.word	0x52002000

0800a7cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a7cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a7d0:	b0ca      	sub	sp, #296	; 0x128
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a7f0:	2500      	movs	r5, #0
 800a7f2:	ea54 0305 	orrs.w	r3, r4, r5
 800a7f6:	d049      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a7f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a802:	d02f      	beq.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a804:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a808:	d828      	bhi.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a80a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a80e:	d01a      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a810:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a814:	d822      	bhi.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a816:	2b00      	cmp	r3, #0
 800a818:	d003      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a81a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a81e:	d007      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a820:	e01c      	b.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a822:	4bb8      	ldr	r3, [pc, #736]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a826:	4ab7      	ldr	r2, [pc, #732]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a82c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a82e:	e01a      	b.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a834:	3308      	adds	r3, #8
 800a836:	2102      	movs	r1, #2
 800a838:	4618      	mov	r0, r3
 800a83a:	f002 fb61 	bl	800cf00 <RCCEx_PLL2_Config>
 800a83e:	4603      	mov	r3, r0
 800a840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a844:	e00f      	b.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a84a:	3328      	adds	r3, #40	; 0x28
 800a84c:	2102      	movs	r1, #2
 800a84e:	4618      	mov	r0, r3
 800a850:	f002 fc08 	bl	800d064 <RCCEx_PLL3_Config>
 800a854:	4603      	mov	r3, r0
 800a856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a85a:	e004      	b.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a862:	e000      	b.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a864:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10a      	bne.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a86e:	4ba5      	ldr	r3, [pc, #660]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a872:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a87a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a87c:	4aa1      	ldr	r2, [pc, #644]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a87e:	430b      	orrs	r3, r1
 800a880:	6513      	str	r3, [r2, #80]	; 0x50
 800a882:	e003      	b.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a888:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a88c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a898:	f04f 0900 	mov.w	r9, #0
 800a89c:	ea58 0309 	orrs.w	r3, r8, r9
 800a8a0:	d047      	beq.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8a8:	2b04      	cmp	r3, #4
 800a8aa:	d82a      	bhi.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a8ac:	a201      	add	r2, pc, #4	; (adr r2, 800a8b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b2:	bf00      	nop
 800a8b4:	0800a8c9 	.word	0x0800a8c9
 800a8b8:	0800a8d7 	.word	0x0800a8d7
 800a8bc:	0800a8ed 	.word	0x0800a8ed
 800a8c0:	0800a90b 	.word	0x0800a90b
 800a8c4:	0800a90b 	.word	0x0800a90b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8c8:	4b8e      	ldr	r3, [pc, #568]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8cc:	4a8d      	ldr	r2, [pc, #564]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a8ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8d4:	e01a      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8da:	3308      	adds	r3, #8
 800a8dc:	2100      	movs	r1, #0
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f002 fb0e 	bl	800cf00 <RCCEx_PLL2_Config>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a8ea:	e00f      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a8ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8f0:	3328      	adds	r3, #40	; 0x28
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f002 fbb5 	bl	800d064 <RCCEx_PLL3_Config>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a900:	e004      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a908:	e000      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a90a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a90c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10a      	bne.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a914:	4b7b      	ldr	r3, [pc, #492]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a918:	f023 0107 	bic.w	r1, r3, #7
 800a91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a922:	4a78      	ldr	r2, [pc, #480]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a924:	430b      	orrs	r3, r1
 800a926:	6513      	str	r3, [r2, #80]	; 0x50
 800a928:	e003      	b.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a92a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a92e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800a93e:	f04f 0b00 	mov.w	fp, #0
 800a942:	ea5a 030b 	orrs.w	r3, sl, fp
 800a946:	d04c      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800a948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a94c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a94e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a952:	d030      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a958:	d829      	bhi.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a95a:	2bc0      	cmp	r3, #192	; 0xc0
 800a95c:	d02d      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a95e:	2bc0      	cmp	r3, #192	; 0xc0
 800a960:	d825      	bhi.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a962:	2b80      	cmp	r3, #128	; 0x80
 800a964:	d018      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800a966:	2b80      	cmp	r3, #128	; 0x80
 800a968:	d821      	bhi.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a96e:	2b40      	cmp	r3, #64	; 0x40
 800a970:	d007      	beq.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800a972:	e01c      	b.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a974:	4b63      	ldr	r3, [pc, #396]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a978:	4a62      	ldr	r2, [pc, #392]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a97a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a97e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a980:	e01c      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a986:	3308      	adds	r3, #8
 800a988:	2100      	movs	r1, #0
 800a98a:	4618      	mov	r0, r3
 800a98c:	f002 fab8 	bl	800cf00 <RCCEx_PLL2_Config>
 800a990:	4603      	mov	r3, r0
 800a992:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a996:	e011      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a99c:	3328      	adds	r3, #40	; 0x28
 800a99e:	2100      	movs	r1, #0
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f002 fb5f 	bl	800d064 <RCCEx_PLL3_Config>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a9ac:	e006      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a9b4:	e002      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a9b6:	bf00      	nop
 800a9b8:	e000      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a9ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10a      	bne.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a9c4:	4b4f      	ldr	r3, [pc, #316]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9d2:	4a4c      	ldr	r2, [pc, #304]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9d4:	430b      	orrs	r3, r1
 800a9d6:	6513      	str	r3, [r2, #80]	; 0x50
 800a9d8:	e003      	b.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a9e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a9ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a9f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	d053      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800aa02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa0e:	d035      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800aa10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa14:	d82e      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800aa16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa1a:	d031      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800aa1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa20:	d828      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800aa22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa26:	d01a      	beq.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800aa28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa2c:	d822      	bhi.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d003      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800aa32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa36:	d007      	beq.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800aa38:	e01c      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa3a:	4b32      	ldr	r3, [pc, #200]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3e:	4a31      	ldr	r2, [pc, #196]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa46:	e01c      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa4c:	3308      	adds	r3, #8
 800aa4e:	2100      	movs	r1, #0
 800aa50:	4618      	mov	r0, r3
 800aa52:	f002 fa55 	bl	800cf00 <RCCEx_PLL2_Config>
 800aa56:	4603      	mov	r3, r0
 800aa58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa5c:	e011      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa62:	3328      	adds	r3, #40	; 0x28
 800aa64:	2100      	movs	r1, #0
 800aa66:	4618      	mov	r0, r3
 800aa68:	f002 fafc 	bl	800d064 <RCCEx_PLL3_Config>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa72:	e006      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa7a:	e002      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800aa7c:	bf00      	nop
 800aa7e:	e000      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800aa80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10b      	bne.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa8a:	4b1e      	ldr	r3, [pc, #120]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa8e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aa92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa9a:	4a1a      	ldr	r2, [pc, #104]	; (800ab04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa9c:	430b      	orrs	r3, r1
 800aa9e:	6593      	str	r3, [r2, #88]	; 0x58
 800aaa0:	e003      	b.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aaaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aab6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aaba:	2300      	movs	r3, #0
 800aabc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800aac0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800aac4:	460b      	mov	r3, r1
 800aac6:	4313      	orrs	r3, r2
 800aac8:	d056      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aaca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aace:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aad2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aad6:	d038      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aad8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aadc:	d831      	bhi.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aade:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aae2:	d034      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800aae4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aae8:	d82b      	bhi.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aaea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaee:	d01d      	beq.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800aaf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaf4:	d825      	bhi.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d006      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800aafa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aafe:	d00a      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ab00:	e01f      	b.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ab02:	bf00      	nop
 800ab04:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab08:	4ba2      	ldr	r3, [pc, #648]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0c:	4aa1      	ldr	r2, [pc, #644]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab14:	e01c      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f002 f9ee 	bl	800cf00 <RCCEx_PLL2_Config>
 800ab24:	4603      	mov	r3, r0
 800ab26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab2a:	e011      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab30:	3328      	adds	r3, #40	; 0x28
 800ab32:	2100      	movs	r1, #0
 800ab34:	4618      	mov	r0, r3
 800ab36:	f002 fa95 	bl	800d064 <RCCEx_PLL3_Config>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab40:	e006      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab48:	e002      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ab4a:	bf00      	nop
 800ab4c:	e000      	b.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ab4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10b      	bne.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab58:	4b8e      	ldr	r3, [pc, #568]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab5c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ab60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab68:	4a8a      	ldr	r2, [pc, #552]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ab6a:	430b      	orrs	r3, r1
 800ab6c:	6593      	str	r3, [r2, #88]	; 0x58
 800ab6e:	e003      	b.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ab78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab80:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ab84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ab8e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ab92:	460b      	mov	r3, r1
 800ab94:	4313      	orrs	r3, r2
 800ab96:	d03a      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ab98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab9e:	2b30      	cmp	r3, #48	; 0x30
 800aba0:	d01f      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800aba2:	2b30      	cmp	r3, #48	; 0x30
 800aba4:	d819      	bhi.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800aba6:	2b20      	cmp	r3, #32
 800aba8:	d00c      	beq.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800abaa:	2b20      	cmp	r3, #32
 800abac:	d815      	bhi.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d019      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800abb2:	2b10      	cmp	r3, #16
 800abb4:	d111      	bne.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abb6:	4b77      	ldr	r3, [pc, #476]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abba:	4a76      	ldr	r2, [pc, #472]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800abc2:	e011      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abc8:	3308      	adds	r3, #8
 800abca:	2102      	movs	r1, #2
 800abcc:	4618      	mov	r0, r3
 800abce:	f002 f997 	bl	800cf00 <RCCEx_PLL2_Config>
 800abd2:	4603      	mov	r3, r0
 800abd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800abd8:	e006      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800abe0:	e002      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800abe2:	bf00      	nop
 800abe4:	e000      	b.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800abe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abe8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10a      	bne.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800abf0:	4b68      	ldr	r3, [pc, #416]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800abf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abf4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800abf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abfe:	4a65      	ldr	r2, [pc, #404]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac00:	430b      	orrs	r3, r1
 800ac02:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ac04:	e003      	b.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ac0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac16:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ac1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac1e:	2300      	movs	r3, #0
 800ac20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac24:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	d051      	beq.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ac2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac38:	d035      	beq.n	800aca6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ac3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac3e:	d82e      	bhi.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ac40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac44:	d031      	beq.n	800acaa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ac46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac4a:	d828      	bhi.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ac4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac50:	d01a      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ac52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac56:	d822      	bhi.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d003      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ac5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac60:	d007      	beq.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ac62:	e01c      	b.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac64:	4b4b      	ldr	r3, [pc, #300]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	4a4a      	ldr	r2, [pc, #296]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ac6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac70:	e01c      	b.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac76:	3308      	adds	r3, #8
 800ac78:	2100      	movs	r1, #0
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f002 f940 	bl	800cf00 <RCCEx_PLL2_Config>
 800ac80:	4603      	mov	r3, r0
 800ac82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac86:	e011      	b.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac8c:	3328      	adds	r3, #40	; 0x28
 800ac8e:	2100      	movs	r1, #0
 800ac90:	4618      	mov	r0, r3
 800ac92:	f002 f9e7 	bl	800d064 <RCCEx_PLL3_Config>
 800ac96:	4603      	mov	r3, r0
 800ac98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac9c:	e006      	b.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aca4:	e002      	b.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800aca6:	bf00      	nop
 800aca8:	e000      	b.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800acaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10a      	bne.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800acb4:	4b37      	ldr	r3, [pc, #220]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acb8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800acbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acc2:	4a34      	ldr	r2, [pc, #208]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acc4:	430b      	orrs	r3, r1
 800acc6:	6513      	str	r3, [r2, #80]	; 0x50
 800acc8:	e003      	b.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800acd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800acde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ace2:	2300      	movs	r3, #0
 800ace4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ace8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800acec:	460b      	mov	r3, r1
 800acee:	4313      	orrs	r3, r2
 800acf0:	d056      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800acf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acfc:	d033      	beq.n	800ad66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800acfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad02:	d82c      	bhi.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ad04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad08:	d02f      	beq.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ad0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ad0e:	d826      	bhi.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ad10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad14:	d02b      	beq.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ad16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad1a:	d820      	bhi.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ad1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad20:	d012      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ad22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad26:	d81a      	bhi.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d022      	beq.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ad2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad30:	d115      	bne.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad36:	3308      	adds	r3, #8
 800ad38:	2101      	movs	r1, #1
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f002 f8e0 	bl	800cf00 <RCCEx_PLL2_Config>
 800ad40:	4603      	mov	r3, r0
 800ad42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad46:	e015      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad4c:	3328      	adds	r3, #40	; 0x28
 800ad4e:	2101      	movs	r1, #1
 800ad50:	4618      	mov	r0, r3
 800ad52:	f002 f987 	bl	800d064 <RCCEx_PLL3_Config>
 800ad56:	4603      	mov	r3, r0
 800ad58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad5c:	e00a      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad64:	e006      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad66:	bf00      	nop
 800ad68:	e004      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad6a:	bf00      	nop
 800ad6c:	e002      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad6e:	bf00      	nop
 800ad70:	e000      	b.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ad72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10d      	bne.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad7c:	4b05      	ldr	r3, [pc, #20]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad80:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ad84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad8a:	4a02      	ldr	r2, [pc, #8]	; (800ad94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad8c:	430b      	orrs	r3, r1
 800ad8e:	6513      	str	r3, [r2, #80]	; 0x50
 800ad90:	e006      	b.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800ad92:	bf00      	nop
 800ad94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ada0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800adac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800adb0:	2300      	movs	r3, #0
 800adb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800adb6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800adba:	460b      	mov	r3, r1
 800adbc:	4313      	orrs	r3, r2
 800adbe:	d055      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800adc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800adc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adcc:	d033      	beq.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800adce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800add2:	d82c      	bhi.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800add4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800add8:	d02f      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800adda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adde:	d826      	bhi.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ade0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ade4:	d02b      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ade6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adea:	d820      	bhi.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800adec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adf0:	d012      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800adf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adf6:	d81a      	bhi.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d022      	beq.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800adfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae00:	d115      	bne.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae06:	3308      	adds	r3, #8
 800ae08:	2101      	movs	r1, #1
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f002 f878 	bl	800cf00 <RCCEx_PLL2_Config>
 800ae10:	4603      	mov	r3, r0
 800ae12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae16:	e015      	b.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae1c:	3328      	adds	r3, #40	; 0x28
 800ae1e:	2101      	movs	r1, #1
 800ae20:	4618      	mov	r0, r3
 800ae22:	f002 f91f 	bl	800d064 <RCCEx_PLL3_Config>
 800ae26:	4603      	mov	r3, r0
 800ae28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae2c:	e00a      	b.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae34:	e006      	b.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ae36:	bf00      	nop
 800ae38:	e004      	b.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ae3a:	bf00      	nop
 800ae3c:	e002      	b.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ae3e:	bf00      	nop
 800ae40:	e000      	b.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ae42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d10b      	bne.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae4c:	4ba3      	ldr	r3, [pc, #652]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae50:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ae54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae5c:	4a9f      	ldr	r2, [pc, #636]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ae5e:	430b      	orrs	r3, r1
 800ae60:	6593      	str	r3, [r2, #88]	; 0x58
 800ae62:	e003      	b.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae68:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ae78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ae86:	460b      	mov	r3, r1
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	d037      	beq.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ae8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae96:	d00e      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800ae98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae9c:	d816      	bhi.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d018      	beq.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800aea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aea6:	d111      	bne.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aea8:	4b8c      	ldr	r3, [pc, #560]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeac:	4a8b      	ldr	r2, [pc, #556]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aeae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aeb4:	e00f      	b.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aeb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeba:	3308      	adds	r3, #8
 800aebc:	2101      	movs	r1, #1
 800aebe:	4618      	mov	r0, r3
 800aec0:	f002 f81e 	bl	800cf00 <RCCEx_PLL2_Config>
 800aec4:	4603      	mov	r3, r0
 800aec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aeca:	e004      	b.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aed2:	e000      	b.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800aed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aed6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10a      	bne.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aede:	4b7f      	ldr	r3, [pc, #508]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeec:	4a7b      	ldr	r2, [pc, #492]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aeee:	430b      	orrs	r3, r1
 800aef0:	6513      	str	r3, [r2, #80]	; 0x50
 800aef2:	e003      	b.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aef8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aefc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800af08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af0c:	2300      	movs	r3, #0
 800af0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800af12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800af16:	460b      	mov	r3, r1
 800af18:	4313      	orrs	r3, r2
 800af1a:	d039      	beq.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800af1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af22:	2b03      	cmp	r3, #3
 800af24:	d81c      	bhi.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800af26:	a201      	add	r2, pc, #4	; (adr r2, 800af2c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800af28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2c:	0800af69 	.word	0x0800af69
 800af30:	0800af3d 	.word	0x0800af3d
 800af34:	0800af4b 	.word	0x0800af4b
 800af38:	0800af69 	.word	0x0800af69
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af3c:	4b67      	ldr	r3, [pc, #412]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af40:	4a66      	ldr	r2, [pc, #408]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af48:	e00f      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af4e:	3308      	adds	r3, #8
 800af50:	2102      	movs	r1, #2
 800af52:	4618      	mov	r0, r3
 800af54:	f001 ffd4 	bl	800cf00 <RCCEx_PLL2_Config>
 800af58:	4603      	mov	r3, r0
 800af5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af5e:	e004      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af66:	e000      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800af68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10a      	bne.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af72:	4b5a      	ldr	r3, [pc, #360]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af76:	f023 0103 	bic.w	r1, r3, #3
 800af7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af80:	4a56      	ldr	r2, [pc, #344]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800af82:	430b      	orrs	r3, r1
 800af84:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af86:	e003      	b.n	800af90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800af9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afa0:	2300      	movs	r3, #0
 800afa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800afa6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800afaa:	460b      	mov	r3, r1
 800afac:	4313      	orrs	r3, r2
 800afae:	f000 809f 	beq.w	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800afb2:	4b4b      	ldr	r3, [pc, #300]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a4a      	ldr	r2, [pc, #296]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800afb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800afbe:	f7f8 fc75 	bl	80038ac <HAL_GetTick>
 800afc2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afc6:	e00b      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afc8:	f7f8 fc70 	bl	80038ac <HAL_GetTick>
 800afcc:	4602      	mov	r2, r0
 800afce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800afd2:	1ad3      	subs	r3, r2, r3
 800afd4:	2b64      	cmp	r3, #100	; 0x64
 800afd6:	d903      	bls.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800afd8:	2303      	movs	r3, #3
 800afda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afde:	e005      	b.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afe0:	4b3f      	ldr	r3, [pc, #252]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d0ed      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800afec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d179      	bne.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aff4:	4b39      	ldr	r3, [pc, #228]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800aff6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800affc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b000:	4053      	eors	r3, r2
 800b002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b006:	2b00      	cmp	r3, #0
 800b008:	d015      	beq.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b00a:	4b34      	ldr	r3, [pc, #208]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b00e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b012:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b016:	4b31      	ldr	r3, [pc, #196]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b01a:	4a30      	ldr	r2, [pc, #192]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b01c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b020:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b022:	4b2e      	ldr	r3, [pc, #184]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b026:	4a2d      	ldr	r2, [pc, #180]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b02c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b02e:	4a2b      	ldr	r2, [pc, #172]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b030:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b034:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b03a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b03e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b042:	d118      	bne.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b044:	f7f8 fc32 	bl	80038ac <HAL_GetTick>
 800b048:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b04c:	e00d      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b04e:	f7f8 fc2d 	bl	80038ac <HAL_GetTick>
 800b052:	4602      	mov	r2, r0
 800b054:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b058:	1ad2      	subs	r2, r2, r3
 800b05a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b05e:	429a      	cmp	r2, r3
 800b060:	d903      	bls.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b068:	e005      	b.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b06a:	4b1c      	ldr	r3, [pc, #112]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b06c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b06e:	f003 0302 	and.w	r3, r3, #2
 800b072:	2b00      	cmp	r3, #0
 800b074:	d0eb      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d129      	bne.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b082:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b08a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b08e:	d10e      	bne.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b090:	4b12      	ldr	r3, [pc, #72]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b09c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b0a0:	091a      	lsrs	r2, r3, #4
 800b0a2:	4b10      	ldr	r3, [pc, #64]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	4a0d      	ldr	r2, [pc, #52]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0a8:	430b      	orrs	r3, r1
 800b0aa:	6113      	str	r3, [r2, #16]
 800b0ac:	e005      	b.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b0ae:	4b0b      	ldr	r3, [pc, #44]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	4a0a      	ldr	r2, [pc, #40]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b0b8:	6113      	str	r3, [r2, #16]
 800b0ba:	4b08      	ldr	r3, [pc, #32]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b0c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0ca:	4a04      	ldr	r2, [pc, #16]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0cc:	430b      	orrs	r3, r1
 800b0ce:	6713      	str	r3, [r2, #112]	; 0x70
 800b0d0:	e00e      	b.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b0da:	e009      	b.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b0dc:	58024400 	.word	0x58024400
 800b0e0:	58024800 	.word	0x58024800
 800b0e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	f002 0301 	and.w	r3, r2, #1
 800b0fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b100:	2300      	movs	r3, #0
 800b102:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b106:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b10a:	460b      	mov	r3, r1
 800b10c:	4313      	orrs	r3, r2
 800b10e:	f000 8089 	beq.w	800b224 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b118:	2b28      	cmp	r3, #40	; 0x28
 800b11a:	d86b      	bhi.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b11c:	a201      	add	r2, pc, #4	; (adr r2, 800b124 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b122:	bf00      	nop
 800b124:	0800b1fd 	.word	0x0800b1fd
 800b128:	0800b1f5 	.word	0x0800b1f5
 800b12c:	0800b1f5 	.word	0x0800b1f5
 800b130:	0800b1f5 	.word	0x0800b1f5
 800b134:	0800b1f5 	.word	0x0800b1f5
 800b138:	0800b1f5 	.word	0x0800b1f5
 800b13c:	0800b1f5 	.word	0x0800b1f5
 800b140:	0800b1f5 	.word	0x0800b1f5
 800b144:	0800b1c9 	.word	0x0800b1c9
 800b148:	0800b1f5 	.word	0x0800b1f5
 800b14c:	0800b1f5 	.word	0x0800b1f5
 800b150:	0800b1f5 	.word	0x0800b1f5
 800b154:	0800b1f5 	.word	0x0800b1f5
 800b158:	0800b1f5 	.word	0x0800b1f5
 800b15c:	0800b1f5 	.word	0x0800b1f5
 800b160:	0800b1f5 	.word	0x0800b1f5
 800b164:	0800b1df 	.word	0x0800b1df
 800b168:	0800b1f5 	.word	0x0800b1f5
 800b16c:	0800b1f5 	.word	0x0800b1f5
 800b170:	0800b1f5 	.word	0x0800b1f5
 800b174:	0800b1f5 	.word	0x0800b1f5
 800b178:	0800b1f5 	.word	0x0800b1f5
 800b17c:	0800b1f5 	.word	0x0800b1f5
 800b180:	0800b1f5 	.word	0x0800b1f5
 800b184:	0800b1fd 	.word	0x0800b1fd
 800b188:	0800b1f5 	.word	0x0800b1f5
 800b18c:	0800b1f5 	.word	0x0800b1f5
 800b190:	0800b1f5 	.word	0x0800b1f5
 800b194:	0800b1f5 	.word	0x0800b1f5
 800b198:	0800b1f5 	.word	0x0800b1f5
 800b19c:	0800b1f5 	.word	0x0800b1f5
 800b1a0:	0800b1f5 	.word	0x0800b1f5
 800b1a4:	0800b1fd 	.word	0x0800b1fd
 800b1a8:	0800b1f5 	.word	0x0800b1f5
 800b1ac:	0800b1f5 	.word	0x0800b1f5
 800b1b0:	0800b1f5 	.word	0x0800b1f5
 800b1b4:	0800b1f5 	.word	0x0800b1f5
 800b1b8:	0800b1f5 	.word	0x0800b1f5
 800b1bc:	0800b1f5 	.word	0x0800b1f5
 800b1c0:	0800b1f5 	.word	0x0800b1f5
 800b1c4:	0800b1fd 	.word	0x0800b1fd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1cc:	3308      	adds	r3, #8
 800b1ce:	2101      	movs	r1, #1
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f001 fe95 	bl	800cf00 <RCCEx_PLL2_Config>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1dc:	e00f      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e2:	3328      	adds	r3, #40	; 0x28
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f001 ff3c 	bl	800d064 <RCCEx_PLL3_Config>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1f2:	e004      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1fa:	e000      	b.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b1fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b202:	2b00      	cmp	r3, #0
 800b204:	d10a      	bne.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b206:	4bbf      	ldr	r3, [pc, #764]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b20a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b212:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b214:	4abb      	ldr	r2, [pc, #748]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b216:	430b      	orrs	r3, r1
 800b218:	6553      	str	r3, [r2, #84]	; 0x54
 800b21a:	e003      	b.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b21c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b220:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22c:	f002 0302 	and.w	r3, r2, #2
 800b230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b234:	2300      	movs	r3, #0
 800b236:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b23a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b23e:	460b      	mov	r3, r1
 800b240:	4313      	orrs	r3, r2
 800b242:	d041      	beq.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b24a:	2b05      	cmp	r3, #5
 800b24c:	d824      	bhi.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b24e:	a201      	add	r2, pc, #4	; (adr r2, 800b254 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b254:	0800b2a1 	.word	0x0800b2a1
 800b258:	0800b26d 	.word	0x0800b26d
 800b25c:	0800b283 	.word	0x0800b283
 800b260:	0800b2a1 	.word	0x0800b2a1
 800b264:	0800b2a1 	.word	0x0800b2a1
 800b268:	0800b2a1 	.word	0x0800b2a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b26c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b270:	3308      	adds	r3, #8
 800b272:	2101      	movs	r1, #1
 800b274:	4618      	mov	r0, r3
 800b276:	f001 fe43 	bl	800cf00 <RCCEx_PLL2_Config>
 800b27a:	4603      	mov	r3, r0
 800b27c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b280:	e00f      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b286:	3328      	adds	r3, #40	; 0x28
 800b288:	2101      	movs	r1, #1
 800b28a:	4618      	mov	r0, r3
 800b28c:	f001 feea 	bl	800d064 <RCCEx_PLL3_Config>
 800b290:	4603      	mov	r3, r0
 800b292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b296:	e004      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b29e:	e000      	b.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b2a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d10a      	bne.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b2aa:	4b96      	ldr	r3, [pc, #600]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ae:	f023 0107 	bic.w	r1, r3, #7
 800b2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2b8:	4a92      	ldr	r2, [pc, #584]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b2ba:	430b      	orrs	r3, r1
 800b2bc:	6553      	str	r3, [r2, #84]	; 0x54
 800b2be:	e003      	b.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d0:	f002 0304 	and.w	r3, r2, #4
 800b2d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	d044      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2f0:	2b05      	cmp	r3, #5
 800b2f2:	d825      	bhi.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b2f4:	a201      	add	r2, pc, #4	; (adr r2, 800b2fc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fa:	bf00      	nop
 800b2fc:	0800b349 	.word	0x0800b349
 800b300:	0800b315 	.word	0x0800b315
 800b304:	0800b32b 	.word	0x0800b32b
 800b308:	0800b349 	.word	0x0800b349
 800b30c:	0800b349 	.word	0x0800b349
 800b310:	0800b349 	.word	0x0800b349
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b318:	3308      	adds	r3, #8
 800b31a:	2101      	movs	r1, #1
 800b31c:	4618      	mov	r0, r3
 800b31e:	f001 fdef 	bl	800cf00 <RCCEx_PLL2_Config>
 800b322:	4603      	mov	r3, r0
 800b324:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b328:	e00f      	b.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b32e:	3328      	adds	r3, #40	; 0x28
 800b330:	2101      	movs	r1, #1
 800b332:	4618      	mov	r0, r3
 800b334:	f001 fe96 	bl	800d064 <RCCEx_PLL3_Config>
 800b338:	4603      	mov	r3, r0
 800b33a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b33e:	e004      	b.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b346:	e000      	b.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b34a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d10b      	bne.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b352:	4b6c      	ldr	r3, [pc, #432]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b356:	f023 0107 	bic.w	r1, r3, #7
 800b35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b35e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b362:	4a68      	ldr	r2, [pc, #416]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b364:	430b      	orrs	r3, r1
 800b366:	6593      	str	r3, [r2, #88]	; 0x58
 800b368:	e003      	b.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b36a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b36e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37a:	f002 0320 	and.w	r3, r2, #32
 800b37e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b382:	2300      	movs	r3, #0
 800b384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b388:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b38c:	460b      	mov	r3, r1
 800b38e:	4313      	orrs	r3, r2
 800b390:	d055      	beq.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b39a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b39e:	d033      	beq.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b3a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3a4:	d82c      	bhi.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3aa:	d02f      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b3ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3b0:	d826      	bhi.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b3b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3b6:	d02b      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b3b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3bc:	d820      	bhi.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b3be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3c2:	d012      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b3c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3c8:	d81a      	bhi.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d022      	beq.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b3ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3d2:	d115      	bne.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d8:	3308      	adds	r3, #8
 800b3da:	2100      	movs	r1, #0
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f001 fd8f 	bl	800cf00 <RCCEx_PLL2_Config>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3e8:	e015      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ee:	3328      	adds	r3, #40	; 0x28
 800b3f0:	2102      	movs	r1, #2
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f001 fe36 	bl	800d064 <RCCEx_PLL3_Config>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3fe:	e00a      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b406:	e006      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b408:	bf00      	nop
 800b40a:	e004      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b40c:	bf00      	nop
 800b40e:	e002      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b410:	bf00      	nop
 800b412:	e000      	b.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b414:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b416:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d10b      	bne.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b41e:	4b39      	ldr	r3, [pc, #228]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b422:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b42e:	4a35      	ldr	r2, [pc, #212]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b430:	430b      	orrs	r3, r1
 800b432:	6553      	str	r3, [r2, #84]	; 0x54
 800b434:	e003      	b.n	800b43e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b43a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b446:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b44a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b44e:	2300      	movs	r3, #0
 800b450:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b454:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b458:	460b      	mov	r3, r1
 800b45a:	4313      	orrs	r3, r2
 800b45c:	d058      	beq.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b462:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b466:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b46a:	d033      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b46c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b470:	d82c      	bhi.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b476:	d02f      	beq.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b47c:	d826      	bhi.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b47e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b482:	d02b      	beq.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b484:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b488:	d820      	bhi.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b48a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b48e:	d012      	beq.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b494:	d81a      	bhi.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b496:	2b00      	cmp	r3, #0
 800b498:	d022      	beq.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b49a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b49e:	d115      	bne.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f001 fd29 	bl	800cf00 <RCCEx_PLL2_Config>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b4b4:	e015      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ba:	3328      	adds	r3, #40	; 0x28
 800b4bc:	2102      	movs	r1, #2
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f001 fdd0 	bl	800d064 <RCCEx_PLL3_Config>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b4ca:	e00a      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4d2:	e006      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b4d4:	bf00      	nop
 800b4d6:	e004      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b4d8:	bf00      	nop
 800b4da:	e002      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b4dc:	bf00      	nop
 800b4de:	e000      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b4e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10e      	bne.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b4ea:	4b06      	ldr	r3, [pc, #24]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ee:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4fa:	4a02      	ldr	r2, [pc, #8]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4fc:	430b      	orrs	r3, r1
 800b4fe:	6593      	str	r3, [r2, #88]	; 0x58
 800b500:	e006      	b.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b502:	bf00      	nop
 800b504:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b508:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b50c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b518:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b51c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b520:	2300      	movs	r3, #0
 800b522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b526:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b52a:	460b      	mov	r3, r1
 800b52c:	4313      	orrs	r3, r2
 800b52e:	d055      	beq.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b534:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b538:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b53c:	d033      	beq.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b53e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b542:	d82c      	bhi.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b548:	d02f      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b54a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b54e:	d826      	bhi.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b550:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b554:	d02b      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b556:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b55a:	d820      	bhi.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b55c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b560:	d012      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b562:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b566:	d81a      	bhi.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d022      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b56c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b570:	d115      	bne.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b576:	3308      	adds	r3, #8
 800b578:	2100      	movs	r1, #0
 800b57a:	4618      	mov	r0, r3
 800b57c:	f001 fcc0 	bl	800cf00 <RCCEx_PLL2_Config>
 800b580:	4603      	mov	r3, r0
 800b582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b586:	e015      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b58c:	3328      	adds	r3, #40	; 0x28
 800b58e:	2102      	movs	r1, #2
 800b590:	4618      	mov	r0, r3
 800b592:	f001 fd67 	bl	800d064 <RCCEx_PLL3_Config>
 800b596:	4603      	mov	r3, r0
 800b598:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b59c:	e00a      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5a4:	e006      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b5a6:	bf00      	nop
 800b5a8:	e004      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b5aa:	bf00      	nop
 800b5ac:	e002      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b5ae:	bf00      	nop
 800b5b0:	e000      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b5b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10b      	bne.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b5bc:	4ba1      	ldr	r3, [pc, #644]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b5cc:	4a9d      	ldr	r2, [pc, #628]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b5ce:	430b      	orrs	r3, r1
 800b5d0:	6593      	str	r3, [r2, #88]	; 0x58
 800b5d2:	e003      	b.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b5dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e4:	f002 0308 	and.w	r3, r2, #8
 800b5e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b5f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	d01e      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b600:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b608:	d10c      	bne.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60e:	3328      	adds	r3, #40	; 0x28
 800b610:	2102      	movs	r1, #2
 800b612:	4618      	mov	r0, r3
 800b614:	f001 fd26 	bl	800d064 <RCCEx_PLL3_Config>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b624:	4b87      	ldr	r3, [pc, #540]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b628:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b634:	4a83      	ldr	r2, [pc, #524]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b636:	430b      	orrs	r3, r1
 800b638:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b642:	f002 0310 	and.w	r3, r2, #16
 800b646:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b64a:	2300      	movs	r3, #0
 800b64c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b650:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b654:	460b      	mov	r3, r1
 800b656:	4313      	orrs	r3, r2
 800b658:	d01e      	beq.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b65e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b666:	d10c      	bne.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b66c:	3328      	adds	r3, #40	; 0x28
 800b66e:	2102      	movs	r1, #2
 800b670:	4618      	mov	r0, r3
 800b672:	f001 fcf7 	bl	800d064 <RCCEx_PLL3_Config>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d002      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b682:	4b70      	ldr	r3, [pc, #448]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b686:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b68e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b692:	4a6c      	ldr	r2, [pc, #432]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b694:	430b      	orrs	r3, r1
 800b696:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b6a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b6ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	d03e      	beq.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b6b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b6c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6c4:	d022      	beq.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b6c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6ca:	d81b      	bhi.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d003      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b6d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6d4:	d00b      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b6d6:	e015      	b.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6dc:	3308      	adds	r3, #8
 800b6de:	2100      	movs	r1, #0
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f001 fc0d 	bl	800cf00 <RCCEx_PLL2_Config>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6ec:	e00f      	b.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f2:	3328      	adds	r3, #40	; 0x28
 800b6f4:	2102      	movs	r1, #2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f001 fcb4 	bl	800d064 <RCCEx_PLL3_Config>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b702:	e004      	b.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b704:	2301      	movs	r3, #1
 800b706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b70a:	e000      	b.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b70c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b70e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10b      	bne.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b716:	4b4b      	ldr	r3, [pc, #300]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b71a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b71e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b722:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b726:	4a47      	ldr	r2, [pc, #284]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b728:	430b      	orrs	r3, r1
 800b72a:	6593      	str	r3, [r2, #88]	; 0x58
 800b72c:	e003      	b.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b72e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b732:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b742:	67bb      	str	r3, [r7, #120]	; 0x78
 800b744:	2300      	movs	r3, #0
 800b746:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b748:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b74c:	460b      	mov	r3, r1
 800b74e:	4313      	orrs	r3, r2
 800b750:	d03b      	beq.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b75a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b75e:	d01f      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b760:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b764:	d818      	bhi.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b76a:	d003      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b76c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b770:	d007      	beq.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b772:	e011      	b.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b774:	4b33      	ldr	r3, [pc, #204]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b778:	4a32      	ldr	r2, [pc, #200]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b77a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b77e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b780:	e00f      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b782:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b786:	3328      	adds	r3, #40	; 0x28
 800b788:	2101      	movs	r1, #1
 800b78a:	4618      	mov	r0, r3
 800b78c:	f001 fc6a 	bl	800d064 <RCCEx_PLL3_Config>
 800b790:	4603      	mov	r3, r0
 800b792:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b796:	e004      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b798:	2301      	movs	r3, #1
 800b79a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b79e:	e000      	b.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b7a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10b      	bne.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b7aa:	4b26      	ldr	r3, [pc, #152]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7ba:	4a22      	ldr	r2, [pc, #136]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7bc:	430b      	orrs	r3, r1
 800b7be:	6553      	str	r3, [r2, #84]	; 0x54
 800b7c0:	e003      	b.n	800b7ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b7ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b7d6:	673b      	str	r3, [r7, #112]	; 0x70
 800b7d8:	2300      	movs	r3, #0
 800b7da:	677b      	str	r3, [r7, #116]	; 0x74
 800b7dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	d034      	beq.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d003      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b7f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7f4:	d007      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b7f6:	e011      	b.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7f8:	4b12      	ldr	r3, [pc, #72]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fc:	4a11      	ldr	r2, [pc, #68]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b804:	e00e      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b80a:	3308      	adds	r3, #8
 800b80c:	2102      	movs	r1, #2
 800b80e:	4618      	mov	r0, r3
 800b810:	f001 fb76 	bl	800cf00 <RCCEx_PLL2_Config>
 800b814:	4603      	mov	r3, r0
 800b816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b81a:	e003      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b822:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b824:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10d      	bne.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b82c:	4b05      	ldr	r3, [pc, #20]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b82e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b830:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b83a:	4a02      	ldr	r2, [pc, #8]	; (800b844 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b83c:	430b      	orrs	r3, r1
 800b83e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b840:	e006      	b.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800b842:	bf00      	nop
 800b844:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b848:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b84c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b85c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b85e:	2300      	movs	r3, #0
 800b860:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b862:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b866:	460b      	mov	r3, r1
 800b868:	4313      	orrs	r3, r2
 800b86a:	d00c      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b86c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b870:	3328      	adds	r3, #40	; 0x28
 800b872:	2102      	movs	r1, #2
 800b874:	4618      	mov	r0, r3
 800b876:	f001 fbf5 	bl	800d064 <RCCEx_PLL3_Config>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d002      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b892:	663b      	str	r3, [r7, #96]	; 0x60
 800b894:	2300      	movs	r3, #0
 800b896:	667b      	str	r3, [r7, #100]	; 0x64
 800b898:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b89c:	460b      	mov	r3, r1
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	d038      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8ae:	d018      	beq.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800b8b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8b4:	d811      	bhi.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b8b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8ba:	d014      	beq.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800b8bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8c0:	d80b      	bhi.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d011      	beq.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800b8c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ca:	d106      	bne.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8cc:	4bc3      	ldr	r3, [pc, #780]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d0:	4ac2      	ldr	r2, [pc, #776]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b8d8:	e008      	b.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8e0:	e004      	b.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b8e2:	bf00      	nop
 800b8e4:	e002      	b.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b8e6:	bf00      	nop
 800b8e8:	e000      	b.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800b8ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d10b      	bne.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8f4:	4bb9      	ldr	r3, [pc, #740]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b8f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b8fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b904:	4ab5      	ldr	r2, [pc, #724]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b906:	430b      	orrs	r3, r1
 800b908:	6553      	str	r3, [r2, #84]	; 0x54
 800b90a:	e003      	b.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b90c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b910:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b920:	65bb      	str	r3, [r7, #88]	; 0x58
 800b922:	2300      	movs	r3, #0
 800b924:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b926:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b92a:	460b      	mov	r3, r1
 800b92c:	4313      	orrs	r3, r2
 800b92e:	d009      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b930:	4baa      	ldr	r3, [pc, #680]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b934:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b93c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b93e:	4aa7      	ldr	r2, [pc, #668]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b940:	430b      	orrs	r3, r1
 800b942:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800b950:	653b      	str	r3, [r7, #80]	; 0x50
 800b952:	2300      	movs	r3, #0
 800b954:	657b      	str	r3, [r7, #84]	; 0x54
 800b956:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b95a:	460b      	mov	r3, r1
 800b95c:	4313      	orrs	r3, r2
 800b95e:	d00a      	beq.n	800b976 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b960:	4b9e      	ldr	r3, [pc, #632]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800b968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b96c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b970:	4a9a      	ldr	r2, [pc, #616]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b972:	430b      	orrs	r3, r1
 800b974:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b982:	64bb      	str	r3, [r7, #72]	; 0x48
 800b984:	2300      	movs	r3, #0
 800b986:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b988:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b98c:	460b      	mov	r3, r1
 800b98e:	4313      	orrs	r3, r2
 800b990:	d009      	beq.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b992:	4b92      	ldr	r3, [pc, #584]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b996:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b99a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9a0:	4a8e      	ldr	r2, [pc, #568]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9a2:	430b      	orrs	r3, r1
 800b9a4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b9b2:	643b      	str	r3, [r7, #64]	; 0x40
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	647b      	str	r3, [r7, #68]	; 0x44
 800b9b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b9bc:	460b      	mov	r3, r1
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	d00e      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b9c2:	4b86      	ldr	r3, [pc, #536]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	4a85      	ldr	r2, [pc, #532]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b9cc:	6113      	str	r3, [r2, #16]
 800b9ce:	4b83      	ldr	r3, [pc, #524]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9d0:	6919      	ldr	r1, [r3, #16]
 800b9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b9da:	4a80      	ldr	r2, [pc, #512]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9dc:	430b      	orrs	r3, r1
 800b9de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b9ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	d009      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b9fc:	4b77      	ldr	r3, [pc, #476]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b9fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba00:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ba04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba0a:	4a74      	ldr	r2, [pc, #464]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba0c:	430b      	orrs	r3, r1
 800ba0e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ba10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ba1c:	633b      	str	r3, [r7, #48]	; 0x30
 800ba1e:	2300      	movs	r3, #0
 800ba20:	637b      	str	r3, [r7, #52]	; 0x34
 800ba22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ba26:	460b      	mov	r3, r1
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	d00a      	beq.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ba2c:	4b6b      	ldr	r3, [pc, #428]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba30:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ba34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba3c:	4a67      	ldr	r2, [pc, #412]	; (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba3e:	430b      	orrs	r3, r1
 800ba40:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ba42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	62b9      	str	r1, [r7, #40]	; 0x28
 800ba4e:	f003 0301 	and.w	r3, r3, #1
 800ba52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ba58:	460b      	mov	r3, r1
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	d011      	beq.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba62:	3308      	adds	r3, #8
 800ba64:	2100      	movs	r1, #0
 800ba66:	4618      	mov	r0, r3
 800ba68:	f001 fa4a 	bl	800cf00 <RCCEx_PLL2_Config>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ba72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d003      	beq.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ba82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	6239      	str	r1, [r7, #32]
 800ba8e:	f003 0302 	and.w	r3, r3, #2
 800ba92:	627b      	str	r3, [r7, #36]	; 0x24
 800ba94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	d011      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baa2:	3308      	adds	r3, #8
 800baa4:	2101      	movs	r1, #1
 800baa6:	4618      	mov	r0, r3
 800baa8:	f001 fa2a 	bl	800cf00 <RCCEx_PLL2_Config>
 800baac:	4603      	mov	r3, r0
 800baae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d003      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800babe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baca:	2100      	movs	r1, #0
 800bacc:	61b9      	str	r1, [r7, #24]
 800bace:	f003 0304 	and.w	r3, r3, #4
 800bad2:	61fb      	str	r3, [r7, #28]
 800bad4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bad8:	460b      	mov	r3, r1
 800bada:	4313      	orrs	r3, r2
 800badc:	d011      	beq.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae2:	3308      	adds	r3, #8
 800bae4:	2102      	movs	r1, #2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f001 fa0a 	bl	800cf00 <RCCEx_PLL2_Config>
 800baec:	4603      	mov	r3, r0
 800baee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800baf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bafa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bafe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bb02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	6139      	str	r1, [r7, #16]
 800bb0e:	f003 0308 	and.w	r3, r3, #8
 800bb12:	617b      	str	r3, [r7, #20]
 800bb14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	d011      	beq.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb22:	3328      	adds	r3, #40	; 0x28
 800bb24:	2100      	movs	r1, #0
 800bb26:	4618      	mov	r0, r3
 800bb28:	f001 fa9c 	bl	800d064 <RCCEx_PLL3_Config>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bb32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bb42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	f003 0310 	and.w	r3, r3, #16
 800bb52:	60fb      	str	r3, [r7, #12]
 800bb54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	d011      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb62:	3328      	adds	r3, #40	; 0x28
 800bb64:	2101      	movs	r1, #1
 800bb66:	4618      	mov	r0, r3
 800bb68:	f001 fa7c 	bl	800d064 <RCCEx_PLL3_Config>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bb72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d003      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	6039      	str	r1, [r7, #0]
 800bb8e:	f003 0320 	and.w	r3, r3, #32
 800bb92:	607b      	str	r3, [r7, #4]
 800bb94:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	d011      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba2:	3328      	adds	r3, #40	; 0x28
 800bba4:	2102      	movs	r1, #2
 800bba6:	4618      	mov	r0, r3
 800bba8:	f001 fa5c 	bl	800d064 <RCCEx_PLL3_Config>
 800bbac:	4603      	mov	r3, r0
 800bbae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bbb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d003      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bbc2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	e000      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800bbce:	2301      	movs	r3, #1
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbdc:	58024400 	.word	0x58024400

0800bbe0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b090      	sub	sp, #64	; 0x40
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bbea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbee:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bbf2:	430b      	orrs	r3, r1
 800bbf4:	f040 8094 	bne.w	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bbf8:	4b9e      	ldr	r3, [pc, #632]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbfc:	f003 0307 	and.w	r3, r3, #7
 800bc00:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	2b04      	cmp	r3, #4
 800bc06:	f200 8087 	bhi.w	800bd18 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bc0a:	a201      	add	r2, pc, #4	; (adr r2, 800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc10:	0800bc25 	.word	0x0800bc25
 800bc14:	0800bc4d 	.word	0x0800bc4d
 800bc18:	0800bc75 	.word	0x0800bc75
 800bc1c:	0800bd11 	.word	0x0800bd11
 800bc20:	0800bc9d 	.word	0x0800bc9d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc24:	4b93      	ldr	r3, [pc, #588]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc30:	d108      	bne.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc36:	4618      	mov	r0, r3
 800bc38:	f001 f810 	bl	800cc5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc40:	f000 bd45 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc44:	2300      	movs	r3, #0
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc48:	f000 bd41 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc4c:	4b89      	ldr	r3, [pc, #548]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc58:	d108      	bne.n	800bc6c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc5a:	f107 0318 	add.w	r3, r7, #24
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 fd54 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc68:	f000 bd31 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc70:	f000 bd2d 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc74:	4b7f      	ldr	r3, [pc, #508]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc80:	d108      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc82:	f107 030c 	add.w	r3, r7, #12
 800bc86:	4618      	mov	r0, r3
 800bc88:	f000 fe94 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc90:	f000 bd1d 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc94:	2300      	movs	r3, #0
 800bc96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc98:	f000 bd19 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc9c:	4b75      	ldr	r3, [pc, #468]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bca0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bca4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bca6:	4b73      	ldr	r3, [pc, #460]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 0304 	and.w	r3, r3, #4
 800bcae:	2b04      	cmp	r3, #4
 800bcb0:	d10c      	bne.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d109      	bne.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcb8:	4b6e      	ldr	r3, [pc, #440]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	08db      	lsrs	r3, r3, #3
 800bcbe:	f003 0303 	and.w	r3, r3, #3
 800bcc2:	4a6d      	ldr	r2, [pc, #436]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bcc4:	fa22 f303 	lsr.w	r3, r2, r3
 800bcc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcca:	e01f      	b.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bccc:	4b69      	ldr	r3, [pc, #420]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcd8:	d106      	bne.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bce0:	d102      	bne.n	800bce8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bce2:	4b66      	ldr	r3, [pc, #408]	; (800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bce6:	e011      	b.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bce8:	4b62      	ldr	r3, [pc, #392]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcf4:	d106      	bne.n	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bcf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcfc:	d102      	bne.n	800bd04 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcfe:	4b60      	ldr	r3, [pc, #384]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bd00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd02:	e003      	b.n	800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd04:	2300      	movs	r3, #0
 800bd06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd08:	f000 bce1 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bd0c:	f000 bcdf 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd10:	4b5c      	ldr	r3, [pc, #368]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd14:	f000 bcdb 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd1c:	f000 bcd7 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bd20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd24:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bd28:	430b      	orrs	r3, r1
 800bd2a:	f040 80ad 	bne.w	800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bd2e:	4b51      	ldr	r3, [pc, #324]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd32:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bd36:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd3e:	d056      	beq.n	800bdee <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd46:	f200 8090 	bhi.w	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4c:	2bc0      	cmp	r3, #192	; 0xc0
 800bd4e:	f000 8088 	beq.w	800be62 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	2bc0      	cmp	r3, #192	; 0xc0
 800bd56:	f200 8088 	bhi.w	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	2b80      	cmp	r3, #128	; 0x80
 800bd5e:	d032      	beq.n	800bdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd62:	2b80      	cmp	r3, #128	; 0x80
 800bd64:	f200 8081 	bhi.w	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d003      	beq.n	800bd76 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	2b40      	cmp	r3, #64	; 0x40
 800bd72:	d014      	beq.n	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bd74:	e079      	b.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd76:	4b3f      	ldr	r3, [pc, #252]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd82:	d108      	bne.n	800bd96 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 ff67 	bl	800cc5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd92:	f000 bc9c 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd96:	2300      	movs	r3, #0
 800bd98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd9a:	f000 bc98 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd9e:	4b35      	ldr	r3, [pc, #212]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bda6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdaa:	d108      	bne.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdac:	f107 0318 	add.w	r3, r7, #24
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f000 fcab 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdba:	f000 bc88 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdc2:	f000 bc84 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bdc6:	4b2b      	ldr	r3, [pc, #172]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdd2:	d108      	bne.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdd4:	f107 030c 	add.w	r3, r7, #12
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f000 fdeb 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bde2:	f000 bc74 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bde6:	2300      	movs	r3, #0
 800bde8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdea:	f000 bc70 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bdee:	4b21      	ldr	r3, [pc, #132]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bdf6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bdf8:	4b1e      	ldr	r3, [pc, #120]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f003 0304 	and.w	r3, r3, #4
 800be00:	2b04      	cmp	r3, #4
 800be02:	d10c      	bne.n	800be1e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800be04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be06:	2b00      	cmp	r3, #0
 800be08:	d109      	bne.n	800be1e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be0a:	4b1a      	ldr	r3, [pc, #104]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	08db      	lsrs	r3, r3, #3
 800be10:	f003 0303 	and.w	r3, r3, #3
 800be14:	4a18      	ldr	r2, [pc, #96]	; (800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be16:	fa22 f303 	lsr.w	r3, r2, r3
 800be1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be1c:	e01f      	b.n	800be5e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be1e:	4b15      	ldr	r3, [pc, #84]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be2a:	d106      	bne.n	800be3a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800be2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be32:	d102      	bne.n	800be3a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be34:	4b11      	ldr	r3, [pc, #68]	; (800be7c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800be36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be38:	e011      	b.n	800be5e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be3a:	4b0e      	ldr	r3, [pc, #56]	; (800be74 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be46:	d106      	bne.n	800be56 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800be48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be4e:	d102      	bne.n	800be56 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be50:	4b0b      	ldr	r3, [pc, #44]	; (800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800be52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be54:	e003      	b.n	800be5e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be56:	2300      	movs	r3, #0
 800be58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be5a:	f000 bc38 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800be5e:	f000 bc36 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be62:	4b08      	ldr	r3, [pc, #32]	; (800be84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800be64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be66:	f000 bc32 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800be6a:	2300      	movs	r3, #0
 800be6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be6e:	f000 bc2e 	b.w	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800be72:	bf00      	nop
 800be74:	58024400 	.word	0x58024400
 800be78:	03d09000 	.word	0x03d09000
 800be7c:	003d0900 	.word	0x003d0900
 800be80:	017d7840 	.word	0x017d7840
 800be84:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800be88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be8c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800be90:	430b      	orrs	r3, r1
 800be92:	f040 809c 	bne.w	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800be96:	4b9e      	ldr	r3, [pc, #632]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be9a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800be9e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bea6:	d054      	beq.n	800bf52 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800bea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800beae:	f200 808b 	bhi.w	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800beb8:	f000 8083 	beq.w	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800bebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bec2:	f200 8081 	bhi.w	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800becc:	d02f      	beq.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bed4:	d878      	bhi.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d004      	beq.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800bedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bede:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bee2:	d012      	beq.n	800bf0a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800bee4:	e070      	b.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bee6:	4b8a      	ldr	r3, [pc, #552]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800beee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bef2:	d107      	bne.n	800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 feaf 	bl	800cc5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800befe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf02:	e3e4      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf04:	2300      	movs	r3, #0
 800bf06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf08:	e3e1      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf0a:	4b81      	ldr	r3, [pc, #516]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf16:	d107      	bne.n	800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf18:	f107 0318 	add.w	r3, r7, #24
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f000 fbf5 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf26:	e3d2      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf2c:	e3cf      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf2e:	4b78      	ldr	r3, [pc, #480]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf3a:	d107      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf3c:	f107 030c 	add.w	r3, r7, #12
 800bf40:	4618      	mov	r0, r3
 800bf42:	f000 fd37 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf4a:	e3c0      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf50:	e3bd      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf52:	4b6f      	ldr	r3, [pc, #444]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf5c:	4b6c      	ldr	r3, [pc, #432]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f003 0304 	and.w	r3, r3, #4
 800bf64:	2b04      	cmp	r3, #4
 800bf66:	d10c      	bne.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800bf68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d109      	bne.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf6e:	4b68      	ldr	r3, [pc, #416]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	08db      	lsrs	r3, r3, #3
 800bf74:	f003 0303 	and.w	r3, r3, #3
 800bf78:	4a66      	ldr	r2, [pc, #408]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bf7a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf80:	e01e      	b.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf82:	4b63      	ldr	r3, [pc, #396]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf8e:	d106      	bne.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800bf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf96:	d102      	bne.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf98:	4b5f      	ldr	r3, [pc, #380]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800bf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf9c:	e010      	b.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf9e:	4b5c      	ldr	r3, [pc, #368]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfaa:	d106      	bne.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800bfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfb2:	d102      	bne.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bfb4:	4b59      	ldr	r3, [pc, #356]	; (800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800bfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfb8:	e002      	b.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bfbe:	e386      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bfc0:	e385      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfc2:	4b57      	ldr	r3, [pc, #348]	; (800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800bfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfc6:	e382      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfcc:	e37f      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bfce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfd2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bfd6:	430b      	orrs	r3, r1
 800bfd8:	f040 80a7 	bne.w	800c12a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bfdc:	4b4c      	ldr	r3, [pc, #304]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfe0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bfe4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bfec:	d055      	beq.n	800c09a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bff4:	f200 8096 	bhi.w	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bffe:	f000 8084 	beq.w	800c10a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c008:	f200 808c 	bhi.w	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c012:	d030      	beq.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c01a:	f200 8083 	bhi.w	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c020:	2b00      	cmp	r3, #0
 800c022:	d004      	beq.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c026:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c02a:	d012      	beq.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c02c:	e07a      	b.n	800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c02e:	4b38      	ldr	r3, [pc, #224]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c036:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c03a:	d107      	bne.n	800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c03c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c040:	4618      	mov	r0, r3
 800c042:	f000 fe0b 	bl	800cc5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c048:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c04a:	e340      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c04c:	2300      	movs	r3, #0
 800c04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c050:	e33d      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c052:	4b2f      	ldr	r3, [pc, #188]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c05a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c05e:	d107      	bne.n	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c060:	f107 0318 	add.w	r3, r7, #24
 800c064:	4618      	mov	r0, r3
 800c066:	f000 fb51 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c06e:	e32e      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c070:	2300      	movs	r3, #0
 800c072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c074:	e32b      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c076:	4b26      	ldr	r3, [pc, #152]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c07e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c082:	d107      	bne.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c084:	f107 030c 	add.w	r3, r7, #12
 800c088:	4618      	mov	r0, r3
 800c08a:	f000 fc93 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c092:	e31c      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c094:	2300      	movs	r3, #0
 800c096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c098:	e319      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c09a:	4b1d      	ldr	r3, [pc, #116]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c09c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c09e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0a4:	4b1a      	ldr	r3, [pc, #104]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f003 0304 	and.w	r3, r3, #4
 800c0ac:	2b04      	cmp	r3, #4
 800c0ae:	d10c      	bne.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d109      	bne.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0b6:	4b16      	ldr	r3, [pc, #88]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	08db      	lsrs	r3, r3, #3
 800c0bc:	f003 0303 	and.w	r3, r3, #3
 800c0c0:	4a14      	ldr	r2, [pc, #80]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c0c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0c8:	e01e      	b.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0ca:	4b11      	ldr	r3, [pc, #68]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0d6:	d106      	bne.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0de:	d102      	bne.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0e0:	4b0d      	ldr	r3, [pc, #52]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0e4:	e010      	b.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0e6:	4b0a      	ldr	r3, [pc, #40]	; (800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0f2:	d106      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0fa:	d102      	bne.n	800c102 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0fc:	4b07      	ldr	r3, [pc, #28]	; (800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c100:	e002      	b.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c102:	2300      	movs	r3, #0
 800c104:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c106:	e2e2      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c108:	e2e1      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c10a:	4b05      	ldr	r3, [pc, #20]	; (800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c10e:	e2de      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c110:	58024400 	.word	0x58024400
 800c114:	03d09000 	.word	0x03d09000
 800c118:	003d0900 	.word	0x003d0900
 800c11c:	017d7840 	.word	0x017d7840
 800c120:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c124:	2300      	movs	r3, #0
 800c126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c128:	e2d1      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c12a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c12e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c132:	430b      	orrs	r3, r1
 800c134:	f040 809c 	bne.w	800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c138:	4b93      	ldr	r3, [pc, #588]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c13a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c13c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c140:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c148:	d054      	beq.n	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c14c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c150:	f200 808b 	bhi.w	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c156:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c15a:	f000 8083 	beq.w	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c160:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c164:	f200 8081 	bhi.w	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c16e:	d02f      	beq.n	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c176:	d878      	bhi.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d004      	beq.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c184:	d012      	beq.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c186:	e070      	b.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c188:	4b7f      	ldr	r3, [pc, #508]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c190:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c194:	d107      	bne.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c19a:	4618      	mov	r0, r3
 800c19c:	f000 fd5e 	bl	800cc5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1a4:	e293      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1aa:	e290      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1ac:	4b76      	ldr	r3, [pc, #472]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1b8:	d107      	bne.n	800c1ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1ba:	f107 0318 	add.w	r3, r7, #24
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f000 faa4 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1c8:	e281      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1ce:	e27e      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1d0:	4b6d      	ldr	r3, [pc, #436]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1dc:	d107      	bne.n	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1de:	f107 030c 	add.w	r3, r7, #12
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f000 fbe6 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ec:	e26f      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1f2:	e26c      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1f4:	4b64      	ldr	r3, [pc, #400]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c1f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1fc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1fe:	4b62      	ldr	r3, [pc, #392]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f003 0304 	and.w	r3, r3, #4
 800c206:	2b04      	cmp	r3, #4
 800c208:	d10c      	bne.n	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d109      	bne.n	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c210:	4b5d      	ldr	r3, [pc, #372]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	08db      	lsrs	r3, r3, #3
 800c216:	f003 0303 	and.w	r3, r3, #3
 800c21a:	4a5c      	ldr	r2, [pc, #368]	; (800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c21c:	fa22 f303 	lsr.w	r3, r2, r3
 800c220:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c222:	e01e      	b.n	800c262 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c224:	4b58      	ldr	r3, [pc, #352]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c22c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c230:	d106      	bne.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c238:	d102      	bne.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c23a:	4b55      	ldr	r3, [pc, #340]	; (800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c23c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c23e:	e010      	b.n	800c262 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c240:	4b51      	ldr	r3, [pc, #324]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c24c:	d106      	bne.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c254:	d102      	bne.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c256:	4b4f      	ldr	r3, [pc, #316]	; (800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c258:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c25a:	e002      	b.n	800c262 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c260:	e235      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c262:	e234      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c264:	4b4c      	ldr	r3, [pc, #304]	; (800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c268:	e231      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c26e:	e22e      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c270:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c274:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c278:	430b      	orrs	r3, r1
 800c27a:	f040 808f 	bne.w	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c27e:	4b42      	ldr	r3, [pc, #264]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c282:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c286:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c28e:	d06b      	beq.n	800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c292:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c296:	d874      	bhi.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c29e:	d056      	beq.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c2a6:	d86c      	bhi.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c2ae:	d03b      	beq.n	800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c2b6:	d864      	bhi.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2be:	d021      	beq.n	800c304 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2c6:	d85c      	bhi.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d004      	beq.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2d4:	d004      	beq.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c2d6:	e054      	b.n	800c382 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c2d8:	f7fe fa0a 	bl	800a6f0 <HAL_RCC_GetPCLK1Freq>
 800c2dc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c2de:	e1f6      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2e0:	4b29      	ldr	r3, [pc, #164]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2ec:	d107      	bne.n	800c2fe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2ee:	f107 0318 	add.w	r3, r7, #24
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 fa0a 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2fc:	e1e7      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c302:	e1e4      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c304:	4b20      	ldr	r3, [pc, #128]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c30c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c310:	d107      	bne.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c312:	f107 030c 	add.w	r3, r7, #12
 800c316:	4618      	mov	r0, r3
 800c318:	f000 fb4c 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c320:	e1d5      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c322:	2300      	movs	r3, #0
 800c324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c326:	e1d2      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c328:	4b17      	ldr	r3, [pc, #92]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f003 0304 	and.w	r3, r3, #4
 800c330:	2b04      	cmp	r3, #4
 800c332:	d109      	bne.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c334:	4b14      	ldr	r3, [pc, #80]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	08db      	lsrs	r3, r3, #3
 800c33a:	f003 0303 	and.w	r3, r3, #3
 800c33e:	4a13      	ldr	r2, [pc, #76]	; (800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c340:	fa22 f303 	lsr.w	r3, r2, r3
 800c344:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c346:	e1c2      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c348:	2300      	movs	r3, #0
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c34c:	e1bf      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c34e:	4b0e      	ldr	r3, [pc, #56]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c35a:	d102      	bne.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c35c:	4b0c      	ldr	r3, [pc, #48]	; (800c390 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c35e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c360:	e1b5      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c366:	e1b2      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c368:	4b07      	ldr	r3, [pc, #28]	; (800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c374:	d102      	bne.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c376:	4b07      	ldr	r3, [pc, #28]	; (800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c378:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c37a:	e1a8      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c37c:	2300      	movs	r3, #0
 800c37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c380:	e1a5      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c386:	e1a2      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c388:	58024400 	.word	0x58024400
 800c38c:	03d09000 	.word	0x03d09000
 800c390:	003d0900 	.word	0x003d0900
 800c394:	017d7840 	.word	0x017d7840
 800c398:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3a0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c3a4:	430b      	orrs	r3, r1
 800c3a6:	d173      	bne.n	800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c3a8:	4b9c      	ldr	r3, [pc, #624]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c3b0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3b8:	d02f      	beq.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3c0:	d863      	bhi.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d004      	beq.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3ce:	d012      	beq.n	800c3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c3d0:	e05b      	b.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3d2:	4b92      	ldr	r3, [pc, #584]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3de:	d107      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3e0:	f107 0318 	add.w	r3, r7, #24
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f000 f991 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3ee:	e16e      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f4:	e16b      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3f6:	4b89      	ldr	r3, [pc, #548]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c402:	d107      	bne.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c404:	f107 030c 	add.w	r3, r7, #12
 800c408:	4618      	mov	r0, r3
 800c40a:	f000 fad3 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c412:	e15c      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c414:	2300      	movs	r3, #0
 800c416:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c418:	e159      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c41a:	4b80      	ldr	r3, [pc, #512]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c41c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c41e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c422:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c424:	4b7d      	ldr	r3, [pc, #500]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 0304 	and.w	r3, r3, #4
 800c42c:	2b04      	cmp	r3, #4
 800c42e:	d10c      	bne.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c432:	2b00      	cmp	r3, #0
 800c434:	d109      	bne.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c436:	4b79      	ldr	r3, [pc, #484]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	08db      	lsrs	r3, r3, #3
 800c43c:	f003 0303 	and.w	r3, r3, #3
 800c440:	4a77      	ldr	r2, [pc, #476]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c442:	fa22 f303 	lsr.w	r3, r2, r3
 800c446:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c448:	e01e      	b.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c44a:	4b74      	ldr	r3, [pc, #464]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c456:	d106      	bne.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c45a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c45e:	d102      	bne.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c460:	4b70      	ldr	r3, [pc, #448]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c462:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c464:	e010      	b.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c466:	4b6d      	ldr	r3, [pc, #436]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c46e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c472:	d106      	bne.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c47a:	d102      	bne.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c47c:	4b6a      	ldr	r3, [pc, #424]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c47e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c480:	e002      	b.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c482:	2300      	movs	r3, #0
 800c484:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c486:	e122      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c488:	e121      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c48e:	e11e      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c490:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c494:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c498:	430b      	orrs	r3, r1
 800c49a:	d133      	bne.n	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c49c:	4b5f      	ldr	r3, [pc, #380]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c49e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4a4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d004      	beq.n	800c4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4b2:	d012      	beq.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c4b4:	e023      	b.n	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4b6:	4b59      	ldr	r3, [pc, #356]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4c2:	d107      	bne.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f000 fbc7 	bl	800cc5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4d2:	e0fc      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d8:	e0f9      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4da:	4b50      	ldr	r3, [pc, #320]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4e6:	d107      	bne.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4e8:	f107 0318 	add.w	r3, r7, #24
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f000 f90d 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c4f2:	6a3b      	ldr	r3, [r7, #32]
 800c4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4f6:	e0ea      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4fc:	e0e7      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c4fe:	2300      	movs	r3, #0
 800c500:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c502:	e0e4      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c504:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c508:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c50c:	430b      	orrs	r3, r1
 800c50e:	f040 808d 	bne.w	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c512:	4b42      	ldr	r3, [pc, #264]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c516:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c51a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c522:	d06b      	beq.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c52a:	d874      	bhi.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c532:	d056      	beq.n	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c53a:	d86c      	bhi.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c542:	d03b      	beq.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c546:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c54a:	d864      	bhi.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c552:	d021      	beq.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c55a:	d85c      	bhi.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d004      	beq.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c564:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c568:	d004      	beq.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c56a:	e054      	b.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c56c:	f000 f8b8 	bl	800c6e0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c570:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c572:	e0ac      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c574:	4b29      	ldr	r3, [pc, #164]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c57c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c580:	d107      	bne.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c582:	f107 0318 	add.w	r3, r7, #24
 800c586:	4618      	mov	r0, r3
 800c588:	f000 f8c0 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c590:	e09d      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c596:	e09a      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c598:	4b20      	ldr	r3, [pc, #128]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5a4:	d107      	bne.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5a6:	f107 030c 	add.w	r3, r7, #12
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f000 fa02 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5b4:	e08b      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ba:	e088      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5bc:	4b17      	ldr	r3, [pc, #92]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f003 0304 	and.w	r3, r3, #4
 800c5c4:	2b04      	cmp	r3, #4
 800c5c6:	d109      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5c8:	4b14      	ldr	r3, [pc, #80]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	08db      	lsrs	r3, r3, #3
 800c5ce:	f003 0303 	and.w	r3, r3, #3
 800c5d2:	4a13      	ldr	r2, [pc, #76]	; (800c620 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c5d4:	fa22 f303 	lsr.w	r3, r2, r3
 800c5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5da:	e078      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e0:	e075      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c5e2:	4b0e      	ldr	r3, [pc, #56]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5ee:	d102      	bne.n	800c5f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c5f0:	4b0c      	ldr	r3, [pc, #48]	; (800c624 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5f4:	e06b      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5fa:	e068      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c5fc:	4b07      	ldr	r3, [pc, #28]	; (800c61c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c608:	d102      	bne.n	800c610 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c60a:	4b07      	ldr	r3, [pc, #28]	; (800c628 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c60c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c60e:	e05e      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c614:	e05b      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c616:	2300      	movs	r3, #0
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c61a:	e058      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c61c:	58024400 	.word	0x58024400
 800c620:	03d09000 	.word	0x03d09000
 800c624:	003d0900 	.word	0x003d0900
 800c628:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c62c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c630:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c634:	430b      	orrs	r3, r1
 800c636:	d148      	bne.n	800c6ca <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c638:	4b27      	ldr	r3, [pc, #156]	; (800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c63a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c63c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c640:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c648:	d02a      	beq.n	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c650:	d838      	bhi.n	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c654:	2b00      	cmp	r3, #0
 800c656:	d004      	beq.n	800c662 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c65e:	d00d      	beq.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c660:	e030      	b.n	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c662:	4b1d      	ldr	r3, [pc, #116]	; (800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c66a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c66e:	d102      	bne.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c670:	4b1a      	ldr	r3, [pc, #104]	; (800c6dc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c672:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c674:	e02b      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c676:	2300      	movs	r3, #0
 800c678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c67a:	e028      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c67c:	4b16      	ldr	r3, [pc, #88]	; (800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c688:	d107      	bne.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c68a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c68e:	4618      	mov	r0, r3
 800c690:	f000 fae4 	bl	800cc5c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c696:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c698:	e019      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c69e:	e016      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6a0:	4b0d      	ldr	r3, [pc, #52]	; (800c6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6ac:	d107      	bne.n	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6ae:	f107 0318 	add.w	r3, r7, #24
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 f82a 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6bc:	e007      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c2:	e004      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c8:	e001      	b.n	800c6ce <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c6ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3740      	adds	r7, #64	; 0x40
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	58024400 	.word	0x58024400
 800c6dc:	017d7840 	.word	0x017d7840

0800c6e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c6e4:	f7fd ffd4 	bl	800a690 <HAL_RCC_GetHCLKFreq>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	4b06      	ldr	r3, [pc, #24]	; (800c704 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c6ec:	6a1b      	ldr	r3, [r3, #32]
 800c6ee:	091b      	lsrs	r3, r3, #4
 800c6f0:	f003 0307 	and.w	r3, r3, #7
 800c6f4:	4904      	ldr	r1, [pc, #16]	; (800c708 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c6f6:	5ccb      	ldrb	r3, [r1, r3]
 800c6f8:	f003 031f 	and.w	r3, r3, #31
 800c6fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c700:	4618      	mov	r0, r3
 800c702:	bd80      	pop	{r7, pc}
 800c704:	58024400 	.word	0x58024400
 800c708:	08017244 	.word	0x08017244

0800c70c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b089      	sub	sp, #36	; 0x24
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c714:	4ba1      	ldr	r3, [pc, #644]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c718:	f003 0303 	and.w	r3, r3, #3
 800c71c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c71e:	4b9f      	ldr	r3, [pc, #636]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c722:	0b1b      	lsrs	r3, r3, #12
 800c724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c728:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c72a:	4b9c      	ldr	r3, [pc, #624]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72e:	091b      	lsrs	r3, r3, #4
 800c730:	f003 0301 	and.w	r3, r3, #1
 800c734:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c736:	4b99      	ldr	r3, [pc, #612]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c73a:	08db      	lsrs	r3, r3, #3
 800c73c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	fb02 f303 	mul.w	r3, r2, r3
 800c746:	ee07 3a90 	vmov	s15, r3
 800c74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c74e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	2b00      	cmp	r3, #0
 800c756:	f000 8111 	beq.w	800c97c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	2b02      	cmp	r3, #2
 800c75e:	f000 8083 	beq.w	800c868 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c762:	69bb      	ldr	r3, [r7, #24]
 800c764:	2b02      	cmp	r3, #2
 800c766:	f200 80a1 	bhi.w	800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d003      	beq.n	800c778 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d056      	beq.n	800c824 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c776:	e099      	b.n	800c8ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c778:	4b88      	ldr	r3, [pc, #544]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f003 0320 	and.w	r3, r3, #32
 800c780:	2b00      	cmp	r3, #0
 800c782:	d02d      	beq.n	800c7e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c784:	4b85      	ldr	r3, [pc, #532]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	08db      	lsrs	r3, r3, #3
 800c78a:	f003 0303 	and.w	r3, r3, #3
 800c78e:	4a84      	ldr	r2, [pc, #528]	; (800c9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c790:	fa22 f303 	lsr.w	r3, r2, r3
 800c794:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	ee07 3a90 	vmov	s15, r3
 800c79c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	ee07 3a90 	vmov	s15, r3
 800c7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7ae:	4b7b      	ldr	r3, [pc, #492]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b6:	ee07 3a90 	vmov	s15, r3
 800c7ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7be:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c7de:	e087      	b.n	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	ee07 3a90 	vmov	s15, r3
 800c7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c7ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7f2:	4b6a      	ldr	r3, [pc, #424]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7fa:	ee07 3a90 	vmov	s15, r3
 800c7fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c802:	ed97 6a03 	vldr	s12, [r7, #12]
 800c806:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c80a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c80e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c81a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c81e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c822:	e065      	b.n	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	ee07 3a90 	vmov	s15, r3
 800c82a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c82e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c9ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c836:	4b59      	ldr	r3, [pc, #356]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c83e:	ee07 3a90 	vmov	s15, r3
 800c842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c846:	ed97 6a03 	vldr	s12, [r7, #12]
 800c84a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c84e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c85a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c85e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c866:	e043      	b.n	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	ee07 3a90 	vmov	s15, r3
 800c86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c872:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c87a:	4b48      	ldr	r3, [pc, #288]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c87e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c882:	ee07 3a90 	vmov	s15, r3
 800c886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c88a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c88e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c89a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c89e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8aa:	e021      	b.n	800c8f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	ee07 3a90 	vmov	s15, r3
 800c8b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c9ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c8ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8be:	4b37      	ldr	r3, [pc, #220]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c6:	ee07 3a90 	vmov	s15, r3
 800c8ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c8f0:	4b2a      	ldr	r3, [pc, #168]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f4:	0a5b      	lsrs	r3, r3, #9
 800c8f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8fa:	ee07 3a90 	vmov	s15, r3
 800c8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c906:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c90a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c90e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c916:	ee17 2a90 	vmov	r2, s15
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c91e:	4b1f      	ldr	r3, [pc, #124]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c922:	0c1b      	lsrs	r3, r3, #16
 800c924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c928:	ee07 3a90 	vmov	s15, r3
 800c92c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c934:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c938:	edd7 6a07 	vldr	s13, [r7, #28]
 800c93c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c944:	ee17 2a90 	vmov	r2, s15
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c94c:	4b13      	ldr	r3, [pc, #76]	; (800c99c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c950:	0e1b      	lsrs	r3, r3, #24
 800c952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c956:	ee07 3a90 	vmov	s15, r3
 800c95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c95e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c962:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c966:	edd7 6a07 	vldr	s13, [r7, #28]
 800c96a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c96e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c972:	ee17 2a90 	vmov	r2, s15
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c97a:	e008      	b.n	800c98e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	609a      	str	r2, [r3, #8]
}
 800c98e:	bf00      	nop
 800c990:	3724      	adds	r7, #36	; 0x24
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	58024400 	.word	0x58024400
 800c9a0:	03d09000 	.word	0x03d09000
 800c9a4:	46000000 	.word	0x46000000
 800c9a8:	4c742400 	.word	0x4c742400
 800c9ac:	4a742400 	.word	0x4a742400
 800c9b0:	4bbebc20 	.word	0x4bbebc20

0800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b089      	sub	sp, #36	; 0x24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9bc:	4ba1      	ldr	r3, [pc, #644]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c0:	f003 0303 	and.w	r3, r3, #3
 800c9c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c9c6:	4b9f      	ldr	r3, [pc, #636]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ca:	0d1b      	lsrs	r3, r3, #20
 800c9cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c9d2:	4b9c      	ldr	r3, [pc, #624]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d6:	0a1b      	lsrs	r3, r3, #8
 800c9d8:	f003 0301 	and.w	r3, r3, #1
 800c9dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c9de:	4b99      	ldr	r3, [pc, #612]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9e2:	08db      	lsrs	r3, r3, #3
 800c9e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	fb02 f303 	mul.w	r3, r2, r3
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f000 8111 	beq.w	800cc24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	f000 8083 	beq.w	800cb10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	2b02      	cmp	r3, #2
 800ca0e:	f200 80a1 	bhi.w	800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d003      	beq.n	800ca20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d056      	beq.n	800cacc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ca1e:	e099      	b.n	800cb54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca20:	4b88      	ldr	r3, [pc, #544]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f003 0320 	and.w	r3, r3, #32
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d02d      	beq.n	800ca88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca2c:	4b85      	ldr	r3, [pc, #532]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	08db      	lsrs	r3, r3, #3
 800ca32:	f003 0303 	and.w	r3, r3, #3
 800ca36:	4a84      	ldr	r2, [pc, #528]	; (800cc48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ca38:	fa22 f303 	lsr.w	r3, r2, r3
 800ca3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	ee07 3a90 	vmov	s15, r3
 800ca44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	ee07 3a90 	vmov	s15, r3
 800ca4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca56:	4b7b      	ldr	r3, [pc, #492]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca5e:	ee07 3a90 	vmov	s15, r3
 800ca62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca86:	e087      	b.n	800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	ee07 3a90 	vmov	s15, r3
 800ca8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ca96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca9a:	4b6a      	ldr	r3, [pc, #424]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caa2:	ee07 3a90 	vmov	s15, r3
 800caa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800caae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cabe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800caca:	e065      	b.n	800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	ee07 3a90 	vmov	s15, r3
 800cad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cad6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cade:	4b59      	ldr	r3, [pc, #356]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae6:	ee07 3a90 	vmov	s15, r3
 800caea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caee:	ed97 6a03 	vldr	s12, [r7, #12]
 800caf2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800caf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cafa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cafe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb0e:	e043      	b.n	800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	ee07 3a90 	vmov	s15, r3
 800cb16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cb1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb22:	4b48      	ldr	r3, [pc, #288]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb2a:	ee07 3a90 	vmov	s15, r3
 800cb2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb32:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb36:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb52:	e021      	b.n	800cb98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	ee07 3a90 	vmov	s15, r3
 800cb5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cb62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb66:	4b37      	ldr	r3, [pc, #220]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb6e:	ee07 3a90 	vmov	s15, r3
 800cb72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb76:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cb98:	4b2a      	ldr	r3, [pc, #168]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9c:	0a5b      	lsrs	r3, r3, #9
 800cb9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cba2:	ee07 3a90 	vmov	s15, r3
 800cba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbbe:	ee17 2a90 	vmov	r2, s15
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cbc6:	4b1f      	ldr	r3, [pc, #124]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbca:	0c1b      	lsrs	r3, r3, #16
 800cbcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbd0:	ee07 3a90 	vmov	s15, r3
 800cbd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbe0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbec:	ee17 2a90 	vmov	r2, s15
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cbf4:	4b13      	ldr	r3, [pc, #76]	; (800cc44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf8:	0e1b      	lsrs	r3, r3, #24
 800cbfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbfe:	ee07 3a90 	vmov	s15, r3
 800cc02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc1a:	ee17 2a90 	vmov	r2, s15
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cc22:	e008      	b.n	800cc36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2200      	movs	r2, #0
 800cc28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	609a      	str	r2, [r3, #8]
}
 800cc36:	bf00      	nop
 800cc38:	3724      	adds	r7, #36	; 0x24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	58024400 	.word	0x58024400
 800cc48:	03d09000 	.word	0x03d09000
 800cc4c:	46000000 	.word	0x46000000
 800cc50:	4c742400 	.word	0x4c742400
 800cc54:	4a742400 	.word	0x4a742400
 800cc58:	4bbebc20 	.word	0x4bbebc20

0800cc5c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b089      	sub	sp, #36	; 0x24
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc64:	4ba0      	ldr	r3, [pc, #640]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc68:	f003 0303 	and.w	r3, r3, #3
 800cc6c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cc6e:	4b9e      	ldr	r3, [pc, #632]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc72:	091b      	lsrs	r3, r3, #4
 800cc74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc78:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cc7a:	4b9b      	ldr	r3, [pc, #620]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7e:	f003 0301 	and.w	r3, r3, #1
 800cc82:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cc84:	4b98      	ldr	r3, [pc, #608]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc88:	08db      	lsrs	r3, r3, #3
 800cc8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc8e:	693a      	ldr	r2, [r7, #16]
 800cc90:	fb02 f303 	mul.w	r3, r2, r3
 800cc94:	ee07 3a90 	vmov	s15, r3
 800cc98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc9c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f000 8111 	beq.w	800ceca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	2b02      	cmp	r3, #2
 800ccac:	f000 8083 	beq.w	800cdb6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	2b02      	cmp	r3, #2
 800ccb4:	f200 80a1 	bhi.w	800cdfa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d003      	beq.n	800ccc6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d056      	beq.n	800cd72 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ccc4:	e099      	b.n	800cdfa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccc6:	4b88      	ldr	r3, [pc, #544]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f003 0320 	and.w	r3, r3, #32
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d02d      	beq.n	800cd2e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccd2:	4b85      	ldr	r3, [pc, #532]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	08db      	lsrs	r3, r3, #3
 800ccd8:	f003 0303 	and.w	r3, r3, #3
 800ccdc:	4a83      	ldr	r2, [pc, #524]	; (800ceec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ccde:	fa22 f303 	lsr.w	r3, r2, r3
 800cce2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	ee07 3a90 	vmov	s15, r3
 800ccea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	ee07 3a90 	vmov	s15, r3
 800ccf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccfc:	4b7a      	ldr	r3, [pc, #488]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd04:	ee07 3a90 	vmov	s15, r3
 800cd08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd10:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd28:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd2c:	e087      	b.n	800ce3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	ee07 3a90 	vmov	s15, r3
 800cd34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd38:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cef4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cd3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd40:	4b69      	ldr	r3, [pc, #420]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd48:	ee07 3a90 	vmov	s15, r3
 800cd4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd50:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd54:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd70:	e065      	b.n	800ce3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	ee07 3a90 	vmov	s15, r3
 800cd78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd7c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cef8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cd80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd84:	4b58      	ldr	r3, [pc, #352]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd8c:	ee07 3a90 	vmov	s15, r3
 800cd90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd94:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd98:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cda0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cda4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cda8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdb4:	e043      	b.n	800ce3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	ee07 3a90 	vmov	s15, r3
 800cdbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdc0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cefc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cdc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdc8:	4b47      	ldr	r3, [pc, #284]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdd0:	ee07 3a90 	vmov	s15, r3
 800cdd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdd8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cddc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cde0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cde4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cde8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdf8:	e021      	b.n	800ce3e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	ee07 3a90 	vmov	s15, r3
 800ce00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce04:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cef4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ce08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce0c:	4b36      	ldr	r3, [pc, #216]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce14:	ee07 3a90 	vmov	s15, r3
 800ce18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce20:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cef0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce3c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ce3e:	4b2a      	ldr	r3, [pc, #168]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce42:	0a5b      	lsrs	r3, r3, #9
 800ce44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce48:	ee07 3a90 	vmov	s15, r3
 800ce4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce54:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce58:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce64:	ee17 2a90 	vmov	r2, s15
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ce6c:	4b1e      	ldr	r3, [pc, #120]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce70:	0c1b      	lsrs	r3, r3, #16
 800ce72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce76:	ee07 3a90 	vmov	s15, r3
 800ce7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce86:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce92:	ee17 2a90 	vmov	r2, s15
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ce9a:	4b13      	ldr	r3, [pc, #76]	; (800cee8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce9e:	0e1b      	lsrs	r3, r3, #24
 800cea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cea4:	ee07 3a90 	vmov	s15, r3
 800cea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ceb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ceb4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cec0:	ee17 2a90 	vmov	r2, s15
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cec8:	e008      	b.n	800cedc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2200      	movs	r2, #0
 800ceda:	609a      	str	r2, [r3, #8]
}
 800cedc:	bf00      	nop
 800cede:	3724      	adds	r7, #36	; 0x24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr
 800cee8:	58024400 	.word	0x58024400
 800ceec:	03d09000 	.word	0x03d09000
 800cef0:	46000000 	.word	0x46000000
 800cef4:	4c742400 	.word	0x4c742400
 800cef8:	4a742400 	.word	0x4a742400
 800cefc:	4bbebc20 	.word	0x4bbebc20

0800cf00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b084      	sub	sp, #16
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cf0e:	4b53      	ldr	r3, [pc, #332]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf12:	f003 0303 	and.w	r3, r3, #3
 800cf16:	2b03      	cmp	r3, #3
 800cf18:	d101      	bne.n	800cf1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e099      	b.n	800d052 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cf1e:	4b4f      	ldr	r3, [pc, #316]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4a4e      	ldr	r2, [pc, #312]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cf24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cf28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf2a:	f7f6 fcbf 	bl	80038ac <HAL_GetTick>
 800cf2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cf30:	e008      	b.n	800cf44 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf32:	f7f6 fcbb 	bl	80038ac <HAL_GetTick>
 800cf36:	4602      	mov	r2, r0
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	2b02      	cmp	r3, #2
 800cf3e:	d901      	bls.n	800cf44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cf40:	2303      	movs	r3, #3
 800cf42:	e086      	b.n	800d052 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cf44:	4b45      	ldr	r3, [pc, #276]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d1f0      	bne.n	800cf32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cf50:	4b42      	ldr	r3, [pc, #264]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cf52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	031b      	lsls	r3, r3, #12
 800cf5e:	493f      	ldr	r1, [pc, #252]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cf60:	4313      	orrs	r3, r2
 800cf62:	628b      	str	r3, [r1, #40]	; 0x28
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	3b01      	subs	r3, #1
 800cf6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	3b01      	subs	r3, #1
 800cf74:	025b      	lsls	r3, r3, #9
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	431a      	orrs	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	041b      	lsls	r3, r3, #16
 800cf82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf86:	431a      	orrs	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	691b      	ldr	r3, [r3, #16]
 800cf8c:	3b01      	subs	r3, #1
 800cf8e:	061b      	lsls	r3, r3, #24
 800cf90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf94:	4931      	ldr	r1, [pc, #196]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cf96:	4313      	orrs	r3, r2
 800cf98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cf9a:	4b30      	ldr	r3, [pc, #192]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cf9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	695b      	ldr	r3, [r3, #20]
 800cfa6:	492d      	ldr	r1, [pc, #180]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cfac:	4b2b      	ldr	r3, [pc, #172]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb0:	f023 0220 	bic.w	r2, r3, #32
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	699b      	ldr	r3, [r3, #24]
 800cfb8:	4928      	ldr	r1, [pc, #160]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cfbe:	4b27      	ldr	r3, [pc, #156]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc2:	4a26      	ldr	r2, [pc, #152]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cfc4:	f023 0310 	bic.w	r3, r3, #16
 800cfc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cfca:	4b24      	ldr	r3, [pc, #144]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cfcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cfce:	4b24      	ldr	r3, [pc, #144]	; (800d060 <RCCEx_PLL2_Config+0x160>)
 800cfd0:	4013      	ands	r3, r2
 800cfd2:	687a      	ldr	r2, [r7, #4]
 800cfd4:	69d2      	ldr	r2, [r2, #28]
 800cfd6:	00d2      	lsls	r2, r2, #3
 800cfd8:	4920      	ldr	r1, [pc, #128]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cfde:	4b1f      	ldr	r3, [pc, #124]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe2:	4a1e      	ldr	r2, [pc, #120]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cfe4:	f043 0310 	orr.w	r3, r3, #16
 800cfe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d106      	bne.n	800cffe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cff0:	4b1a      	ldr	r3, [pc, #104]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff4:	4a19      	ldr	r2, [pc, #100]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800cff6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cffa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cffc:	e00f      	b.n	800d01e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	2b01      	cmp	r3, #1
 800d002:	d106      	bne.n	800d012 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d004:	4b15      	ldr	r3, [pc, #84]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800d006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d008:	4a14      	ldr	r2, [pc, #80]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800d00a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d00e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d010:	e005      	b.n	800d01e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d012:	4b12      	ldr	r3, [pc, #72]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800d014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d016:	4a11      	ldr	r2, [pc, #68]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800d018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d01c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d01e:	4b0f      	ldr	r3, [pc, #60]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a0e      	ldr	r2, [pc, #56]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800d024:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d02a:	f7f6 fc3f 	bl	80038ac <HAL_GetTick>
 800d02e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d030:	e008      	b.n	800d044 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d032:	f7f6 fc3b 	bl	80038ac <HAL_GetTick>
 800d036:	4602      	mov	r2, r0
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	1ad3      	subs	r3, r2, r3
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	d901      	bls.n	800d044 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d040:	2303      	movs	r3, #3
 800d042:	e006      	b.n	800d052 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d044:	4b05      	ldr	r3, [pc, #20]	; (800d05c <RCCEx_PLL2_Config+0x15c>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d0f0      	beq.n	800d032 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d050:	7bfb      	ldrb	r3, [r7, #15]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	58024400 	.word	0x58024400
 800d060:	ffff0007 	.word	0xffff0007

0800d064 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d072:	4b53      	ldr	r3, [pc, #332]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d076:	f003 0303 	and.w	r3, r3, #3
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	d101      	bne.n	800d082 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	e099      	b.n	800d1b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d082:	4b4f      	ldr	r3, [pc, #316]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4a4e      	ldr	r2, [pc, #312]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d08c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d08e:	f7f6 fc0d 	bl	80038ac <HAL_GetTick>
 800d092:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d094:	e008      	b.n	800d0a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d096:	f7f6 fc09 	bl	80038ac <HAL_GetTick>
 800d09a:	4602      	mov	r2, r0
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	1ad3      	subs	r3, r2, r3
 800d0a0:	2b02      	cmp	r3, #2
 800d0a2:	d901      	bls.n	800d0a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d0a4:	2303      	movs	r3, #3
 800d0a6:	e086      	b.n	800d1b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d0a8:	4b45      	ldr	r3, [pc, #276]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d1f0      	bne.n	800d096 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d0b4:	4b42      	ldr	r3, [pc, #264]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	051b      	lsls	r3, r3, #20
 800d0c2:	493f      	ldr	r1, [pc, #252]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	628b      	str	r3, [r1, #40]	; 0x28
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	3b01      	subs	r3, #1
 800d0d8:	025b      	lsls	r3, r3, #9
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	431a      	orrs	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	68db      	ldr	r3, [r3, #12]
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	041b      	lsls	r3, r3, #16
 800d0e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d0ea:	431a      	orrs	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	061b      	lsls	r3, r3, #24
 800d0f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d0f8:	4931      	ldr	r1, [pc, #196]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d0fa:	4313      	orrs	r3, r2
 800d0fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d0fe:	4b30      	ldr	r3, [pc, #192]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d102:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	695b      	ldr	r3, [r3, #20]
 800d10a:	492d      	ldr	r1, [pc, #180]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d10c:	4313      	orrs	r3, r2
 800d10e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d110:	4b2b      	ldr	r3, [pc, #172]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d114:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	699b      	ldr	r3, [r3, #24]
 800d11c:	4928      	ldr	r1, [pc, #160]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d11e:	4313      	orrs	r3, r2
 800d120:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d122:	4b27      	ldr	r3, [pc, #156]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d126:	4a26      	ldr	r2, [pc, #152]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d12c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d12e:	4b24      	ldr	r3, [pc, #144]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d132:	4b24      	ldr	r3, [pc, #144]	; (800d1c4 <RCCEx_PLL3_Config+0x160>)
 800d134:	4013      	ands	r3, r2
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	69d2      	ldr	r2, [r2, #28]
 800d13a:	00d2      	lsls	r2, r2, #3
 800d13c:	4920      	ldr	r1, [pc, #128]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d13e:	4313      	orrs	r3, r2
 800d140:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d142:	4b1f      	ldr	r3, [pc, #124]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d146:	4a1e      	ldr	r2, [pc, #120]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d14c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d106      	bne.n	800d162 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d154:	4b1a      	ldr	r3, [pc, #104]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d158:	4a19      	ldr	r2, [pc, #100]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d15a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d15e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d160:	e00f      	b.n	800d182 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d106      	bne.n	800d176 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d168:	4b15      	ldr	r3, [pc, #84]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16c:	4a14      	ldr	r2, [pc, #80]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d16e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d172:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d174:	e005      	b.n	800d182 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d176:	4b12      	ldr	r3, [pc, #72]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17a:	4a11      	ldr	r2, [pc, #68]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d17c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d180:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d182:	4b0f      	ldr	r3, [pc, #60]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a0e      	ldr	r2, [pc, #56]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d18c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d18e:	f7f6 fb8d 	bl	80038ac <HAL_GetTick>
 800d192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d194:	e008      	b.n	800d1a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d196:	f7f6 fb89 	bl	80038ac <HAL_GetTick>
 800d19a:	4602      	mov	r2, r0
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	1ad3      	subs	r3, r2, r3
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d901      	bls.n	800d1a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d1a4:	2303      	movs	r3, #3
 800d1a6:	e006      	b.n	800d1b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d1a8:	4b05      	ldr	r3, [pc, #20]	; (800d1c0 <RCCEx_PLL3_Config+0x15c>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d0f0      	beq.n	800d196 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	58024400 	.word	0x58024400
 800d1c4:	ffff0007 	.word	0xffff0007

0800d1c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d071      	beq.n	800d2be <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d106      	bne.n	800d1f4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7f5 fe5a 	bl	8002ea8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2202      	movs	r2, #2
 800d1f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	f003 0310 	and.w	r3, r3, #16
 800d206:	2b10      	cmp	r3, #16
 800d208:	d050      	beq.n	800d2ac <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	22ca      	movs	r2, #202	; 0xca
 800d210:	625a      	str	r2, [r3, #36]	; 0x24
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	2253      	movs	r2, #83	; 0x53
 800d218:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 fa4a 	bl	800d6b4 <RTC_EnterInitMode>
 800d220:	4603      	mov	r3, r0
 800d222:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d224:	7bfb      	ldrb	r3, [r7, #15]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d124      	bne.n	800d274 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	6899      	ldr	r1, [r3, #8]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	4b24      	ldr	r3, [pc, #144]	; (800d2c8 <HAL_RTC_Init+0x100>)
 800d236:	400b      	ands	r3, r1
 800d238:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	6899      	ldr	r1, [r3, #8]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	685a      	ldr	r2, [r3, #4]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	431a      	orrs	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	699b      	ldr	r3, [r3, #24]
 800d24e:	431a      	orrs	r2, r3
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	430a      	orrs	r2, r1
 800d256:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	689b      	ldr	r3, [r3, #8]
 800d25c:	0419      	lsls	r1, r3, #16
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	68da      	ldr	r2, [r3, #12]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	430a      	orrs	r2, r1
 800d268:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fa56 	bl	800d71c <RTC_ExitInitMode>
 800d270:	4603      	mov	r3, r0
 800d272:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d274:	7bfb      	ldrb	r3, [r7, #15]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d113      	bne.n	800d2a2 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f022 0203 	bic.w	r2, r2, #3
 800d288:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	69da      	ldr	r2, [r3, #28]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	695b      	ldr	r3, [r3, #20]
 800d298:	431a      	orrs	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	430a      	orrs	r2, r1
 800d2a0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	22ff      	movs	r2, #255	; 0xff
 800d2a8:	625a      	str	r2, [r3, #36]	; 0x24
 800d2aa:	e001      	b.n	800d2b0 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d103      	bne.n	800d2be <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	ff8fffbf 	.word	0xff8fffbf

0800d2cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d2cc:	b590      	push	{r4, r7, lr}
 800d2ce:	b087      	sub	sp, #28
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d101      	bne.n	800d2e6 <HAL_RTC_SetTime+0x1a>
 800d2e2:	2302      	movs	r3, #2
 800d2e4:	e089      	b.n	800d3fa <HAL_RTC_SetTime+0x12e>
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2202      	movs	r2, #2
 800d2f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	22ca      	movs	r2, #202	; 0xca
 800d2fc:	625a      	str	r2, [r3, #36]	; 0x24
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2253      	movs	r2, #83	; 0x53
 800d304:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f000 f9d4 	bl	800d6b4 <RTC_EnterInitMode>
 800d30c:	4603      	mov	r3, r0
 800d30e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d310:	7cfb      	ldrb	r3, [r7, #19]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d161      	bne.n	800d3da <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d126      	bne.n	800d36a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d326:	2b00      	cmp	r3, #0
 800d328:	d102      	bne.n	800d330 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	2200      	movs	r2, #0
 800d32e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	4618      	mov	r0, r3
 800d336:	f000 fa2f 	bl	800d798 <RTC_ByteToBcd2>
 800d33a:	4603      	mov	r3, r0
 800d33c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	785b      	ldrb	r3, [r3, #1]
 800d342:	4618      	mov	r0, r3
 800d344:	f000 fa28 	bl	800d798 <RTC_ByteToBcd2>
 800d348:	4603      	mov	r3, r0
 800d34a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d34c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	789b      	ldrb	r3, [r3, #2]
 800d352:	4618      	mov	r0, r3
 800d354:	f000 fa20 	bl	800d798 <RTC_ByteToBcd2>
 800d358:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d35a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	78db      	ldrb	r3, [r3, #3]
 800d362:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d364:	4313      	orrs	r3, r2
 800d366:	617b      	str	r3, [r7, #20]
 800d368:	e018      	b.n	800d39c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d374:	2b00      	cmp	r3, #0
 800d376:	d102      	bne.n	800d37e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	2200      	movs	r2, #0
 800d37c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	785b      	ldrb	r3, [r3, #1]
 800d388:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d38a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d38c:	68ba      	ldr	r2, [r7, #8]
 800d38e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d390:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	78db      	ldrb	r3, [r3, #3]
 800d396:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d398:	4313      	orrs	r3, r2
 800d39a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	6979      	ldr	r1, [r7, #20]
 800d3a2:	4b18      	ldr	r3, [pc, #96]	; (800d404 <HAL_RTC_SetTime+0x138>)
 800d3a4:	400b      	ands	r3, r1
 800d3a6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	689a      	ldr	r2, [r3, #8]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d3b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	6899      	ldr	r1, [r3, #8]
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	68da      	ldr	r2, [r3, #12]
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	691b      	ldr	r3, [r3, #16]
 800d3c6:	431a      	orrs	r2, r3
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	430a      	orrs	r2, r1
 800d3ce:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f000 f9a3 	bl	800d71c <RTC_ExitInitMode>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	22ff      	movs	r2, #255	; 0xff
 800d3e0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d3e2:	7cfb      	ldrb	r3, [r7, #19]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d103      	bne.n	800d3f0 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d3f8:	7cfb      	ldrb	r3, [r7, #19]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	371c      	adds	r7, #28
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd90      	pop	{r4, r7, pc}
 800d402:	bf00      	nop
 800d404:	007f7f7f 	.word	0x007f7f7f

0800d408 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	691b      	ldr	r3, [r3, #16]
 800d424:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	4b22      	ldr	r3, [pc, #136]	; (800d4bc <HAL_RTC_GetTime+0xb4>)
 800d434:	4013      	ands	r3, r2
 800d436:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	0c1b      	lsrs	r3, r3, #16
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d442:	b2da      	uxtb	r2, r3
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	0a1b      	lsrs	r3, r3, #8
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d452:	b2da      	uxtb	r2, r3
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d460:	b2da      	uxtb	r2, r3
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	0d9b      	lsrs	r3, r3, #22
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	b2da      	uxtb	r2, r3
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d11a      	bne.n	800d4b2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	4618      	mov	r0, r3
 800d482:	f000 f9a9 	bl	800d7d8 <RTC_Bcd2ToByte>
 800d486:	4603      	mov	r3, r0
 800d488:	461a      	mov	r2, r3
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	785b      	ldrb	r3, [r3, #1]
 800d492:	4618      	mov	r0, r3
 800d494:	f000 f9a0 	bl	800d7d8 <RTC_Bcd2ToByte>
 800d498:	4603      	mov	r3, r0
 800d49a:	461a      	mov	r2, r3
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	789b      	ldrb	r3, [r3, #2]
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f000 f997 	bl	800d7d8 <RTC_Bcd2ToByte>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d4b2:	2300      	movs	r3, #0
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3718      	adds	r7, #24
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	007f7f7f 	.word	0x007f7f7f

0800d4c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d4c0:	b590      	push	{r4, r7, lr}
 800d4c2:	b087      	sub	sp, #28
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d101      	bne.n	800d4da <HAL_RTC_SetDate+0x1a>
 800d4d6:	2302      	movs	r3, #2
 800d4d8:	e073      	b.n	800d5c2 <HAL_RTC_SetDate+0x102>
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2201      	movs	r2, #1
 800d4de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2202      	movs	r2, #2
 800d4e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10e      	bne.n	800d50e <HAL_RTC_SetDate+0x4e>
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	785b      	ldrb	r3, [r3, #1]
 800d4f4:	f003 0310 	and.w	r3, r3, #16
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d008      	beq.n	800d50e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	785b      	ldrb	r3, [r3, #1]
 800d500:	f023 0310 	bic.w	r3, r3, #16
 800d504:	b2db      	uxtb	r3, r3
 800d506:	330a      	adds	r3, #10
 800d508:	b2da      	uxtb	r2, r3
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d11c      	bne.n	800d54e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	78db      	ldrb	r3, [r3, #3]
 800d518:	4618      	mov	r0, r3
 800d51a:	f000 f93d 	bl	800d798 <RTC_ByteToBcd2>
 800d51e:	4603      	mov	r3, r0
 800d520:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	785b      	ldrb	r3, [r3, #1]
 800d526:	4618      	mov	r0, r3
 800d528:	f000 f936 	bl	800d798 <RTC_ByteToBcd2>
 800d52c:	4603      	mov	r3, r0
 800d52e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d530:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	789b      	ldrb	r3, [r3, #2]
 800d536:	4618      	mov	r0, r3
 800d538:	f000 f92e 	bl	800d798 <RTC_ByteToBcd2>
 800d53c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d53e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d548:	4313      	orrs	r3, r2
 800d54a:	617b      	str	r3, [r7, #20]
 800d54c:	e00e      	b.n	800d56c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	78db      	ldrb	r3, [r3, #3]
 800d552:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	785b      	ldrb	r3, [r3, #1]
 800d558:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d55a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d55c:	68ba      	ldr	r2, [r7, #8]
 800d55e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d560:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d568:	4313      	orrs	r3, r2
 800d56a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	22ca      	movs	r2, #202	; 0xca
 800d572:	625a      	str	r2, [r3, #36]	; 0x24
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2253      	movs	r2, #83	; 0x53
 800d57a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f000 f899 	bl	800d6b4 <RTC_EnterInitMode>
 800d582:	4603      	mov	r3, r0
 800d584:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d586:	7cfb      	ldrb	r3, [r7, #19]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d10a      	bne.n	800d5a2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	6979      	ldr	r1, [r7, #20]
 800d592:	4b0e      	ldr	r3, [pc, #56]	; (800d5cc <HAL_RTC_SetDate+0x10c>)
 800d594:	400b      	ands	r3, r1
 800d596:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	f000 f8bf 	bl	800d71c <RTC_ExitInitMode>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	22ff      	movs	r2, #255	; 0xff
 800d5a8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d5aa:	7cfb      	ldrb	r3, [r7, #19]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d103      	bne.n	800d5b8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d5c0:	7cfb      	ldrb	r3, [r7, #19]


}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	371c      	adds	r7, #28
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd90      	pop	{r4, r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	00ffff3f 	.word	0x00ffff3f

0800d5d0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	685a      	ldr	r2, [r3, #4]
 800d5e2:	4b21      	ldr	r3, [pc, #132]	; (800d668 <HAL_RTC_GetDate+0x98>)
 800d5e4:	4013      	ands	r3, r2
 800d5e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	0c1b      	lsrs	r3, r3, #16
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	0a1b      	lsrs	r3, r3, #8
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	f003 031f 	and.w	r3, r3, #31
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	b2db      	uxtb	r3, r3
 800d606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d60a:	b2da      	uxtb	r2, r3
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	0b5b      	lsrs	r3, r3, #13
 800d614:	b2db      	uxtb	r3, r3
 800d616:	f003 0307 	and.w	r3, r3, #7
 800d61a:	b2da      	uxtb	r2, r3
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d11a      	bne.n	800d65c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	78db      	ldrb	r3, [r3, #3]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 f8d4 	bl	800d7d8 <RTC_Bcd2ToByte>
 800d630:	4603      	mov	r3, r0
 800d632:	461a      	mov	r2, r3
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	785b      	ldrb	r3, [r3, #1]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f000 f8cb 	bl	800d7d8 <RTC_Bcd2ToByte>
 800d642:	4603      	mov	r3, r0
 800d644:	461a      	mov	r2, r3
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	789b      	ldrb	r3, [r3, #2]
 800d64e:	4618      	mov	r0, r3
 800d650:	f000 f8c2 	bl	800d7d8 <RTC_Bcd2ToByte>
 800d654:	4603      	mov	r3, r0
 800d656:	461a      	mov	r2, r3
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3718      	adds	r7, #24
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	00ffff3f 	.word	0x00ffff3f

0800d66c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a0d      	ldr	r2, [pc, #52]	; (800d6b0 <HAL_RTC_WaitForSynchro+0x44>)
 800d67a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d67c:	f7f6 f916 	bl	80038ac <HAL_GetTick>
 800d680:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d682:	e009      	b.n	800d698 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d684:	f7f6 f912 	bl	80038ac <HAL_GetTick>
 800d688:	4602      	mov	r2, r0
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	1ad3      	subs	r3, r2, r3
 800d68e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d692:	d901      	bls.n	800d698 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d694:	2303      	movs	r3, #3
 800d696:	e007      	b.n	800d6a8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	f003 0320 	and.w	r3, r3, #32
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d0ee      	beq.n	800d684 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d6a6:	2300      	movs	r3, #0
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3710      	adds	r7, #16
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	0003ff5f 	.word	0x0003ff5f

0800d6b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	68db      	ldr	r3, [r3, #12]
 800d6c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d120      	bne.n	800d710 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d6d8:	f7f6 f8e8 	bl	80038ac <HAL_GetTick>
 800d6dc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d6de:	e00d      	b.n	800d6fc <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d6e0:	f7f6 f8e4 	bl	80038ac <HAL_GetTick>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	1ad3      	subs	r3, r2, r3
 800d6ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d6ee:	d905      	bls.n	800d6fc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d6f0:	2303      	movs	r3, #3
 800d6f2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2203      	movs	r2, #3
 800d6f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d706:	2b00      	cmp	r3, #0
 800d708:	d102      	bne.n	800d710 <RTC_EnterInitMode+0x5c>
 800d70a:	7bfb      	ldrb	r3, [r7, #15]
 800d70c:	2b03      	cmp	r3, #3
 800d70e:	d1e7      	bne.n	800d6e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800d710:	7bfb      	ldrb	r3, [r7, #15]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
	...

0800d71c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d724:	2300      	movs	r3, #0
 800d726:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d728:	4b1a      	ldr	r3, [pc, #104]	; (800d794 <RTC_ExitInitMode+0x78>)
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	4a19      	ldr	r2, [pc, #100]	; (800d794 <RTC_ExitInitMode+0x78>)
 800d72e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d732:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d734:	4b17      	ldr	r3, [pc, #92]	; (800d794 <RTC_ExitInitMode+0x78>)
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	f003 0320 	and.w	r3, r3, #32
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d10c      	bne.n	800d75a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7ff ff93 	bl	800d66c <HAL_RTC_WaitForSynchro>
 800d746:	4603      	mov	r3, r0
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d01e      	beq.n	800d78a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2203      	movs	r2, #3
 800d750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d754:	2303      	movs	r3, #3
 800d756:	73fb      	strb	r3, [r7, #15]
 800d758:	e017      	b.n	800d78a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d75a:	4b0e      	ldr	r3, [pc, #56]	; (800d794 <RTC_ExitInitMode+0x78>)
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	4a0d      	ldr	r2, [pc, #52]	; (800d794 <RTC_ExitInitMode+0x78>)
 800d760:	f023 0320 	bic.w	r3, r3, #32
 800d764:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7ff ff80 	bl	800d66c <HAL_RTC_WaitForSynchro>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d005      	beq.n	800d77e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2203      	movs	r2, #3
 800d776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d77a:	2303      	movs	r3, #3
 800d77c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d77e:	4b05      	ldr	r3, [pc, #20]	; (800d794 <RTC_ExitInitMode+0x78>)
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	4a04      	ldr	r2, [pc, #16]	; (800d794 <RTC_ExitInitMode+0x78>)
 800d784:	f043 0320 	orr.w	r3, r3, #32
 800d788:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	58004000 	.word	0x58004000

0800d798 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d798:	b480      	push	{r7}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	4603      	mov	r3, r0
 800d7a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d7a6:	79fb      	ldrb	r3, [r7, #7]
 800d7a8:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d7aa:	e005      	b.n	800d7b8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d7b2:	7afb      	ldrb	r3, [r7, #11]
 800d7b4:	3b0a      	subs	r3, #10
 800d7b6:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d7b8:	7afb      	ldrb	r3, [r7, #11]
 800d7ba:	2b09      	cmp	r3, #9
 800d7bc:	d8f6      	bhi.n	800d7ac <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	011b      	lsls	r3, r3, #4
 800d7c4:	b2da      	uxtb	r2, r3
 800d7c6:	7afb      	ldrb	r3, [r7, #11]
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	b2db      	uxtb	r3, r3
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3714      	adds	r7, #20
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b085      	sub	sp, #20
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	4603      	mov	r3, r0
 800d7e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d7e2:	79fb      	ldrb	r3, [r7, #7]
 800d7e4:	091b      	lsrs	r3, r3, #4
 800d7e6:	b2db      	uxtb	r3, r3
 800d7e8:	461a      	mov	r2, r3
 800d7ea:	0092      	lsls	r2, r2, #2
 800d7ec:	4413      	add	r3, r2
 800d7ee:	005b      	lsls	r3, r3, #1
 800d7f0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d7f2:	79fb      	ldrb	r3, [r7, #7]
 800d7f4:	f003 030f 	and.w	r3, r3, #15
 800d7f8:	b2da      	uxtb	r2, r3
 800d7fa:	7bfb      	ldrb	r3, [r7, #15]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	b2db      	uxtb	r3, r3
}
 800d800:	4618      	mov	r0, r3
 800d802:	3714      	adds	r7, #20
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b084      	sub	sp, #16
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d101      	bne.n	800d81e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	e10f      	b.n	800da3e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2200      	movs	r2, #0
 800d822:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a87      	ldr	r2, [pc, #540]	; (800da48 <HAL_SPI_Init+0x23c>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d00f      	beq.n	800d84e <HAL_SPI_Init+0x42>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a86      	ldr	r2, [pc, #536]	; (800da4c <HAL_SPI_Init+0x240>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d00a      	beq.n	800d84e <HAL_SPI_Init+0x42>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a84      	ldr	r2, [pc, #528]	; (800da50 <HAL_SPI_Init+0x244>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d005      	beq.n	800d84e <HAL_SPI_Init+0x42>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	2b0f      	cmp	r3, #15
 800d848:	d901      	bls.n	800d84e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d84a:	2301      	movs	r3, #1
 800d84c:	e0f7      	b.n	800da3e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 fc12 	bl	800e078 <SPI_GetPacketSize>
 800d854:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a7b      	ldr	r2, [pc, #492]	; (800da48 <HAL_SPI_Init+0x23c>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d00c      	beq.n	800d87a <HAL_SPI_Init+0x6e>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4a79      	ldr	r2, [pc, #484]	; (800da4c <HAL_SPI_Init+0x240>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d007      	beq.n	800d87a <HAL_SPI_Init+0x6e>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4a78      	ldr	r2, [pc, #480]	; (800da50 <HAL_SPI_Init+0x244>)
 800d870:	4293      	cmp	r3, r2
 800d872:	d002      	beq.n	800d87a <HAL_SPI_Init+0x6e>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2b08      	cmp	r3, #8
 800d878:	d811      	bhi.n	800d89e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d87e:	4a72      	ldr	r2, [pc, #456]	; (800da48 <HAL_SPI_Init+0x23c>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d009      	beq.n	800d898 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a70      	ldr	r2, [pc, #448]	; (800da4c <HAL_SPI_Init+0x240>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d004      	beq.n	800d898 <HAL_SPI_Init+0x8c>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4a6f      	ldr	r2, [pc, #444]	; (800da50 <HAL_SPI_Init+0x244>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d104      	bne.n	800d8a2 <HAL_SPI_Init+0x96>
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2b10      	cmp	r3, #16
 800d89c:	d901      	bls.n	800d8a2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e0cd      	b.n	800da3e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d106      	bne.n	800d8bc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f7f5 fb28 	bl	8002f0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2202      	movs	r2, #2
 800d8c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f022 0201 	bic.w	r2, r2, #1
 800d8d2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	689b      	ldr	r3, [r3, #8]
 800d8da:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d8de:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	699b      	ldr	r3, [r3, #24]
 800d8e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d8e8:	d119      	bne.n	800d91e <HAL_SPI_Init+0x112>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	685b      	ldr	r3, [r3, #4]
 800d8ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d8f2:	d103      	bne.n	800d8fc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d008      	beq.n	800d90e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d900:	2b00      	cmp	r3, #0
 800d902:	d10c      	bne.n	800d91e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d908:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d90c:	d107      	bne.n	800d91e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d91c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00f      	beq.n	800d94a <HAL_SPI_Init+0x13e>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	2b06      	cmp	r3, #6
 800d930:	d90b      	bls.n	800d94a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	430a      	orrs	r2, r1
 800d946:	601a      	str	r2, [r3, #0]
 800d948:	e007      	b.n	800d95a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	681a      	ldr	r2, [r3, #0]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d958:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	69da      	ldr	r2, [r3, #28]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d962:	431a      	orrs	r2, r3
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	431a      	orrs	r2, r3
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d96c:	ea42 0103 	orr.w	r1, r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	68da      	ldr	r2, [r3, #12]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	430a      	orrs	r2, r1
 800d97a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d984:	431a      	orrs	r2, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98a:	431a      	orrs	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	699b      	ldr	r3, [r3, #24]
 800d990:	431a      	orrs	r2, r3
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	691b      	ldr	r3, [r3, #16]
 800d996:	431a      	orrs	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	695b      	ldr	r3, [r3, #20]
 800d99c:	431a      	orrs	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6a1b      	ldr	r3, [r3, #32]
 800d9a2:	431a      	orrs	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	431a      	orrs	r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9ae:	431a      	orrs	r2, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	431a      	orrs	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9ba:	ea42 0103 	orr.w	r1, r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	430a      	orrs	r2, r1
 800d9c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	685b      	ldr	r3, [r3, #4]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d113      	bne.n	800d9fa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d9f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f022 0201 	bic.w	r2, r2, #1
 800da08:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00a      	beq.n	800da2c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	68db      	ldr	r3, [r3, #12]
 800da1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	430a      	orrs	r2, r1
 800da2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800da3c:	2300      	movs	r3, #0
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	40013000 	.word	0x40013000
 800da4c:	40003800 	.word	0x40003800
 800da50:	40003c00 	.word	0x40003c00

0800da54 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b088      	sub	sp, #32
 800da58:	af00      	add	r7, sp, #0
 800da5a:	60f8      	str	r0, [r7, #12]
 800da5c:	60b9      	str	r1, [r7, #8]
 800da5e:	603b      	str	r3, [r7, #0]
 800da60:	4613      	mov	r3, r2
 800da62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da68:	095b      	lsrs	r3, r3, #5
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	3301      	adds	r3, #1
 800da6e:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	3330      	adds	r3, #48	; 0x30
 800da76:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800da78:	f7f5 ff18 	bl	80038ac <HAL_GetTick>
 800da7c:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da84:	b2db      	uxtb	r3, r3
 800da86:	2b01      	cmp	r3, #1
 800da88:	d001      	beq.n	800da8e <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800da8a:	2302      	movs	r3, #2
 800da8c:	e250      	b.n	800df30 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d002      	beq.n	800da9a <HAL_SPI_Receive+0x46>
 800da94:	88fb      	ldrh	r3, [r7, #6]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d101      	bne.n	800da9e <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800da9a:	2301      	movs	r3, #1
 800da9c:	e248      	b.n	800df30 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d101      	bne.n	800daac <HAL_SPI_Receive+0x58>
 800daa8:	2302      	movs	r3, #2
 800daaa:	e241      	b.n	800df30 <HAL_SPI_Receive+0x4dc>
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2201      	movs	r2, #1
 800dab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2204      	movs	r2, #4
 800dab8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	68ba      	ldr	r2, [r7, #8]
 800dac8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	88fa      	ldrh	r2, [r7, #6]
 800dace:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	88fa      	ldrh	r2, [r7, #6]
 800dad6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2200      	movs	r2, #0
 800dae4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2200      	movs	r2, #0
 800daec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2200      	movs	r2, #0
 800daf4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2200      	movs	r2, #0
 800dafa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800db04:	d108      	bne.n	800db18 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db14:	601a      	str	r2, [r3, #0]
 800db16:	e009      	b.n	800db2c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800db2a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	685a      	ldr	r2, [r3, #4]
 800db32:	4b95      	ldr	r3, [pc, #596]	; (800dd88 <HAL_SPI_Receive+0x334>)
 800db34:	4013      	ands	r3, r2
 800db36:	88f9      	ldrh	r1, [r7, #6]
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	6812      	ldr	r2, [r2, #0]
 800db3c:	430b      	orrs	r3, r1
 800db3e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f042 0201 	orr.w	r2, r2, #1
 800db4e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800db58:	d107      	bne.n	800db6a <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db68:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	2b0f      	cmp	r3, #15
 800db70:	d96c      	bls.n	800dc4c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800db72:	e064      	b.n	800dc3e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	695b      	ldr	r3, [r3, #20]
 800db7a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	695b      	ldr	r3, [r3, #20]
 800db82:	f003 0301 	and.w	r3, r3, #1
 800db86:	2b01      	cmp	r3, #1
 800db88:	d114      	bne.n	800dbb4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800db94:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db9a:	1d1a      	adds	r2, r3, #4
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	3b01      	subs	r3, #1
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dbb2:	e044      	b.n	800dc3e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	8bfa      	ldrh	r2, [r7, #30]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d919      	bls.n	800dbf6 <HAL_SPI_Receive+0x1a2>
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d014      	beq.n	800dbf6 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dbd6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbdc:	1d1a      	adds	r2, r3, #4
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	3b01      	subs	r3, #1
 800dbec:	b29a      	uxth	r2, r3
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dbf4:	e023      	b.n	800dc3e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dbf6:	f7f5 fe59 	bl	80038ac <HAL_GetTick>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	1ad3      	subs	r3, r2, r3
 800dc00:	683a      	ldr	r2, [r7, #0]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d803      	bhi.n	800dc0e <HAL_SPI_Receive+0x1ba>
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc0c:	d102      	bne.n	800dc14 <HAL_SPI_Receive+0x1c0>
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d114      	bne.n	800dc3e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f000 f98f 	bl	800df38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2200      	movs	r2, #0
 800dc36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dc3a:	2303      	movs	r3, #3
 800dc3c:	e178      	b.n	800df30 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d194      	bne.n	800db74 <HAL_SPI_Receive+0x120>
 800dc4a:	e15e      	b.n	800df0a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	68db      	ldr	r3, [r3, #12]
 800dc50:	2b07      	cmp	r3, #7
 800dc52:	f240 8153 	bls.w	800defc <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dc56:	e08f      	b.n	800dd78 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	695b      	ldr	r3, [r3, #20]
 800dc5e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	695b      	ldr	r3, [r3, #20]
 800dc66:	f003 0301 	and.w	r3, r3, #1
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d114      	bne.n	800dc98 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc72:	69ba      	ldr	r2, [r7, #24]
 800dc74:	8812      	ldrh	r2, [r2, #0]
 800dc76:	b292      	uxth	r2, r2
 800dc78:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc7e:	1c9a      	adds	r2, r3, #2
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc8a:	b29b      	uxth	r3, r3
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dc96:	e06f      	b.n	800dd78 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	8bfa      	ldrh	r2, [r7, #30]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d924      	bls.n	800dcf0 <HAL_SPI_Receive+0x29c>
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d01f      	beq.n	800dcf0 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcb4:	69ba      	ldr	r2, [r7, #24]
 800dcb6:	8812      	ldrh	r2, [r2, #0]
 800dcb8:	b292      	uxth	r2, r2
 800dcba:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcc0:	1c9a      	adds	r2, r3, #2
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcca:	69ba      	ldr	r2, [r7, #24]
 800dccc:	8812      	ldrh	r2, [r2, #0]
 800dcce:	b292      	uxth	r2, r2
 800dcd0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcd6:	1c9a      	adds	r2, r3, #2
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	3b02      	subs	r3, #2
 800dce6:	b29a      	uxth	r2, r3
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dcee:	e043      	b.n	800dd78 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d119      	bne.n	800dd30 <HAL_SPI_Receive+0x2dc>
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d014      	beq.n	800dd30 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd0a:	69ba      	ldr	r2, [r7, #24]
 800dd0c:	8812      	ldrh	r2, [r2, #0]
 800dd0e:	b292      	uxth	r2, r2
 800dd10:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd16:	1c9a      	adds	r2, r3, #2
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	3b01      	subs	r3, #1
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dd2e:	e023      	b.n	800dd78 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd30:	f7f5 fdbc 	bl	80038ac <HAL_GetTick>
 800dd34:	4602      	mov	r2, r0
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	683a      	ldr	r2, [r7, #0]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d803      	bhi.n	800dd48 <HAL_SPI_Receive+0x2f4>
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd46:	d102      	bne.n	800dd4e <HAL_SPI_Receive+0x2fa>
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d114      	bne.n	800dd78 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dd4e:	68f8      	ldr	r0, [r7, #12]
 800dd50:	f000 f8f2 	bl	800df38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2201      	movs	r2, #1
 800dd68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800dd74:	2303      	movs	r3, #3
 800dd76:	e0db      	b.n	800df30 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd7e:	b29b      	uxth	r3, r3
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f47f af69 	bne.w	800dc58 <HAL_SPI_Receive+0x204>
 800dd86:	e0c0      	b.n	800df0a <HAL_SPI_Receive+0x4b6>
 800dd88:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	695b      	ldr	r3, [r3, #20]
 800dd92:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	695b      	ldr	r3, [r3, #20]
 800dd9a:	f003 0301 	and.w	r3, r3, #1
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d117      	bne.n	800ddd2 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddae:	7812      	ldrb	r2, [r2, #0]
 800ddb0:	b2d2      	uxtb	r2, r2
 800ddb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddb8:	1c5a      	adds	r2, r3, #1
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	3b01      	subs	r3, #1
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ddd0:	e094      	b.n	800defc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	8bfa      	ldrh	r2, [r7, #30]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d946      	bls.n	800de6e <HAL_SPI_Receive+0x41a>
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d041      	beq.n	800de6e <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddf6:	7812      	ldrb	r2, [r2, #0]
 800ddf8:	b2d2      	uxtb	r2, r2
 800ddfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de00:	1c5a      	adds	r2, r3, #1
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de12:	7812      	ldrb	r2, [r2, #0]
 800de14:	b2d2      	uxtb	r2, r2
 800de16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de1c:	1c5a      	adds	r2, r3, #1
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de2e:	7812      	ldrb	r2, [r2, #0]
 800de30:	b2d2      	uxtb	r2, r2
 800de32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de38:	1c5a      	adds	r2, r3, #1
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de4a:	7812      	ldrb	r2, [r2, #0]
 800de4c:	b2d2      	uxtb	r2, r2
 800de4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de54:	1c5a      	adds	r2, r3, #1
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de60:	b29b      	uxth	r3, r3
 800de62:	3b04      	subs	r3, #4
 800de64:	b29a      	uxth	r2, r3
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de6c:	e046      	b.n	800defc <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de74:	b29b      	uxth	r3, r3
 800de76:	2b03      	cmp	r3, #3
 800de78:	d81c      	bhi.n	800deb4 <HAL_SPI_Receive+0x460>
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800de80:	2b00      	cmp	r3, #0
 800de82:	d017      	beq.n	800deb4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de90:	7812      	ldrb	r2, [r2, #0]
 800de92:	b2d2      	uxtb	r2, r2
 800de94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de9a:	1c5a      	adds	r2, r3, #1
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	3b01      	subs	r3, #1
 800deaa:	b29a      	uxth	r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800deb2:	e023      	b.n	800defc <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800deb4:	f7f5 fcfa 	bl	80038ac <HAL_GetTick>
 800deb8:	4602      	mov	r2, r0
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	1ad3      	subs	r3, r2, r3
 800debe:	683a      	ldr	r2, [r7, #0]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d803      	bhi.n	800decc <HAL_SPI_Receive+0x478>
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800deca:	d102      	bne.n	800ded2 <HAL_SPI_Receive+0x47e>
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d114      	bne.n	800defc <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	f000 f830 	bl	800df38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dede:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2201      	movs	r2, #1
 800deec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2200      	movs	r2, #0
 800def4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800def8:	2303      	movs	r3, #3
 800defa:	e019      	b.n	800df30 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df02:	b29b      	uxth	r3, r3
 800df04:	2b00      	cmp	r3, #0
 800df06:	f47f af41 	bne.w	800dd8c <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f000 f814 	bl	800df38 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2201      	movs	r2, #1
 800df14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2200      	movs	r2, #0
 800df1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df26:	2b00      	cmp	r3, #0
 800df28:	d001      	beq.n	800df2e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800df2a:	2301      	movs	r3, #1
 800df2c:	e000      	b.n	800df30 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800df2e:	2300      	movs	r3, #0
  }
}
 800df30:	4618      	mov	r0, r3
 800df32:	3720      	adds	r7, #32
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	695b      	ldr	r3, [r3, #20]
 800df46:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	699a      	ldr	r2, [r3, #24]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f042 0208 	orr.w	r2, r2, #8
 800df56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	699a      	ldr	r2, [r3, #24]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f042 0210 	orr.w	r2, r2, #16
 800df66:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	f022 0201 	bic.w	r2, r2, #1
 800df76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	6919      	ldr	r1, [r3, #16]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	4b3c      	ldr	r3, [pc, #240]	; (800e074 <SPI_CloseTransfer+0x13c>)
 800df84:	400b      	ands	r3, r1
 800df86:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	689a      	ldr	r2, [r3, #8]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800df96:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	2b04      	cmp	r3, #4
 800dfa2:	d014      	beq.n	800dfce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f003 0320 	and.w	r3, r3, #32
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00f      	beq.n	800dfce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	699a      	ldr	r2, [r3, #24]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f042 0220 	orr.w	r2, r2, #32
 800dfcc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b03      	cmp	r3, #3
 800dfd8:	d014      	beq.n	800e004 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00f      	beq.n	800e004 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfea:	f043 0204 	orr.w	r2, r3, #4
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	699a      	ldr	r2, [r3, #24]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e002:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00f      	beq.n	800e02e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e014:	f043 0201 	orr.w	r2, r3, #1
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	699a      	ldr	r2, [r3, #24]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e02c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00f      	beq.n	800e058 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e03e:	f043 0208 	orr.w	r2, r3, #8
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	699a      	ldr	r2, [r3, #24]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e056:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e068:	bf00      	nop
 800e06a:	3714      	adds	r7, #20
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr
 800e074:	fffffc90 	.word	0xfffffc90

0800e078 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e078:	b480      	push	{r7}
 800e07a:	b085      	sub	sp, #20
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e084:	095b      	lsrs	r3, r3, #5
 800e086:	3301      	adds	r3, #1
 800e088:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	3301      	adds	r3, #1
 800e090:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	3307      	adds	r3, #7
 800e096:	08db      	lsrs	r3, r3, #3
 800e098:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	68fa      	ldr	r2, [r7, #12]
 800e09e:	fb02 f303 	mul.w	r3, r2, r3
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3714      	adds	r7, #20
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr

0800e0ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b082      	sub	sp, #8
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d101      	bne.n	800e0c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	e049      	b.n	800e154 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d106      	bne.n	800e0da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f7f4 ffcf 	bl	8003078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2202      	movs	r2, #2
 800e0de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	3304      	adds	r3, #4
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	4610      	mov	r0, r2
 800e0ee:	f000 ff41 	bl	800ef74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2201      	movs	r2, #1
 800e106:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2201      	movs	r2, #1
 800e116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2201      	movs	r2, #1
 800e11e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2201      	movs	r2, #1
 800e126:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2201      	movs	r2, #1
 800e12e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2201      	movs	r2, #1
 800e136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2201      	movs	r2, #1
 800e13e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2201      	movs	r2, #1
 800e146:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2201      	movs	r2, #1
 800e14e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e152:	2300      	movs	r3, #0
}
 800e154:	4618      	mov	r0, r3
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e15c:	b480      	push	{r7}
 800e15e:	b085      	sub	sp, #20
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e16a:	b2db      	uxtb	r3, r3
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d001      	beq.n	800e174 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e170:	2301      	movs	r3, #1
 800e172:	e04c      	b.n	800e20e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2202      	movs	r2, #2
 800e178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a26      	ldr	r2, [pc, #152]	; (800e21c <HAL_TIM_Base_Start+0xc0>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d022      	beq.n	800e1cc <HAL_TIM_Base_Start+0x70>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e18e:	d01d      	beq.n	800e1cc <HAL_TIM_Base_Start+0x70>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4a22      	ldr	r2, [pc, #136]	; (800e220 <HAL_TIM_Base_Start+0xc4>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d018      	beq.n	800e1cc <HAL_TIM_Base_Start+0x70>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4a21      	ldr	r2, [pc, #132]	; (800e224 <HAL_TIM_Base_Start+0xc8>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d013      	beq.n	800e1cc <HAL_TIM_Base_Start+0x70>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a1f      	ldr	r2, [pc, #124]	; (800e228 <HAL_TIM_Base_Start+0xcc>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d00e      	beq.n	800e1cc <HAL_TIM_Base_Start+0x70>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	4a1e      	ldr	r2, [pc, #120]	; (800e22c <HAL_TIM_Base_Start+0xd0>)
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	d009      	beq.n	800e1cc <HAL_TIM_Base_Start+0x70>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	4a1c      	ldr	r2, [pc, #112]	; (800e230 <HAL_TIM_Base_Start+0xd4>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d004      	beq.n	800e1cc <HAL_TIM_Base_Start+0x70>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4a1b      	ldr	r2, [pc, #108]	; (800e234 <HAL_TIM_Base_Start+0xd8>)
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d115      	bne.n	800e1f8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	689a      	ldr	r2, [r3, #8]
 800e1d2:	4b19      	ldr	r3, [pc, #100]	; (800e238 <HAL_TIM_Base_Start+0xdc>)
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2b06      	cmp	r3, #6
 800e1dc:	d015      	beq.n	800e20a <HAL_TIM_Base_Start+0xae>
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1e4:	d011      	beq.n	800e20a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f042 0201 	orr.w	r2, r2, #1
 800e1f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1f6:	e008      	b.n	800e20a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	f042 0201 	orr.w	r2, r2, #1
 800e206:	601a      	str	r2, [r3, #0]
 800e208:	e000      	b.n	800e20c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e20a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e20c:	2300      	movs	r3, #0
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3714      	adds	r7, #20
 800e212:	46bd      	mov	sp, r7
 800e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop
 800e21c:	40010000 	.word	0x40010000
 800e220:	40000400 	.word	0x40000400
 800e224:	40000800 	.word	0x40000800
 800e228:	40000c00 	.word	0x40000c00
 800e22c:	40010400 	.word	0x40010400
 800e230:	40001800 	.word	0x40001800
 800e234:	40014000 	.word	0x40014000
 800e238:	00010007 	.word	0x00010007

0800e23c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	6a1a      	ldr	r2, [r3, #32]
 800e24a:	f241 1311 	movw	r3, #4369	; 0x1111
 800e24e:	4013      	ands	r3, r2
 800e250:	2b00      	cmp	r3, #0
 800e252:	d10f      	bne.n	800e274 <HAL_TIM_Base_Stop+0x38>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	6a1a      	ldr	r2, [r3, #32]
 800e25a:	f240 4344 	movw	r3, #1092	; 0x444
 800e25e:	4013      	ands	r3, r2
 800e260:	2b00      	cmp	r3, #0
 800e262:	d107      	bne.n	800e274 <HAL_TIM_Base_Stop+0x38>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f022 0201 	bic.w	r2, r2, #1
 800e272:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	370c      	adds	r7, #12
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr
	...

0800e28c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b085      	sub	sp, #20
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d001      	beq.n	800e2a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	e054      	b.n	800e34e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2202      	movs	r2, #2
 800e2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	68da      	ldr	r2, [r3, #12]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f042 0201 	orr.w	r2, r2, #1
 800e2ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a26      	ldr	r2, [pc, #152]	; (800e35c <HAL_TIM_Base_Start_IT+0xd0>)
 800e2c2:	4293      	cmp	r3, r2
 800e2c4:	d022      	beq.n	800e30c <HAL_TIM_Base_Start_IT+0x80>
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2ce:	d01d      	beq.n	800e30c <HAL_TIM_Base_Start_IT+0x80>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a22      	ldr	r2, [pc, #136]	; (800e360 <HAL_TIM_Base_Start_IT+0xd4>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d018      	beq.n	800e30c <HAL_TIM_Base_Start_IT+0x80>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4a21      	ldr	r2, [pc, #132]	; (800e364 <HAL_TIM_Base_Start_IT+0xd8>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d013      	beq.n	800e30c <HAL_TIM_Base_Start_IT+0x80>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4a1f      	ldr	r2, [pc, #124]	; (800e368 <HAL_TIM_Base_Start_IT+0xdc>)
 800e2ea:	4293      	cmp	r3, r2
 800e2ec:	d00e      	beq.n	800e30c <HAL_TIM_Base_Start_IT+0x80>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	4a1e      	ldr	r2, [pc, #120]	; (800e36c <HAL_TIM_Base_Start_IT+0xe0>)
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d009      	beq.n	800e30c <HAL_TIM_Base_Start_IT+0x80>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	4a1c      	ldr	r2, [pc, #112]	; (800e370 <HAL_TIM_Base_Start_IT+0xe4>)
 800e2fe:	4293      	cmp	r3, r2
 800e300:	d004      	beq.n	800e30c <HAL_TIM_Base_Start_IT+0x80>
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	4a1b      	ldr	r2, [pc, #108]	; (800e374 <HAL_TIM_Base_Start_IT+0xe8>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d115      	bne.n	800e338 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	689a      	ldr	r2, [r3, #8]
 800e312:	4b19      	ldr	r3, [pc, #100]	; (800e378 <HAL_TIM_Base_Start_IT+0xec>)
 800e314:	4013      	ands	r3, r2
 800e316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2b06      	cmp	r3, #6
 800e31c:	d015      	beq.n	800e34a <HAL_TIM_Base_Start_IT+0xbe>
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e324:	d011      	beq.n	800e34a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f042 0201 	orr.w	r2, r2, #1
 800e334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e336:	e008      	b.n	800e34a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f042 0201 	orr.w	r2, r2, #1
 800e346:	601a      	str	r2, [r3, #0]
 800e348:	e000      	b.n	800e34c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e34a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e34c:	2300      	movs	r3, #0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3714      	adds	r7, #20
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop
 800e35c:	40010000 	.word	0x40010000
 800e360:	40000400 	.word	0x40000400
 800e364:	40000800 	.word	0x40000800
 800e368:	40000c00 	.word	0x40000c00
 800e36c:	40010400 	.word	0x40010400
 800e370:	40001800 	.word	0x40001800
 800e374:	40014000 	.word	0x40014000
 800e378:	00010007 	.word	0x00010007

0800e37c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e386:	2300      	movs	r3, #0
 800e388:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d109      	bne.n	800e3a4 <HAL_TIM_OC_Start_IT+0x28>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e396:	b2db      	uxtb	r3, r3
 800e398:	2b01      	cmp	r3, #1
 800e39a:	bf14      	ite	ne
 800e39c:	2301      	movne	r3, #1
 800e39e:	2300      	moveq	r3, #0
 800e3a0:	b2db      	uxtb	r3, r3
 800e3a2:	e03c      	b.n	800e41e <HAL_TIM_OC_Start_IT+0xa2>
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	2b04      	cmp	r3, #4
 800e3a8:	d109      	bne.n	800e3be <HAL_TIM_OC_Start_IT+0x42>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	bf14      	ite	ne
 800e3b6:	2301      	movne	r3, #1
 800e3b8:	2300      	moveq	r3, #0
 800e3ba:	b2db      	uxtb	r3, r3
 800e3bc:	e02f      	b.n	800e41e <HAL_TIM_OC_Start_IT+0xa2>
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2b08      	cmp	r3, #8
 800e3c2:	d109      	bne.n	800e3d8 <HAL_TIM_OC_Start_IT+0x5c>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	bf14      	ite	ne
 800e3d0:	2301      	movne	r3, #1
 800e3d2:	2300      	moveq	r3, #0
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	e022      	b.n	800e41e <HAL_TIM_OC_Start_IT+0xa2>
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	2b0c      	cmp	r3, #12
 800e3dc:	d109      	bne.n	800e3f2 <HAL_TIM_OC_Start_IT+0x76>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	bf14      	ite	ne
 800e3ea:	2301      	movne	r3, #1
 800e3ec:	2300      	moveq	r3, #0
 800e3ee:	b2db      	uxtb	r3, r3
 800e3f0:	e015      	b.n	800e41e <HAL_TIM_OC_Start_IT+0xa2>
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	2b10      	cmp	r3, #16
 800e3f6:	d109      	bne.n	800e40c <HAL_TIM_OC_Start_IT+0x90>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	2b01      	cmp	r3, #1
 800e402:	bf14      	ite	ne
 800e404:	2301      	movne	r3, #1
 800e406:	2300      	moveq	r3, #0
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	e008      	b.n	800e41e <HAL_TIM_OC_Start_IT+0xa2>
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e412:	b2db      	uxtb	r3, r3
 800e414:	2b01      	cmp	r3, #1
 800e416:	bf14      	ite	ne
 800e418:	2301      	movne	r3, #1
 800e41a:	2300      	moveq	r3, #0
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e422:	2301      	movs	r3, #1
 800e424:	e0ec      	b.n	800e600 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d104      	bne.n	800e436 <HAL_TIM_OC_Start_IT+0xba>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2202      	movs	r2, #2
 800e430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e434:	e023      	b.n	800e47e <HAL_TIM_OC_Start_IT+0x102>
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	2b04      	cmp	r3, #4
 800e43a:	d104      	bne.n	800e446 <HAL_TIM_OC_Start_IT+0xca>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2202      	movs	r2, #2
 800e440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e444:	e01b      	b.n	800e47e <HAL_TIM_OC_Start_IT+0x102>
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	2b08      	cmp	r3, #8
 800e44a:	d104      	bne.n	800e456 <HAL_TIM_OC_Start_IT+0xda>
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2202      	movs	r2, #2
 800e450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e454:	e013      	b.n	800e47e <HAL_TIM_OC_Start_IT+0x102>
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	2b0c      	cmp	r3, #12
 800e45a:	d104      	bne.n	800e466 <HAL_TIM_OC_Start_IT+0xea>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2202      	movs	r2, #2
 800e460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e464:	e00b      	b.n	800e47e <HAL_TIM_OC_Start_IT+0x102>
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	2b10      	cmp	r3, #16
 800e46a:	d104      	bne.n	800e476 <HAL_TIM_OC_Start_IT+0xfa>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2202      	movs	r2, #2
 800e470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e474:	e003      	b.n	800e47e <HAL_TIM_OC_Start_IT+0x102>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2202      	movs	r2, #2
 800e47a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	2b0c      	cmp	r3, #12
 800e482:	d841      	bhi.n	800e508 <HAL_TIM_OC_Start_IT+0x18c>
 800e484:	a201      	add	r2, pc, #4	; (adr r2, 800e48c <HAL_TIM_OC_Start_IT+0x110>)
 800e486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e48a:	bf00      	nop
 800e48c:	0800e4c1 	.word	0x0800e4c1
 800e490:	0800e509 	.word	0x0800e509
 800e494:	0800e509 	.word	0x0800e509
 800e498:	0800e509 	.word	0x0800e509
 800e49c:	0800e4d3 	.word	0x0800e4d3
 800e4a0:	0800e509 	.word	0x0800e509
 800e4a4:	0800e509 	.word	0x0800e509
 800e4a8:	0800e509 	.word	0x0800e509
 800e4ac:	0800e4e5 	.word	0x0800e4e5
 800e4b0:	0800e509 	.word	0x0800e509
 800e4b4:	0800e509 	.word	0x0800e509
 800e4b8:	0800e509 	.word	0x0800e509
 800e4bc:	0800e4f7 	.word	0x0800e4f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	68da      	ldr	r2, [r3, #12]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f042 0202 	orr.w	r2, r2, #2
 800e4ce:	60da      	str	r2, [r3, #12]
      break;
 800e4d0:	e01d      	b.n	800e50e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	68da      	ldr	r2, [r3, #12]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f042 0204 	orr.w	r2, r2, #4
 800e4e0:	60da      	str	r2, [r3, #12]
      break;
 800e4e2:	e014      	b.n	800e50e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	68da      	ldr	r2, [r3, #12]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f042 0208 	orr.w	r2, r2, #8
 800e4f2:	60da      	str	r2, [r3, #12]
      break;
 800e4f4:	e00b      	b.n	800e50e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	68da      	ldr	r2, [r3, #12]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f042 0210 	orr.w	r2, r2, #16
 800e504:	60da      	str	r2, [r3, #12]
      break;
 800e506:	e002      	b.n	800e50e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e508:	2301      	movs	r3, #1
 800e50a:	73fb      	strb	r3, [r7, #15]
      break;
 800e50c:	bf00      	nop
  }

  if (status == HAL_OK)
 800e50e:	7bfb      	ldrb	r3, [r7, #15]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d174      	bne.n	800e5fe <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2201      	movs	r2, #1
 800e51a:	6839      	ldr	r1, [r7, #0]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f001 f943 	bl	800f7a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4a38      	ldr	r2, [pc, #224]	; (800e608 <HAL_TIM_OC_Start_IT+0x28c>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d013      	beq.n	800e554 <HAL_TIM_OC_Start_IT+0x1d8>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a36      	ldr	r2, [pc, #216]	; (800e60c <HAL_TIM_OC_Start_IT+0x290>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d00e      	beq.n	800e554 <HAL_TIM_OC_Start_IT+0x1d8>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	4a35      	ldr	r2, [pc, #212]	; (800e610 <HAL_TIM_OC_Start_IT+0x294>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d009      	beq.n	800e554 <HAL_TIM_OC_Start_IT+0x1d8>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4a33      	ldr	r2, [pc, #204]	; (800e614 <HAL_TIM_OC_Start_IT+0x298>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d004      	beq.n	800e554 <HAL_TIM_OC_Start_IT+0x1d8>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4a32      	ldr	r2, [pc, #200]	; (800e618 <HAL_TIM_OC_Start_IT+0x29c>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d101      	bne.n	800e558 <HAL_TIM_OC_Start_IT+0x1dc>
 800e554:	2301      	movs	r3, #1
 800e556:	e000      	b.n	800e55a <HAL_TIM_OC_Start_IT+0x1de>
 800e558:	2300      	movs	r3, #0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d007      	beq.n	800e56e <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e56c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4a25      	ldr	r2, [pc, #148]	; (800e608 <HAL_TIM_OC_Start_IT+0x28c>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d022      	beq.n	800e5be <HAL_TIM_OC_Start_IT+0x242>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e580:	d01d      	beq.n	800e5be <HAL_TIM_OC_Start_IT+0x242>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4a25      	ldr	r2, [pc, #148]	; (800e61c <HAL_TIM_OC_Start_IT+0x2a0>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d018      	beq.n	800e5be <HAL_TIM_OC_Start_IT+0x242>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a23      	ldr	r2, [pc, #140]	; (800e620 <HAL_TIM_OC_Start_IT+0x2a4>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d013      	beq.n	800e5be <HAL_TIM_OC_Start_IT+0x242>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	4a22      	ldr	r2, [pc, #136]	; (800e624 <HAL_TIM_OC_Start_IT+0x2a8>)
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d00e      	beq.n	800e5be <HAL_TIM_OC_Start_IT+0x242>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4a19      	ldr	r2, [pc, #100]	; (800e60c <HAL_TIM_OC_Start_IT+0x290>)
 800e5a6:	4293      	cmp	r3, r2
 800e5a8:	d009      	beq.n	800e5be <HAL_TIM_OC_Start_IT+0x242>
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	4a1e      	ldr	r2, [pc, #120]	; (800e628 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d004      	beq.n	800e5be <HAL_TIM_OC_Start_IT+0x242>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a15      	ldr	r2, [pc, #84]	; (800e610 <HAL_TIM_OC_Start_IT+0x294>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d115      	bne.n	800e5ea <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	689a      	ldr	r2, [r3, #8]
 800e5c4:	4b19      	ldr	r3, [pc, #100]	; (800e62c <HAL_TIM_OC_Start_IT+0x2b0>)
 800e5c6:	4013      	ands	r3, r2
 800e5c8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	2b06      	cmp	r3, #6
 800e5ce:	d015      	beq.n	800e5fc <HAL_TIM_OC_Start_IT+0x280>
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5d6:	d011      	beq.n	800e5fc <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f042 0201 	orr.w	r2, r2, #1
 800e5e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5e8:	e008      	b.n	800e5fc <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f042 0201 	orr.w	r2, r2, #1
 800e5f8:	601a      	str	r2, [r3, #0]
 800e5fa:	e000      	b.n	800e5fe <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5fc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e600:	4618      	mov	r0, r3
 800e602:	3710      	adds	r7, #16
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}
 800e608:	40010000 	.word	0x40010000
 800e60c:	40010400 	.word	0x40010400
 800e610:	40014000 	.word	0x40014000
 800e614:	40014400 	.word	0x40014400
 800e618:	40014800 	.word	0x40014800
 800e61c:	40000400 	.word	0x40000400
 800e620:	40000800 	.word	0x40000800
 800e624:	40000c00 	.word	0x40000c00
 800e628:	40001800 	.word	0x40001800
 800e62c:	00010007 	.word	0x00010007

0800e630 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d101      	bne.n	800e642 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e63e:	2301      	movs	r3, #1
 800e640:	e049      	b.n	800e6d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d106      	bne.n	800e65c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2200      	movs	r2, #0
 800e652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 f841 	bl	800e6de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2202      	movs	r2, #2
 800e660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	3304      	adds	r3, #4
 800e66c:	4619      	mov	r1, r3
 800e66e:	4610      	mov	r0, r2
 800e670:	f000 fc80 	bl	800ef74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2201      	movs	r2, #1
 800e678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2201      	movs	r2, #1
 800e680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2201      	movs	r2, #1
 800e688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2201      	movs	r2, #1
 800e690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2201      	movs	r2, #1
 800e698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2201      	movs	r2, #1
 800e6a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e6d4:	2300      	movs	r3, #0
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e6de:	b480      	push	{r7}
 800e6e0:	b083      	sub	sp, #12
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e6e6:	bf00      	nop
 800e6e8:	370c      	adds	r7, #12
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr
	...

0800e6f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d109      	bne.n	800e718 <HAL_TIM_PWM_Start+0x24>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	bf14      	ite	ne
 800e710:	2301      	movne	r3, #1
 800e712:	2300      	moveq	r3, #0
 800e714:	b2db      	uxtb	r3, r3
 800e716:	e03c      	b.n	800e792 <HAL_TIM_PWM_Start+0x9e>
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	2b04      	cmp	r3, #4
 800e71c:	d109      	bne.n	800e732 <HAL_TIM_PWM_Start+0x3e>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e724:	b2db      	uxtb	r3, r3
 800e726:	2b01      	cmp	r3, #1
 800e728:	bf14      	ite	ne
 800e72a:	2301      	movne	r3, #1
 800e72c:	2300      	moveq	r3, #0
 800e72e:	b2db      	uxtb	r3, r3
 800e730:	e02f      	b.n	800e792 <HAL_TIM_PWM_Start+0x9e>
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	2b08      	cmp	r3, #8
 800e736:	d109      	bne.n	800e74c <HAL_TIM_PWM_Start+0x58>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	2b01      	cmp	r3, #1
 800e742:	bf14      	ite	ne
 800e744:	2301      	movne	r3, #1
 800e746:	2300      	moveq	r3, #0
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	e022      	b.n	800e792 <HAL_TIM_PWM_Start+0x9e>
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	2b0c      	cmp	r3, #12
 800e750:	d109      	bne.n	800e766 <HAL_TIM_PWM_Start+0x72>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	bf14      	ite	ne
 800e75e:	2301      	movne	r3, #1
 800e760:	2300      	moveq	r3, #0
 800e762:	b2db      	uxtb	r3, r3
 800e764:	e015      	b.n	800e792 <HAL_TIM_PWM_Start+0x9e>
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	2b10      	cmp	r3, #16
 800e76a:	d109      	bne.n	800e780 <HAL_TIM_PWM_Start+0x8c>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e772:	b2db      	uxtb	r3, r3
 800e774:	2b01      	cmp	r3, #1
 800e776:	bf14      	ite	ne
 800e778:	2301      	movne	r3, #1
 800e77a:	2300      	moveq	r3, #0
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	e008      	b.n	800e792 <HAL_TIM_PWM_Start+0x9e>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e786:	b2db      	uxtb	r3, r3
 800e788:	2b01      	cmp	r3, #1
 800e78a:	bf14      	ite	ne
 800e78c:	2301      	movne	r3, #1
 800e78e:	2300      	moveq	r3, #0
 800e790:	b2db      	uxtb	r3, r3
 800e792:	2b00      	cmp	r3, #0
 800e794:	d001      	beq.n	800e79a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e796:	2301      	movs	r3, #1
 800e798:	e0a1      	b.n	800e8de <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d104      	bne.n	800e7aa <HAL_TIM_PWM_Start+0xb6>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2202      	movs	r2, #2
 800e7a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e7a8:	e023      	b.n	800e7f2 <HAL_TIM_PWM_Start+0xfe>
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	2b04      	cmp	r3, #4
 800e7ae:	d104      	bne.n	800e7ba <HAL_TIM_PWM_Start+0xc6>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2202      	movs	r2, #2
 800e7b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e7b8:	e01b      	b.n	800e7f2 <HAL_TIM_PWM_Start+0xfe>
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	2b08      	cmp	r3, #8
 800e7be:	d104      	bne.n	800e7ca <HAL_TIM_PWM_Start+0xd6>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e7c8:	e013      	b.n	800e7f2 <HAL_TIM_PWM_Start+0xfe>
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	2b0c      	cmp	r3, #12
 800e7ce:	d104      	bne.n	800e7da <HAL_TIM_PWM_Start+0xe6>
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2202      	movs	r2, #2
 800e7d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e7d8:	e00b      	b.n	800e7f2 <HAL_TIM_PWM_Start+0xfe>
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	2b10      	cmp	r3, #16
 800e7de:	d104      	bne.n	800e7ea <HAL_TIM_PWM_Start+0xf6>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2202      	movs	r2, #2
 800e7e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e7e8:	e003      	b.n	800e7f2 <HAL_TIM_PWM_Start+0xfe>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2202      	movs	r2, #2
 800e7ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	6839      	ldr	r1, [r7, #0]
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f000 ffd4 	bl	800f7a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	4a38      	ldr	r2, [pc, #224]	; (800e8e8 <HAL_TIM_PWM_Start+0x1f4>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d013      	beq.n	800e832 <HAL_TIM_PWM_Start+0x13e>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4a37      	ldr	r2, [pc, #220]	; (800e8ec <HAL_TIM_PWM_Start+0x1f8>)
 800e810:	4293      	cmp	r3, r2
 800e812:	d00e      	beq.n	800e832 <HAL_TIM_PWM_Start+0x13e>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	4a35      	ldr	r2, [pc, #212]	; (800e8f0 <HAL_TIM_PWM_Start+0x1fc>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d009      	beq.n	800e832 <HAL_TIM_PWM_Start+0x13e>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4a34      	ldr	r2, [pc, #208]	; (800e8f4 <HAL_TIM_PWM_Start+0x200>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d004      	beq.n	800e832 <HAL_TIM_PWM_Start+0x13e>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	4a32      	ldr	r2, [pc, #200]	; (800e8f8 <HAL_TIM_PWM_Start+0x204>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	d101      	bne.n	800e836 <HAL_TIM_PWM_Start+0x142>
 800e832:	2301      	movs	r3, #1
 800e834:	e000      	b.n	800e838 <HAL_TIM_PWM_Start+0x144>
 800e836:	2300      	movs	r3, #0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d007      	beq.n	800e84c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e84a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a25      	ldr	r2, [pc, #148]	; (800e8e8 <HAL_TIM_PWM_Start+0x1f4>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d022      	beq.n	800e89c <HAL_TIM_PWM_Start+0x1a8>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e85e:	d01d      	beq.n	800e89c <HAL_TIM_PWM_Start+0x1a8>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4a25      	ldr	r2, [pc, #148]	; (800e8fc <HAL_TIM_PWM_Start+0x208>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d018      	beq.n	800e89c <HAL_TIM_PWM_Start+0x1a8>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	4a24      	ldr	r2, [pc, #144]	; (800e900 <HAL_TIM_PWM_Start+0x20c>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d013      	beq.n	800e89c <HAL_TIM_PWM_Start+0x1a8>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4a22      	ldr	r2, [pc, #136]	; (800e904 <HAL_TIM_PWM_Start+0x210>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d00e      	beq.n	800e89c <HAL_TIM_PWM_Start+0x1a8>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4a1a      	ldr	r2, [pc, #104]	; (800e8ec <HAL_TIM_PWM_Start+0x1f8>)
 800e884:	4293      	cmp	r3, r2
 800e886:	d009      	beq.n	800e89c <HAL_TIM_PWM_Start+0x1a8>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4a1e      	ldr	r2, [pc, #120]	; (800e908 <HAL_TIM_PWM_Start+0x214>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d004      	beq.n	800e89c <HAL_TIM_PWM_Start+0x1a8>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4a16      	ldr	r2, [pc, #88]	; (800e8f0 <HAL_TIM_PWM_Start+0x1fc>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d115      	bne.n	800e8c8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	689a      	ldr	r2, [r3, #8]
 800e8a2:	4b1a      	ldr	r3, [pc, #104]	; (800e90c <HAL_TIM_PWM_Start+0x218>)
 800e8a4:	4013      	ands	r3, r2
 800e8a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2b06      	cmp	r3, #6
 800e8ac:	d015      	beq.n	800e8da <HAL_TIM_PWM_Start+0x1e6>
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8b4:	d011      	beq.n	800e8da <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f042 0201 	orr.w	r2, r2, #1
 800e8c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8c6:	e008      	b.n	800e8da <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f042 0201 	orr.w	r2, r2, #1
 800e8d6:	601a      	str	r2, [r3, #0]
 800e8d8:	e000      	b.n	800e8dc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e8dc:	2300      	movs	r3, #0
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3710      	adds	r7, #16
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	40010000 	.word	0x40010000
 800e8ec:	40010400 	.word	0x40010400
 800e8f0:	40014000 	.word	0x40014000
 800e8f4:	40014400 	.word	0x40014400
 800e8f8:	40014800 	.word	0x40014800
 800e8fc:	40000400 	.word	0x40000400
 800e900:	40000800 	.word	0x40000800
 800e904:	40000c00 	.word	0x40000c00
 800e908:	40001800 	.word	0x40001800
 800e90c:	00010007 	.word	0x00010007

0800e910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	691b      	ldr	r3, [r3, #16]
 800e926:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	f003 0302 	and.w	r3, r3, #2
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d020      	beq.n	800e974 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f003 0302 	and.w	r3, r3, #2
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d01b      	beq.n	800e974 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f06f 0202 	mvn.w	r2, #2
 800e944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2201      	movs	r2, #1
 800e94a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	699b      	ldr	r3, [r3, #24]
 800e952:	f003 0303 	and.w	r3, r3, #3
 800e956:	2b00      	cmp	r3, #0
 800e958:	d003      	beq.n	800e962 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e95a:	6878      	ldr	r0, [r7, #4]
 800e95c:	f000 faec 	bl	800ef38 <HAL_TIM_IC_CaptureCallback>
 800e960:	e005      	b.n	800e96e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7f1 fe8e 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 faef 	bl	800ef4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	f003 0304 	and.w	r3, r3, #4
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d020      	beq.n	800e9c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f003 0304 	and.w	r3, r3, #4
 800e984:	2b00      	cmp	r3, #0
 800e986:	d01b      	beq.n	800e9c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f06f 0204 	mvn.w	r2, #4
 800e990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2202      	movs	r2, #2
 800e996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	699b      	ldr	r3, [r3, #24]
 800e99e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d003      	beq.n	800e9ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9a6:	6878      	ldr	r0, [r7, #4]
 800e9a8:	f000 fac6 	bl	800ef38 <HAL_TIM_IC_CaptureCallback>
 800e9ac:	e005      	b.n	800e9ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f7f1 fe68 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f000 fac9 	bl	800ef4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	f003 0308 	and.w	r3, r3, #8
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d020      	beq.n	800ea0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f003 0308 	and.w	r3, r3, #8
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d01b      	beq.n	800ea0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	f06f 0208 	mvn.w	r2, #8
 800e9dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2204      	movs	r2, #4
 800e9e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	69db      	ldr	r3, [r3, #28]
 800e9ea:	f003 0303 	and.w	r3, r3, #3
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d003      	beq.n	800e9fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f000 faa0 	bl	800ef38 <HAL_TIM_IC_CaptureCallback>
 800e9f8:	e005      	b.n	800ea06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f7f1 fe42 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f000 faa3 	bl	800ef4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	f003 0310 	and.w	r3, r3, #16
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d020      	beq.n	800ea58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	f003 0310 	and.w	r3, r3, #16
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d01b      	beq.n	800ea58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f06f 0210 	mvn.w	r2, #16
 800ea28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2208      	movs	r2, #8
 800ea2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	69db      	ldr	r3, [r3, #28]
 800ea36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d003      	beq.n	800ea46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 fa7a 	bl	800ef38 <HAL_TIM_IC_CaptureCallback>
 800ea44:	e005      	b.n	800ea52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7f1 fe1c 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f000 fa7d 	bl	800ef4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2200      	movs	r2, #0
 800ea56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	f003 0301 	and.w	r3, r3, #1
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00c      	beq.n	800ea7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f003 0301 	and.w	r3, r3, #1
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d007      	beq.n	800ea7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f06f 0201 	mvn.w	r2, #1
 800ea74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f7f3 ffda 	bl	8002a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d104      	bne.n	800ea90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00c      	beq.n	800eaaa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d007      	beq.n	800eaaa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800eaa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f000 ffbb 	bl	800fa20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d00c      	beq.n	800eace <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d007      	beq.n	800eace <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800eac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f000 ffb3 	bl	800fa34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d00c      	beq.n	800eaf2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d007      	beq.n	800eaf2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eaea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 fa37 	bl	800ef60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	f003 0320 	and.w	r3, r3, #32
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d00c      	beq.n	800eb16 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f003 0320 	and.w	r3, r3, #32
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d007      	beq.n	800eb16 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f06f 0220 	mvn.w	r2, #32
 800eb0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 ff7b 	bl	800fa0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eb16:	bf00      	nop
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
	...

0800eb20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b086      	sub	sp, #24
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d101      	bne.n	800eb3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eb3a:	2302      	movs	r3, #2
 800eb3c:	e0ff      	b.n	800ed3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2201      	movs	r2, #1
 800eb42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	2b14      	cmp	r3, #20
 800eb4a:	f200 80f0 	bhi.w	800ed2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eb4e:	a201      	add	r2, pc, #4	; (adr r2, 800eb54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb54:	0800eba9 	.word	0x0800eba9
 800eb58:	0800ed2f 	.word	0x0800ed2f
 800eb5c:	0800ed2f 	.word	0x0800ed2f
 800eb60:	0800ed2f 	.word	0x0800ed2f
 800eb64:	0800ebe9 	.word	0x0800ebe9
 800eb68:	0800ed2f 	.word	0x0800ed2f
 800eb6c:	0800ed2f 	.word	0x0800ed2f
 800eb70:	0800ed2f 	.word	0x0800ed2f
 800eb74:	0800ec2b 	.word	0x0800ec2b
 800eb78:	0800ed2f 	.word	0x0800ed2f
 800eb7c:	0800ed2f 	.word	0x0800ed2f
 800eb80:	0800ed2f 	.word	0x0800ed2f
 800eb84:	0800ec6b 	.word	0x0800ec6b
 800eb88:	0800ed2f 	.word	0x0800ed2f
 800eb8c:	0800ed2f 	.word	0x0800ed2f
 800eb90:	0800ed2f 	.word	0x0800ed2f
 800eb94:	0800ecad 	.word	0x0800ecad
 800eb98:	0800ed2f 	.word	0x0800ed2f
 800eb9c:	0800ed2f 	.word	0x0800ed2f
 800eba0:	0800ed2f 	.word	0x0800ed2f
 800eba4:	0800eced 	.word	0x0800eced
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	68b9      	ldr	r1, [r7, #8]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 fa86 	bl	800f0c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	699a      	ldr	r2, [r3, #24]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f042 0208 	orr.w	r2, r2, #8
 800ebc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	699a      	ldr	r2, [r3, #24]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f022 0204 	bic.w	r2, r2, #4
 800ebd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	6999      	ldr	r1, [r3, #24]
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	691a      	ldr	r2, [r3, #16]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	430a      	orrs	r2, r1
 800ebe4:	619a      	str	r2, [r3, #24]
      break;
 800ebe6:	e0a5      	b.n	800ed34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	68b9      	ldr	r1, [r7, #8]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f000 faf6 	bl	800f1e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	699a      	ldr	r2, [r3, #24]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	699a      	ldr	r2, [r3, #24]
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6999      	ldr	r1, [r3, #24]
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	691b      	ldr	r3, [r3, #16]
 800ec1e:	021a      	lsls	r2, r3, #8
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	430a      	orrs	r2, r1
 800ec26:	619a      	str	r2, [r3, #24]
      break;
 800ec28:	e084      	b.n	800ed34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	68b9      	ldr	r1, [r7, #8]
 800ec30:	4618      	mov	r0, r3
 800ec32:	f000 fb5f 	bl	800f2f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	69da      	ldr	r2, [r3, #28]
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f042 0208 	orr.w	r2, r2, #8
 800ec44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	69da      	ldr	r2, [r3, #28]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f022 0204 	bic.w	r2, r2, #4
 800ec54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	69d9      	ldr	r1, [r3, #28]
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	691a      	ldr	r2, [r3, #16]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	430a      	orrs	r2, r1
 800ec66:	61da      	str	r2, [r3, #28]
      break;
 800ec68:	e064      	b.n	800ed34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	68b9      	ldr	r1, [r7, #8]
 800ec70:	4618      	mov	r0, r3
 800ec72:	f000 fbc7 	bl	800f404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	69da      	ldr	r2, [r3, #28]
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	69da      	ldr	r2, [r3, #28]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	69d9      	ldr	r1, [r3, #28]
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	691b      	ldr	r3, [r3, #16]
 800eca0:	021a      	lsls	r2, r3, #8
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	430a      	orrs	r2, r1
 800eca8:	61da      	str	r2, [r3, #28]
      break;
 800ecaa:	e043      	b.n	800ed34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	68b9      	ldr	r1, [r7, #8]
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f000 fc10 	bl	800f4d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f042 0208 	orr.w	r2, r2, #8
 800ecc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	f022 0204 	bic.w	r2, r2, #4
 800ecd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	691a      	ldr	r2, [r3, #16]
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	430a      	orrs	r2, r1
 800ece8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ecea:	e023      	b.n	800ed34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	68b9      	ldr	r1, [r7, #8]
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f000 fc54 	bl	800f5a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	691b      	ldr	r3, [r3, #16]
 800ed22:	021a      	lsls	r2, r3, #8
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	430a      	orrs	r2, r1
 800ed2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ed2c:	e002      	b.n	800ed34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	75fb      	strb	r3, [r7, #23]
      break;
 800ed32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2200      	movs	r2, #0
 800ed38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ed3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3718      	adds	r7, #24
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop

0800ed48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed52:	2300      	movs	r3, #0
 800ed54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d101      	bne.n	800ed64 <HAL_TIM_ConfigClockSource+0x1c>
 800ed60:	2302      	movs	r3, #2
 800ed62:	e0dc      	b.n	800ef1e <HAL_TIM_ConfigClockSource+0x1d6>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2201      	movs	r2, #1
 800ed68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2202      	movs	r2, #2
 800ed70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	4b6a      	ldr	r3, [pc, #424]	; (800ef28 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ed80:	4013      	ands	r3, r2
 800ed82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ed8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	68ba      	ldr	r2, [r7, #8]
 800ed92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a64      	ldr	r2, [pc, #400]	; (800ef2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	f000 80a9 	beq.w	800eef2 <HAL_TIM_ConfigClockSource+0x1aa>
 800eda0:	4a62      	ldr	r2, [pc, #392]	; (800ef2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	f200 80ae 	bhi.w	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
 800eda8:	4a61      	ldr	r2, [pc, #388]	; (800ef30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	f000 80a1 	beq.w	800eef2 <HAL_TIM_ConfigClockSource+0x1aa>
 800edb0:	4a5f      	ldr	r2, [pc, #380]	; (800ef30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	f200 80a6 	bhi.w	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
 800edb8:	4a5e      	ldr	r2, [pc, #376]	; (800ef34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	f000 8099 	beq.w	800eef2 <HAL_TIM_ConfigClockSource+0x1aa>
 800edc0:	4a5c      	ldr	r2, [pc, #368]	; (800ef34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800edc2:	4293      	cmp	r3, r2
 800edc4:	f200 809e 	bhi.w	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
 800edc8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800edcc:	f000 8091 	beq.w	800eef2 <HAL_TIM_ConfigClockSource+0x1aa>
 800edd0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800edd4:	f200 8096 	bhi.w	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
 800edd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eddc:	f000 8089 	beq.w	800eef2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ede0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ede4:	f200 808e 	bhi.w	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ede8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edec:	d03e      	beq.n	800ee6c <HAL_TIM_ConfigClockSource+0x124>
 800edee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800edf2:	f200 8087 	bhi.w	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
 800edf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edfa:	f000 8086 	beq.w	800ef0a <HAL_TIM_ConfigClockSource+0x1c2>
 800edfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee02:	d87f      	bhi.n	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee04:	2b70      	cmp	r3, #112	; 0x70
 800ee06:	d01a      	beq.n	800ee3e <HAL_TIM_ConfigClockSource+0xf6>
 800ee08:	2b70      	cmp	r3, #112	; 0x70
 800ee0a:	d87b      	bhi.n	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee0c:	2b60      	cmp	r3, #96	; 0x60
 800ee0e:	d050      	beq.n	800eeb2 <HAL_TIM_ConfigClockSource+0x16a>
 800ee10:	2b60      	cmp	r3, #96	; 0x60
 800ee12:	d877      	bhi.n	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee14:	2b50      	cmp	r3, #80	; 0x50
 800ee16:	d03c      	beq.n	800ee92 <HAL_TIM_ConfigClockSource+0x14a>
 800ee18:	2b50      	cmp	r3, #80	; 0x50
 800ee1a:	d873      	bhi.n	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee1c:	2b40      	cmp	r3, #64	; 0x40
 800ee1e:	d058      	beq.n	800eed2 <HAL_TIM_ConfigClockSource+0x18a>
 800ee20:	2b40      	cmp	r3, #64	; 0x40
 800ee22:	d86f      	bhi.n	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee24:	2b30      	cmp	r3, #48	; 0x30
 800ee26:	d064      	beq.n	800eef2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee28:	2b30      	cmp	r3, #48	; 0x30
 800ee2a:	d86b      	bhi.n	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee2c:	2b20      	cmp	r3, #32
 800ee2e:	d060      	beq.n	800eef2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee30:	2b20      	cmp	r3, #32
 800ee32:	d867      	bhi.n	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d05c      	beq.n	800eef2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee38:	2b10      	cmp	r3, #16
 800ee3a:	d05a      	beq.n	800eef2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee3c:	e062      	b.n	800ef04 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6818      	ldr	r0, [r3, #0]
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	6899      	ldr	r1, [r3, #8]
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	685a      	ldr	r2, [r3, #4]
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	f000 fc8b 	bl	800f768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ee60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	68ba      	ldr	r2, [r7, #8]
 800ee68:	609a      	str	r2, [r3, #8]
      break;
 800ee6a:	e04f      	b.n	800ef0c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6818      	ldr	r0, [r3, #0]
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	6899      	ldr	r1, [r3, #8]
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	685a      	ldr	r2, [r3, #4]
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	f000 fc74 	bl	800f768 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	689a      	ldr	r2, [r3, #8]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ee8e:	609a      	str	r2, [r3, #8]
      break;
 800ee90:	e03c      	b.n	800ef0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6818      	ldr	r0, [r3, #0]
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	6859      	ldr	r1, [r3, #4]
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	461a      	mov	r2, r3
 800eea0:	f000 fbe4 	bl	800f66c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2150      	movs	r1, #80	; 0x50
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f000 fc3e 	bl	800f72c <TIM_ITRx_SetConfig>
      break;
 800eeb0:	e02c      	b.n	800ef0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6818      	ldr	r0, [r3, #0]
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	6859      	ldr	r1, [r3, #4]
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	461a      	mov	r2, r3
 800eec0:	f000 fc03 	bl	800f6ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2160      	movs	r1, #96	; 0x60
 800eeca:	4618      	mov	r0, r3
 800eecc:	f000 fc2e 	bl	800f72c <TIM_ITRx_SetConfig>
      break;
 800eed0:	e01c      	b.n	800ef0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6818      	ldr	r0, [r3, #0]
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	6859      	ldr	r1, [r3, #4]
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	461a      	mov	r2, r3
 800eee0:	f000 fbc4 	bl	800f66c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2140      	movs	r1, #64	; 0x40
 800eeea:	4618      	mov	r0, r3
 800eeec:	f000 fc1e 	bl	800f72c <TIM_ITRx_SetConfig>
      break;
 800eef0:	e00c      	b.n	800ef0c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4619      	mov	r1, r3
 800eefc:	4610      	mov	r0, r2
 800eefe:	f000 fc15 	bl	800f72c <TIM_ITRx_SetConfig>
      break;
 800ef02:	e003      	b.n	800ef0c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ef04:	2301      	movs	r3, #1
 800ef06:	73fb      	strb	r3, [r7, #15]
      break;
 800ef08:	e000      	b.n	800ef0c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ef0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2200      	movs	r2, #0
 800ef18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ef1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	ffceff88 	.word	0xffceff88
 800ef2c:	00100040 	.word	0x00100040
 800ef30:	00100030 	.word	0x00100030
 800ef34:	00100020 	.word	0x00100020

0800ef38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b083      	sub	sp, #12
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ef40:	bf00      	nop
 800ef42:	370c      	adds	r7, #12
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr

0800ef4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ef54:	bf00      	nop
 800ef56:	370c      	adds	r7, #12
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr

0800ef60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ef68:	bf00      	nop
 800ef6a:	370c      	adds	r7, #12
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b085      	sub	sp, #20
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	4a46      	ldr	r2, [pc, #280]	; (800f0a0 <TIM_Base_SetConfig+0x12c>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d013      	beq.n	800efb4 <TIM_Base_SetConfig+0x40>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef92:	d00f      	beq.n	800efb4 <TIM_Base_SetConfig+0x40>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	4a43      	ldr	r2, [pc, #268]	; (800f0a4 <TIM_Base_SetConfig+0x130>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d00b      	beq.n	800efb4 <TIM_Base_SetConfig+0x40>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	4a42      	ldr	r2, [pc, #264]	; (800f0a8 <TIM_Base_SetConfig+0x134>)
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d007      	beq.n	800efb4 <TIM_Base_SetConfig+0x40>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	4a41      	ldr	r2, [pc, #260]	; (800f0ac <TIM_Base_SetConfig+0x138>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d003      	beq.n	800efb4 <TIM_Base_SetConfig+0x40>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	4a40      	ldr	r2, [pc, #256]	; (800f0b0 <TIM_Base_SetConfig+0x13c>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d108      	bne.n	800efc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	4313      	orrs	r3, r2
 800efc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4a35      	ldr	r2, [pc, #212]	; (800f0a0 <TIM_Base_SetConfig+0x12c>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d01f      	beq.n	800f00e <TIM_Base_SetConfig+0x9a>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efd4:	d01b      	beq.n	800f00e <TIM_Base_SetConfig+0x9a>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	4a32      	ldr	r2, [pc, #200]	; (800f0a4 <TIM_Base_SetConfig+0x130>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d017      	beq.n	800f00e <TIM_Base_SetConfig+0x9a>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	4a31      	ldr	r2, [pc, #196]	; (800f0a8 <TIM_Base_SetConfig+0x134>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d013      	beq.n	800f00e <TIM_Base_SetConfig+0x9a>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	4a30      	ldr	r2, [pc, #192]	; (800f0ac <TIM_Base_SetConfig+0x138>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d00f      	beq.n	800f00e <TIM_Base_SetConfig+0x9a>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4a2f      	ldr	r2, [pc, #188]	; (800f0b0 <TIM_Base_SetConfig+0x13c>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d00b      	beq.n	800f00e <TIM_Base_SetConfig+0x9a>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	4a2e      	ldr	r2, [pc, #184]	; (800f0b4 <TIM_Base_SetConfig+0x140>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d007      	beq.n	800f00e <TIM_Base_SetConfig+0x9a>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	4a2d      	ldr	r2, [pc, #180]	; (800f0b8 <TIM_Base_SetConfig+0x144>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d003      	beq.n	800f00e <TIM_Base_SetConfig+0x9a>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	4a2c      	ldr	r2, [pc, #176]	; (800f0bc <TIM_Base_SetConfig+0x148>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d108      	bne.n	800f020 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f014:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	68fa      	ldr	r2, [r7, #12]
 800f01c:	4313      	orrs	r3, r2
 800f01e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	695b      	ldr	r3, [r3, #20]
 800f02a:	4313      	orrs	r3, r2
 800f02c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	689a      	ldr	r2, [r3, #8]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4a16      	ldr	r2, [pc, #88]	; (800f0a0 <TIM_Base_SetConfig+0x12c>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d00f      	beq.n	800f06c <TIM_Base_SetConfig+0xf8>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	4a18      	ldr	r2, [pc, #96]	; (800f0b0 <TIM_Base_SetConfig+0x13c>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d00b      	beq.n	800f06c <TIM_Base_SetConfig+0xf8>
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	4a17      	ldr	r2, [pc, #92]	; (800f0b4 <TIM_Base_SetConfig+0x140>)
 800f058:	4293      	cmp	r3, r2
 800f05a:	d007      	beq.n	800f06c <TIM_Base_SetConfig+0xf8>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	4a16      	ldr	r2, [pc, #88]	; (800f0b8 <TIM_Base_SetConfig+0x144>)
 800f060:	4293      	cmp	r3, r2
 800f062:	d003      	beq.n	800f06c <TIM_Base_SetConfig+0xf8>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	4a15      	ldr	r2, [pc, #84]	; (800f0bc <TIM_Base_SetConfig+0x148>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d103      	bne.n	800f074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	691a      	ldr	r2, [r3, #16]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2201      	movs	r2, #1
 800f078:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	691b      	ldr	r3, [r3, #16]
 800f07e:	f003 0301 	and.w	r3, r3, #1
 800f082:	2b01      	cmp	r3, #1
 800f084:	d105      	bne.n	800f092 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	691b      	ldr	r3, [r3, #16]
 800f08a:	f023 0201 	bic.w	r2, r3, #1
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	611a      	str	r2, [r3, #16]
  }
}
 800f092:	bf00      	nop
 800f094:	3714      	adds	r7, #20
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr
 800f09e:	bf00      	nop
 800f0a0:	40010000 	.word	0x40010000
 800f0a4:	40000400 	.word	0x40000400
 800f0a8:	40000800 	.word	0x40000800
 800f0ac:	40000c00 	.word	0x40000c00
 800f0b0:	40010400 	.word	0x40010400
 800f0b4:	40014000 	.word	0x40014000
 800f0b8:	40014400 	.word	0x40014400
 800f0bc:	40014800 	.word	0x40014800

0800f0c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b087      	sub	sp, #28
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6a1b      	ldr	r3, [r3, #32]
 800f0ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6a1b      	ldr	r3, [r3, #32]
 800f0d4:	f023 0201 	bic.w	r2, r3, #1
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	699b      	ldr	r3, [r3, #24]
 800f0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f0e8:	68fa      	ldr	r2, [r7, #12]
 800f0ea:	4b37      	ldr	r3, [pc, #220]	; (800f1c8 <TIM_OC1_SetConfig+0x108>)
 800f0ec:	4013      	ands	r3, r2
 800f0ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	f023 0303 	bic.w	r3, r3, #3
 800f0f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	4313      	orrs	r3, r2
 800f100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	f023 0302 	bic.w	r3, r3, #2
 800f108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	689b      	ldr	r3, [r3, #8]
 800f10e:	697a      	ldr	r2, [r7, #20]
 800f110:	4313      	orrs	r3, r2
 800f112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	4a2d      	ldr	r2, [pc, #180]	; (800f1cc <TIM_OC1_SetConfig+0x10c>)
 800f118:	4293      	cmp	r3, r2
 800f11a:	d00f      	beq.n	800f13c <TIM_OC1_SetConfig+0x7c>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	4a2c      	ldr	r2, [pc, #176]	; (800f1d0 <TIM_OC1_SetConfig+0x110>)
 800f120:	4293      	cmp	r3, r2
 800f122:	d00b      	beq.n	800f13c <TIM_OC1_SetConfig+0x7c>
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	4a2b      	ldr	r2, [pc, #172]	; (800f1d4 <TIM_OC1_SetConfig+0x114>)
 800f128:	4293      	cmp	r3, r2
 800f12a:	d007      	beq.n	800f13c <TIM_OC1_SetConfig+0x7c>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	4a2a      	ldr	r2, [pc, #168]	; (800f1d8 <TIM_OC1_SetConfig+0x118>)
 800f130:	4293      	cmp	r3, r2
 800f132:	d003      	beq.n	800f13c <TIM_OC1_SetConfig+0x7c>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4a29      	ldr	r2, [pc, #164]	; (800f1dc <TIM_OC1_SetConfig+0x11c>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d10c      	bne.n	800f156 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	f023 0308 	bic.w	r3, r3, #8
 800f142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	697a      	ldr	r2, [r7, #20]
 800f14a:	4313      	orrs	r3, r2
 800f14c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	f023 0304 	bic.w	r3, r3, #4
 800f154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	4a1c      	ldr	r2, [pc, #112]	; (800f1cc <TIM_OC1_SetConfig+0x10c>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d00f      	beq.n	800f17e <TIM_OC1_SetConfig+0xbe>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	4a1b      	ldr	r2, [pc, #108]	; (800f1d0 <TIM_OC1_SetConfig+0x110>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d00b      	beq.n	800f17e <TIM_OC1_SetConfig+0xbe>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4a1a      	ldr	r2, [pc, #104]	; (800f1d4 <TIM_OC1_SetConfig+0x114>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d007      	beq.n	800f17e <TIM_OC1_SetConfig+0xbe>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	4a19      	ldr	r2, [pc, #100]	; (800f1d8 <TIM_OC1_SetConfig+0x118>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d003      	beq.n	800f17e <TIM_OC1_SetConfig+0xbe>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	4a18      	ldr	r2, [pc, #96]	; (800f1dc <TIM_OC1_SetConfig+0x11c>)
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d111      	bne.n	800f1a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f18c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	695b      	ldr	r3, [r3, #20]
 800f192:	693a      	ldr	r2, [r7, #16]
 800f194:	4313      	orrs	r3, r2
 800f196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	699b      	ldr	r3, [r3, #24]
 800f19c:	693a      	ldr	r2, [r7, #16]
 800f19e:	4313      	orrs	r3, r2
 800f1a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	693a      	ldr	r2, [r7, #16]
 800f1a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	68fa      	ldr	r2, [r7, #12]
 800f1ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	685a      	ldr	r2, [r3, #4]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	697a      	ldr	r2, [r7, #20]
 800f1ba:	621a      	str	r2, [r3, #32]
}
 800f1bc:	bf00      	nop
 800f1be:	371c      	adds	r7, #28
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr
 800f1c8:	fffeff8f 	.word	0xfffeff8f
 800f1cc:	40010000 	.word	0x40010000
 800f1d0:	40010400 	.word	0x40010400
 800f1d4:	40014000 	.word	0x40014000
 800f1d8:	40014400 	.word	0x40014400
 800f1dc:	40014800 	.word	0x40014800

0800f1e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b087      	sub	sp, #28
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6a1b      	ldr	r3, [r3, #32]
 800f1ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6a1b      	ldr	r3, [r3, #32]
 800f1f4:	f023 0210 	bic.w	r2, r3, #16
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	685b      	ldr	r3, [r3, #4]
 800f200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	699b      	ldr	r3, [r3, #24]
 800f206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f208:	68fa      	ldr	r2, [r7, #12]
 800f20a:	4b34      	ldr	r3, [pc, #208]	; (800f2dc <TIM_OC2_SetConfig+0xfc>)
 800f20c:	4013      	ands	r3, r2
 800f20e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	021b      	lsls	r3, r3, #8
 800f21e:	68fa      	ldr	r2, [r7, #12]
 800f220:	4313      	orrs	r3, r2
 800f222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	f023 0320 	bic.w	r3, r3, #32
 800f22a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	011b      	lsls	r3, r3, #4
 800f232:	697a      	ldr	r2, [r7, #20]
 800f234:	4313      	orrs	r3, r2
 800f236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	4a29      	ldr	r2, [pc, #164]	; (800f2e0 <TIM_OC2_SetConfig+0x100>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d003      	beq.n	800f248 <TIM_OC2_SetConfig+0x68>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	4a28      	ldr	r2, [pc, #160]	; (800f2e4 <TIM_OC2_SetConfig+0x104>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d10d      	bne.n	800f264 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f24e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	68db      	ldr	r3, [r3, #12]
 800f254:	011b      	lsls	r3, r3, #4
 800f256:	697a      	ldr	r2, [r7, #20]
 800f258:	4313      	orrs	r3, r2
 800f25a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f262:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4a1e      	ldr	r2, [pc, #120]	; (800f2e0 <TIM_OC2_SetConfig+0x100>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d00f      	beq.n	800f28c <TIM_OC2_SetConfig+0xac>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4a1d      	ldr	r2, [pc, #116]	; (800f2e4 <TIM_OC2_SetConfig+0x104>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d00b      	beq.n	800f28c <TIM_OC2_SetConfig+0xac>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	4a1c      	ldr	r2, [pc, #112]	; (800f2e8 <TIM_OC2_SetConfig+0x108>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d007      	beq.n	800f28c <TIM_OC2_SetConfig+0xac>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4a1b      	ldr	r2, [pc, #108]	; (800f2ec <TIM_OC2_SetConfig+0x10c>)
 800f280:	4293      	cmp	r3, r2
 800f282:	d003      	beq.n	800f28c <TIM_OC2_SetConfig+0xac>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	4a1a      	ldr	r2, [pc, #104]	; (800f2f0 <TIM_OC2_SetConfig+0x110>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d113      	bne.n	800f2b4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f28c:	693b      	ldr	r3, [r7, #16]
 800f28e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f29a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	695b      	ldr	r3, [r3, #20]
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	693a      	ldr	r2, [r7, #16]
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	699b      	ldr	r3, [r3, #24]
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	693a      	ldr	r2, [r7, #16]
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	693a      	ldr	r2, [r7, #16]
 800f2b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	68fa      	ldr	r2, [r7, #12]
 800f2be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	685a      	ldr	r2, [r3, #4]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	697a      	ldr	r2, [r7, #20]
 800f2cc:	621a      	str	r2, [r3, #32]
}
 800f2ce:	bf00      	nop
 800f2d0:	371c      	adds	r7, #28
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d8:	4770      	bx	lr
 800f2da:	bf00      	nop
 800f2dc:	feff8fff 	.word	0xfeff8fff
 800f2e0:	40010000 	.word	0x40010000
 800f2e4:	40010400 	.word	0x40010400
 800f2e8:	40014000 	.word	0x40014000
 800f2ec:	40014400 	.word	0x40014400
 800f2f0:	40014800 	.word	0x40014800

0800f2f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b087      	sub	sp, #28
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6a1b      	ldr	r3, [r3, #32]
 800f302:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6a1b      	ldr	r3, [r3, #32]
 800f308:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	69db      	ldr	r3, [r3, #28]
 800f31a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	4b33      	ldr	r3, [pc, #204]	; (800f3ec <TIM_OC3_SetConfig+0xf8>)
 800f320:	4013      	ands	r3, r2
 800f322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f023 0303 	bic.w	r3, r3, #3
 800f32a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	4313      	orrs	r3, r2
 800f334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f33c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	689b      	ldr	r3, [r3, #8]
 800f342:	021b      	lsls	r3, r3, #8
 800f344:	697a      	ldr	r2, [r7, #20]
 800f346:	4313      	orrs	r3, r2
 800f348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	4a28      	ldr	r2, [pc, #160]	; (800f3f0 <TIM_OC3_SetConfig+0xfc>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d003      	beq.n	800f35a <TIM_OC3_SetConfig+0x66>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4a27      	ldr	r2, [pc, #156]	; (800f3f4 <TIM_OC3_SetConfig+0x100>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d10d      	bne.n	800f376 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f360:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	021b      	lsls	r3, r3, #8
 800f368:	697a      	ldr	r2, [r7, #20]
 800f36a:	4313      	orrs	r3, r2
 800f36c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f374:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	4a1d      	ldr	r2, [pc, #116]	; (800f3f0 <TIM_OC3_SetConfig+0xfc>)
 800f37a:	4293      	cmp	r3, r2
 800f37c:	d00f      	beq.n	800f39e <TIM_OC3_SetConfig+0xaa>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4a1c      	ldr	r2, [pc, #112]	; (800f3f4 <TIM_OC3_SetConfig+0x100>)
 800f382:	4293      	cmp	r3, r2
 800f384:	d00b      	beq.n	800f39e <TIM_OC3_SetConfig+0xaa>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4a1b      	ldr	r2, [pc, #108]	; (800f3f8 <TIM_OC3_SetConfig+0x104>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d007      	beq.n	800f39e <TIM_OC3_SetConfig+0xaa>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	4a1a      	ldr	r2, [pc, #104]	; (800f3fc <TIM_OC3_SetConfig+0x108>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d003      	beq.n	800f39e <TIM_OC3_SetConfig+0xaa>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a19      	ldr	r2, [pc, #100]	; (800f400 <TIM_OC3_SetConfig+0x10c>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d113      	bne.n	800f3c6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f3a6:	693b      	ldr	r3, [r7, #16]
 800f3a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f3ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	695b      	ldr	r3, [r3, #20]
 800f3b2:	011b      	lsls	r3, r3, #4
 800f3b4:	693a      	ldr	r2, [r7, #16]
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	699b      	ldr	r3, [r3, #24]
 800f3be:	011b      	lsls	r3, r3, #4
 800f3c0:	693a      	ldr	r2, [r7, #16]
 800f3c2:	4313      	orrs	r3, r2
 800f3c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	693a      	ldr	r2, [r7, #16]
 800f3ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	68fa      	ldr	r2, [r7, #12]
 800f3d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	685a      	ldr	r2, [r3, #4]
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	697a      	ldr	r2, [r7, #20]
 800f3de:	621a      	str	r2, [r3, #32]
}
 800f3e0:	bf00      	nop
 800f3e2:	371c      	adds	r7, #28
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr
 800f3ec:	fffeff8f 	.word	0xfffeff8f
 800f3f0:	40010000 	.word	0x40010000
 800f3f4:	40010400 	.word	0x40010400
 800f3f8:	40014000 	.word	0x40014000
 800f3fc:	40014400 	.word	0x40014400
 800f400:	40014800 	.word	0x40014800

0800f404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f404:	b480      	push	{r7}
 800f406:	b087      	sub	sp, #28
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6a1b      	ldr	r3, [r3, #32]
 800f412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6a1b      	ldr	r3, [r3, #32]
 800f418:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	69db      	ldr	r3, [r3, #28]
 800f42a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	4b24      	ldr	r3, [pc, #144]	; (800f4c0 <TIM_OC4_SetConfig+0xbc>)
 800f430:	4013      	ands	r3, r2
 800f432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f43a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	021b      	lsls	r3, r3, #8
 800f442:	68fa      	ldr	r2, [r7, #12]
 800f444:	4313      	orrs	r3, r2
 800f446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f448:	693b      	ldr	r3, [r7, #16]
 800f44a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f44e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	031b      	lsls	r3, r3, #12
 800f456:	693a      	ldr	r2, [r7, #16]
 800f458:	4313      	orrs	r3, r2
 800f45a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4a19      	ldr	r2, [pc, #100]	; (800f4c4 <TIM_OC4_SetConfig+0xc0>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d00f      	beq.n	800f484 <TIM_OC4_SetConfig+0x80>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	4a18      	ldr	r2, [pc, #96]	; (800f4c8 <TIM_OC4_SetConfig+0xc4>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d00b      	beq.n	800f484 <TIM_OC4_SetConfig+0x80>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	4a17      	ldr	r2, [pc, #92]	; (800f4cc <TIM_OC4_SetConfig+0xc8>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d007      	beq.n	800f484 <TIM_OC4_SetConfig+0x80>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	4a16      	ldr	r2, [pc, #88]	; (800f4d0 <TIM_OC4_SetConfig+0xcc>)
 800f478:	4293      	cmp	r3, r2
 800f47a:	d003      	beq.n	800f484 <TIM_OC4_SetConfig+0x80>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	4a15      	ldr	r2, [pc, #84]	; (800f4d4 <TIM_OC4_SetConfig+0xd0>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d109      	bne.n	800f498 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f48a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	695b      	ldr	r3, [r3, #20]
 800f490:	019b      	lsls	r3, r3, #6
 800f492:	697a      	ldr	r2, [r7, #20]
 800f494:	4313      	orrs	r3, r2
 800f496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	697a      	ldr	r2, [r7, #20]
 800f49c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	68fa      	ldr	r2, [r7, #12]
 800f4a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	685a      	ldr	r2, [r3, #4]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	693a      	ldr	r2, [r7, #16]
 800f4b0:	621a      	str	r2, [r3, #32]
}
 800f4b2:	bf00      	nop
 800f4b4:	371c      	adds	r7, #28
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4bc:	4770      	bx	lr
 800f4be:	bf00      	nop
 800f4c0:	feff8fff 	.word	0xfeff8fff
 800f4c4:	40010000 	.word	0x40010000
 800f4c8:	40010400 	.word	0x40010400
 800f4cc:	40014000 	.word	0x40014000
 800f4d0:	40014400 	.word	0x40014400
 800f4d4:	40014800 	.word	0x40014800

0800f4d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b087      	sub	sp, #28
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6a1b      	ldr	r3, [r3, #32]
 800f4e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6a1b      	ldr	r3, [r3, #32]
 800f4ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f500:	68fa      	ldr	r2, [r7, #12]
 800f502:	4b21      	ldr	r3, [pc, #132]	; (800f588 <TIM_OC5_SetConfig+0xb0>)
 800f504:	4013      	ands	r3, r2
 800f506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	68fa      	ldr	r2, [r7, #12]
 800f50e:	4313      	orrs	r3, r2
 800f510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f518:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	689b      	ldr	r3, [r3, #8]
 800f51e:	041b      	lsls	r3, r3, #16
 800f520:	693a      	ldr	r2, [r7, #16]
 800f522:	4313      	orrs	r3, r2
 800f524:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4a18      	ldr	r2, [pc, #96]	; (800f58c <TIM_OC5_SetConfig+0xb4>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d00f      	beq.n	800f54e <TIM_OC5_SetConfig+0x76>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4a17      	ldr	r2, [pc, #92]	; (800f590 <TIM_OC5_SetConfig+0xb8>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d00b      	beq.n	800f54e <TIM_OC5_SetConfig+0x76>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4a16      	ldr	r2, [pc, #88]	; (800f594 <TIM_OC5_SetConfig+0xbc>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d007      	beq.n	800f54e <TIM_OC5_SetConfig+0x76>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4a15      	ldr	r2, [pc, #84]	; (800f598 <TIM_OC5_SetConfig+0xc0>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d003      	beq.n	800f54e <TIM_OC5_SetConfig+0x76>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a14      	ldr	r2, [pc, #80]	; (800f59c <TIM_OC5_SetConfig+0xc4>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d109      	bne.n	800f562 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f554:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	695b      	ldr	r3, [r3, #20]
 800f55a:	021b      	lsls	r3, r3, #8
 800f55c:	697a      	ldr	r2, [r7, #20]
 800f55e:	4313      	orrs	r3, r2
 800f560:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	697a      	ldr	r2, [r7, #20]
 800f566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	685a      	ldr	r2, [r3, #4]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	693a      	ldr	r2, [r7, #16]
 800f57a:	621a      	str	r2, [r3, #32]
}
 800f57c:	bf00      	nop
 800f57e:	371c      	adds	r7, #28
 800f580:	46bd      	mov	sp, r7
 800f582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f586:	4770      	bx	lr
 800f588:	fffeff8f 	.word	0xfffeff8f
 800f58c:	40010000 	.word	0x40010000
 800f590:	40010400 	.word	0x40010400
 800f594:	40014000 	.word	0x40014000
 800f598:	40014400 	.word	0x40014400
 800f59c:	40014800 	.word	0x40014800

0800f5a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b087      	sub	sp, #28
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6a1b      	ldr	r3, [r3, #32]
 800f5ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6a1b      	ldr	r3, [r3, #32]
 800f5b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f5c8:	68fa      	ldr	r2, [r7, #12]
 800f5ca:	4b22      	ldr	r3, [pc, #136]	; (800f654 <TIM_OC6_SetConfig+0xb4>)
 800f5cc:	4013      	ands	r3, r2
 800f5ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	021b      	lsls	r3, r3, #8
 800f5d6:	68fa      	ldr	r2, [r7, #12]
 800f5d8:	4313      	orrs	r3, r2
 800f5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f5e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	689b      	ldr	r3, [r3, #8]
 800f5e8:	051b      	lsls	r3, r3, #20
 800f5ea:	693a      	ldr	r2, [r7, #16]
 800f5ec:	4313      	orrs	r3, r2
 800f5ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	4a19      	ldr	r2, [pc, #100]	; (800f658 <TIM_OC6_SetConfig+0xb8>)
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d00f      	beq.n	800f618 <TIM_OC6_SetConfig+0x78>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	4a18      	ldr	r2, [pc, #96]	; (800f65c <TIM_OC6_SetConfig+0xbc>)
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d00b      	beq.n	800f618 <TIM_OC6_SetConfig+0x78>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	4a17      	ldr	r2, [pc, #92]	; (800f660 <TIM_OC6_SetConfig+0xc0>)
 800f604:	4293      	cmp	r3, r2
 800f606:	d007      	beq.n	800f618 <TIM_OC6_SetConfig+0x78>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	4a16      	ldr	r2, [pc, #88]	; (800f664 <TIM_OC6_SetConfig+0xc4>)
 800f60c:	4293      	cmp	r3, r2
 800f60e:	d003      	beq.n	800f618 <TIM_OC6_SetConfig+0x78>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	4a15      	ldr	r2, [pc, #84]	; (800f668 <TIM_OC6_SetConfig+0xc8>)
 800f614:	4293      	cmp	r3, r2
 800f616:	d109      	bne.n	800f62c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f61e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	695b      	ldr	r3, [r3, #20]
 800f624:	029b      	lsls	r3, r3, #10
 800f626:	697a      	ldr	r2, [r7, #20]
 800f628:	4313      	orrs	r3, r2
 800f62a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	697a      	ldr	r2, [r7, #20]
 800f630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	685a      	ldr	r2, [r3, #4]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	693a      	ldr	r2, [r7, #16]
 800f644:	621a      	str	r2, [r3, #32]
}
 800f646:	bf00      	nop
 800f648:	371c      	adds	r7, #28
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
 800f652:	bf00      	nop
 800f654:	feff8fff 	.word	0xfeff8fff
 800f658:	40010000 	.word	0x40010000
 800f65c:	40010400 	.word	0x40010400
 800f660:	40014000 	.word	0x40014000
 800f664:	40014400 	.word	0x40014400
 800f668:	40014800 	.word	0x40014800

0800f66c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b087      	sub	sp, #28
 800f670:	af00      	add	r7, sp, #0
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	60b9      	str	r1, [r7, #8]
 800f676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	6a1b      	ldr	r3, [r3, #32]
 800f67c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	6a1b      	ldr	r3, [r3, #32]
 800f682:	f023 0201 	bic.w	r2, r3, #1
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	699b      	ldr	r3, [r3, #24]
 800f68e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	011b      	lsls	r3, r3, #4
 800f69c:	693a      	ldr	r2, [r7, #16]
 800f69e:	4313      	orrs	r3, r2
 800f6a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	f023 030a 	bic.w	r3, r3, #10
 800f6a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f6aa:	697a      	ldr	r2, [r7, #20]
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	693a      	ldr	r2, [r7, #16]
 800f6b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	697a      	ldr	r2, [r7, #20]
 800f6bc:	621a      	str	r2, [r3, #32]
}
 800f6be:	bf00      	nop
 800f6c0:	371c      	adds	r7, #28
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr

0800f6ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6ca:	b480      	push	{r7}
 800f6cc:	b087      	sub	sp, #28
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	60f8      	str	r0, [r7, #12]
 800f6d2:	60b9      	str	r1, [r7, #8]
 800f6d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	6a1b      	ldr	r3, [r3, #32]
 800f6da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	6a1b      	ldr	r3, [r3, #32]
 800f6e0:	f023 0210 	bic.w	r2, r3, #16
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	699b      	ldr	r3, [r3, #24]
 800f6ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f6f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	031b      	lsls	r3, r3, #12
 800f6fa:	693a      	ldr	r2, [r7, #16]
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f706:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	011b      	lsls	r3, r3, #4
 800f70c:	697a      	ldr	r2, [r7, #20]
 800f70e:	4313      	orrs	r3, r2
 800f710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	693a      	ldr	r2, [r7, #16]
 800f716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	621a      	str	r2, [r3, #32]
}
 800f71e:	bf00      	nop
 800f720:	371c      	adds	r7, #28
 800f722:	46bd      	mov	sp, r7
 800f724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f728:	4770      	bx	lr
	...

0800f72c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f72c:	b480      	push	{r7}
 800f72e:	b085      	sub	sp, #20
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	4b09      	ldr	r3, [pc, #36]	; (800f764 <TIM_ITRx_SetConfig+0x38>)
 800f740:	4013      	ands	r3, r2
 800f742:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f744:	683a      	ldr	r2, [r7, #0]
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	4313      	orrs	r3, r2
 800f74a:	f043 0307 	orr.w	r3, r3, #7
 800f74e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	68fa      	ldr	r2, [r7, #12]
 800f754:	609a      	str	r2, [r3, #8]
}
 800f756:	bf00      	nop
 800f758:	3714      	adds	r7, #20
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr
 800f762:	bf00      	nop
 800f764:	ffcfff8f 	.word	0xffcfff8f

0800f768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f768:	b480      	push	{r7}
 800f76a:	b087      	sub	sp, #28
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	607a      	str	r2, [r7, #4]
 800f774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	021a      	lsls	r2, r3, #8
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	431a      	orrs	r2, r3
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	4313      	orrs	r3, r2
 800f790:	697a      	ldr	r2, [r7, #20]
 800f792:	4313      	orrs	r3, r2
 800f794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	697a      	ldr	r2, [r7, #20]
 800f79a:	609a      	str	r2, [r3, #8]
}
 800f79c:	bf00      	nop
 800f79e:	371c      	adds	r7, #28
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr

0800f7a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b087      	sub	sp, #28
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	60b9      	str	r1, [r7, #8]
 800f7b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	f003 031f 	and.w	r3, r3, #31
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	fa02 f303 	lsl.w	r3, r2, r3
 800f7c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	6a1a      	ldr	r2, [r3, #32]
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	43db      	mvns	r3, r3
 800f7ca:	401a      	ands	r2, r3
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	6a1a      	ldr	r2, [r3, #32]
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	f003 031f 	and.w	r3, r3, #31
 800f7da:	6879      	ldr	r1, [r7, #4]
 800f7dc:	fa01 f303 	lsl.w	r3, r1, r3
 800f7e0:	431a      	orrs	r2, r3
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	621a      	str	r2, [r3, #32]
}
 800f7e6:	bf00      	nop
 800f7e8:	371c      	adds	r7, #28
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f0:	4770      	bx	lr
	...

0800f7f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b085      	sub	sp, #20
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f804:	2b01      	cmp	r3, #1
 800f806:	d101      	bne.n	800f80c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f808:	2302      	movs	r3, #2
 800f80a:	e06d      	b.n	800f8e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2201      	movs	r2, #1
 800f810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2202      	movs	r2, #2
 800f818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	4a30      	ldr	r2, [pc, #192]	; (800f8f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d004      	beq.n	800f840 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	4a2f      	ldr	r2, [pc, #188]	; (800f8f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d108      	bne.n	800f852 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f846:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	68fa      	ldr	r2, [r7, #12]
 800f84e:	4313      	orrs	r3, r2
 800f850:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f858:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	68fa      	ldr	r2, [r7, #12]
 800f860:	4313      	orrs	r3, r2
 800f862:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	68fa      	ldr	r2, [r7, #12]
 800f86a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a20      	ldr	r2, [pc, #128]	; (800f8f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d022      	beq.n	800f8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f87e:	d01d      	beq.n	800f8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	4a1d      	ldr	r2, [pc, #116]	; (800f8fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f886:	4293      	cmp	r3, r2
 800f888:	d018      	beq.n	800f8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	4a1c      	ldr	r2, [pc, #112]	; (800f900 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d013      	beq.n	800f8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4a1a      	ldr	r2, [pc, #104]	; (800f904 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d00e      	beq.n	800f8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	4a15      	ldr	r2, [pc, #84]	; (800f8f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d009      	beq.n	800f8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4a16      	ldr	r2, [pc, #88]	; (800f908 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d004      	beq.n	800f8bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4a15      	ldr	r2, [pc, #84]	; (800f90c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d10c      	bne.n	800f8d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	689b      	ldr	r3, [r3, #8]
 800f8c8:	68ba      	ldr	r2, [r7, #8]
 800f8ca:	4313      	orrs	r3, r2
 800f8cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	68ba      	ldr	r2, [r7, #8]
 800f8d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2201      	movs	r2, #1
 800f8da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f8e6:	2300      	movs	r3, #0
}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	3714      	adds	r7, #20
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr
 800f8f4:	40010000 	.word	0x40010000
 800f8f8:	40010400 	.word	0x40010400
 800f8fc:	40000400 	.word	0x40000400
 800f900:	40000800 	.word	0x40000800
 800f904:	40000c00 	.word	0x40000c00
 800f908:	40001800 	.word	0x40001800
 800f90c:	40014000 	.word	0x40014000

0800f910 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f910:	b480      	push	{r7}
 800f912:	b085      	sub	sp, #20
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f91a:	2300      	movs	r3, #0
 800f91c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f924:	2b01      	cmp	r3, #1
 800f926:	d101      	bne.n	800f92c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f928:	2302      	movs	r3, #2
 800f92a:	e065      	b.n	800f9f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2201      	movs	r2, #1
 800f930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	4313      	orrs	r3, r2
 800f940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	689b      	ldr	r3, [r3, #8]
 800f94c:	4313      	orrs	r3, r2
 800f94e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	4313      	orrs	r3, r2
 800f95c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	4313      	orrs	r3, r2
 800f96a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	691b      	ldr	r3, [r3, #16]
 800f976:	4313      	orrs	r3, r2
 800f978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	695b      	ldr	r3, [r3, #20]
 800f984:	4313      	orrs	r3, r2
 800f986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f992:	4313      	orrs	r3, r2
 800f994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	699b      	ldr	r3, [r3, #24]
 800f9a0:	041b      	lsls	r3, r3, #16
 800f9a2:	4313      	orrs	r3, r2
 800f9a4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4a16      	ldr	r2, [pc, #88]	; (800fa04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f9ac:	4293      	cmp	r3, r2
 800f9ae:	d004      	beq.n	800f9ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	4a14      	ldr	r2, [pc, #80]	; (800fa08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	d115      	bne.n	800f9e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c4:	051b      	lsls	r3, r3, #20
 800f9c6:	4313      	orrs	r3, r2
 800f9c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	69db      	ldr	r3, [r3, #28]
 800f9d4:	4313      	orrs	r3, r2
 800f9d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	6a1b      	ldr	r3, [r3, #32]
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	68fa      	ldr	r2, [r7, #12]
 800f9ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f9f6:	2300      	movs	r3, #0
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3714      	adds	r7, #20
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr
 800fa04:	40010000 	.word	0x40010000
 800fa08:	40010400 	.word	0x40010400

0800fa0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	b083      	sub	sp, #12
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fa14:	bf00      	nop
 800fa16:	370c      	adds	r7, #12
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr

0800fa20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b083      	sub	sp, #12
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fa28:	bf00      	nop
 800fa2a:	370c      	adds	r7, #12
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa32:	4770      	bx	lr

0800fa34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fa3c:	bf00      	nop
 800fa3e:	370c      	adds	r7, #12
 800fa40:	46bd      	mov	sp, r7
 800fa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa46:	4770      	bx	lr

0800fa48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b082      	sub	sp, #8
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d101      	bne.n	800fa5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fa56:	2301      	movs	r3, #1
 800fa58:	e042      	b.n	800fae0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d106      	bne.n	800fa72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2200      	movs	r2, #0
 800fa68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f7f3 fbe3 	bl	8003238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2224      	movs	r2, #36	; 0x24
 800fa76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f022 0201 	bic.w	r2, r2, #1
 800fa88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d002      	beq.n	800fa98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f001 fb0c 	bl	80110b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f000 fda1 	bl	80105e0 <UART_SetConfig>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d101      	bne.n	800faa8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800faa4:	2301      	movs	r3, #1
 800faa6:	e01b      	b.n	800fae0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	685a      	ldr	r2, [r3, #4]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	689a      	ldr	r2, [r3, #8]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f042 0201 	orr.w	r2, r2, #1
 800fad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f001 fb8b 	bl	80111f4 <UART_CheckIdleState>
 800fade:	4603      	mov	r3, r0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3708      	adds	r7, #8
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b08a      	sub	sp, #40	; 0x28
 800faec:	af02      	add	r7, sp, #8
 800faee:	60f8      	str	r0, [r7, #12]
 800faf0:	60b9      	str	r1, [r7, #8]
 800faf2:	603b      	str	r3, [r7, #0]
 800faf4:	4613      	mov	r3, r2
 800faf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fafe:	2b20      	cmp	r3, #32
 800fb00:	d17b      	bne.n	800fbfa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d002      	beq.n	800fb0e <HAL_UART_Transmit+0x26>
 800fb08:	88fb      	ldrh	r3, [r7, #6]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d101      	bne.n	800fb12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	e074      	b.n	800fbfc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	2200      	movs	r2, #0
 800fb16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	2221      	movs	r2, #33	; 0x21
 800fb1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fb22:	f7f3 fec3 	bl	80038ac <HAL_GetTick>
 800fb26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	88fa      	ldrh	r2, [r7, #6]
 800fb2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	88fa      	ldrh	r2, [r7, #6]
 800fb34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	689b      	ldr	r3, [r3, #8]
 800fb3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb40:	d108      	bne.n	800fb54 <HAL_UART_Transmit+0x6c>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	691b      	ldr	r3, [r3, #16]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d104      	bne.n	800fb54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	61bb      	str	r3, [r7, #24]
 800fb52:	e003      	b.n	800fb5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fb5c:	e030      	b.n	800fbc0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	9300      	str	r3, [sp, #0]
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	2200      	movs	r2, #0
 800fb66:	2180      	movs	r1, #128	; 0x80
 800fb68:	68f8      	ldr	r0, [r7, #12]
 800fb6a:	f001 fbed 	bl	8011348 <UART_WaitOnFlagUntilTimeout>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d005      	beq.n	800fb80 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2220      	movs	r2, #32
 800fb78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fb7c:	2303      	movs	r3, #3
 800fb7e:	e03d      	b.n	800fbfc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d10b      	bne.n	800fb9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fb86:	69bb      	ldr	r3, [r7, #24]
 800fb88:	881b      	ldrh	r3, [r3, #0]
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fb94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fb96:	69bb      	ldr	r3, [r7, #24]
 800fb98:	3302      	adds	r3, #2
 800fb9a:	61bb      	str	r3, [r7, #24]
 800fb9c:	e007      	b.n	800fbae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	781a      	ldrb	r2, [r3, #0]
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fbc6:	b29b      	uxth	r3, r3
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d1c8      	bne.n	800fb5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	9300      	str	r3, [sp, #0]
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	2140      	movs	r1, #64	; 0x40
 800fbd6:	68f8      	ldr	r0, [r7, #12]
 800fbd8:	f001 fbb6 	bl	8011348 <UART_WaitOnFlagUntilTimeout>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d005      	beq.n	800fbee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	2220      	movs	r2, #32
 800fbe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fbea:	2303      	movs	r3, #3
 800fbec:	e006      	b.n	800fbfc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	2220      	movs	r2, #32
 800fbf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	e000      	b.n	800fbfc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fbfa:	2302      	movs	r3, #2
  }
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3720      	adds	r7, #32
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b08a      	sub	sp, #40	; 0x28
 800fc08:	af02      	add	r7, sp, #8
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	603b      	str	r3, [r7, #0]
 800fc10:	4613      	mov	r3, r2
 800fc12:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc1a:	2b20      	cmp	r3, #32
 800fc1c:	f040 80b5 	bne.w	800fd8a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d002      	beq.n	800fc2c <HAL_UART_Receive+0x28>
 800fc26:	88fb      	ldrh	r3, [r7, #6]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d101      	bne.n	800fc30 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	e0ad      	b.n	800fd8c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2200      	movs	r2, #0
 800fc34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	2222      	movs	r2, #34	; 0x22
 800fc3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2200      	movs	r2, #0
 800fc44:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fc46:	f7f3 fe31 	bl	80038ac <HAL_GetTick>
 800fc4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	88fa      	ldrh	r2, [r7, #6]
 800fc50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	88fa      	ldrh	r2, [r7, #6]
 800fc58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	689b      	ldr	r3, [r3, #8]
 800fc60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc64:	d10e      	bne.n	800fc84 <HAL_UART_Receive+0x80>
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	691b      	ldr	r3, [r3, #16]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d105      	bne.n	800fc7a <HAL_UART_Receive+0x76>
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fc74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc78:	e02d      	b.n	800fcd6 <HAL_UART_Receive+0xd2>
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	22ff      	movs	r2, #255	; 0xff
 800fc7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc82:	e028      	b.n	800fcd6 <HAL_UART_Receive+0xd2>
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	689b      	ldr	r3, [r3, #8]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d10d      	bne.n	800fca8 <HAL_UART_Receive+0xa4>
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	691b      	ldr	r3, [r3, #16]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d104      	bne.n	800fc9e <HAL_UART_Receive+0x9a>
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	22ff      	movs	r2, #255	; 0xff
 800fc98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fc9c:	e01b      	b.n	800fcd6 <HAL_UART_Receive+0xd2>
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	227f      	movs	r2, #127	; 0x7f
 800fca2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fca6:	e016      	b.n	800fcd6 <HAL_UART_Receive+0xd2>
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	689b      	ldr	r3, [r3, #8]
 800fcac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fcb0:	d10d      	bne.n	800fcce <HAL_UART_Receive+0xca>
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	691b      	ldr	r3, [r3, #16]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d104      	bne.n	800fcc4 <HAL_UART_Receive+0xc0>
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	227f      	movs	r2, #127	; 0x7f
 800fcbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcc2:	e008      	b.n	800fcd6 <HAL_UART_Receive+0xd2>
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	223f      	movs	r2, #63	; 0x3f
 800fcc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fccc:	e003      	b.n	800fcd6 <HAL_UART_Receive+0xd2>
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fcdc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	689b      	ldr	r3, [r3, #8]
 800fce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fce6:	d108      	bne.n	800fcfa <HAL_UART_Receive+0xf6>
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	691b      	ldr	r3, [r3, #16]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d104      	bne.n	800fcfa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	61bb      	str	r3, [r7, #24]
 800fcf8:	e003      	b.n	800fd02 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fd02:	e036      	b.n	800fd72 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	9300      	str	r3, [sp, #0]
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	2120      	movs	r1, #32
 800fd0e:	68f8      	ldr	r0, [r7, #12]
 800fd10:	f001 fb1a 	bl	8011348 <UART_WaitOnFlagUntilTimeout>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d005      	beq.n	800fd26 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	2220      	movs	r2, #32
 800fd1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800fd22:	2303      	movs	r3, #3
 800fd24:	e032      	b.n	800fd8c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800fd26:	69fb      	ldr	r3, [r7, #28]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d10c      	bne.n	800fd46 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	8a7b      	ldrh	r3, [r7, #18]
 800fd36:	4013      	ands	r3, r2
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	69bb      	ldr	r3, [r7, #24]
 800fd3c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fd3e:	69bb      	ldr	r3, [r7, #24]
 800fd40:	3302      	adds	r3, #2
 800fd42:	61bb      	str	r3, [r7, #24]
 800fd44:	e00c      	b.n	800fd60 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd4c:	b2da      	uxtb	r2, r3
 800fd4e:	8a7b      	ldrh	r3, [r7, #18]
 800fd50:	b2db      	uxtb	r3, r3
 800fd52:	4013      	ands	r3, r2
 800fd54:	b2da      	uxtb	r2, r3
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800fd5a:	69fb      	ldr	r3, [r7, #28]
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	3b01      	subs	r3, #1
 800fd6a:	b29a      	uxth	r2, r3
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd78:	b29b      	uxth	r3, r3
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d1c2      	bne.n	800fd04 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2220      	movs	r2, #32
 800fd82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800fd86:	2300      	movs	r3, #0
 800fd88:	e000      	b.n	800fd8c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800fd8a:	2302      	movs	r3, #2
  }
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3720      	adds	r7, #32
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b08a      	sub	sp, #40	; 0x28
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	60f8      	str	r0, [r7, #12]
 800fd9c:	60b9      	str	r1, [r7, #8]
 800fd9e:	4613      	mov	r3, r2
 800fda0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fda8:	2b20      	cmp	r3, #32
 800fdaa:	d137      	bne.n	800fe1c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d002      	beq.n	800fdb8 <HAL_UART_Receive_IT+0x24>
 800fdb2:	88fb      	ldrh	r3, [r7, #6]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d101      	bne.n	800fdbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fdb8:	2301      	movs	r3, #1
 800fdba:	e030      	b.n	800fe1e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	4a18      	ldr	r2, [pc, #96]	; (800fe28 <HAL_UART_Receive_IT+0x94>)
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	d01f      	beq.n	800fe0c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d018      	beq.n	800fe0c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	e853 3f00 	ldrex	r3, [r3]
 800fde6:	613b      	str	r3, [r7, #16]
   return(result);
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fdee:	627b      	str	r3, [r7, #36]	; 0x24
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf8:	623b      	str	r3, [r7, #32]
 800fdfa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdfc:	69f9      	ldr	r1, [r7, #28]
 800fdfe:	6a3a      	ldr	r2, [r7, #32]
 800fe00:	e841 2300 	strex	r3, r2, [r1]
 800fe04:	61bb      	str	r3, [r7, #24]
   return(result);
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d1e6      	bne.n	800fdda <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fe0c:	88fb      	ldrh	r3, [r7, #6]
 800fe0e:	461a      	mov	r2, r3
 800fe10:	68b9      	ldr	r1, [r7, #8]
 800fe12:	68f8      	ldr	r0, [r7, #12]
 800fe14:	f001 fb06 	bl	8011424 <UART_Start_Receive_IT>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	e000      	b.n	800fe1e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fe1c:	2302      	movs	r3, #2
  }
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3728      	adds	r7, #40	; 0x28
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	58000c00 	.word	0x58000c00

0800fe2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b0ba      	sub	sp, #232	; 0xe8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	69db      	ldr	r3, [r3, #28]
 800fe3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	689b      	ldr	r3, [r3, #8]
 800fe4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fe52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800fe56:	f640 030f 	movw	r3, #2063	; 0x80f
 800fe5a:	4013      	ands	r3, r2
 800fe5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800fe60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d11b      	bne.n	800fea0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fe68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe6c:	f003 0320 	and.w	r3, r3, #32
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d015      	beq.n	800fea0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fe74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe78:	f003 0320 	and.w	r3, r3, #32
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d105      	bne.n	800fe8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fe80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fe84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d009      	beq.n	800fea0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	f000 8377 	beq.w	8010584 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	4798      	blx	r3
      }
      return;
 800fe9e:	e371      	b.n	8010584 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fea0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	f000 8123 	beq.w	80100f0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800feaa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800feae:	4b8d      	ldr	r3, [pc, #564]	; (80100e4 <HAL_UART_IRQHandler+0x2b8>)
 800feb0:	4013      	ands	r3, r2
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d106      	bne.n	800fec4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800feb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800feba:	4b8b      	ldr	r3, [pc, #556]	; (80100e8 <HAL_UART_IRQHandler+0x2bc>)
 800febc:	4013      	ands	r3, r2
 800febe:	2b00      	cmp	r3, #0
 800fec0:	f000 8116 	beq.w	80100f0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fec8:	f003 0301 	and.w	r3, r3, #1
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d011      	beq.n	800fef4 <HAL_UART_IRQHandler+0xc8>
 800fed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d00b      	beq.n	800fef4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2201      	movs	r2, #1
 800fee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800feea:	f043 0201 	orr.w	r2, r3, #1
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fef8:	f003 0302 	and.w	r3, r3, #2
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d011      	beq.n	800ff24 <HAL_UART_IRQHandler+0xf8>
 800ff00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff04:	f003 0301 	and.w	r3, r3, #1
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d00b      	beq.n	800ff24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2202      	movs	r2, #2
 800ff12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff1a:	f043 0204 	orr.w	r2, r3, #4
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ff24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff28:	f003 0304 	and.w	r3, r3, #4
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d011      	beq.n	800ff54 <HAL_UART_IRQHandler+0x128>
 800ff30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ff34:	f003 0301 	and.w	r3, r3, #1
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d00b      	beq.n	800ff54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2204      	movs	r2, #4
 800ff42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff4a:	f043 0202 	orr.w	r2, r3, #2
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ff54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff58:	f003 0308 	and.w	r3, r3, #8
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d017      	beq.n	800ff90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ff60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ff64:	f003 0320 	and.w	r3, r3, #32
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d105      	bne.n	800ff78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ff6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ff70:	4b5c      	ldr	r3, [pc, #368]	; (80100e4 <HAL_UART_IRQHandler+0x2b8>)
 800ff72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d00b      	beq.n	800ff90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	2208      	movs	r2, #8
 800ff7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff86:	f043 0208 	orr.w	r2, r3, #8
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ff90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d012      	beq.n	800ffc2 <HAL_UART_IRQHandler+0x196>
 800ff9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00c      	beq.n	800ffc2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ffb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ffb8:	f043 0220 	orr.w	r2, r3, #32
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	f000 82dd 	beq.w	8010588 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ffce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffd2:	f003 0320 	and.w	r3, r3, #32
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d013      	beq.n	8010002 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ffda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffde:	f003 0320 	and.w	r3, r3, #32
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d105      	bne.n	800fff2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ffe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ffea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d007      	beq.n	8010002 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d003      	beq.n	8010002 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010008:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	689b      	ldr	r3, [r3, #8]
 8010012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010016:	2b40      	cmp	r3, #64	; 0x40
 8010018:	d005      	beq.n	8010026 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801001a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801001e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010022:	2b00      	cmp	r3, #0
 8010024:	d054      	beq.n	80100d0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f001 fb1e 	bl	8011668 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010036:	2b40      	cmp	r3, #64	; 0x40
 8010038:	d146      	bne.n	80100c8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	3308      	adds	r3, #8
 8010040:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010048:	e853 3f00 	ldrex	r3, [r3]
 801004c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010050:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010058:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	3308      	adds	r3, #8
 8010062:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010066:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801006a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801006e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010072:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010076:	e841 2300 	strex	r3, r2, [r1]
 801007a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801007e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d1d9      	bne.n	801003a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801008c:	2b00      	cmp	r3, #0
 801008e:	d017      	beq.n	80100c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010096:	4a15      	ldr	r2, [pc, #84]	; (80100ec <HAL_UART_IRQHandler+0x2c0>)
 8010098:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7f6 fe0f 	bl	8006cc4 <HAL_DMA_Abort_IT>
 80100a6:	4603      	mov	r3, r0
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d019      	beq.n	80100e0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80100ba:	4610      	mov	r0, r2
 80100bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100be:	e00f      	b.n	80100e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f000 fa77 	bl	80105b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100c6:	e00b      	b.n	80100e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f000 fa73 	bl	80105b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100ce:	e007      	b.n	80100e0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f000 fa6f 	bl	80105b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2200      	movs	r2, #0
 80100da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80100de:	e253      	b.n	8010588 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100e0:	bf00      	nop
    return;
 80100e2:	e251      	b.n	8010588 <HAL_UART_IRQHandler+0x75c>
 80100e4:	10000001 	.word	0x10000001
 80100e8:	04000120 	.word	0x04000120
 80100ec:	08011735 	.word	0x08011735

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100f4:	2b01      	cmp	r3, #1
 80100f6:	f040 81e7 	bne.w	80104c8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80100fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100fe:	f003 0310 	and.w	r3, r3, #16
 8010102:	2b00      	cmp	r3, #0
 8010104:	f000 81e0 	beq.w	80104c8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801010c:	f003 0310 	and.w	r3, r3, #16
 8010110:	2b00      	cmp	r3, #0
 8010112:	f000 81d9 	beq.w	80104c8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	2210      	movs	r2, #16
 801011c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	689b      	ldr	r3, [r3, #8]
 8010124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010128:	2b40      	cmp	r3, #64	; 0x40
 801012a:	f040 8151 	bne.w	80103d0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4a96      	ldr	r2, [pc, #600]	; (8010390 <HAL_UART_IRQHandler+0x564>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d068      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	4a93      	ldr	r2, [pc, #588]	; (8010394 <HAL_UART_IRQHandler+0x568>)
 8010146:	4293      	cmp	r3, r2
 8010148:	d061      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	4a91      	ldr	r2, [pc, #580]	; (8010398 <HAL_UART_IRQHandler+0x56c>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d05a      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4a8e      	ldr	r2, [pc, #568]	; (801039c <HAL_UART_IRQHandler+0x570>)
 8010162:	4293      	cmp	r3, r2
 8010164:	d053      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4a8c      	ldr	r2, [pc, #560]	; (80103a0 <HAL_UART_IRQHandler+0x574>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d04c      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4a89      	ldr	r2, [pc, #548]	; (80103a4 <HAL_UART_IRQHandler+0x578>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d045      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	4a87      	ldr	r2, [pc, #540]	; (80103a8 <HAL_UART_IRQHandler+0x57c>)
 801018c:	4293      	cmp	r3, r2
 801018e:	d03e      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4a84      	ldr	r2, [pc, #528]	; (80103ac <HAL_UART_IRQHandler+0x580>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d037      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	4a82      	ldr	r2, [pc, #520]	; (80103b0 <HAL_UART_IRQHandler+0x584>)
 80101a8:	4293      	cmp	r3, r2
 80101aa:	d030      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	4a7f      	ldr	r2, [pc, #508]	; (80103b4 <HAL_UART_IRQHandler+0x588>)
 80101b6:	4293      	cmp	r3, r2
 80101b8:	d029      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	4a7d      	ldr	r2, [pc, #500]	; (80103b8 <HAL_UART_IRQHandler+0x58c>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d022      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	4a7a      	ldr	r2, [pc, #488]	; (80103bc <HAL_UART_IRQHandler+0x590>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d01b      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	4a78      	ldr	r2, [pc, #480]	; (80103c0 <HAL_UART_IRQHandler+0x594>)
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d014      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	4a75      	ldr	r2, [pc, #468]	; (80103c4 <HAL_UART_IRQHandler+0x598>)
 80101ee:	4293      	cmp	r3, r2
 80101f0:	d00d      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	4a73      	ldr	r2, [pc, #460]	; (80103c8 <HAL_UART_IRQHandler+0x59c>)
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d006      	beq.n	801020e <HAL_UART_IRQHandler+0x3e2>
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	4a70      	ldr	r2, [pc, #448]	; (80103cc <HAL_UART_IRQHandler+0x5a0>)
 801020a:	4293      	cmp	r3, r2
 801020c:	d106      	bne.n	801021c <HAL_UART_IRQHandler+0x3f0>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	b29b      	uxth	r3, r3
 801021a:	e005      	b.n	8010228 <HAL_UART_IRQHandler+0x3fc>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	b29b      	uxth	r3, r3
 8010228:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801022c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010230:	2b00      	cmp	r3, #0
 8010232:	f000 81ab 	beq.w	801058c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801023c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010240:	429a      	cmp	r2, r3
 8010242:	f080 81a3 	bcs.w	801058c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801024c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010256:	69db      	ldr	r3, [r3, #28]
 8010258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801025c:	f000 8087 	beq.w	801036e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010268:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801026c:	e853 3f00 	ldrex	r3, [r3]
 8010270:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801027c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	461a      	mov	r2, r3
 8010286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801028a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801028e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010292:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010296:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801029a:	e841 2300 	strex	r3, r2, [r1]
 801029e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80102a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d1da      	bne.n	8010260 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	3308      	adds	r3, #8
 80102b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102b4:	e853 3f00 	ldrex	r3, [r3]
 80102b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80102ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102bc:	f023 0301 	bic.w	r3, r3, #1
 80102c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	3308      	adds	r3, #8
 80102ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80102ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80102d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80102d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80102da:	e841 2300 	strex	r3, r2, [r1]
 80102de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80102e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1e1      	bne.n	80102aa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	3308      	adds	r3, #8
 80102ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102f0:	e853 3f00 	ldrex	r3, [r3]
 80102f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80102f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	3308      	adds	r3, #8
 8010306:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801030a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801030c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801030e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010310:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010312:	e841 2300 	strex	r3, r2, [r1]
 8010316:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801031a:	2b00      	cmp	r3, #0
 801031c:	d1e3      	bne.n	80102e6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2220      	movs	r2, #32
 8010322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2200      	movs	r2, #0
 801032a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010334:	e853 3f00 	ldrex	r3, [r3]
 8010338:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801033a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801033c:	f023 0310 	bic.w	r3, r3, #16
 8010340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	461a      	mov	r2, r3
 801034a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801034e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010350:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010352:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010354:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010356:	e841 2300 	strex	r3, r2, [r1]
 801035a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801035c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801035e:	2b00      	cmp	r3, #0
 8010360:	d1e4      	bne.n	801032c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010368:	4618      	mov	r0, r3
 801036a:	f7f6 f98d 	bl	8006688 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2202      	movs	r2, #2
 8010372:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010380:	b29b      	uxth	r3, r3
 8010382:	1ad3      	subs	r3, r2, r3
 8010384:	b29b      	uxth	r3, r3
 8010386:	4619      	mov	r1, r3
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 f91d 	bl	80105c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801038e:	e0fd      	b.n	801058c <HAL_UART_IRQHandler+0x760>
 8010390:	40020010 	.word	0x40020010
 8010394:	40020028 	.word	0x40020028
 8010398:	40020040 	.word	0x40020040
 801039c:	40020058 	.word	0x40020058
 80103a0:	40020070 	.word	0x40020070
 80103a4:	40020088 	.word	0x40020088
 80103a8:	400200a0 	.word	0x400200a0
 80103ac:	400200b8 	.word	0x400200b8
 80103b0:	40020410 	.word	0x40020410
 80103b4:	40020428 	.word	0x40020428
 80103b8:	40020440 	.word	0x40020440
 80103bc:	40020458 	.word	0x40020458
 80103c0:	40020470 	.word	0x40020470
 80103c4:	40020488 	.word	0x40020488
 80103c8:	400204a0 	.word	0x400204a0
 80103cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80103dc:	b29b      	uxth	r3, r3
 80103de:	1ad3      	subs	r3, r2, r3
 80103e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	f000 80cf 	beq.w	8010590 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80103f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	f000 80ca 	beq.w	8010590 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010404:	e853 3f00 	ldrex	r3, [r3]
 8010408:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801040a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010410:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	461a      	mov	r2, r3
 801041a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801041e:	647b      	str	r3, [r7, #68]	; 0x44
 8010420:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010422:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010426:	e841 2300 	strex	r3, r2, [r1]
 801042a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801042c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801042e:	2b00      	cmp	r3, #0
 8010430:	d1e4      	bne.n	80103fc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	3308      	adds	r3, #8
 8010438:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801043a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043c:	e853 3f00 	ldrex	r3, [r3]
 8010440:	623b      	str	r3, [r7, #32]
   return(result);
 8010442:	6a3a      	ldr	r2, [r7, #32]
 8010444:	4b55      	ldr	r3, [pc, #340]	; (801059c <HAL_UART_IRQHandler+0x770>)
 8010446:	4013      	ands	r3, r2
 8010448:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	3308      	adds	r3, #8
 8010452:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010456:	633a      	str	r2, [r7, #48]	; 0x30
 8010458:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801045a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801045c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801045e:	e841 2300 	strex	r3, r2, [r1]
 8010462:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010466:	2b00      	cmp	r3, #0
 8010468:	d1e3      	bne.n	8010432 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2220      	movs	r2, #32
 801046e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2200      	movs	r2, #0
 8010476:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2200      	movs	r2, #0
 801047c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	e853 3f00 	ldrex	r3, [r3]
 801048a:	60fb      	str	r3, [r7, #12]
   return(result);
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f023 0310 	bic.w	r3, r3, #16
 8010492:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	461a      	mov	r2, r3
 801049c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80104a0:	61fb      	str	r3, [r7, #28]
 80104a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a4:	69b9      	ldr	r1, [r7, #24]
 80104a6:	69fa      	ldr	r2, [r7, #28]
 80104a8:	e841 2300 	strex	r3, r2, [r1]
 80104ac:	617b      	str	r3, [r7, #20]
   return(result);
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d1e4      	bne.n	801047e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2202      	movs	r2, #2
 80104b8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80104ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80104be:	4619      	mov	r1, r3
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f000 f881 	bl	80105c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80104c6:	e063      	b.n	8010590 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80104c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d00e      	beq.n	80104f2 <HAL_UART_IRQHandler+0x6c6>
 80104d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80104d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d008      	beq.n	80104f2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80104e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f001 fe80 	bl	80121f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80104f0:	e051      	b.n	8010596 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80104f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80104f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d014      	beq.n	8010528 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80104fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010506:	2b00      	cmp	r3, #0
 8010508:	d105      	bne.n	8010516 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801050a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801050e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010512:	2b00      	cmp	r3, #0
 8010514:	d008      	beq.n	8010528 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801051a:	2b00      	cmp	r3, #0
 801051c:	d03a      	beq.n	8010594 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	4798      	blx	r3
    }
    return;
 8010526:	e035      	b.n	8010594 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801052c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010530:	2b00      	cmp	r3, #0
 8010532:	d009      	beq.n	8010548 <HAL_UART_IRQHandler+0x71c>
 8010534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801053c:	2b00      	cmp	r3, #0
 801053e:	d003      	beq.n	8010548 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f001 f90d 	bl	8011760 <UART_EndTransmit_IT>
    return;
 8010546:	e026      	b.n	8010596 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801054c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010550:	2b00      	cmp	r3, #0
 8010552:	d009      	beq.n	8010568 <HAL_UART_IRQHandler+0x73c>
 8010554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010558:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801055c:	2b00      	cmp	r3, #0
 801055e:	d003      	beq.n	8010568 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f001 fe59 	bl	8012218 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010566:	e016      	b.n	8010596 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801056c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010570:	2b00      	cmp	r3, #0
 8010572:	d010      	beq.n	8010596 <HAL_UART_IRQHandler+0x76a>
 8010574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010578:	2b00      	cmp	r3, #0
 801057a:	da0c      	bge.n	8010596 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f001 fe41 	bl	8012204 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010582:	e008      	b.n	8010596 <HAL_UART_IRQHandler+0x76a>
      return;
 8010584:	bf00      	nop
 8010586:	e006      	b.n	8010596 <HAL_UART_IRQHandler+0x76a>
    return;
 8010588:	bf00      	nop
 801058a:	e004      	b.n	8010596 <HAL_UART_IRQHandler+0x76a>
      return;
 801058c:	bf00      	nop
 801058e:	e002      	b.n	8010596 <HAL_UART_IRQHandler+0x76a>
      return;
 8010590:	bf00      	nop
 8010592:	e000      	b.n	8010596 <HAL_UART_IRQHandler+0x76a>
    return;
 8010594:	bf00      	nop
  }
}
 8010596:	37e8      	adds	r7, #232	; 0xe8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}
 801059c:	effffffe 	.word	0xeffffffe

080105a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80105a0:	b480      	push	{r7}
 80105a2:	b083      	sub	sp, #12
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80105a8:	bf00      	nop
 80105aa:	370c      	adds	r7, #12
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr

080105b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80105bc:	bf00      	nop
 80105be:	370c      	adds	r7, #12
 80105c0:	46bd      	mov	sp, r7
 80105c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c6:	4770      	bx	lr

080105c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	460b      	mov	r3, r1
 80105d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80105d4:	bf00      	nop
 80105d6:	370c      	adds	r7, #12
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr

080105e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80105e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80105e4:	b092      	sub	sp, #72	; 0x48
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80105ea:	2300      	movs	r3, #0
 80105ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	689a      	ldr	r2, [r3, #8]
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	691b      	ldr	r3, [r3, #16]
 80105f8:	431a      	orrs	r2, r3
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	695b      	ldr	r3, [r3, #20]
 80105fe:	431a      	orrs	r2, r3
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	69db      	ldr	r3, [r3, #28]
 8010604:	4313      	orrs	r3, r2
 8010606:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	4bbe      	ldr	r3, [pc, #760]	; (8010908 <UART_SetConfig+0x328>)
 8010610:	4013      	ands	r3, r2
 8010612:	697a      	ldr	r2, [r7, #20]
 8010614:	6812      	ldr	r2, [r2, #0]
 8010616:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010618:	430b      	orrs	r3, r1
 801061a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	68da      	ldr	r2, [r3, #12]
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	430a      	orrs	r2, r1
 8010630:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	699b      	ldr	r3, [r3, #24]
 8010636:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	4ab3      	ldr	r2, [pc, #716]	; (801090c <UART_SetConfig+0x32c>)
 801063e:	4293      	cmp	r3, r2
 8010640:	d004      	beq.n	801064c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	6a1b      	ldr	r3, [r3, #32]
 8010646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010648:	4313      	orrs	r3, r2
 801064a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	689a      	ldr	r2, [r3, #8]
 8010652:	4baf      	ldr	r3, [pc, #700]	; (8010910 <UART_SetConfig+0x330>)
 8010654:	4013      	ands	r3, r2
 8010656:	697a      	ldr	r2, [r7, #20]
 8010658:	6812      	ldr	r2, [r2, #0]
 801065a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801065c:	430b      	orrs	r3, r1
 801065e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010666:	f023 010f 	bic.w	r1, r3, #15
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	430a      	orrs	r2, r1
 8010674:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4aa6      	ldr	r2, [pc, #664]	; (8010914 <UART_SetConfig+0x334>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d177      	bne.n	8010770 <UART_SetConfig+0x190>
 8010680:	4ba5      	ldr	r3, [pc, #660]	; (8010918 <UART_SetConfig+0x338>)
 8010682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010684:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010688:	2b28      	cmp	r3, #40	; 0x28
 801068a:	d86d      	bhi.n	8010768 <UART_SetConfig+0x188>
 801068c:	a201      	add	r2, pc, #4	; (adr r2, 8010694 <UART_SetConfig+0xb4>)
 801068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010692:	bf00      	nop
 8010694:	08010739 	.word	0x08010739
 8010698:	08010769 	.word	0x08010769
 801069c:	08010769 	.word	0x08010769
 80106a0:	08010769 	.word	0x08010769
 80106a4:	08010769 	.word	0x08010769
 80106a8:	08010769 	.word	0x08010769
 80106ac:	08010769 	.word	0x08010769
 80106b0:	08010769 	.word	0x08010769
 80106b4:	08010741 	.word	0x08010741
 80106b8:	08010769 	.word	0x08010769
 80106bc:	08010769 	.word	0x08010769
 80106c0:	08010769 	.word	0x08010769
 80106c4:	08010769 	.word	0x08010769
 80106c8:	08010769 	.word	0x08010769
 80106cc:	08010769 	.word	0x08010769
 80106d0:	08010769 	.word	0x08010769
 80106d4:	08010749 	.word	0x08010749
 80106d8:	08010769 	.word	0x08010769
 80106dc:	08010769 	.word	0x08010769
 80106e0:	08010769 	.word	0x08010769
 80106e4:	08010769 	.word	0x08010769
 80106e8:	08010769 	.word	0x08010769
 80106ec:	08010769 	.word	0x08010769
 80106f0:	08010769 	.word	0x08010769
 80106f4:	08010751 	.word	0x08010751
 80106f8:	08010769 	.word	0x08010769
 80106fc:	08010769 	.word	0x08010769
 8010700:	08010769 	.word	0x08010769
 8010704:	08010769 	.word	0x08010769
 8010708:	08010769 	.word	0x08010769
 801070c:	08010769 	.word	0x08010769
 8010710:	08010769 	.word	0x08010769
 8010714:	08010759 	.word	0x08010759
 8010718:	08010769 	.word	0x08010769
 801071c:	08010769 	.word	0x08010769
 8010720:	08010769 	.word	0x08010769
 8010724:	08010769 	.word	0x08010769
 8010728:	08010769 	.word	0x08010769
 801072c:	08010769 	.word	0x08010769
 8010730:	08010769 	.word	0x08010769
 8010734:	08010761 	.word	0x08010761
 8010738:	2301      	movs	r3, #1
 801073a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801073e:	e222      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010740:	2304      	movs	r3, #4
 8010742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010746:	e21e      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010748:	2308      	movs	r3, #8
 801074a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801074e:	e21a      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010750:	2310      	movs	r3, #16
 8010752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010756:	e216      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010758:	2320      	movs	r3, #32
 801075a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801075e:	e212      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010760:	2340      	movs	r3, #64	; 0x40
 8010762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010766:	e20e      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010768:	2380      	movs	r3, #128	; 0x80
 801076a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801076e:	e20a      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	4a69      	ldr	r2, [pc, #420]	; (801091c <UART_SetConfig+0x33c>)
 8010776:	4293      	cmp	r3, r2
 8010778:	d130      	bne.n	80107dc <UART_SetConfig+0x1fc>
 801077a:	4b67      	ldr	r3, [pc, #412]	; (8010918 <UART_SetConfig+0x338>)
 801077c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801077e:	f003 0307 	and.w	r3, r3, #7
 8010782:	2b05      	cmp	r3, #5
 8010784:	d826      	bhi.n	80107d4 <UART_SetConfig+0x1f4>
 8010786:	a201      	add	r2, pc, #4	; (adr r2, 801078c <UART_SetConfig+0x1ac>)
 8010788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801078c:	080107a5 	.word	0x080107a5
 8010790:	080107ad 	.word	0x080107ad
 8010794:	080107b5 	.word	0x080107b5
 8010798:	080107bd 	.word	0x080107bd
 801079c:	080107c5 	.word	0x080107c5
 80107a0:	080107cd 	.word	0x080107cd
 80107a4:	2300      	movs	r3, #0
 80107a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107aa:	e1ec      	b.n	8010b86 <UART_SetConfig+0x5a6>
 80107ac:	2304      	movs	r3, #4
 80107ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107b2:	e1e8      	b.n	8010b86 <UART_SetConfig+0x5a6>
 80107b4:	2308      	movs	r3, #8
 80107b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ba:	e1e4      	b.n	8010b86 <UART_SetConfig+0x5a6>
 80107bc:	2310      	movs	r3, #16
 80107be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107c2:	e1e0      	b.n	8010b86 <UART_SetConfig+0x5a6>
 80107c4:	2320      	movs	r3, #32
 80107c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107ca:	e1dc      	b.n	8010b86 <UART_SetConfig+0x5a6>
 80107cc:	2340      	movs	r3, #64	; 0x40
 80107ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107d2:	e1d8      	b.n	8010b86 <UART_SetConfig+0x5a6>
 80107d4:	2380      	movs	r3, #128	; 0x80
 80107d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80107da:	e1d4      	b.n	8010b86 <UART_SetConfig+0x5a6>
 80107dc:	697b      	ldr	r3, [r7, #20]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	4a4f      	ldr	r2, [pc, #316]	; (8010920 <UART_SetConfig+0x340>)
 80107e2:	4293      	cmp	r3, r2
 80107e4:	d130      	bne.n	8010848 <UART_SetConfig+0x268>
 80107e6:	4b4c      	ldr	r3, [pc, #304]	; (8010918 <UART_SetConfig+0x338>)
 80107e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107ea:	f003 0307 	and.w	r3, r3, #7
 80107ee:	2b05      	cmp	r3, #5
 80107f0:	d826      	bhi.n	8010840 <UART_SetConfig+0x260>
 80107f2:	a201      	add	r2, pc, #4	; (adr r2, 80107f8 <UART_SetConfig+0x218>)
 80107f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f8:	08010811 	.word	0x08010811
 80107fc:	08010819 	.word	0x08010819
 8010800:	08010821 	.word	0x08010821
 8010804:	08010829 	.word	0x08010829
 8010808:	08010831 	.word	0x08010831
 801080c:	08010839 	.word	0x08010839
 8010810:	2300      	movs	r3, #0
 8010812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010816:	e1b6      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010818:	2304      	movs	r3, #4
 801081a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801081e:	e1b2      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010820:	2308      	movs	r3, #8
 8010822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010826:	e1ae      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010828:	2310      	movs	r3, #16
 801082a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801082e:	e1aa      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010830:	2320      	movs	r3, #32
 8010832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010836:	e1a6      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010838:	2340      	movs	r3, #64	; 0x40
 801083a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801083e:	e1a2      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010840:	2380      	movs	r3, #128	; 0x80
 8010842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010846:	e19e      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	4a35      	ldr	r2, [pc, #212]	; (8010924 <UART_SetConfig+0x344>)
 801084e:	4293      	cmp	r3, r2
 8010850:	d130      	bne.n	80108b4 <UART_SetConfig+0x2d4>
 8010852:	4b31      	ldr	r3, [pc, #196]	; (8010918 <UART_SetConfig+0x338>)
 8010854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010856:	f003 0307 	and.w	r3, r3, #7
 801085a:	2b05      	cmp	r3, #5
 801085c:	d826      	bhi.n	80108ac <UART_SetConfig+0x2cc>
 801085e:	a201      	add	r2, pc, #4	; (adr r2, 8010864 <UART_SetConfig+0x284>)
 8010860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010864:	0801087d 	.word	0x0801087d
 8010868:	08010885 	.word	0x08010885
 801086c:	0801088d 	.word	0x0801088d
 8010870:	08010895 	.word	0x08010895
 8010874:	0801089d 	.word	0x0801089d
 8010878:	080108a5 	.word	0x080108a5
 801087c:	2300      	movs	r3, #0
 801087e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010882:	e180      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010884:	2304      	movs	r3, #4
 8010886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801088a:	e17c      	b.n	8010b86 <UART_SetConfig+0x5a6>
 801088c:	2308      	movs	r3, #8
 801088e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010892:	e178      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010894:	2310      	movs	r3, #16
 8010896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801089a:	e174      	b.n	8010b86 <UART_SetConfig+0x5a6>
 801089c:	2320      	movs	r3, #32
 801089e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108a2:	e170      	b.n	8010b86 <UART_SetConfig+0x5a6>
 80108a4:	2340      	movs	r3, #64	; 0x40
 80108a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108aa:	e16c      	b.n	8010b86 <UART_SetConfig+0x5a6>
 80108ac:	2380      	movs	r3, #128	; 0x80
 80108ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108b2:	e168      	b.n	8010b86 <UART_SetConfig+0x5a6>
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	4a1b      	ldr	r2, [pc, #108]	; (8010928 <UART_SetConfig+0x348>)
 80108ba:	4293      	cmp	r3, r2
 80108bc:	d142      	bne.n	8010944 <UART_SetConfig+0x364>
 80108be:	4b16      	ldr	r3, [pc, #88]	; (8010918 <UART_SetConfig+0x338>)
 80108c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108c2:	f003 0307 	and.w	r3, r3, #7
 80108c6:	2b05      	cmp	r3, #5
 80108c8:	d838      	bhi.n	801093c <UART_SetConfig+0x35c>
 80108ca:	a201      	add	r2, pc, #4	; (adr r2, 80108d0 <UART_SetConfig+0x2f0>)
 80108cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108d0:	080108e9 	.word	0x080108e9
 80108d4:	080108f1 	.word	0x080108f1
 80108d8:	080108f9 	.word	0x080108f9
 80108dc:	08010901 	.word	0x08010901
 80108e0:	0801092d 	.word	0x0801092d
 80108e4:	08010935 	.word	0x08010935
 80108e8:	2300      	movs	r3, #0
 80108ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ee:	e14a      	b.n	8010b86 <UART_SetConfig+0x5a6>
 80108f0:	2304      	movs	r3, #4
 80108f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108f6:	e146      	b.n	8010b86 <UART_SetConfig+0x5a6>
 80108f8:	2308      	movs	r3, #8
 80108fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108fe:	e142      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010900:	2310      	movs	r3, #16
 8010902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010906:	e13e      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010908:	cfff69f3 	.word	0xcfff69f3
 801090c:	58000c00 	.word	0x58000c00
 8010910:	11fff4ff 	.word	0x11fff4ff
 8010914:	40011000 	.word	0x40011000
 8010918:	58024400 	.word	0x58024400
 801091c:	40004400 	.word	0x40004400
 8010920:	40004800 	.word	0x40004800
 8010924:	40004c00 	.word	0x40004c00
 8010928:	40005000 	.word	0x40005000
 801092c:	2320      	movs	r3, #32
 801092e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010932:	e128      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010934:	2340      	movs	r3, #64	; 0x40
 8010936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801093a:	e124      	b.n	8010b86 <UART_SetConfig+0x5a6>
 801093c:	2380      	movs	r3, #128	; 0x80
 801093e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010942:	e120      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	4acb      	ldr	r2, [pc, #812]	; (8010c78 <UART_SetConfig+0x698>)
 801094a:	4293      	cmp	r3, r2
 801094c:	d176      	bne.n	8010a3c <UART_SetConfig+0x45c>
 801094e:	4bcb      	ldr	r3, [pc, #812]	; (8010c7c <UART_SetConfig+0x69c>)
 8010950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010956:	2b28      	cmp	r3, #40	; 0x28
 8010958:	d86c      	bhi.n	8010a34 <UART_SetConfig+0x454>
 801095a:	a201      	add	r2, pc, #4	; (adr r2, 8010960 <UART_SetConfig+0x380>)
 801095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010960:	08010a05 	.word	0x08010a05
 8010964:	08010a35 	.word	0x08010a35
 8010968:	08010a35 	.word	0x08010a35
 801096c:	08010a35 	.word	0x08010a35
 8010970:	08010a35 	.word	0x08010a35
 8010974:	08010a35 	.word	0x08010a35
 8010978:	08010a35 	.word	0x08010a35
 801097c:	08010a35 	.word	0x08010a35
 8010980:	08010a0d 	.word	0x08010a0d
 8010984:	08010a35 	.word	0x08010a35
 8010988:	08010a35 	.word	0x08010a35
 801098c:	08010a35 	.word	0x08010a35
 8010990:	08010a35 	.word	0x08010a35
 8010994:	08010a35 	.word	0x08010a35
 8010998:	08010a35 	.word	0x08010a35
 801099c:	08010a35 	.word	0x08010a35
 80109a0:	08010a15 	.word	0x08010a15
 80109a4:	08010a35 	.word	0x08010a35
 80109a8:	08010a35 	.word	0x08010a35
 80109ac:	08010a35 	.word	0x08010a35
 80109b0:	08010a35 	.word	0x08010a35
 80109b4:	08010a35 	.word	0x08010a35
 80109b8:	08010a35 	.word	0x08010a35
 80109bc:	08010a35 	.word	0x08010a35
 80109c0:	08010a1d 	.word	0x08010a1d
 80109c4:	08010a35 	.word	0x08010a35
 80109c8:	08010a35 	.word	0x08010a35
 80109cc:	08010a35 	.word	0x08010a35
 80109d0:	08010a35 	.word	0x08010a35
 80109d4:	08010a35 	.word	0x08010a35
 80109d8:	08010a35 	.word	0x08010a35
 80109dc:	08010a35 	.word	0x08010a35
 80109e0:	08010a25 	.word	0x08010a25
 80109e4:	08010a35 	.word	0x08010a35
 80109e8:	08010a35 	.word	0x08010a35
 80109ec:	08010a35 	.word	0x08010a35
 80109f0:	08010a35 	.word	0x08010a35
 80109f4:	08010a35 	.word	0x08010a35
 80109f8:	08010a35 	.word	0x08010a35
 80109fc:	08010a35 	.word	0x08010a35
 8010a00:	08010a2d 	.word	0x08010a2d
 8010a04:	2301      	movs	r3, #1
 8010a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a0a:	e0bc      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010a0c:	2304      	movs	r3, #4
 8010a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a12:	e0b8      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010a14:	2308      	movs	r3, #8
 8010a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1a:	e0b4      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010a1c:	2310      	movs	r3, #16
 8010a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a22:	e0b0      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010a24:	2320      	movs	r3, #32
 8010a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2a:	e0ac      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010a2c:	2340      	movs	r3, #64	; 0x40
 8010a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a32:	e0a8      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010a34:	2380      	movs	r3, #128	; 0x80
 8010a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a3a:	e0a4      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010a3c:	697b      	ldr	r3, [r7, #20]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4a8f      	ldr	r2, [pc, #572]	; (8010c80 <UART_SetConfig+0x6a0>)
 8010a42:	4293      	cmp	r3, r2
 8010a44:	d130      	bne.n	8010aa8 <UART_SetConfig+0x4c8>
 8010a46:	4b8d      	ldr	r3, [pc, #564]	; (8010c7c <UART_SetConfig+0x69c>)
 8010a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a4a:	f003 0307 	and.w	r3, r3, #7
 8010a4e:	2b05      	cmp	r3, #5
 8010a50:	d826      	bhi.n	8010aa0 <UART_SetConfig+0x4c0>
 8010a52:	a201      	add	r2, pc, #4	; (adr r2, 8010a58 <UART_SetConfig+0x478>)
 8010a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a58:	08010a71 	.word	0x08010a71
 8010a5c:	08010a79 	.word	0x08010a79
 8010a60:	08010a81 	.word	0x08010a81
 8010a64:	08010a89 	.word	0x08010a89
 8010a68:	08010a91 	.word	0x08010a91
 8010a6c:	08010a99 	.word	0x08010a99
 8010a70:	2300      	movs	r3, #0
 8010a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a76:	e086      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010a78:	2304      	movs	r3, #4
 8010a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a7e:	e082      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010a80:	2308      	movs	r3, #8
 8010a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a86:	e07e      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010a88:	2310      	movs	r3, #16
 8010a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a8e:	e07a      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010a90:	2320      	movs	r3, #32
 8010a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a96:	e076      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010a98:	2340      	movs	r3, #64	; 0x40
 8010a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a9e:	e072      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010aa0:	2380      	movs	r3, #128	; 0x80
 8010aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aa6:	e06e      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	4a75      	ldr	r2, [pc, #468]	; (8010c84 <UART_SetConfig+0x6a4>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d130      	bne.n	8010b14 <UART_SetConfig+0x534>
 8010ab2:	4b72      	ldr	r3, [pc, #456]	; (8010c7c <UART_SetConfig+0x69c>)
 8010ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ab6:	f003 0307 	and.w	r3, r3, #7
 8010aba:	2b05      	cmp	r3, #5
 8010abc:	d826      	bhi.n	8010b0c <UART_SetConfig+0x52c>
 8010abe:	a201      	add	r2, pc, #4	; (adr r2, 8010ac4 <UART_SetConfig+0x4e4>)
 8010ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac4:	08010add 	.word	0x08010add
 8010ac8:	08010ae5 	.word	0x08010ae5
 8010acc:	08010aed 	.word	0x08010aed
 8010ad0:	08010af5 	.word	0x08010af5
 8010ad4:	08010afd 	.word	0x08010afd
 8010ad8:	08010b05 	.word	0x08010b05
 8010adc:	2300      	movs	r3, #0
 8010ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ae2:	e050      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010ae4:	2304      	movs	r3, #4
 8010ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aea:	e04c      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010aec:	2308      	movs	r3, #8
 8010aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010af2:	e048      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010af4:	2310      	movs	r3, #16
 8010af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010afa:	e044      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010afc:	2320      	movs	r3, #32
 8010afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b02:	e040      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010b04:	2340      	movs	r3, #64	; 0x40
 8010b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b0a:	e03c      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010b0c:	2380      	movs	r3, #128	; 0x80
 8010b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b12:	e038      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	4a5b      	ldr	r2, [pc, #364]	; (8010c88 <UART_SetConfig+0x6a8>)
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d130      	bne.n	8010b80 <UART_SetConfig+0x5a0>
 8010b1e:	4b57      	ldr	r3, [pc, #348]	; (8010c7c <UART_SetConfig+0x69c>)
 8010b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b22:	f003 0307 	and.w	r3, r3, #7
 8010b26:	2b05      	cmp	r3, #5
 8010b28:	d826      	bhi.n	8010b78 <UART_SetConfig+0x598>
 8010b2a:	a201      	add	r2, pc, #4	; (adr r2, 8010b30 <UART_SetConfig+0x550>)
 8010b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b30:	08010b49 	.word	0x08010b49
 8010b34:	08010b51 	.word	0x08010b51
 8010b38:	08010b59 	.word	0x08010b59
 8010b3c:	08010b61 	.word	0x08010b61
 8010b40:	08010b69 	.word	0x08010b69
 8010b44:	08010b71 	.word	0x08010b71
 8010b48:	2302      	movs	r3, #2
 8010b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b4e:	e01a      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010b50:	2304      	movs	r3, #4
 8010b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b56:	e016      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010b58:	2308      	movs	r3, #8
 8010b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b5e:	e012      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010b60:	2310      	movs	r3, #16
 8010b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b66:	e00e      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010b68:	2320      	movs	r3, #32
 8010b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b6e:	e00a      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010b70:	2340      	movs	r3, #64	; 0x40
 8010b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b76:	e006      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010b78:	2380      	movs	r3, #128	; 0x80
 8010b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b7e:	e002      	b.n	8010b86 <UART_SetConfig+0x5a6>
 8010b80:	2380      	movs	r3, #128	; 0x80
 8010b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	4a3f      	ldr	r2, [pc, #252]	; (8010c88 <UART_SetConfig+0x6a8>)
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	f040 80f8 	bne.w	8010d82 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010b92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010b96:	2b20      	cmp	r3, #32
 8010b98:	dc46      	bgt.n	8010c28 <UART_SetConfig+0x648>
 8010b9a:	2b02      	cmp	r3, #2
 8010b9c:	f2c0 8082 	blt.w	8010ca4 <UART_SetConfig+0x6c4>
 8010ba0:	3b02      	subs	r3, #2
 8010ba2:	2b1e      	cmp	r3, #30
 8010ba4:	d87e      	bhi.n	8010ca4 <UART_SetConfig+0x6c4>
 8010ba6:	a201      	add	r2, pc, #4	; (adr r2, 8010bac <UART_SetConfig+0x5cc>)
 8010ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bac:	08010c2f 	.word	0x08010c2f
 8010bb0:	08010ca5 	.word	0x08010ca5
 8010bb4:	08010c37 	.word	0x08010c37
 8010bb8:	08010ca5 	.word	0x08010ca5
 8010bbc:	08010ca5 	.word	0x08010ca5
 8010bc0:	08010ca5 	.word	0x08010ca5
 8010bc4:	08010c47 	.word	0x08010c47
 8010bc8:	08010ca5 	.word	0x08010ca5
 8010bcc:	08010ca5 	.word	0x08010ca5
 8010bd0:	08010ca5 	.word	0x08010ca5
 8010bd4:	08010ca5 	.word	0x08010ca5
 8010bd8:	08010ca5 	.word	0x08010ca5
 8010bdc:	08010ca5 	.word	0x08010ca5
 8010be0:	08010ca5 	.word	0x08010ca5
 8010be4:	08010c57 	.word	0x08010c57
 8010be8:	08010ca5 	.word	0x08010ca5
 8010bec:	08010ca5 	.word	0x08010ca5
 8010bf0:	08010ca5 	.word	0x08010ca5
 8010bf4:	08010ca5 	.word	0x08010ca5
 8010bf8:	08010ca5 	.word	0x08010ca5
 8010bfc:	08010ca5 	.word	0x08010ca5
 8010c00:	08010ca5 	.word	0x08010ca5
 8010c04:	08010ca5 	.word	0x08010ca5
 8010c08:	08010ca5 	.word	0x08010ca5
 8010c0c:	08010ca5 	.word	0x08010ca5
 8010c10:	08010ca5 	.word	0x08010ca5
 8010c14:	08010ca5 	.word	0x08010ca5
 8010c18:	08010ca5 	.word	0x08010ca5
 8010c1c:	08010ca5 	.word	0x08010ca5
 8010c20:	08010ca5 	.word	0x08010ca5
 8010c24:	08010c97 	.word	0x08010c97
 8010c28:	2b40      	cmp	r3, #64	; 0x40
 8010c2a:	d037      	beq.n	8010c9c <UART_SetConfig+0x6bc>
 8010c2c:	e03a      	b.n	8010ca4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010c2e:	f7fb fd57 	bl	800c6e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8010c32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010c34:	e03c      	b.n	8010cb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7fb fd66 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c44:	e034      	b.n	8010cb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c46:	f107 0318 	add.w	r3, r7, #24
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fb feb2 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010c50:	69fb      	ldr	r3, [r7, #28]
 8010c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c54:	e02c      	b.n	8010cb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c56:	4b09      	ldr	r3, [pc, #36]	; (8010c7c <UART_SetConfig+0x69c>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	f003 0320 	and.w	r3, r3, #32
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d016      	beq.n	8010c90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010c62:	4b06      	ldr	r3, [pc, #24]	; (8010c7c <UART_SetConfig+0x69c>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	08db      	lsrs	r3, r3, #3
 8010c68:	f003 0303 	and.w	r3, r3, #3
 8010c6c:	4a07      	ldr	r2, [pc, #28]	; (8010c8c <UART_SetConfig+0x6ac>)
 8010c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8010c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010c74:	e01c      	b.n	8010cb0 <UART_SetConfig+0x6d0>
 8010c76:	bf00      	nop
 8010c78:	40011400 	.word	0x40011400
 8010c7c:	58024400 	.word	0x58024400
 8010c80:	40007800 	.word	0x40007800
 8010c84:	40007c00 	.word	0x40007c00
 8010c88:	58000c00 	.word	0x58000c00
 8010c8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010c90:	4b9d      	ldr	r3, [pc, #628]	; (8010f08 <UART_SetConfig+0x928>)
 8010c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c94:	e00c      	b.n	8010cb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010c96:	4b9d      	ldr	r3, [pc, #628]	; (8010f0c <UART_SetConfig+0x92c>)
 8010c98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c9a:	e009      	b.n	8010cb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ca2:	e005      	b.n	8010cb0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010cae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	f000 81de 	beq.w	8011074 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cbc:	4a94      	ldr	r2, [pc, #592]	; (8010f10 <UART_SetConfig+0x930>)
 8010cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cc2:	461a      	mov	r2, r3
 8010cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	685a      	ldr	r2, [r3, #4]
 8010cd0:	4613      	mov	r3, r2
 8010cd2:	005b      	lsls	r3, r3, #1
 8010cd4:	4413      	add	r3, r2
 8010cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d305      	bcc.n	8010ce8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d903      	bls.n	8010cf0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010ce8:	2301      	movs	r3, #1
 8010cea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010cee:	e1c1      	b.n	8011074 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	60bb      	str	r3, [r7, #8]
 8010cf6:	60fa      	str	r2, [r7, #12]
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cfc:	4a84      	ldr	r2, [pc, #528]	; (8010f10 <UART_SetConfig+0x930>)
 8010cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d02:	b29b      	uxth	r3, r3
 8010d04:	2200      	movs	r2, #0
 8010d06:	603b      	str	r3, [r7, #0]
 8010d08:	607a      	str	r2, [r7, #4]
 8010d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010d12:	f7ef fb35 	bl	8000380 <__aeabi_uldivmod>
 8010d16:	4602      	mov	r2, r0
 8010d18:	460b      	mov	r3, r1
 8010d1a:	4610      	mov	r0, r2
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	f04f 0200 	mov.w	r2, #0
 8010d22:	f04f 0300 	mov.w	r3, #0
 8010d26:	020b      	lsls	r3, r1, #8
 8010d28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010d2c:	0202      	lsls	r2, r0, #8
 8010d2e:	6979      	ldr	r1, [r7, #20]
 8010d30:	6849      	ldr	r1, [r1, #4]
 8010d32:	0849      	lsrs	r1, r1, #1
 8010d34:	2000      	movs	r0, #0
 8010d36:	460c      	mov	r4, r1
 8010d38:	4605      	mov	r5, r0
 8010d3a:	eb12 0804 	adds.w	r8, r2, r4
 8010d3e:	eb43 0905 	adc.w	r9, r3, r5
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	2200      	movs	r2, #0
 8010d48:	469a      	mov	sl, r3
 8010d4a:	4693      	mov	fp, r2
 8010d4c:	4652      	mov	r2, sl
 8010d4e:	465b      	mov	r3, fp
 8010d50:	4640      	mov	r0, r8
 8010d52:	4649      	mov	r1, r9
 8010d54:	f7ef fb14 	bl	8000380 <__aeabi_uldivmod>
 8010d58:	4602      	mov	r2, r0
 8010d5a:	460b      	mov	r3, r1
 8010d5c:	4613      	mov	r3, r2
 8010d5e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010d66:	d308      	bcc.n	8010d7a <UART_SetConfig+0x79a>
 8010d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d6e:	d204      	bcs.n	8010d7a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d76:	60da      	str	r2, [r3, #12]
 8010d78:	e17c      	b.n	8011074 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010d80:	e178      	b.n	8011074 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	69db      	ldr	r3, [r3, #28]
 8010d86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d8a:	f040 80c5 	bne.w	8010f18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010d8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010d92:	2b20      	cmp	r3, #32
 8010d94:	dc48      	bgt.n	8010e28 <UART_SetConfig+0x848>
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	db7b      	blt.n	8010e92 <UART_SetConfig+0x8b2>
 8010d9a:	2b20      	cmp	r3, #32
 8010d9c:	d879      	bhi.n	8010e92 <UART_SetConfig+0x8b2>
 8010d9e:	a201      	add	r2, pc, #4	; (adr r2, 8010da4 <UART_SetConfig+0x7c4>)
 8010da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da4:	08010e2f 	.word	0x08010e2f
 8010da8:	08010e37 	.word	0x08010e37
 8010dac:	08010e93 	.word	0x08010e93
 8010db0:	08010e93 	.word	0x08010e93
 8010db4:	08010e3f 	.word	0x08010e3f
 8010db8:	08010e93 	.word	0x08010e93
 8010dbc:	08010e93 	.word	0x08010e93
 8010dc0:	08010e93 	.word	0x08010e93
 8010dc4:	08010e4f 	.word	0x08010e4f
 8010dc8:	08010e93 	.word	0x08010e93
 8010dcc:	08010e93 	.word	0x08010e93
 8010dd0:	08010e93 	.word	0x08010e93
 8010dd4:	08010e93 	.word	0x08010e93
 8010dd8:	08010e93 	.word	0x08010e93
 8010ddc:	08010e93 	.word	0x08010e93
 8010de0:	08010e93 	.word	0x08010e93
 8010de4:	08010e5f 	.word	0x08010e5f
 8010de8:	08010e93 	.word	0x08010e93
 8010dec:	08010e93 	.word	0x08010e93
 8010df0:	08010e93 	.word	0x08010e93
 8010df4:	08010e93 	.word	0x08010e93
 8010df8:	08010e93 	.word	0x08010e93
 8010dfc:	08010e93 	.word	0x08010e93
 8010e00:	08010e93 	.word	0x08010e93
 8010e04:	08010e93 	.word	0x08010e93
 8010e08:	08010e93 	.word	0x08010e93
 8010e0c:	08010e93 	.word	0x08010e93
 8010e10:	08010e93 	.word	0x08010e93
 8010e14:	08010e93 	.word	0x08010e93
 8010e18:	08010e93 	.word	0x08010e93
 8010e1c:	08010e93 	.word	0x08010e93
 8010e20:	08010e93 	.word	0x08010e93
 8010e24:	08010e85 	.word	0x08010e85
 8010e28:	2b40      	cmp	r3, #64	; 0x40
 8010e2a:	d02e      	beq.n	8010e8a <UART_SetConfig+0x8aa>
 8010e2c:	e031      	b.n	8010e92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010e2e:	f7f9 fc5f 	bl	800a6f0 <HAL_RCC_GetPCLK1Freq>
 8010e32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010e34:	e033      	b.n	8010e9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e36:	f7f9 fc71 	bl	800a71c <HAL_RCC_GetPCLK2Freq>
 8010e3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010e3c:	e02f      	b.n	8010e9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7fb fc62 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e4c:	e027      	b.n	8010e9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e4e:	f107 0318 	add.w	r3, r7, #24
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7fb fdae 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e5c:	e01f      	b.n	8010e9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e5e:	4b2d      	ldr	r3, [pc, #180]	; (8010f14 <UART_SetConfig+0x934>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	f003 0320 	and.w	r3, r3, #32
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d009      	beq.n	8010e7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010e6a:	4b2a      	ldr	r3, [pc, #168]	; (8010f14 <UART_SetConfig+0x934>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	08db      	lsrs	r3, r3, #3
 8010e70:	f003 0303 	and.w	r3, r3, #3
 8010e74:	4a24      	ldr	r2, [pc, #144]	; (8010f08 <UART_SetConfig+0x928>)
 8010e76:	fa22 f303 	lsr.w	r3, r2, r3
 8010e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010e7c:	e00f      	b.n	8010e9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010e7e:	4b22      	ldr	r3, [pc, #136]	; (8010f08 <UART_SetConfig+0x928>)
 8010e80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e82:	e00c      	b.n	8010e9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010e84:	4b21      	ldr	r3, [pc, #132]	; (8010f0c <UART_SetConfig+0x92c>)
 8010e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e88:	e009      	b.n	8010e9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e90:	e005      	b.n	8010e9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010e92:	2300      	movs	r3, #0
 8010e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010e96:	2301      	movs	r3, #1
 8010e98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010e9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	f000 80e7 	beq.w	8011074 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010ea6:	697b      	ldr	r3, [r7, #20]
 8010ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eaa:	4a19      	ldr	r2, [pc, #100]	; (8010f10 <UART_SetConfig+0x930>)
 8010eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010eb8:	005a      	lsls	r2, r3, #1
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	085b      	lsrs	r3, r3, #1
 8010ec0:	441a      	add	r2, r3
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	685b      	ldr	r3, [r3, #4]
 8010ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010eca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ece:	2b0f      	cmp	r3, #15
 8010ed0:	d916      	bls.n	8010f00 <UART_SetConfig+0x920>
 8010ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ed8:	d212      	bcs.n	8010f00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010edc:	b29b      	uxth	r3, r3
 8010ede:	f023 030f 	bic.w	r3, r3, #15
 8010ee2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee6:	085b      	lsrs	r3, r3, #1
 8010ee8:	b29b      	uxth	r3, r3
 8010eea:	f003 0307 	and.w	r3, r3, #7
 8010eee:	b29a      	uxth	r2, r3
 8010ef0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010ef2:	4313      	orrs	r3, r2
 8010ef4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010efc:	60da      	str	r2, [r3, #12]
 8010efe:	e0b9      	b.n	8011074 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010f00:	2301      	movs	r3, #1
 8010f02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010f06:	e0b5      	b.n	8011074 <UART_SetConfig+0xa94>
 8010f08:	03d09000 	.word	0x03d09000
 8010f0c:	003d0900 	.word	0x003d0900
 8010f10:	0801725c 	.word	0x0801725c
 8010f14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8010f18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f1c:	2b20      	cmp	r3, #32
 8010f1e:	dc49      	bgt.n	8010fb4 <UART_SetConfig+0x9d4>
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	db7c      	blt.n	801101e <UART_SetConfig+0xa3e>
 8010f24:	2b20      	cmp	r3, #32
 8010f26:	d87a      	bhi.n	801101e <UART_SetConfig+0xa3e>
 8010f28:	a201      	add	r2, pc, #4	; (adr r2, 8010f30 <UART_SetConfig+0x950>)
 8010f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f2e:	bf00      	nop
 8010f30:	08010fbb 	.word	0x08010fbb
 8010f34:	08010fc3 	.word	0x08010fc3
 8010f38:	0801101f 	.word	0x0801101f
 8010f3c:	0801101f 	.word	0x0801101f
 8010f40:	08010fcb 	.word	0x08010fcb
 8010f44:	0801101f 	.word	0x0801101f
 8010f48:	0801101f 	.word	0x0801101f
 8010f4c:	0801101f 	.word	0x0801101f
 8010f50:	08010fdb 	.word	0x08010fdb
 8010f54:	0801101f 	.word	0x0801101f
 8010f58:	0801101f 	.word	0x0801101f
 8010f5c:	0801101f 	.word	0x0801101f
 8010f60:	0801101f 	.word	0x0801101f
 8010f64:	0801101f 	.word	0x0801101f
 8010f68:	0801101f 	.word	0x0801101f
 8010f6c:	0801101f 	.word	0x0801101f
 8010f70:	08010feb 	.word	0x08010feb
 8010f74:	0801101f 	.word	0x0801101f
 8010f78:	0801101f 	.word	0x0801101f
 8010f7c:	0801101f 	.word	0x0801101f
 8010f80:	0801101f 	.word	0x0801101f
 8010f84:	0801101f 	.word	0x0801101f
 8010f88:	0801101f 	.word	0x0801101f
 8010f8c:	0801101f 	.word	0x0801101f
 8010f90:	0801101f 	.word	0x0801101f
 8010f94:	0801101f 	.word	0x0801101f
 8010f98:	0801101f 	.word	0x0801101f
 8010f9c:	0801101f 	.word	0x0801101f
 8010fa0:	0801101f 	.word	0x0801101f
 8010fa4:	0801101f 	.word	0x0801101f
 8010fa8:	0801101f 	.word	0x0801101f
 8010fac:	0801101f 	.word	0x0801101f
 8010fb0:	08011011 	.word	0x08011011
 8010fb4:	2b40      	cmp	r3, #64	; 0x40
 8010fb6:	d02e      	beq.n	8011016 <UART_SetConfig+0xa36>
 8010fb8:	e031      	b.n	801101e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010fba:	f7f9 fb99 	bl	800a6f0 <HAL_RCC_GetPCLK1Freq>
 8010fbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010fc0:	e033      	b.n	801102a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010fc2:	f7f9 fbab 	bl	800a71c <HAL_RCC_GetPCLK2Freq>
 8010fc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010fc8:	e02f      	b.n	801102a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fb fb9c 	bl	800c70c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fd8:	e027      	b.n	801102a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010fda:	f107 0318 	add.w	r3, r7, #24
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7fb fce8 	bl	800c9b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fe8:	e01f      	b.n	801102a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fea:	4b2d      	ldr	r3, [pc, #180]	; (80110a0 <UART_SetConfig+0xac0>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	f003 0320 	and.w	r3, r3, #32
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d009      	beq.n	801100a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010ff6:	4b2a      	ldr	r3, [pc, #168]	; (80110a0 <UART_SetConfig+0xac0>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	08db      	lsrs	r3, r3, #3
 8010ffc:	f003 0303 	and.w	r3, r3, #3
 8011000:	4a28      	ldr	r2, [pc, #160]	; (80110a4 <UART_SetConfig+0xac4>)
 8011002:	fa22 f303 	lsr.w	r3, r2, r3
 8011006:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011008:	e00f      	b.n	801102a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801100a:	4b26      	ldr	r3, [pc, #152]	; (80110a4 <UART_SetConfig+0xac4>)
 801100c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801100e:	e00c      	b.n	801102a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011010:	4b25      	ldr	r3, [pc, #148]	; (80110a8 <UART_SetConfig+0xac8>)
 8011012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011014:	e009      	b.n	801102a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801101a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801101c:	e005      	b.n	801102a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801101e:	2300      	movs	r3, #0
 8011020:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011022:	2301      	movs	r3, #1
 8011024:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011028:	bf00      	nop
    }

    if (pclk != 0U)
 801102a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801102c:	2b00      	cmp	r3, #0
 801102e:	d021      	beq.n	8011074 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011034:	4a1d      	ldr	r2, [pc, #116]	; (80110ac <UART_SetConfig+0xacc>)
 8011036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801103a:	461a      	mov	r2, r3
 801103c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801103e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	085b      	lsrs	r3, r3, #1
 8011048:	441a      	add	r2, r3
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011052:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011056:	2b0f      	cmp	r3, #15
 8011058:	d909      	bls.n	801106e <UART_SetConfig+0xa8e>
 801105a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011060:	d205      	bcs.n	801106e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011064:	b29a      	uxth	r2, r3
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	60da      	str	r2, [r3, #12]
 801106c:	e002      	b.n	8011074 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801106e:	2301      	movs	r3, #1
 8011070:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011074:	697b      	ldr	r3, [r7, #20]
 8011076:	2201      	movs	r2, #1
 8011078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	2201      	movs	r2, #1
 8011080:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	2200      	movs	r2, #0
 8011088:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801108a:	697b      	ldr	r3, [r7, #20]
 801108c:	2200      	movs	r2, #0
 801108e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011090:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011094:	4618      	mov	r0, r3
 8011096:	3748      	adds	r7, #72	; 0x48
 8011098:	46bd      	mov	sp, r7
 801109a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801109e:	bf00      	nop
 80110a0:	58024400 	.word	0x58024400
 80110a4:	03d09000 	.word	0x03d09000
 80110a8:	003d0900 	.word	0x003d0900
 80110ac:	0801725c 	.word	0x0801725c

080110b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80110b0:	b480      	push	{r7}
 80110b2:	b083      	sub	sp, #12
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110bc:	f003 0308 	and.w	r3, r3, #8
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d00a      	beq.n	80110da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	685b      	ldr	r3, [r3, #4]
 80110ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	430a      	orrs	r2, r1
 80110d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110de:	f003 0301 	and.w	r3, r3, #1
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d00a      	beq.n	80110fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	430a      	orrs	r2, r1
 80110fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011100:	f003 0302 	and.w	r3, r3, #2
 8011104:	2b00      	cmp	r3, #0
 8011106:	d00a      	beq.n	801111e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	685b      	ldr	r3, [r3, #4]
 801110e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	430a      	orrs	r2, r1
 801111c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011122:	f003 0304 	and.w	r3, r3, #4
 8011126:	2b00      	cmp	r3, #0
 8011128:	d00a      	beq.n	8011140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	430a      	orrs	r2, r1
 801113e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011144:	f003 0310 	and.w	r3, r3, #16
 8011148:	2b00      	cmp	r3, #0
 801114a:	d00a      	beq.n	8011162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	689b      	ldr	r3, [r3, #8]
 8011152:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	430a      	orrs	r2, r1
 8011160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011166:	f003 0320 	and.w	r3, r3, #32
 801116a:	2b00      	cmp	r3, #0
 801116c:	d00a      	beq.n	8011184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	689b      	ldr	r3, [r3, #8]
 8011174:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	430a      	orrs	r2, r1
 8011182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801118c:	2b00      	cmp	r3, #0
 801118e:	d01a      	beq.n	80111c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	430a      	orrs	r2, r1
 80111a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80111ae:	d10a      	bne.n	80111c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	685b      	ldr	r3, [r3, #4]
 80111b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	430a      	orrs	r2, r1
 80111c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d00a      	beq.n	80111e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	685b      	ldr	r3, [r3, #4]
 80111d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	430a      	orrs	r2, r1
 80111e6:	605a      	str	r2, [r3, #4]
  }
}
 80111e8:	bf00      	nop
 80111ea:	370c      	adds	r7, #12
 80111ec:	46bd      	mov	sp, r7
 80111ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f2:	4770      	bx	lr

080111f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b098      	sub	sp, #96	; 0x60
 80111f8:	af02      	add	r7, sp, #8
 80111fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2200      	movs	r2, #0
 8011200:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011204:	f7f2 fb52 	bl	80038ac <HAL_GetTick>
 8011208:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f003 0308 	and.w	r3, r3, #8
 8011214:	2b08      	cmp	r3, #8
 8011216:	d12f      	bne.n	8011278 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011220:	2200      	movs	r2, #0
 8011222:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f000 f88e 	bl	8011348 <UART_WaitOnFlagUntilTimeout>
 801122c:	4603      	mov	r3, r0
 801122e:	2b00      	cmp	r3, #0
 8011230:	d022      	beq.n	8011278 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123a:	e853 3f00 	ldrex	r3, [r3]
 801123e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011246:	653b      	str	r3, [r7, #80]	; 0x50
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	461a      	mov	r2, r3
 801124e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011250:	647b      	str	r3, [r7, #68]	; 0x44
 8011252:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011254:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011256:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011258:	e841 2300 	strex	r3, r2, [r1]
 801125c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801125e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011260:	2b00      	cmp	r3, #0
 8011262:	d1e6      	bne.n	8011232 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2220      	movs	r2, #32
 8011268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2200      	movs	r2, #0
 8011270:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011274:	2303      	movs	r3, #3
 8011276:	e063      	b.n	8011340 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	f003 0304 	and.w	r3, r3, #4
 8011282:	2b04      	cmp	r3, #4
 8011284:	d149      	bne.n	801131a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011286:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801128a:	9300      	str	r3, [sp, #0]
 801128c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801128e:	2200      	movs	r2, #0
 8011290:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f000 f857 	bl	8011348 <UART_WaitOnFlagUntilTimeout>
 801129a:	4603      	mov	r3, r0
 801129c:	2b00      	cmp	r3, #0
 801129e:	d03c      	beq.n	801131a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a8:	e853 3f00 	ldrex	r3, [r3]
 80112ac:	623b      	str	r3, [r7, #32]
   return(result);
 80112ae:	6a3b      	ldr	r3, [r7, #32]
 80112b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80112b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	461a      	mov	r2, r3
 80112bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112be:	633b      	str	r3, [r7, #48]	; 0x30
 80112c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112c6:	e841 2300 	strex	r3, r2, [r1]
 80112ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80112cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d1e6      	bne.n	80112a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	3308      	adds	r3, #8
 80112d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	e853 3f00 	ldrex	r3, [r3]
 80112e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	f023 0301 	bic.w	r3, r3, #1
 80112e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	3308      	adds	r3, #8
 80112f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80112f2:	61fa      	str	r2, [r7, #28]
 80112f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112f6:	69b9      	ldr	r1, [r7, #24]
 80112f8:	69fa      	ldr	r2, [r7, #28]
 80112fa:	e841 2300 	strex	r3, r2, [r1]
 80112fe:	617b      	str	r3, [r7, #20]
   return(result);
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d1e5      	bne.n	80112d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2220      	movs	r2, #32
 801130a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2200      	movs	r2, #0
 8011312:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011316:	2303      	movs	r3, #3
 8011318:	e012      	b.n	8011340 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2220      	movs	r2, #32
 801131e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2220      	movs	r2, #32
 8011326:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2200      	movs	r2, #0
 801132e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2200      	movs	r2, #0
 8011334:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2200      	movs	r2, #0
 801133a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801133e:	2300      	movs	r3, #0
}
 8011340:	4618      	mov	r0, r3
 8011342:	3758      	adds	r7, #88	; 0x58
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}

08011348 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af00      	add	r7, sp, #0
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	603b      	str	r3, [r7, #0]
 8011354:	4613      	mov	r3, r2
 8011356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011358:	e04f      	b.n	80113fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801135a:	69bb      	ldr	r3, [r7, #24]
 801135c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011360:	d04b      	beq.n	80113fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011362:	f7f2 faa3 	bl	80038ac <HAL_GetTick>
 8011366:	4602      	mov	r2, r0
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	1ad3      	subs	r3, r2, r3
 801136c:	69ba      	ldr	r2, [r7, #24]
 801136e:	429a      	cmp	r2, r3
 8011370:	d302      	bcc.n	8011378 <UART_WaitOnFlagUntilTimeout+0x30>
 8011372:	69bb      	ldr	r3, [r7, #24]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d101      	bne.n	801137c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011378:	2303      	movs	r3, #3
 801137a:	e04e      	b.n	801141a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f003 0304 	and.w	r3, r3, #4
 8011386:	2b00      	cmp	r3, #0
 8011388:	d037      	beq.n	80113fa <UART_WaitOnFlagUntilTimeout+0xb2>
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	2b80      	cmp	r3, #128	; 0x80
 801138e:	d034      	beq.n	80113fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	2b40      	cmp	r3, #64	; 0x40
 8011394:	d031      	beq.n	80113fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	69db      	ldr	r3, [r3, #28]
 801139c:	f003 0308 	and.w	r3, r3, #8
 80113a0:	2b08      	cmp	r3, #8
 80113a2:	d110      	bne.n	80113c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2208      	movs	r2, #8
 80113aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80113ac:	68f8      	ldr	r0, [r7, #12]
 80113ae:	f000 f95b 	bl	8011668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	2208      	movs	r2, #8
 80113b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2200      	movs	r2, #0
 80113be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80113c2:	2301      	movs	r3, #1
 80113c4:	e029      	b.n	801141a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	69db      	ldr	r3, [r3, #28]
 80113cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80113d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80113d4:	d111      	bne.n	80113fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80113de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	f000 f941 	bl	8011668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	2220      	movs	r2, #32
 80113ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2200      	movs	r2, #0
 80113f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80113f6:	2303      	movs	r3, #3
 80113f8:	e00f      	b.n	801141a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	69da      	ldr	r2, [r3, #28]
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	4013      	ands	r3, r2
 8011404:	68ba      	ldr	r2, [r7, #8]
 8011406:	429a      	cmp	r2, r3
 8011408:	bf0c      	ite	eq
 801140a:	2301      	moveq	r3, #1
 801140c:	2300      	movne	r3, #0
 801140e:	b2db      	uxtb	r3, r3
 8011410:	461a      	mov	r2, r3
 8011412:	79fb      	ldrb	r3, [r7, #7]
 8011414:	429a      	cmp	r2, r3
 8011416:	d0a0      	beq.n	801135a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011418:	2300      	movs	r3, #0
}
 801141a:	4618      	mov	r0, r3
 801141c:	3710      	adds	r7, #16
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
	...

08011424 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011424:	b480      	push	{r7}
 8011426:	b0a3      	sub	sp, #140	; 0x8c
 8011428:	af00      	add	r7, sp, #0
 801142a:	60f8      	str	r0, [r7, #12]
 801142c:	60b9      	str	r1, [r7, #8]
 801142e:	4613      	mov	r3, r2
 8011430:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	68ba      	ldr	r2, [r7, #8]
 8011436:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	88fa      	ldrh	r2, [r7, #6]
 801143c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	88fa      	ldrh	r2, [r7, #6]
 8011444:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2200      	movs	r2, #0
 801144c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	689b      	ldr	r3, [r3, #8]
 8011452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011456:	d10e      	bne.n	8011476 <UART_Start_Receive_IT+0x52>
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	691b      	ldr	r3, [r3, #16]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d105      	bne.n	801146c <UART_Start_Receive_IT+0x48>
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011466:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801146a:	e02d      	b.n	80114c8 <UART_Start_Receive_IT+0xa4>
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	22ff      	movs	r2, #255	; 0xff
 8011470:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011474:	e028      	b.n	80114c8 <UART_Start_Receive_IT+0xa4>
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	689b      	ldr	r3, [r3, #8]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d10d      	bne.n	801149a <UART_Start_Receive_IT+0x76>
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	691b      	ldr	r3, [r3, #16]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d104      	bne.n	8011490 <UART_Start_Receive_IT+0x6c>
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	22ff      	movs	r2, #255	; 0xff
 801148a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801148e:	e01b      	b.n	80114c8 <UART_Start_Receive_IT+0xa4>
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	227f      	movs	r2, #127	; 0x7f
 8011494:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011498:	e016      	b.n	80114c8 <UART_Start_Receive_IT+0xa4>
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	689b      	ldr	r3, [r3, #8]
 801149e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80114a2:	d10d      	bne.n	80114c0 <UART_Start_Receive_IT+0x9c>
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	691b      	ldr	r3, [r3, #16]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d104      	bne.n	80114b6 <UART_Start_Receive_IT+0x92>
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	227f      	movs	r2, #127	; 0x7f
 80114b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80114b4:	e008      	b.n	80114c8 <UART_Start_Receive_IT+0xa4>
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	223f      	movs	r2, #63	; 0x3f
 80114ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80114be:	e003      	b.n	80114c8 <UART_Start_Receive_IT+0xa4>
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	2200      	movs	r2, #0
 80114c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	2200      	movs	r2, #0
 80114cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	2222      	movs	r2, #34	; 0x22
 80114d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	3308      	adds	r3, #8
 80114de:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114e2:	e853 3f00 	ldrex	r3, [r3]
 80114e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80114e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80114ea:	f043 0301 	orr.w	r3, r3, #1
 80114ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	3308      	adds	r3, #8
 80114f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80114fc:	673a      	str	r2, [r7, #112]	; 0x70
 80114fe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011500:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011502:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011504:	e841 2300 	strex	r3, r2, [r1]
 8011508:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801150a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801150c:	2b00      	cmp	r3, #0
 801150e:	d1e3      	bne.n	80114d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011518:	d14f      	bne.n	80115ba <UART_Start_Receive_IT+0x196>
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011520:	88fa      	ldrh	r2, [r7, #6]
 8011522:	429a      	cmp	r2, r3
 8011524:	d349      	bcc.n	80115ba <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	689b      	ldr	r3, [r3, #8]
 801152a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801152e:	d107      	bne.n	8011540 <UART_Start_Receive_IT+0x11c>
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	691b      	ldr	r3, [r3, #16]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d103      	bne.n	8011540 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	4a47      	ldr	r2, [pc, #284]	; (8011658 <UART_Start_Receive_IT+0x234>)
 801153c:	675a      	str	r2, [r3, #116]	; 0x74
 801153e:	e002      	b.n	8011546 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	4a46      	ldr	r2, [pc, #280]	; (801165c <UART_Start_Receive_IT+0x238>)
 8011544:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	691b      	ldr	r3, [r3, #16]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d01a      	beq.n	8011584 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011556:	e853 3f00 	ldrex	r3, [r3]
 801155a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801155c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801155e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	461a      	mov	r2, r3
 801156c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011572:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011574:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011576:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011578:	e841 2300 	strex	r3, r2, [r1]
 801157c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801157e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011580:	2b00      	cmp	r3, #0
 8011582:	d1e4      	bne.n	801154e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	3308      	adds	r3, #8
 801158a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801158c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801158e:	e853 3f00 	ldrex	r3, [r3]
 8011592:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801159a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	3308      	adds	r3, #8
 80115a2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80115a4:	64ba      	str	r2, [r7, #72]	; 0x48
 80115a6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80115aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115ac:	e841 2300 	strex	r3, r2, [r1]
 80115b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80115b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d1e5      	bne.n	8011584 <UART_Start_Receive_IT+0x160>
 80115b8:	e046      	b.n	8011648 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	689b      	ldr	r3, [r3, #8]
 80115be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115c2:	d107      	bne.n	80115d4 <UART_Start_Receive_IT+0x1b0>
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	691b      	ldr	r3, [r3, #16]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d103      	bne.n	80115d4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	4a24      	ldr	r2, [pc, #144]	; (8011660 <UART_Start_Receive_IT+0x23c>)
 80115d0:	675a      	str	r2, [r3, #116]	; 0x74
 80115d2:	e002      	b.n	80115da <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	4a23      	ldr	r2, [pc, #140]	; (8011664 <UART_Start_Receive_IT+0x240>)
 80115d8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	691b      	ldr	r3, [r3, #16]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d019      	beq.n	8011616 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ea:	e853 3f00 	ldrex	r3, [r3]
 80115ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80115f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80115f6:	677b      	str	r3, [r7, #116]	; 0x74
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	461a      	mov	r2, r3
 80115fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011600:	637b      	str	r3, [r7, #52]	; 0x34
 8011602:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011608:	e841 2300 	strex	r3, r2, [r1]
 801160c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011610:	2b00      	cmp	r3, #0
 8011612:	d1e6      	bne.n	80115e2 <UART_Start_Receive_IT+0x1be>
 8011614:	e018      	b.n	8011648 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	e853 3f00 	ldrex	r3, [r3]
 8011622:	613b      	str	r3, [r7, #16]
   return(result);
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	f043 0320 	orr.w	r3, r3, #32
 801162a:	67bb      	str	r3, [r7, #120]	; 0x78
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	461a      	mov	r2, r3
 8011632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011634:	623b      	str	r3, [r7, #32]
 8011636:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011638:	69f9      	ldr	r1, [r7, #28]
 801163a:	6a3a      	ldr	r2, [r7, #32]
 801163c:	e841 2300 	strex	r3, r2, [r1]
 8011640:	61bb      	str	r3, [r7, #24]
   return(result);
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d1e6      	bne.n	8011616 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011648:	2300      	movs	r3, #0
}
 801164a:	4618      	mov	r0, r3
 801164c:	378c      	adds	r7, #140	; 0x8c
 801164e:	46bd      	mov	sp, r7
 8011650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011654:	4770      	bx	lr
 8011656:	bf00      	nop
 8011658:	08011e89 	.word	0x08011e89
 801165c:	08011b29 	.word	0x08011b29
 8011660:	08011971 	.word	0x08011971
 8011664:	080117b9 	.word	0x080117b9

08011668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011668:	b480      	push	{r7}
 801166a:	b095      	sub	sp, #84	; 0x54
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011678:	e853 3f00 	ldrex	r3, [r3]
 801167c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801167e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011684:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	461a      	mov	r2, r3
 801168c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801168e:	643b      	str	r3, [r7, #64]	; 0x40
 8011690:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011692:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011696:	e841 2300 	strex	r3, r2, [r1]
 801169a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801169c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d1e6      	bne.n	8011670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	3308      	adds	r3, #8
 80116a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116aa:	6a3b      	ldr	r3, [r7, #32]
 80116ac:	e853 3f00 	ldrex	r3, [r3]
 80116b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80116b2:	69fa      	ldr	r2, [r7, #28]
 80116b4:	4b1e      	ldr	r3, [pc, #120]	; (8011730 <UART_EndRxTransfer+0xc8>)
 80116b6:	4013      	ands	r3, r2
 80116b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	3308      	adds	r3, #8
 80116c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80116c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80116c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116ca:	e841 2300 	strex	r3, r2, [r1]
 80116ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80116d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d1e5      	bne.n	80116a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116da:	2b01      	cmp	r3, #1
 80116dc:	d118      	bne.n	8011710 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	e853 3f00 	ldrex	r3, [r3]
 80116ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	f023 0310 	bic.w	r3, r3, #16
 80116f2:	647b      	str	r3, [r7, #68]	; 0x44
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	461a      	mov	r2, r3
 80116fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116fc:	61bb      	str	r3, [r7, #24]
 80116fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011700:	6979      	ldr	r1, [r7, #20]
 8011702:	69ba      	ldr	r2, [r7, #24]
 8011704:	e841 2300 	strex	r3, r2, [r1]
 8011708:	613b      	str	r3, [r7, #16]
   return(result);
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d1e6      	bne.n	80116de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2220      	movs	r2, #32
 8011714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2200      	movs	r2, #0
 801171c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2200      	movs	r2, #0
 8011722:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011724:	bf00      	nop
 8011726:	3754      	adds	r7, #84	; 0x54
 8011728:	46bd      	mov	sp, r7
 801172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172e:	4770      	bx	lr
 8011730:	effffffe 	.word	0xeffffffe

08011734 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b084      	sub	sp, #16
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011740:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2200      	movs	r2, #0
 8011746:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2200      	movs	r2, #0
 801174e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011752:	68f8      	ldr	r0, [r7, #12]
 8011754:	f7fe ff2e 	bl	80105b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011758:	bf00      	nop
 801175a:	3710      	adds	r7, #16
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}

08011760 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b088      	sub	sp, #32
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	e853 3f00 	ldrex	r3, [r3]
 8011774:	60bb      	str	r3, [r7, #8]
   return(result);
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801177c:	61fb      	str	r3, [r7, #28]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	461a      	mov	r2, r3
 8011784:	69fb      	ldr	r3, [r7, #28]
 8011786:	61bb      	str	r3, [r7, #24]
 8011788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801178a:	6979      	ldr	r1, [r7, #20]
 801178c:	69ba      	ldr	r2, [r7, #24]
 801178e:	e841 2300 	strex	r3, r2, [r1]
 8011792:	613b      	str	r3, [r7, #16]
   return(result);
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d1e6      	bne.n	8011768 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2220      	movs	r2, #32
 801179e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2200      	movs	r2, #0
 80117a6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80117a8:	6878      	ldr	r0, [r7, #4]
 80117aa:	f7fe fef9 	bl	80105a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117ae:	bf00      	nop
 80117b0:	3720      	adds	r7, #32
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}
	...

080117b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b09c      	sub	sp, #112	; 0x70
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80117c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80117d0:	2b22      	cmp	r3, #34	; 0x22
 80117d2:	f040 80be 	bne.w	8011952 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117dc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80117e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80117e4:	b2d9      	uxtb	r1, r3
 80117e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80117ea:	b2da      	uxtb	r2, r3
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117f0:	400a      	ands	r2, r1
 80117f2:	b2d2      	uxtb	r2, r2
 80117f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117fa:	1c5a      	adds	r2, r3, #1
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011806:	b29b      	uxth	r3, r3
 8011808:	3b01      	subs	r3, #1
 801180a:	b29a      	uxth	r2, r3
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011818:	b29b      	uxth	r3, r3
 801181a:	2b00      	cmp	r3, #0
 801181c:	f040 80a1 	bne.w	8011962 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011828:	e853 3f00 	ldrex	r3, [r3]
 801182c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801182e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011834:	66bb      	str	r3, [r7, #104]	; 0x68
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	461a      	mov	r2, r3
 801183c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801183e:	65bb      	str	r3, [r7, #88]	; 0x58
 8011840:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011842:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011846:	e841 2300 	strex	r3, r2, [r1]
 801184a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801184c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801184e:	2b00      	cmp	r3, #0
 8011850:	d1e6      	bne.n	8011820 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	3308      	adds	r3, #8
 8011858:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801185a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801185c:	e853 3f00 	ldrex	r3, [r3]
 8011860:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011864:	f023 0301 	bic.w	r3, r3, #1
 8011868:	667b      	str	r3, [r7, #100]	; 0x64
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	3308      	adds	r3, #8
 8011870:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011872:	647a      	str	r2, [r7, #68]	; 0x44
 8011874:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011876:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801187a:	e841 2300 	strex	r3, r2, [r1]
 801187e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011882:	2b00      	cmp	r3, #0
 8011884:	d1e5      	bne.n	8011852 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2220      	movs	r2, #32
 801188a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2200      	movs	r2, #0
 8011892:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2200      	movs	r2, #0
 8011898:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	4a33      	ldr	r2, [pc, #204]	; (801196c <UART_RxISR_8BIT+0x1b4>)
 80118a0:	4293      	cmp	r3, r2
 80118a2:	d01f      	beq.n	80118e4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d018      	beq.n	80118e4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ba:	e853 3f00 	ldrex	r3, [r3]
 80118be:	623b      	str	r3, [r7, #32]
   return(result);
 80118c0:	6a3b      	ldr	r3, [r7, #32]
 80118c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80118c6:	663b      	str	r3, [r7, #96]	; 0x60
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	461a      	mov	r2, r3
 80118ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118d0:	633b      	str	r3, [r7, #48]	; 0x30
 80118d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80118d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80118d8:	e841 2300 	strex	r3, r2, [r1]
 80118dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80118de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d1e6      	bne.n	80118b2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118e8:	2b01      	cmp	r3, #1
 80118ea:	d12e      	bne.n	801194a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2200      	movs	r2, #0
 80118f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118f8:	693b      	ldr	r3, [r7, #16]
 80118fa:	e853 3f00 	ldrex	r3, [r3]
 80118fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	f023 0310 	bic.w	r3, r3, #16
 8011906:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	461a      	mov	r2, r3
 801190e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011910:	61fb      	str	r3, [r7, #28]
 8011912:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011914:	69b9      	ldr	r1, [r7, #24]
 8011916:	69fa      	ldr	r2, [r7, #28]
 8011918:	e841 2300 	strex	r3, r2, [r1]
 801191c:	617b      	str	r3, [r7, #20]
   return(result);
 801191e:	697b      	ldr	r3, [r7, #20]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d1e6      	bne.n	80118f2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	69db      	ldr	r3, [r3, #28]
 801192a:	f003 0310 	and.w	r3, r3, #16
 801192e:	2b10      	cmp	r3, #16
 8011930:	d103      	bne.n	801193a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	2210      	movs	r2, #16
 8011938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011940:	4619      	mov	r1, r3
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7fe fe40 	bl	80105c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011948:	e00b      	b.n	8011962 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801194a:	6878      	ldr	r0, [r7, #4]
 801194c:	f7ee fed0 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 8011950:	e007      	b.n	8011962 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	699a      	ldr	r2, [r3, #24]
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	f042 0208 	orr.w	r2, r2, #8
 8011960:	619a      	str	r2, [r3, #24]
}
 8011962:	bf00      	nop
 8011964:	3770      	adds	r7, #112	; 0x70
 8011966:	46bd      	mov	sp, r7
 8011968:	bd80      	pop	{r7, pc}
 801196a:	bf00      	nop
 801196c:	58000c00 	.word	0x58000c00

08011970 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b09c      	sub	sp, #112	; 0x70
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801197e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011988:	2b22      	cmp	r3, #34	; 0x22
 801198a:	f040 80be 	bne.w	8011b0a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011994:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801199c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801199e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80119a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80119a6:	4013      	ands	r3, r2
 80119a8:	b29a      	uxth	r2, r3
 80119aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80119ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119b2:	1c9a      	adds	r2, r3, #2
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80119be:	b29b      	uxth	r3, r3
 80119c0:	3b01      	subs	r3, #1
 80119c2:	b29a      	uxth	r2, r3
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	f040 80a1 	bne.w	8011b1a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119e0:	e853 3f00 	ldrex	r3, [r3]
 80119e4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80119e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80119ec:	667b      	str	r3, [r7, #100]	; 0x64
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	461a      	mov	r2, r3
 80119f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119f6:	657b      	str	r3, [r7, #84]	; 0x54
 80119f8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80119fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80119fe:	e841 2300 	strex	r3, r2, [r1]
 8011a02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d1e6      	bne.n	80119d8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	3308      	adds	r3, #8
 8011a10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a14:	e853 3f00 	ldrex	r3, [r3]
 8011a18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a1c:	f023 0301 	bic.w	r3, r3, #1
 8011a20:	663b      	str	r3, [r7, #96]	; 0x60
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	3308      	adds	r3, #8
 8011a28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a2a:	643a      	str	r2, [r7, #64]	; 0x40
 8011a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011a30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a32:	e841 2300 	strex	r3, r2, [r1]
 8011a36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d1e5      	bne.n	8011a0a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2220      	movs	r2, #32
 8011a42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2200      	movs	r2, #0
 8011a4a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	4a33      	ldr	r2, [pc, #204]	; (8011b24 <UART_RxISR_16BIT+0x1b4>)
 8011a58:	4293      	cmp	r3, r2
 8011a5a:	d01f      	beq.n	8011a9c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	685b      	ldr	r3, [r3, #4]
 8011a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d018      	beq.n	8011a9c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a70:	6a3b      	ldr	r3, [r7, #32]
 8011a72:	e853 3f00 	ldrex	r3, [r3]
 8011a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	461a      	mov	r2, r3
 8011a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a8a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a90:	e841 2300 	strex	r3, r2, [r1]
 8011a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d1e6      	bne.n	8011a6a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aa0:	2b01      	cmp	r3, #1
 8011aa2:	d12e      	bne.n	8011b02 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	e853 3f00 	ldrex	r3, [r3]
 8011ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	f023 0310 	bic.w	r3, r3, #16
 8011abe:	65bb      	str	r3, [r7, #88]	; 0x58
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ac8:	61bb      	str	r3, [r7, #24]
 8011aca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011acc:	6979      	ldr	r1, [r7, #20]
 8011ace:	69ba      	ldr	r2, [r7, #24]
 8011ad0:	e841 2300 	strex	r3, r2, [r1]
 8011ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d1e6      	bne.n	8011aaa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	69db      	ldr	r3, [r3, #28]
 8011ae2:	f003 0310 	and.w	r3, r3, #16
 8011ae6:	2b10      	cmp	r3, #16
 8011ae8:	d103      	bne.n	8011af2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	2210      	movs	r2, #16
 8011af0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011af8:	4619      	mov	r1, r3
 8011afa:	6878      	ldr	r0, [r7, #4]
 8011afc:	f7fe fd64 	bl	80105c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011b00:	e00b      	b.n	8011b1a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011b02:	6878      	ldr	r0, [r7, #4]
 8011b04:	f7ee fdf4 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 8011b08:	e007      	b.n	8011b1a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	699a      	ldr	r2, [r3, #24]
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	f042 0208 	orr.w	r2, r2, #8
 8011b18:	619a      	str	r2, [r3, #24]
}
 8011b1a:	bf00      	nop
 8011b1c:	3770      	adds	r7, #112	; 0x70
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}
 8011b22:	bf00      	nop
 8011b24:	58000c00 	.word	0x58000c00

08011b28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b0ac      	sub	sp, #176	; 0xb0
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b36:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	69db      	ldr	r3, [r3, #28]
 8011b40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	689b      	ldr	r3, [r3, #8]
 8011b54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b5e:	2b22      	cmp	r3, #34	; 0x22
 8011b60:	f040 8180 	bne.w	8011e64 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011b6a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011b6e:	e123      	b.n	8011db8 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b76:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011b7a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011b7e:	b2d9      	uxtb	r1, r3
 8011b80:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011b84:	b2da      	uxtb	r2, r3
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b8a:	400a      	ands	r2, r1
 8011b8c:	b2d2      	uxtb	r2, r2
 8011b8e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b94:	1c5a      	adds	r2, r3, #1
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ba0:	b29b      	uxth	r3, r3
 8011ba2:	3b01      	subs	r3, #1
 8011ba4:	b29a      	uxth	r2, r3
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	69db      	ldr	r3, [r3, #28]
 8011bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011bba:	f003 0307 	and.w	r3, r3, #7
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d053      	beq.n	8011c6a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011bc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011bc6:	f003 0301 	and.w	r3, r3, #1
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d011      	beq.n	8011bf2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8011bce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d00b      	beq.n	8011bf2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	2201      	movs	r2, #1
 8011be0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011be8:	f043 0201 	orr.w	r2, r3, #1
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011bf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011bf6:	f003 0302 	and.w	r3, r3, #2
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d011      	beq.n	8011c22 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011c02:	f003 0301 	and.w	r3, r3, #1
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d00b      	beq.n	8011c22 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	2202      	movs	r2, #2
 8011c10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c18:	f043 0204 	orr.w	r2, r3, #4
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011c26:	f003 0304 	and.w	r3, r3, #4
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d011      	beq.n	8011c52 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011c32:	f003 0301 	and.w	r3, r3, #1
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d00b      	beq.n	8011c52 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	2204      	movs	r2, #4
 8011c40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c48:	f043 0202 	orr.w	r2, r3, #2
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d006      	beq.n	8011c6a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011c5c:	6878      	ldr	r0, [r7, #4]
 8011c5e:	f7fe fca9 	bl	80105b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2200      	movs	r2, #0
 8011c66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	f040 80a0 	bne.w	8011db8 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c80:	e853 3f00 	ldrex	r3, [r3]
 8011c84:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	461a      	mov	r2, r3
 8011c96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011c9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011c9c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c9e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011ca0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011ca2:	e841 2300 	strex	r3, r2, [r1]
 8011ca6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d1e4      	bne.n	8011c78 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	3308      	adds	r3, #8
 8011cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cb8:	e853 3f00 	ldrex	r3, [r3]
 8011cbc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011cbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011cc0:	4b6e      	ldr	r3, [pc, #440]	; (8011e7c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011cc2:	4013      	ands	r3, r2
 8011cc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	3308      	adds	r3, #8
 8011cce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011cd2:	66ba      	str	r2, [r7, #104]	; 0x68
 8011cd4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cd6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011cd8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011cda:	e841 2300 	strex	r3, r2, [r1]
 8011cde:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011ce0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d1e3      	bne.n	8011cae <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2220      	movs	r2, #32
 8011cea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	4a60      	ldr	r2, [pc, #384]	; (8011e80 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011d00:	4293      	cmp	r3, r2
 8011d02:	d021      	beq.n	8011d48 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d01a      	beq.n	8011d48 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d1a:	e853 3f00 	ldrex	r3, [r3]
 8011d1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011d26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	461a      	mov	r2, r3
 8011d30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011d34:	657b      	str	r3, [r7, #84]	; 0x54
 8011d36:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011d3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011d3c:	e841 2300 	strex	r3, r2, [r1]
 8011d40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d1e4      	bne.n	8011d12 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d4c:	2b01      	cmp	r3, #1
 8011d4e:	d130      	bne.n	8011db2 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2200      	movs	r2, #0
 8011d54:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d5e:	e853 3f00 	ldrex	r3, [r3]
 8011d62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d66:	f023 0310 	bic.w	r3, r3, #16
 8011d6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	461a      	mov	r2, r3
 8011d74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011d78:	643b      	str	r3, [r7, #64]	; 0x40
 8011d7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d80:	e841 2300 	strex	r3, r2, [r1]
 8011d84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d1e4      	bne.n	8011d56 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	69db      	ldr	r3, [r3, #28]
 8011d92:	f003 0310 	and.w	r3, r3, #16
 8011d96:	2b10      	cmp	r3, #16
 8011d98:	d103      	bne.n	8011da2 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	2210      	movs	r2, #16
 8011da0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011da8:	4619      	mov	r1, r3
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f7fe fc0c 	bl	80105c8 <HAL_UARTEx_RxEventCallback>
 8011db0:	e002      	b.n	8011db8 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011db2:	6878      	ldr	r0, [r7, #4]
 8011db4:	f7ee fc9c 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011db8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d006      	beq.n	8011dce <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8011dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011dc4:	f003 0320 	and.w	r3, r3, #32
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	f47f aed1 	bne.w	8011b70 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011dd4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011dd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d049      	beq.n	8011e74 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011de6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d242      	bcs.n	8011e74 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	3308      	adds	r3, #8
 8011df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011df6:	6a3b      	ldr	r3, [r7, #32]
 8011df8:	e853 3f00 	ldrex	r3, [r3]
 8011dfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8011dfe:	69fb      	ldr	r3, [r7, #28]
 8011e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	3308      	adds	r3, #8
 8011e0e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011e12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011e14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e1a:	e841 2300 	strex	r3, r2, [r1]
 8011e1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d1e3      	bne.n	8011dee <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	4a16      	ldr	r2, [pc, #88]	; (8011e84 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8011e2a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	e853 3f00 	ldrex	r3, [r3]
 8011e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8011e3a:	68bb      	ldr	r3, [r7, #8]
 8011e3c:	f043 0320 	orr.w	r3, r3, #32
 8011e40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	461a      	mov	r2, r3
 8011e4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011e4e:	61bb      	str	r3, [r7, #24]
 8011e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e52:	6979      	ldr	r1, [r7, #20]
 8011e54:	69ba      	ldr	r2, [r7, #24]
 8011e56:	e841 2300 	strex	r3, r2, [r1]
 8011e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d1e4      	bne.n	8011e2c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011e62:	e007      	b.n	8011e74 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	699a      	ldr	r2, [r3, #24]
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	f042 0208 	orr.w	r2, r2, #8
 8011e72:	619a      	str	r2, [r3, #24]
}
 8011e74:	bf00      	nop
 8011e76:	37b0      	adds	r7, #176	; 0xb0
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}
 8011e7c:	effffffe 	.word	0xeffffffe
 8011e80:	58000c00 	.word	0x58000c00
 8011e84:	080117b9 	.word	0x080117b9

08011e88 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b0ae      	sub	sp, #184	; 0xb8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e96:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	69db      	ldr	r3, [r3, #28]
 8011ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	689b      	ldr	r3, [r3, #8]
 8011eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ebe:	2b22      	cmp	r3, #34	; 0x22
 8011ec0:	f040 8184 	bne.w	80121cc <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011eca:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011ece:	e127      	b.n	8012120 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ed6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011ee2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8011ee6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8011eea:	4013      	ands	r3, r2
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011ef2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ef8:	1c9a      	adds	r2, r3, #2
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	3b01      	subs	r3, #1
 8011f08:	b29a      	uxth	r2, r3
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	69db      	ldr	r3, [r3, #28]
 8011f16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011f1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011f1e:	f003 0307 	and.w	r3, r3, #7
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d053      	beq.n	8011fce <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011f26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011f2a:	f003 0301 	and.w	r3, r3, #1
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d011      	beq.n	8011f56 <UART_RxISR_16BIT_FIFOEN+0xce>
 8011f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d00b      	beq.n	8011f56 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	2201      	movs	r2, #1
 8011f44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f4c:	f043 0201 	orr.w	r2, r3, #1
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011f56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011f5a:	f003 0302 	and.w	r3, r3, #2
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d011      	beq.n	8011f86 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011f62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f66:	f003 0301 	and.w	r3, r3, #1
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d00b      	beq.n	8011f86 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	2202      	movs	r2, #2
 8011f74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f7c:	f043 0204 	orr.w	r2, r3, #4
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011f86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011f8a:	f003 0304 	and.w	r3, r3, #4
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d011      	beq.n	8011fb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011f92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f96:	f003 0301 	and.w	r3, r3, #1
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d00b      	beq.n	8011fb6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	2204      	movs	r2, #4
 8011fa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fac:	f043 0202 	orr.w	r2, r3, #2
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d006      	beq.n	8011fce <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f7fe faf7 	bl	80105b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011fd4:	b29b      	uxth	r3, r3
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	f040 80a2 	bne.w	8012120 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011fe4:	e853 3f00 	ldrex	r3, [r3]
 8011fe8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	461a      	mov	r2, r3
 8011ffa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011ffe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012002:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012004:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012006:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801200a:	e841 2300 	strex	r3, r2, [r1]
 801200e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012012:	2b00      	cmp	r3, #0
 8012014:	d1e2      	bne.n	8011fdc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	3308      	adds	r3, #8
 801201c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801201e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012020:	e853 3f00 	ldrex	r3, [r3]
 8012024:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012026:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012028:	4b6e      	ldr	r3, [pc, #440]	; (80121e4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801202a:	4013      	ands	r3, r2
 801202c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	3308      	adds	r3, #8
 8012036:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801203a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801203c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801203e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012040:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012042:	e841 2300 	strex	r3, r2, [r1]
 8012046:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801204a:	2b00      	cmp	r3, #0
 801204c:	d1e3      	bne.n	8012016 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2220      	movs	r2, #32
 8012052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2200      	movs	r2, #0
 801205a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2200      	movs	r2, #0
 8012060:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	4a60      	ldr	r2, [pc, #384]	; (80121e8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012068:	4293      	cmp	r3, r2
 801206a:	d021      	beq.n	80120b0 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012076:	2b00      	cmp	r3, #0
 8012078:	d01a      	beq.n	80120b0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012082:	e853 3f00 	ldrex	r3, [r3]
 8012086:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801208a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801208e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	461a      	mov	r2, r3
 8012098:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801209c:	65bb      	str	r3, [r7, #88]	; 0x58
 801209e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80120a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80120a4:	e841 2300 	strex	r3, r2, [r1]
 80120a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80120aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d1e4      	bne.n	801207a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120b4:	2b01      	cmp	r3, #1
 80120b6:	d130      	bne.n	801211a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2200      	movs	r2, #0
 80120bc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c6:	e853 3f00 	ldrex	r3, [r3]
 80120ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80120cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120ce:	f023 0310 	bic.w	r3, r3, #16
 80120d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	461a      	mov	r2, r3
 80120dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80120e0:	647b      	str	r3, [r7, #68]	; 0x44
 80120e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80120e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80120e8:	e841 2300 	strex	r3, r2, [r1]
 80120ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80120ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d1e4      	bne.n	80120be <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	69db      	ldr	r3, [r3, #28]
 80120fa:	f003 0310 	and.w	r3, r3, #16
 80120fe:	2b10      	cmp	r3, #16
 8012100:	d103      	bne.n	801210a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	2210      	movs	r2, #16
 8012108:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012110:	4619      	mov	r1, r3
 8012112:	6878      	ldr	r0, [r7, #4]
 8012114:	f7fe fa58 	bl	80105c8 <HAL_UARTEx_RxEventCallback>
 8012118:	e002      	b.n	8012120 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f7ee fae8 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012120:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012124:	2b00      	cmp	r3, #0
 8012126:	d006      	beq.n	8012136 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012128:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801212c:	f003 0320 	and.w	r3, r3, #32
 8012130:	2b00      	cmp	r3, #0
 8012132:	f47f aecd 	bne.w	8011ed0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801213c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012140:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012144:	2b00      	cmp	r3, #0
 8012146:	d049      	beq.n	80121dc <UART_RxISR_16BIT_FIFOEN+0x354>
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801214e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012152:	429a      	cmp	r2, r3
 8012154:	d242      	bcs.n	80121dc <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	3308      	adds	r3, #8
 801215c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012160:	e853 3f00 	ldrex	r3, [r3]
 8012164:	623b      	str	r3, [r7, #32]
   return(result);
 8012166:	6a3b      	ldr	r3, [r7, #32]
 8012168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801216c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	3308      	adds	r3, #8
 8012176:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801217a:	633a      	str	r2, [r7, #48]	; 0x30
 801217c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801217e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012182:	e841 2300 	strex	r3, r2, [r1]
 8012186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218a:	2b00      	cmp	r3, #0
 801218c:	d1e3      	bne.n	8012156 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	4a16      	ldr	r2, [pc, #88]	; (80121ec <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012192:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	e853 3f00 	ldrex	r3, [r3]
 80121a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	f043 0320 	orr.w	r3, r3, #32
 80121a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	461a      	mov	r2, r3
 80121b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80121b6:	61fb      	str	r3, [r7, #28]
 80121b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121ba:	69b9      	ldr	r1, [r7, #24]
 80121bc:	69fa      	ldr	r2, [r7, #28]
 80121be:	e841 2300 	strex	r3, r2, [r1]
 80121c2:	617b      	str	r3, [r7, #20]
   return(result);
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d1e4      	bne.n	8012194 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80121ca:	e007      	b.n	80121dc <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	699a      	ldr	r2, [r3, #24]
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f042 0208 	orr.w	r2, r2, #8
 80121da:	619a      	str	r2, [r3, #24]
}
 80121dc:	bf00      	nop
 80121de:	37b8      	adds	r7, #184	; 0xb8
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	effffffe 	.word	0xeffffffe
 80121e8:	58000c00 	.word	0x58000c00
 80121ec:	08011971 	.word	0x08011971

080121f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80121f0:	b480      	push	{r7}
 80121f2:	b083      	sub	sp, #12
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80121f8:	bf00      	nop
 80121fa:	370c      	adds	r7, #12
 80121fc:	46bd      	mov	sp, r7
 80121fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012202:	4770      	bx	lr

08012204 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012204:	b480      	push	{r7}
 8012206:	b083      	sub	sp, #12
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801220c:	bf00      	nop
 801220e:	370c      	adds	r7, #12
 8012210:	46bd      	mov	sp, r7
 8012212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012216:	4770      	bx	lr

08012218 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012218:	b480      	push	{r7}
 801221a:	b083      	sub	sp, #12
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012220:	bf00      	nop
 8012222:	370c      	adds	r7, #12
 8012224:	46bd      	mov	sp, r7
 8012226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222a:	4770      	bx	lr

0801222c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801222c:	b480      	push	{r7}
 801222e:	b085      	sub	sp, #20
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801223a:	2b01      	cmp	r3, #1
 801223c:	d101      	bne.n	8012242 <HAL_UARTEx_DisableFifoMode+0x16>
 801223e:	2302      	movs	r3, #2
 8012240:	e027      	b.n	8012292 <HAL_UARTEx_DisableFifoMode+0x66>
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2201      	movs	r2, #1
 8012246:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2224      	movs	r2, #36	; 0x24
 801224e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	681a      	ldr	r2, [r3, #0]
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	f022 0201 	bic.w	r2, r2, #1
 8012268:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012270:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2200      	movs	r2, #0
 8012276:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	68fa      	ldr	r2, [r7, #12]
 801227e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2220      	movs	r2, #32
 8012284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2200      	movs	r2, #0
 801228c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012290:	2300      	movs	r3, #0
}
 8012292:	4618      	mov	r0, r3
 8012294:	3714      	adds	r7, #20
 8012296:	46bd      	mov	sp, r7
 8012298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229c:	4770      	bx	lr

0801229e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801229e:	b580      	push	{r7, lr}
 80122a0:	b084      	sub	sp, #16
 80122a2:	af00      	add	r7, sp, #0
 80122a4:	6078      	str	r0, [r7, #4]
 80122a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80122ae:	2b01      	cmp	r3, #1
 80122b0:	d101      	bne.n	80122b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80122b2:	2302      	movs	r3, #2
 80122b4:	e02d      	b.n	8012312 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2201      	movs	r2, #1
 80122ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	2224      	movs	r2, #36	; 0x24
 80122c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	681a      	ldr	r2, [r3, #0]
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	f022 0201 	bic.w	r2, r2, #1
 80122dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	689b      	ldr	r3, [r3, #8]
 80122e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	683a      	ldr	r2, [r7, #0]
 80122ee:	430a      	orrs	r2, r1
 80122f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f000 f850 	bl	8012398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	68fa      	ldr	r2, [r7, #12]
 80122fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2220      	movs	r2, #32
 8012304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2200      	movs	r2, #0
 801230c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012310:	2300      	movs	r3, #0
}
 8012312:	4618      	mov	r0, r3
 8012314:	3710      	adds	r7, #16
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}

0801231a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801231a:	b580      	push	{r7, lr}
 801231c:	b084      	sub	sp, #16
 801231e:	af00      	add	r7, sp, #0
 8012320:	6078      	str	r0, [r7, #4]
 8012322:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801232a:	2b01      	cmp	r3, #1
 801232c:	d101      	bne.n	8012332 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801232e:	2302      	movs	r3, #2
 8012330:	e02d      	b.n	801238e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2201      	movs	r2, #1
 8012336:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2224      	movs	r2, #36	; 0x24
 801233e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	681a      	ldr	r2, [r3, #0]
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	f022 0201 	bic.w	r2, r2, #1
 8012358:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	689b      	ldr	r3, [r3, #8]
 8012360:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	683a      	ldr	r2, [r7, #0]
 801236a:	430a      	orrs	r2, r1
 801236c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f000 f812 	bl	8012398 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	68fa      	ldr	r2, [r7, #12]
 801237a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2220      	movs	r2, #32
 8012380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2200      	movs	r2, #0
 8012388:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801238c:	2300      	movs	r3, #0
}
 801238e:	4618      	mov	r0, r3
 8012390:	3710      	adds	r7, #16
 8012392:	46bd      	mov	sp, r7
 8012394:	bd80      	pop	{r7, pc}
	...

08012398 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012398:	b480      	push	{r7}
 801239a:	b085      	sub	sp, #20
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d108      	bne.n	80123ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2201      	movs	r2, #1
 80123ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2201      	movs	r2, #1
 80123b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80123b8:	e031      	b.n	801241e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80123ba:	2310      	movs	r3, #16
 80123bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80123be:	2310      	movs	r3, #16
 80123c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	689b      	ldr	r3, [r3, #8]
 80123c8:	0e5b      	lsrs	r3, r3, #25
 80123ca:	b2db      	uxtb	r3, r3
 80123cc:	f003 0307 	and.w	r3, r3, #7
 80123d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	689b      	ldr	r3, [r3, #8]
 80123d8:	0f5b      	lsrs	r3, r3, #29
 80123da:	b2db      	uxtb	r3, r3
 80123dc:	f003 0307 	and.w	r3, r3, #7
 80123e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80123e2:	7bbb      	ldrb	r3, [r7, #14]
 80123e4:	7b3a      	ldrb	r2, [r7, #12]
 80123e6:	4911      	ldr	r1, [pc, #68]	; (801242c <UARTEx_SetNbDataToProcess+0x94>)
 80123e8:	5c8a      	ldrb	r2, [r1, r2]
 80123ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80123ee:	7b3a      	ldrb	r2, [r7, #12]
 80123f0:	490f      	ldr	r1, [pc, #60]	; (8012430 <UARTEx_SetNbDataToProcess+0x98>)
 80123f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80123f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80123f8:	b29a      	uxth	r2, r3
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012400:	7bfb      	ldrb	r3, [r7, #15]
 8012402:	7b7a      	ldrb	r2, [r7, #13]
 8012404:	4909      	ldr	r1, [pc, #36]	; (801242c <UARTEx_SetNbDataToProcess+0x94>)
 8012406:	5c8a      	ldrb	r2, [r1, r2]
 8012408:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801240c:	7b7a      	ldrb	r2, [r7, #13]
 801240e:	4908      	ldr	r1, [pc, #32]	; (8012430 <UARTEx_SetNbDataToProcess+0x98>)
 8012410:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012412:	fb93 f3f2 	sdiv	r3, r3, r2
 8012416:	b29a      	uxth	r2, r3
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801241e:	bf00      	nop
 8012420:	3714      	adds	r7, #20
 8012422:	46bd      	mov	sp, r7
 8012424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012428:	4770      	bx	lr
 801242a:	bf00      	nop
 801242c:	08017274 	.word	0x08017274
 8012430:	0801727c 	.word	0x0801727c

08012434 <__NVIC_SetPriority>:
{
 8012434:	b480      	push	{r7}
 8012436:	b083      	sub	sp, #12
 8012438:	af00      	add	r7, sp, #0
 801243a:	4603      	mov	r3, r0
 801243c:	6039      	str	r1, [r7, #0]
 801243e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012440:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012444:	2b00      	cmp	r3, #0
 8012446:	db0a      	blt.n	801245e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	b2da      	uxtb	r2, r3
 801244c:	490c      	ldr	r1, [pc, #48]	; (8012480 <__NVIC_SetPriority+0x4c>)
 801244e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012452:	0112      	lsls	r2, r2, #4
 8012454:	b2d2      	uxtb	r2, r2
 8012456:	440b      	add	r3, r1
 8012458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801245c:	e00a      	b.n	8012474 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	b2da      	uxtb	r2, r3
 8012462:	4908      	ldr	r1, [pc, #32]	; (8012484 <__NVIC_SetPriority+0x50>)
 8012464:	88fb      	ldrh	r3, [r7, #6]
 8012466:	f003 030f 	and.w	r3, r3, #15
 801246a:	3b04      	subs	r3, #4
 801246c:	0112      	lsls	r2, r2, #4
 801246e:	b2d2      	uxtb	r2, r2
 8012470:	440b      	add	r3, r1
 8012472:	761a      	strb	r2, [r3, #24]
}
 8012474:	bf00      	nop
 8012476:	370c      	adds	r7, #12
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr
 8012480:	e000e100 	.word	0xe000e100
 8012484:	e000ed00 	.word	0xe000ed00

08012488 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012488:	b580      	push	{r7, lr}
 801248a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801248c:	4b05      	ldr	r3, [pc, #20]	; (80124a4 <SysTick_Handler+0x1c>)
 801248e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012490:	f002 fc16 	bl	8014cc0 <xTaskGetSchedulerState>
 8012494:	4603      	mov	r3, r0
 8012496:	2b01      	cmp	r3, #1
 8012498:	d001      	beq.n	801249e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801249a:	f003 fa35 	bl	8015908 <xPortSysTickHandler>
  }
}
 801249e:	bf00      	nop
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	e000e010 	.word	0xe000e010

080124a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80124a8:	b580      	push	{r7, lr}
 80124aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80124ac:	2100      	movs	r1, #0
 80124ae:	f06f 0004 	mvn.w	r0, #4
 80124b2:	f7ff ffbf 	bl	8012434 <__NVIC_SetPriority>
#endif
}
 80124b6:	bf00      	nop
 80124b8:	bd80      	pop	{r7, pc}
	...

080124bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80124bc:	b480      	push	{r7}
 80124be:	b083      	sub	sp, #12
 80124c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124c2:	f3ef 8305 	mrs	r3, IPSR
 80124c6:	603b      	str	r3, [r7, #0]
  return(result);
 80124c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d003      	beq.n	80124d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80124ce:	f06f 0305 	mvn.w	r3, #5
 80124d2:	607b      	str	r3, [r7, #4]
 80124d4:	e00c      	b.n	80124f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80124d6:	4b0a      	ldr	r3, [pc, #40]	; (8012500 <osKernelInitialize+0x44>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d105      	bne.n	80124ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80124de:	4b08      	ldr	r3, [pc, #32]	; (8012500 <osKernelInitialize+0x44>)
 80124e0:	2201      	movs	r2, #1
 80124e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80124e4:	2300      	movs	r3, #0
 80124e6:	607b      	str	r3, [r7, #4]
 80124e8:	e002      	b.n	80124f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80124ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80124f0:	687b      	ldr	r3, [r7, #4]
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	370c      	adds	r7, #12
 80124f6:	46bd      	mov	sp, r7
 80124f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fc:	4770      	bx	lr
 80124fe:	bf00      	nop
 8012500:	24000c3c 	.word	0x24000c3c

08012504 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012504:	b580      	push	{r7, lr}
 8012506:	b082      	sub	sp, #8
 8012508:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801250a:	f3ef 8305 	mrs	r3, IPSR
 801250e:	603b      	str	r3, [r7, #0]
  return(result);
 8012510:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012512:	2b00      	cmp	r3, #0
 8012514:	d003      	beq.n	801251e <osKernelStart+0x1a>
    stat = osErrorISR;
 8012516:	f06f 0305 	mvn.w	r3, #5
 801251a:	607b      	str	r3, [r7, #4]
 801251c:	e010      	b.n	8012540 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801251e:	4b0b      	ldr	r3, [pc, #44]	; (801254c <osKernelStart+0x48>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	2b01      	cmp	r3, #1
 8012524:	d109      	bne.n	801253a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012526:	f7ff ffbf 	bl	80124a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801252a:	4b08      	ldr	r3, [pc, #32]	; (801254c <osKernelStart+0x48>)
 801252c:	2202      	movs	r2, #2
 801252e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012530:	f001 fee0 	bl	80142f4 <vTaskStartScheduler>
      stat = osOK;
 8012534:	2300      	movs	r3, #0
 8012536:	607b      	str	r3, [r7, #4]
 8012538:	e002      	b.n	8012540 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801253a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801253e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012540:	687b      	ldr	r3, [r7, #4]
}
 8012542:	4618      	mov	r0, r3
 8012544:	3708      	adds	r7, #8
 8012546:	46bd      	mov	sp, r7
 8012548:	bd80      	pop	{r7, pc}
 801254a:	bf00      	nop
 801254c:	24000c3c 	.word	0x24000c3c

08012550 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012550:	b580      	push	{r7, lr}
 8012552:	b08e      	sub	sp, #56	; 0x38
 8012554:	af04      	add	r7, sp, #16
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801255c:	2300      	movs	r3, #0
 801255e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012560:	f3ef 8305 	mrs	r3, IPSR
 8012564:	617b      	str	r3, [r7, #20]
  return(result);
 8012566:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012568:	2b00      	cmp	r3, #0
 801256a:	d17e      	bne.n	801266a <osThreadNew+0x11a>
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d07b      	beq.n	801266a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012572:	2380      	movs	r3, #128	; 0x80
 8012574:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012576:	2318      	movs	r3, #24
 8012578:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801257a:	2300      	movs	r3, #0
 801257c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801257e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012582:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d045      	beq.n	8012616 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d002      	beq.n	8012598 <osThreadNew+0x48>
        name = attr->name;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	699b      	ldr	r3, [r3, #24]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d002      	beq.n	80125a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	699b      	ldr	r3, [r3, #24]
 80125a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80125a6:	69fb      	ldr	r3, [r7, #28]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d008      	beq.n	80125be <osThreadNew+0x6e>
 80125ac:	69fb      	ldr	r3, [r7, #28]
 80125ae:	2b38      	cmp	r3, #56	; 0x38
 80125b0:	d805      	bhi.n	80125be <osThreadNew+0x6e>
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	f003 0301 	and.w	r3, r3, #1
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d001      	beq.n	80125c2 <osThreadNew+0x72>
        return (NULL);
 80125be:	2300      	movs	r3, #0
 80125c0:	e054      	b.n	801266c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	695b      	ldr	r3, [r3, #20]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d003      	beq.n	80125d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	695b      	ldr	r3, [r3, #20]
 80125ce:	089b      	lsrs	r3, r3, #2
 80125d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	689b      	ldr	r3, [r3, #8]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d00e      	beq.n	80125f8 <osThreadNew+0xa8>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	2b5b      	cmp	r3, #91	; 0x5b
 80125e0:	d90a      	bls.n	80125f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d006      	beq.n	80125f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	695b      	ldr	r3, [r3, #20]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d002      	beq.n	80125f8 <osThreadNew+0xa8>
        mem = 1;
 80125f2:	2301      	movs	r3, #1
 80125f4:	61bb      	str	r3, [r7, #24]
 80125f6:	e010      	b.n	801261a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	689b      	ldr	r3, [r3, #8]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d10c      	bne.n	801261a <osThreadNew+0xca>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	68db      	ldr	r3, [r3, #12]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d108      	bne.n	801261a <osThreadNew+0xca>
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	691b      	ldr	r3, [r3, #16]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d104      	bne.n	801261a <osThreadNew+0xca>
          mem = 0;
 8012610:	2300      	movs	r3, #0
 8012612:	61bb      	str	r3, [r7, #24]
 8012614:	e001      	b.n	801261a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012616:	2300      	movs	r3, #0
 8012618:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801261a:	69bb      	ldr	r3, [r7, #24]
 801261c:	2b01      	cmp	r3, #1
 801261e:	d110      	bne.n	8012642 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012624:	687a      	ldr	r2, [r7, #4]
 8012626:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012628:	9202      	str	r2, [sp, #8]
 801262a:	9301      	str	r3, [sp, #4]
 801262c:	69fb      	ldr	r3, [r7, #28]
 801262e:	9300      	str	r3, [sp, #0]
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	6a3a      	ldr	r2, [r7, #32]
 8012634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012636:	68f8      	ldr	r0, [r7, #12]
 8012638:	f001 fb6c 	bl	8013d14 <xTaskCreateStatic>
 801263c:	4603      	mov	r3, r0
 801263e:	613b      	str	r3, [r7, #16]
 8012640:	e013      	b.n	801266a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012642:	69bb      	ldr	r3, [r7, #24]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d110      	bne.n	801266a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012648:	6a3b      	ldr	r3, [r7, #32]
 801264a:	b29a      	uxth	r2, r3
 801264c:	f107 0310 	add.w	r3, r7, #16
 8012650:	9301      	str	r3, [sp, #4]
 8012652:	69fb      	ldr	r3, [r7, #28]
 8012654:	9300      	str	r3, [sp, #0]
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801265a:	68f8      	ldr	r0, [r7, #12]
 801265c:	f001 fbb7 	bl	8013dce <xTaskCreate>
 8012660:	4603      	mov	r3, r0
 8012662:	2b01      	cmp	r3, #1
 8012664:	d001      	beq.n	801266a <osThreadNew+0x11a>
            hTask = NULL;
 8012666:	2300      	movs	r3, #0
 8012668:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801266a:	693b      	ldr	r3, [r7, #16]
}
 801266c:	4618      	mov	r0, r3
 801266e:	3728      	adds	r7, #40	; 0x28
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}

08012674 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012674:	b480      	push	{r7}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801267a:	f3ef 8305 	mrs	r3, IPSR
 801267e:	603b      	str	r3, [r7, #0]
  return(result);
 8012680:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012682:	2b00      	cmp	r3, #0
 8012684:	d003      	beq.n	801268e <osThreadYield+0x1a>
    stat = osErrorISR;
 8012686:	f06f 0305 	mvn.w	r3, #5
 801268a:	607b      	str	r3, [r7, #4]
 801268c:	e009      	b.n	80126a2 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801268e:	2300      	movs	r3, #0
 8012690:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8012692:	4b07      	ldr	r3, [pc, #28]	; (80126b0 <osThreadYield+0x3c>)
 8012694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012698:	601a      	str	r2, [r3, #0]
 801269a:	f3bf 8f4f 	dsb	sy
 801269e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80126a2:	687b      	ldr	r3, [r7, #4]
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	370c      	adds	r7, #12
 80126a8:	46bd      	mov	sp, r7
 80126aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ae:	4770      	bx	lr
 80126b0:	e000ed04 	.word	0xe000ed04

080126b4 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b086      	sub	sp, #24
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126c0:	f3ef 8305 	mrs	r3, IPSR
 80126c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80126c6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d003      	beq.n	80126d4 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80126cc:	f06f 0305 	mvn.w	r3, #5
 80126d0:	617b      	str	r3, [r7, #20]
 80126d2:	e00b      	b.n	80126ec <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80126d4:	693b      	ldr	r3, [r7, #16]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d103      	bne.n	80126e2 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80126da:	f06f 0303 	mvn.w	r3, #3
 80126de:	617b      	str	r3, [r7, #20]
 80126e0:	e004      	b.n	80126ec <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80126e2:	2300      	movs	r3, #0
 80126e4:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80126e6:	6938      	ldr	r0, [r7, #16]
 80126e8:	f001 fcea 	bl	80140c0 <vTaskSuspend>
  }

  return (stat);
 80126ec:	697b      	ldr	r3, [r7, #20]
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	3718      	adds	r7, #24
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}

080126f6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80126f6:	b580      	push	{r7, lr}
 80126f8:	b084      	sub	sp, #16
 80126fa:	af00      	add	r7, sp, #0
 80126fc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126fe:	f3ef 8305 	mrs	r3, IPSR
 8012702:	60bb      	str	r3, [r7, #8]
  return(result);
 8012704:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012706:	2b00      	cmp	r3, #0
 8012708:	d003      	beq.n	8012712 <osDelay+0x1c>
    stat = osErrorISR;
 801270a:	f06f 0305 	mvn.w	r3, #5
 801270e:	60fb      	str	r3, [r7, #12]
 8012710:	e007      	b.n	8012722 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012712:	2300      	movs	r3, #0
 8012714:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d002      	beq.n	8012722 <osDelay+0x2c>
      vTaskDelay(ticks);
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f001 fc9b 	bl	8014058 <vTaskDelay>
    }
  }

  return (stat);
 8012722:	68fb      	ldr	r3, [r7, #12]
}
 8012724:	4618      	mov	r0, r3
 8012726:	3710      	adds	r7, #16
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801272c:	b580      	push	{r7, lr}
 801272e:	b086      	sub	sp, #24
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012734:	2300      	movs	r3, #0
 8012736:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012738:	f3ef 8305 	mrs	r3, IPSR
 801273c:	60fb      	str	r3, [r7, #12]
  return(result);
 801273e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012740:	2b00      	cmp	r3, #0
 8012742:	d12d      	bne.n	80127a0 <osEventFlagsNew+0x74>
    mem = -1;
 8012744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012748:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d015      	beq.n	801277c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	689b      	ldr	r3, [r3, #8]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d006      	beq.n	8012766 <osEventFlagsNew+0x3a>
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	68db      	ldr	r3, [r3, #12]
 801275c:	2b1f      	cmp	r3, #31
 801275e:	d902      	bls.n	8012766 <osEventFlagsNew+0x3a>
        mem = 1;
 8012760:	2301      	movs	r3, #1
 8012762:	613b      	str	r3, [r7, #16]
 8012764:	e00c      	b.n	8012780 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	689b      	ldr	r3, [r3, #8]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d108      	bne.n	8012780 <osEventFlagsNew+0x54>
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	68db      	ldr	r3, [r3, #12]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d104      	bne.n	8012780 <osEventFlagsNew+0x54>
          mem = 0;
 8012776:	2300      	movs	r3, #0
 8012778:	613b      	str	r3, [r7, #16]
 801277a:	e001      	b.n	8012780 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 801277c:	2300      	movs	r3, #0
 801277e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	2b01      	cmp	r3, #1
 8012784:	d106      	bne.n	8012794 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	689b      	ldr	r3, [r3, #8]
 801278a:	4618      	mov	r0, r3
 801278c:	f000 fa3e 	bl	8012c0c <xEventGroupCreateStatic>
 8012790:	6178      	str	r0, [r7, #20]
 8012792:	e005      	b.n	80127a0 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d102      	bne.n	80127a0 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 801279a:	f000 fa6e 	bl	8012c7a <xEventGroupCreate>
 801279e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80127a0:	697b      	ldr	r3, [r7, #20]
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	3718      	adds	r7, #24
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}
	...

080127ac <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b086      	sub	sp, #24
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
 80127b4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80127ba:	693b      	ldr	r3, [r7, #16]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d004      	beq.n	80127ca <osEventFlagsSet+0x1e>
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d003      	beq.n	80127d2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80127ca:	f06f 0303 	mvn.w	r3, #3
 80127ce:	617b      	str	r3, [r7, #20]
 80127d0:	e028      	b.n	8012824 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127d2:	f3ef 8305 	mrs	r3, IPSR
 80127d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80127d8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d01d      	beq.n	801281a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80127de:	2300      	movs	r3, #0
 80127e0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80127e2:	f107 0308 	add.w	r3, r7, #8
 80127e6:	461a      	mov	r2, r3
 80127e8:	6839      	ldr	r1, [r7, #0]
 80127ea:	6938      	ldr	r0, [r7, #16]
 80127ec:	f000 fbe8 	bl	8012fc0 <xEventGroupSetBitsFromISR>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d103      	bne.n	80127fe <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 80127f6:	f06f 0302 	mvn.w	r3, #2
 80127fa:	617b      	str	r3, [r7, #20]
 80127fc:	e012      	b.n	8012824 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d00d      	beq.n	8012824 <osEventFlagsSet+0x78>
 8012808:	4b09      	ldr	r3, [pc, #36]	; (8012830 <osEventFlagsSet+0x84>)
 801280a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801280e:	601a      	str	r2, [r3, #0]
 8012810:	f3bf 8f4f 	dsb	sy
 8012814:	f3bf 8f6f 	isb	sy
 8012818:	e004      	b.n	8012824 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801281a:	6839      	ldr	r1, [r7, #0]
 801281c:	6938      	ldr	r0, [r7, #16]
 801281e:	f000 fb15 	bl	8012e4c <xEventGroupSetBits>
 8012822:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012824:	697b      	ldr	r3, [r7, #20]
}
 8012826:	4618      	mov	r0, r3
 8012828:	3718      	adds	r7, #24
 801282a:	46bd      	mov	sp, r7
 801282c:	bd80      	pop	{r7, pc}
 801282e:	bf00      	nop
 8012830:	e000ed04 	.word	0xe000ed04

08012834 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012834:	b580      	push	{r7, lr}
 8012836:	b08c      	sub	sp, #48	; 0x30
 8012838:	af02      	add	r7, sp, #8
 801283a:	60f8      	str	r0, [r7, #12]
 801283c:	60b9      	str	r1, [r7, #8]
 801283e:	607a      	str	r2, [r7, #4]
 8012840:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012846:	69bb      	ldr	r3, [r7, #24]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d004      	beq.n	8012856 <osEventFlagsWait+0x22>
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012852:	2b00      	cmp	r3, #0
 8012854:	d003      	beq.n	801285e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012856:	f06f 0303 	mvn.w	r3, #3
 801285a:	61fb      	str	r3, [r7, #28]
 801285c:	e04b      	b.n	80128f6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801285e:	f3ef 8305 	mrs	r3, IPSR
 8012862:	617b      	str	r3, [r7, #20]
  return(result);
 8012864:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012866:	2b00      	cmp	r3, #0
 8012868:	d003      	beq.n	8012872 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 801286a:	f06f 0305 	mvn.w	r3, #5
 801286e:	61fb      	str	r3, [r7, #28]
 8012870:	e041      	b.n	80128f6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f003 0301 	and.w	r3, r3, #1
 8012878:	2b00      	cmp	r3, #0
 801287a:	d002      	beq.n	8012882 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 801287c:	2301      	movs	r3, #1
 801287e:	627b      	str	r3, [r7, #36]	; 0x24
 8012880:	e001      	b.n	8012886 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8012882:	2300      	movs	r3, #0
 8012884:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f003 0302 	and.w	r3, r3, #2
 801288c:	2b00      	cmp	r3, #0
 801288e:	d002      	beq.n	8012896 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012890:	2300      	movs	r3, #0
 8012892:	623b      	str	r3, [r7, #32]
 8012894:	e001      	b.n	801289a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012896:	2301      	movs	r3, #1
 8012898:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	9300      	str	r3, [sp, #0]
 801289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a0:	6a3a      	ldr	r2, [r7, #32]
 80128a2:	68b9      	ldr	r1, [r7, #8]
 80128a4:	69b8      	ldr	r0, [r7, #24]
 80128a6:	f000 fa03 	bl	8012cb0 <xEventGroupWaitBits>
 80128aa:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f003 0301 	and.w	r3, r3, #1
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d010      	beq.n	80128d8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 80128b6:	68ba      	ldr	r2, [r7, #8]
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	4013      	ands	r3, r2
 80128bc:	68ba      	ldr	r2, [r7, #8]
 80128be:	429a      	cmp	r2, r3
 80128c0:	d019      	beq.n	80128f6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d003      	beq.n	80128d0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 80128c8:	f06f 0301 	mvn.w	r3, #1
 80128cc:	61fb      	str	r3, [r7, #28]
 80128ce:	e012      	b.n	80128f6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80128d0:	f06f 0302 	mvn.w	r3, #2
 80128d4:	61fb      	str	r3, [r7, #28]
 80128d6:	e00e      	b.n	80128f6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80128d8:	68ba      	ldr	r2, [r7, #8]
 80128da:	69fb      	ldr	r3, [r7, #28]
 80128dc:	4013      	ands	r3, r2
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d109      	bne.n	80128f6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d003      	beq.n	80128f0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80128e8:	f06f 0301 	mvn.w	r3, #1
 80128ec:	61fb      	str	r3, [r7, #28]
 80128ee:	e002      	b.n	80128f6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80128f0:	f06f 0302 	mvn.w	r3, #2
 80128f4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80128f6:	69fb      	ldr	r3, [r7, #28]
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3728      	adds	r7, #40	; 0x28
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012900:	b580      	push	{r7, lr}
 8012902:	b08a      	sub	sp, #40	; 0x28
 8012904:	af02      	add	r7, sp, #8
 8012906:	60f8      	str	r0, [r7, #12]
 8012908:	60b9      	str	r1, [r7, #8]
 801290a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801290c:	2300      	movs	r3, #0
 801290e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012910:	f3ef 8305 	mrs	r3, IPSR
 8012914:	613b      	str	r3, [r7, #16]
  return(result);
 8012916:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012918:	2b00      	cmp	r3, #0
 801291a:	d15f      	bne.n	80129dc <osMessageQueueNew+0xdc>
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d05c      	beq.n	80129dc <osMessageQueueNew+0xdc>
 8012922:	68bb      	ldr	r3, [r7, #8]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d059      	beq.n	80129dc <osMessageQueueNew+0xdc>
    mem = -1;
 8012928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801292c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d029      	beq.n	8012988 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	689b      	ldr	r3, [r3, #8]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d012      	beq.n	8012962 <osMessageQueueNew+0x62>
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	68db      	ldr	r3, [r3, #12]
 8012940:	2b4f      	cmp	r3, #79	; 0x4f
 8012942:	d90e      	bls.n	8012962 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012948:	2b00      	cmp	r3, #0
 801294a:	d00a      	beq.n	8012962 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	695a      	ldr	r2, [r3, #20]
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	68b9      	ldr	r1, [r7, #8]
 8012954:	fb01 f303 	mul.w	r3, r1, r3
 8012958:	429a      	cmp	r2, r3
 801295a:	d302      	bcc.n	8012962 <osMessageQueueNew+0x62>
        mem = 1;
 801295c:	2301      	movs	r3, #1
 801295e:	61bb      	str	r3, [r7, #24]
 8012960:	e014      	b.n	801298c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	689b      	ldr	r3, [r3, #8]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d110      	bne.n	801298c <osMessageQueueNew+0x8c>
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	68db      	ldr	r3, [r3, #12]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d10c      	bne.n	801298c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012976:	2b00      	cmp	r3, #0
 8012978:	d108      	bne.n	801298c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	695b      	ldr	r3, [r3, #20]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d104      	bne.n	801298c <osMessageQueueNew+0x8c>
          mem = 0;
 8012982:	2300      	movs	r3, #0
 8012984:	61bb      	str	r3, [r7, #24]
 8012986:	e001      	b.n	801298c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012988:	2300      	movs	r3, #0
 801298a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801298c:	69bb      	ldr	r3, [r7, #24]
 801298e:	2b01      	cmp	r3, #1
 8012990:	d10b      	bne.n	80129aa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	691a      	ldr	r2, [r3, #16]
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	689b      	ldr	r3, [r3, #8]
 801299a:	2100      	movs	r1, #0
 801299c:	9100      	str	r1, [sp, #0]
 801299e:	68b9      	ldr	r1, [r7, #8]
 80129a0:	68f8      	ldr	r0, [r7, #12]
 80129a2:	f000 fc3d 	bl	8013220 <xQueueGenericCreateStatic>
 80129a6:	61f8      	str	r0, [r7, #28]
 80129a8:	e008      	b.n	80129bc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80129aa:	69bb      	ldr	r3, [r7, #24]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d105      	bne.n	80129bc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80129b0:	2200      	movs	r2, #0
 80129b2:	68b9      	ldr	r1, [r7, #8]
 80129b4:	68f8      	ldr	r0, [r7, #12]
 80129b6:	f000 fcab 	bl	8013310 <xQueueGenericCreate>
 80129ba:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80129bc:	69fb      	ldr	r3, [r7, #28]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d00c      	beq.n	80129dc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d003      	beq.n	80129d0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	617b      	str	r3, [r7, #20]
 80129ce:	e001      	b.n	80129d4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80129d0:	2300      	movs	r3, #0
 80129d2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80129d4:	6979      	ldr	r1, [r7, #20]
 80129d6:	69f8      	ldr	r0, [r7, #28]
 80129d8:	f001 f93e 	bl	8013c58 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80129dc:	69fb      	ldr	r3, [r7, #28]
}
 80129de:	4618      	mov	r0, r3
 80129e0:	3720      	adds	r7, #32
 80129e2:	46bd      	mov	sp, r7
 80129e4:	bd80      	pop	{r7, pc}
	...

080129e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b088      	sub	sp, #32
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	60f8      	str	r0, [r7, #12]
 80129f0:	60b9      	str	r1, [r7, #8]
 80129f2:	603b      	str	r3, [r7, #0]
 80129f4:	4613      	mov	r3, r2
 80129f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80129fc:	2300      	movs	r3, #0
 80129fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a00:	f3ef 8305 	mrs	r3, IPSR
 8012a04:	617b      	str	r3, [r7, #20]
  return(result);
 8012a06:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d028      	beq.n	8012a5e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012a0c:	69bb      	ldr	r3, [r7, #24]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d005      	beq.n	8012a1e <osMessageQueuePut+0x36>
 8012a12:	68bb      	ldr	r3, [r7, #8]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d002      	beq.n	8012a1e <osMessageQueuePut+0x36>
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d003      	beq.n	8012a26 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012a1e:	f06f 0303 	mvn.w	r3, #3
 8012a22:	61fb      	str	r3, [r7, #28]
 8012a24:	e038      	b.n	8012a98 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012a26:	2300      	movs	r3, #0
 8012a28:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012a2a:	f107 0210 	add.w	r2, r7, #16
 8012a2e:	2300      	movs	r3, #0
 8012a30:	68b9      	ldr	r1, [r7, #8]
 8012a32:	69b8      	ldr	r0, [r7, #24]
 8012a34:	f000 fdc8 	bl	80135c8 <xQueueGenericSendFromISR>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	2b01      	cmp	r3, #1
 8012a3c:	d003      	beq.n	8012a46 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012a3e:	f06f 0302 	mvn.w	r3, #2
 8012a42:	61fb      	str	r3, [r7, #28]
 8012a44:	e028      	b.n	8012a98 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d025      	beq.n	8012a98 <osMessageQueuePut+0xb0>
 8012a4c:	4b15      	ldr	r3, [pc, #84]	; (8012aa4 <osMessageQueuePut+0xbc>)
 8012a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a52:	601a      	str	r2, [r3, #0]
 8012a54:	f3bf 8f4f 	dsb	sy
 8012a58:	f3bf 8f6f 	isb	sy
 8012a5c:	e01c      	b.n	8012a98 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012a5e:	69bb      	ldr	r3, [r7, #24]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d002      	beq.n	8012a6a <osMessageQueuePut+0x82>
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d103      	bne.n	8012a72 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012a6a:	f06f 0303 	mvn.w	r3, #3
 8012a6e:	61fb      	str	r3, [r7, #28]
 8012a70:	e012      	b.n	8012a98 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012a72:	2300      	movs	r3, #0
 8012a74:	683a      	ldr	r2, [r7, #0]
 8012a76:	68b9      	ldr	r1, [r7, #8]
 8012a78:	69b8      	ldr	r0, [r7, #24]
 8012a7a:	f000 fca7 	bl	80133cc <xQueueGenericSend>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	2b01      	cmp	r3, #1
 8012a82:	d009      	beq.n	8012a98 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d003      	beq.n	8012a92 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012a8a:	f06f 0301 	mvn.w	r3, #1
 8012a8e:	61fb      	str	r3, [r7, #28]
 8012a90:	e002      	b.n	8012a98 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012a92:	f06f 0302 	mvn.w	r3, #2
 8012a96:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012a98:	69fb      	ldr	r3, [r7, #28]
}
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	3720      	adds	r7, #32
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}
 8012aa2:	bf00      	nop
 8012aa4:	e000ed04 	.word	0xe000ed04

08012aa8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b088      	sub	sp, #32
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	607a      	str	r2, [r7, #4]
 8012ab4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012aba:	2300      	movs	r3, #0
 8012abc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012abe:	f3ef 8305 	mrs	r3, IPSR
 8012ac2:	617b      	str	r3, [r7, #20]
  return(result);
 8012ac4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d028      	beq.n	8012b1c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012aca:	69bb      	ldr	r3, [r7, #24]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d005      	beq.n	8012adc <osMessageQueueGet+0x34>
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d002      	beq.n	8012adc <osMessageQueueGet+0x34>
 8012ad6:	683b      	ldr	r3, [r7, #0]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d003      	beq.n	8012ae4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012adc:	f06f 0303 	mvn.w	r3, #3
 8012ae0:	61fb      	str	r3, [r7, #28]
 8012ae2:	e037      	b.n	8012b54 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012ae8:	f107 0310 	add.w	r3, r7, #16
 8012aec:	461a      	mov	r2, r3
 8012aee:	68b9      	ldr	r1, [r7, #8]
 8012af0:	69b8      	ldr	r0, [r7, #24]
 8012af2:	f000 fee5 	bl	80138c0 <xQueueReceiveFromISR>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b01      	cmp	r3, #1
 8012afa:	d003      	beq.n	8012b04 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012afc:	f06f 0302 	mvn.w	r3, #2
 8012b00:	61fb      	str	r3, [r7, #28]
 8012b02:	e027      	b.n	8012b54 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012b04:	693b      	ldr	r3, [r7, #16]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d024      	beq.n	8012b54 <osMessageQueueGet+0xac>
 8012b0a:	4b15      	ldr	r3, [pc, #84]	; (8012b60 <osMessageQueueGet+0xb8>)
 8012b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b10:	601a      	str	r2, [r3, #0]
 8012b12:	f3bf 8f4f 	dsb	sy
 8012b16:	f3bf 8f6f 	isb	sy
 8012b1a:	e01b      	b.n	8012b54 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012b1c:	69bb      	ldr	r3, [r7, #24]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d002      	beq.n	8012b28 <osMessageQueueGet+0x80>
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d103      	bne.n	8012b30 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012b28:	f06f 0303 	mvn.w	r3, #3
 8012b2c:	61fb      	str	r3, [r7, #28]
 8012b2e:	e011      	b.n	8012b54 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012b30:	683a      	ldr	r2, [r7, #0]
 8012b32:	68b9      	ldr	r1, [r7, #8]
 8012b34:	69b8      	ldr	r0, [r7, #24]
 8012b36:	f000 fde3 	bl	8013700 <xQueueReceive>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	d009      	beq.n	8012b54 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d003      	beq.n	8012b4e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012b46:	f06f 0301 	mvn.w	r3, #1
 8012b4a:	61fb      	str	r3, [r7, #28]
 8012b4c:	e002      	b.n	8012b54 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012b4e:	f06f 0302 	mvn.w	r3, #2
 8012b52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012b54:	69fb      	ldr	r3, [r7, #28]
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3720      	adds	r7, #32
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	e000ed04 	.word	0xe000ed04

08012b64 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b086      	sub	sp, #24
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8012b70:	693b      	ldr	r3, [r7, #16]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d102      	bne.n	8012b7c <osMessageQueueGetCount+0x18>
    count = 0U;
 8012b76:	2300      	movs	r3, #0
 8012b78:	617b      	str	r3, [r7, #20]
 8012b7a:	e00e      	b.n	8012b9a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b7c:	f3ef 8305 	mrs	r3, IPSR
 8012b80:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b82:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d004      	beq.n	8012b92 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8012b88:	6938      	ldr	r0, [r7, #16]
 8012b8a:	f000 ff37 	bl	80139fc <uxQueueMessagesWaitingFromISR>
 8012b8e:	6178      	str	r0, [r7, #20]
 8012b90:	e003      	b.n	8012b9a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8012b92:	6938      	ldr	r0, [r7, #16]
 8012b94:	f000 ff14 	bl	80139c0 <uxQueueMessagesWaiting>
 8012b98:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8012b9a:	697b      	ldr	r3, [r7, #20]
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3718      	adds	r7, #24
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012ba4:	b480      	push	{r7}
 8012ba6:	b085      	sub	sp, #20
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	60f8      	str	r0, [r7, #12]
 8012bac:	60b9      	str	r1, [r7, #8]
 8012bae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	4a07      	ldr	r2, [pc, #28]	; (8012bd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8012bb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	4a06      	ldr	r2, [pc, #24]	; (8012bd4 <vApplicationGetIdleTaskMemory+0x30>)
 8012bba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	2280      	movs	r2, #128	; 0x80
 8012bc0:	601a      	str	r2, [r3, #0]
}
 8012bc2:	bf00      	nop
 8012bc4:	3714      	adds	r7, #20
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bcc:	4770      	bx	lr
 8012bce:	bf00      	nop
 8012bd0:	24000c40 	.word	0x24000c40
 8012bd4:	24000c9c 	.word	0x24000c9c

08012bd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012bd8:	b480      	push	{r7}
 8012bda:	b085      	sub	sp, #20
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	60b9      	str	r1, [r7, #8]
 8012be2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	4a07      	ldr	r2, [pc, #28]	; (8012c04 <vApplicationGetTimerTaskMemory+0x2c>)
 8012be8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	4a06      	ldr	r2, [pc, #24]	; (8012c08 <vApplicationGetTimerTaskMemory+0x30>)
 8012bee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012bf6:	601a      	str	r2, [r3, #0]
}
 8012bf8:	bf00      	nop
 8012bfa:	3714      	adds	r7, #20
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c02:	4770      	bx	lr
 8012c04:	24000e9c 	.word	0x24000e9c
 8012c08:	24000ef8 	.word	0x24000ef8

08012c0c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b086      	sub	sp, #24
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d10a      	bne.n	8012c30 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c1e:	f383 8811 	msr	BASEPRI, r3
 8012c22:	f3bf 8f6f 	isb	sy
 8012c26:	f3bf 8f4f 	dsb	sy
 8012c2a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012c2c:	bf00      	nop
 8012c2e:	e7fe      	b.n	8012c2e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8012c30:	2320      	movs	r3, #32
 8012c32:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	2b20      	cmp	r3, #32
 8012c38:	d00a      	beq.n	8012c50 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8012c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c3e:	f383 8811 	msr	BASEPRI, r3
 8012c42:	f3bf 8f6f 	isb	sy
 8012c46:	f3bf 8f4f 	dsb	sy
 8012c4a:	60fb      	str	r3, [r7, #12]
}
 8012c4c:	bf00      	nop
 8012c4e:	e7fe      	b.n	8012c4e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d00a      	beq.n	8012c70 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	3304      	adds	r3, #4
 8012c64:	4618      	mov	r0, r3
 8012c66:	f000 f9bf 	bl	8012fe8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	2201      	movs	r2, #1
 8012c6e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8012c70:	697b      	ldr	r3, [r7, #20]
	}
 8012c72:	4618      	mov	r0, r3
 8012c74:	3718      	adds	r7, #24
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}

08012c7a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8012c7a:	b580      	push	{r7, lr}
 8012c7c:	b082      	sub	sp, #8
 8012c7e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012c80:	2020      	movs	r0, #32
 8012c82:	f002 fed1 	bl	8015a28 <pvPortMalloc>
 8012c86:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d00a      	beq.n	8012ca4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2200      	movs	r2, #0
 8012c92:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	3304      	adds	r3, #4
 8012c98:	4618      	mov	r0, r3
 8012c9a:	f000 f9a5 	bl	8012fe8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012ca4:	687b      	ldr	r3, [r7, #4]
	}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	3708      	adds	r7, #8
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}
	...

08012cb0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b090      	sub	sp, #64	; 0x40
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	60f8      	str	r0, [r7, #12]
 8012cb8:	60b9      	str	r1, [r7, #8]
 8012cba:	607a      	str	r2, [r7, #4]
 8012cbc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d10a      	bne.n	8012ce6 <xEventGroupWaitBits+0x36>
	__asm volatile
 8012cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd4:	f383 8811 	msr	BASEPRI, r3
 8012cd8:	f3bf 8f6f 	isb	sy
 8012cdc:	f3bf 8f4f 	dsb	sy
 8012ce0:	623b      	str	r3, [r7, #32]
}
 8012ce2:	bf00      	nop
 8012ce4:	e7fe      	b.n	8012ce4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d00a      	beq.n	8012d06 <xEventGroupWaitBits+0x56>
	__asm volatile
 8012cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cf4:	f383 8811 	msr	BASEPRI, r3
 8012cf8:	f3bf 8f6f 	isb	sy
 8012cfc:	f3bf 8f4f 	dsb	sy
 8012d00:	61fb      	str	r3, [r7, #28]
}
 8012d02:	bf00      	nop
 8012d04:	e7fe      	b.n	8012d04 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d10a      	bne.n	8012d22 <xEventGroupWaitBits+0x72>
	__asm volatile
 8012d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d10:	f383 8811 	msr	BASEPRI, r3
 8012d14:	f3bf 8f6f 	isb	sy
 8012d18:	f3bf 8f4f 	dsb	sy
 8012d1c:	61bb      	str	r3, [r7, #24]
}
 8012d1e:	bf00      	nop
 8012d20:	e7fe      	b.n	8012d20 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012d22:	f001 ffcd 	bl	8014cc0 <xTaskGetSchedulerState>
 8012d26:	4603      	mov	r3, r0
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d102      	bne.n	8012d32 <xEventGroupWaitBits+0x82>
 8012d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d101      	bne.n	8012d36 <xEventGroupWaitBits+0x86>
 8012d32:	2301      	movs	r3, #1
 8012d34:	e000      	b.n	8012d38 <xEventGroupWaitBits+0x88>
 8012d36:	2300      	movs	r3, #0
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d10a      	bne.n	8012d52 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8012d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d40:	f383 8811 	msr	BASEPRI, r3
 8012d44:	f3bf 8f6f 	isb	sy
 8012d48:	f3bf 8f4f 	dsb	sy
 8012d4c:	617b      	str	r3, [r7, #20]
}
 8012d4e:	bf00      	nop
 8012d50:	e7fe      	b.n	8012d50 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8012d52:	f001 fb35 	bl	80143c0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8012d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8012d5c:	683a      	ldr	r2, [r7, #0]
 8012d5e:	68b9      	ldr	r1, [r7, #8]
 8012d60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012d62:	f000 f90b 	bl	8012f7c <prvTestWaitCondition>
 8012d66:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8012d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d00e      	beq.n	8012d8c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8012d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d70:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8012d72:	2300      	movs	r3, #0
 8012d74:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d028      	beq.n	8012dce <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d7e:	681a      	ldr	r2, [r3, #0]
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	43db      	mvns	r3, r3
 8012d84:	401a      	ands	r2, r3
 8012d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d88:	601a      	str	r2, [r3, #0]
 8012d8a:	e020      	b.n	8012dce <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d104      	bne.n	8012d9c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8012d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d94:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8012d96:	2301      	movs	r3, #1
 8012d98:	633b      	str	r3, [r7, #48]	; 0x30
 8012d9a:	e018      	b.n	8012dce <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d003      	beq.n	8012daa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012da8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d003      	beq.n	8012db8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012db6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8012db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dba:	1d18      	adds	r0, r3, #4
 8012dbc:	68ba      	ldr	r2, [r7, #8]
 8012dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc0:	4313      	orrs	r3, r2
 8012dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012dc4:	4619      	mov	r1, r3
 8012dc6:	f001 fcf3 	bl	80147b0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012dce:	f001 fb05 	bl	80143dc <xTaskResumeAll>
 8012dd2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8012dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d031      	beq.n	8012e3e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8012dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d107      	bne.n	8012df0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8012de0:	4b19      	ldr	r3, [pc, #100]	; (8012e48 <xEventGroupWaitBits+0x198>)
 8012de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012de6:	601a      	str	r2, [r3, #0]
 8012de8:	f3bf 8f4f 	dsb	sy
 8012dec:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012df0:	f001 fff2 	bl	8014dd8 <uxTaskResetEventItemValue>
 8012df4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8012df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d11a      	bne.n	8012e36 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8012e00:	f002 fcf0 	bl	80157e4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8012e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8012e0a:	683a      	ldr	r2, [r7, #0]
 8012e0c:	68b9      	ldr	r1, [r7, #8]
 8012e0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012e10:	f000 f8b4 	bl	8012f7c <prvTestWaitCondition>
 8012e14:	4603      	mov	r3, r0
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d009      	beq.n	8012e2e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d006      	beq.n	8012e2e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e22:	681a      	ldr	r2, [r3, #0]
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	43db      	mvns	r3, r3
 8012e28:	401a      	ands	r2, r3
 8012e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e2c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012e2e:	2301      	movs	r3, #1
 8012e30:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8012e32:	f002 fd07 	bl	8015844 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8012e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3740      	adds	r7, #64	; 0x40
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}
 8012e48:	e000ed04 	.word	0xe000ed04

08012e4c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b08e      	sub	sp, #56	; 0x38
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
 8012e54:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8012e56:	2300      	movs	r3, #0
 8012e58:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d10a      	bne.n	8012e7e <xEventGroupSetBits+0x32>
	__asm volatile
 8012e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e6c:	f383 8811 	msr	BASEPRI, r3
 8012e70:	f3bf 8f6f 	isb	sy
 8012e74:	f3bf 8f4f 	dsb	sy
 8012e78:	613b      	str	r3, [r7, #16]
}
 8012e7a:	bf00      	nop
 8012e7c:	e7fe      	b.n	8012e7c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012e7e:	683b      	ldr	r3, [r7, #0]
 8012e80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d00a      	beq.n	8012e9e <xEventGroupSetBits+0x52>
	__asm volatile
 8012e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e8c:	f383 8811 	msr	BASEPRI, r3
 8012e90:	f3bf 8f6f 	isb	sy
 8012e94:	f3bf 8f4f 	dsb	sy
 8012e98:	60fb      	str	r3, [r7, #12]
}
 8012e9a:	bf00      	nop
 8012e9c:	e7fe      	b.n	8012e9c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea0:	3304      	adds	r3, #4
 8012ea2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea6:	3308      	adds	r3, #8
 8012ea8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8012eaa:	f001 fa89 	bl	80143c0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb0:	68db      	ldr	r3, [r3, #12]
 8012eb2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	431a      	orrs	r2, r3
 8012ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ebe:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012ec0:	e03c      	b.n	8012f3c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ec4:	685b      	ldr	r3, [r3, #4]
 8012ec6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8012ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012ece:	2300      	movs	r3, #0
 8012ed0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012ed2:	69bb      	ldr	r3, [r7, #24]
 8012ed4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012ed8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012ee0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012ee2:	697b      	ldr	r3, [r7, #20]
 8012ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d108      	bne.n	8012efe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8012eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eee:	681a      	ldr	r2, [r3, #0]
 8012ef0:	69bb      	ldr	r3, [r7, #24]
 8012ef2:	4013      	ands	r3, r2
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d00b      	beq.n	8012f10 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8012ef8:	2301      	movs	r3, #1
 8012efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012efc:	e008      	b.n	8012f10 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8012efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	4013      	ands	r3, r2
 8012f06:	69ba      	ldr	r2, [r7, #24]
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d101      	bne.n	8012f10 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8012f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d010      	beq.n	8012f38 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d003      	beq.n	8012f28 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f22:	69bb      	ldr	r3, [r7, #24]
 8012f24:	4313      	orrs	r3, r2
 8012f26:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8012f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012f30:	4619      	mov	r1, r3
 8012f32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012f34:	f001 fd08 	bl	8014948 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8012f38:	69fb      	ldr	r3, [r7, #28]
 8012f3a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8012f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f3e:	6a3b      	ldr	r3, [r7, #32]
 8012f40:	429a      	cmp	r2, r3
 8012f42:	d1be      	bne.n	8012ec2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f46:	681a      	ldr	r2, [r3, #0]
 8012f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4a:	43db      	mvns	r3, r3
 8012f4c:	401a      	ands	r2, r3
 8012f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f50:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012f52:	f001 fa43 	bl	80143dc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f58:	681b      	ldr	r3, [r3, #0]
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3738      	adds	r7, #56	; 0x38
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}

08012f62 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8012f62:	b580      	push	{r7, lr}
 8012f64:	b082      	sub	sp, #8
 8012f66:	af00      	add	r7, sp, #0
 8012f68:	6078      	str	r0, [r7, #4]
 8012f6a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8012f6c:	6839      	ldr	r1, [r7, #0]
 8012f6e:	6878      	ldr	r0, [r7, #4]
 8012f70:	f7ff ff6c 	bl	8012e4c <xEventGroupSetBits>
}
 8012f74:	bf00      	nop
 8012f76:	3708      	adds	r7, #8
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}

08012f7c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b087      	sub	sp, #28
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	60b9      	str	r1, [r7, #8]
 8012f86:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d107      	bne.n	8012fa2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012f92:	68fa      	ldr	r2, [r7, #12]
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	4013      	ands	r3, r2
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d00a      	beq.n	8012fb2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012f9c:	2301      	movs	r3, #1
 8012f9e:	617b      	str	r3, [r7, #20]
 8012fa0:	e007      	b.n	8012fb2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012fa2:	68fa      	ldr	r2, [r7, #12]
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	4013      	ands	r3, r2
 8012fa8:	68ba      	ldr	r2, [r7, #8]
 8012faa:	429a      	cmp	r2, r3
 8012fac:	d101      	bne.n	8012fb2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012fae:	2301      	movs	r3, #1
 8012fb0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8012fb2:	697b      	ldr	r3, [r7, #20]
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	371c      	adds	r7, #28
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbe:	4770      	bx	lr

08012fc0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b086      	sub	sp, #24
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	60f8      	str	r0, [r7, #12]
 8012fc8:	60b9      	str	r1, [r7, #8]
 8012fca:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	68ba      	ldr	r2, [r7, #8]
 8012fd0:	68f9      	ldr	r1, [r7, #12]
 8012fd2:	4804      	ldr	r0, [pc, #16]	; (8012fe4 <xEventGroupSetBitsFromISR+0x24>)
 8012fd4:	f002 faba 	bl	801554c <xTimerPendFunctionCallFromISR>
 8012fd8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8012fda:	697b      	ldr	r3, [r7, #20]
	}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3718      	adds	r7, #24
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}
 8012fe4:	08012f63 	.word	0x08012f63

08012fe8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b083      	sub	sp, #12
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f103 0208 	add.w	r2, r3, #8
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013000:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f103 0208 	add.w	r2, r3, #8
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f103 0208 	add.w	r2, r3, #8
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	2200      	movs	r2, #0
 801301a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801301c:	bf00      	nop
 801301e:	370c      	adds	r7, #12
 8013020:	46bd      	mov	sp, r7
 8013022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013026:	4770      	bx	lr

08013028 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013028:	b480      	push	{r7}
 801302a:	b083      	sub	sp, #12
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	2200      	movs	r2, #0
 8013034:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013036:	bf00      	nop
 8013038:	370c      	adds	r7, #12
 801303a:	46bd      	mov	sp, r7
 801303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013040:	4770      	bx	lr

08013042 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013042:	b480      	push	{r7}
 8013044:	b085      	sub	sp, #20
 8013046:	af00      	add	r7, sp, #0
 8013048:	6078      	str	r0, [r7, #4]
 801304a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	68fa      	ldr	r2, [r7, #12]
 8013056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	689a      	ldr	r2, [r3, #8]
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	689b      	ldr	r3, [r3, #8]
 8013064:	683a      	ldr	r2, [r7, #0]
 8013066:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	683a      	ldr	r2, [r7, #0]
 801306c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801306e:	683b      	ldr	r3, [r7, #0]
 8013070:	687a      	ldr	r2, [r7, #4]
 8013072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	1c5a      	adds	r2, r3, #1
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	601a      	str	r2, [r3, #0]
}
 801307e:	bf00      	nop
 8013080:	3714      	adds	r7, #20
 8013082:	46bd      	mov	sp, r7
 8013084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013088:	4770      	bx	lr

0801308a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801308a:	b480      	push	{r7}
 801308c:	b085      	sub	sp, #20
 801308e:	af00      	add	r7, sp, #0
 8013090:	6078      	str	r0, [r7, #4]
 8013092:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013094:	683b      	ldr	r3, [r7, #0]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80130a0:	d103      	bne.n	80130aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	691b      	ldr	r3, [r3, #16]
 80130a6:	60fb      	str	r3, [r7, #12]
 80130a8:	e00c      	b.n	80130c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	3308      	adds	r3, #8
 80130ae:	60fb      	str	r3, [r7, #12]
 80130b0:	e002      	b.n	80130b8 <vListInsert+0x2e>
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	685b      	ldr	r3, [r3, #4]
 80130b6:	60fb      	str	r3, [r7, #12]
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	685b      	ldr	r3, [r3, #4]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	68ba      	ldr	r2, [r7, #8]
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d2f6      	bcs.n	80130b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	685a      	ldr	r2, [r3, #4]
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	685b      	ldr	r3, [r3, #4]
 80130d0:	683a      	ldr	r2, [r7, #0]
 80130d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	68fa      	ldr	r2, [r7, #12]
 80130d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	683a      	ldr	r2, [r7, #0]
 80130de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80130e0:	683b      	ldr	r3, [r7, #0]
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	1c5a      	adds	r2, r3, #1
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	601a      	str	r2, [r3, #0]
}
 80130f0:	bf00      	nop
 80130f2:	3714      	adds	r7, #20
 80130f4:	46bd      	mov	sp, r7
 80130f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fa:	4770      	bx	lr

080130fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80130fc:	b480      	push	{r7}
 80130fe:	b085      	sub	sp, #20
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	691b      	ldr	r3, [r3, #16]
 8013108:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	685b      	ldr	r3, [r3, #4]
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	6892      	ldr	r2, [r2, #8]
 8013112:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	689b      	ldr	r3, [r3, #8]
 8013118:	687a      	ldr	r2, [r7, #4]
 801311a:	6852      	ldr	r2, [r2, #4]
 801311c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	685b      	ldr	r3, [r3, #4]
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	429a      	cmp	r2, r3
 8013126:	d103      	bne.n	8013130 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	689a      	ldr	r2, [r3, #8]
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	2200      	movs	r2, #0
 8013134:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	1e5a      	subs	r2, r3, #1
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	681b      	ldr	r3, [r3, #0]
}
 8013144:	4618      	mov	r0, r3
 8013146:	3714      	adds	r7, #20
 8013148:	46bd      	mov	sp, r7
 801314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314e:	4770      	bx	lr

08013150 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b084      	sub	sp, #16
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d10a      	bne.n	801317a <xQueueGenericReset+0x2a>
	__asm volatile
 8013164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013168:	f383 8811 	msr	BASEPRI, r3
 801316c:	f3bf 8f6f 	isb	sy
 8013170:	f3bf 8f4f 	dsb	sy
 8013174:	60bb      	str	r3, [r7, #8]
}
 8013176:	bf00      	nop
 8013178:	e7fe      	b.n	8013178 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801317a:	f002 fb33 	bl	80157e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	681a      	ldr	r2, [r3, #0]
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013186:	68f9      	ldr	r1, [r7, #12]
 8013188:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801318a:	fb01 f303 	mul.w	r3, r1, r3
 801318e:	441a      	add	r2, r3
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	2200      	movs	r2, #0
 8013198:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	681a      	ldr	r2, [r3, #0]
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	681a      	ldr	r2, [r3, #0]
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131aa:	3b01      	subs	r3, #1
 80131ac:	68f9      	ldr	r1, [r7, #12]
 80131ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80131b0:	fb01 f303 	mul.w	r3, r1, r3
 80131b4:	441a      	add	r2, r3
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	22ff      	movs	r2, #255	; 0xff
 80131be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	22ff      	movs	r2, #255	; 0xff
 80131c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d114      	bne.n	80131fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	691b      	ldr	r3, [r3, #16]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d01a      	beq.n	801320e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	3310      	adds	r3, #16
 80131dc:	4618      	mov	r0, r3
 80131de:	f001 fb4f 	bl	8014880 <xTaskRemoveFromEventList>
 80131e2:	4603      	mov	r3, r0
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d012      	beq.n	801320e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80131e8:	4b0c      	ldr	r3, [pc, #48]	; (801321c <xQueueGenericReset+0xcc>)
 80131ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131ee:	601a      	str	r2, [r3, #0]
 80131f0:	f3bf 8f4f 	dsb	sy
 80131f4:	f3bf 8f6f 	isb	sy
 80131f8:	e009      	b.n	801320e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	3310      	adds	r3, #16
 80131fe:	4618      	mov	r0, r3
 8013200:	f7ff fef2 	bl	8012fe8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	3324      	adds	r3, #36	; 0x24
 8013208:	4618      	mov	r0, r3
 801320a:	f7ff feed 	bl	8012fe8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801320e:	f002 fb19 	bl	8015844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013212:	2301      	movs	r3, #1
}
 8013214:	4618      	mov	r0, r3
 8013216:	3710      	adds	r7, #16
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}
 801321c:	e000ed04 	.word	0xe000ed04

08013220 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013220:	b580      	push	{r7, lr}
 8013222:	b08e      	sub	sp, #56	; 0x38
 8013224:	af02      	add	r7, sp, #8
 8013226:	60f8      	str	r0, [r7, #12]
 8013228:	60b9      	str	r1, [r7, #8]
 801322a:	607a      	str	r2, [r7, #4]
 801322c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d10a      	bne.n	801324a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013238:	f383 8811 	msr	BASEPRI, r3
 801323c:	f3bf 8f6f 	isb	sy
 8013240:	f3bf 8f4f 	dsb	sy
 8013244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013246:	bf00      	nop
 8013248:	e7fe      	b.n	8013248 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d10a      	bne.n	8013266 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013254:	f383 8811 	msr	BASEPRI, r3
 8013258:	f3bf 8f6f 	isb	sy
 801325c:	f3bf 8f4f 	dsb	sy
 8013260:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013262:	bf00      	nop
 8013264:	e7fe      	b.n	8013264 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d002      	beq.n	8013272 <xQueueGenericCreateStatic+0x52>
 801326c:	68bb      	ldr	r3, [r7, #8]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d001      	beq.n	8013276 <xQueueGenericCreateStatic+0x56>
 8013272:	2301      	movs	r3, #1
 8013274:	e000      	b.n	8013278 <xQueueGenericCreateStatic+0x58>
 8013276:	2300      	movs	r3, #0
 8013278:	2b00      	cmp	r3, #0
 801327a:	d10a      	bne.n	8013292 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801327c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013280:	f383 8811 	msr	BASEPRI, r3
 8013284:	f3bf 8f6f 	isb	sy
 8013288:	f3bf 8f4f 	dsb	sy
 801328c:	623b      	str	r3, [r7, #32]
}
 801328e:	bf00      	nop
 8013290:	e7fe      	b.n	8013290 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d102      	bne.n	801329e <xQueueGenericCreateStatic+0x7e>
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d101      	bne.n	80132a2 <xQueueGenericCreateStatic+0x82>
 801329e:	2301      	movs	r3, #1
 80132a0:	e000      	b.n	80132a4 <xQueueGenericCreateStatic+0x84>
 80132a2:	2300      	movs	r3, #0
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d10a      	bne.n	80132be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80132a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ac:	f383 8811 	msr	BASEPRI, r3
 80132b0:	f3bf 8f6f 	isb	sy
 80132b4:	f3bf 8f4f 	dsb	sy
 80132b8:	61fb      	str	r3, [r7, #28]
}
 80132ba:	bf00      	nop
 80132bc:	e7fe      	b.n	80132bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80132be:	2350      	movs	r3, #80	; 0x50
 80132c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	2b50      	cmp	r3, #80	; 0x50
 80132c6:	d00a      	beq.n	80132de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80132c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132cc:	f383 8811 	msr	BASEPRI, r3
 80132d0:	f3bf 8f6f 	isb	sy
 80132d4:	f3bf 8f4f 	dsb	sy
 80132d8:	61bb      	str	r3, [r7, #24]
}
 80132da:	bf00      	nop
 80132dc:	e7fe      	b.n	80132dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80132de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80132e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d00d      	beq.n	8013306 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80132ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ec:	2201      	movs	r2, #1
 80132ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80132f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80132f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f8:	9300      	str	r3, [sp, #0]
 80132fa:	4613      	mov	r3, r2
 80132fc:	687a      	ldr	r2, [r7, #4]
 80132fe:	68b9      	ldr	r1, [r7, #8]
 8013300:	68f8      	ldr	r0, [r7, #12]
 8013302:	f000 f83f 	bl	8013384 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013308:	4618      	mov	r0, r3
 801330a:	3730      	adds	r7, #48	; 0x30
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}

08013310 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013310:	b580      	push	{r7, lr}
 8013312:	b08a      	sub	sp, #40	; 0x28
 8013314:	af02      	add	r7, sp, #8
 8013316:	60f8      	str	r0, [r7, #12]
 8013318:	60b9      	str	r1, [r7, #8]
 801331a:	4613      	mov	r3, r2
 801331c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d10a      	bne.n	801333a <xQueueGenericCreate+0x2a>
	__asm volatile
 8013324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013328:	f383 8811 	msr	BASEPRI, r3
 801332c:	f3bf 8f6f 	isb	sy
 8013330:	f3bf 8f4f 	dsb	sy
 8013334:	613b      	str	r3, [r7, #16]
}
 8013336:	bf00      	nop
 8013338:	e7fe      	b.n	8013338 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	68ba      	ldr	r2, [r7, #8]
 801333e:	fb02 f303 	mul.w	r3, r2, r3
 8013342:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013344:	69fb      	ldr	r3, [r7, #28]
 8013346:	3350      	adds	r3, #80	; 0x50
 8013348:	4618      	mov	r0, r3
 801334a:	f002 fb6d 	bl	8015a28 <pvPortMalloc>
 801334e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013350:	69bb      	ldr	r3, [r7, #24]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d011      	beq.n	801337a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013356:	69bb      	ldr	r3, [r7, #24]
 8013358:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801335a:	697b      	ldr	r3, [r7, #20]
 801335c:	3350      	adds	r3, #80	; 0x50
 801335e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013360:	69bb      	ldr	r3, [r7, #24]
 8013362:	2200      	movs	r2, #0
 8013364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013368:	79fa      	ldrb	r2, [r7, #7]
 801336a:	69bb      	ldr	r3, [r7, #24]
 801336c:	9300      	str	r3, [sp, #0]
 801336e:	4613      	mov	r3, r2
 8013370:	697a      	ldr	r2, [r7, #20]
 8013372:	68b9      	ldr	r1, [r7, #8]
 8013374:	68f8      	ldr	r0, [r7, #12]
 8013376:	f000 f805 	bl	8013384 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801337a:	69bb      	ldr	r3, [r7, #24]
	}
 801337c:	4618      	mov	r0, r3
 801337e:	3720      	adds	r7, #32
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}

08013384 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b084      	sub	sp, #16
 8013388:	af00      	add	r7, sp, #0
 801338a:	60f8      	str	r0, [r7, #12]
 801338c:	60b9      	str	r1, [r7, #8]
 801338e:	607a      	str	r2, [r7, #4]
 8013390:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d103      	bne.n	80133a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013398:	69bb      	ldr	r3, [r7, #24]
 801339a:	69ba      	ldr	r2, [r7, #24]
 801339c:	601a      	str	r2, [r3, #0]
 801339e:	e002      	b.n	80133a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80133a0:	69bb      	ldr	r3, [r7, #24]
 80133a2:	687a      	ldr	r2, [r7, #4]
 80133a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80133a6:	69bb      	ldr	r3, [r7, #24]
 80133a8:	68fa      	ldr	r2, [r7, #12]
 80133aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80133ac:	69bb      	ldr	r3, [r7, #24]
 80133ae:	68ba      	ldr	r2, [r7, #8]
 80133b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80133b2:	2101      	movs	r1, #1
 80133b4:	69b8      	ldr	r0, [r7, #24]
 80133b6:	f7ff fecb 	bl	8013150 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80133ba:	69bb      	ldr	r3, [r7, #24]
 80133bc:	78fa      	ldrb	r2, [r7, #3]
 80133be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80133c2:	bf00      	nop
 80133c4:	3710      	adds	r7, #16
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
	...

080133cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b08e      	sub	sp, #56	; 0x38
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	60f8      	str	r0, [r7, #12]
 80133d4:	60b9      	str	r1, [r7, #8]
 80133d6:	607a      	str	r2, [r7, #4]
 80133d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80133da:	2300      	movs	r3, #0
 80133dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80133e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d10a      	bne.n	80133fe <xQueueGenericSend+0x32>
	__asm volatile
 80133e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133ec:	f383 8811 	msr	BASEPRI, r3
 80133f0:	f3bf 8f6f 	isb	sy
 80133f4:	f3bf 8f4f 	dsb	sy
 80133f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80133fa:	bf00      	nop
 80133fc:	e7fe      	b.n	80133fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d103      	bne.n	801340c <xQueueGenericSend+0x40>
 8013404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013408:	2b00      	cmp	r3, #0
 801340a:	d101      	bne.n	8013410 <xQueueGenericSend+0x44>
 801340c:	2301      	movs	r3, #1
 801340e:	e000      	b.n	8013412 <xQueueGenericSend+0x46>
 8013410:	2300      	movs	r3, #0
 8013412:	2b00      	cmp	r3, #0
 8013414:	d10a      	bne.n	801342c <xQueueGenericSend+0x60>
	__asm volatile
 8013416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801341a:	f383 8811 	msr	BASEPRI, r3
 801341e:	f3bf 8f6f 	isb	sy
 8013422:	f3bf 8f4f 	dsb	sy
 8013426:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013428:	bf00      	nop
 801342a:	e7fe      	b.n	801342a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	2b02      	cmp	r3, #2
 8013430:	d103      	bne.n	801343a <xQueueGenericSend+0x6e>
 8013432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013436:	2b01      	cmp	r3, #1
 8013438:	d101      	bne.n	801343e <xQueueGenericSend+0x72>
 801343a:	2301      	movs	r3, #1
 801343c:	e000      	b.n	8013440 <xQueueGenericSend+0x74>
 801343e:	2300      	movs	r3, #0
 8013440:	2b00      	cmp	r3, #0
 8013442:	d10a      	bne.n	801345a <xQueueGenericSend+0x8e>
	__asm volatile
 8013444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013448:	f383 8811 	msr	BASEPRI, r3
 801344c:	f3bf 8f6f 	isb	sy
 8013450:	f3bf 8f4f 	dsb	sy
 8013454:	623b      	str	r3, [r7, #32]
}
 8013456:	bf00      	nop
 8013458:	e7fe      	b.n	8013458 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801345a:	f001 fc31 	bl	8014cc0 <xTaskGetSchedulerState>
 801345e:	4603      	mov	r3, r0
 8013460:	2b00      	cmp	r3, #0
 8013462:	d102      	bne.n	801346a <xQueueGenericSend+0x9e>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d101      	bne.n	801346e <xQueueGenericSend+0xa2>
 801346a:	2301      	movs	r3, #1
 801346c:	e000      	b.n	8013470 <xQueueGenericSend+0xa4>
 801346e:	2300      	movs	r3, #0
 8013470:	2b00      	cmp	r3, #0
 8013472:	d10a      	bne.n	801348a <xQueueGenericSend+0xbe>
	__asm volatile
 8013474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013478:	f383 8811 	msr	BASEPRI, r3
 801347c:	f3bf 8f6f 	isb	sy
 8013480:	f3bf 8f4f 	dsb	sy
 8013484:	61fb      	str	r3, [r7, #28]
}
 8013486:	bf00      	nop
 8013488:	e7fe      	b.n	8013488 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801348a:	f002 f9ab 	bl	80157e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013496:	429a      	cmp	r2, r3
 8013498:	d302      	bcc.n	80134a0 <xQueueGenericSend+0xd4>
 801349a:	683b      	ldr	r3, [r7, #0]
 801349c:	2b02      	cmp	r3, #2
 801349e:	d129      	bne.n	80134f4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80134a0:	683a      	ldr	r2, [r7, #0]
 80134a2:	68b9      	ldr	r1, [r7, #8]
 80134a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134a6:	f000 fac7 	bl	8013a38 <prvCopyDataToQueue>
 80134aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80134ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d010      	beq.n	80134d6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80134b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b6:	3324      	adds	r3, #36	; 0x24
 80134b8:	4618      	mov	r0, r3
 80134ba:	f001 f9e1 	bl	8014880 <xTaskRemoveFromEventList>
 80134be:	4603      	mov	r3, r0
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d013      	beq.n	80134ec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80134c4:	4b3f      	ldr	r3, [pc, #252]	; (80135c4 <xQueueGenericSend+0x1f8>)
 80134c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134ca:	601a      	str	r2, [r3, #0]
 80134cc:	f3bf 8f4f 	dsb	sy
 80134d0:	f3bf 8f6f 	isb	sy
 80134d4:	e00a      	b.n	80134ec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80134d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d007      	beq.n	80134ec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80134dc:	4b39      	ldr	r3, [pc, #228]	; (80135c4 <xQueueGenericSend+0x1f8>)
 80134de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134e2:	601a      	str	r2, [r3, #0]
 80134e4:	f3bf 8f4f 	dsb	sy
 80134e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80134ec:	f002 f9aa 	bl	8015844 <vPortExitCritical>
				return pdPASS;
 80134f0:	2301      	movs	r3, #1
 80134f2:	e063      	b.n	80135bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d103      	bne.n	8013502 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80134fa:	f002 f9a3 	bl	8015844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80134fe:	2300      	movs	r3, #0
 8013500:	e05c      	b.n	80135bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013504:	2b00      	cmp	r3, #0
 8013506:	d106      	bne.n	8013516 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013508:	f107 0314 	add.w	r3, r7, #20
 801350c:	4618      	mov	r0, r3
 801350e:	f001 fa7d 	bl	8014a0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013512:	2301      	movs	r3, #1
 8013514:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013516:	f002 f995 	bl	8015844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801351a:	f000 ff51 	bl	80143c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801351e:	f002 f961 	bl	80157e4 <vPortEnterCritical>
 8013522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013528:	b25b      	sxtb	r3, r3
 801352a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801352e:	d103      	bne.n	8013538 <xQueueGenericSend+0x16c>
 8013530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013532:	2200      	movs	r2, #0
 8013534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801353a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801353e:	b25b      	sxtb	r3, r3
 8013540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013544:	d103      	bne.n	801354e <xQueueGenericSend+0x182>
 8013546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013548:	2200      	movs	r2, #0
 801354a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801354e:	f002 f979 	bl	8015844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013552:	1d3a      	adds	r2, r7, #4
 8013554:	f107 0314 	add.w	r3, r7, #20
 8013558:	4611      	mov	r1, r2
 801355a:	4618      	mov	r0, r3
 801355c:	f001 fa6c 	bl	8014a38 <xTaskCheckForTimeOut>
 8013560:	4603      	mov	r3, r0
 8013562:	2b00      	cmp	r3, #0
 8013564:	d124      	bne.n	80135b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013566:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013568:	f000 fb5e 	bl	8013c28 <prvIsQueueFull>
 801356c:	4603      	mov	r3, r0
 801356e:	2b00      	cmp	r3, #0
 8013570:	d018      	beq.n	80135a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013574:	3310      	adds	r3, #16
 8013576:	687a      	ldr	r2, [r7, #4]
 8013578:	4611      	mov	r1, r2
 801357a:	4618      	mov	r0, r3
 801357c:	f001 f8f4 	bl	8014768 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013582:	f000 fae9 	bl	8013b58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013586:	f000 ff29 	bl	80143dc <xTaskResumeAll>
 801358a:	4603      	mov	r3, r0
 801358c:	2b00      	cmp	r3, #0
 801358e:	f47f af7c 	bne.w	801348a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013592:	4b0c      	ldr	r3, [pc, #48]	; (80135c4 <xQueueGenericSend+0x1f8>)
 8013594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013598:	601a      	str	r2, [r3, #0]
 801359a:	f3bf 8f4f 	dsb	sy
 801359e:	f3bf 8f6f 	isb	sy
 80135a2:	e772      	b.n	801348a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80135a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135a6:	f000 fad7 	bl	8013b58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80135aa:	f000 ff17 	bl	80143dc <xTaskResumeAll>
 80135ae:	e76c      	b.n	801348a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80135b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135b2:	f000 fad1 	bl	8013b58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80135b6:	f000 ff11 	bl	80143dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80135ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3738      	adds	r7, #56	; 0x38
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}
 80135c4:	e000ed04 	.word	0xe000ed04

080135c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b090      	sub	sp, #64	; 0x40
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	60f8      	str	r0, [r7, #12]
 80135d0:	60b9      	str	r1, [r7, #8]
 80135d2:	607a      	str	r2, [r7, #4]
 80135d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80135da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d10a      	bne.n	80135f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80135e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e4:	f383 8811 	msr	BASEPRI, r3
 80135e8:	f3bf 8f6f 	isb	sy
 80135ec:	f3bf 8f4f 	dsb	sy
 80135f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80135f2:	bf00      	nop
 80135f4:	e7fe      	b.n	80135f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d103      	bne.n	8013604 <xQueueGenericSendFromISR+0x3c>
 80135fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013600:	2b00      	cmp	r3, #0
 8013602:	d101      	bne.n	8013608 <xQueueGenericSendFromISR+0x40>
 8013604:	2301      	movs	r3, #1
 8013606:	e000      	b.n	801360a <xQueueGenericSendFromISR+0x42>
 8013608:	2300      	movs	r3, #0
 801360a:	2b00      	cmp	r3, #0
 801360c:	d10a      	bne.n	8013624 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013612:	f383 8811 	msr	BASEPRI, r3
 8013616:	f3bf 8f6f 	isb	sy
 801361a:	f3bf 8f4f 	dsb	sy
 801361e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013620:	bf00      	nop
 8013622:	e7fe      	b.n	8013622 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	2b02      	cmp	r3, #2
 8013628:	d103      	bne.n	8013632 <xQueueGenericSendFromISR+0x6a>
 801362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801362e:	2b01      	cmp	r3, #1
 8013630:	d101      	bne.n	8013636 <xQueueGenericSendFromISR+0x6e>
 8013632:	2301      	movs	r3, #1
 8013634:	e000      	b.n	8013638 <xQueueGenericSendFromISR+0x70>
 8013636:	2300      	movs	r3, #0
 8013638:	2b00      	cmp	r3, #0
 801363a:	d10a      	bne.n	8013652 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013640:	f383 8811 	msr	BASEPRI, r3
 8013644:	f3bf 8f6f 	isb	sy
 8013648:	f3bf 8f4f 	dsb	sy
 801364c:	623b      	str	r3, [r7, #32]
}
 801364e:	bf00      	nop
 8013650:	e7fe      	b.n	8013650 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013652:	f002 f9a9 	bl	80159a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013656:	f3ef 8211 	mrs	r2, BASEPRI
 801365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801365e:	f383 8811 	msr	BASEPRI, r3
 8013662:	f3bf 8f6f 	isb	sy
 8013666:	f3bf 8f4f 	dsb	sy
 801366a:	61fa      	str	r2, [r7, #28]
 801366c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801366e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013670:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801367a:	429a      	cmp	r2, r3
 801367c:	d302      	bcc.n	8013684 <xQueueGenericSendFromISR+0xbc>
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	2b02      	cmp	r3, #2
 8013682:	d12f      	bne.n	80136e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801368a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013692:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013694:	683a      	ldr	r2, [r7, #0]
 8013696:	68b9      	ldr	r1, [r7, #8]
 8013698:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801369a:	f000 f9cd 	bl	8013a38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801369e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80136a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80136a6:	d112      	bne.n	80136ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80136a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d016      	beq.n	80136de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80136b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136b2:	3324      	adds	r3, #36	; 0x24
 80136b4:	4618      	mov	r0, r3
 80136b6:	f001 f8e3 	bl	8014880 <xTaskRemoveFromEventList>
 80136ba:	4603      	mov	r3, r0
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d00e      	beq.n	80136de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d00b      	beq.n	80136de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	2201      	movs	r2, #1
 80136ca:	601a      	str	r2, [r3, #0]
 80136cc:	e007      	b.n	80136de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80136ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80136d2:	3301      	adds	r3, #1
 80136d4:	b2db      	uxtb	r3, r3
 80136d6:	b25a      	sxtb	r2, r3
 80136d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80136de:	2301      	movs	r3, #1
 80136e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80136e2:	e001      	b.n	80136e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80136e4:	2300      	movs	r3, #0
 80136e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80136e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80136ec:	697b      	ldr	r3, [r7, #20]
 80136ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80136f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80136f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3740      	adds	r7, #64	; 0x40
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
	...

08013700 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b08c      	sub	sp, #48	; 0x30
 8013704:	af00      	add	r7, sp, #0
 8013706:	60f8      	str	r0, [r7, #12]
 8013708:	60b9      	str	r1, [r7, #8]
 801370a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801370c:	2300      	movs	r3, #0
 801370e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013716:	2b00      	cmp	r3, #0
 8013718:	d10a      	bne.n	8013730 <xQueueReceive+0x30>
	__asm volatile
 801371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801371e:	f383 8811 	msr	BASEPRI, r3
 8013722:	f3bf 8f6f 	isb	sy
 8013726:	f3bf 8f4f 	dsb	sy
 801372a:	623b      	str	r3, [r7, #32]
}
 801372c:	bf00      	nop
 801372e:	e7fe      	b.n	801372e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d103      	bne.n	801373e <xQueueReceive+0x3e>
 8013736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801373a:	2b00      	cmp	r3, #0
 801373c:	d101      	bne.n	8013742 <xQueueReceive+0x42>
 801373e:	2301      	movs	r3, #1
 8013740:	e000      	b.n	8013744 <xQueueReceive+0x44>
 8013742:	2300      	movs	r3, #0
 8013744:	2b00      	cmp	r3, #0
 8013746:	d10a      	bne.n	801375e <xQueueReceive+0x5e>
	__asm volatile
 8013748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801374c:	f383 8811 	msr	BASEPRI, r3
 8013750:	f3bf 8f6f 	isb	sy
 8013754:	f3bf 8f4f 	dsb	sy
 8013758:	61fb      	str	r3, [r7, #28]
}
 801375a:	bf00      	nop
 801375c:	e7fe      	b.n	801375c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801375e:	f001 faaf 	bl	8014cc0 <xTaskGetSchedulerState>
 8013762:	4603      	mov	r3, r0
 8013764:	2b00      	cmp	r3, #0
 8013766:	d102      	bne.n	801376e <xQueueReceive+0x6e>
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d101      	bne.n	8013772 <xQueueReceive+0x72>
 801376e:	2301      	movs	r3, #1
 8013770:	e000      	b.n	8013774 <xQueueReceive+0x74>
 8013772:	2300      	movs	r3, #0
 8013774:	2b00      	cmp	r3, #0
 8013776:	d10a      	bne.n	801378e <xQueueReceive+0x8e>
	__asm volatile
 8013778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801377c:	f383 8811 	msr	BASEPRI, r3
 8013780:	f3bf 8f6f 	isb	sy
 8013784:	f3bf 8f4f 	dsb	sy
 8013788:	61bb      	str	r3, [r7, #24]
}
 801378a:	bf00      	nop
 801378c:	e7fe      	b.n	801378c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801378e:	f002 f829 	bl	80157e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013796:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801379a:	2b00      	cmp	r3, #0
 801379c:	d01f      	beq.n	80137de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801379e:	68b9      	ldr	r1, [r7, #8]
 80137a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80137a2:	f000 f9b3 	bl	8013b0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80137a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a8:	1e5a      	subs	r2, r3, #1
 80137aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80137ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b0:	691b      	ldr	r3, [r3, #16]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00f      	beq.n	80137d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80137b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b8:	3310      	adds	r3, #16
 80137ba:	4618      	mov	r0, r3
 80137bc:	f001 f860 	bl	8014880 <xTaskRemoveFromEventList>
 80137c0:	4603      	mov	r3, r0
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d007      	beq.n	80137d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80137c6:	4b3d      	ldr	r3, [pc, #244]	; (80138bc <xQueueReceive+0x1bc>)
 80137c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137cc:	601a      	str	r2, [r3, #0]
 80137ce:	f3bf 8f4f 	dsb	sy
 80137d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80137d6:	f002 f835 	bl	8015844 <vPortExitCritical>
				return pdPASS;
 80137da:	2301      	movs	r3, #1
 80137dc:	e069      	b.n	80138b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d103      	bne.n	80137ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80137e4:	f002 f82e 	bl	8015844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80137e8:	2300      	movs	r3, #0
 80137ea:	e062      	b.n	80138b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80137ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d106      	bne.n	8013800 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80137f2:	f107 0310 	add.w	r3, r7, #16
 80137f6:	4618      	mov	r0, r3
 80137f8:	f001 f908 	bl	8014a0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80137fc:	2301      	movs	r3, #1
 80137fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013800:	f002 f820 	bl	8015844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013804:	f000 fddc 	bl	80143c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013808:	f001 ffec 	bl	80157e4 <vPortEnterCritical>
 801380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801380e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013812:	b25b      	sxtb	r3, r3
 8013814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013818:	d103      	bne.n	8013822 <xQueueReceive+0x122>
 801381a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801381c:	2200      	movs	r2, #0
 801381e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013828:	b25b      	sxtb	r3, r3
 801382a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801382e:	d103      	bne.n	8013838 <xQueueReceive+0x138>
 8013830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013832:	2200      	movs	r2, #0
 8013834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013838:	f002 f804 	bl	8015844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801383c:	1d3a      	adds	r2, r7, #4
 801383e:	f107 0310 	add.w	r3, r7, #16
 8013842:	4611      	mov	r1, r2
 8013844:	4618      	mov	r0, r3
 8013846:	f001 f8f7 	bl	8014a38 <xTaskCheckForTimeOut>
 801384a:	4603      	mov	r3, r0
 801384c:	2b00      	cmp	r3, #0
 801384e:	d123      	bne.n	8013898 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013852:	f000 f9d3 	bl	8013bfc <prvIsQueueEmpty>
 8013856:	4603      	mov	r3, r0
 8013858:	2b00      	cmp	r3, #0
 801385a:	d017      	beq.n	801388c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801385e:	3324      	adds	r3, #36	; 0x24
 8013860:	687a      	ldr	r2, [r7, #4]
 8013862:	4611      	mov	r1, r2
 8013864:	4618      	mov	r0, r3
 8013866:	f000 ff7f 	bl	8014768 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801386a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801386c:	f000 f974 	bl	8013b58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013870:	f000 fdb4 	bl	80143dc <xTaskResumeAll>
 8013874:	4603      	mov	r3, r0
 8013876:	2b00      	cmp	r3, #0
 8013878:	d189      	bne.n	801378e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801387a:	4b10      	ldr	r3, [pc, #64]	; (80138bc <xQueueReceive+0x1bc>)
 801387c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013880:	601a      	str	r2, [r3, #0]
 8013882:	f3bf 8f4f 	dsb	sy
 8013886:	f3bf 8f6f 	isb	sy
 801388a:	e780      	b.n	801378e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801388c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801388e:	f000 f963 	bl	8013b58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013892:	f000 fda3 	bl	80143dc <xTaskResumeAll>
 8013896:	e77a      	b.n	801378e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801389a:	f000 f95d 	bl	8013b58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801389e:	f000 fd9d 	bl	80143dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80138a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80138a4:	f000 f9aa 	bl	8013bfc <prvIsQueueEmpty>
 80138a8:	4603      	mov	r3, r0
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	f43f af6f 	beq.w	801378e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80138b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80138b2:	4618      	mov	r0, r3
 80138b4:	3730      	adds	r7, #48	; 0x30
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}
 80138ba:	bf00      	nop
 80138bc:	e000ed04 	.word	0xe000ed04

080138c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b08e      	sub	sp, #56	; 0x38
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	60f8      	str	r0, [r7, #12]
 80138c8:	60b9      	str	r1, [r7, #8]
 80138ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80138d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d10a      	bne.n	80138ec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80138d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138da:	f383 8811 	msr	BASEPRI, r3
 80138de:	f3bf 8f6f 	isb	sy
 80138e2:	f3bf 8f4f 	dsb	sy
 80138e6:	623b      	str	r3, [r7, #32]
}
 80138e8:	bf00      	nop
 80138ea:	e7fe      	b.n	80138ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d103      	bne.n	80138fa <xQueueReceiveFromISR+0x3a>
 80138f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d101      	bne.n	80138fe <xQueueReceiveFromISR+0x3e>
 80138fa:	2301      	movs	r3, #1
 80138fc:	e000      	b.n	8013900 <xQueueReceiveFromISR+0x40>
 80138fe:	2300      	movs	r3, #0
 8013900:	2b00      	cmp	r3, #0
 8013902:	d10a      	bne.n	801391a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013908:	f383 8811 	msr	BASEPRI, r3
 801390c:	f3bf 8f6f 	isb	sy
 8013910:	f3bf 8f4f 	dsb	sy
 8013914:	61fb      	str	r3, [r7, #28]
}
 8013916:	bf00      	nop
 8013918:	e7fe      	b.n	8013918 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801391a:	f002 f845 	bl	80159a8 <vPortValidateInterruptPriority>
	__asm volatile
 801391e:	f3ef 8211 	mrs	r2, BASEPRI
 8013922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013926:	f383 8811 	msr	BASEPRI, r3
 801392a:	f3bf 8f6f 	isb	sy
 801392e:	f3bf 8f4f 	dsb	sy
 8013932:	61ba      	str	r2, [r7, #24]
 8013934:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013936:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013938:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801393e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013942:	2b00      	cmp	r3, #0
 8013944:	d02f      	beq.n	80139a6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013948:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801394c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013950:	68b9      	ldr	r1, [r7, #8]
 8013952:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013954:	f000 f8da 	bl	8013b0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801395a:	1e5a      	subs	r2, r3, #1
 801395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801395e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013960:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013968:	d112      	bne.n	8013990 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396c:	691b      	ldr	r3, [r3, #16]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d016      	beq.n	80139a0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013974:	3310      	adds	r3, #16
 8013976:	4618      	mov	r0, r3
 8013978:	f000 ff82 	bl	8014880 <xTaskRemoveFromEventList>
 801397c:	4603      	mov	r3, r0
 801397e:	2b00      	cmp	r3, #0
 8013980:	d00e      	beq.n	80139a0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d00b      	beq.n	80139a0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	2201      	movs	r2, #1
 801398c:	601a      	str	r2, [r3, #0]
 801398e:	e007      	b.n	80139a0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013994:	3301      	adds	r3, #1
 8013996:	b2db      	uxtb	r3, r3
 8013998:	b25a      	sxtb	r2, r3
 801399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80139a0:	2301      	movs	r3, #1
 80139a2:	637b      	str	r3, [r7, #52]	; 0x34
 80139a4:	e001      	b.n	80139aa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80139a6:	2300      	movs	r3, #0
 80139a8:	637b      	str	r3, [r7, #52]	; 0x34
 80139aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	f383 8811 	msr	BASEPRI, r3
}
 80139b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80139b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80139b8:	4618      	mov	r0, r3
 80139ba:	3738      	adds	r7, #56	; 0x38
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}

080139c0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d10a      	bne.n	80139e4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80139ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139d2:	f383 8811 	msr	BASEPRI, r3
 80139d6:	f3bf 8f6f 	isb	sy
 80139da:	f3bf 8f4f 	dsb	sy
 80139de:	60bb      	str	r3, [r7, #8]
}
 80139e0:	bf00      	nop
 80139e2:	e7fe      	b.n	80139e2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80139e4:	f001 fefe 	bl	80157e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139ec:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80139ee:	f001 ff29 	bl	8015844 <vPortExitCritical>

	return uxReturn;
 80139f2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80139f4:	4618      	mov	r0, r3
 80139f6:	3710      	adds	r7, #16
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}

080139fc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80139fc:	b480      	push	{r7}
 80139fe:	b087      	sub	sp, #28
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d10a      	bne.n	8013a24 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8013a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a12:	f383 8811 	msr	BASEPRI, r3
 8013a16:	f3bf 8f6f 	isb	sy
 8013a1a:	f3bf 8f4f 	dsb	sy
 8013a1e:	60fb      	str	r3, [r7, #12]
}
 8013a20:	bf00      	nop
 8013a22:	e7fe      	b.n	8013a22 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a28:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8013a2a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	371c      	adds	r7, #28
 8013a30:	46bd      	mov	sp, r7
 8013a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a36:	4770      	bx	lr

08013a38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b086      	sub	sp, #24
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	60f8      	str	r0, [r7, #12]
 8013a40:	60b9      	str	r1, [r7, #8]
 8013a42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013a44:	2300      	movs	r3, #0
 8013a46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d10d      	bne.n	8013a72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d14d      	bne.n	8013afa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	689b      	ldr	r3, [r3, #8]
 8013a62:	4618      	mov	r0, r3
 8013a64:	f001 f94a 	bl	8014cfc <xTaskPriorityDisinherit>
 8013a68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	609a      	str	r2, [r3, #8]
 8013a70:	e043      	b.n	8013afa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d119      	bne.n	8013aac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	6858      	ldr	r0, [r3, #4]
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a80:	461a      	mov	r2, r3
 8013a82:	68b9      	ldr	r1, [r7, #8]
 8013a84:	f002 f9f4 	bl	8015e70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	685a      	ldr	r2, [r3, #4]
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a90:	441a      	add	r2, r3
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	685a      	ldr	r2, [r3, #4]
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	689b      	ldr	r3, [r3, #8]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d32b      	bcc.n	8013afa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	681a      	ldr	r2, [r3, #0]
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	605a      	str	r2, [r3, #4]
 8013aaa:	e026      	b.n	8013afa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	68d8      	ldr	r0, [r3, #12]
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ab4:	461a      	mov	r2, r3
 8013ab6:	68b9      	ldr	r1, [r7, #8]
 8013ab8:	f002 f9da 	bl	8015e70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	68da      	ldr	r2, [r3, #12]
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ac4:	425b      	negs	r3, r3
 8013ac6:	441a      	add	r2, r3
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	68da      	ldr	r2, [r3, #12]
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d207      	bcs.n	8013ae8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	689a      	ldr	r2, [r3, #8]
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ae0:	425b      	negs	r3, r3
 8013ae2:	441a      	add	r2, r3
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2b02      	cmp	r3, #2
 8013aec:	d105      	bne.n	8013afa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013aee:	693b      	ldr	r3, [r7, #16]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d002      	beq.n	8013afa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013af4:	693b      	ldr	r3, [r7, #16]
 8013af6:	3b01      	subs	r3, #1
 8013af8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013afa:	693b      	ldr	r3, [r7, #16]
 8013afc:	1c5a      	adds	r2, r3, #1
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013b02:	697b      	ldr	r3, [r7, #20]
}
 8013b04:	4618      	mov	r0, r3
 8013b06:	3718      	adds	r7, #24
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}

08013b0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
 8013b14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d018      	beq.n	8013b50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	68da      	ldr	r2, [r3, #12]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b26:	441a      	add	r2, r3
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	68da      	ldr	r2, [r3, #12]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	689b      	ldr	r3, [r3, #8]
 8013b34:	429a      	cmp	r2, r3
 8013b36:	d303      	bcc.n	8013b40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681a      	ldr	r2, [r3, #0]
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	68d9      	ldr	r1, [r3, #12]
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b48:	461a      	mov	r2, r3
 8013b4a:	6838      	ldr	r0, [r7, #0]
 8013b4c:	f002 f990 	bl	8015e70 <memcpy>
	}
}
 8013b50:	bf00      	nop
 8013b52:	3708      	adds	r7, #8
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}

08013b58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b084      	sub	sp, #16
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013b60:	f001 fe40 	bl	80157e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013b6c:	e011      	b.n	8013b92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d012      	beq.n	8013b9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	3324      	adds	r3, #36	; 0x24
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f000 fe80 	bl	8014880 <xTaskRemoveFromEventList>
 8013b80:	4603      	mov	r3, r0
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d001      	beq.n	8013b8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013b86:	f000 ffb9 	bl	8014afc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013b8a:	7bfb      	ldrb	r3, [r7, #15]
 8013b8c:	3b01      	subs	r3, #1
 8013b8e:	b2db      	uxtb	r3, r3
 8013b90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	dce9      	bgt.n	8013b6e <prvUnlockQueue+0x16>
 8013b9a:	e000      	b.n	8013b9e <prvUnlockQueue+0x46>
					break;
 8013b9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	22ff      	movs	r2, #255	; 0xff
 8013ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013ba6:	f001 fe4d 	bl	8015844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013baa:	f001 fe1b 	bl	80157e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013bb4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013bb6:	e011      	b.n	8013bdc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	691b      	ldr	r3, [r3, #16]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d012      	beq.n	8013be6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	3310      	adds	r3, #16
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f000 fe5b 	bl	8014880 <xTaskRemoveFromEventList>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d001      	beq.n	8013bd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013bd0:	f000 ff94 	bl	8014afc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013bd4:	7bbb      	ldrb	r3, [r7, #14]
 8013bd6:	3b01      	subs	r3, #1
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013bdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	dce9      	bgt.n	8013bb8 <prvUnlockQueue+0x60>
 8013be4:	e000      	b.n	8013be8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013be6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	22ff      	movs	r2, #255	; 0xff
 8013bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013bf0:	f001 fe28 	bl	8015844 <vPortExitCritical>
}
 8013bf4:	bf00      	nop
 8013bf6:	3710      	adds	r7, #16
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}

08013bfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b084      	sub	sp, #16
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013c04:	f001 fdee 	bl	80157e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d102      	bne.n	8013c16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013c10:	2301      	movs	r3, #1
 8013c12:	60fb      	str	r3, [r7, #12]
 8013c14:	e001      	b.n	8013c1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013c16:	2300      	movs	r3, #0
 8013c18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013c1a:	f001 fe13 	bl	8015844 <vPortExitCritical>

	return xReturn;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
}
 8013c20:	4618      	mov	r0, r3
 8013c22:	3710      	adds	r7, #16
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}

08013c28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013c30:	f001 fdd8 	bl	80157e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d102      	bne.n	8013c46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013c40:	2301      	movs	r3, #1
 8013c42:	60fb      	str	r3, [r7, #12]
 8013c44:	e001      	b.n	8013c4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013c46:	2300      	movs	r3, #0
 8013c48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013c4a:	f001 fdfb 	bl	8015844 <vPortExitCritical>

	return xReturn;
 8013c4e:	68fb      	ldr	r3, [r7, #12]
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3710      	adds	r7, #16
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013c58:	b480      	push	{r7}
 8013c5a:	b085      	sub	sp, #20
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
 8013c60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013c62:	2300      	movs	r3, #0
 8013c64:	60fb      	str	r3, [r7, #12]
 8013c66:	e014      	b.n	8013c92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013c68:	4a0f      	ldr	r2, [pc, #60]	; (8013ca8 <vQueueAddToRegistry+0x50>)
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d10b      	bne.n	8013c8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013c74:	490c      	ldr	r1, [pc, #48]	; (8013ca8 <vQueueAddToRegistry+0x50>)
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	683a      	ldr	r2, [r7, #0]
 8013c7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013c7e:	4a0a      	ldr	r2, [pc, #40]	; (8013ca8 <vQueueAddToRegistry+0x50>)
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	00db      	lsls	r3, r3, #3
 8013c84:	4413      	add	r3, r2
 8013c86:	687a      	ldr	r2, [r7, #4]
 8013c88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013c8a:	e006      	b.n	8013c9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	3301      	adds	r3, #1
 8013c90:	60fb      	str	r3, [r7, #12]
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	2b07      	cmp	r3, #7
 8013c96:	d9e7      	bls.n	8013c68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013c98:	bf00      	nop
 8013c9a:	bf00      	nop
 8013c9c:	3714      	adds	r7, #20
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca4:	4770      	bx	lr
 8013ca6:	bf00      	nop
 8013ca8:	240012f8 	.word	0x240012f8

08013cac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b086      	sub	sp, #24
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	60b9      	str	r1, [r7, #8]
 8013cb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013cbc:	f001 fd92 	bl	80157e4 <vPortEnterCritical>
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013cc6:	b25b      	sxtb	r3, r3
 8013cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ccc:	d103      	bne.n	8013cd6 <vQueueWaitForMessageRestricted+0x2a>
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013cd6:	697b      	ldr	r3, [r7, #20]
 8013cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013cdc:	b25b      	sxtb	r3, r3
 8013cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ce2:	d103      	bne.n	8013cec <vQueueWaitForMessageRestricted+0x40>
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013cec:	f001 fdaa 	bl	8015844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d106      	bne.n	8013d06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	3324      	adds	r3, #36	; 0x24
 8013cfc:	687a      	ldr	r2, [r7, #4]
 8013cfe:	68b9      	ldr	r1, [r7, #8]
 8013d00:	4618      	mov	r0, r3
 8013d02:	f000 fd91 	bl	8014828 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013d06:	6978      	ldr	r0, [r7, #20]
 8013d08:	f7ff ff26 	bl	8013b58 <prvUnlockQueue>
	}
 8013d0c:	bf00      	nop
 8013d0e:	3718      	adds	r7, #24
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b08e      	sub	sp, #56	; 0x38
 8013d18:	af04      	add	r7, sp, #16
 8013d1a:	60f8      	str	r0, [r7, #12]
 8013d1c:	60b9      	str	r1, [r7, #8]
 8013d1e:	607a      	str	r2, [r7, #4]
 8013d20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d10a      	bne.n	8013d3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8013d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d2c:	f383 8811 	msr	BASEPRI, r3
 8013d30:	f3bf 8f6f 	isb	sy
 8013d34:	f3bf 8f4f 	dsb	sy
 8013d38:	623b      	str	r3, [r7, #32]
}
 8013d3a:	bf00      	nop
 8013d3c:	e7fe      	b.n	8013d3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d10a      	bne.n	8013d5a <xTaskCreateStatic+0x46>
	__asm volatile
 8013d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d48:	f383 8811 	msr	BASEPRI, r3
 8013d4c:	f3bf 8f6f 	isb	sy
 8013d50:	f3bf 8f4f 	dsb	sy
 8013d54:	61fb      	str	r3, [r7, #28]
}
 8013d56:	bf00      	nop
 8013d58:	e7fe      	b.n	8013d58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013d5a:	235c      	movs	r3, #92	; 0x5c
 8013d5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013d5e:	693b      	ldr	r3, [r7, #16]
 8013d60:	2b5c      	cmp	r3, #92	; 0x5c
 8013d62:	d00a      	beq.n	8013d7a <xTaskCreateStatic+0x66>
	__asm volatile
 8013d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d68:	f383 8811 	msr	BASEPRI, r3
 8013d6c:	f3bf 8f6f 	isb	sy
 8013d70:	f3bf 8f4f 	dsb	sy
 8013d74:	61bb      	str	r3, [r7, #24]
}
 8013d76:	bf00      	nop
 8013d78:	e7fe      	b.n	8013d78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013d7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d01e      	beq.n	8013dc0 <xTaskCreateStatic+0xac>
 8013d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d01b      	beq.n	8013dc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d94:	2202      	movs	r2, #2
 8013d96:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	9303      	str	r3, [sp, #12]
 8013d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da0:	9302      	str	r3, [sp, #8]
 8013da2:	f107 0314 	add.w	r3, r7, #20
 8013da6:	9301      	str	r3, [sp, #4]
 8013da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013daa:	9300      	str	r3, [sp, #0]
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	68b9      	ldr	r1, [r7, #8]
 8013db2:	68f8      	ldr	r0, [r7, #12]
 8013db4:	f000 f850 	bl	8013e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013db8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013dba:	f000 f8dd 	bl	8013f78 <prvAddNewTaskToReadyList>
 8013dbe:	e001      	b.n	8013dc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013dc4:	697b      	ldr	r3, [r7, #20]
	}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	3728      	adds	r7, #40	; 0x28
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}

08013dce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013dce:	b580      	push	{r7, lr}
 8013dd0:	b08c      	sub	sp, #48	; 0x30
 8013dd2:	af04      	add	r7, sp, #16
 8013dd4:	60f8      	str	r0, [r7, #12]
 8013dd6:	60b9      	str	r1, [r7, #8]
 8013dd8:	603b      	str	r3, [r7, #0]
 8013dda:	4613      	mov	r3, r2
 8013ddc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013dde:	88fb      	ldrh	r3, [r7, #6]
 8013de0:	009b      	lsls	r3, r3, #2
 8013de2:	4618      	mov	r0, r3
 8013de4:	f001 fe20 	bl	8015a28 <pvPortMalloc>
 8013de8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013dea:	697b      	ldr	r3, [r7, #20]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d00e      	beq.n	8013e0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013df0:	205c      	movs	r0, #92	; 0x5c
 8013df2:	f001 fe19 	bl	8015a28 <pvPortMalloc>
 8013df6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013df8:	69fb      	ldr	r3, [r7, #28]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d003      	beq.n	8013e06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013dfe:	69fb      	ldr	r3, [r7, #28]
 8013e00:	697a      	ldr	r2, [r7, #20]
 8013e02:	631a      	str	r2, [r3, #48]	; 0x30
 8013e04:	e005      	b.n	8013e12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013e06:	6978      	ldr	r0, [r7, #20]
 8013e08:	f001 feda 	bl	8015bc0 <vPortFree>
 8013e0c:	e001      	b.n	8013e12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013e12:	69fb      	ldr	r3, [r7, #28]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d017      	beq.n	8013e48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013e18:	69fb      	ldr	r3, [r7, #28]
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013e20:	88fa      	ldrh	r2, [r7, #6]
 8013e22:	2300      	movs	r3, #0
 8013e24:	9303      	str	r3, [sp, #12]
 8013e26:	69fb      	ldr	r3, [r7, #28]
 8013e28:	9302      	str	r3, [sp, #8]
 8013e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2c:	9301      	str	r3, [sp, #4]
 8013e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e30:	9300      	str	r3, [sp, #0]
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	68b9      	ldr	r1, [r7, #8]
 8013e36:	68f8      	ldr	r0, [r7, #12]
 8013e38:	f000 f80e 	bl	8013e58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013e3c:	69f8      	ldr	r0, [r7, #28]
 8013e3e:	f000 f89b 	bl	8013f78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013e42:	2301      	movs	r3, #1
 8013e44:	61bb      	str	r3, [r7, #24]
 8013e46:	e002      	b.n	8013e4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013e4e:	69bb      	ldr	r3, [r7, #24]
	}
 8013e50:	4618      	mov	r0, r3
 8013e52:	3720      	adds	r7, #32
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bd80      	pop	{r7, pc}

08013e58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b088      	sub	sp, #32
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	60f8      	str	r0, [r7, #12]
 8013e60:	60b9      	str	r1, [r7, #8]
 8013e62:	607a      	str	r2, [r7, #4]
 8013e64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	009b      	lsls	r3, r3, #2
 8013e6e:	461a      	mov	r2, r3
 8013e70:	21a5      	movs	r1, #165	; 0xa5
 8013e72:	f002 f80b 	bl	8015e8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e7a:	6879      	ldr	r1, [r7, #4]
 8013e7c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013e80:	440b      	add	r3, r1
 8013e82:	009b      	lsls	r3, r3, #2
 8013e84:	4413      	add	r3, r2
 8013e86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013e88:	69bb      	ldr	r3, [r7, #24]
 8013e8a:	f023 0307 	bic.w	r3, r3, #7
 8013e8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013e90:	69bb      	ldr	r3, [r7, #24]
 8013e92:	f003 0307 	and.w	r3, r3, #7
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d00a      	beq.n	8013eb0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8013e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e9e:	f383 8811 	msr	BASEPRI, r3
 8013ea2:	f3bf 8f6f 	isb	sy
 8013ea6:	f3bf 8f4f 	dsb	sy
 8013eaa:	617b      	str	r3, [r7, #20]
}
 8013eac:	bf00      	nop
 8013eae:	e7fe      	b.n	8013eae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d01f      	beq.n	8013ef6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	61fb      	str	r3, [r7, #28]
 8013eba:	e012      	b.n	8013ee2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013ebc:	68ba      	ldr	r2, [r7, #8]
 8013ebe:	69fb      	ldr	r3, [r7, #28]
 8013ec0:	4413      	add	r3, r2
 8013ec2:	7819      	ldrb	r1, [r3, #0]
 8013ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ec6:	69fb      	ldr	r3, [r7, #28]
 8013ec8:	4413      	add	r3, r2
 8013eca:	3334      	adds	r3, #52	; 0x34
 8013ecc:	460a      	mov	r2, r1
 8013ece:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013ed0:	68ba      	ldr	r2, [r7, #8]
 8013ed2:	69fb      	ldr	r3, [r7, #28]
 8013ed4:	4413      	add	r3, r2
 8013ed6:	781b      	ldrb	r3, [r3, #0]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d006      	beq.n	8013eea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013edc:	69fb      	ldr	r3, [r7, #28]
 8013ede:	3301      	adds	r3, #1
 8013ee0:	61fb      	str	r3, [r7, #28]
 8013ee2:	69fb      	ldr	r3, [r7, #28]
 8013ee4:	2b0f      	cmp	r3, #15
 8013ee6:	d9e9      	bls.n	8013ebc <prvInitialiseNewTask+0x64>
 8013ee8:	e000      	b.n	8013eec <prvInitialiseNewTask+0x94>
			{
				break;
 8013eea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eee:	2200      	movs	r2, #0
 8013ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013ef4:	e003      	b.n	8013efe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ef8:	2200      	movs	r2, #0
 8013efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f00:	2b37      	cmp	r3, #55	; 0x37
 8013f02:	d901      	bls.n	8013f08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013f04:	2337      	movs	r3, #55	; 0x37
 8013f06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f16:	2200      	movs	r2, #0
 8013f18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f1c:	3304      	adds	r3, #4
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7ff f882 	bl	8013028 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f26:	3318      	adds	r3, #24
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7ff f87d 	bl	8013028 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f46:	2200      	movs	r2, #0
 8013f48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013f52:	683a      	ldr	r2, [r7, #0]
 8013f54:	68f9      	ldr	r1, [r7, #12]
 8013f56:	69b8      	ldr	r0, [r7, #24]
 8013f58:	f001 fb18 	bl	801558c <pxPortInitialiseStack>
 8013f5c:	4602      	mov	r2, r0
 8013f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d002      	beq.n	8013f6e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013f6e:	bf00      	nop
 8013f70:	3720      	adds	r7, #32
 8013f72:	46bd      	mov	sp, r7
 8013f74:	bd80      	pop	{r7, pc}
	...

08013f78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b082      	sub	sp, #8
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013f80:	f001 fc30 	bl	80157e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013f84:	4b2d      	ldr	r3, [pc, #180]	; (801403c <prvAddNewTaskToReadyList+0xc4>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	3301      	adds	r3, #1
 8013f8a:	4a2c      	ldr	r2, [pc, #176]	; (801403c <prvAddNewTaskToReadyList+0xc4>)
 8013f8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013f8e:	4b2c      	ldr	r3, [pc, #176]	; (8014040 <prvAddNewTaskToReadyList+0xc8>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d109      	bne.n	8013faa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013f96:	4a2a      	ldr	r2, [pc, #168]	; (8014040 <prvAddNewTaskToReadyList+0xc8>)
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013f9c:	4b27      	ldr	r3, [pc, #156]	; (801403c <prvAddNewTaskToReadyList+0xc4>)
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	2b01      	cmp	r3, #1
 8013fa2:	d110      	bne.n	8013fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013fa4:	f000 fdce 	bl	8014b44 <prvInitialiseTaskLists>
 8013fa8:	e00d      	b.n	8013fc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013faa:	4b26      	ldr	r3, [pc, #152]	; (8014044 <prvAddNewTaskToReadyList+0xcc>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d109      	bne.n	8013fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013fb2:	4b23      	ldr	r3, [pc, #140]	; (8014040 <prvAddNewTaskToReadyList+0xc8>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d802      	bhi.n	8013fc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013fc0:	4a1f      	ldr	r2, [pc, #124]	; (8014040 <prvAddNewTaskToReadyList+0xc8>)
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013fc6:	4b20      	ldr	r3, [pc, #128]	; (8014048 <prvAddNewTaskToReadyList+0xd0>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	3301      	adds	r3, #1
 8013fcc:	4a1e      	ldr	r2, [pc, #120]	; (8014048 <prvAddNewTaskToReadyList+0xd0>)
 8013fce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013fd0:	4b1d      	ldr	r3, [pc, #116]	; (8014048 <prvAddNewTaskToReadyList+0xd0>)
 8013fd2:	681a      	ldr	r2, [r3, #0]
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fdc:	4b1b      	ldr	r3, [pc, #108]	; (801404c <prvAddNewTaskToReadyList+0xd4>)
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d903      	bls.n	8013fec <prvAddNewTaskToReadyList+0x74>
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fe8:	4a18      	ldr	r2, [pc, #96]	; (801404c <prvAddNewTaskToReadyList+0xd4>)
 8013fea:	6013      	str	r3, [r2, #0]
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ff0:	4613      	mov	r3, r2
 8013ff2:	009b      	lsls	r3, r3, #2
 8013ff4:	4413      	add	r3, r2
 8013ff6:	009b      	lsls	r3, r3, #2
 8013ff8:	4a15      	ldr	r2, [pc, #84]	; (8014050 <prvAddNewTaskToReadyList+0xd8>)
 8013ffa:	441a      	add	r2, r3
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	3304      	adds	r3, #4
 8014000:	4619      	mov	r1, r3
 8014002:	4610      	mov	r0, r2
 8014004:	f7ff f81d 	bl	8013042 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014008:	f001 fc1c 	bl	8015844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801400c:	4b0d      	ldr	r3, [pc, #52]	; (8014044 <prvAddNewTaskToReadyList+0xcc>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d00e      	beq.n	8014032 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014014:	4b0a      	ldr	r3, [pc, #40]	; (8014040 <prvAddNewTaskToReadyList+0xc8>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801401e:	429a      	cmp	r2, r3
 8014020:	d207      	bcs.n	8014032 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014022:	4b0c      	ldr	r3, [pc, #48]	; (8014054 <prvAddNewTaskToReadyList+0xdc>)
 8014024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014028:	601a      	str	r2, [r3, #0]
 801402a:	f3bf 8f4f 	dsb	sy
 801402e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014032:	bf00      	nop
 8014034:	3708      	adds	r7, #8
 8014036:	46bd      	mov	sp, r7
 8014038:	bd80      	pop	{r7, pc}
 801403a:	bf00      	nop
 801403c:	2400180c 	.word	0x2400180c
 8014040:	24001338 	.word	0x24001338
 8014044:	24001818 	.word	0x24001818
 8014048:	24001828 	.word	0x24001828
 801404c:	24001814 	.word	0x24001814
 8014050:	2400133c 	.word	0x2400133c
 8014054:	e000ed04 	.word	0xe000ed04

08014058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014058:	b580      	push	{r7, lr}
 801405a:	b084      	sub	sp, #16
 801405c:	af00      	add	r7, sp, #0
 801405e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014060:	2300      	movs	r3, #0
 8014062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d017      	beq.n	801409a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801406a:	4b13      	ldr	r3, [pc, #76]	; (80140b8 <vTaskDelay+0x60>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d00a      	beq.n	8014088 <vTaskDelay+0x30>
	__asm volatile
 8014072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014076:	f383 8811 	msr	BASEPRI, r3
 801407a:	f3bf 8f6f 	isb	sy
 801407e:	f3bf 8f4f 	dsb	sy
 8014082:	60bb      	str	r3, [r7, #8]
}
 8014084:	bf00      	nop
 8014086:	e7fe      	b.n	8014086 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014088:	f000 f99a 	bl	80143c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801408c:	2100      	movs	r1, #0
 801408e:	6878      	ldr	r0, [r7, #4]
 8014090:	f000 feba 	bl	8014e08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014094:	f000 f9a2 	bl	80143dc <xTaskResumeAll>
 8014098:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d107      	bne.n	80140b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80140a0:	4b06      	ldr	r3, [pc, #24]	; (80140bc <vTaskDelay+0x64>)
 80140a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140a6:	601a      	str	r2, [r3, #0]
 80140a8:	f3bf 8f4f 	dsb	sy
 80140ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80140b0:	bf00      	nop
 80140b2:	3710      	adds	r7, #16
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}
 80140b8:	24001834 	.word	0x24001834
 80140bc:	e000ed04 	.word	0xe000ed04

080140c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b084      	sub	sp, #16
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80140c8:	f001 fb8c 	bl	80157e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d102      	bne.n	80140d8 <vTaskSuspend+0x18>
 80140d2:	4b30      	ldr	r3, [pc, #192]	; (8014194 <vTaskSuspend+0xd4>)
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	e000      	b.n	80140da <vTaskSuspend+0x1a>
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	3304      	adds	r3, #4
 80140e0:	4618      	mov	r0, r3
 80140e2:	f7ff f80b 	bl	80130fc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d004      	beq.n	80140f8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	3318      	adds	r3, #24
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7ff f802 	bl	80130fc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	3304      	adds	r3, #4
 80140fc:	4619      	mov	r1, r3
 80140fe:	4826      	ldr	r0, [pc, #152]	; (8014198 <vTaskSuspend+0xd8>)
 8014100:	f7fe ff9f 	bl	8013042 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801410a:	b2db      	uxtb	r3, r3
 801410c:	2b01      	cmp	r3, #1
 801410e:	d103      	bne.n	8014118 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	2200      	movs	r2, #0
 8014114:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014118:	f001 fb94 	bl	8015844 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801411c:	4b1f      	ldr	r3, [pc, #124]	; (801419c <vTaskSuspend+0xdc>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d005      	beq.n	8014130 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014124:	f001 fb5e 	bl	80157e4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014128:	f000 fdaa 	bl	8014c80 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801412c:	f001 fb8a 	bl	8015844 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8014130:	4b18      	ldr	r3, [pc, #96]	; (8014194 <vTaskSuspend+0xd4>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	68fa      	ldr	r2, [r7, #12]
 8014136:	429a      	cmp	r2, r3
 8014138:	d127      	bne.n	801418a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 801413a:	4b18      	ldr	r3, [pc, #96]	; (801419c <vTaskSuspend+0xdc>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d017      	beq.n	8014172 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8014142:	4b17      	ldr	r3, [pc, #92]	; (80141a0 <vTaskSuspend+0xe0>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d00a      	beq.n	8014160 <vTaskSuspend+0xa0>
	__asm volatile
 801414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801414e:	f383 8811 	msr	BASEPRI, r3
 8014152:	f3bf 8f6f 	isb	sy
 8014156:	f3bf 8f4f 	dsb	sy
 801415a:	60bb      	str	r3, [r7, #8]
}
 801415c:	bf00      	nop
 801415e:	e7fe      	b.n	801415e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8014160:	4b10      	ldr	r3, [pc, #64]	; (80141a4 <vTaskSuspend+0xe4>)
 8014162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014166:	601a      	str	r2, [r3, #0]
 8014168:	f3bf 8f4f 	dsb	sy
 801416c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014170:	e00b      	b.n	801418a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8014172:	4b09      	ldr	r3, [pc, #36]	; (8014198 <vTaskSuspend+0xd8>)
 8014174:	681a      	ldr	r2, [r3, #0]
 8014176:	4b0c      	ldr	r3, [pc, #48]	; (80141a8 <vTaskSuspend+0xe8>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	429a      	cmp	r2, r3
 801417c:	d103      	bne.n	8014186 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 801417e:	4b05      	ldr	r3, [pc, #20]	; (8014194 <vTaskSuspend+0xd4>)
 8014180:	2200      	movs	r2, #0
 8014182:	601a      	str	r2, [r3, #0]
	}
 8014184:	e001      	b.n	801418a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8014186:	f000 fa91 	bl	80146ac <vTaskSwitchContext>
	}
 801418a:	bf00      	nop
 801418c:	3710      	adds	r7, #16
 801418e:	46bd      	mov	sp, r7
 8014190:	bd80      	pop	{r7, pc}
 8014192:	bf00      	nop
 8014194:	24001338 	.word	0x24001338
 8014198:	240017f8 	.word	0x240017f8
 801419c:	24001818 	.word	0x24001818
 80141a0:	24001834 	.word	0x24001834
 80141a4:	e000ed04 	.word	0xe000ed04
 80141a8:	2400180c 	.word	0x2400180c

080141ac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80141ac:	b480      	push	{r7}
 80141ae:	b087      	sub	sp, #28
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80141b4:	2300      	movs	r3, #0
 80141b6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d10a      	bne.n	80141d8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80141c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c6:	f383 8811 	msr	BASEPRI, r3
 80141ca:	f3bf 8f6f 	isb	sy
 80141ce:	f3bf 8f4f 	dsb	sy
 80141d2:	60fb      	str	r3, [r7, #12]
}
 80141d4:	bf00      	nop
 80141d6:	e7fe      	b.n	80141d6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80141d8:	693b      	ldr	r3, [r7, #16]
 80141da:	695b      	ldr	r3, [r3, #20]
 80141dc:	4a0a      	ldr	r2, [pc, #40]	; (8014208 <prvTaskIsTaskSuspended+0x5c>)
 80141de:	4293      	cmp	r3, r2
 80141e0:	d10a      	bne.n	80141f8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80141e2:	693b      	ldr	r3, [r7, #16]
 80141e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141e6:	4a09      	ldr	r2, [pc, #36]	; (801420c <prvTaskIsTaskSuspended+0x60>)
 80141e8:	4293      	cmp	r3, r2
 80141ea:	d005      	beq.n	80141f8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d101      	bne.n	80141f8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80141f4:	2301      	movs	r3, #1
 80141f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80141f8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80141fa:	4618      	mov	r0, r3
 80141fc:	371c      	adds	r7, #28
 80141fe:	46bd      	mov	sp, r7
 8014200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014204:	4770      	bx	lr
 8014206:	bf00      	nop
 8014208:	240017f8 	.word	0x240017f8
 801420c:	240017cc 	.word	0x240017cc

08014210 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014210:	b580      	push	{r7, lr}
 8014212:	b08a      	sub	sp, #40	; 0x28
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014218:	2300      	movs	r3, #0
 801421a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d10a      	bne.n	801423c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801422a:	f383 8811 	msr	BASEPRI, r3
 801422e:	f3bf 8f6f 	isb	sy
 8014232:	f3bf 8f4f 	dsb	sy
 8014236:	61bb      	str	r3, [r7, #24]
}
 8014238:	bf00      	nop
 801423a:	e7fe      	b.n	801423a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801423c:	f001 fbb4 	bl	80159a8 <vPortValidateInterruptPriority>
	__asm volatile
 8014240:	f3ef 8211 	mrs	r2, BASEPRI
 8014244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014248:	f383 8811 	msr	BASEPRI, r3
 801424c:	f3bf 8f6f 	isb	sy
 8014250:	f3bf 8f4f 	dsb	sy
 8014254:	617a      	str	r2, [r7, #20]
 8014256:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014258:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801425a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 801425c:	6a38      	ldr	r0, [r7, #32]
 801425e:	f7ff ffa5 	bl	80141ac <prvTaskIsTaskSuspended>
 8014262:	4603      	mov	r3, r0
 8014264:	2b00      	cmp	r3, #0
 8014266:	d030      	beq.n	80142ca <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014268:	4b1d      	ldr	r3, [pc, #116]	; (80142e0 <xTaskResumeFromISR+0xd0>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d126      	bne.n	80142be <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014270:	6a3b      	ldr	r3, [r7, #32]
 8014272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014274:	4b1b      	ldr	r3, [pc, #108]	; (80142e4 <xTaskResumeFromISR+0xd4>)
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801427a:	429a      	cmp	r2, r3
 801427c:	d301      	bcc.n	8014282 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 801427e:	2301      	movs	r3, #1
 8014280:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014282:	6a3b      	ldr	r3, [r7, #32]
 8014284:	3304      	adds	r3, #4
 8014286:	4618      	mov	r0, r3
 8014288:	f7fe ff38 	bl	80130fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801428c:	6a3b      	ldr	r3, [r7, #32]
 801428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014290:	4b15      	ldr	r3, [pc, #84]	; (80142e8 <xTaskResumeFromISR+0xd8>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	429a      	cmp	r2, r3
 8014296:	d903      	bls.n	80142a0 <xTaskResumeFromISR+0x90>
 8014298:	6a3b      	ldr	r3, [r7, #32]
 801429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801429c:	4a12      	ldr	r2, [pc, #72]	; (80142e8 <xTaskResumeFromISR+0xd8>)
 801429e:	6013      	str	r3, [r2, #0]
 80142a0:	6a3b      	ldr	r3, [r7, #32]
 80142a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142a4:	4613      	mov	r3, r2
 80142a6:	009b      	lsls	r3, r3, #2
 80142a8:	4413      	add	r3, r2
 80142aa:	009b      	lsls	r3, r3, #2
 80142ac:	4a0f      	ldr	r2, [pc, #60]	; (80142ec <xTaskResumeFromISR+0xdc>)
 80142ae:	441a      	add	r2, r3
 80142b0:	6a3b      	ldr	r3, [r7, #32]
 80142b2:	3304      	adds	r3, #4
 80142b4:	4619      	mov	r1, r3
 80142b6:	4610      	mov	r0, r2
 80142b8:	f7fe fec3 	bl	8013042 <vListInsertEnd>
 80142bc:	e005      	b.n	80142ca <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80142be:	6a3b      	ldr	r3, [r7, #32]
 80142c0:	3318      	adds	r3, #24
 80142c2:	4619      	mov	r1, r3
 80142c4:	480a      	ldr	r0, [pc, #40]	; (80142f0 <xTaskResumeFromISR+0xe0>)
 80142c6:	f7fe febc 	bl	8013042 <vListInsertEnd>
 80142ca:	69fb      	ldr	r3, [r7, #28]
 80142cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	f383 8811 	msr	BASEPRI, r3
}
 80142d4:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80142d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80142d8:	4618      	mov	r0, r3
 80142da:	3728      	adds	r7, #40	; 0x28
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}
 80142e0:	24001834 	.word	0x24001834
 80142e4:	24001338 	.word	0x24001338
 80142e8:	24001814 	.word	0x24001814
 80142ec:	2400133c 	.word	0x2400133c
 80142f0:	240017cc 	.word	0x240017cc

080142f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b08a      	sub	sp, #40	; 0x28
 80142f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80142fa:	2300      	movs	r3, #0
 80142fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80142fe:	2300      	movs	r3, #0
 8014300:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014302:	463a      	mov	r2, r7
 8014304:	1d39      	adds	r1, r7, #4
 8014306:	f107 0308 	add.w	r3, r7, #8
 801430a:	4618      	mov	r0, r3
 801430c:	f7fe fc4a 	bl	8012ba4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014310:	6839      	ldr	r1, [r7, #0]
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	68ba      	ldr	r2, [r7, #8]
 8014316:	9202      	str	r2, [sp, #8]
 8014318:	9301      	str	r3, [sp, #4]
 801431a:	2300      	movs	r3, #0
 801431c:	9300      	str	r3, [sp, #0]
 801431e:	2300      	movs	r3, #0
 8014320:	460a      	mov	r2, r1
 8014322:	4921      	ldr	r1, [pc, #132]	; (80143a8 <vTaskStartScheduler+0xb4>)
 8014324:	4821      	ldr	r0, [pc, #132]	; (80143ac <vTaskStartScheduler+0xb8>)
 8014326:	f7ff fcf5 	bl	8013d14 <xTaskCreateStatic>
 801432a:	4603      	mov	r3, r0
 801432c:	4a20      	ldr	r2, [pc, #128]	; (80143b0 <vTaskStartScheduler+0xbc>)
 801432e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014330:	4b1f      	ldr	r3, [pc, #124]	; (80143b0 <vTaskStartScheduler+0xbc>)
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d002      	beq.n	801433e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014338:	2301      	movs	r3, #1
 801433a:	617b      	str	r3, [r7, #20]
 801433c:	e001      	b.n	8014342 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801433e:	2300      	movs	r3, #0
 8014340:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	2b01      	cmp	r3, #1
 8014346:	d102      	bne.n	801434e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014348:	f000 fdb2 	bl	8014eb0 <xTimerCreateTimerTask>
 801434c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801434e:	697b      	ldr	r3, [r7, #20]
 8014350:	2b01      	cmp	r3, #1
 8014352:	d116      	bne.n	8014382 <vTaskStartScheduler+0x8e>
	__asm volatile
 8014354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014358:	f383 8811 	msr	BASEPRI, r3
 801435c:	f3bf 8f6f 	isb	sy
 8014360:	f3bf 8f4f 	dsb	sy
 8014364:	613b      	str	r3, [r7, #16]
}
 8014366:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014368:	4b12      	ldr	r3, [pc, #72]	; (80143b4 <vTaskStartScheduler+0xc0>)
 801436a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801436e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014370:	4b11      	ldr	r3, [pc, #68]	; (80143b8 <vTaskStartScheduler+0xc4>)
 8014372:	2201      	movs	r2, #1
 8014374:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014376:	4b11      	ldr	r3, [pc, #68]	; (80143bc <vTaskStartScheduler+0xc8>)
 8014378:	2200      	movs	r2, #0
 801437a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801437c:	f001 f990 	bl	80156a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014380:	e00e      	b.n	80143a0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014388:	d10a      	bne.n	80143a0 <vTaskStartScheduler+0xac>
	__asm volatile
 801438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801438e:	f383 8811 	msr	BASEPRI, r3
 8014392:	f3bf 8f6f 	isb	sy
 8014396:	f3bf 8f4f 	dsb	sy
 801439a:	60fb      	str	r3, [r7, #12]
}
 801439c:	bf00      	nop
 801439e:	e7fe      	b.n	801439e <vTaskStartScheduler+0xaa>
}
 80143a0:	bf00      	nop
 80143a2:	3718      	adds	r7, #24
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}
 80143a8:	08017130 	.word	0x08017130
 80143ac:	08014b15 	.word	0x08014b15
 80143b0:	24001830 	.word	0x24001830
 80143b4:	2400182c 	.word	0x2400182c
 80143b8:	24001818 	.word	0x24001818
 80143bc:	24001810 	.word	0x24001810

080143c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80143c0:	b480      	push	{r7}
 80143c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80143c4:	4b04      	ldr	r3, [pc, #16]	; (80143d8 <vTaskSuspendAll+0x18>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	3301      	adds	r3, #1
 80143ca:	4a03      	ldr	r2, [pc, #12]	; (80143d8 <vTaskSuspendAll+0x18>)
 80143cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80143ce:	bf00      	nop
 80143d0:	46bd      	mov	sp, r7
 80143d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d6:	4770      	bx	lr
 80143d8:	24001834 	.word	0x24001834

080143dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b084      	sub	sp, #16
 80143e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80143e2:	2300      	movs	r3, #0
 80143e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80143e6:	2300      	movs	r3, #0
 80143e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80143ea:	4b42      	ldr	r3, [pc, #264]	; (80144f4 <xTaskResumeAll+0x118>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d10a      	bne.n	8014408 <xTaskResumeAll+0x2c>
	__asm volatile
 80143f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143f6:	f383 8811 	msr	BASEPRI, r3
 80143fa:	f3bf 8f6f 	isb	sy
 80143fe:	f3bf 8f4f 	dsb	sy
 8014402:	603b      	str	r3, [r7, #0]
}
 8014404:	bf00      	nop
 8014406:	e7fe      	b.n	8014406 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014408:	f001 f9ec 	bl	80157e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801440c:	4b39      	ldr	r3, [pc, #228]	; (80144f4 <xTaskResumeAll+0x118>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	3b01      	subs	r3, #1
 8014412:	4a38      	ldr	r2, [pc, #224]	; (80144f4 <xTaskResumeAll+0x118>)
 8014414:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014416:	4b37      	ldr	r3, [pc, #220]	; (80144f4 <xTaskResumeAll+0x118>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d162      	bne.n	80144e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801441e:	4b36      	ldr	r3, [pc, #216]	; (80144f8 <xTaskResumeAll+0x11c>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d05e      	beq.n	80144e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014426:	e02f      	b.n	8014488 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014428:	4b34      	ldr	r3, [pc, #208]	; (80144fc <xTaskResumeAll+0x120>)
 801442a:	68db      	ldr	r3, [r3, #12]
 801442c:	68db      	ldr	r3, [r3, #12]
 801442e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	3318      	adds	r3, #24
 8014434:	4618      	mov	r0, r3
 8014436:	f7fe fe61 	bl	80130fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	3304      	adds	r3, #4
 801443e:	4618      	mov	r0, r3
 8014440:	f7fe fe5c 	bl	80130fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014448:	4b2d      	ldr	r3, [pc, #180]	; (8014500 <xTaskResumeAll+0x124>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	429a      	cmp	r2, r3
 801444e:	d903      	bls.n	8014458 <xTaskResumeAll+0x7c>
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014454:	4a2a      	ldr	r2, [pc, #168]	; (8014500 <xTaskResumeAll+0x124>)
 8014456:	6013      	str	r3, [r2, #0]
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801445c:	4613      	mov	r3, r2
 801445e:	009b      	lsls	r3, r3, #2
 8014460:	4413      	add	r3, r2
 8014462:	009b      	lsls	r3, r3, #2
 8014464:	4a27      	ldr	r2, [pc, #156]	; (8014504 <xTaskResumeAll+0x128>)
 8014466:	441a      	add	r2, r3
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	3304      	adds	r3, #4
 801446c:	4619      	mov	r1, r3
 801446e:	4610      	mov	r0, r2
 8014470:	f7fe fde7 	bl	8013042 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014478:	4b23      	ldr	r3, [pc, #140]	; (8014508 <xTaskResumeAll+0x12c>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801447e:	429a      	cmp	r2, r3
 8014480:	d302      	bcc.n	8014488 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014482:	4b22      	ldr	r3, [pc, #136]	; (801450c <xTaskResumeAll+0x130>)
 8014484:	2201      	movs	r2, #1
 8014486:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014488:	4b1c      	ldr	r3, [pc, #112]	; (80144fc <xTaskResumeAll+0x120>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d1cb      	bne.n	8014428 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d001      	beq.n	801449a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014496:	f000 fbf3 	bl	8014c80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801449a:	4b1d      	ldr	r3, [pc, #116]	; (8014510 <xTaskResumeAll+0x134>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d010      	beq.n	80144c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80144a6:	f000 f847 	bl	8014538 <xTaskIncrementTick>
 80144aa:	4603      	mov	r3, r0
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d002      	beq.n	80144b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80144b0:	4b16      	ldr	r3, [pc, #88]	; (801450c <xTaskResumeAll+0x130>)
 80144b2:	2201      	movs	r2, #1
 80144b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	3b01      	subs	r3, #1
 80144ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d1f1      	bne.n	80144a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80144c2:	4b13      	ldr	r3, [pc, #76]	; (8014510 <xTaskResumeAll+0x134>)
 80144c4:	2200      	movs	r2, #0
 80144c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80144c8:	4b10      	ldr	r3, [pc, #64]	; (801450c <xTaskResumeAll+0x130>)
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d009      	beq.n	80144e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80144d0:	2301      	movs	r3, #1
 80144d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80144d4:	4b0f      	ldr	r3, [pc, #60]	; (8014514 <xTaskResumeAll+0x138>)
 80144d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144da:	601a      	str	r2, [r3, #0]
 80144dc:	f3bf 8f4f 	dsb	sy
 80144e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80144e4:	f001 f9ae 	bl	8015844 <vPortExitCritical>

	return xAlreadyYielded;
 80144e8:	68bb      	ldr	r3, [r7, #8]
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	3710      	adds	r7, #16
 80144ee:	46bd      	mov	sp, r7
 80144f0:	bd80      	pop	{r7, pc}
 80144f2:	bf00      	nop
 80144f4:	24001834 	.word	0x24001834
 80144f8:	2400180c 	.word	0x2400180c
 80144fc:	240017cc 	.word	0x240017cc
 8014500:	24001814 	.word	0x24001814
 8014504:	2400133c 	.word	0x2400133c
 8014508:	24001338 	.word	0x24001338
 801450c:	24001820 	.word	0x24001820
 8014510:	2400181c 	.word	0x2400181c
 8014514:	e000ed04 	.word	0xe000ed04

08014518 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014518:	b480      	push	{r7}
 801451a:	b083      	sub	sp, #12
 801451c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801451e:	4b05      	ldr	r3, [pc, #20]	; (8014534 <xTaskGetTickCount+0x1c>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014524:	687b      	ldr	r3, [r7, #4]
}
 8014526:	4618      	mov	r0, r3
 8014528:	370c      	adds	r7, #12
 801452a:	46bd      	mov	sp, r7
 801452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014530:	4770      	bx	lr
 8014532:	bf00      	nop
 8014534:	24001810 	.word	0x24001810

08014538 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b086      	sub	sp, #24
 801453c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801453e:	2300      	movs	r3, #0
 8014540:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014542:	4b4f      	ldr	r3, [pc, #316]	; (8014680 <xTaskIncrementTick+0x148>)
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	2b00      	cmp	r3, #0
 8014548:	f040 808f 	bne.w	801466a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801454c:	4b4d      	ldr	r3, [pc, #308]	; (8014684 <xTaskIncrementTick+0x14c>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	3301      	adds	r3, #1
 8014552:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014554:	4a4b      	ldr	r2, [pc, #300]	; (8014684 <xTaskIncrementTick+0x14c>)
 8014556:	693b      	ldr	r3, [r7, #16]
 8014558:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801455a:	693b      	ldr	r3, [r7, #16]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d120      	bne.n	80145a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014560:	4b49      	ldr	r3, [pc, #292]	; (8014688 <xTaskIncrementTick+0x150>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d00a      	beq.n	8014580 <xTaskIncrementTick+0x48>
	__asm volatile
 801456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801456e:	f383 8811 	msr	BASEPRI, r3
 8014572:	f3bf 8f6f 	isb	sy
 8014576:	f3bf 8f4f 	dsb	sy
 801457a:	603b      	str	r3, [r7, #0]
}
 801457c:	bf00      	nop
 801457e:	e7fe      	b.n	801457e <xTaskIncrementTick+0x46>
 8014580:	4b41      	ldr	r3, [pc, #260]	; (8014688 <xTaskIncrementTick+0x150>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	60fb      	str	r3, [r7, #12]
 8014586:	4b41      	ldr	r3, [pc, #260]	; (801468c <xTaskIncrementTick+0x154>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	4a3f      	ldr	r2, [pc, #252]	; (8014688 <xTaskIncrementTick+0x150>)
 801458c:	6013      	str	r3, [r2, #0]
 801458e:	4a3f      	ldr	r2, [pc, #252]	; (801468c <xTaskIncrementTick+0x154>)
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	6013      	str	r3, [r2, #0]
 8014594:	4b3e      	ldr	r3, [pc, #248]	; (8014690 <xTaskIncrementTick+0x158>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	3301      	adds	r3, #1
 801459a:	4a3d      	ldr	r2, [pc, #244]	; (8014690 <xTaskIncrementTick+0x158>)
 801459c:	6013      	str	r3, [r2, #0]
 801459e:	f000 fb6f 	bl	8014c80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80145a2:	4b3c      	ldr	r3, [pc, #240]	; (8014694 <xTaskIncrementTick+0x15c>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	693a      	ldr	r2, [r7, #16]
 80145a8:	429a      	cmp	r2, r3
 80145aa:	d349      	bcc.n	8014640 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80145ac:	4b36      	ldr	r3, [pc, #216]	; (8014688 <xTaskIncrementTick+0x150>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d104      	bne.n	80145c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145b6:	4b37      	ldr	r3, [pc, #220]	; (8014694 <xTaskIncrementTick+0x15c>)
 80145b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80145bc:	601a      	str	r2, [r3, #0]
					break;
 80145be:	e03f      	b.n	8014640 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145c0:	4b31      	ldr	r3, [pc, #196]	; (8014688 <xTaskIncrementTick+0x150>)
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	68db      	ldr	r3, [r3, #12]
 80145c6:	68db      	ldr	r3, [r3, #12]
 80145c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	685b      	ldr	r3, [r3, #4]
 80145ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80145d0:	693a      	ldr	r2, [r7, #16]
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d203      	bcs.n	80145e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80145d8:	4a2e      	ldr	r2, [pc, #184]	; (8014694 <xTaskIncrementTick+0x15c>)
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80145de:	e02f      	b.n	8014640 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	3304      	adds	r3, #4
 80145e4:	4618      	mov	r0, r3
 80145e6:	f7fe fd89 	bl	80130fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80145ea:	68bb      	ldr	r3, [r7, #8]
 80145ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d004      	beq.n	80145fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80145f2:	68bb      	ldr	r3, [r7, #8]
 80145f4:	3318      	adds	r3, #24
 80145f6:	4618      	mov	r0, r3
 80145f8:	f7fe fd80 	bl	80130fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014600:	4b25      	ldr	r3, [pc, #148]	; (8014698 <xTaskIncrementTick+0x160>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	429a      	cmp	r2, r3
 8014606:	d903      	bls.n	8014610 <xTaskIncrementTick+0xd8>
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801460c:	4a22      	ldr	r2, [pc, #136]	; (8014698 <xTaskIncrementTick+0x160>)
 801460e:	6013      	str	r3, [r2, #0]
 8014610:	68bb      	ldr	r3, [r7, #8]
 8014612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014614:	4613      	mov	r3, r2
 8014616:	009b      	lsls	r3, r3, #2
 8014618:	4413      	add	r3, r2
 801461a:	009b      	lsls	r3, r3, #2
 801461c:	4a1f      	ldr	r2, [pc, #124]	; (801469c <xTaskIncrementTick+0x164>)
 801461e:	441a      	add	r2, r3
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	3304      	adds	r3, #4
 8014624:	4619      	mov	r1, r3
 8014626:	4610      	mov	r0, r2
 8014628:	f7fe fd0b 	bl	8013042 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014630:	4b1b      	ldr	r3, [pc, #108]	; (80146a0 <xTaskIncrementTick+0x168>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014636:	429a      	cmp	r2, r3
 8014638:	d3b8      	bcc.n	80145ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801463a:	2301      	movs	r3, #1
 801463c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801463e:	e7b5      	b.n	80145ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014640:	4b17      	ldr	r3, [pc, #92]	; (80146a0 <xTaskIncrementTick+0x168>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014646:	4915      	ldr	r1, [pc, #84]	; (801469c <xTaskIncrementTick+0x164>)
 8014648:	4613      	mov	r3, r2
 801464a:	009b      	lsls	r3, r3, #2
 801464c:	4413      	add	r3, r2
 801464e:	009b      	lsls	r3, r3, #2
 8014650:	440b      	add	r3, r1
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	2b01      	cmp	r3, #1
 8014656:	d901      	bls.n	801465c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014658:	2301      	movs	r3, #1
 801465a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801465c:	4b11      	ldr	r3, [pc, #68]	; (80146a4 <xTaskIncrementTick+0x16c>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d007      	beq.n	8014674 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014664:	2301      	movs	r3, #1
 8014666:	617b      	str	r3, [r7, #20]
 8014668:	e004      	b.n	8014674 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801466a:	4b0f      	ldr	r3, [pc, #60]	; (80146a8 <xTaskIncrementTick+0x170>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	3301      	adds	r3, #1
 8014670:	4a0d      	ldr	r2, [pc, #52]	; (80146a8 <xTaskIncrementTick+0x170>)
 8014672:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014674:	697b      	ldr	r3, [r7, #20]
}
 8014676:	4618      	mov	r0, r3
 8014678:	3718      	adds	r7, #24
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}
 801467e:	bf00      	nop
 8014680:	24001834 	.word	0x24001834
 8014684:	24001810 	.word	0x24001810
 8014688:	240017c4 	.word	0x240017c4
 801468c:	240017c8 	.word	0x240017c8
 8014690:	24001824 	.word	0x24001824
 8014694:	2400182c 	.word	0x2400182c
 8014698:	24001814 	.word	0x24001814
 801469c:	2400133c 	.word	0x2400133c
 80146a0:	24001338 	.word	0x24001338
 80146a4:	24001820 	.word	0x24001820
 80146a8:	2400181c 	.word	0x2400181c

080146ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80146ac:	b480      	push	{r7}
 80146ae:	b085      	sub	sp, #20
 80146b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80146b2:	4b28      	ldr	r3, [pc, #160]	; (8014754 <vTaskSwitchContext+0xa8>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d003      	beq.n	80146c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80146ba:	4b27      	ldr	r3, [pc, #156]	; (8014758 <vTaskSwitchContext+0xac>)
 80146bc:	2201      	movs	r2, #1
 80146be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80146c0:	e041      	b.n	8014746 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80146c2:	4b25      	ldr	r3, [pc, #148]	; (8014758 <vTaskSwitchContext+0xac>)
 80146c4:	2200      	movs	r2, #0
 80146c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80146c8:	4b24      	ldr	r3, [pc, #144]	; (801475c <vTaskSwitchContext+0xb0>)
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	60fb      	str	r3, [r7, #12]
 80146ce:	e010      	b.n	80146f2 <vTaskSwitchContext+0x46>
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d10a      	bne.n	80146ec <vTaskSwitchContext+0x40>
	__asm volatile
 80146d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146da:	f383 8811 	msr	BASEPRI, r3
 80146de:	f3bf 8f6f 	isb	sy
 80146e2:	f3bf 8f4f 	dsb	sy
 80146e6:	607b      	str	r3, [r7, #4]
}
 80146e8:	bf00      	nop
 80146ea:	e7fe      	b.n	80146ea <vTaskSwitchContext+0x3e>
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	3b01      	subs	r3, #1
 80146f0:	60fb      	str	r3, [r7, #12]
 80146f2:	491b      	ldr	r1, [pc, #108]	; (8014760 <vTaskSwitchContext+0xb4>)
 80146f4:	68fa      	ldr	r2, [r7, #12]
 80146f6:	4613      	mov	r3, r2
 80146f8:	009b      	lsls	r3, r3, #2
 80146fa:	4413      	add	r3, r2
 80146fc:	009b      	lsls	r3, r3, #2
 80146fe:	440b      	add	r3, r1
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d0e4      	beq.n	80146d0 <vTaskSwitchContext+0x24>
 8014706:	68fa      	ldr	r2, [r7, #12]
 8014708:	4613      	mov	r3, r2
 801470a:	009b      	lsls	r3, r3, #2
 801470c:	4413      	add	r3, r2
 801470e:	009b      	lsls	r3, r3, #2
 8014710:	4a13      	ldr	r2, [pc, #76]	; (8014760 <vTaskSwitchContext+0xb4>)
 8014712:	4413      	add	r3, r2
 8014714:	60bb      	str	r3, [r7, #8]
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	685b      	ldr	r3, [r3, #4]
 801471a:	685a      	ldr	r2, [r3, #4]
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	605a      	str	r2, [r3, #4]
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	685a      	ldr	r2, [r3, #4]
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	3308      	adds	r3, #8
 8014728:	429a      	cmp	r2, r3
 801472a:	d104      	bne.n	8014736 <vTaskSwitchContext+0x8a>
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	685b      	ldr	r3, [r3, #4]
 8014730:	685a      	ldr	r2, [r3, #4]
 8014732:	68bb      	ldr	r3, [r7, #8]
 8014734:	605a      	str	r2, [r3, #4]
 8014736:	68bb      	ldr	r3, [r7, #8]
 8014738:	685b      	ldr	r3, [r3, #4]
 801473a:	68db      	ldr	r3, [r3, #12]
 801473c:	4a09      	ldr	r2, [pc, #36]	; (8014764 <vTaskSwitchContext+0xb8>)
 801473e:	6013      	str	r3, [r2, #0]
 8014740:	4a06      	ldr	r2, [pc, #24]	; (801475c <vTaskSwitchContext+0xb0>)
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	6013      	str	r3, [r2, #0]
}
 8014746:	bf00      	nop
 8014748:	3714      	adds	r7, #20
 801474a:	46bd      	mov	sp, r7
 801474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014750:	4770      	bx	lr
 8014752:	bf00      	nop
 8014754:	24001834 	.word	0x24001834
 8014758:	24001820 	.word	0x24001820
 801475c:	24001814 	.word	0x24001814
 8014760:	2400133c 	.word	0x2400133c
 8014764:	24001338 	.word	0x24001338

08014768 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b084      	sub	sp, #16
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
 8014770:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d10a      	bne.n	801478e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801477c:	f383 8811 	msr	BASEPRI, r3
 8014780:	f3bf 8f6f 	isb	sy
 8014784:	f3bf 8f4f 	dsb	sy
 8014788:	60fb      	str	r3, [r7, #12]
}
 801478a:	bf00      	nop
 801478c:	e7fe      	b.n	801478c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801478e:	4b07      	ldr	r3, [pc, #28]	; (80147ac <vTaskPlaceOnEventList+0x44>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	3318      	adds	r3, #24
 8014794:	4619      	mov	r1, r3
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f7fe fc77 	bl	801308a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801479c:	2101      	movs	r1, #1
 801479e:	6838      	ldr	r0, [r7, #0]
 80147a0:	f000 fb32 	bl	8014e08 <prvAddCurrentTaskToDelayedList>
}
 80147a4:	bf00      	nop
 80147a6:	3710      	adds	r7, #16
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}
 80147ac:	24001338 	.word	0x24001338

080147b0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b086      	sub	sp, #24
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	60f8      	str	r0, [r7, #12]
 80147b8:	60b9      	str	r1, [r7, #8]
 80147ba:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d10a      	bne.n	80147d8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80147c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c6:	f383 8811 	msr	BASEPRI, r3
 80147ca:	f3bf 8f6f 	isb	sy
 80147ce:	f3bf 8f4f 	dsb	sy
 80147d2:	617b      	str	r3, [r7, #20]
}
 80147d4:	bf00      	nop
 80147d6:	e7fe      	b.n	80147d6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80147d8:	4b11      	ldr	r3, [pc, #68]	; (8014820 <vTaskPlaceOnUnorderedEventList+0x70>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d10a      	bne.n	80147f6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80147e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147e4:	f383 8811 	msr	BASEPRI, r3
 80147e8:	f3bf 8f6f 	isb	sy
 80147ec:	f3bf 8f4f 	dsb	sy
 80147f0:	613b      	str	r3, [r7, #16]
}
 80147f2:	bf00      	nop
 80147f4:	e7fe      	b.n	80147f4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80147f6:	4b0b      	ldr	r3, [pc, #44]	; (8014824 <vTaskPlaceOnUnorderedEventList+0x74>)
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	68ba      	ldr	r2, [r7, #8]
 80147fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014800:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014802:	4b08      	ldr	r3, [pc, #32]	; (8014824 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	3318      	adds	r3, #24
 8014808:	4619      	mov	r1, r3
 801480a:	68f8      	ldr	r0, [r7, #12]
 801480c:	f7fe fc19 	bl	8013042 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014810:	2101      	movs	r1, #1
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f000 faf8 	bl	8014e08 <prvAddCurrentTaskToDelayedList>
}
 8014818:	bf00      	nop
 801481a:	3718      	adds	r7, #24
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	24001834 	.word	0x24001834
 8014824:	24001338 	.word	0x24001338

08014828 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014828:	b580      	push	{r7, lr}
 801482a:	b086      	sub	sp, #24
 801482c:	af00      	add	r7, sp, #0
 801482e:	60f8      	str	r0, [r7, #12]
 8014830:	60b9      	str	r1, [r7, #8]
 8014832:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d10a      	bne.n	8014850 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801483e:	f383 8811 	msr	BASEPRI, r3
 8014842:	f3bf 8f6f 	isb	sy
 8014846:	f3bf 8f4f 	dsb	sy
 801484a:	617b      	str	r3, [r7, #20]
}
 801484c:	bf00      	nop
 801484e:	e7fe      	b.n	801484e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014850:	4b0a      	ldr	r3, [pc, #40]	; (801487c <vTaskPlaceOnEventListRestricted+0x54>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	3318      	adds	r3, #24
 8014856:	4619      	mov	r1, r3
 8014858:	68f8      	ldr	r0, [r7, #12]
 801485a:	f7fe fbf2 	bl	8013042 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d002      	beq.n	801486a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014864:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014868:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801486a:	6879      	ldr	r1, [r7, #4]
 801486c:	68b8      	ldr	r0, [r7, #8]
 801486e:	f000 facb 	bl	8014e08 <prvAddCurrentTaskToDelayedList>
	}
 8014872:	bf00      	nop
 8014874:	3718      	adds	r7, #24
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	24001338 	.word	0x24001338

08014880 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b086      	sub	sp, #24
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014890:	693b      	ldr	r3, [r7, #16]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d10a      	bne.n	80148ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801489a:	f383 8811 	msr	BASEPRI, r3
 801489e:	f3bf 8f6f 	isb	sy
 80148a2:	f3bf 8f4f 	dsb	sy
 80148a6:	60fb      	str	r3, [r7, #12]
}
 80148a8:	bf00      	nop
 80148aa:	e7fe      	b.n	80148aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80148ac:	693b      	ldr	r3, [r7, #16]
 80148ae:	3318      	adds	r3, #24
 80148b0:	4618      	mov	r0, r3
 80148b2:	f7fe fc23 	bl	80130fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148b6:	4b1e      	ldr	r3, [pc, #120]	; (8014930 <xTaskRemoveFromEventList+0xb0>)
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d11d      	bne.n	80148fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	3304      	adds	r3, #4
 80148c2:	4618      	mov	r0, r3
 80148c4:	f7fe fc1a 	bl	80130fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80148c8:	693b      	ldr	r3, [r7, #16]
 80148ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148cc:	4b19      	ldr	r3, [pc, #100]	; (8014934 <xTaskRemoveFromEventList+0xb4>)
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d903      	bls.n	80148dc <xTaskRemoveFromEventList+0x5c>
 80148d4:	693b      	ldr	r3, [r7, #16]
 80148d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148d8:	4a16      	ldr	r2, [pc, #88]	; (8014934 <xTaskRemoveFromEventList+0xb4>)
 80148da:	6013      	str	r3, [r2, #0]
 80148dc:	693b      	ldr	r3, [r7, #16]
 80148de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148e0:	4613      	mov	r3, r2
 80148e2:	009b      	lsls	r3, r3, #2
 80148e4:	4413      	add	r3, r2
 80148e6:	009b      	lsls	r3, r3, #2
 80148e8:	4a13      	ldr	r2, [pc, #76]	; (8014938 <xTaskRemoveFromEventList+0xb8>)
 80148ea:	441a      	add	r2, r3
 80148ec:	693b      	ldr	r3, [r7, #16]
 80148ee:	3304      	adds	r3, #4
 80148f0:	4619      	mov	r1, r3
 80148f2:	4610      	mov	r0, r2
 80148f4:	f7fe fba5 	bl	8013042 <vListInsertEnd>
 80148f8:	e005      	b.n	8014906 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80148fa:	693b      	ldr	r3, [r7, #16]
 80148fc:	3318      	adds	r3, #24
 80148fe:	4619      	mov	r1, r3
 8014900:	480e      	ldr	r0, [pc, #56]	; (801493c <xTaskRemoveFromEventList+0xbc>)
 8014902:	f7fe fb9e 	bl	8013042 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014906:	693b      	ldr	r3, [r7, #16]
 8014908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801490a:	4b0d      	ldr	r3, [pc, #52]	; (8014940 <xTaskRemoveFromEventList+0xc0>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014910:	429a      	cmp	r2, r3
 8014912:	d905      	bls.n	8014920 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014914:	2301      	movs	r3, #1
 8014916:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014918:	4b0a      	ldr	r3, [pc, #40]	; (8014944 <xTaskRemoveFromEventList+0xc4>)
 801491a:	2201      	movs	r2, #1
 801491c:	601a      	str	r2, [r3, #0]
 801491e:	e001      	b.n	8014924 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014920:	2300      	movs	r3, #0
 8014922:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014924:	697b      	ldr	r3, [r7, #20]
}
 8014926:	4618      	mov	r0, r3
 8014928:	3718      	adds	r7, #24
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
 801492e:	bf00      	nop
 8014930:	24001834 	.word	0x24001834
 8014934:	24001814 	.word	0x24001814
 8014938:	2400133c 	.word	0x2400133c
 801493c:	240017cc 	.word	0x240017cc
 8014940:	24001338 	.word	0x24001338
 8014944:	24001820 	.word	0x24001820

08014948 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b086      	sub	sp, #24
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
 8014950:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014952:	4b29      	ldr	r3, [pc, #164]	; (80149f8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d10a      	bne.n	8014970 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801495a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801495e:	f383 8811 	msr	BASEPRI, r3
 8014962:	f3bf 8f6f 	isb	sy
 8014966:	f3bf 8f4f 	dsb	sy
 801496a:	613b      	str	r3, [r7, #16]
}
 801496c:	bf00      	nop
 801496e:	e7fe      	b.n	801496e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	68db      	ldr	r3, [r3, #12]
 801497e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014980:	697b      	ldr	r3, [r7, #20]
 8014982:	2b00      	cmp	r3, #0
 8014984:	d10a      	bne.n	801499c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801498a:	f383 8811 	msr	BASEPRI, r3
 801498e:	f3bf 8f6f 	isb	sy
 8014992:	f3bf 8f4f 	dsb	sy
 8014996:	60fb      	str	r3, [r7, #12]
}
 8014998:	bf00      	nop
 801499a:	e7fe      	b.n	801499a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f7fe fbad 	bl	80130fc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	3304      	adds	r3, #4
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7fe fba8 	bl	80130fc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80149ac:	697b      	ldr	r3, [r7, #20]
 80149ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149b0:	4b12      	ldr	r3, [pc, #72]	; (80149fc <vTaskRemoveFromUnorderedEventList+0xb4>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	429a      	cmp	r2, r3
 80149b6:	d903      	bls.n	80149c0 <vTaskRemoveFromUnorderedEventList+0x78>
 80149b8:	697b      	ldr	r3, [r7, #20]
 80149ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149bc:	4a0f      	ldr	r2, [pc, #60]	; (80149fc <vTaskRemoveFromUnorderedEventList+0xb4>)
 80149be:	6013      	str	r3, [r2, #0]
 80149c0:	697b      	ldr	r3, [r7, #20]
 80149c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149c4:	4613      	mov	r3, r2
 80149c6:	009b      	lsls	r3, r3, #2
 80149c8:	4413      	add	r3, r2
 80149ca:	009b      	lsls	r3, r3, #2
 80149cc:	4a0c      	ldr	r2, [pc, #48]	; (8014a00 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80149ce:	441a      	add	r2, r3
 80149d0:	697b      	ldr	r3, [r7, #20]
 80149d2:	3304      	adds	r3, #4
 80149d4:	4619      	mov	r1, r3
 80149d6:	4610      	mov	r0, r2
 80149d8:	f7fe fb33 	bl	8013042 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149e0:	4b08      	ldr	r3, [pc, #32]	; (8014a04 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d902      	bls.n	80149f0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80149ea:	4b07      	ldr	r3, [pc, #28]	; (8014a08 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80149ec:	2201      	movs	r2, #1
 80149ee:	601a      	str	r2, [r3, #0]
	}
}
 80149f0:	bf00      	nop
 80149f2:	3718      	adds	r7, #24
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	24001834 	.word	0x24001834
 80149fc:	24001814 	.word	0x24001814
 8014a00:	2400133c 	.word	0x2400133c
 8014a04:	24001338 	.word	0x24001338
 8014a08:	24001820 	.word	0x24001820

08014a0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	b083      	sub	sp, #12
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014a14:	4b06      	ldr	r3, [pc, #24]	; (8014a30 <vTaskInternalSetTimeOutState+0x24>)
 8014a16:	681a      	ldr	r2, [r3, #0]
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014a1c:	4b05      	ldr	r3, [pc, #20]	; (8014a34 <vTaskInternalSetTimeOutState+0x28>)
 8014a1e:	681a      	ldr	r2, [r3, #0]
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	605a      	str	r2, [r3, #4]
}
 8014a24:	bf00      	nop
 8014a26:	370c      	adds	r7, #12
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2e:	4770      	bx	lr
 8014a30:	24001824 	.word	0x24001824
 8014a34:	24001810 	.word	0x24001810

08014a38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b088      	sub	sp, #32
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
 8014a40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d10a      	bne.n	8014a5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a4c:	f383 8811 	msr	BASEPRI, r3
 8014a50:	f3bf 8f6f 	isb	sy
 8014a54:	f3bf 8f4f 	dsb	sy
 8014a58:	613b      	str	r3, [r7, #16]
}
 8014a5a:	bf00      	nop
 8014a5c:	e7fe      	b.n	8014a5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d10a      	bne.n	8014a7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a68:	f383 8811 	msr	BASEPRI, r3
 8014a6c:	f3bf 8f6f 	isb	sy
 8014a70:	f3bf 8f4f 	dsb	sy
 8014a74:	60fb      	str	r3, [r7, #12]
}
 8014a76:	bf00      	nop
 8014a78:	e7fe      	b.n	8014a78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014a7a:	f000 feb3 	bl	80157e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014a7e:	4b1d      	ldr	r3, [pc, #116]	; (8014af4 <xTaskCheckForTimeOut+0xbc>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	685b      	ldr	r3, [r3, #4]
 8014a88:	69ba      	ldr	r2, [r7, #24]
 8014a8a:	1ad3      	subs	r3, r2, r3
 8014a8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a96:	d102      	bne.n	8014a9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	61fb      	str	r3, [r7, #28]
 8014a9c:	e023      	b.n	8014ae6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681a      	ldr	r2, [r3, #0]
 8014aa2:	4b15      	ldr	r3, [pc, #84]	; (8014af8 <xTaskCheckForTimeOut+0xc0>)
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	429a      	cmp	r2, r3
 8014aa8:	d007      	beq.n	8014aba <xTaskCheckForTimeOut+0x82>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	685b      	ldr	r3, [r3, #4]
 8014aae:	69ba      	ldr	r2, [r7, #24]
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	d302      	bcc.n	8014aba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	61fb      	str	r3, [r7, #28]
 8014ab8:	e015      	b.n	8014ae6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	697a      	ldr	r2, [r7, #20]
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	d20b      	bcs.n	8014adc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	681a      	ldr	r2, [r3, #0]
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	1ad2      	subs	r2, r2, r3
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014ad0:	6878      	ldr	r0, [r7, #4]
 8014ad2:	f7ff ff9b 	bl	8014a0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	61fb      	str	r3, [r7, #28]
 8014ada:	e004      	b.n	8014ae6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014adc:	683b      	ldr	r3, [r7, #0]
 8014ade:	2200      	movs	r2, #0
 8014ae0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014ae2:	2301      	movs	r3, #1
 8014ae4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014ae6:	f000 fead 	bl	8015844 <vPortExitCritical>

	return xReturn;
 8014aea:	69fb      	ldr	r3, [r7, #28]
}
 8014aec:	4618      	mov	r0, r3
 8014aee:	3720      	adds	r7, #32
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd80      	pop	{r7, pc}
 8014af4:	24001810 	.word	0x24001810
 8014af8:	24001824 	.word	0x24001824

08014afc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014afc:	b480      	push	{r7}
 8014afe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014b00:	4b03      	ldr	r3, [pc, #12]	; (8014b10 <vTaskMissedYield+0x14>)
 8014b02:	2201      	movs	r2, #1
 8014b04:	601a      	str	r2, [r3, #0]
}
 8014b06:	bf00      	nop
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0e:	4770      	bx	lr
 8014b10:	24001820 	.word	0x24001820

08014b14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b082      	sub	sp, #8
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014b1c:	f000 f852 	bl	8014bc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014b20:	4b06      	ldr	r3, [pc, #24]	; (8014b3c <prvIdleTask+0x28>)
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	2b01      	cmp	r3, #1
 8014b26:	d9f9      	bls.n	8014b1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014b28:	4b05      	ldr	r3, [pc, #20]	; (8014b40 <prvIdleTask+0x2c>)
 8014b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b2e:	601a      	str	r2, [r3, #0]
 8014b30:	f3bf 8f4f 	dsb	sy
 8014b34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014b38:	e7f0      	b.n	8014b1c <prvIdleTask+0x8>
 8014b3a:	bf00      	nop
 8014b3c:	2400133c 	.word	0x2400133c
 8014b40:	e000ed04 	.word	0xe000ed04

08014b44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b082      	sub	sp, #8
 8014b48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	607b      	str	r3, [r7, #4]
 8014b4e:	e00c      	b.n	8014b6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014b50:	687a      	ldr	r2, [r7, #4]
 8014b52:	4613      	mov	r3, r2
 8014b54:	009b      	lsls	r3, r3, #2
 8014b56:	4413      	add	r3, r2
 8014b58:	009b      	lsls	r3, r3, #2
 8014b5a:	4a12      	ldr	r2, [pc, #72]	; (8014ba4 <prvInitialiseTaskLists+0x60>)
 8014b5c:	4413      	add	r3, r2
 8014b5e:	4618      	mov	r0, r3
 8014b60:	f7fe fa42 	bl	8012fe8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	3301      	adds	r3, #1
 8014b68:	607b      	str	r3, [r7, #4]
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2b37      	cmp	r3, #55	; 0x37
 8014b6e:	d9ef      	bls.n	8014b50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014b70:	480d      	ldr	r0, [pc, #52]	; (8014ba8 <prvInitialiseTaskLists+0x64>)
 8014b72:	f7fe fa39 	bl	8012fe8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014b76:	480d      	ldr	r0, [pc, #52]	; (8014bac <prvInitialiseTaskLists+0x68>)
 8014b78:	f7fe fa36 	bl	8012fe8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014b7c:	480c      	ldr	r0, [pc, #48]	; (8014bb0 <prvInitialiseTaskLists+0x6c>)
 8014b7e:	f7fe fa33 	bl	8012fe8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014b82:	480c      	ldr	r0, [pc, #48]	; (8014bb4 <prvInitialiseTaskLists+0x70>)
 8014b84:	f7fe fa30 	bl	8012fe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014b88:	480b      	ldr	r0, [pc, #44]	; (8014bb8 <prvInitialiseTaskLists+0x74>)
 8014b8a:	f7fe fa2d 	bl	8012fe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014b8e:	4b0b      	ldr	r3, [pc, #44]	; (8014bbc <prvInitialiseTaskLists+0x78>)
 8014b90:	4a05      	ldr	r2, [pc, #20]	; (8014ba8 <prvInitialiseTaskLists+0x64>)
 8014b92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014b94:	4b0a      	ldr	r3, [pc, #40]	; (8014bc0 <prvInitialiseTaskLists+0x7c>)
 8014b96:	4a05      	ldr	r2, [pc, #20]	; (8014bac <prvInitialiseTaskLists+0x68>)
 8014b98:	601a      	str	r2, [r3, #0]
}
 8014b9a:	bf00      	nop
 8014b9c:	3708      	adds	r7, #8
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}
 8014ba2:	bf00      	nop
 8014ba4:	2400133c 	.word	0x2400133c
 8014ba8:	2400179c 	.word	0x2400179c
 8014bac:	240017b0 	.word	0x240017b0
 8014bb0:	240017cc 	.word	0x240017cc
 8014bb4:	240017e0 	.word	0x240017e0
 8014bb8:	240017f8 	.word	0x240017f8
 8014bbc:	240017c4 	.word	0x240017c4
 8014bc0:	240017c8 	.word	0x240017c8

08014bc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b082      	sub	sp, #8
 8014bc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014bca:	e019      	b.n	8014c00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014bcc:	f000 fe0a 	bl	80157e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014bd0:	4b10      	ldr	r3, [pc, #64]	; (8014c14 <prvCheckTasksWaitingTermination+0x50>)
 8014bd2:	68db      	ldr	r3, [r3, #12]
 8014bd4:	68db      	ldr	r3, [r3, #12]
 8014bd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	3304      	adds	r3, #4
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7fe fa8d 	bl	80130fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014be2:	4b0d      	ldr	r3, [pc, #52]	; (8014c18 <prvCheckTasksWaitingTermination+0x54>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	3b01      	subs	r3, #1
 8014be8:	4a0b      	ldr	r2, [pc, #44]	; (8014c18 <prvCheckTasksWaitingTermination+0x54>)
 8014bea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014bec:	4b0b      	ldr	r3, [pc, #44]	; (8014c1c <prvCheckTasksWaitingTermination+0x58>)
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	3b01      	subs	r3, #1
 8014bf2:	4a0a      	ldr	r2, [pc, #40]	; (8014c1c <prvCheckTasksWaitingTermination+0x58>)
 8014bf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014bf6:	f000 fe25 	bl	8015844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f000 f810 	bl	8014c20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014c00:	4b06      	ldr	r3, [pc, #24]	; (8014c1c <prvCheckTasksWaitingTermination+0x58>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d1e1      	bne.n	8014bcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014c08:	bf00      	nop
 8014c0a:	bf00      	nop
 8014c0c:	3708      	adds	r7, #8
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}
 8014c12:	bf00      	nop
 8014c14:	240017e0 	.word	0x240017e0
 8014c18:	2400180c 	.word	0x2400180c
 8014c1c:	240017f4 	.word	0x240017f4

08014c20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b084      	sub	sp, #16
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d108      	bne.n	8014c44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c36:	4618      	mov	r0, r3
 8014c38:	f000 ffc2 	bl	8015bc0 <vPortFree>
				vPortFree( pxTCB );
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f000 ffbf 	bl	8015bc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014c42:	e018      	b.n	8014c76 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014c4a:	2b01      	cmp	r3, #1
 8014c4c:	d103      	bne.n	8014c56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f000 ffb6 	bl	8015bc0 <vPortFree>
	}
 8014c54:	e00f      	b.n	8014c76 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014c5c:	2b02      	cmp	r3, #2
 8014c5e:	d00a      	beq.n	8014c76 <prvDeleteTCB+0x56>
	__asm volatile
 8014c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c64:	f383 8811 	msr	BASEPRI, r3
 8014c68:	f3bf 8f6f 	isb	sy
 8014c6c:	f3bf 8f4f 	dsb	sy
 8014c70:	60fb      	str	r3, [r7, #12]
}
 8014c72:	bf00      	nop
 8014c74:	e7fe      	b.n	8014c74 <prvDeleteTCB+0x54>
	}
 8014c76:	bf00      	nop
 8014c78:	3710      	adds	r7, #16
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}
	...

08014c80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014c80:	b480      	push	{r7}
 8014c82:	b083      	sub	sp, #12
 8014c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014c86:	4b0c      	ldr	r3, [pc, #48]	; (8014cb8 <prvResetNextTaskUnblockTime+0x38>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d104      	bne.n	8014c9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014c90:	4b0a      	ldr	r3, [pc, #40]	; (8014cbc <prvResetNextTaskUnblockTime+0x3c>)
 8014c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014c98:	e008      	b.n	8014cac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c9a:	4b07      	ldr	r3, [pc, #28]	; (8014cb8 <prvResetNextTaskUnblockTime+0x38>)
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	68db      	ldr	r3, [r3, #12]
 8014ca0:	68db      	ldr	r3, [r3, #12]
 8014ca2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	685b      	ldr	r3, [r3, #4]
 8014ca8:	4a04      	ldr	r2, [pc, #16]	; (8014cbc <prvResetNextTaskUnblockTime+0x3c>)
 8014caa:	6013      	str	r3, [r2, #0]
}
 8014cac:	bf00      	nop
 8014cae:	370c      	adds	r7, #12
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb6:	4770      	bx	lr
 8014cb8:	240017c4 	.word	0x240017c4
 8014cbc:	2400182c 	.word	0x2400182c

08014cc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014cc0:	b480      	push	{r7}
 8014cc2:	b083      	sub	sp, #12
 8014cc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014cc6:	4b0b      	ldr	r3, [pc, #44]	; (8014cf4 <xTaskGetSchedulerState+0x34>)
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d102      	bne.n	8014cd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014cce:	2301      	movs	r3, #1
 8014cd0:	607b      	str	r3, [r7, #4]
 8014cd2:	e008      	b.n	8014ce6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cd4:	4b08      	ldr	r3, [pc, #32]	; (8014cf8 <xTaskGetSchedulerState+0x38>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d102      	bne.n	8014ce2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014cdc:	2302      	movs	r3, #2
 8014cde:	607b      	str	r3, [r7, #4]
 8014ce0:	e001      	b.n	8014ce6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014ce6:	687b      	ldr	r3, [r7, #4]
	}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	370c      	adds	r7, #12
 8014cec:	46bd      	mov	sp, r7
 8014cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf2:	4770      	bx	lr
 8014cf4:	24001818 	.word	0x24001818
 8014cf8:	24001834 	.word	0x24001834

08014cfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b086      	sub	sp, #24
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014d08:	2300      	movs	r3, #0
 8014d0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d056      	beq.n	8014dc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014d12:	4b2e      	ldr	r3, [pc, #184]	; (8014dcc <xTaskPriorityDisinherit+0xd0>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	693a      	ldr	r2, [r7, #16]
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d00a      	beq.n	8014d32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d20:	f383 8811 	msr	BASEPRI, r3
 8014d24:	f3bf 8f6f 	isb	sy
 8014d28:	f3bf 8f4f 	dsb	sy
 8014d2c:	60fb      	str	r3, [r7, #12]
}
 8014d2e:	bf00      	nop
 8014d30:	e7fe      	b.n	8014d30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014d32:	693b      	ldr	r3, [r7, #16]
 8014d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d10a      	bne.n	8014d50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d3e:	f383 8811 	msr	BASEPRI, r3
 8014d42:	f3bf 8f6f 	isb	sy
 8014d46:	f3bf 8f4f 	dsb	sy
 8014d4a:	60bb      	str	r3, [r7, #8]
}
 8014d4c:	bf00      	nop
 8014d4e:	e7fe      	b.n	8014d4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d54:	1e5a      	subs	r2, r3, #1
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014d5a:	693b      	ldr	r3, [r7, #16]
 8014d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d5e:	693b      	ldr	r3, [r7, #16]
 8014d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d62:	429a      	cmp	r2, r3
 8014d64:	d02c      	beq.n	8014dc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014d66:	693b      	ldr	r3, [r7, #16]
 8014d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d128      	bne.n	8014dc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	3304      	adds	r3, #4
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7fe f9c2 	bl	80130fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014d7c:	693b      	ldr	r3, [r7, #16]
 8014d7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014d88:	693b      	ldr	r3, [r7, #16]
 8014d8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014d8c:	693b      	ldr	r3, [r7, #16]
 8014d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d90:	4b0f      	ldr	r3, [pc, #60]	; (8014dd0 <xTaskPriorityDisinherit+0xd4>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	429a      	cmp	r2, r3
 8014d96:	d903      	bls.n	8014da0 <xTaskPriorityDisinherit+0xa4>
 8014d98:	693b      	ldr	r3, [r7, #16]
 8014d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d9c:	4a0c      	ldr	r2, [pc, #48]	; (8014dd0 <xTaskPriorityDisinherit+0xd4>)
 8014d9e:	6013      	str	r3, [r2, #0]
 8014da0:	693b      	ldr	r3, [r7, #16]
 8014da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014da4:	4613      	mov	r3, r2
 8014da6:	009b      	lsls	r3, r3, #2
 8014da8:	4413      	add	r3, r2
 8014daa:	009b      	lsls	r3, r3, #2
 8014dac:	4a09      	ldr	r2, [pc, #36]	; (8014dd4 <xTaskPriorityDisinherit+0xd8>)
 8014dae:	441a      	add	r2, r3
 8014db0:	693b      	ldr	r3, [r7, #16]
 8014db2:	3304      	adds	r3, #4
 8014db4:	4619      	mov	r1, r3
 8014db6:	4610      	mov	r0, r2
 8014db8:	f7fe f943 	bl	8013042 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014dbc:	2301      	movs	r3, #1
 8014dbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014dc0:	697b      	ldr	r3, [r7, #20]
	}
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	3718      	adds	r7, #24
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd80      	pop	{r7, pc}
 8014dca:	bf00      	nop
 8014dcc:	24001338 	.word	0x24001338
 8014dd0:	24001814 	.word	0x24001814
 8014dd4:	2400133c 	.word	0x2400133c

08014dd8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8014dd8:	b480      	push	{r7}
 8014dda:	b083      	sub	sp, #12
 8014ddc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8014dde:	4b09      	ldr	r3, [pc, #36]	; (8014e04 <uxTaskResetEventItemValue+0x2c>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	699b      	ldr	r3, [r3, #24]
 8014de4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014de6:	4b07      	ldr	r3, [pc, #28]	; (8014e04 <uxTaskResetEventItemValue+0x2c>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dec:	4b05      	ldr	r3, [pc, #20]	; (8014e04 <uxTaskResetEventItemValue+0x2c>)
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8014df4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8014df6:	687b      	ldr	r3, [r7, #4]
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	370c      	adds	r7, #12
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr
 8014e04:	24001338 	.word	0x24001338

08014e08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b084      	sub	sp, #16
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
 8014e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014e12:	4b21      	ldr	r3, [pc, #132]	; (8014e98 <prvAddCurrentTaskToDelayedList+0x90>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014e18:	4b20      	ldr	r3, [pc, #128]	; (8014e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	3304      	adds	r3, #4
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7fe f96c 	bl	80130fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e2a:	d10a      	bne.n	8014e42 <prvAddCurrentTaskToDelayedList+0x3a>
 8014e2c:	683b      	ldr	r3, [r7, #0]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d007      	beq.n	8014e42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014e32:	4b1a      	ldr	r3, [pc, #104]	; (8014e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	3304      	adds	r3, #4
 8014e38:	4619      	mov	r1, r3
 8014e3a:	4819      	ldr	r0, [pc, #100]	; (8014ea0 <prvAddCurrentTaskToDelayedList+0x98>)
 8014e3c:	f7fe f901 	bl	8013042 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014e40:	e026      	b.n	8014e90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014e42:	68fa      	ldr	r2, [r7, #12]
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	4413      	add	r3, r2
 8014e48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014e4a:	4b14      	ldr	r3, [pc, #80]	; (8014e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	68ba      	ldr	r2, [r7, #8]
 8014e50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014e52:	68ba      	ldr	r2, [r7, #8]
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d209      	bcs.n	8014e6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014e5a:	4b12      	ldr	r3, [pc, #72]	; (8014ea4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014e5c:	681a      	ldr	r2, [r3, #0]
 8014e5e:	4b0f      	ldr	r3, [pc, #60]	; (8014e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	3304      	adds	r3, #4
 8014e64:	4619      	mov	r1, r3
 8014e66:	4610      	mov	r0, r2
 8014e68:	f7fe f90f 	bl	801308a <vListInsert>
}
 8014e6c:	e010      	b.n	8014e90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014e6e:	4b0e      	ldr	r3, [pc, #56]	; (8014ea8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014e70:	681a      	ldr	r2, [r3, #0]
 8014e72:	4b0a      	ldr	r3, [pc, #40]	; (8014e9c <prvAddCurrentTaskToDelayedList+0x94>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	3304      	adds	r3, #4
 8014e78:	4619      	mov	r1, r3
 8014e7a:	4610      	mov	r0, r2
 8014e7c:	f7fe f905 	bl	801308a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014e80:	4b0a      	ldr	r3, [pc, #40]	; (8014eac <prvAddCurrentTaskToDelayedList+0xa4>)
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	68ba      	ldr	r2, [r7, #8]
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d202      	bcs.n	8014e90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014e8a:	4a08      	ldr	r2, [pc, #32]	; (8014eac <prvAddCurrentTaskToDelayedList+0xa4>)
 8014e8c:	68bb      	ldr	r3, [r7, #8]
 8014e8e:	6013      	str	r3, [r2, #0]
}
 8014e90:	bf00      	nop
 8014e92:	3710      	adds	r7, #16
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd80      	pop	{r7, pc}
 8014e98:	24001810 	.word	0x24001810
 8014e9c:	24001338 	.word	0x24001338
 8014ea0:	240017f8 	.word	0x240017f8
 8014ea4:	240017c8 	.word	0x240017c8
 8014ea8:	240017c4 	.word	0x240017c4
 8014eac:	2400182c 	.word	0x2400182c

08014eb0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b08a      	sub	sp, #40	; 0x28
 8014eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014eba:	f000 fb07 	bl	80154cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014ebe:	4b1c      	ldr	r3, [pc, #112]	; (8014f30 <xTimerCreateTimerTask+0x80>)
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d021      	beq.n	8014f0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014ece:	1d3a      	adds	r2, r7, #4
 8014ed0:	f107 0108 	add.w	r1, r7, #8
 8014ed4:	f107 030c 	add.w	r3, r7, #12
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f7fd fe7d 	bl	8012bd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014ede:	6879      	ldr	r1, [r7, #4]
 8014ee0:	68bb      	ldr	r3, [r7, #8]
 8014ee2:	68fa      	ldr	r2, [r7, #12]
 8014ee4:	9202      	str	r2, [sp, #8]
 8014ee6:	9301      	str	r3, [sp, #4]
 8014ee8:	2302      	movs	r3, #2
 8014eea:	9300      	str	r3, [sp, #0]
 8014eec:	2300      	movs	r3, #0
 8014eee:	460a      	mov	r2, r1
 8014ef0:	4910      	ldr	r1, [pc, #64]	; (8014f34 <xTimerCreateTimerTask+0x84>)
 8014ef2:	4811      	ldr	r0, [pc, #68]	; (8014f38 <xTimerCreateTimerTask+0x88>)
 8014ef4:	f7fe ff0e 	bl	8013d14 <xTaskCreateStatic>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	4a10      	ldr	r2, [pc, #64]	; (8014f3c <xTimerCreateTimerTask+0x8c>)
 8014efc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014efe:	4b0f      	ldr	r3, [pc, #60]	; (8014f3c <xTimerCreateTimerTask+0x8c>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d001      	beq.n	8014f0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014f06:	2301      	movs	r3, #1
 8014f08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014f0a:	697b      	ldr	r3, [r7, #20]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d10a      	bne.n	8014f26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8014f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f14:	f383 8811 	msr	BASEPRI, r3
 8014f18:	f3bf 8f6f 	isb	sy
 8014f1c:	f3bf 8f4f 	dsb	sy
 8014f20:	613b      	str	r3, [r7, #16]
}
 8014f22:	bf00      	nop
 8014f24:	e7fe      	b.n	8014f24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014f26:	697b      	ldr	r3, [r7, #20]
}
 8014f28:	4618      	mov	r0, r3
 8014f2a:	3718      	adds	r7, #24
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}
 8014f30:	24001868 	.word	0x24001868
 8014f34:	08017138 	.word	0x08017138
 8014f38:	08015075 	.word	0x08015075
 8014f3c:	2400186c 	.word	0x2400186c

08014f40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b08a      	sub	sp, #40	; 0x28
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	60f8      	str	r0, [r7, #12]
 8014f48:	60b9      	str	r1, [r7, #8]
 8014f4a:	607a      	str	r2, [r7, #4]
 8014f4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d10a      	bne.n	8014f6e <xTimerGenericCommand+0x2e>
	__asm volatile
 8014f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f5c:	f383 8811 	msr	BASEPRI, r3
 8014f60:	f3bf 8f6f 	isb	sy
 8014f64:	f3bf 8f4f 	dsb	sy
 8014f68:	623b      	str	r3, [r7, #32]
}
 8014f6a:	bf00      	nop
 8014f6c:	e7fe      	b.n	8014f6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014f6e:	4b1a      	ldr	r3, [pc, #104]	; (8014fd8 <xTimerGenericCommand+0x98>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d02a      	beq.n	8014fcc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	2b05      	cmp	r3, #5
 8014f86:	dc18      	bgt.n	8014fba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014f88:	f7ff fe9a 	bl	8014cc0 <xTaskGetSchedulerState>
 8014f8c:	4603      	mov	r3, r0
 8014f8e:	2b02      	cmp	r3, #2
 8014f90:	d109      	bne.n	8014fa6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014f92:	4b11      	ldr	r3, [pc, #68]	; (8014fd8 <xTimerGenericCommand+0x98>)
 8014f94:	6818      	ldr	r0, [r3, #0]
 8014f96:	f107 0110 	add.w	r1, r7, #16
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f9e:	f7fe fa15 	bl	80133cc <xQueueGenericSend>
 8014fa2:	6278      	str	r0, [r7, #36]	; 0x24
 8014fa4:	e012      	b.n	8014fcc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014fa6:	4b0c      	ldr	r3, [pc, #48]	; (8014fd8 <xTimerGenericCommand+0x98>)
 8014fa8:	6818      	ldr	r0, [r3, #0]
 8014faa:	f107 0110 	add.w	r1, r7, #16
 8014fae:	2300      	movs	r3, #0
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	f7fe fa0b 	bl	80133cc <xQueueGenericSend>
 8014fb6:	6278      	str	r0, [r7, #36]	; 0x24
 8014fb8:	e008      	b.n	8014fcc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014fba:	4b07      	ldr	r3, [pc, #28]	; (8014fd8 <xTimerGenericCommand+0x98>)
 8014fbc:	6818      	ldr	r0, [r3, #0]
 8014fbe:	f107 0110 	add.w	r1, r7, #16
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	683a      	ldr	r2, [r7, #0]
 8014fc6:	f7fe faff 	bl	80135c8 <xQueueGenericSendFromISR>
 8014fca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	3728      	adds	r7, #40	; 0x28
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd80      	pop	{r7, pc}
 8014fd6:	bf00      	nop
 8014fd8:	24001868 	.word	0x24001868

08014fdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b088      	sub	sp, #32
 8014fe0:	af02      	add	r7, sp, #8
 8014fe2:	6078      	str	r0, [r7, #4]
 8014fe4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014fe6:	4b22      	ldr	r3, [pc, #136]	; (8015070 <prvProcessExpiredTimer+0x94>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	68db      	ldr	r3, [r3, #12]
 8014fec:	68db      	ldr	r3, [r3, #12]
 8014fee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	3304      	adds	r3, #4
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f7fe f881 	bl	80130fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015000:	f003 0304 	and.w	r3, r3, #4
 8015004:	2b00      	cmp	r3, #0
 8015006:	d022      	beq.n	801504e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015008:	697b      	ldr	r3, [r7, #20]
 801500a:	699a      	ldr	r2, [r3, #24]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	18d1      	adds	r1, r2, r3
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	683a      	ldr	r2, [r7, #0]
 8015014:	6978      	ldr	r0, [r7, #20]
 8015016:	f000 f8d1 	bl	80151bc <prvInsertTimerInActiveList>
 801501a:	4603      	mov	r3, r0
 801501c:	2b00      	cmp	r3, #0
 801501e:	d01f      	beq.n	8015060 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015020:	2300      	movs	r3, #0
 8015022:	9300      	str	r3, [sp, #0]
 8015024:	2300      	movs	r3, #0
 8015026:	687a      	ldr	r2, [r7, #4]
 8015028:	2100      	movs	r1, #0
 801502a:	6978      	ldr	r0, [r7, #20]
 801502c:	f7ff ff88 	bl	8014f40 <xTimerGenericCommand>
 8015030:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d113      	bne.n	8015060 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801503c:	f383 8811 	msr	BASEPRI, r3
 8015040:	f3bf 8f6f 	isb	sy
 8015044:	f3bf 8f4f 	dsb	sy
 8015048:	60fb      	str	r3, [r7, #12]
}
 801504a:	bf00      	nop
 801504c:	e7fe      	b.n	801504c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801504e:	697b      	ldr	r3, [r7, #20]
 8015050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015054:	f023 0301 	bic.w	r3, r3, #1
 8015058:	b2da      	uxtb	r2, r3
 801505a:	697b      	ldr	r3, [r7, #20]
 801505c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015060:	697b      	ldr	r3, [r7, #20]
 8015062:	6a1b      	ldr	r3, [r3, #32]
 8015064:	6978      	ldr	r0, [r7, #20]
 8015066:	4798      	blx	r3
}
 8015068:	bf00      	nop
 801506a:	3718      	adds	r7, #24
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}
 8015070:	24001860 	.word	0x24001860

08015074 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b084      	sub	sp, #16
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801507c:	f107 0308 	add.w	r3, r7, #8
 8015080:	4618      	mov	r0, r3
 8015082:	f000 f857 	bl	8015134 <prvGetNextExpireTime>
 8015086:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	4619      	mov	r1, r3
 801508c:	68f8      	ldr	r0, [r7, #12]
 801508e:	f000 f803 	bl	8015098 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015092:	f000 f8d5 	bl	8015240 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015096:	e7f1      	b.n	801507c <prvTimerTask+0x8>

08015098 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b084      	sub	sp, #16
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
 80150a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80150a2:	f7ff f98d 	bl	80143c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80150a6:	f107 0308 	add.w	r3, r7, #8
 80150aa:	4618      	mov	r0, r3
 80150ac:	f000 f866 	bl	801517c <prvSampleTimeNow>
 80150b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80150b2:	68bb      	ldr	r3, [r7, #8]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d130      	bne.n	801511a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80150b8:	683b      	ldr	r3, [r7, #0]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d10a      	bne.n	80150d4 <prvProcessTimerOrBlockTask+0x3c>
 80150be:	687a      	ldr	r2, [r7, #4]
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d806      	bhi.n	80150d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80150c6:	f7ff f989 	bl	80143dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80150ca:	68f9      	ldr	r1, [r7, #12]
 80150cc:	6878      	ldr	r0, [r7, #4]
 80150ce:	f7ff ff85 	bl	8014fdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80150d2:	e024      	b.n	801511e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80150d4:	683b      	ldr	r3, [r7, #0]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d008      	beq.n	80150ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80150da:	4b13      	ldr	r3, [pc, #76]	; (8015128 <prvProcessTimerOrBlockTask+0x90>)
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d101      	bne.n	80150e8 <prvProcessTimerOrBlockTask+0x50>
 80150e4:	2301      	movs	r3, #1
 80150e6:	e000      	b.n	80150ea <prvProcessTimerOrBlockTask+0x52>
 80150e8:	2300      	movs	r3, #0
 80150ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80150ec:	4b0f      	ldr	r3, [pc, #60]	; (801512c <prvProcessTimerOrBlockTask+0x94>)
 80150ee:	6818      	ldr	r0, [r3, #0]
 80150f0:	687a      	ldr	r2, [r7, #4]
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	1ad3      	subs	r3, r2, r3
 80150f6:	683a      	ldr	r2, [r7, #0]
 80150f8:	4619      	mov	r1, r3
 80150fa:	f7fe fdd7 	bl	8013cac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80150fe:	f7ff f96d 	bl	80143dc <xTaskResumeAll>
 8015102:	4603      	mov	r3, r0
 8015104:	2b00      	cmp	r3, #0
 8015106:	d10a      	bne.n	801511e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015108:	4b09      	ldr	r3, [pc, #36]	; (8015130 <prvProcessTimerOrBlockTask+0x98>)
 801510a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801510e:	601a      	str	r2, [r3, #0]
 8015110:	f3bf 8f4f 	dsb	sy
 8015114:	f3bf 8f6f 	isb	sy
}
 8015118:	e001      	b.n	801511e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801511a:	f7ff f95f 	bl	80143dc <xTaskResumeAll>
}
 801511e:	bf00      	nop
 8015120:	3710      	adds	r7, #16
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}
 8015126:	bf00      	nop
 8015128:	24001864 	.word	0x24001864
 801512c:	24001868 	.word	0x24001868
 8015130:	e000ed04 	.word	0xe000ed04

08015134 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015134:	b480      	push	{r7}
 8015136:	b085      	sub	sp, #20
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801513c:	4b0e      	ldr	r3, [pc, #56]	; (8015178 <prvGetNextExpireTime+0x44>)
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d101      	bne.n	801514a <prvGetNextExpireTime+0x16>
 8015146:	2201      	movs	r2, #1
 8015148:	e000      	b.n	801514c <prvGetNextExpireTime+0x18>
 801514a:	2200      	movs	r2, #0
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d105      	bne.n	8015164 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015158:	4b07      	ldr	r3, [pc, #28]	; (8015178 <prvGetNextExpireTime+0x44>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	68db      	ldr	r3, [r3, #12]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	60fb      	str	r3, [r7, #12]
 8015162:	e001      	b.n	8015168 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015164:	2300      	movs	r3, #0
 8015166:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015168:	68fb      	ldr	r3, [r7, #12]
}
 801516a:	4618      	mov	r0, r3
 801516c:	3714      	adds	r7, #20
 801516e:	46bd      	mov	sp, r7
 8015170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015174:	4770      	bx	lr
 8015176:	bf00      	nop
 8015178:	24001860 	.word	0x24001860

0801517c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b084      	sub	sp, #16
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015184:	f7ff f9c8 	bl	8014518 <xTaskGetTickCount>
 8015188:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801518a:	4b0b      	ldr	r3, [pc, #44]	; (80151b8 <prvSampleTimeNow+0x3c>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	68fa      	ldr	r2, [r7, #12]
 8015190:	429a      	cmp	r2, r3
 8015192:	d205      	bcs.n	80151a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015194:	f000 f936 	bl	8015404 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2201      	movs	r2, #1
 801519c:	601a      	str	r2, [r3, #0]
 801519e:	e002      	b.n	80151a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	2200      	movs	r2, #0
 80151a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80151a6:	4a04      	ldr	r2, [pc, #16]	; (80151b8 <prvSampleTimeNow+0x3c>)
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80151ac:	68fb      	ldr	r3, [r7, #12]
}
 80151ae:	4618      	mov	r0, r3
 80151b0:	3710      	adds	r7, #16
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bd80      	pop	{r7, pc}
 80151b6:	bf00      	nop
 80151b8:	24001870 	.word	0x24001870

080151bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b086      	sub	sp, #24
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	60f8      	str	r0, [r7, #12]
 80151c4:	60b9      	str	r1, [r7, #8]
 80151c6:	607a      	str	r2, [r7, #4]
 80151c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80151ca:	2300      	movs	r3, #0
 80151cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	68ba      	ldr	r2, [r7, #8]
 80151d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	68fa      	ldr	r2, [r7, #12]
 80151d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80151da:	68ba      	ldr	r2, [r7, #8]
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	429a      	cmp	r2, r3
 80151e0:	d812      	bhi.n	8015208 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151e2:	687a      	ldr	r2, [r7, #4]
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	1ad2      	subs	r2, r2, r3
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	699b      	ldr	r3, [r3, #24]
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d302      	bcc.n	80151f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80151f0:	2301      	movs	r3, #1
 80151f2:	617b      	str	r3, [r7, #20]
 80151f4:	e01b      	b.n	801522e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80151f6:	4b10      	ldr	r3, [pc, #64]	; (8015238 <prvInsertTimerInActiveList+0x7c>)
 80151f8:	681a      	ldr	r2, [r3, #0]
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	3304      	adds	r3, #4
 80151fe:	4619      	mov	r1, r3
 8015200:	4610      	mov	r0, r2
 8015202:	f7fd ff42 	bl	801308a <vListInsert>
 8015206:	e012      	b.n	801522e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015208:	687a      	ldr	r2, [r7, #4]
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	429a      	cmp	r2, r3
 801520e:	d206      	bcs.n	801521e <prvInsertTimerInActiveList+0x62>
 8015210:	68ba      	ldr	r2, [r7, #8]
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	429a      	cmp	r2, r3
 8015216:	d302      	bcc.n	801521e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015218:	2301      	movs	r3, #1
 801521a:	617b      	str	r3, [r7, #20]
 801521c:	e007      	b.n	801522e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801521e:	4b07      	ldr	r3, [pc, #28]	; (801523c <prvInsertTimerInActiveList+0x80>)
 8015220:	681a      	ldr	r2, [r3, #0]
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	3304      	adds	r3, #4
 8015226:	4619      	mov	r1, r3
 8015228:	4610      	mov	r0, r2
 801522a:	f7fd ff2e 	bl	801308a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801522e:	697b      	ldr	r3, [r7, #20]
}
 8015230:	4618      	mov	r0, r3
 8015232:	3718      	adds	r7, #24
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}
 8015238:	24001864 	.word	0x24001864
 801523c:	24001860 	.word	0x24001860

08015240 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b08e      	sub	sp, #56	; 0x38
 8015244:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015246:	e0ca      	b.n	80153de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	2b00      	cmp	r3, #0
 801524c:	da18      	bge.n	8015280 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801524e:	1d3b      	adds	r3, r7, #4
 8015250:	3304      	adds	r3, #4
 8015252:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015256:	2b00      	cmp	r3, #0
 8015258:	d10a      	bne.n	8015270 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801525e:	f383 8811 	msr	BASEPRI, r3
 8015262:	f3bf 8f6f 	isb	sy
 8015266:	f3bf 8f4f 	dsb	sy
 801526a:	61fb      	str	r3, [r7, #28]
}
 801526c:	bf00      	nop
 801526e:	e7fe      	b.n	801526e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015276:	6850      	ldr	r0, [r2, #4]
 8015278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801527a:	6892      	ldr	r2, [r2, #8]
 801527c:	4611      	mov	r1, r2
 801527e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2b00      	cmp	r3, #0
 8015284:	f2c0 80aa 	blt.w	80153dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801528e:	695b      	ldr	r3, [r3, #20]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d004      	beq.n	801529e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015296:	3304      	adds	r3, #4
 8015298:	4618      	mov	r0, r3
 801529a:	f7fd ff2f 	bl	80130fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801529e:	463b      	mov	r3, r7
 80152a0:	4618      	mov	r0, r3
 80152a2:	f7ff ff6b 	bl	801517c <prvSampleTimeNow>
 80152a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2b09      	cmp	r3, #9
 80152ac:	f200 8097 	bhi.w	80153de <prvProcessReceivedCommands+0x19e>
 80152b0:	a201      	add	r2, pc, #4	; (adr r2, 80152b8 <prvProcessReceivedCommands+0x78>)
 80152b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152b6:	bf00      	nop
 80152b8:	080152e1 	.word	0x080152e1
 80152bc:	080152e1 	.word	0x080152e1
 80152c0:	080152e1 	.word	0x080152e1
 80152c4:	08015355 	.word	0x08015355
 80152c8:	08015369 	.word	0x08015369
 80152cc:	080153b3 	.word	0x080153b3
 80152d0:	080152e1 	.word	0x080152e1
 80152d4:	080152e1 	.word	0x080152e1
 80152d8:	08015355 	.word	0x08015355
 80152dc:	08015369 	.word	0x08015369
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80152e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152e6:	f043 0301 	orr.w	r3, r3, #1
 80152ea:	b2da      	uxtb	r2, r3
 80152ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80152f2:	68ba      	ldr	r2, [r7, #8]
 80152f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152f6:	699b      	ldr	r3, [r3, #24]
 80152f8:	18d1      	adds	r1, r2, r3
 80152fa:	68bb      	ldr	r3, [r7, #8]
 80152fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015300:	f7ff ff5c 	bl	80151bc <prvInsertTimerInActiveList>
 8015304:	4603      	mov	r3, r0
 8015306:	2b00      	cmp	r3, #0
 8015308:	d069      	beq.n	80153de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801530c:	6a1b      	ldr	r3, [r3, #32]
 801530e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015310:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015318:	f003 0304 	and.w	r3, r3, #4
 801531c:	2b00      	cmp	r3, #0
 801531e:	d05e      	beq.n	80153de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015320:	68ba      	ldr	r2, [r7, #8]
 8015322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015324:	699b      	ldr	r3, [r3, #24]
 8015326:	441a      	add	r2, r3
 8015328:	2300      	movs	r3, #0
 801532a:	9300      	str	r3, [sp, #0]
 801532c:	2300      	movs	r3, #0
 801532e:	2100      	movs	r1, #0
 8015330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015332:	f7ff fe05 	bl	8014f40 <xTimerGenericCommand>
 8015336:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015338:	6a3b      	ldr	r3, [r7, #32]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d14f      	bne.n	80153de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015342:	f383 8811 	msr	BASEPRI, r3
 8015346:	f3bf 8f6f 	isb	sy
 801534a:	f3bf 8f4f 	dsb	sy
 801534e:	61bb      	str	r3, [r7, #24]
}
 8015350:	bf00      	nop
 8015352:	e7fe      	b.n	8015352 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801535a:	f023 0301 	bic.w	r3, r3, #1
 801535e:	b2da      	uxtb	r2, r3
 8015360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015366:	e03a      	b.n	80153de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801536a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801536e:	f043 0301 	orr.w	r3, r3, #1
 8015372:	b2da      	uxtb	r2, r3
 8015374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801537a:	68ba      	ldr	r2, [r7, #8]
 801537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801537e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015382:	699b      	ldr	r3, [r3, #24]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d10a      	bne.n	801539e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015388:	f04f 0350 	mov.w	r3, #80	; 0x50
 801538c:	f383 8811 	msr	BASEPRI, r3
 8015390:	f3bf 8f6f 	isb	sy
 8015394:	f3bf 8f4f 	dsb	sy
 8015398:	617b      	str	r3, [r7, #20]
}
 801539a:	bf00      	nop
 801539c:	e7fe      	b.n	801539c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153a0:	699a      	ldr	r2, [r3, #24]
 80153a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a4:	18d1      	adds	r1, r2, r3
 80153a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153ac:	f7ff ff06 	bl	80151bc <prvInsertTimerInActiveList>
					break;
 80153b0:	e015      	b.n	80153de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80153b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80153b8:	f003 0302 	and.w	r3, r3, #2
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d103      	bne.n	80153c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80153c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153c2:	f000 fbfd 	bl	8015bc0 <vPortFree>
 80153c6:	e00a      	b.n	80153de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80153c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80153ce:	f023 0301 	bic.w	r3, r3, #1
 80153d2:	b2da      	uxtb	r2, r3
 80153d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80153da:	e000      	b.n	80153de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80153dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80153de:	4b08      	ldr	r3, [pc, #32]	; (8015400 <prvProcessReceivedCommands+0x1c0>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	1d39      	adds	r1, r7, #4
 80153e4:	2200      	movs	r2, #0
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7fe f98a 	bl	8013700 <xQueueReceive>
 80153ec:	4603      	mov	r3, r0
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	f47f af2a 	bne.w	8015248 <prvProcessReceivedCommands+0x8>
	}
}
 80153f4:	bf00      	nop
 80153f6:	bf00      	nop
 80153f8:	3730      	adds	r7, #48	; 0x30
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}
 80153fe:	bf00      	nop
 8015400:	24001868 	.word	0x24001868

08015404 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b088      	sub	sp, #32
 8015408:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801540a:	e048      	b.n	801549e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801540c:	4b2d      	ldr	r3, [pc, #180]	; (80154c4 <prvSwitchTimerLists+0xc0>)
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	68db      	ldr	r3, [r3, #12]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015416:	4b2b      	ldr	r3, [pc, #172]	; (80154c4 <prvSwitchTimerLists+0xc0>)
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	68db      	ldr	r3, [r3, #12]
 801541c:	68db      	ldr	r3, [r3, #12]
 801541e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	3304      	adds	r3, #4
 8015424:	4618      	mov	r0, r3
 8015426:	f7fd fe69 	bl	80130fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	6a1b      	ldr	r3, [r3, #32]
 801542e:	68f8      	ldr	r0, [r7, #12]
 8015430:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015438:	f003 0304 	and.w	r3, r3, #4
 801543c:	2b00      	cmp	r3, #0
 801543e:	d02e      	beq.n	801549e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	699b      	ldr	r3, [r3, #24]
 8015444:	693a      	ldr	r2, [r7, #16]
 8015446:	4413      	add	r3, r2
 8015448:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801544a:	68ba      	ldr	r2, [r7, #8]
 801544c:	693b      	ldr	r3, [r7, #16]
 801544e:	429a      	cmp	r2, r3
 8015450:	d90e      	bls.n	8015470 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	68ba      	ldr	r2, [r7, #8]
 8015456:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	68fa      	ldr	r2, [r7, #12]
 801545c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801545e:	4b19      	ldr	r3, [pc, #100]	; (80154c4 <prvSwitchTimerLists+0xc0>)
 8015460:	681a      	ldr	r2, [r3, #0]
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	3304      	adds	r3, #4
 8015466:	4619      	mov	r1, r3
 8015468:	4610      	mov	r0, r2
 801546a:	f7fd fe0e 	bl	801308a <vListInsert>
 801546e:	e016      	b.n	801549e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015470:	2300      	movs	r3, #0
 8015472:	9300      	str	r3, [sp, #0]
 8015474:	2300      	movs	r3, #0
 8015476:	693a      	ldr	r2, [r7, #16]
 8015478:	2100      	movs	r1, #0
 801547a:	68f8      	ldr	r0, [r7, #12]
 801547c:	f7ff fd60 	bl	8014f40 <xTimerGenericCommand>
 8015480:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d10a      	bne.n	801549e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801548c:	f383 8811 	msr	BASEPRI, r3
 8015490:	f3bf 8f6f 	isb	sy
 8015494:	f3bf 8f4f 	dsb	sy
 8015498:	603b      	str	r3, [r7, #0]
}
 801549a:	bf00      	nop
 801549c:	e7fe      	b.n	801549c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801549e:	4b09      	ldr	r3, [pc, #36]	; (80154c4 <prvSwitchTimerLists+0xc0>)
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d1b1      	bne.n	801540c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80154a8:	4b06      	ldr	r3, [pc, #24]	; (80154c4 <prvSwitchTimerLists+0xc0>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80154ae:	4b06      	ldr	r3, [pc, #24]	; (80154c8 <prvSwitchTimerLists+0xc4>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	4a04      	ldr	r2, [pc, #16]	; (80154c4 <prvSwitchTimerLists+0xc0>)
 80154b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80154b6:	4a04      	ldr	r2, [pc, #16]	; (80154c8 <prvSwitchTimerLists+0xc4>)
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	6013      	str	r3, [r2, #0]
}
 80154bc:	bf00      	nop
 80154be:	3718      	adds	r7, #24
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd80      	pop	{r7, pc}
 80154c4:	24001860 	.word	0x24001860
 80154c8:	24001864 	.word	0x24001864

080154cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80154d2:	f000 f987 	bl	80157e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80154d6:	4b15      	ldr	r3, [pc, #84]	; (801552c <prvCheckForValidListAndQueue+0x60>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d120      	bne.n	8015520 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80154de:	4814      	ldr	r0, [pc, #80]	; (8015530 <prvCheckForValidListAndQueue+0x64>)
 80154e0:	f7fd fd82 	bl	8012fe8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80154e4:	4813      	ldr	r0, [pc, #76]	; (8015534 <prvCheckForValidListAndQueue+0x68>)
 80154e6:	f7fd fd7f 	bl	8012fe8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80154ea:	4b13      	ldr	r3, [pc, #76]	; (8015538 <prvCheckForValidListAndQueue+0x6c>)
 80154ec:	4a10      	ldr	r2, [pc, #64]	; (8015530 <prvCheckForValidListAndQueue+0x64>)
 80154ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80154f0:	4b12      	ldr	r3, [pc, #72]	; (801553c <prvCheckForValidListAndQueue+0x70>)
 80154f2:	4a10      	ldr	r2, [pc, #64]	; (8015534 <prvCheckForValidListAndQueue+0x68>)
 80154f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80154f6:	2300      	movs	r3, #0
 80154f8:	9300      	str	r3, [sp, #0]
 80154fa:	4b11      	ldr	r3, [pc, #68]	; (8015540 <prvCheckForValidListAndQueue+0x74>)
 80154fc:	4a11      	ldr	r2, [pc, #68]	; (8015544 <prvCheckForValidListAndQueue+0x78>)
 80154fe:	2110      	movs	r1, #16
 8015500:	200a      	movs	r0, #10
 8015502:	f7fd fe8d 	bl	8013220 <xQueueGenericCreateStatic>
 8015506:	4603      	mov	r3, r0
 8015508:	4a08      	ldr	r2, [pc, #32]	; (801552c <prvCheckForValidListAndQueue+0x60>)
 801550a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801550c:	4b07      	ldr	r3, [pc, #28]	; (801552c <prvCheckForValidListAndQueue+0x60>)
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d005      	beq.n	8015520 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015514:	4b05      	ldr	r3, [pc, #20]	; (801552c <prvCheckForValidListAndQueue+0x60>)
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	490b      	ldr	r1, [pc, #44]	; (8015548 <prvCheckForValidListAndQueue+0x7c>)
 801551a:	4618      	mov	r0, r3
 801551c:	f7fe fb9c 	bl	8013c58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015520:	f000 f990 	bl	8015844 <vPortExitCritical>
}
 8015524:	bf00      	nop
 8015526:	46bd      	mov	sp, r7
 8015528:	bd80      	pop	{r7, pc}
 801552a:	bf00      	nop
 801552c:	24001868 	.word	0x24001868
 8015530:	24001838 	.word	0x24001838
 8015534:	2400184c 	.word	0x2400184c
 8015538:	24001860 	.word	0x24001860
 801553c:	24001864 	.word	0x24001864
 8015540:	24001914 	.word	0x24001914
 8015544:	24001874 	.word	0x24001874
 8015548:	08017140 	.word	0x08017140

0801554c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801554c:	b580      	push	{r7, lr}
 801554e:	b08a      	sub	sp, #40	; 0x28
 8015550:	af00      	add	r7, sp, #0
 8015552:	60f8      	str	r0, [r7, #12]
 8015554:	60b9      	str	r1, [r7, #8]
 8015556:	607a      	str	r2, [r7, #4]
 8015558:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801555a:	f06f 0301 	mvn.w	r3, #1
 801555e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015564:	68bb      	ldr	r3, [r7, #8]
 8015566:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801556c:	4b06      	ldr	r3, [pc, #24]	; (8015588 <xTimerPendFunctionCallFromISR+0x3c>)
 801556e:	6818      	ldr	r0, [r3, #0]
 8015570:	f107 0114 	add.w	r1, r7, #20
 8015574:	2300      	movs	r3, #0
 8015576:	683a      	ldr	r2, [r7, #0]
 8015578:	f7fe f826 	bl	80135c8 <xQueueGenericSendFromISR>
 801557c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015580:	4618      	mov	r0, r3
 8015582:	3728      	adds	r7, #40	; 0x28
 8015584:	46bd      	mov	sp, r7
 8015586:	bd80      	pop	{r7, pc}
 8015588:	24001868 	.word	0x24001868

0801558c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801558c:	b480      	push	{r7}
 801558e:	b085      	sub	sp, #20
 8015590:	af00      	add	r7, sp, #0
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	60b9      	str	r1, [r7, #8]
 8015596:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	3b04      	subs	r3, #4
 801559c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80155a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	3b04      	subs	r3, #4
 80155aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	f023 0201 	bic.w	r2, r3, #1
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	3b04      	subs	r3, #4
 80155ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80155bc:	4a0c      	ldr	r2, [pc, #48]	; (80155f0 <pxPortInitialiseStack+0x64>)
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	3b14      	subs	r3, #20
 80155c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80155c8:	687a      	ldr	r2, [r7, #4]
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	3b04      	subs	r3, #4
 80155d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	f06f 0202 	mvn.w	r2, #2
 80155da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	3b20      	subs	r3, #32
 80155e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80155e2:	68fb      	ldr	r3, [r7, #12]
}
 80155e4:	4618      	mov	r0, r3
 80155e6:	3714      	adds	r7, #20
 80155e8:	46bd      	mov	sp, r7
 80155ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ee:	4770      	bx	lr
 80155f0:	080155f5 	.word	0x080155f5

080155f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80155f4:	b480      	push	{r7}
 80155f6:	b085      	sub	sp, #20
 80155f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80155fa:	2300      	movs	r3, #0
 80155fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80155fe:	4b12      	ldr	r3, [pc, #72]	; (8015648 <prvTaskExitError+0x54>)
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015606:	d00a      	beq.n	801561e <prvTaskExitError+0x2a>
	__asm volatile
 8015608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801560c:	f383 8811 	msr	BASEPRI, r3
 8015610:	f3bf 8f6f 	isb	sy
 8015614:	f3bf 8f4f 	dsb	sy
 8015618:	60fb      	str	r3, [r7, #12]
}
 801561a:	bf00      	nop
 801561c:	e7fe      	b.n	801561c <prvTaskExitError+0x28>
	__asm volatile
 801561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015622:	f383 8811 	msr	BASEPRI, r3
 8015626:	f3bf 8f6f 	isb	sy
 801562a:	f3bf 8f4f 	dsb	sy
 801562e:	60bb      	str	r3, [r7, #8]
}
 8015630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015632:	bf00      	nop
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d0fc      	beq.n	8015634 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801563a:	bf00      	nop
 801563c:	bf00      	nop
 801563e:	3714      	adds	r7, #20
 8015640:	46bd      	mov	sp, r7
 8015642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015646:	4770      	bx	lr
 8015648:	24000098 	.word	0x24000098
 801564c:	00000000 	.word	0x00000000

08015650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015650:	4b07      	ldr	r3, [pc, #28]	; (8015670 <pxCurrentTCBConst2>)
 8015652:	6819      	ldr	r1, [r3, #0]
 8015654:	6808      	ldr	r0, [r1, #0]
 8015656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801565a:	f380 8809 	msr	PSP, r0
 801565e:	f3bf 8f6f 	isb	sy
 8015662:	f04f 0000 	mov.w	r0, #0
 8015666:	f380 8811 	msr	BASEPRI, r0
 801566a:	4770      	bx	lr
 801566c:	f3af 8000 	nop.w

08015670 <pxCurrentTCBConst2>:
 8015670:	24001338 	.word	0x24001338
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015674:	bf00      	nop
 8015676:	bf00      	nop

08015678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015678:	4808      	ldr	r0, [pc, #32]	; (801569c <prvPortStartFirstTask+0x24>)
 801567a:	6800      	ldr	r0, [r0, #0]
 801567c:	6800      	ldr	r0, [r0, #0]
 801567e:	f380 8808 	msr	MSP, r0
 8015682:	f04f 0000 	mov.w	r0, #0
 8015686:	f380 8814 	msr	CONTROL, r0
 801568a:	b662      	cpsie	i
 801568c:	b661      	cpsie	f
 801568e:	f3bf 8f4f 	dsb	sy
 8015692:	f3bf 8f6f 	isb	sy
 8015696:	df00      	svc	0
 8015698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801569a:	bf00      	nop
 801569c:	e000ed08 	.word	0xe000ed08

080156a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b086      	sub	sp, #24
 80156a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80156a6:	4b46      	ldr	r3, [pc, #280]	; (80157c0 <xPortStartScheduler+0x120>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	4a46      	ldr	r2, [pc, #280]	; (80157c4 <xPortStartScheduler+0x124>)
 80156ac:	4293      	cmp	r3, r2
 80156ae:	d10a      	bne.n	80156c6 <xPortStartScheduler+0x26>
	__asm volatile
 80156b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156b4:	f383 8811 	msr	BASEPRI, r3
 80156b8:	f3bf 8f6f 	isb	sy
 80156bc:	f3bf 8f4f 	dsb	sy
 80156c0:	613b      	str	r3, [r7, #16]
}
 80156c2:	bf00      	nop
 80156c4:	e7fe      	b.n	80156c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80156c6:	4b3e      	ldr	r3, [pc, #248]	; (80157c0 <xPortStartScheduler+0x120>)
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	4a3f      	ldr	r2, [pc, #252]	; (80157c8 <xPortStartScheduler+0x128>)
 80156cc:	4293      	cmp	r3, r2
 80156ce:	d10a      	bne.n	80156e6 <xPortStartScheduler+0x46>
	__asm volatile
 80156d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156d4:	f383 8811 	msr	BASEPRI, r3
 80156d8:	f3bf 8f6f 	isb	sy
 80156dc:	f3bf 8f4f 	dsb	sy
 80156e0:	60fb      	str	r3, [r7, #12]
}
 80156e2:	bf00      	nop
 80156e4:	e7fe      	b.n	80156e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80156e6:	4b39      	ldr	r3, [pc, #228]	; (80157cc <xPortStartScheduler+0x12c>)
 80156e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	781b      	ldrb	r3, [r3, #0]
 80156ee:	b2db      	uxtb	r3, r3
 80156f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	22ff      	movs	r2, #255	; 0xff
 80156f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	b2db      	uxtb	r3, r3
 80156fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015700:	78fb      	ldrb	r3, [r7, #3]
 8015702:	b2db      	uxtb	r3, r3
 8015704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015708:	b2da      	uxtb	r2, r3
 801570a:	4b31      	ldr	r3, [pc, #196]	; (80157d0 <xPortStartScheduler+0x130>)
 801570c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801570e:	4b31      	ldr	r3, [pc, #196]	; (80157d4 <xPortStartScheduler+0x134>)
 8015710:	2207      	movs	r2, #7
 8015712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015714:	e009      	b.n	801572a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015716:	4b2f      	ldr	r3, [pc, #188]	; (80157d4 <xPortStartScheduler+0x134>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	3b01      	subs	r3, #1
 801571c:	4a2d      	ldr	r2, [pc, #180]	; (80157d4 <xPortStartScheduler+0x134>)
 801571e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015720:	78fb      	ldrb	r3, [r7, #3]
 8015722:	b2db      	uxtb	r3, r3
 8015724:	005b      	lsls	r3, r3, #1
 8015726:	b2db      	uxtb	r3, r3
 8015728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801572a:	78fb      	ldrb	r3, [r7, #3]
 801572c:	b2db      	uxtb	r3, r3
 801572e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015732:	2b80      	cmp	r3, #128	; 0x80
 8015734:	d0ef      	beq.n	8015716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015736:	4b27      	ldr	r3, [pc, #156]	; (80157d4 <xPortStartScheduler+0x134>)
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	f1c3 0307 	rsb	r3, r3, #7
 801573e:	2b04      	cmp	r3, #4
 8015740:	d00a      	beq.n	8015758 <xPortStartScheduler+0xb8>
	__asm volatile
 8015742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015746:	f383 8811 	msr	BASEPRI, r3
 801574a:	f3bf 8f6f 	isb	sy
 801574e:	f3bf 8f4f 	dsb	sy
 8015752:	60bb      	str	r3, [r7, #8]
}
 8015754:	bf00      	nop
 8015756:	e7fe      	b.n	8015756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015758:	4b1e      	ldr	r3, [pc, #120]	; (80157d4 <xPortStartScheduler+0x134>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	021b      	lsls	r3, r3, #8
 801575e:	4a1d      	ldr	r2, [pc, #116]	; (80157d4 <xPortStartScheduler+0x134>)
 8015760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015762:	4b1c      	ldr	r3, [pc, #112]	; (80157d4 <xPortStartScheduler+0x134>)
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801576a:	4a1a      	ldr	r2, [pc, #104]	; (80157d4 <xPortStartScheduler+0x134>)
 801576c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	b2da      	uxtb	r2, r3
 8015772:	697b      	ldr	r3, [r7, #20]
 8015774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015776:	4b18      	ldr	r3, [pc, #96]	; (80157d8 <xPortStartScheduler+0x138>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	4a17      	ldr	r2, [pc, #92]	; (80157d8 <xPortStartScheduler+0x138>)
 801577c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015782:	4b15      	ldr	r3, [pc, #84]	; (80157d8 <xPortStartScheduler+0x138>)
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	4a14      	ldr	r2, [pc, #80]	; (80157d8 <xPortStartScheduler+0x138>)
 8015788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801578c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801578e:	f000 f8dd 	bl	801594c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015792:	4b12      	ldr	r3, [pc, #72]	; (80157dc <xPortStartScheduler+0x13c>)
 8015794:	2200      	movs	r2, #0
 8015796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015798:	f000 f8fc 	bl	8015994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801579c:	4b10      	ldr	r3, [pc, #64]	; (80157e0 <xPortStartScheduler+0x140>)
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	4a0f      	ldr	r2, [pc, #60]	; (80157e0 <xPortStartScheduler+0x140>)
 80157a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80157a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80157a8:	f7ff ff66 	bl	8015678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80157ac:	f7fe ff7e 	bl	80146ac <vTaskSwitchContext>
	prvTaskExitError();
 80157b0:	f7ff ff20 	bl	80155f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80157b4:	2300      	movs	r3, #0
}
 80157b6:	4618      	mov	r0, r3
 80157b8:	3718      	adds	r7, #24
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}
 80157be:	bf00      	nop
 80157c0:	e000ed00 	.word	0xe000ed00
 80157c4:	410fc271 	.word	0x410fc271
 80157c8:	410fc270 	.word	0x410fc270
 80157cc:	e000e400 	.word	0xe000e400
 80157d0:	24001964 	.word	0x24001964
 80157d4:	24001968 	.word	0x24001968
 80157d8:	e000ed20 	.word	0xe000ed20
 80157dc:	24000098 	.word	0x24000098
 80157e0:	e000ef34 	.word	0xe000ef34

080157e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80157e4:	b480      	push	{r7}
 80157e6:	b083      	sub	sp, #12
 80157e8:	af00      	add	r7, sp, #0
	__asm volatile
 80157ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ee:	f383 8811 	msr	BASEPRI, r3
 80157f2:	f3bf 8f6f 	isb	sy
 80157f6:	f3bf 8f4f 	dsb	sy
 80157fa:	607b      	str	r3, [r7, #4]
}
 80157fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80157fe:	4b0f      	ldr	r3, [pc, #60]	; (801583c <vPortEnterCritical+0x58>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	3301      	adds	r3, #1
 8015804:	4a0d      	ldr	r2, [pc, #52]	; (801583c <vPortEnterCritical+0x58>)
 8015806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015808:	4b0c      	ldr	r3, [pc, #48]	; (801583c <vPortEnterCritical+0x58>)
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	2b01      	cmp	r3, #1
 801580e:	d10f      	bne.n	8015830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015810:	4b0b      	ldr	r3, [pc, #44]	; (8015840 <vPortEnterCritical+0x5c>)
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	b2db      	uxtb	r3, r3
 8015816:	2b00      	cmp	r3, #0
 8015818:	d00a      	beq.n	8015830 <vPortEnterCritical+0x4c>
	__asm volatile
 801581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801581e:	f383 8811 	msr	BASEPRI, r3
 8015822:	f3bf 8f6f 	isb	sy
 8015826:	f3bf 8f4f 	dsb	sy
 801582a:	603b      	str	r3, [r7, #0]
}
 801582c:	bf00      	nop
 801582e:	e7fe      	b.n	801582e <vPortEnterCritical+0x4a>
	}
}
 8015830:	bf00      	nop
 8015832:	370c      	adds	r7, #12
 8015834:	46bd      	mov	sp, r7
 8015836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583a:	4770      	bx	lr
 801583c:	24000098 	.word	0x24000098
 8015840:	e000ed04 	.word	0xe000ed04

08015844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015844:	b480      	push	{r7}
 8015846:	b083      	sub	sp, #12
 8015848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801584a:	4b12      	ldr	r3, [pc, #72]	; (8015894 <vPortExitCritical+0x50>)
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d10a      	bne.n	8015868 <vPortExitCritical+0x24>
	__asm volatile
 8015852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015856:	f383 8811 	msr	BASEPRI, r3
 801585a:	f3bf 8f6f 	isb	sy
 801585e:	f3bf 8f4f 	dsb	sy
 8015862:	607b      	str	r3, [r7, #4]
}
 8015864:	bf00      	nop
 8015866:	e7fe      	b.n	8015866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015868:	4b0a      	ldr	r3, [pc, #40]	; (8015894 <vPortExitCritical+0x50>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	3b01      	subs	r3, #1
 801586e:	4a09      	ldr	r2, [pc, #36]	; (8015894 <vPortExitCritical+0x50>)
 8015870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015872:	4b08      	ldr	r3, [pc, #32]	; (8015894 <vPortExitCritical+0x50>)
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d105      	bne.n	8015886 <vPortExitCritical+0x42>
 801587a:	2300      	movs	r3, #0
 801587c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	f383 8811 	msr	BASEPRI, r3
}
 8015884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015886:	bf00      	nop
 8015888:	370c      	adds	r7, #12
 801588a:	46bd      	mov	sp, r7
 801588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015890:	4770      	bx	lr
 8015892:	bf00      	nop
 8015894:	24000098 	.word	0x24000098
	...

080158a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80158a0:	f3ef 8009 	mrs	r0, PSP
 80158a4:	f3bf 8f6f 	isb	sy
 80158a8:	4b15      	ldr	r3, [pc, #84]	; (8015900 <pxCurrentTCBConst>)
 80158aa:	681a      	ldr	r2, [r3, #0]
 80158ac:	f01e 0f10 	tst.w	lr, #16
 80158b0:	bf08      	it	eq
 80158b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80158b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158ba:	6010      	str	r0, [r2, #0]
 80158bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80158c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80158c4:	f380 8811 	msr	BASEPRI, r0
 80158c8:	f3bf 8f4f 	dsb	sy
 80158cc:	f3bf 8f6f 	isb	sy
 80158d0:	f7fe feec 	bl	80146ac <vTaskSwitchContext>
 80158d4:	f04f 0000 	mov.w	r0, #0
 80158d8:	f380 8811 	msr	BASEPRI, r0
 80158dc:	bc09      	pop	{r0, r3}
 80158de:	6819      	ldr	r1, [r3, #0]
 80158e0:	6808      	ldr	r0, [r1, #0]
 80158e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158e6:	f01e 0f10 	tst.w	lr, #16
 80158ea:	bf08      	it	eq
 80158ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80158f0:	f380 8809 	msr	PSP, r0
 80158f4:	f3bf 8f6f 	isb	sy
 80158f8:	4770      	bx	lr
 80158fa:	bf00      	nop
 80158fc:	f3af 8000 	nop.w

08015900 <pxCurrentTCBConst>:
 8015900:	24001338 	.word	0x24001338
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015904:	bf00      	nop
 8015906:	bf00      	nop

08015908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b082      	sub	sp, #8
 801590c:	af00      	add	r7, sp, #0
	__asm volatile
 801590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015912:	f383 8811 	msr	BASEPRI, r3
 8015916:	f3bf 8f6f 	isb	sy
 801591a:	f3bf 8f4f 	dsb	sy
 801591e:	607b      	str	r3, [r7, #4]
}
 8015920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015922:	f7fe fe09 	bl	8014538 <xTaskIncrementTick>
 8015926:	4603      	mov	r3, r0
 8015928:	2b00      	cmp	r3, #0
 801592a:	d003      	beq.n	8015934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801592c:	4b06      	ldr	r3, [pc, #24]	; (8015948 <xPortSysTickHandler+0x40>)
 801592e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015932:	601a      	str	r2, [r3, #0]
 8015934:	2300      	movs	r3, #0
 8015936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015938:	683b      	ldr	r3, [r7, #0]
 801593a:	f383 8811 	msr	BASEPRI, r3
}
 801593e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015940:	bf00      	nop
 8015942:	3708      	adds	r7, #8
 8015944:	46bd      	mov	sp, r7
 8015946:	bd80      	pop	{r7, pc}
 8015948:	e000ed04 	.word	0xe000ed04

0801594c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801594c:	b480      	push	{r7}
 801594e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015950:	4b0b      	ldr	r3, [pc, #44]	; (8015980 <vPortSetupTimerInterrupt+0x34>)
 8015952:	2200      	movs	r2, #0
 8015954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015956:	4b0b      	ldr	r3, [pc, #44]	; (8015984 <vPortSetupTimerInterrupt+0x38>)
 8015958:	2200      	movs	r2, #0
 801595a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801595c:	4b0a      	ldr	r3, [pc, #40]	; (8015988 <vPortSetupTimerInterrupt+0x3c>)
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	4a0a      	ldr	r2, [pc, #40]	; (801598c <vPortSetupTimerInterrupt+0x40>)
 8015962:	fba2 2303 	umull	r2, r3, r2, r3
 8015966:	099b      	lsrs	r3, r3, #6
 8015968:	4a09      	ldr	r2, [pc, #36]	; (8015990 <vPortSetupTimerInterrupt+0x44>)
 801596a:	3b01      	subs	r3, #1
 801596c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801596e:	4b04      	ldr	r3, [pc, #16]	; (8015980 <vPortSetupTimerInterrupt+0x34>)
 8015970:	2207      	movs	r2, #7
 8015972:	601a      	str	r2, [r3, #0]
}
 8015974:	bf00      	nop
 8015976:	46bd      	mov	sp, r7
 8015978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597c:	4770      	bx	lr
 801597e:	bf00      	nop
 8015980:	e000e010 	.word	0xe000e010
 8015984:	e000e018 	.word	0xe000e018
 8015988:	24000088 	.word	0x24000088
 801598c:	10624dd3 	.word	0x10624dd3
 8015990:	e000e014 	.word	0xe000e014

08015994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80159a4 <vPortEnableVFP+0x10>
 8015998:	6801      	ldr	r1, [r0, #0]
 801599a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801599e:	6001      	str	r1, [r0, #0]
 80159a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80159a2:	bf00      	nop
 80159a4:	e000ed88 	.word	0xe000ed88

080159a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80159a8:	b480      	push	{r7}
 80159aa:	b085      	sub	sp, #20
 80159ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80159ae:	f3ef 8305 	mrs	r3, IPSR
 80159b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	2b0f      	cmp	r3, #15
 80159b8:	d914      	bls.n	80159e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80159ba:	4a17      	ldr	r2, [pc, #92]	; (8015a18 <vPortValidateInterruptPriority+0x70>)
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	4413      	add	r3, r2
 80159c0:	781b      	ldrb	r3, [r3, #0]
 80159c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80159c4:	4b15      	ldr	r3, [pc, #84]	; (8015a1c <vPortValidateInterruptPriority+0x74>)
 80159c6:	781b      	ldrb	r3, [r3, #0]
 80159c8:	7afa      	ldrb	r2, [r7, #11]
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d20a      	bcs.n	80159e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80159ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159d2:	f383 8811 	msr	BASEPRI, r3
 80159d6:	f3bf 8f6f 	isb	sy
 80159da:	f3bf 8f4f 	dsb	sy
 80159de:	607b      	str	r3, [r7, #4]
}
 80159e0:	bf00      	nop
 80159e2:	e7fe      	b.n	80159e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80159e4:	4b0e      	ldr	r3, [pc, #56]	; (8015a20 <vPortValidateInterruptPriority+0x78>)
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80159ec:	4b0d      	ldr	r3, [pc, #52]	; (8015a24 <vPortValidateInterruptPriority+0x7c>)
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	429a      	cmp	r2, r3
 80159f2:	d90a      	bls.n	8015a0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80159f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159f8:	f383 8811 	msr	BASEPRI, r3
 80159fc:	f3bf 8f6f 	isb	sy
 8015a00:	f3bf 8f4f 	dsb	sy
 8015a04:	603b      	str	r3, [r7, #0]
}
 8015a06:	bf00      	nop
 8015a08:	e7fe      	b.n	8015a08 <vPortValidateInterruptPriority+0x60>
	}
 8015a0a:	bf00      	nop
 8015a0c:	3714      	adds	r7, #20
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a14:	4770      	bx	lr
 8015a16:	bf00      	nop
 8015a18:	e000e3f0 	.word	0xe000e3f0
 8015a1c:	24001964 	.word	0x24001964
 8015a20:	e000ed0c 	.word	0xe000ed0c
 8015a24:	24001968 	.word	0x24001968

08015a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b08a      	sub	sp, #40	; 0x28
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015a30:	2300      	movs	r3, #0
 8015a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015a34:	f7fe fcc4 	bl	80143c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015a38:	4b5b      	ldr	r3, [pc, #364]	; (8015ba8 <pvPortMalloc+0x180>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d101      	bne.n	8015a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015a40:	f000 f920 	bl	8015c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015a44:	4b59      	ldr	r3, [pc, #356]	; (8015bac <pvPortMalloc+0x184>)
 8015a46:	681a      	ldr	r2, [r3, #0]
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	4013      	ands	r3, r2
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	f040 8093 	bne.w	8015b78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d01d      	beq.n	8015a94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015a58:	2208      	movs	r2, #8
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	4413      	add	r3, r2
 8015a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	f003 0307 	and.w	r3, r3, #7
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d014      	beq.n	8015a94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	f023 0307 	bic.w	r3, r3, #7
 8015a70:	3308      	adds	r3, #8
 8015a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f003 0307 	and.w	r3, r3, #7
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d00a      	beq.n	8015a94 <pvPortMalloc+0x6c>
	__asm volatile
 8015a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a82:	f383 8811 	msr	BASEPRI, r3
 8015a86:	f3bf 8f6f 	isb	sy
 8015a8a:	f3bf 8f4f 	dsb	sy
 8015a8e:	617b      	str	r3, [r7, #20]
}
 8015a90:	bf00      	nop
 8015a92:	e7fe      	b.n	8015a92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d06e      	beq.n	8015b78 <pvPortMalloc+0x150>
 8015a9a:	4b45      	ldr	r3, [pc, #276]	; (8015bb0 <pvPortMalloc+0x188>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	687a      	ldr	r2, [r7, #4]
 8015aa0:	429a      	cmp	r2, r3
 8015aa2:	d869      	bhi.n	8015b78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015aa4:	4b43      	ldr	r3, [pc, #268]	; (8015bb4 <pvPortMalloc+0x18c>)
 8015aa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015aa8:	4b42      	ldr	r3, [pc, #264]	; (8015bb4 <pvPortMalloc+0x18c>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015aae:	e004      	b.n	8015aba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015abc:	685b      	ldr	r3, [r3, #4]
 8015abe:	687a      	ldr	r2, [r7, #4]
 8015ac0:	429a      	cmp	r2, r3
 8015ac2:	d903      	bls.n	8015acc <pvPortMalloc+0xa4>
 8015ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d1f1      	bne.n	8015ab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015acc:	4b36      	ldr	r3, [pc, #216]	; (8015ba8 <pvPortMalloc+0x180>)
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d050      	beq.n	8015b78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015ad6:	6a3b      	ldr	r3, [r7, #32]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	2208      	movs	r2, #8
 8015adc:	4413      	add	r3, r2
 8015ade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ae2:	681a      	ldr	r2, [r3, #0]
 8015ae4:	6a3b      	ldr	r3, [r7, #32]
 8015ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aea:	685a      	ldr	r2, [r3, #4]
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	1ad2      	subs	r2, r2, r3
 8015af0:	2308      	movs	r3, #8
 8015af2:	005b      	lsls	r3, r3, #1
 8015af4:	429a      	cmp	r2, r3
 8015af6:	d91f      	bls.n	8015b38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	4413      	add	r3, r2
 8015afe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015b00:	69bb      	ldr	r3, [r7, #24]
 8015b02:	f003 0307 	and.w	r3, r3, #7
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d00a      	beq.n	8015b20 <pvPortMalloc+0xf8>
	__asm volatile
 8015b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b0e:	f383 8811 	msr	BASEPRI, r3
 8015b12:	f3bf 8f6f 	isb	sy
 8015b16:	f3bf 8f4f 	dsb	sy
 8015b1a:	613b      	str	r3, [r7, #16]
}
 8015b1c:	bf00      	nop
 8015b1e:	e7fe      	b.n	8015b1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b22:	685a      	ldr	r2, [r3, #4]
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	1ad2      	subs	r2, r2, r3
 8015b28:	69bb      	ldr	r3, [r7, #24]
 8015b2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b2e:	687a      	ldr	r2, [r7, #4]
 8015b30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015b32:	69b8      	ldr	r0, [r7, #24]
 8015b34:	f000 f908 	bl	8015d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015b38:	4b1d      	ldr	r3, [pc, #116]	; (8015bb0 <pvPortMalloc+0x188>)
 8015b3a:	681a      	ldr	r2, [r3, #0]
 8015b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b3e:	685b      	ldr	r3, [r3, #4]
 8015b40:	1ad3      	subs	r3, r2, r3
 8015b42:	4a1b      	ldr	r2, [pc, #108]	; (8015bb0 <pvPortMalloc+0x188>)
 8015b44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015b46:	4b1a      	ldr	r3, [pc, #104]	; (8015bb0 <pvPortMalloc+0x188>)
 8015b48:	681a      	ldr	r2, [r3, #0]
 8015b4a:	4b1b      	ldr	r3, [pc, #108]	; (8015bb8 <pvPortMalloc+0x190>)
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	d203      	bcs.n	8015b5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015b52:	4b17      	ldr	r3, [pc, #92]	; (8015bb0 <pvPortMalloc+0x188>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	4a18      	ldr	r2, [pc, #96]	; (8015bb8 <pvPortMalloc+0x190>)
 8015b58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b5c:	685a      	ldr	r2, [r3, #4]
 8015b5e:	4b13      	ldr	r3, [pc, #76]	; (8015bac <pvPortMalloc+0x184>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	431a      	orrs	r2, r3
 8015b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015b6e:	4b13      	ldr	r3, [pc, #76]	; (8015bbc <pvPortMalloc+0x194>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	3301      	adds	r3, #1
 8015b74:	4a11      	ldr	r2, [pc, #68]	; (8015bbc <pvPortMalloc+0x194>)
 8015b76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015b78:	f7fe fc30 	bl	80143dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015b7c:	69fb      	ldr	r3, [r7, #28]
 8015b7e:	f003 0307 	and.w	r3, r3, #7
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d00a      	beq.n	8015b9c <pvPortMalloc+0x174>
	__asm volatile
 8015b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b8a:	f383 8811 	msr	BASEPRI, r3
 8015b8e:	f3bf 8f6f 	isb	sy
 8015b92:	f3bf 8f4f 	dsb	sy
 8015b96:	60fb      	str	r3, [r7, #12]
}
 8015b98:	bf00      	nop
 8015b9a:	e7fe      	b.n	8015b9a <pvPortMalloc+0x172>
	return pvReturn;
 8015b9c:	69fb      	ldr	r3, [r7, #28]
}
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	3728      	adds	r7, #40	; 0x28
 8015ba2:	46bd      	mov	sp, r7
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	24005574 	.word	0x24005574
 8015bac:	24005588 	.word	0x24005588
 8015bb0:	24005578 	.word	0x24005578
 8015bb4:	2400556c 	.word	0x2400556c
 8015bb8:	2400557c 	.word	0x2400557c
 8015bbc:	24005580 	.word	0x24005580

08015bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b086      	sub	sp, #24
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d04d      	beq.n	8015c6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015bd2:	2308      	movs	r3, #8
 8015bd4:	425b      	negs	r3, r3
 8015bd6:	697a      	ldr	r2, [r7, #20]
 8015bd8:	4413      	add	r3, r2
 8015bda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015bdc:	697b      	ldr	r3, [r7, #20]
 8015bde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015be0:	693b      	ldr	r3, [r7, #16]
 8015be2:	685a      	ldr	r2, [r3, #4]
 8015be4:	4b24      	ldr	r3, [pc, #144]	; (8015c78 <vPortFree+0xb8>)
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	4013      	ands	r3, r2
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d10a      	bne.n	8015c04 <vPortFree+0x44>
	__asm volatile
 8015bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bf2:	f383 8811 	msr	BASEPRI, r3
 8015bf6:	f3bf 8f6f 	isb	sy
 8015bfa:	f3bf 8f4f 	dsb	sy
 8015bfe:	60fb      	str	r3, [r7, #12]
}
 8015c00:	bf00      	nop
 8015c02:	e7fe      	b.n	8015c02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015c04:	693b      	ldr	r3, [r7, #16]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d00a      	beq.n	8015c22 <vPortFree+0x62>
	__asm volatile
 8015c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c10:	f383 8811 	msr	BASEPRI, r3
 8015c14:	f3bf 8f6f 	isb	sy
 8015c18:	f3bf 8f4f 	dsb	sy
 8015c1c:	60bb      	str	r3, [r7, #8]
}
 8015c1e:	bf00      	nop
 8015c20:	e7fe      	b.n	8015c20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015c22:	693b      	ldr	r3, [r7, #16]
 8015c24:	685a      	ldr	r2, [r3, #4]
 8015c26:	4b14      	ldr	r3, [pc, #80]	; (8015c78 <vPortFree+0xb8>)
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	4013      	ands	r3, r2
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d01e      	beq.n	8015c6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d11a      	bne.n	8015c6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015c38:	693b      	ldr	r3, [r7, #16]
 8015c3a:	685a      	ldr	r2, [r3, #4]
 8015c3c:	4b0e      	ldr	r3, [pc, #56]	; (8015c78 <vPortFree+0xb8>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	43db      	mvns	r3, r3
 8015c42:	401a      	ands	r2, r3
 8015c44:	693b      	ldr	r3, [r7, #16]
 8015c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015c48:	f7fe fbba 	bl	80143c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015c4c:	693b      	ldr	r3, [r7, #16]
 8015c4e:	685a      	ldr	r2, [r3, #4]
 8015c50:	4b0a      	ldr	r3, [pc, #40]	; (8015c7c <vPortFree+0xbc>)
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	4413      	add	r3, r2
 8015c56:	4a09      	ldr	r2, [pc, #36]	; (8015c7c <vPortFree+0xbc>)
 8015c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015c5a:	6938      	ldr	r0, [r7, #16]
 8015c5c:	f000 f874 	bl	8015d48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015c60:	4b07      	ldr	r3, [pc, #28]	; (8015c80 <vPortFree+0xc0>)
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	3301      	adds	r3, #1
 8015c66:	4a06      	ldr	r2, [pc, #24]	; (8015c80 <vPortFree+0xc0>)
 8015c68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015c6a:	f7fe fbb7 	bl	80143dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015c6e:	bf00      	nop
 8015c70:	3718      	adds	r7, #24
 8015c72:	46bd      	mov	sp, r7
 8015c74:	bd80      	pop	{r7, pc}
 8015c76:	bf00      	nop
 8015c78:	24005588 	.word	0x24005588
 8015c7c:	24005578 	.word	0x24005578
 8015c80:	24005584 	.word	0x24005584

08015c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015c84:	b480      	push	{r7}
 8015c86:	b085      	sub	sp, #20
 8015c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015c8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8015c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015c90:	4b27      	ldr	r3, [pc, #156]	; (8015d30 <prvHeapInit+0xac>)
 8015c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	f003 0307 	and.w	r3, r3, #7
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d00c      	beq.n	8015cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	3307      	adds	r3, #7
 8015ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	f023 0307 	bic.w	r3, r3, #7
 8015caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015cac:	68ba      	ldr	r2, [r7, #8]
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	1ad3      	subs	r3, r2, r3
 8015cb2:	4a1f      	ldr	r2, [pc, #124]	; (8015d30 <prvHeapInit+0xac>)
 8015cb4:	4413      	add	r3, r2
 8015cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015cbc:	4a1d      	ldr	r2, [pc, #116]	; (8015d34 <prvHeapInit+0xb0>)
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015cc2:	4b1c      	ldr	r3, [pc, #112]	; (8015d34 <prvHeapInit+0xb0>)
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	68ba      	ldr	r2, [r7, #8]
 8015ccc:	4413      	add	r3, r2
 8015cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015cd0:	2208      	movs	r2, #8
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	1a9b      	subs	r3, r3, r2
 8015cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	f023 0307 	bic.w	r3, r3, #7
 8015cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	4a15      	ldr	r2, [pc, #84]	; (8015d38 <prvHeapInit+0xb4>)
 8015ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015ce6:	4b14      	ldr	r3, [pc, #80]	; (8015d38 <prvHeapInit+0xb4>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	2200      	movs	r2, #0
 8015cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015cee:	4b12      	ldr	r3, [pc, #72]	; (8015d38 <prvHeapInit+0xb4>)
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	68fa      	ldr	r2, [r7, #12]
 8015cfe:	1ad2      	subs	r2, r2, r3
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015d04:	4b0c      	ldr	r3, [pc, #48]	; (8015d38 <prvHeapInit+0xb4>)
 8015d06:	681a      	ldr	r2, [r3, #0]
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015d0c:	683b      	ldr	r3, [r7, #0]
 8015d0e:	685b      	ldr	r3, [r3, #4]
 8015d10:	4a0a      	ldr	r2, [pc, #40]	; (8015d3c <prvHeapInit+0xb8>)
 8015d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	685b      	ldr	r3, [r3, #4]
 8015d18:	4a09      	ldr	r2, [pc, #36]	; (8015d40 <prvHeapInit+0xbc>)
 8015d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015d1c:	4b09      	ldr	r3, [pc, #36]	; (8015d44 <prvHeapInit+0xc0>)
 8015d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015d22:	601a      	str	r2, [r3, #0]
}
 8015d24:	bf00      	nop
 8015d26:	3714      	adds	r7, #20
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2e:	4770      	bx	lr
 8015d30:	2400196c 	.word	0x2400196c
 8015d34:	2400556c 	.word	0x2400556c
 8015d38:	24005574 	.word	0x24005574
 8015d3c:	2400557c 	.word	0x2400557c
 8015d40:	24005578 	.word	0x24005578
 8015d44:	24005588 	.word	0x24005588

08015d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015d48:	b480      	push	{r7}
 8015d4a:	b085      	sub	sp, #20
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015d50:	4b28      	ldr	r3, [pc, #160]	; (8015df4 <prvInsertBlockIntoFreeList+0xac>)
 8015d52:	60fb      	str	r3, [r7, #12]
 8015d54:	e002      	b.n	8015d5c <prvInsertBlockIntoFreeList+0x14>
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	60fb      	str	r3, [r7, #12]
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	687a      	ldr	r2, [r7, #4]
 8015d62:	429a      	cmp	r2, r3
 8015d64:	d8f7      	bhi.n	8015d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	68ba      	ldr	r2, [r7, #8]
 8015d70:	4413      	add	r3, r2
 8015d72:	687a      	ldr	r2, [r7, #4]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d108      	bne.n	8015d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	685a      	ldr	r2, [r3, #4]
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	441a      	add	r2, r3
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	685b      	ldr	r3, [r3, #4]
 8015d92:	68ba      	ldr	r2, [r7, #8]
 8015d94:	441a      	add	r2, r3
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d118      	bne.n	8015dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	681a      	ldr	r2, [r3, #0]
 8015da2:	4b15      	ldr	r3, [pc, #84]	; (8015df8 <prvInsertBlockIntoFreeList+0xb0>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d00d      	beq.n	8015dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	685a      	ldr	r2, [r3, #4]
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	441a      	add	r2, r3
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	681a      	ldr	r2, [r3, #0]
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	601a      	str	r2, [r3, #0]
 8015dc4:	e008      	b.n	8015dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015dc6:	4b0c      	ldr	r3, [pc, #48]	; (8015df8 <prvInsertBlockIntoFreeList+0xb0>)
 8015dc8:	681a      	ldr	r2, [r3, #0]
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	601a      	str	r2, [r3, #0]
 8015dce:	e003      	b.n	8015dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	681a      	ldr	r2, [r3, #0]
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015dd8:	68fa      	ldr	r2, [r7, #12]
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	d002      	beq.n	8015de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	687a      	ldr	r2, [r7, #4]
 8015de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015de6:	bf00      	nop
 8015de8:	3714      	adds	r7, #20
 8015dea:	46bd      	mov	sp, r7
 8015dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df0:	4770      	bx	lr
 8015df2:	bf00      	nop
 8015df4:	2400556c 	.word	0x2400556c
 8015df8:	24005574 	.word	0x24005574

08015dfc <__errno>:
 8015dfc:	4b01      	ldr	r3, [pc, #4]	; (8015e04 <__errno+0x8>)
 8015dfe:	6818      	ldr	r0, [r3, #0]
 8015e00:	4770      	bx	lr
 8015e02:	bf00      	nop
 8015e04:	2400009c 	.word	0x2400009c

08015e08 <__libc_init_array>:
 8015e08:	b570      	push	{r4, r5, r6, lr}
 8015e0a:	4d0d      	ldr	r5, [pc, #52]	; (8015e40 <__libc_init_array+0x38>)
 8015e0c:	4c0d      	ldr	r4, [pc, #52]	; (8015e44 <__libc_init_array+0x3c>)
 8015e0e:	1b64      	subs	r4, r4, r5
 8015e10:	10a4      	asrs	r4, r4, #2
 8015e12:	2600      	movs	r6, #0
 8015e14:	42a6      	cmp	r6, r4
 8015e16:	d109      	bne.n	8015e2c <__libc_init_array+0x24>
 8015e18:	4d0b      	ldr	r5, [pc, #44]	; (8015e48 <__libc_init_array+0x40>)
 8015e1a:	4c0c      	ldr	r4, [pc, #48]	; (8015e4c <__libc_init_array+0x44>)
 8015e1c:	f001 f842 	bl	8016ea4 <_init>
 8015e20:	1b64      	subs	r4, r4, r5
 8015e22:	10a4      	asrs	r4, r4, #2
 8015e24:	2600      	movs	r6, #0
 8015e26:	42a6      	cmp	r6, r4
 8015e28:	d105      	bne.n	8015e36 <__libc_init_array+0x2e>
 8015e2a:	bd70      	pop	{r4, r5, r6, pc}
 8015e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e30:	4798      	blx	r3
 8015e32:	3601      	adds	r6, #1
 8015e34:	e7ee      	b.n	8015e14 <__libc_init_array+0xc>
 8015e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e3a:	4798      	blx	r3
 8015e3c:	3601      	adds	r6, #1
 8015e3e:	e7f2      	b.n	8015e26 <__libc_init_array+0x1e>
 8015e40:	08017324 	.word	0x08017324
 8015e44:	08017324 	.word	0x08017324
 8015e48:	08017324 	.word	0x08017324
 8015e4c:	08017328 	.word	0x08017328

08015e50 <malloc>:
 8015e50:	4b02      	ldr	r3, [pc, #8]	; (8015e5c <malloc+0xc>)
 8015e52:	4601      	mov	r1, r0
 8015e54:	6818      	ldr	r0, [r3, #0]
 8015e56:	f000 b88d 	b.w	8015f74 <_malloc_r>
 8015e5a:	bf00      	nop
 8015e5c:	2400009c 	.word	0x2400009c

08015e60 <free>:
 8015e60:	4b02      	ldr	r3, [pc, #8]	; (8015e6c <free+0xc>)
 8015e62:	4601      	mov	r1, r0
 8015e64:	6818      	ldr	r0, [r3, #0]
 8015e66:	f000 b819 	b.w	8015e9c <_free_r>
 8015e6a:	bf00      	nop
 8015e6c:	2400009c 	.word	0x2400009c

08015e70 <memcpy>:
 8015e70:	440a      	add	r2, r1
 8015e72:	4291      	cmp	r1, r2
 8015e74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015e78:	d100      	bne.n	8015e7c <memcpy+0xc>
 8015e7a:	4770      	bx	lr
 8015e7c:	b510      	push	{r4, lr}
 8015e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e86:	4291      	cmp	r1, r2
 8015e88:	d1f9      	bne.n	8015e7e <memcpy+0xe>
 8015e8a:	bd10      	pop	{r4, pc}

08015e8c <memset>:
 8015e8c:	4402      	add	r2, r0
 8015e8e:	4603      	mov	r3, r0
 8015e90:	4293      	cmp	r3, r2
 8015e92:	d100      	bne.n	8015e96 <memset+0xa>
 8015e94:	4770      	bx	lr
 8015e96:	f803 1b01 	strb.w	r1, [r3], #1
 8015e9a:	e7f9      	b.n	8015e90 <memset+0x4>

08015e9c <_free_r>:
 8015e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e9e:	2900      	cmp	r1, #0
 8015ea0:	d044      	beq.n	8015f2c <_free_r+0x90>
 8015ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ea6:	9001      	str	r0, [sp, #4]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8015eae:	bfb8      	it	lt
 8015eb0:	18e4      	addlt	r4, r4, r3
 8015eb2:	f000 fc51 	bl	8016758 <__malloc_lock>
 8015eb6:	4a1e      	ldr	r2, [pc, #120]	; (8015f30 <_free_r+0x94>)
 8015eb8:	9801      	ldr	r0, [sp, #4]
 8015eba:	6813      	ldr	r3, [r2, #0]
 8015ebc:	b933      	cbnz	r3, 8015ecc <_free_r+0x30>
 8015ebe:	6063      	str	r3, [r4, #4]
 8015ec0:	6014      	str	r4, [r2, #0]
 8015ec2:	b003      	add	sp, #12
 8015ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ec8:	f000 bc4c 	b.w	8016764 <__malloc_unlock>
 8015ecc:	42a3      	cmp	r3, r4
 8015ece:	d908      	bls.n	8015ee2 <_free_r+0x46>
 8015ed0:	6825      	ldr	r5, [r4, #0]
 8015ed2:	1961      	adds	r1, r4, r5
 8015ed4:	428b      	cmp	r3, r1
 8015ed6:	bf01      	itttt	eq
 8015ed8:	6819      	ldreq	r1, [r3, #0]
 8015eda:	685b      	ldreq	r3, [r3, #4]
 8015edc:	1949      	addeq	r1, r1, r5
 8015ede:	6021      	streq	r1, [r4, #0]
 8015ee0:	e7ed      	b.n	8015ebe <_free_r+0x22>
 8015ee2:	461a      	mov	r2, r3
 8015ee4:	685b      	ldr	r3, [r3, #4]
 8015ee6:	b10b      	cbz	r3, 8015eec <_free_r+0x50>
 8015ee8:	42a3      	cmp	r3, r4
 8015eea:	d9fa      	bls.n	8015ee2 <_free_r+0x46>
 8015eec:	6811      	ldr	r1, [r2, #0]
 8015eee:	1855      	adds	r5, r2, r1
 8015ef0:	42a5      	cmp	r5, r4
 8015ef2:	d10b      	bne.n	8015f0c <_free_r+0x70>
 8015ef4:	6824      	ldr	r4, [r4, #0]
 8015ef6:	4421      	add	r1, r4
 8015ef8:	1854      	adds	r4, r2, r1
 8015efa:	42a3      	cmp	r3, r4
 8015efc:	6011      	str	r1, [r2, #0]
 8015efe:	d1e0      	bne.n	8015ec2 <_free_r+0x26>
 8015f00:	681c      	ldr	r4, [r3, #0]
 8015f02:	685b      	ldr	r3, [r3, #4]
 8015f04:	6053      	str	r3, [r2, #4]
 8015f06:	4421      	add	r1, r4
 8015f08:	6011      	str	r1, [r2, #0]
 8015f0a:	e7da      	b.n	8015ec2 <_free_r+0x26>
 8015f0c:	d902      	bls.n	8015f14 <_free_r+0x78>
 8015f0e:	230c      	movs	r3, #12
 8015f10:	6003      	str	r3, [r0, #0]
 8015f12:	e7d6      	b.n	8015ec2 <_free_r+0x26>
 8015f14:	6825      	ldr	r5, [r4, #0]
 8015f16:	1961      	adds	r1, r4, r5
 8015f18:	428b      	cmp	r3, r1
 8015f1a:	bf04      	itt	eq
 8015f1c:	6819      	ldreq	r1, [r3, #0]
 8015f1e:	685b      	ldreq	r3, [r3, #4]
 8015f20:	6063      	str	r3, [r4, #4]
 8015f22:	bf04      	itt	eq
 8015f24:	1949      	addeq	r1, r1, r5
 8015f26:	6021      	streq	r1, [r4, #0]
 8015f28:	6054      	str	r4, [r2, #4]
 8015f2a:	e7ca      	b.n	8015ec2 <_free_r+0x26>
 8015f2c:	b003      	add	sp, #12
 8015f2e:	bd30      	pop	{r4, r5, pc}
 8015f30:	2400558c 	.word	0x2400558c

08015f34 <sbrk_aligned>:
 8015f34:	b570      	push	{r4, r5, r6, lr}
 8015f36:	4e0e      	ldr	r6, [pc, #56]	; (8015f70 <sbrk_aligned+0x3c>)
 8015f38:	460c      	mov	r4, r1
 8015f3a:	6831      	ldr	r1, [r6, #0]
 8015f3c:	4605      	mov	r5, r0
 8015f3e:	b911      	cbnz	r1, 8015f46 <sbrk_aligned+0x12>
 8015f40:	f000 f91a 	bl	8016178 <_sbrk_r>
 8015f44:	6030      	str	r0, [r6, #0]
 8015f46:	4621      	mov	r1, r4
 8015f48:	4628      	mov	r0, r5
 8015f4a:	f000 f915 	bl	8016178 <_sbrk_r>
 8015f4e:	1c43      	adds	r3, r0, #1
 8015f50:	d00a      	beq.n	8015f68 <sbrk_aligned+0x34>
 8015f52:	1cc4      	adds	r4, r0, #3
 8015f54:	f024 0403 	bic.w	r4, r4, #3
 8015f58:	42a0      	cmp	r0, r4
 8015f5a:	d007      	beq.n	8015f6c <sbrk_aligned+0x38>
 8015f5c:	1a21      	subs	r1, r4, r0
 8015f5e:	4628      	mov	r0, r5
 8015f60:	f000 f90a 	bl	8016178 <_sbrk_r>
 8015f64:	3001      	adds	r0, #1
 8015f66:	d101      	bne.n	8015f6c <sbrk_aligned+0x38>
 8015f68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015f6c:	4620      	mov	r0, r4
 8015f6e:	bd70      	pop	{r4, r5, r6, pc}
 8015f70:	24005590 	.word	0x24005590

08015f74 <_malloc_r>:
 8015f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f78:	1ccd      	adds	r5, r1, #3
 8015f7a:	f025 0503 	bic.w	r5, r5, #3
 8015f7e:	3508      	adds	r5, #8
 8015f80:	2d0c      	cmp	r5, #12
 8015f82:	bf38      	it	cc
 8015f84:	250c      	movcc	r5, #12
 8015f86:	2d00      	cmp	r5, #0
 8015f88:	4607      	mov	r7, r0
 8015f8a:	db01      	blt.n	8015f90 <_malloc_r+0x1c>
 8015f8c:	42a9      	cmp	r1, r5
 8015f8e:	d905      	bls.n	8015f9c <_malloc_r+0x28>
 8015f90:	230c      	movs	r3, #12
 8015f92:	603b      	str	r3, [r7, #0]
 8015f94:	2600      	movs	r6, #0
 8015f96:	4630      	mov	r0, r6
 8015f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f9c:	4e2e      	ldr	r6, [pc, #184]	; (8016058 <_malloc_r+0xe4>)
 8015f9e:	f000 fbdb 	bl	8016758 <__malloc_lock>
 8015fa2:	6833      	ldr	r3, [r6, #0]
 8015fa4:	461c      	mov	r4, r3
 8015fa6:	bb34      	cbnz	r4, 8015ff6 <_malloc_r+0x82>
 8015fa8:	4629      	mov	r1, r5
 8015faa:	4638      	mov	r0, r7
 8015fac:	f7ff ffc2 	bl	8015f34 <sbrk_aligned>
 8015fb0:	1c43      	adds	r3, r0, #1
 8015fb2:	4604      	mov	r4, r0
 8015fb4:	d14d      	bne.n	8016052 <_malloc_r+0xde>
 8015fb6:	6834      	ldr	r4, [r6, #0]
 8015fb8:	4626      	mov	r6, r4
 8015fba:	2e00      	cmp	r6, #0
 8015fbc:	d140      	bne.n	8016040 <_malloc_r+0xcc>
 8015fbe:	6823      	ldr	r3, [r4, #0]
 8015fc0:	4631      	mov	r1, r6
 8015fc2:	4638      	mov	r0, r7
 8015fc4:	eb04 0803 	add.w	r8, r4, r3
 8015fc8:	f000 f8d6 	bl	8016178 <_sbrk_r>
 8015fcc:	4580      	cmp	r8, r0
 8015fce:	d13a      	bne.n	8016046 <_malloc_r+0xd2>
 8015fd0:	6821      	ldr	r1, [r4, #0]
 8015fd2:	3503      	adds	r5, #3
 8015fd4:	1a6d      	subs	r5, r5, r1
 8015fd6:	f025 0503 	bic.w	r5, r5, #3
 8015fda:	3508      	adds	r5, #8
 8015fdc:	2d0c      	cmp	r5, #12
 8015fde:	bf38      	it	cc
 8015fe0:	250c      	movcc	r5, #12
 8015fe2:	4629      	mov	r1, r5
 8015fe4:	4638      	mov	r0, r7
 8015fe6:	f7ff ffa5 	bl	8015f34 <sbrk_aligned>
 8015fea:	3001      	adds	r0, #1
 8015fec:	d02b      	beq.n	8016046 <_malloc_r+0xd2>
 8015fee:	6823      	ldr	r3, [r4, #0]
 8015ff0:	442b      	add	r3, r5
 8015ff2:	6023      	str	r3, [r4, #0]
 8015ff4:	e00e      	b.n	8016014 <_malloc_r+0xa0>
 8015ff6:	6822      	ldr	r2, [r4, #0]
 8015ff8:	1b52      	subs	r2, r2, r5
 8015ffa:	d41e      	bmi.n	801603a <_malloc_r+0xc6>
 8015ffc:	2a0b      	cmp	r2, #11
 8015ffe:	d916      	bls.n	801602e <_malloc_r+0xba>
 8016000:	1961      	adds	r1, r4, r5
 8016002:	42a3      	cmp	r3, r4
 8016004:	6025      	str	r5, [r4, #0]
 8016006:	bf18      	it	ne
 8016008:	6059      	strne	r1, [r3, #4]
 801600a:	6863      	ldr	r3, [r4, #4]
 801600c:	bf08      	it	eq
 801600e:	6031      	streq	r1, [r6, #0]
 8016010:	5162      	str	r2, [r4, r5]
 8016012:	604b      	str	r3, [r1, #4]
 8016014:	4638      	mov	r0, r7
 8016016:	f104 060b 	add.w	r6, r4, #11
 801601a:	f000 fba3 	bl	8016764 <__malloc_unlock>
 801601e:	f026 0607 	bic.w	r6, r6, #7
 8016022:	1d23      	adds	r3, r4, #4
 8016024:	1af2      	subs	r2, r6, r3
 8016026:	d0b6      	beq.n	8015f96 <_malloc_r+0x22>
 8016028:	1b9b      	subs	r3, r3, r6
 801602a:	50a3      	str	r3, [r4, r2]
 801602c:	e7b3      	b.n	8015f96 <_malloc_r+0x22>
 801602e:	6862      	ldr	r2, [r4, #4]
 8016030:	42a3      	cmp	r3, r4
 8016032:	bf0c      	ite	eq
 8016034:	6032      	streq	r2, [r6, #0]
 8016036:	605a      	strne	r2, [r3, #4]
 8016038:	e7ec      	b.n	8016014 <_malloc_r+0xa0>
 801603a:	4623      	mov	r3, r4
 801603c:	6864      	ldr	r4, [r4, #4]
 801603e:	e7b2      	b.n	8015fa6 <_malloc_r+0x32>
 8016040:	4634      	mov	r4, r6
 8016042:	6876      	ldr	r6, [r6, #4]
 8016044:	e7b9      	b.n	8015fba <_malloc_r+0x46>
 8016046:	230c      	movs	r3, #12
 8016048:	603b      	str	r3, [r7, #0]
 801604a:	4638      	mov	r0, r7
 801604c:	f000 fb8a 	bl	8016764 <__malloc_unlock>
 8016050:	e7a1      	b.n	8015f96 <_malloc_r+0x22>
 8016052:	6025      	str	r5, [r4, #0]
 8016054:	e7de      	b.n	8016014 <_malloc_r+0xa0>
 8016056:	bf00      	nop
 8016058:	2400558c 	.word	0x2400558c

0801605c <iprintf>:
 801605c:	b40f      	push	{r0, r1, r2, r3}
 801605e:	4b0a      	ldr	r3, [pc, #40]	; (8016088 <iprintf+0x2c>)
 8016060:	b513      	push	{r0, r1, r4, lr}
 8016062:	681c      	ldr	r4, [r3, #0]
 8016064:	b124      	cbz	r4, 8016070 <iprintf+0x14>
 8016066:	69a3      	ldr	r3, [r4, #24]
 8016068:	b913      	cbnz	r3, 8016070 <iprintf+0x14>
 801606a:	4620      	mov	r0, r4
 801606c:	f000 fa6e 	bl	801654c <__sinit>
 8016070:	ab05      	add	r3, sp, #20
 8016072:	9a04      	ldr	r2, [sp, #16]
 8016074:	68a1      	ldr	r1, [r4, #8]
 8016076:	9301      	str	r3, [sp, #4]
 8016078:	4620      	mov	r0, r4
 801607a:	f000 fba3 	bl	80167c4 <_vfiprintf_r>
 801607e:	b002      	add	sp, #8
 8016080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016084:	b004      	add	sp, #16
 8016086:	4770      	bx	lr
 8016088:	2400009c 	.word	0x2400009c

0801608c <_puts_r>:
 801608c:	b570      	push	{r4, r5, r6, lr}
 801608e:	460e      	mov	r6, r1
 8016090:	4605      	mov	r5, r0
 8016092:	b118      	cbz	r0, 801609c <_puts_r+0x10>
 8016094:	6983      	ldr	r3, [r0, #24]
 8016096:	b90b      	cbnz	r3, 801609c <_puts_r+0x10>
 8016098:	f000 fa58 	bl	801654c <__sinit>
 801609c:	69ab      	ldr	r3, [r5, #24]
 801609e:	68ac      	ldr	r4, [r5, #8]
 80160a0:	b913      	cbnz	r3, 80160a8 <_puts_r+0x1c>
 80160a2:	4628      	mov	r0, r5
 80160a4:	f000 fa52 	bl	801654c <__sinit>
 80160a8:	4b2c      	ldr	r3, [pc, #176]	; (801615c <_puts_r+0xd0>)
 80160aa:	429c      	cmp	r4, r3
 80160ac:	d120      	bne.n	80160f0 <_puts_r+0x64>
 80160ae:	686c      	ldr	r4, [r5, #4]
 80160b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80160b2:	07db      	lsls	r3, r3, #31
 80160b4:	d405      	bmi.n	80160c2 <_puts_r+0x36>
 80160b6:	89a3      	ldrh	r3, [r4, #12]
 80160b8:	0598      	lsls	r0, r3, #22
 80160ba:	d402      	bmi.n	80160c2 <_puts_r+0x36>
 80160bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80160be:	f000 fae3 	bl	8016688 <__retarget_lock_acquire_recursive>
 80160c2:	89a3      	ldrh	r3, [r4, #12]
 80160c4:	0719      	lsls	r1, r3, #28
 80160c6:	d51d      	bpl.n	8016104 <_puts_r+0x78>
 80160c8:	6923      	ldr	r3, [r4, #16]
 80160ca:	b1db      	cbz	r3, 8016104 <_puts_r+0x78>
 80160cc:	3e01      	subs	r6, #1
 80160ce:	68a3      	ldr	r3, [r4, #8]
 80160d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80160d4:	3b01      	subs	r3, #1
 80160d6:	60a3      	str	r3, [r4, #8]
 80160d8:	bb39      	cbnz	r1, 801612a <_puts_r+0x9e>
 80160da:	2b00      	cmp	r3, #0
 80160dc:	da38      	bge.n	8016150 <_puts_r+0xc4>
 80160de:	4622      	mov	r2, r4
 80160e0:	210a      	movs	r1, #10
 80160e2:	4628      	mov	r0, r5
 80160e4:	f000 f858 	bl	8016198 <__swbuf_r>
 80160e8:	3001      	adds	r0, #1
 80160ea:	d011      	beq.n	8016110 <_puts_r+0x84>
 80160ec:	250a      	movs	r5, #10
 80160ee:	e011      	b.n	8016114 <_puts_r+0x88>
 80160f0:	4b1b      	ldr	r3, [pc, #108]	; (8016160 <_puts_r+0xd4>)
 80160f2:	429c      	cmp	r4, r3
 80160f4:	d101      	bne.n	80160fa <_puts_r+0x6e>
 80160f6:	68ac      	ldr	r4, [r5, #8]
 80160f8:	e7da      	b.n	80160b0 <_puts_r+0x24>
 80160fa:	4b1a      	ldr	r3, [pc, #104]	; (8016164 <_puts_r+0xd8>)
 80160fc:	429c      	cmp	r4, r3
 80160fe:	bf08      	it	eq
 8016100:	68ec      	ldreq	r4, [r5, #12]
 8016102:	e7d5      	b.n	80160b0 <_puts_r+0x24>
 8016104:	4621      	mov	r1, r4
 8016106:	4628      	mov	r0, r5
 8016108:	f000 f898 	bl	801623c <__swsetup_r>
 801610c:	2800      	cmp	r0, #0
 801610e:	d0dd      	beq.n	80160cc <_puts_r+0x40>
 8016110:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016114:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016116:	07da      	lsls	r2, r3, #31
 8016118:	d405      	bmi.n	8016126 <_puts_r+0x9a>
 801611a:	89a3      	ldrh	r3, [r4, #12]
 801611c:	059b      	lsls	r3, r3, #22
 801611e:	d402      	bmi.n	8016126 <_puts_r+0x9a>
 8016120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016122:	f000 fab2 	bl	801668a <__retarget_lock_release_recursive>
 8016126:	4628      	mov	r0, r5
 8016128:	bd70      	pop	{r4, r5, r6, pc}
 801612a:	2b00      	cmp	r3, #0
 801612c:	da04      	bge.n	8016138 <_puts_r+0xac>
 801612e:	69a2      	ldr	r2, [r4, #24]
 8016130:	429a      	cmp	r2, r3
 8016132:	dc06      	bgt.n	8016142 <_puts_r+0xb6>
 8016134:	290a      	cmp	r1, #10
 8016136:	d004      	beq.n	8016142 <_puts_r+0xb6>
 8016138:	6823      	ldr	r3, [r4, #0]
 801613a:	1c5a      	adds	r2, r3, #1
 801613c:	6022      	str	r2, [r4, #0]
 801613e:	7019      	strb	r1, [r3, #0]
 8016140:	e7c5      	b.n	80160ce <_puts_r+0x42>
 8016142:	4622      	mov	r2, r4
 8016144:	4628      	mov	r0, r5
 8016146:	f000 f827 	bl	8016198 <__swbuf_r>
 801614a:	3001      	adds	r0, #1
 801614c:	d1bf      	bne.n	80160ce <_puts_r+0x42>
 801614e:	e7df      	b.n	8016110 <_puts_r+0x84>
 8016150:	6823      	ldr	r3, [r4, #0]
 8016152:	250a      	movs	r5, #10
 8016154:	1c5a      	adds	r2, r3, #1
 8016156:	6022      	str	r2, [r4, #0]
 8016158:	701d      	strb	r5, [r3, #0]
 801615a:	e7db      	b.n	8016114 <_puts_r+0x88>
 801615c:	080172a8 	.word	0x080172a8
 8016160:	080172c8 	.word	0x080172c8
 8016164:	08017288 	.word	0x08017288

08016168 <puts>:
 8016168:	4b02      	ldr	r3, [pc, #8]	; (8016174 <puts+0xc>)
 801616a:	4601      	mov	r1, r0
 801616c:	6818      	ldr	r0, [r3, #0]
 801616e:	f7ff bf8d 	b.w	801608c <_puts_r>
 8016172:	bf00      	nop
 8016174:	2400009c 	.word	0x2400009c

08016178 <_sbrk_r>:
 8016178:	b538      	push	{r3, r4, r5, lr}
 801617a:	4d06      	ldr	r5, [pc, #24]	; (8016194 <_sbrk_r+0x1c>)
 801617c:	2300      	movs	r3, #0
 801617e:	4604      	mov	r4, r0
 8016180:	4608      	mov	r0, r1
 8016182:	602b      	str	r3, [r5, #0]
 8016184:	f7ed fa5a 	bl	800363c <_sbrk>
 8016188:	1c43      	adds	r3, r0, #1
 801618a:	d102      	bne.n	8016192 <_sbrk_r+0x1a>
 801618c:	682b      	ldr	r3, [r5, #0]
 801618e:	b103      	cbz	r3, 8016192 <_sbrk_r+0x1a>
 8016190:	6023      	str	r3, [r4, #0]
 8016192:	bd38      	pop	{r3, r4, r5, pc}
 8016194:	24005598 	.word	0x24005598

08016198 <__swbuf_r>:
 8016198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801619a:	460e      	mov	r6, r1
 801619c:	4614      	mov	r4, r2
 801619e:	4605      	mov	r5, r0
 80161a0:	b118      	cbz	r0, 80161aa <__swbuf_r+0x12>
 80161a2:	6983      	ldr	r3, [r0, #24]
 80161a4:	b90b      	cbnz	r3, 80161aa <__swbuf_r+0x12>
 80161a6:	f000 f9d1 	bl	801654c <__sinit>
 80161aa:	4b21      	ldr	r3, [pc, #132]	; (8016230 <__swbuf_r+0x98>)
 80161ac:	429c      	cmp	r4, r3
 80161ae:	d12b      	bne.n	8016208 <__swbuf_r+0x70>
 80161b0:	686c      	ldr	r4, [r5, #4]
 80161b2:	69a3      	ldr	r3, [r4, #24]
 80161b4:	60a3      	str	r3, [r4, #8]
 80161b6:	89a3      	ldrh	r3, [r4, #12]
 80161b8:	071a      	lsls	r2, r3, #28
 80161ba:	d52f      	bpl.n	801621c <__swbuf_r+0x84>
 80161bc:	6923      	ldr	r3, [r4, #16]
 80161be:	b36b      	cbz	r3, 801621c <__swbuf_r+0x84>
 80161c0:	6923      	ldr	r3, [r4, #16]
 80161c2:	6820      	ldr	r0, [r4, #0]
 80161c4:	1ac0      	subs	r0, r0, r3
 80161c6:	6963      	ldr	r3, [r4, #20]
 80161c8:	b2f6      	uxtb	r6, r6
 80161ca:	4283      	cmp	r3, r0
 80161cc:	4637      	mov	r7, r6
 80161ce:	dc04      	bgt.n	80161da <__swbuf_r+0x42>
 80161d0:	4621      	mov	r1, r4
 80161d2:	4628      	mov	r0, r5
 80161d4:	f000 f926 	bl	8016424 <_fflush_r>
 80161d8:	bb30      	cbnz	r0, 8016228 <__swbuf_r+0x90>
 80161da:	68a3      	ldr	r3, [r4, #8]
 80161dc:	3b01      	subs	r3, #1
 80161de:	60a3      	str	r3, [r4, #8]
 80161e0:	6823      	ldr	r3, [r4, #0]
 80161e2:	1c5a      	adds	r2, r3, #1
 80161e4:	6022      	str	r2, [r4, #0]
 80161e6:	701e      	strb	r6, [r3, #0]
 80161e8:	6963      	ldr	r3, [r4, #20]
 80161ea:	3001      	adds	r0, #1
 80161ec:	4283      	cmp	r3, r0
 80161ee:	d004      	beq.n	80161fa <__swbuf_r+0x62>
 80161f0:	89a3      	ldrh	r3, [r4, #12]
 80161f2:	07db      	lsls	r3, r3, #31
 80161f4:	d506      	bpl.n	8016204 <__swbuf_r+0x6c>
 80161f6:	2e0a      	cmp	r6, #10
 80161f8:	d104      	bne.n	8016204 <__swbuf_r+0x6c>
 80161fa:	4621      	mov	r1, r4
 80161fc:	4628      	mov	r0, r5
 80161fe:	f000 f911 	bl	8016424 <_fflush_r>
 8016202:	b988      	cbnz	r0, 8016228 <__swbuf_r+0x90>
 8016204:	4638      	mov	r0, r7
 8016206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016208:	4b0a      	ldr	r3, [pc, #40]	; (8016234 <__swbuf_r+0x9c>)
 801620a:	429c      	cmp	r4, r3
 801620c:	d101      	bne.n	8016212 <__swbuf_r+0x7a>
 801620e:	68ac      	ldr	r4, [r5, #8]
 8016210:	e7cf      	b.n	80161b2 <__swbuf_r+0x1a>
 8016212:	4b09      	ldr	r3, [pc, #36]	; (8016238 <__swbuf_r+0xa0>)
 8016214:	429c      	cmp	r4, r3
 8016216:	bf08      	it	eq
 8016218:	68ec      	ldreq	r4, [r5, #12]
 801621a:	e7ca      	b.n	80161b2 <__swbuf_r+0x1a>
 801621c:	4621      	mov	r1, r4
 801621e:	4628      	mov	r0, r5
 8016220:	f000 f80c 	bl	801623c <__swsetup_r>
 8016224:	2800      	cmp	r0, #0
 8016226:	d0cb      	beq.n	80161c0 <__swbuf_r+0x28>
 8016228:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801622c:	e7ea      	b.n	8016204 <__swbuf_r+0x6c>
 801622e:	bf00      	nop
 8016230:	080172a8 	.word	0x080172a8
 8016234:	080172c8 	.word	0x080172c8
 8016238:	08017288 	.word	0x08017288

0801623c <__swsetup_r>:
 801623c:	4b32      	ldr	r3, [pc, #200]	; (8016308 <__swsetup_r+0xcc>)
 801623e:	b570      	push	{r4, r5, r6, lr}
 8016240:	681d      	ldr	r5, [r3, #0]
 8016242:	4606      	mov	r6, r0
 8016244:	460c      	mov	r4, r1
 8016246:	b125      	cbz	r5, 8016252 <__swsetup_r+0x16>
 8016248:	69ab      	ldr	r3, [r5, #24]
 801624a:	b913      	cbnz	r3, 8016252 <__swsetup_r+0x16>
 801624c:	4628      	mov	r0, r5
 801624e:	f000 f97d 	bl	801654c <__sinit>
 8016252:	4b2e      	ldr	r3, [pc, #184]	; (801630c <__swsetup_r+0xd0>)
 8016254:	429c      	cmp	r4, r3
 8016256:	d10f      	bne.n	8016278 <__swsetup_r+0x3c>
 8016258:	686c      	ldr	r4, [r5, #4]
 801625a:	89a3      	ldrh	r3, [r4, #12]
 801625c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016260:	0719      	lsls	r1, r3, #28
 8016262:	d42c      	bmi.n	80162be <__swsetup_r+0x82>
 8016264:	06dd      	lsls	r5, r3, #27
 8016266:	d411      	bmi.n	801628c <__swsetup_r+0x50>
 8016268:	2309      	movs	r3, #9
 801626a:	6033      	str	r3, [r6, #0]
 801626c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016270:	81a3      	strh	r3, [r4, #12]
 8016272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016276:	e03e      	b.n	80162f6 <__swsetup_r+0xba>
 8016278:	4b25      	ldr	r3, [pc, #148]	; (8016310 <__swsetup_r+0xd4>)
 801627a:	429c      	cmp	r4, r3
 801627c:	d101      	bne.n	8016282 <__swsetup_r+0x46>
 801627e:	68ac      	ldr	r4, [r5, #8]
 8016280:	e7eb      	b.n	801625a <__swsetup_r+0x1e>
 8016282:	4b24      	ldr	r3, [pc, #144]	; (8016314 <__swsetup_r+0xd8>)
 8016284:	429c      	cmp	r4, r3
 8016286:	bf08      	it	eq
 8016288:	68ec      	ldreq	r4, [r5, #12]
 801628a:	e7e6      	b.n	801625a <__swsetup_r+0x1e>
 801628c:	0758      	lsls	r0, r3, #29
 801628e:	d512      	bpl.n	80162b6 <__swsetup_r+0x7a>
 8016290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016292:	b141      	cbz	r1, 80162a6 <__swsetup_r+0x6a>
 8016294:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016298:	4299      	cmp	r1, r3
 801629a:	d002      	beq.n	80162a2 <__swsetup_r+0x66>
 801629c:	4630      	mov	r0, r6
 801629e:	f7ff fdfd 	bl	8015e9c <_free_r>
 80162a2:	2300      	movs	r3, #0
 80162a4:	6363      	str	r3, [r4, #52]	; 0x34
 80162a6:	89a3      	ldrh	r3, [r4, #12]
 80162a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80162ac:	81a3      	strh	r3, [r4, #12]
 80162ae:	2300      	movs	r3, #0
 80162b0:	6063      	str	r3, [r4, #4]
 80162b2:	6923      	ldr	r3, [r4, #16]
 80162b4:	6023      	str	r3, [r4, #0]
 80162b6:	89a3      	ldrh	r3, [r4, #12]
 80162b8:	f043 0308 	orr.w	r3, r3, #8
 80162bc:	81a3      	strh	r3, [r4, #12]
 80162be:	6923      	ldr	r3, [r4, #16]
 80162c0:	b94b      	cbnz	r3, 80162d6 <__swsetup_r+0x9a>
 80162c2:	89a3      	ldrh	r3, [r4, #12]
 80162c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80162c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80162cc:	d003      	beq.n	80162d6 <__swsetup_r+0x9a>
 80162ce:	4621      	mov	r1, r4
 80162d0:	4630      	mov	r0, r6
 80162d2:	f000 fa01 	bl	80166d8 <__smakebuf_r>
 80162d6:	89a0      	ldrh	r0, [r4, #12]
 80162d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80162dc:	f010 0301 	ands.w	r3, r0, #1
 80162e0:	d00a      	beq.n	80162f8 <__swsetup_r+0xbc>
 80162e2:	2300      	movs	r3, #0
 80162e4:	60a3      	str	r3, [r4, #8]
 80162e6:	6963      	ldr	r3, [r4, #20]
 80162e8:	425b      	negs	r3, r3
 80162ea:	61a3      	str	r3, [r4, #24]
 80162ec:	6923      	ldr	r3, [r4, #16]
 80162ee:	b943      	cbnz	r3, 8016302 <__swsetup_r+0xc6>
 80162f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80162f4:	d1ba      	bne.n	801626c <__swsetup_r+0x30>
 80162f6:	bd70      	pop	{r4, r5, r6, pc}
 80162f8:	0781      	lsls	r1, r0, #30
 80162fa:	bf58      	it	pl
 80162fc:	6963      	ldrpl	r3, [r4, #20]
 80162fe:	60a3      	str	r3, [r4, #8]
 8016300:	e7f4      	b.n	80162ec <__swsetup_r+0xb0>
 8016302:	2000      	movs	r0, #0
 8016304:	e7f7      	b.n	80162f6 <__swsetup_r+0xba>
 8016306:	bf00      	nop
 8016308:	2400009c 	.word	0x2400009c
 801630c:	080172a8 	.word	0x080172a8
 8016310:	080172c8 	.word	0x080172c8
 8016314:	08017288 	.word	0x08017288

08016318 <__sflush_r>:
 8016318:	898a      	ldrh	r2, [r1, #12]
 801631a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801631e:	4605      	mov	r5, r0
 8016320:	0710      	lsls	r0, r2, #28
 8016322:	460c      	mov	r4, r1
 8016324:	d458      	bmi.n	80163d8 <__sflush_r+0xc0>
 8016326:	684b      	ldr	r3, [r1, #4]
 8016328:	2b00      	cmp	r3, #0
 801632a:	dc05      	bgt.n	8016338 <__sflush_r+0x20>
 801632c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801632e:	2b00      	cmp	r3, #0
 8016330:	dc02      	bgt.n	8016338 <__sflush_r+0x20>
 8016332:	2000      	movs	r0, #0
 8016334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801633a:	2e00      	cmp	r6, #0
 801633c:	d0f9      	beq.n	8016332 <__sflush_r+0x1a>
 801633e:	2300      	movs	r3, #0
 8016340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016344:	682f      	ldr	r7, [r5, #0]
 8016346:	602b      	str	r3, [r5, #0]
 8016348:	d032      	beq.n	80163b0 <__sflush_r+0x98>
 801634a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801634c:	89a3      	ldrh	r3, [r4, #12]
 801634e:	075a      	lsls	r2, r3, #29
 8016350:	d505      	bpl.n	801635e <__sflush_r+0x46>
 8016352:	6863      	ldr	r3, [r4, #4]
 8016354:	1ac0      	subs	r0, r0, r3
 8016356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016358:	b10b      	cbz	r3, 801635e <__sflush_r+0x46>
 801635a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801635c:	1ac0      	subs	r0, r0, r3
 801635e:	2300      	movs	r3, #0
 8016360:	4602      	mov	r2, r0
 8016362:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016364:	6a21      	ldr	r1, [r4, #32]
 8016366:	4628      	mov	r0, r5
 8016368:	47b0      	blx	r6
 801636a:	1c43      	adds	r3, r0, #1
 801636c:	89a3      	ldrh	r3, [r4, #12]
 801636e:	d106      	bne.n	801637e <__sflush_r+0x66>
 8016370:	6829      	ldr	r1, [r5, #0]
 8016372:	291d      	cmp	r1, #29
 8016374:	d82c      	bhi.n	80163d0 <__sflush_r+0xb8>
 8016376:	4a2a      	ldr	r2, [pc, #168]	; (8016420 <__sflush_r+0x108>)
 8016378:	40ca      	lsrs	r2, r1
 801637a:	07d6      	lsls	r6, r2, #31
 801637c:	d528      	bpl.n	80163d0 <__sflush_r+0xb8>
 801637e:	2200      	movs	r2, #0
 8016380:	6062      	str	r2, [r4, #4]
 8016382:	04d9      	lsls	r1, r3, #19
 8016384:	6922      	ldr	r2, [r4, #16]
 8016386:	6022      	str	r2, [r4, #0]
 8016388:	d504      	bpl.n	8016394 <__sflush_r+0x7c>
 801638a:	1c42      	adds	r2, r0, #1
 801638c:	d101      	bne.n	8016392 <__sflush_r+0x7a>
 801638e:	682b      	ldr	r3, [r5, #0]
 8016390:	b903      	cbnz	r3, 8016394 <__sflush_r+0x7c>
 8016392:	6560      	str	r0, [r4, #84]	; 0x54
 8016394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016396:	602f      	str	r7, [r5, #0]
 8016398:	2900      	cmp	r1, #0
 801639a:	d0ca      	beq.n	8016332 <__sflush_r+0x1a>
 801639c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80163a0:	4299      	cmp	r1, r3
 80163a2:	d002      	beq.n	80163aa <__sflush_r+0x92>
 80163a4:	4628      	mov	r0, r5
 80163a6:	f7ff fd79 	bl	8015e9c <_free_r>
 80163aa:	2000      	movs	r0, #0
 80163ac:	6360      	str	r0, [r4, #52]	; 0x34
 80163ae:	e7c1      	b.n	8016334 <__sflush_r+0x1c>
 80163b0:	6a21      	ldr	r1, [r4, #32]
 80163b2:	2301      	movs	r3, #1
 80163b4:	4628      	mov	r0, r5
 80163b6:	47b0      	blx	r6
 80163b8:	1c41      	adds	r1, r0, #1
 80163ba:	d1c7      	bne.n	801634c <__sflush_r+0x34>
 80163bc:	682b      	ldr	r3, [r5, #0]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d0c4      	beq.n	801634c <__sflush_r+0x34>
 80163c2:	2b1d      	cmp	r3, #29
 80163c4:	d001      	beq.n	80163ca <__sflush_r+0xb2>
 80163c6:	2b16      	cmp	r3, #22
 80163c8:	d101      	bne.n	80163ce <__sflush_r+0xb6>
 80163ca:	602f      	str	r7, [r5, #0]
 80163cc:	e7b1      	b.n	8016332 <__sflush_r+0x1a>
 80163ce:	89a3      	ldrh	r3, [r4, #12]
 80163d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163d4:	81a3      	strh	r3, [r4, #12]
 80163d6:	e7ad      	b.n	8016334 <__sflush_r+0x1c>
 80163d8:	690f      	ldr	r7, [r1, #16]
 80163da:	2f00      	cmp	r7, #0
 80163dc:	d0a9      	beq.n	8016332 <__sflush_r+0x1a>
 80163de:	0793      	lsls	r3, r2, #30
 80163e0:	680e      	ldr	r6, [r1, #0]
 80163e2:	bf08      	it	eq
 80163e4:	694b      	ldreq	r3, [r1, #20]
 80163e6:	600f      	str	r7, [r1, #0]
 80163e8:	bf18      	it	ne
 80163ea:	2300      	movne	r3, #0
 80163ec:	eba6 0807 	sub.w	r8, r6, r7
 80163f0:	608b      	str	r3, [r1, #8]
 80163f2:	f1b8 0f00 	cmp.w	r8, #0
 80163f6:	dd9c      	ble.n	8016332 <__sflush_r+0x1a>
 80163f8:	6a21      	ldr	r1, [r4, #32]
 80163fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80163fc:	4643      	mov	r3, r8
 80163fe:	463a      	mov	r2, r7
 8016400:	4628      	mov	r0, r5
 8016402:	47b0      	blx	r6
 8016404:	2800      	cmp	r0, #0
 8016406:	dc06      	bgt.n	8016416 <__sflush_r+0xfe>
 8016408:	89a3      	ldrh	r3, [r4, #12]
 801640a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801640e:	81a3      	strh	r3, [r4, #12]
 8016410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016414:	e78e      	b.n	8016334 <__sflush_r+0x1c>
 8016416:	4407      	add	r7, r0
 8016418:	eba8 0800 	sub.w	r8, r8, r0
 801641c:	e7e9      	b.n	80163f2 <__sflush_r+0xda>
 801641e:	bf00      	nop
 8016420:	20400001 	.word	0x20400001

08016424 <_fflush_r>:
 8016424:	b538      	push	{r3, r4, r5, lr}
 8016426:	690b      	ldr	r3, [r1, #16]
 8016428:	4605      	mov	r5, r0
 801642a:	460c      	mov	r4, r1
 801642c:	b913      	cbnz	r3, 8016434 <_fflush_r+0x10>
 801642e:	2500      	movs	r5, #0
 8016430:	4628      	mov	r0, r5
 8016432:	bd38      	pop	{r3, r4, r5, pc}
 8016434:	b118      	cbz	r0, 801643e <_fflush_r+0x1a>
 8016436:	6983      	ldr	r3, [r0, #24]
 8016438:	b90b      	cbnz	r3, 801643e <_fflush_r+0x1a>
 801643a:	f000 f887 	bl	801654c <__sinit>
 801643e:	4b14      	ldr	r3, [pc, #80]	; (8016490 <_fflush_r+0x6c>)
 8016440:	429c      	cmp	r4, r3
 8016442:	d11b      	bne.n	801647c <_fflush_r+0x58>
 8016444:	686c      	ldr	r4, [r5, #4]
 8016446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d0ef      	beq.n	801642e <_fflush_r+0xa>
 801644e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016450:	07d0      	lsls	r0, r2, #31
 8016452:	d404      	bmi.n	801645e <_fflush_r+0x3a>
 8016454:	0599      	lsls	r1, r3, #22
 8016456:	d402      	bmi.n	801645e <_fflush_r+0x3a>
 8016458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801645a:	f000 f915 	bl	8016688 <__retarget_lock_acquire_recursive>
 801645e:	4628      	mov	r0, r5
 8016460:	4621      	mov	r1, r4
 8016462:	f7ff ff59 	bl	8016318 <__sflush_r>
 8016466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016468:	07da      	lsls	r2, r3, #31
 801646a:	4605      	mov	r5, r0
 801646c:	d4e0      	bmi.n	8016430 <_fflush_r+0xc>
 801646e:	89a3      	ldrh	r3, [r4, #12]
 8016470:	059b      	lsls	r3, r3, #22
 8016472:	d4dd      	bmi.n	8016430 <_fflush_r+0xc>
 8016474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016476:	f000 f908 	bl	801668a <__retarget_lock_release_recursive>
 801647a:	e7d9      	b.n	8016430 <_fflush_r+0xc>
 801647c:	4b05      	ldr	r3, [pc, #20]	; (8016494 <_fflush_r+0x70>)
 801647e:	429c      	cmp	r4, r3
 8016480:	d101      	bne.n	8016486 <_fflush_r+0x62>
 8016482:	68ac      	ldr	r4, [r5, #8]
 8016484:	e7df      	b.n	8016446 <_fflush_r+0x22>
 8016486:	4b04      	ldr	r3, [pc, #16]	; (8016498 <_fflush_r+0x74>)
 8016488:	429c      	cmp	r4, r3
 801648a:	bf08      	it	eq
 801648c:	68ec      	ldreq	r4, [r5, #12]
 801648e:	e7da      	b.n	8016446 <_fflush_r+0x22>
 8016490:	080172a8 	.word	0x080172a8
 8016494:	080172c8 	.word	0x080172c8
 8016498:	08017288 	.word	0x08017288

0801649c <std>:
 801649c:	2300      	movs	r3, #0
 801649e:	b510      	push	{r4, lr}
 80164a0:	4604      	mov	r4, r0
 80164a2:	e9c0 3300 	strd	r3, r3, [r0]
 80164a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80164aa:	6083      	str	r3, [r0, #8]
 80164ac:	8181      	strh	r1, [r0, #12]
 80164ae:	6643      	str	r3, [r0, #100]	; 0x64
 80164b0:	81c2      	strh	r2, [r0, #14]
 80164b2:	6183      	str	r3, [r0, #24]
 80164b4:	4619      	mov	r1, r3
 80164b6:	2208      	movs	r2, #8
 80164b8:	305c      	adds	r0, #92	; 0x5c
 80164ba:	f7ff fce7 	bl	8015e8c <memset>
 80164be:	4b05      	ldr	r3, [pc, #20]	; (80164d4 <std+0x38>)
 80164c0:	6263      	str	r3, [r4, #36]	; 0x24
 80164c2:	4b05      	ldr	r3, [pc, #20]	; (80164d8 <std+0x3c>)
 80164c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80164c6:	4b05      	ldr	r3, [pc, #20]	; (80164dc <std+0x40>)
 80164c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80164ca:	4b05      	ldr	r3, [pc, #20]	; (80164e0 <std+0x44>)
 80164cc:	6224      	str	r4, [r4, #32]
 80164ce:	6323      	str	r3, [r4, #48]	; 0x30
 80164d0:	bd10      	pop	{r4, pc}
 80164d2:	bf00      	nop
 80164d4:	08016d4d 	.word	0x08016d4d
 80164d8:	08016d6f 	.word	0x08016d6f
 80164dc:	08016da7 	.word	0x08016da7
 80164e0:	08016dcb 	.word	0x08016dcb

080164e4 <_cleanup_r>:
 80164e4:	4901      	ldr	r1, [pc, #4]	; (80164ec <_cleanup_r+0x8>)
 80164e6:	f000 b8af 	b.w	8016648 <_fwalk_reent>
 80164ea:	bf00      	nop
 80164ec:	08016425 	.word	0x08016425

080164f0 <__sfmoreglue>:
 80164f0:	b570      	push	{r4, r5, r6, lr}
 80164f2:	2268      	movs	r2, #104	; 0x68
 80164f4:	1e4d      	subs	r5, r1, #1
 80164f6:	4355      	muls	r5, r2
 80164f8:	460e      	mov	r6, r1
 80164fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80164fe:	f7ff fd39 	bl	8015f74 <_malloc_r>
 8016502:	4604      	mov	r4, r0
 8016504:	b140      	cbz	r0, 8016518 <__sfmoreglue+0x28>
 8016506:	2100      	movs	r1, #0
 8016508:	e9c0 1600 	strd	r1, r6, [r0]
 801650c:	300c      	adds	r0, #12
 801650e:	60a0      	str	r0, [r4, #8]
 8016510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016514:	f7ff fcba 	bl	8015e8c <memset>
 8016518:	4620      	mov	r0, r4
 801651a:	bd70      	pop	{r4, r5, r6, pc}

0801651c <__sfp_lock_acquire>:
 801651c:	4801      	ldr	r0, [pc, #4]	; (8016524 <__sfp_lock_acquire+0x8>)
 801651e:	f000 b8b3 	b.w	8016688 <__retarget_lock_acquire_recursive>
 8016522:	bf00      	nop
 8016524:	24005595 	.word	0x24005595

08016528 <__sfp_lock_release>:
 8016528:	4801      	ldr	r0, [pc, #4]	; (8016530 <__sfp_lock_release+0x8>)
 801652a:	f000 b8ae 	b.w	801668a <__retarget_lock_release_recursive>
 801652e:	bf00      	nop
 8016530:	24005595 	.word	0x24005595

08016534 <__sinit_lock_acquire>:
 8016534:	4801      	ldr	r0, [pc, #4]	; (801653c <__sinit_lock_acquire+0x8>)
 8016536:	f000 b8a7 	b.w	8016688 <__retarget_lock_acquire_recursive>
 801653a:	bf00      	nop
 801653c:	24005596 	.word	0x24005596

08016540 <__sinit_lock_release>:
 8016540:	4801      	ldr	r0, [pc, #4]	; (8016548 <__sinit_lock_release+0x8>)
 8016542:	f000 b8a2 	b.w	801668a <__retarget_lock_release_recursive>
 8016546:	bf00      	nop
 8016548:	24005596 	.word	0x24005596

0801654c <__sinit>:
 801654c:	b510      	push	{r4, lr}
 801654e:	4604      	mov	r4, r0
 8016550:	f7ff fff0 	bl	8016534 <__sinit_lock_acquire>
 8016554:	69a3      	ldr	r3, [r4, #24]
 8016556:	b11b      	cbz	r3, 8016560 <__sinit+0x14>
 8016558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801655c:	f7ff bff0 	b.w	8016540 <__sinit_lock_release>
 8016560:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016564:	6523      	str	r3, [r4, #80]	; 0x50
 8016566:	4b13      	ldr	r3, [pc, #76]	; (80165b4 <__sinit+0x68>)
 8016568:	4a13      	ldr	r2, [pc, #76]	; (80165b8 <__sinit+0x6c>)
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	62a2      	str	r2, [r4, #40]	; 0x28
 801656e:	42a3      	cmp	r3, r4
 8016570:	bf04      	itt	eq
 8016572:	2301      	moveq	r3, #1
 8016574:	61a3      	streq	r3, [r4, #24]
 8016576:	4620      	mov	r0, r4
 8016578:	f000 f820 	bl	80165bc <__sfp>
 801657c:	6060      	str	r0, [r4, #4]
 801657e:	4620      	mov	r0, r4
 8016580:	f000 f81c 	bl	80165bc <__sfp>
 8016584:	60a0      	str	r0, [r4, #8]
 8016586:	4620      	mov	r0, r4
 8016588:	f000 f818 	bl	80165bc <__sfp>
 801658c:	2200      	movs	r2, #0
 801658e:	60e0      	str	r0, [r4, #12]
 8016590:	2104      	movs	r1, #4
 8016592:	6860      	ldr	r0, [r4, #4]
 8016594:	f7ff ff82 	bl	801649c <std>
 8016598:	68a0      	ldr	r0, [r4, #8]
 801659a:	2201      	movs	r2, #1
 801659c:	2109      	movs	r1, #9
 801659e:	f7ff ff7d 	bl	801649c <std>
 80165a2:	68e0      	ldr	r0, [r4, #12]
 80165a4:	2202      	movs	r2, #2
 80165a6:	2112      	movs	r1, #18
 80165a8:	f7ff ff78 	bl	801649c <std>
 80165ac:	2301      	movs	r3, #1
 80165ae:	61a3      	str	r3, [r4, #24]
 80165b0:	e7d2      	b.n	8016558 <__sinit+0xc>
 80165b2:	bf00      	nop
 80165b4:	08017284 	.word	0x08017284
 80165b8:	080164e5 	.word	0x080164e5

080165bc <__sfp>:
 80165bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165be:	4607      	mov	r7, r0
 80165c0:	f7ff ffac 	bl	801651c <__sfp_lock_acquire>
 80165c4:	4b1e      	ldr	r3, [pc, #120]	; (8016640 <__sfp+0x84>)
 80165c6:	681e      	ldr	r6, [r3, #0]
 80165c8:	69b3      	ldr	r3, [r6, #24]
 80165ca:	b913      	cbnz	r3, 80165d2 <__sfp+0x16>
 80165cc:	4630      	mov	r0, r6
 80165ce:	f7ff ffbd 	bl	801654c <__sinit>
 80165d2:	3648      	adds	r6, #72	; 0x48
 80165d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80165d8:	3b01      	subs	r3, #1
 80165da:	d503      	bpl.n	80165e4 <__sfp+0x28>
 80165dc:	6833      	ldr	r3, [r6, #0]
 80165de:	b30b      	cbz	r3, 8016624 <__sfp+0x68>
 80165e0:	6836      	ldr	r6, [r6, #0]
 80165e2:	e7f7      	b.n	80165d4 <__sfp+0x18>
 80165e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80165e8:	b9d5      	cbnz	r5, 8016620 <__sfp+0x64>
 80165ea:	4b16      	ldr	r3, [pc, #88]	; (8016644 <__sfp+0x88>)
 80165ec:	60e3      	str	r3, [r4, #12]
 80165ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80165f2:	6665      	str	r5, [r4, #100]	; 0x64
 80165f4:	f000 f847 	bl	8016686 <__retarget_lock_init_recursive>
 80165f8:	f7ff ff96 	bl	8016528 <__sfp_lock_release>
 80165fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016604:	6025      	str	r5, [r4, #0]
 8016606:	61a5      	str	r5, [r4, #24]
 8016608:	2208      	movs	r2, #8
 801660a:	4629      	mov	r1, r5
 801660c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016610:	f7ff fc3c 	bl	8015e8c <memset>
 8016614:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016618:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801661c:	4620      	mov	r0, r4
 801661e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016620:	3468      	adds	r4, #104	; 0x68
 8016622:	e7d9      	b.n	80165d8 <__sfp+0x1c>
 8016624:	2104      	movs	r1, #4
 8016626:	4638      	mov	r0, r7
 8016628:	f7ff ff62 	bl	80164f0 <__sfmoreglue>
 801662c:	4604      	mov	r4, r0
 801662e:	6030      	str	r0, [r6, #0]
 8016630:	2800      	cmp	r0, #0
 8016632:	d1d5      	bne.n	80165e0 <__sfp+0x24>
 8016634:	f7ff ff78 	bl	8016528 <__sfp_lock_release>
 8016638:	230c      	movs	r3, #12
 801663a:	603b      	str	r3, [r7, #0]
 801663c:	e7ee      	b.n	801661c <__sfp+0x60>
 801663e:	bf00      	nop
 8016640:	08017284 	.word	0x08017284
 8016644:	ffff0001 	.word	0xffff0001

08016648 <_fwalk_reent>:
 8016648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801664c:	4606      	mov	r6, r0
 801664e:	4688      	mov	r8, r1
 8016650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016654:	2700      	movs	r7, #0
 8016656:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801665a:	f1b9 0901 	subs.w	r9, r9, #1
 801665e:	d505      	bpl.n	801666c <_fwalk_reent+0x24>
 8016660:	6824      	ldr	r4, [r4, #0]
 8016662:	2c00      	cmp	r4, #0
 8016664:	d1f7      	bne.n	8016656 <_fwalk_reent+0xe>
 8016666:	4638      	mov	r0, r7
 8016668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801666c:	89ab      	ldrh	r3, [r5, #12]
 801666e:	2b01      	cmp	r3, #1
 8016670:	d907      	bls.n	8016682 <_fwalk_reent+0x3a>
 8016672:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016676:	3301      	adds	r3, #1
 8016678:	d003      	beq.n	8016682 <_fwalk_reent+0x3a>
 801667a:	4629      	mov	r1, r5
 801667c:	4630      	mov	r0, r6
 801667e:	47c0      	blx	r8
 8016680:	4307      	orrs	r7, r0
 8016682:	3568      	adds	r5, #104	; 0x68
 8016684:	e7e9      	b.n	801665a <_fwalk_reent+0x12>

08016686 <__retarget_lock_init_recursive>:
 8016686:	4770      	bx	lr

08016688 <__retarget_lock_acquire_recursive>:
 8016688:	4770      	bx	lr

0801668a <__retarget_lock_release_recursive>:
 801668a:	4770      	bx	lr

0801668c <__swhatbuf_r>:
 801668c:	b570      	push	{r4, r5, r6, lr}
 801668e:	460e      	mov	r6, r1
 8016690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016694:	2900      	cmp	r1, #0
 8016696:	b096      	sub	sp, #88	; 0x58
 8016698:	4614      	mov	r4, r2
 801669a:	461d      	mov	r5, r3
 801669c:	da08      	bge.n	80166b0 <__swhatbuf_r+0x24>
 801669e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80166a2:	2200      	movs	r2, #0
 80166a4:	602a      	str	r2, [r5, #0]
 80166a6:	061a      	lsls	r2, r3, #24
 80166a8:	d410      	bmi.n	80166cc <__swhatbuf_r+0x40>
 80166aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80166ae:	e00e      	b.n	80166ce <__swhatbuf_r+0x42>
 80166b0:	466a      	mov	r2, sp
 80166b2:	f000 fbb1 	bl	8016e18 <_fstat_r>
 80166b6:	2800      	cmp	r0, #0
 80166b8:	dbf1      	blt.n	801669e <__swhatbuf_r+0x12>
 80166ba:	9a01      	ldr	r2, [sp, #4]
 80166bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80166c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80166c4:	425a      	negs	r2, r3
 80166c6:	415a      	adcs	r2, r3
 80166c8:	602a      	str	r2, [r5, #0]
 80166ca:	e7ee      	b.n	80166aa <__swhatbuf_r+0x1e>
 80166cc:	2340      	movs	r3, #64	; 0x40
 80166ce:	2000      	movs	r0, #0
 80166d0:	6023      	str	r3, [r4, #0]
 80166d2:	b016      	add	sp, #88	; 0x58
 80166d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080166d8 <__smakebuf_r>:
 80166d8:	898b      	ldrh	r3, [r1, #12]
 80166da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80166dc:	079d      	lsls	r5, r3, #30
 80166de:	4606      	mov	r6, r0
 80166e0:	460c      	mov	r4, r1
 80166e2:	d507      	bpl.n	80166f4 <__smakebuf_r+0x1c>
 80166e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80166e8:	6023      	str	r3, [r4, #0]
 80166ea:	6123      	str	r3, [r4, #16]
 80166ec:	2301      	movs	r3, #1
 80166ee:	6163      	str	r3, [r4, #20]
 80166f0:	b002      	add	sp, #8
 80166f2:	bd70      	pop	{r4, r5, r6, pc}
 80166f4:	ab01      	add	r3, sp, #4
 80166f6:	466a      	mov	r2, sp
 80166f8:	f7ff ffc8 	bl	801668c <__swhatbuf_r>
 80166fc:	9900      	ldr	r1, [sp, #0]
 80166fe:	4605      	mov	r5, r0
 8016700:	4630      	mov	r0, r6
 8016702:	f7ff fc37 	bl	8015f74 <_malloc_r>
 8016706:	b948      	cbnz	r0, 801671c <__smakebuf_r+0x44>
 8016708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801670c:	059a      	lsls	r2, r3, #22
 801670e:	d4ef      	bmi.n	80166f0 <__smakebuf_r+0x18>
 8016710:	f023 0303 	bic.w	r3, r3, #3
 8016714:	f043 0302 	orr.w	r3, r3, #2
 8016718:	81a3      	strh	r3, [r4, #12]
 801671a:	e7e3      	b.n	80166e4 <__smakebuf_r+0xc>
 801671c:	4b0d      	ldr	r3, [pc, #52]	; (8016754 <__smakebuf_r+0x7c>)
 801671e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016720:	89a3      	ldrh	r3, [r4, #12]
 8016722:	6020      	str	r0, [r4, #0]
 8016724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016728:	81a3      	strh	r3, [r4, #12]
 801672a:	9b00      	ldr	r3, [sp, #0]
 801672c:	6163      	str	r3, [r4, #20]
 801672e:	9b01      	ldr	r3, [sp, #4]
 8016730:	6120      	str	r0, [r4, #16]
 8016732:	b15b      	cbz	r3, 801674c <__smakebuf_r+0x74>
 8016734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016738:	4630      	mov	r0, r6
 801673a:	f000 fb7f 	bl	8016e3c <_isatty_r>
 801673e:	b128      	cbz	r0, 801674c <__smakebuf_r+0x74>
 8016740:	89a3      	ldrh	r3, [r4, #12]
 8016742:	f023 0303 	bic.w	r3, r3, #3
 8016746:	f043 0301 	orr.w	r3, r3, #1
 801674a:	81a3      	strh	r3, [r4, #12]
 801674c:	89a0      	ldrh	r0, [r4, #12]
 801674e:	4305      	orrs	r5, r0
 8016750:	81a5      	strh	r5, [r4, #12]
 8016752:	e7cd      	b.n	80166f0 <__smakebuf_r+0x18>
 8016754:	080164e5 	.word	0x080164e5

08016758 <__malloc_lock>:
 8016758:	4801      	ldr	r0, [pc, #4]	; (8016760 <__malloc_lock+0x8>)
 801675a:	f7ff bf95 	b.w	8016688 <__retarget_lock_acquire_recursive>
 801675e:	bf00      	nop
 8016760:	24005594 	.word	0x24005594

08016764 <__malloc_unlock>:
 8016764:	4801      	ldr	r0, [pc, #4]	; (801676c <__malloc_unlock+0x8>)
 8016766:	f7ff bf90 	b.w	801668a <__retarget_lock_release_recursive>
 801676a:	bf00      	nop
 801676c:	24005594 	.word	0x24005594

08016770 <__sfputc_r>:
 8016770:	6893      	ldr	r3, [r2, #8]
 8016772:	3b01      	subs	r3, #1
 8016774:	2b00      	cmp	r3, #0
 8016776:	b410      	push	{r4}
 8016778:	6093      	str	r3, [r2, #8]
 801677a:	da08      	bge.n	801678e <__sfputc_r+0x1e>
 801677c:	6994      	ldr	r4, [r2, #24]
 801677e:	42a3      	cmp	r3, r4
 8016780:	db01      	blt.n	8016786 <__sfputc_r+0x16>
 8016782:	290a      	cmp	r1, #10
 8016784:	d103      	bne.n	801678e <__sfputc_r+0x1e>
 8016786:	f85d 4b04 	ldr.w	r4, [sp], #4
 801678a:	f7ff bd05 	b.w	8016198 <__swbuf_r>
 801678e:	6813      	ldr	r3, [r2, #0]
 8016790:	1c58      	adds	r0, r3, #1
 8016792:	6010      	str	r0, [r2, #0]
 8016794:	7019      	strb	r1, [r3, #0]
 8016796:	4608      	mov	r0, r1
 8016798:	f85d 4b04 	ldr.w	r4, [sp], #4
 801679c:	4770      	bx	lr

0801679e <__sfputs_r>:
 801679e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167a0:	4606      	mov	r6, r0
 80167a2:	460f      	mov	r7, r1
 80167a4:	4614      	mov	r4, r2
 80167a6:	18d5      	adds	r5, r2, r3
 80167a8:	42ac      	cmp	r4, r5
 80167aa:	d101      	bne.n	80167b0 <__sfputs_r+0x12>
 80167ac:	2000      	movs	r0, #0
 80167ae:	e007      	b.n	80167c0 <__sfputs_r+0x22>
 80167b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167b4:	463a      	mov	r2, r7
 80167b6:	4630      	mov	r0, r6
 80167b8:	f7ff ffda 	bl	8016770 <__sfputc_r>
 80167bc:	1c43      	adds	r3, r0, #1
 80167be:	d1f3      	bne.n	80167a8 <__sfputs_r+0xa>
 80167c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080167c4 <_vfiprintf_r>:
 80167c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c8:	460d      	mov	r5, r1
 80167ca:	b09d      	sub	sp, #116	; 0x74
 80167cc:	4614      	mov	r4, r2
 80167ce:	4698      	mov	r8, r3
 80167d0:	4606      	mov	r6, r0
 80167d2:	b118      	cbz	r0, 80167dc <_vfiprintf_r+0x18>
 80167d4:	6983      	ldr	r3, [r0, #24]
 80167d6:	b90b      	cbnz	r3, 80167dc <_vfiprintf_r+0x18>
 80167d8:	f7ff feb8 	bl	801654c <__sinit>
 80167dc:	4b89      	ldr	r3, [pc, #548]	; (8016a04 <_vfiprintf_r+0x240>)
 80167de:	429d      	cmp	r5, r3
 80167e0:	d11b      	bne.n	801681a <_vfiprintf_r+0x56>
 80167e2:	6875      	ldr	r5, [r6, #4]
 80167e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80167e6:	07d9      	lsls	r1, r3, #31
 80167e8:	d405      	bmi.n	80167f6 <_vfiprintf_r+0x32>
 80167ea:	89ab      	ldrh	r3, [r5, #12]
 80167ec:	059a      	lsls	r2, r3, #22
 80167ee:	d402      	bmi.n	80167f6 <_vfiprintf_r+0x32>
 80167f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80167f2:	f7ff ff49 	bl	8016688 <__retarget_lock_acquire_recursive>
 80167f6:	89ab      	ldrh	r3, [r5, #12]
 80167f8:	071b      	lsls	r3, r3, #28
 80167fa:	d501      	bpl.n	8016800 <_vfiprintf_r+0x3c>
 80167fc:	692b      	ldr	r3, [r5, #16]
 80167fe:	b9eb      	cbnz	r3, 801683c <_vfiprintf_r+0x78>
 8016800:	4629      	mov	r1, r5
 8016802:	4630      	mov	r0, r6
 8016804:	f7ff fd1a 	bl	801623c <__swsetup_r>
 8016808:	b1c0      	cbz	r0, 801683c <_vfiprintf_r+0x78>
 801680a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801680c:	07dc      	lsls	r4, r3, #31
 801680e:	d50e      	bpl.n	801682e <_vfiprintf_r+0x6a>
 8016810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016814:	b01d      	add	sp, #116	; 0x74
 8016816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801681a:	4b7b      	ldr	r3, [pc, #492]	; (8016a08 <_vfiprintf_r+0x244>)
 801681c:	429d      	cmp	r5, r3
 801681e:	d101      	bne.n	8016824 <_vfiprintf_r+0x60>
 8016820:	68b5      	ldr	r5, [r6, #8]
 8016822:	e7df      	b.n	80167e4 <_vfiprintf_r+0x20>
 8016824:	4b79      	ldr	r3, [pc, #484]	; (8016a0c <_vfiprintf_r+0x248>)
 8016826:	429d      	cmp	r5, r3
 8016828:	bf08      	it	eq
 801682a:	68f5      	ldreq	r5, [r6, #12]
 801682c:	e7da      	b.n	80167e4 <_vfiprintf_r+0x20>
 801682e:	89ab      	ldrh	r3, [r5, #12]
 8016830:	0598      	lsls	r0, r3, #22
 8016832:	d4ed      	bmi.n	8016810 <_vfiprintf_r+0x4c>
 8016834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016836:	f7ff ff28 	bl	801668a <__retarget_lock_release_recursive>
 801683a:	e7e9      	b.n	8016810 <_vfiprintf_r+0x4c>
 801683c:	2300      	movs	r3, #0
 801683e:	9309      	str	r3, [sp, #36]	; 0x24
 8016840:	2320      	movs	r3, #32
 8016842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016846:	f8cd 800c 	str.w	r8, [sp, #12]
 801684a:	2330      	movs	r3, #48	; 0x30
 801684c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016a10 <_vfiprintf_r+0x24c>
 8016850:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016854:	f04f 0901 	mov.w	r9, #1
 8016858:	4623      	mov	r3, r4
 801685a:	469a      	mov	sl, r3
 801685c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016860:	b10a      	cbz	r2, 8016866 <_vfiprintf_r+0xa2>
 8016862:	2a25      	cmp	r2, #37	; 0x25
 8016864:	d1f9      	bne.n	801685a <_vfiprintf_r+0x96>
 8016866:	ebba 0b04 	subs.w	fp, sl, r4
 801686a:	d00b      	beq.n	8016884 <_vfiprintf_r+0xc0>
 801686c:	465b      	mov	r3, fp
 801686e:	4622      	mov	r2, r4
 8016870:	4629      	mov	r1, r5
 8016872:	4630      	mov	r0, r6
 8016874:	f7ff ff93 	bl	801679e <__sfputs_r>
 8016878:	3001      	adds	r0, #1
 801687a:	f000 80aa 	beq.w	80169d2 <_vfiprintf_r+0x20e>
 801687e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016880:	445a      	add	r2, fp
 8016882:	9209      	str	r2, [sp, #36]	; 0x24
 8016884:	f89a 3000 	ldrb.w	r3, [sl]
 8016888:	2b00      	cmp	r3, #0
 801688a:	f000 80a2 	beq.w	80169d2 <_vfiprintf_r+0x20e>
 801688e:	2300      	movs	r3, #0
 8016890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016898:	f10a 0a01 	add.w	sl, sl, #1
 801689c:	9304      	str	r3, [sp, #16]
 801689e:	9307      	str	r3, [sp, #28]
 80168a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80168a4:	931a      	str	r3, [sp, #104]	; 0x68
 80168a6:	4654      	mov	r4, sl
 80168a8:	2205      	movs	r2, #5
 80168aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168ae:	4858      	ldr	r0, [pc, #352]	; (8016a10 <_vfiprintf_r+0x24c>)
 80168b0:	f7e9 fd16 	bl	80002e0 <memchr>
 80168b4:	9a04      	ldr	r2, [sp, #16]
 80168b6:	b9d8      	cbnz	r0, 80168f0 <_vfiprintf_r+0x12c>
 80168b8:	06d1      	lsls	r1, r2, #27
 80168ba:	bf44      	itt	mi
 80168bc:	2320      	movmi	r3, #32
 80168be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168c2:	0713      	lsls	r3, r2, #28
 80168c4:	bf44      	itt	mi
 80168c6:	232b      	movmi	r3, #43	; 0x2b
 80168c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80168cc:	f89a 3000 	ldrb.w	r3, [sl]
 80168d0:	2b2a      	cmp	r3, #42	; 0x2a
 80168d2:	d015      	beq.n	8016900 <_vfiprintf_r+0x13c>
 80168d4:	9a07      	ldr	r2, [sp, #28]
 80168d6:	4654      	mov	r4, sl
 80168d8:	2000      	movs	r0, #0
 80168da:	f04f 0c0a 	mov.w	ip, #10
 80168de:	4621      	mov	r1, r4
 80168e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168e4:	3b30      	subs	r3, #48	; 0x30
 80168e6:	2b09      	cmp	r3, #9
 80168e8:	d94e      	bls.n	8016988 <_vfiprintf_r+0x1c4>
 80168ea:	b1b0      	cbz	r0, 801691a <_vfiprintf_r+0x156>
 80168ec:	9207      	str	r2, [sp, #28]
 80168ee:	e014      	b.n	801691a <_vfiprintf_r+0x156>
 80168f0:	eba0 0308 	sub.w	r3, r0, r8
 80168f4:	fa09 f303 	lsl.w	r3, r9, r3
 80168f8:	4313      	orrs	r3, r2
 80168fa:	9304      	str	r3, [sp, #16]
 80168fc:	46a2      	mov	sl, r4
 80168fe:	e7d2      	b.n	80168a6 <_vfiprintf_r+0xe2>
 8016900:	9b03      	ldr	r3, [sp, #12]
 8016902:	1d19      	adds	r1, r3, #4
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	9103      	str	r1, [sp, #12]
 8016908:	2b00      	cmp	r3, #0
 801690a:	bfbb      	ittet	lt
 801690c:	425b      	neglt	r3, r3
 801690e:	f042 0202 	orrlt.w	r2, r2, #2
 8016912:	9307      	strge	r3, [sp, #28]
 8016914:	9307      	strlt	r3, [sp, #28]
 8016916:	bfb8      	it	lt
 8016918:	9204      	strlt	r2, [sp, #16]
 801691a:	7823      	ldrb	r3, [r4, #0]
 801691c:	2b2e      	cmp	r3, #46	; 0x2e
 801691e:	d10c      	bne.n	801693a <_vfiprintf_r+0x176>
 8016920:	7863      	ldrb	r3, [r4, #1]
 8016922:	2b2a      	cmp	r3, #42	; 0x2a
 8016924:	d135      	bne.n	8016992 <_vfiprintf_r+0x1ce>
 8016926:	9b03      	ldr	r3, [sp, #12]
 8016928:	1d1a      	adds	r2, r3, #4
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	9203      	str	r2, [sp, #12]
 801692e:	2b00      	cmp	r3, #0
 8016930:	bfb8      	it	lt
 8016932:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016936:	3402      	adds	r4, #2
 8016938:	9305      	str	r3, [sp, #20]
 801693a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016a20 <_vfiprintf_r+0x25c>
 801693e:	7821      	ldrb	r1, [r4, #0]
 8016940:	2203      	movs	r2, #3
 8016942:	4650      	mov	r0, sl
 8016944:	f7e9 fccc 	bl	80002e0 <memchr>
 8016948:	b140      	cbz	r0, 801695c <_vfiprintf_r+0x198>
 801694a:	2340      	movs	r3, #64	; 0x40
 801694c:	eba0 000a 	sub.w	r0, r0, sl
 8016950:	fa03 f000 	lsl.w	r0, r3, r0
 8016954:	9b04      	ldr	r3, [sp, #16]
 8016956:	4303      	orrs	r3, r0
 8016958:	3401      	adds	r4, #1
 801695a:	9304      	str	r3, [sp, #16]
 801695c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016960:	482c      	ldr	r0, [pc, #176]	; (8016a14 <_vfiprintf_r+0x250>)
 8016962:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016966:	2206      	movs	r2, #6
 8016968:	f7e9 fcba 	bl	80002e0 <memchr>
 801696c:	2800      	cmp	r0, #0
 801696e:	d03f      	beq.n	80169f0 <_vfiprintf_r+0x22c>
 8016970:	4b29      	ldr	r3, [pc, #164]	; (8016a18 <_vfiprintf_r+0x254>)
 8016972:	bb1b      	cbnz	r3, 80169bc <_vfiprintf_r+0x1f8>
 8016974:	9b03      	ldr	r3, [sp, #12]
 8016976:	3307      	adds	r3, #7
 8016978:	f023 0307 	bic.w	r3, r3, #7
 801697c:	3308      	adds	r3, #8
 801697e:	9303      	str	r3, [sp, #12]
 8016980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016982:	443b      	add	r3, r7
 8016984:	9309      	str	r3, [sp, #36]	; 0x24
 8016986:	e767      	b.n	8016858 <_vfiprintf_r+0x94>
 8016988:	fb0c 3202 	mla	r2, ip, r2, r3
 801698c:	460c      	mov	r4, r1
 801698e:	2001      	movs	r0, #1
 8016990:	e7a5      	b.n	80168de <_vfiprintf_r+0x11a>
 8016992:	2300      	movs	r3, #0
 8016994:	3401      	adds	r4, #1
 8016996:	9305      	str	r3, [sp, #20]
 8016998:	4619      	mov	r1, r3
 801699a:	f04f 0c0a 	mov.w	ip, #10
 801699e:	4620      	mov	r0, r4
 80169a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80169a4:	3a30      	subs	r2, #48	; 0x30
 80169a6:	2a09      	cmp	r2, #9
 80169a8:	d903      	bls.n	80169b2 <_vfiprintf_r+0x1ee>
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d0c5      	beq.n	801693a <_vfiprintf_r+0x176>
 80169ae:	9105      	str	r1, [sp, #20]
 80169b0:	e7c3      	b.n	801693a <_vfiprintf_r+0x176>
 80169b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80169b6:	4604      	mov	r4, r0
 80169b8:	2301      	movs	r3, #1
 80169ba:	e7f0      	b.n	801699e <_vfiprintf_r+0x1da>
 80169bc:	ab03      	add	r3, sp, #12
 80169be:	9300      	str	r3, [sp, #0]
 80169c0:	462a      	mov	r2, r5
 80169c2:	4b16      	ldr	r3, [pc, #88]	; (8016a1c <_vfiprintf_r+0x258>)
 80169c4:	a904      	add	r1, sp, #16
 80169c6:	4630      	mov	r0, r6
 80169c8:	f3af 8000 	nop.w
 80169cc:	4607      	mov	r7, r0
 80169ce:	1c78      	adds	r0, r7, #1
 80169d0:	d1d6      	bne.n	8016980 <_vfiprintf_r+0x1bc>
 80169d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80169d4:	07d9      	lsls	r1, r3, #31
 80169d6:	d405      	bmi.n	80169e4 <_vfiprintf_r+0x220>
 80169d8:	89ab      	ldrh	r3, [r5, #12]
 80169da:	059a      	lsls	r2, r3, #22
 80169dc:	d402      	bmi.n	80169e4 <_vfiprintf_r+0x220>
 80169de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169e0:	f7ff fe53 	bl	801668a <__retarget_lock_release_recursive>
 80169e4:	89ab      	ldrh	r3, [r5, #12]
 80169e6:	065b      	lsls	r3, r3, #25
 80169e8:	f53f af12 	bmi.w	8016810 <_vfiprintf_r+0x4c>
 80169ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80169ee:	e711      	b.n	8016814 <_vfiprintf_r+0x50>
 80169f0:	ab03      	add	r3, sp, #12
 80169f2:	9300      	str	r3, [sp, #0]
 80169f4:	462a      	mov	r2, r5
 80169f6:	4b09      	ldr	r3, [pc, #36]	; (8016a1c <_vfiprintf_r+0x258>)
 80169f8:	a904      	add	r1, sp, #16
 80169fa:	4630      	mov	r0, r6
 80169fc:	f000 f880 	bl	8016b00 <_printf_i>
 8016a00:	e7e4      	b.n	80169cc <_vfiprintf_r+0x208>
 8016a02:	bf00      	nop
 8016a04:	080172a8 	.word	0x080172a8
 8016a08:	080172c8 	.word	0x080172c8
 8016a0c:	08017288 	.word	0x08017288
 8016a10:	080172e8 	.word	0x080172e8
 8016a14:	080172f2 	.word	0x080172f2
 8016a18:	00000000 	.word	0x00000000
 8016a1c:	0801679f 	.word	0x0801679f
 8016a20:	080172ee 	.word	0x080172ee

08016a24 <_printf_common>:
 8016a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a28:	4616      	mov	r6, r2
 8016a2a:	4699      	mov	r9, r3
 8016a2c:	688a      	ldr	r2, [r1, #8]
 8016a2e:	690b      	ldr	r3, [r1, #16]
 8016a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016a34:	4293      	cmp	r3, r2
 8016a36:	bfb8      	it	lt
 8016a38:	4613      	movlt	r3, r2
 8016a3a:	6033      	str	r3, [r6, #0]
 8016a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016a40:	4607      	mov	r7, r0
 8016a42:	460c      	mov	r4, r1
 8016a44:	b10a      	cbz	r2, 8016a4a <_printf_common+0x26>
 8016a46:	3301      	adds	r3, #1
 8016a48:	6033      	str	r3, [r6, #0]
 8016a4a:	6823      	ldr	r3, [r4, #0]
 8016a4c:	0699      	lsls	r1, r3, #26
 8016a4e:	bf42      	ittt	mi
 8016a50:	6833      	ldrmi	r3, [r6, #0]
 8016a52:	3302      	addmi	r3, #2
 8016a54:	6033      	strmi	r3, [r6, #0]
 8016a56:	6825      	ldr	r5, [r4, #0]
 8016a58:	f015 0506 	ands.w	r5, r5, #6
 8016a5c:	d106      	bne.n	8016a6c <_printf_common+0x48>
 8016a5e:	f104 0a19 	add.w	sl, r4, #25
 8016a62:	68e3      	ldr	r3, [r4, #12]
 8016a64:	6832      	ldr	r2, [r6, #0]
 8016a66:	1a9b      	subs	r3, r3, r2
 8016a68:	42ab      	cmp	r3, r5
 8016a6a:	dc26      	bgt.n	8016aba <_printf_common+0x96>
 8016a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016a70:	1e13      	subs	r3, r2, #0
 8016a72:	6822      	ldr	r2, [r4, #0]
 8016a74:	bf18      	it	ne
 8016a76:	2301      	movne	r3, #1
 8016a78:	0692      	lsls	r2, r2, #26
 8016a7a:	d42b      	bmi.n	8016ad4 <_printf_common+0xb0>
 8016a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016a80:	4649      	mov	r1, r9
 8016a82:	4638      	mov	r0, r7
 8016a84:	47c0      	blx	r8
 8016a86:	3001      	adds	r0, #1
 8016a88:	d01e      	beq.n	8016ac8 <_printf_common+0xa4>
 8016a8a:	6823      	ldr	r3, [r4, #0]
 8016a8c:	68e5      	ldr	r5, [r4, #12]
 8016a8e:	6832      	ldr	r2, [r6, #0]
 8016a90:	f003 0306 	and.w	r3, r3, #6
 8016a94:	2b04      	cmp	r3, #4
 8016a96:	bf08      	it	eq
 8016a98:	1aad      	subeq	r5, r5, r2
 8016a9a:	68a3      	ldr	r3, [r4, #8]
 8016a9c:	6922      	ldr	r2, [r4, #16]
 8016a9e:	bf0c      	ite	eq
 8016aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016aa4:	2500      	movne	r5, #0
 8016aa6:	4293      	cmp	r3, r2
 8016aa8:	bfc4      	itt	gt
 8016aaa:	1a9b      	subgt	r3, r3, r2
 8016aac:	18ed      	addgt	r5, r5, r3
 8016aae:	2600      	movs	r6, #0
 8016ab0:	341a      	adds	r4, #26
 8016ab2:	42b5      	cmp	r5, r6
 8016ab4:	d11a      	bne.n	8016aec <_printf_common+0xc8>
 8016ab6:	2000      	movs	r0, #0
 8016ab8:	e008      	b.n	8016acc <_printf_common+0xa8>
 8016aba:	2301      	movs	r3, #1
 8016abc:	4652      	mov	r2, sl
 8016abe:	4649      	mov	r1, r9
 8016ac0:	4638      	mov	r0, r7
 8016ac2:	47c0      	blx	r8
 8016ac4:	3001      	adds	r0, #1
 8016ac6:	d103      	bne.n	8016ad0 <_printf_common+0xac>
 8016ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ad0:	3501      	adds	r5, #1
 8016ad2:	e7c6      	b.n	8016a62 <_printf_common+0x3e>
 8016ad4:	18e1      	adds	r1, r4, r3
 8016ad6:	1c5a      	adds	r2, r3, #1
 8016ad8:	2030      	movs	r0, #48	; 0x30
 8016ada:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016ade:	4422      	add	r2, r4
 8016ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016ae4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016ae8:	3302      	adds	r3, #2
 8016aea:	e7c7      	b.n	8016a7c <_printf_common+0x58>
 8016aec:	2301      	movs	r3, #1
 8016aee:	4622      	mov	r2, r4
 8016af0:	4649      	mov	r1, r9
 8016af2:	4638      	mov	r0, r7
 8016af4:	47c0      	blx	r8
 8016af6:	3001      	adds	r0, #1
 8016af8:	d0e6      	beq.n	8016ac8 <_printf_common+0xa4>
 8016afa:	3601      	adds	r6, #1
 8016afc:	e7d9      	b.n	8016ab2 <_printf_common+0x8e>
	...

08016b00 <_printf_i>:
 8016b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016b04:	7e0f      	ldrb	r7, [r1, #24]
 8016b06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016b08:	2f78      	cmp	r7, #120	; 0x78
 8016b0a:	4691      	mov	r9, r2
 8016b0c:	4680      	mov	r8, r0
 8016b0e:	460c      	mov	r4, r1
 8016b10:	469a      	mov	sl, r3
 8016b12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016b16:	d807      	bhi.n	8016b28 <_printf_i+0x28>
 8016b18:	2f62      	cmp	r7, #98	; 0x62
 8016b1a:	d80a      	bhi.n	8016b32 <_printf_i+0x32>
 8016b1c:	2f00      	cmp	r7, #0
 8016b1e:	f000 80d8 	beq.w	8016cd2 <_printf_i+0x1d2>
 8016b22:	2f58      	cmp	r7, #88	; 0x58
 8016b24:	f000 80a3 	beq.w	8016c6e <_printf_i+0x16e>
 8016b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016b2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016b30:	e03a      	b.n	8016ba8 <_printf_i+0xa8>
 8016b32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016b36:	2b15      	cmp	r3, #21
 8016b38:	d8f6      	bhi.n	8016b28 <_printf_i+0x28>
 8016b3a:	a101      	add	r1, pc, #4	; (adr r1, 8016b40 <_printf_i+0x40>)
 8016b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016b40:	08016b99 	.word	0x08016b99
 8016b44:	08016bad 	.word	0x08016bad
 8016b48:	08016b29 	.word	0x08016b29
 8016b4c:	08016b29 	.word	0x08016b29
 8016b50:	08016b29 	.word	0x08016b29
 8016b54:	08016b29 	.word	0x08016b29
 8016b58:	08016bad 	.word	0x08016bad
 8016b5c:	08016b29 	.word	0x08016b29
 8016b60:	08016b29 	.word	0x08016b29
 8016b64:	08016b29 	.word	0x08016b29
 8016b68:	08016b29 	.word	0x08016b29
 8016b6c:	08016cb9 	.word	0x08016cb9
 8016b70:	08016bdd 	.word	0x08016bdd
 8016b74:	08016c9b 	.word	0x08016c9b
 8016b78:	08016b29 	.word	0x08016b29
 8016b7c:	08016b29 	.word	0x08016b29
 8016b80:	08016cdb 	.word	0x08016cdb
 8016b84:	08016b29 	.word	0x08016b29
 8016b88:	08016bdd 	.word	0x08016bdd
 8016b8c:	08016b29 	.word	0x08016b29
 8016b90:	08016b29 	.word	0x08016b29
 8016b94:	08016ca3 	.word	0x08016ca3
 8016b98:	682b      	ldr	r3, [r5, #0]
 8016b9a:	1d1a      	adds	r2, r3, #4
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	602a      	str	r2, [r5, #0]
 8016ba0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ba4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016ba8:	2301      	movs	r3, #1
 8016baa:	e0a3      	b.n	8016cf4 <_printf_i+0x1f4>
 8016bac:	6820      	ldr	r0, [r4, #0]
 8016bae:	6829      	ldr	r1, [r5, #0]
 8016bb0:	0606      	lsls	r6, r0, #24
 8016bb2:	f101 0304 	add.w	r3, r1, #4
 8016bb6:	d50a      	bpl.n	8016bce <_printf_i+0xce>
 8016bb8:	680e      	ldr	r6, [r1, #0]
 8016bba:	602b      	str	r3, [r5, #0]
 8016bbc:	2e00      	cmp	r6, #0
 8016bbe:	da03      	bge.n	8016bc8 <_printf_i+0xc8>
 8016bc0:	232d      	movs	r3, #45	; 0x2d
 8016bc2:	4276      	negs	r6, r6
 8016bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016bc8:	485e      	ldr	r0, [pc, #376]	; (8016d44 <_printf_i+0x244>)
 8016bca:	230a      	movs	r3, #10
 8016bcc:	e019      	b.n	8016c02 <_printf_i+0x102>
 8016bce:	680e      	ldr	r6, [r1, #0]
 8016bd0:	602b      	str	r3, [r5, #0]
 8016bd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016bd6:	bf18      	it	ne
 8016bd8:	b236      	sxthne	r6, r6
 8016bda:	e7ef      	b.n	8016bbc <_printf_i+0xbc>
 8016bdc:	682b      	ldr	r3, [r5, #0]
 8016bde:	6820      	ldr	r0, [r4, #0]
 8016be0:	1d19      	adds	r1, r3, #4
 8016be2:	6029      	str	r1, [r5, #0]
 8016be4:	0601      	lsls	r1, r0, #24
 8016be6:	d501      	bpl.n	8016bec <_printf_i+0xec>
 8016be8:	681e      	ldr	r6, [r3, #0]
 8016bea:	e002      	b.n	8016bf2 <_printf_i+0xf2>
 8016bec:	0646      	lsls	r6, r0, #25
 8016bee:	d5fb      	bpl.n	8016be8 <_printf_i+0xe8>
 8016bf0:	881e      	ldrh	r6, [r3, #0]
 8016bf2:	4854      	ldr	r0, [pc, #336]	; (8016d44 <_printf_i+0x244>)
 8016bf4:	2f6f      	cmp	r7, #111	; 0x6f
 8016bf6:	bf0c      	ite	eq
 8016bf8:	2308      	moveq	r3, #8
 8016bfa:	230a      	movne	r3, #10
 8016bfc:	2100      	movs	r1, #0
 8016bfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016c02:	6865      	ldr	r5, [r4, #4]
 8016c04:	60a5      	str	r5, [r4, #8]
 8016c06:	2d00      	cmp	r5, #0
 8016c08:	bfa2      	ittt	ge
 8016c0a:	6821      	ldrge	r1, [r4, #0]
 8016c0c:	f021 0104 	bicge.w	r1, r1, #4
 8016c10:	6021      	strge	r1, [r4, #0]
 8016c12:	b90e      	cbnz	r6, 8016c18 <_printf_i+0x118>
 8016c14:	2d00      	cmp	r5, #0
 8016c16:	d04d      	beq.n	8016cb4 <_printf_i+0x1b4>
 8016c18:	4615      	mov	r5, r2
 8016c1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8016c1e:	fb03 6711 	mls	r7, r3, r1, r6
 8016c22:	5dc7      	ldrb	r7, [r0, r7]
 8016c24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016c28:	4637      	mov	r7, r6
 8016c2a:	42bb      	cmp	r3, r7
 8016c2c:	460e      	mov	r6, r1
 8016c2e:	d9f4      	bls.n	8016c1a <_printf_i+0x11a>
 8016c30:	2b08      	cmp	r3, #8
 8016c32:	d10b      	bne.n	8016c4c <_printf_i+0x14c>
 8016c34:	6823      	ldr	r3, [r4, #0]
 8016c36:	07de      	lsls	r6, r3, #31
 8016c38:	d508      	bpl.n	8016c4c <_printf_i+0x14c>
 8016c3a:	6923      	ldr	r3, [r4, #16]
 8016c3c:	6861      	ldr	r1, [r4, #4]
 8016c3e:	4299      	cmp	r1, r3
 8016c40:	bfde      	ittt	le
 8016c42:	2330      	movle	r3, #48	; 0x30
 8016c44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016c48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8016c4c:	1b52      	subs	r2, r2, r5
 8016c4e:	6122      	str	r2, [r4, #16]
 8016c50:	f8cd a000 	str.w	sl, [sp]
 8016c54:	464b      	mov	r3, r9
 8016c56:	aa03      	add	r2, sp, #12
 8016c58:	4621      	mov	r1, r4
 8016c5a:	4640      	mov	r0, r8
 8016c5c:	f7ff fee2 	bl	8016a24 <_printf_common>
 8016c60:	3001      	adds	r0, #1
 8016c62:	d14c      	bne.n	8016cfe <_printf_i+0x1fe>
 8016c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c68:	b004      	add	sp, #16
 8016c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c6e:	4835      	ldr	r0, [pc, #212]	; (8016d44 <_printf_i+0x244>)
 8016c70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016c74:	6829      	ldr	r1, [r5, #0]
 8016c76:	6823      	ldr	r3, [r4, #0]
 8016c78:	f851 6b04 	ldr.w	r6, [r1], #4
 8016c7c:	6029      	str	r1, [r5, #0]
 8016c7e:	061d      	lsls	r5, r3, #24
 8016c80:	d514      	bpl.n	8016cac <_printf_i+0x1ac>
 8016c82:	07df      	lsls	r7, r3, #31
 8016c84:	bf44      	itt	mi
 8016c86:	f043 0320 	orrmi.w	r3, r3, #32
 8016c8a:	6023      	strmi	r3, [r4, #0]
 8016c8c:	b91e      	cbnz	r6, 8016c96 <_printf_i+0x196>
 8016c8e:	6823      	ldr	r3, [r4, #0]
 8016c90:	f023 0320 	bic.w	r3, r3, #32
 8016c94:	6023      	str	r3, [r4, #0]
 8016c96:	2310      	movs	r3, #16
 8016c98:	e7b0      	b.n	8016bfc <_printf_i+0xfc>
 8016c9a:	6823      	ldr	r3, [r4, #0]
 8016c9c:	f043 0320 	orr.w	r3, r3, #32
 8016ca0:	6023      	str	r3, [r4, #0]
 8016ca2:	2378      	movs	r3, #120	; 0x78
 8016ca4:	4828      	ldr	r0, [pc, #160]	; (8016d48 <_printf_i+0x248>)
 8016ca6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016caa:	e7e3      	b.n	8016c74 <_printf_i+0x174>
 8016cac:	0659      	lsls	r1, r3, #25
 8016cae:	bf48      	it	mi
 8016cb0:	b2b6      	uxthmi	r6, r6
 8016cb2:	e7e6      	b.n	8016c82 <_printf_i+0x182>
 8016cb4:	4615      	mov	r5, r2
 8016cb6:	e7bb      	b.n	8016c30 <_printf_i+0x130>
 8016cb8:	682b      	ldr	r3, [r5, #0]
 8016cba:	6826      	ldr	r6, [r4, #0]
 8016cbc:	6961      	ldr	r1, [r4, #20]
 8016cbe:	1d18      	adds	r0, r3, #4
 8016cc0:	6028      	str	r0, [r5, #0]
 8016cc2:	0635      	lsls	r5, r6, #24
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	d501      	bpl.n	8016ccc <_printf_i+0x1cc>
 8016cc8:	6019      	str	r1, [r3, #0]
 8016cca:	e002      	b.n	8016cd2 <_printf_i+0x1d2>
 8016ccc:	0670      	lsls	r0, r6, #25
 8016cce:	d5fb      	bpl.n	8016cc8 <_printf_i+0x1c8>
 8016cd0:	8019      	strh	r1, [r3, #0]
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	6123      	str	r3, [r4, #16]
 8016cd6:	4615      	mov	r5, r2
 8016cd8:	e7ba      	b.n	8016c50 <_printf_i+0x150>
 8016cda:	682b      	ldr	r3, [r5, #0]
 8016cdc:	1d1a      	adds	r2, r3, #4
 8016cde:	602a      	str	r2, [r5, #0]
 8016ce0:	681d      	ldr	r5, [r3, #0]
 8016ce2:	6862      	ldr	r2, [r4, #4]
 8016ce4:	2100      	movs	r1, #0
 8016ce6:	4628      	mov	r0, r5
 8016ce8:	f7e9 fafa 	bl	80002e0 <memchr>
 8016cec:	b108      	cbz	r0, 8016cf2 <_printf_i+0x1f2>
 8016cee:	1b40      	subs	r0, r0, r5
 8016cf0:	6060      	str	r0, [r4, #4]
 8016cf2:	6863      	ldr	r3, [r4, #4]
 8016cf4:	6123      	str	r3, [r4, #16]
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016cfc:	e7a8      	b.n	8016c50 <_printf_i+0x150>
 8016cfe:	6923      	ldr	r3, [r4, #16]
 8016d00:	462a      	mov	r2, r5
 8016d02:	4649      	mov	r1, r9
 8016d04:	4640      	mov	r0, r8
 8016d06:	47d0      	blx	sl
 8016d08:	3001      	adds	r0, #1
 8016d0a:	d0ab      	beq.n	8016c64 <_printf_i+0x164>
 8016d0c:	6823      	ldr	r3, [r4, #0]
 8016d0e:	079b      	lsls	r3, r3, #30
 8016d10:	d413      	bmi.n	8016d3a <_printf_i+0x23a>
 8016d12:	68e0      	ldr	r0, [r4, #12]
 8016d14:	9b03      	ldr	r3, [sp, #12]
 8016d16:	4298      	cmp	r0, r3
 8016d18:	bfb8      	it	lt
 8016d1a:	4618      	movlt	r0, r3
 8016d1c:	e7a4      	b.n	8016c68 <_printf_i+0x168>
 8016d1e:	2301      	movs	r3, #1
 8016d20:	4632      	mov	r2, r6
 8016d22:	4649      	mov	r1, r9
 8016d24:	4640      	mov	r0, r8
 8016d26:	47d0      	blx	sl
 8016d28:	3001      	adds	r0, #1
 8016d2a:	d09b      	beq.n	8016c64 <_printf_i+0x164>
 8016d2c:	3501      	adds	r5, #1
 8016d2e:	68e3      	ldr	r3, [r4, #12]
 8016d30:	9903      	ldr	r1, [sp, #12]
 8016d32:	1a5b      	subs	r3, r3, r1
 8016d34:	42ab      	cmp	r3, r5
 8016d36:	dcf2      	bgt.n	8016d1e <_printf_i+0x21e>
 8016d38:	e7eb      	b.n	8016d12 <_printf_i+0x212>
 8016d3a:	2500      	movs	r5, #0
 8016d3c:	f104 0619 	add.w	r6, r4, #25
 8016d40:	e7f5      	b.n	8016d2e <_printf_i+0x22e>
 8016d42:	bf00      	nop
 8016d44:	080172f9 	.word	0x080172f9
 8016d48:	0801730a 	.word	0x0801730a

08016d4c <__sread>:
 8016d4c:	b510      	push	{r4, lr}
 8016d4e:	460c      	mov	r4, r1
 8016d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d54:	f000 f894 	bl	8016e80 <_read_r>
 8016d58:	2800      	cmp	r0, #0
 8016d5a:	bfab      	itete	ge
 8016d5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016d5e:	89a3      	ldrhlt	r3, [r4, #12]
 8016d60:	181b      	addge	r3, r3, r0
 8016d62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016d66:	bfac      	ite	ge
 8016d68:	6563      	strge	r3, [r4, #84]	; 0x54
 8016d6a:	81a3      	strhlt	r3, [r4, #12]
 8016d6c:	bd10      	pop	{r4, pc}

08016d6e <__swrite>:
 8016d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d72:	461f      	mov	r7, r3
 8016d74:	898b      	ldrh	r3, [r1, #12]
 8016d76:	05db      	lsls	r3, r3, #23
 8016d78:	4605      	mov	r5, r0
 8016d7a:	460c      	mov	r4, r1
 8016d7c:	4616      	mov	r6, r2
 8016d7e:	d505      	bpl.n	8016d8c <__swrite+0x1e>
 8016d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d84:	2302      	movs	r3, #2
 8016d86:	2200      	movs	r2, #0
 8016d88:	f000 f868 	bl	8016e5c <_lseek_r>
 8016d8c:	89a3      	ldrh	r3, [r4, #12]
 8016d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016d96:	81a3      	strh	r3, [r4, #12]
 8016d98:	4632      	mov	r2, r6
 8016d9a:	463b      	mov	r3, r7
 8016d9c:	4628      	mov	r0, r5
 8016d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016da2:	f000 b817 	b.w	8016dd4 <_write_r>

08016da6 <__sseek>:
 8016da6:	b510      	push	{r4, lr}
 8016da8:	460c      	mov	r4, r1
 8016daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016dae:	f000 f855 	bl	8016e5c <_lseek_r>
 8016db2:	1c43      	adds	r3, r0, #1
 8016db4:	89a3      	ldrh	r3, [r4, #12]
 8016db6:	bf15      	itete	ne
 8016db8:	6560      	strne	r0, [r4, #84]	; 0x54
 8016dba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016dbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016dc2:	81a3      	strheq	r3, [r4, #12]
 8016dc4:	bf18      	it	ne
 8016dc6:	81a3      	strhne	r3, [r4, #12]
 8016dc8:	bd10      	pop	{r4, pc}

08016dca <__sclose>:
 8016dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016dce:	f000 b813 	b.w	8016df8 <_close_r>
	...

08016dd4 <_write_r>:
 8016dd4:	b538      	push	{r3, r4, r5, lr}
 8016dd6:	4d07      	ldr	r5, [pc, #28]	; (8016df4 <_write_r+0x20>)
 8016dd8:	4604      	mov	r4, r0
 8016dda:	4608      	mov	r0, r1
 8016ddc:	4611      	mov	r1, r2
 8016dde:	2200      	movs	r2, #0
 8016de0:	602a      	str	r2, [r5, #0]
 8016de2:	461a      	mov	r2, r3
 8016de4:	f7ec fbd9 	bl	800359a <_write>
 8016de8:	1c43      	adds	r3, r0, #1
 8016dea:	d102      	bne.n	8016df2 <_write_r+0x1e>
 8016dec:	682b      	ldr	r3, [r5, #0]
 8016dee:	b103      	cbz	r3, 8016df2 <_write_r+0x1e>
 8016df0:	6023      	str	r3, [r4, #0]
 8016df2:	bd38      	pop	{r3, r4, r5, pc}
 8016df4:	24005598 	.word	0x24005598

08016df8 <_close_r>:
 8016df8:	b538      	push	{r3, r4, r5, lr}
 8016dfa:	4d06      	ldr	r5, [pc, #24]	; (8016e14 <_close_r+0x1c>)
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	4604      	mov	r4, r0
 8016e00:	4608      	mov	r0, r1
 8016e02:	602b      	str	r3, [r5, #0]
 8016e04:	f7ec fbe5 	bl	80035d2 <_close>
 8016e08:	1c43      	adds	r3, r0, #1
 8016e0a:	d102      	bne.n	8016e12 <_close_r+0x1a>
 8016e0c:	682b      	ldr	r3, [r5, #0]
 8016e0e:	b103      	cbz	r3, 8016e12 <_close_r+0x1a>
 8016e10:	6023      	str	r3, [r4, #0]
 8016e12:	bd38      	pop	{r3, r4, r5, pc}
 8016e14:	24005598 	.word	0x24005598

08016e18 <_fstat_r>:
 8016e18:	b538      	push	{r3, r4, r5, lr}
 8016e1a:	4d07      	ldr	r5, [pc, #28]	; (8016e38 <_fstat_r+0x20>)
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	4604      	mov	r4, r0
 8016e20:	4608      	mov	r0, r1
 8016e22:	4611      	mov	r1, r2
 8016e24:	602b      	str	r3, [r5, #0]
 8016e26:	f7ec fbe0 	bl	80035ea <_fstat>
 8016e2a:	1c43      	adds	r3, r0, #1
 8016e2c:	d102      	bne.n	8016e34 <_fstat_r+0x1c>
 8016e2e:	682b      	ldr	r3, [r5, #0]
 8016e30:	b103      	cbz	r3, 8016e34 <_fstat_r+0x1c>
 8016e32:	6023      	str	r3, [r4, #0]
 8016e34:	bd38      	pop	{r3, r4, r5, pc}
 8016e36:	bf00      	nop
 8016e38:	24005598 	.word	0x24005598

08016e3c <_isatty_r>:
 8016e3c:	b538      	push	{r3, r4, r5, lr}
 8016e3e:	4d06      	ldr	r5, [pc, #24]	; (8016e58 <_isatty_r+0x1c>)
 8016e40:	2300      	movs	r3, #0
 8016e42:	4604      	mov	r4, r0
 8016e44:	4608      	mov	r0, r1
 8016e46:	602b      	str	r3, [r5, #0]
 8016e48:	f7ec fbdf 	bl	800360a <_isatty>
 8016e4c:	1c43      	adds	r3, r0, #1
 8016e4e:	d102      	bne.n	8016e56 <_isatty_r+0x1a>
 8016e50:	682b      	ldr	r3, [r5, #0]
 8016e52:	b103      	cbz	r3, 8016e56 <_isatty_r+0x1a>
 8016e54:	6023      	str	r3, [r4, #0]
 8016e56:	bd38      	pop	{r3, r4, r5, pc}
 8016e58:	24005598 	.word	0x24005598

08016e5c <_lseek_r>:
 8016e5c:	b538      	push	{r3, r4, r5, lr}
 8016e5e:	4d07      	ldr	r5, [pc, #28]	; (8016e7c <_lseek_r+0x20>)
 8016e60:	4604      	mov	r4, r0
 8016e62:	4608      	mov	r0, r1
 8016e64:	4611      	mov	r1, r2
 8016e66:	2200      	movs	r2, #0
 8016e68:	602a      	str	r2, [r5, #0]
 8016e6a:	461a      	mov	r2, r3
 8016e6c:	f7ec fbd8 	bl	8003620 <_lseek>
 8016e70:	1c43      	adds	r3, r0, #1
 8016e72:	d102      	bne.n	8016e7a <_lseek_r+0x1e>
 8016e74:	682b      	ldr	r3, [r5, #0]
 8016e76:	b103      	cbz	r3, 8016e7a <_lseek_r+0x1e>
 8016e78:	6023      	str	r3, [r4, #0]
 8016e7a:	bd38      	pop	{r3, r4, r5, pc}
 8016e7c:	24005598 	.word	0x24005598

08016e80 <_read_r>:
 8016e80:	b538      	push	{r3, r4, r5, lr}
 8016e82:	4d07      	ldr	r5, [pc, #28]	; (8016ea0 <_read_r+0x20>)
 8016e84:	4604      	mov	r4, r0
 8016e86:	4608      	mov	r0, r1
 8016e88:	4611      	mov	r1, r2
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	602a      	str	r2, [r5, #0]
 8016e8e:	461a      	mov	r2, r3
 8016e90:	f7ec fb66 	bl	8003560 <_read>
 8016e94:	1c43      	adds	r3, r0, #1
 8016e96:	d102      	bne.n	8016e9e <_read_r+0x1e>
 8016e98:	682b      	ldr	r3, [r5, #0]
 8016e9a:	b103      	cbz	r3, 8016e9e <_read_r+0x1e>
 8016e9c:	6023      	str	r3, [r4, #0]
 8016e9e:	bd38      	pop	{r3, r4, r5, pc}
 8016ea0:	24005598 	.word	0x24005598

08016ea4 <_init>:
 8016ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ea6:	bf00      	nop
 8016ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016eaa:	bc08      	pop	{r3}
 8016eac:	469e      	mov	lr, r3
 8016eae:	4770      	bx	lr

08016eb0 <_fini>:
 8016eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eb2:	bf00      	nop
 8016eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016eb6:	bc08      	pop	{r3}
 8016eb8:	469e      	mov	lr, r3
 8016eba:	4770      	bx	lr
