
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016e60  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08017100  08017100  00027100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080175cc  080175cc  000275cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080175d4  080175d4  000275d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080175d8  080175d8  000275d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000104  24000000  080175dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000054f0  24000120  080176e0  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  24005610  080176e0  00035610  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030104  2**0
                  CONTENTS, READONLY
 10 .debug_info   00039909  00000000  00000000  00030132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006ebf  00000000  00000000  00069a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002818  00000000  00000000  00070900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002540  00000000  00000000  00073118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044644  00000000  00000000  00075658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003bb79  00000000  00000000  000b9c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194adf  00000000  00000000  000f5815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028a2f4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000af6c  00000000  00000000  0028a344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080170e8 	.word	0x080170e8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	080170e8 	.word	0x080170e8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f003 ff37 	bl	80044dc <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fd20 	bl	80020b8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 f852 	bl	800572c <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fd13 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f004 f995 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fcfa 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f004 f987 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fcec 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f004 f979 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fcde 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f004 f96b 	bl	80049e4 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fcd0 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 f95c 	bl	80049e4 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fcc1 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 f94d 	bl	80049e4 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fcb2 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 f93e 	bl	80049e4 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fca3 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 f92f 	bl	80049e4 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fc94 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 f920 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fc85 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 f911 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fc76 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 f902 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fc67 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400013c 	.word	0x2400013c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 fe1f 	bl	80044dc <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fc08 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 f88a 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fbef 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 f87c 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fbe1 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 f86e 	bl	80049e4 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fbd3 	bl	80020b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 f860 	bl	80049e4 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fbc5 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001a0 	.word	0x240001a0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f008 faa2 	bl	8008f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f008 fa96 	bl	8008f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f008 fa8a 	bl	8008f44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f005 fc1d 	bl	80062b4 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fb1a 	bl	80020b8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f003 fad8 	bl	8004094 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f003 fad2 	bl	8004094 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f005 fbbd 	bl	80062b4 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 faba 	bl	80020b8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000204 	.word	0x24000204
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400027c 	.word	0x2400027c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f015 fda5 	bl	80166dc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f004 ff85 	bl	8005aa8 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fa88 	bl	80020b8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f005 f9a0 	bl	8005f08 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 fa73 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002f4 	.word	0x240002f4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f008 f975 	bl	8008f44 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f005 fb08 	bl	80062b4 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 fa05 	bl	80020b8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f004 feca 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f004 fee1 	bl	8005a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000308 	.word	0x24000308
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f004 fea1 	bl	8005a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f004 feb8 	bl	8005a8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f004 fe99 	bl	8005a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f004 feb0 	bl	8005a8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f004 fe91 	bl	8005a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f004 fea8 	bl	8005a8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f004 fe89 	bl	8005a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f004 fea0 	bl	8005a8c <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	24000834 	.word	0x24000834

08000d74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d78:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <MX_FREERTOS_Init+0xa8>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4828      	ldr	r0, [pc, #160]	; (8000e20 <MX_FREERTOS_Init+0xac>)
 8000d7e:	f012 f93f 	bl	8013000 <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a27      	ldr	r2, [pc, #156]	; (8000e24 <MX_FREERTOS_Init+0xb0>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <MX_FREERTOS_Init+0xb4>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4827      	ldr	r0, [pc, #156]	; (8000e2c <MX_FREERTOS_Init+0xb8>)
 8000d8e:	f012 f937 	bl	8013000 <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <MX_FREERTOS_Init+0xbc>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000d98:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <MX_FREERTOS_Init+0xc0>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4826      	ldr	r0, [pc, #152]	; (8000e38 <MX_FREERTOS_Init+0xc4>)
 8000d9e:	f012 f92f 	bl	8013000 <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <MX_FREERTOS_Init+0xc8>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000da8:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <MX_FREERTOS_Init+0xcc>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4825      	ldr	r0, [pc, #148]	; (8000e44 <MX_FREERTOS_Init+0xd0>)
 8000dae:	f012 f927 	bl	8013000 <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <MX_FREERTOS_Init+0xd4>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000db8:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <MX_FREERTOS_Init+0xd8>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4824      	ldr	r0, [pc, #144]	; (8000e50 <MX_FREERTOS_Init+0xdc>)
 8000dbe:	f012 f91f 	bl	8013000 <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MX_FREERTOS_Init+0xe0>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000dc8:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_FREERTOS_Init+0xe4>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4823      	ldr	r0, [pc, #140]	; (8000e5c <MX_FREERTOS_Init+0xe8>)
 8000dce:	f012 f917 	bl	8013000 <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <MX_FREERTOS_Init+0xec>)
 8000dd6:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000dd8:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <MX_FREERTOS_Init+0xf0>)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4822      	ldr	r0, [pc, #136]	; (8000e68 <MX_FREERTOS_Init+0xf4>)
 8000dde:	f012 f90f 	bl	8013000 <osThreadNew>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_FREERTOS_Init+0xf8>)
 8000de6:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <MX_FREERTOS_Init+0xfc>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4821      	ldr	r0, [pc, #132]	; (8000e74 <MX_FREERTOS_Init+0x100>)
 8000dee:	f012 f907 	bl	8013000 <osThreadNew>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <MX_FREERTOS_Init+0x104>)
 8000df6:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <MX_FREERTOS_Init+0x108>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4820      	ldr	r0, [pc, #128]	; (8000e80 <MX_FREERTOS_Init+0x10c>)
 8000dfe:	f012 f8ff 	bl	8013000 <osThreadNew>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <MX_FREERTOS_Init+0x110>)
 8000e06:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <MX_FREERTOS_Init+0x114>)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	481f      	ldr	r0, [pc, #124]	; (8000e8c <MX_FREERTOS_Init+0x118>)
 8000e0e:	f012 f8f7 	bl	8013000 <osThreadNew>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <MX_FREERTOS_Init+0x11c>)
 8000e16:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	08017378 	.word	0x08017378
 8000e20:	08000e95 	.word	0x08000e95
 8000e24:	24000380 	.word	0x24000380
 8000e28:	0801739c 	.word	0x0801739c
 8000e2c:	08000ebd 	.word	0x08000ebd
 8000e30:	24000384 	.word	0x24000384
 8000e34:	080173c0 	.word	0x080173c0
 8000e38:	08000ee5 	.word	0x08000ee5
 8000e3c:	24000388 	.word	0x24000388
 8000e40:	080173e4 	.word	0x080173e4
 8000e44:	08000f0d 	.word	0x08000f0d
 8000e48:	2400038c 	.word	0x2400038c
 8000e4c:	08017408 	.word	0x08017408
 8000e50:	08000f85 	.word	0x08000f85
 8000e54:	24000390 	.word	0x24000390
 8000e58:	0801742c 	.word	0x0801742c
 8000e5c:	08000ffd 	.word	0x08000ffd
 8000e60:	24000394 	.word	0x24000394
 8000e64:	08017450 	.word	0x08017450
 8000e68:	080010b5 	.word	0x080010b5
 8000e6c:	24000398 	.word	0x24000398
 8000e70:	08017474 	.word	0x08017474
 8000e74:	08001161 	.word	0x08001161
 8000e78:	2400039c 	.word	0x2400039c
 8000e7c:	08017498 	.word	0x08017498
 8000e80:	08001171 	.word	0x08001171
 8000e84:	240003a0 	.word	0x240003a0
 8000e88:	080174bc 	.word	0x080174bc
 8000e8c:	08001181 	.word	0x08001181
 8000e90:	240003a4 	.word	0x240003a4

08000e94 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <PMT_init+0x24>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f012 f9fa 	bl	80132a0 <osEventFlagsWait>

		create_pmt_packet();
 8000eac:	f001 f92a 	bl	8002104 <create_pmt_packet>

		osThreadYield();
 8000eb0:	f012 f938 	bl	8013124 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eb4:	e7f2      	b.n	8000e9c <PMT_init+0x8>
 8000eb6:	bf00      	nop
 8000eb8:	240007e4 	.word	0x240007e4

08000ebc <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <ERPA_init+0x24>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2102      	movs	r1, #2
 8000ed0:	f012 f9e6 	bl	80132a0 <osEventFlagsWait>

		create_erpa_packet();
 8000ed4:	f001 f990 	bl	80021f8 <create_erpa_packet>

		osThreadYield();
 8000ed8:	f012 f924 	bl	8013124 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000edc:	e7f2      	b.n	8000ec4 <ERPA_init+0x8>
 8000ede:	bf00      	nop
 8000ee0:	240007e4 	.word	0x240007e4

08000ee4 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HK_init+0x24>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	f012 f9d2 	bl	80132a0 <osEventFlagsWait>

		create_hk_packet();
 8000efc:	f001 fa1e 	bl	800233c <create_hk_packet>

		osThreadYield();
 8000f00:	f012 f910 	bl	8013124 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f04:	e7f2      	b.n	8000eec <HK_init+0x8>
 8000f06:	bf00      	nop
 8000f08:	240007e4 	.word	0x240007e4

08000f0c <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <AUTOINIT_init+0x70>)
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2104      	movs	r1, #4
 8000f20:	f012 f9be 	bl	80132a0 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	e012      	b.n	8000f50 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <AUTOINIT_init+0x74>)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <AUTOINIT_init+0x74>)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	889b      	ldrh	r3, [r3, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f008 f9c8 	bl	80092d4 <HAL_GPIO_WritePin>
			osDelay(100);
 8000f44:	2064      	movs	r0, #100	; 0x64
 8000f46:	f012 f90d 	bl	8013164 <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	dde9      	ble.n	8000f2a <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f56:	2308      	movs	r3, #8
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	e008      	b.n	8000f6e <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2101      	movs	r1, #1
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 ff34 	bl	8003dd0 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2b0d      	cmp	r3, #13
 8000f72:	ddf3      	ble.n	8000f5c <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f74:	f012 f8d6 	bl	8013124 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f78:	e7cc      	b.n	8000f14 <AUTOINIT_init+0x8>
 8000f7a:	bf00      	nop
 8000f7c:	240007e8 	.word	0x240007e8
 8000f80:	080174e0 	.word	0x080174e0

08000f84 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <AUTODEINIT_init+0x70>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f94:	2200      	movs	r2, #0
 8000f96:	2108      	movs	r1, #8
 8000f98:	f012 f982 	bl	80132a0 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f9c:	230d      	movs	r3, #13
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e008      	b.n	8000fb4 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 ff11 	bl	8003dd0 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	dcf3      	bgt.n	8000fa2 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000fba:	2306      	movs	r3, #6
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	e012      	b.n	8000fe6 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <AUTODEINIT_init+0x74>)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <AUTODEINIT_init+0x74>)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f008 f97d 	bl	80092d4 <HAL_GPIO_WritePin>
			osDelay(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f012 f8c2 	bl	8013164 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	dae9      	bge.n	8000fc0 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8000fec:	f012 f89a 	bl	8013124 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000ff0:	e7cc      	b.n	8000f8c <AUTODEINIT_init+0x8>
 8000ff2:	bf00      	nop
 8000ff4:	240007e8 	.word	0x240007e8
 8000ff8:	080174e0 	.word	0x080174e0

08000ffc <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
	osStatus_t status;
	packet_t msg;

	while (1) {
		total_size = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <UART_TX_init+0xa8>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	f107 0108 	add.w	r1, r7, #8
 8001014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001018:	2200      	movs	r2, #0
 800101a:	f012 fa7b 	bl	8013514 <osMessageQueueGet>
 800101e:	6138      	str	r0, [r7, #16]
			if (status == osOK) {
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d11c      	bne.n	8001060 <UART_TX_init+0x64>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	461a      	mov	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	4413      	add	r3, r2
 800102e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001032:	d215      	bcs.n	8001060 <UART_TX_init+0x64>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <UART_TX_init+0xac>)
 8001038:	4413      	add	r3, r2
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	89ba      	ldrh	r2, [r7, #12]
 800103e:	4618      	mov	r0, r3
 8001040:	f015 fb3e 	bl	80166c0 <memcpy>
					free(msg.array);
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4618      	mov	r0, r3
 8001048:	f015 fb32 	bl	80166b0 <free>
					total_size += msg.size;
 800104c:	89bb      	ldrh	r3, [r7, #12]
 800104e:	461a      	mov	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	4413      	add	r3, r2
 8001054:	617b      	str	r3, [r7, #20]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f240 32b1 	movw	r2, #945	; 0x3b1
 800105c:	4293      	cmp	r3, r2
 800105e:	d808      	bhi.n	8001072 <UART_TX_init+0x76>
						break;
					}
				}
			}
		} while (osMessageQueueGetCount(mid_MsgQueue));
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <UART_TX_init+0xa8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f012 fab3 	bl	80135d0 <osMessageQueueGetCount>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1cd      	bne.n	800100c <UART_TX_init+0x10>
 8001070:	e000      	b.n	8001074 <UART_TX_init+0x78>
						break;
 8001072:	bf00      	nop

		if (total_size > 0) {
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d011      	beq.n	800109e <UART_TX_init+0xa2>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	b29b      	uxth	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	4909      	ldr	r1, [pc, #36]	; (80010a8 <UART_TX_init+0xac>)
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <UART_TX_init+0xb0>)
 8001084:	f00f fa1a 	bl	80104bc <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8001088:	e001      	b.n	800108e <UART_TX_init+0x92>
				osThreadYield();
 800108a:	f012 f84b 	bl	8013124 <osThreadYield>
			while (tx_flag == 0) {
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <UART_TX_init+0xb4>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f8      	beq.n	800108a <UART_TX_init+0x8e>
			}

			// Reset the flag
			tx_flag = 0;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <UART_TX_init+0xb4>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 800109e:	f012 f841 	bl	8013124 <osThreadYield>
		total_size = 0;
 80010a2:	e7b1      	b.n	8001008 <UART_TX_init+0xc>
 80010a4:	240007ec 	.word	0x240007ec
 80010a8:	240003a8 	.word	0x240003a8
 80010ac:	24000aec 	.word	0x24000aec
 80010b0:	24000088 	.word	0x24000088

080010b4 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <Voltage_Monitor_init+0xa8>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c4:	2200      	movs	r2, #0
 80010c6:	2101      	movs	r1, #1
 80010c8:	f012 f8ea 	bl	80132a0 <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 80010cc:	f002 feaa 	bl	8003e24 <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 80010d0:	f002 fe9e 	bl	8003e10 <get_rail_monitor>
 80010d4:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e03b      	b.n	8001154 <Voltage_Monitor_init+0xa0>
			if (rail_monitor_ptr[i].is_enabled){
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	461a      	mov	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4413      	add	r3, r2
 80010ec:	789b      	ldrb	r3, [r3, #2]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d02d      	beq.n	800114e <Voltage_Monitor_init+0x9a>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	461a      	mov	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	4413      	add	r3, r2
 8001102:	8898      	ldrh	r0, [r3, #4]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	461a      	mov	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4413      	add	r3, r2
 8001114:	891b      	ldrh	r3, [r3, #8]
 8001116:	4619      	mov	r1, r3
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	461a      	mov	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4413      	add	r3, r2
 8001128:	88db      	ldrh	r3, [r3, #6]
 800112a:	461a      	mov	r2, r3
 800112c:	f002 ff08 	bl	8003f40 <in_range>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10b      	bne.n	800114e <Voltage_Monitor_init+0x9a>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	461a      	mov	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	4413      	add	r3, r2
 8001146:	785a      	ldrb	r2, [r3, #1]
 8001148:	3201      	adds	r2, #1
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3301      	adds	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b11      	cmp	r3, #17
 8001158:	ddc0      	ble.n	80010dc <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800115a:	e7af      	b.n	80010bc <Voltage_Monitor_init+0x8>
 800115c:	240007e8 	.word	0x240007e8

08001160 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001168:	2001      	movs	r0, #1
 800116a:	f011 fffb 	bl	8013164 <osDelay>
 800116e:	e7fb      	b.n	8001168 <STOP_init+0x8>

08001170 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f011 fff3 	bl	8013164 <osDelay>
 800117e:	e7fb      	b.n	8001178 <Science_init+0x8>

08001180 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001188:	2001      	movs	r0, #1
 800118a:	f011 ffeb 	bl	8013164 <osDelay>
 800118e:	e7fb      	b.n	8001188 <Idle_init+0x8>

08001190 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	4b34      	ldr	r3, [pc, #208]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	4a32      	ldr	r2, [pc, #200]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	4a2b      	ldr	r2, [pc, #172]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e8:	4a23      	ldr	r2, [pc, #140]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_GPIO_Init+0xe8>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_GPIO_Init+0xe8>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <MX_GPIO_Init+0xe8>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_GPIO_Init+0xe8>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001224:	4815      	ldr	r0, [pc, #84]	; (800127c <MX_GPIO_Init+0xec>)
 8001226:	f008 f855 	bl	80092d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	2164      	movs	r1, #100	; 0x64
 800122e:	4814      	ldr	r0, [pc, #80]	; (8001280 <MX_GPIO_Init+0xf0>)
 8001230:	f008 f850 	bl	80092d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001234:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001238:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800123e:	2302      	movs	r3, #2
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <MX_GPIO_Init+0xec>)
 800124e:	f007 fe79 	bl	8008f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001252:	2364      	movs	r3, #100	; 0x64
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800125a:	2302      	movs	r3, #2
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_GPIO_Init+0xf0>)
 800126a:	f007 fe6b 	bl	8008f44 <HAL_GPIO_Init>

}
 800126e:	bf00      	nop
 8001270:	3728      	adds	r7, #40	; 0x28
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	58024400 	.word	0x58024400
 800127c:	58020800 	.word	0x58020800
 8001280:	58020400 	.word	0x58020400

08001284 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_I2C1_Init+0x78>)
 800128a:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <MX_I2C1_Init+0x7c>)
 800128c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_I2C1_Init+0x78>)
 8001290:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <MX_I2C1_Init+0x80>)
 8001292:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_I2C1_Init+0x78>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_I2C1_Init+0x78>)
 800129c:	2201      	movs	r2, #1
 800129e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_I2C1_Init+0x78>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_I2C1_Init+0x78>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_I2C1_Init+0x78>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_I2C1_Init+0x78>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <MX_I2C1_Init+0x78>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012be:	480f      	ldr	r0, [pc, #60]	; (80012fc <MX_I2C1_Init+0x78>)
 80012c0:	f008 f822 	bl	8009308 <HAL_I2C_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ca:	f000 fef5 	bl	80020b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ce:	2100      	movs	r1, #0
 80012d0:	480a      	ldr	r0, [pc, #40]	; (80012fc <MX_I2C1_Init+0x78>)
 80012d2:	f008 fd69 	bl	8009da8 <HAL_I2CEx_ConfigAnalogFilter>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012dc:	f000 feec 	bl	80020b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_I2C1_Init+0x78>)
 80012e4:	f008 fdab 	bl	8009e3e <HAL_I2CEx_ConfigDigitalFilter>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012ee:	f000 fee3 	bl	80020b8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f008 fdf0 	bl	8009ed8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	24000790 	.word	0x24000790
 8001300:	40005400 	.word	0x40005400
 8001304:	0020081f 	.word	0x0020081f

08001308 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b0ba      	sub	sp, #232	; 0xe8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	22c0      	movs	r2, #192	; 0xc0
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f015 f9d7 	bl	80166dc <memset>
  if(i2cHandle->Instance==I2C1)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <HAL_I2C_MspInit+0xc8>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d146      	bne.n	80013c6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001338:	f04f 0208 	mov.w	r2, #8
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001344:	2300      	movs	r3, #0
 8001346:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4618      	mov	r0, r3
 8001350:	f009 fe48 	bl	800afe4 <HAL_RCCEx_PeriphCLKConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800135a:	f000 fead 	bl	80020b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_I2C_MspInit+0xcc>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <HAL_I2C_MspInit+0xcc>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_I2C_MspInit+0xcc>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800137c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001380:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001384:	2312      	movs	r3, #18
 8001386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001396:	2304      	movs	r3, #4
 8001398:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013a0:	4619      	mov	r1, r3
 80013a2:	480d      	ldr	r0, [pc, #52]	; (80013d8 <HAL_I2C_MspInit+0xd0>)
 80013a4:	f007 fdce 	bl	8008f44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_I2C_MspInit+0xcc>)
 80013aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <HAL_I2C_MspInit+0xcc>)
 80013b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_I2C_MspInit+0xcc>)
 80013ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013c6:	bf00      	nop
 80013c8:	37e8      	adds	r7, #232	; 0xe8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40005400 	.word	0x40005400
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58020400 	.word	0x58020400

080013dc <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a19      	ldr	r2, [pc, #100]	; (800144c <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d106      	bne.n	80013fa <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	4618      	mov	r0, r3
 80013f4:	f011 ff10 	bl	8013218 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 80013f8:	e023      	b.n	8001442 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	else if (htim == &htim2) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a15      	ldr	r2, [pc, #84]	; (8001454 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d106      	bne.n	8001410 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2102      	movs	r1, #2
 8001408:	4618      	mov	r0, r3
 800140a:	f011 ff05 	bl	8013218 <osEventFlagsSet>
}
 800140e:	e018      	b.n	8001442 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d111      	bne.n	800143c <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2101      	movs	r1, #1
 800141e:	4618      	mov	r0, r3
 8001420:	f011 fefa 	bl	8013218 <osEventFlagsSet>
		if (HK_ENABLED){
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2104      	movs	r1, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f011 feef 	bl	8013218 <osEventFlagsSet>
}
 800143a:	e002      	b.n	8001442 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 800143e:	f015 faa3 	bl	8016988 <puts>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	24000a08 	.word	0x24000a08
 8001450:	240007e4 	.word	0x240007e4
 8001454:	24000a54 	.word	0x24000a54
 8001458:	24000aa0 	.word	0x24000aa0
 800145c:	240007e8 	.word	0x240007e8
 8001460:	24000830 	.word	0x24000830
 8001464:	08017188 	.word	0x08017188

08001468 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af02      	add	r7, sp, #8
 800146e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001470:	2201      	movs	r2, #1
 8001472:	49f2      	ldr	r1, [pc, #968]	; (800183c <HAL_UART_RxCpltCallback+0x3d4>)
 8001474:	48f2      	ldr	r0, [pc, #968]	; (8001840 <HAL_UART_RxCpltCallback+0x3d8>)
 8001476:	f00e ffd5 	bl	8010424 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800147a:	4bf0      	ldr	r3, [pc, #960]	; (800183c <HAL_UART_RxCpltCallback+0x3d4>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	2be0      	cmp	r3, #224	; 0xe0
 8001484:	f200 840b 	bhi.w	8001c9e <HAL_UART_RxCpltCallback+0x836>
 8001488:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <HAL_UART_RxCpltCallback+0x28>)
 800148a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148e:	bf00      	nop
 8001490:	08001829 	.word	0x08001829
 8001494:	0800186d 	.word	0x0800186d
 8001498:	080018dd 	.word	0x080018dd
 800149c:	08001917 	.word	0x08001917
 80014a0:	0800194f 	.word	0x0800194f
 80014a4:	08001989 	.word	0x08001989
 80014a8:	080019c5 	.word	0x080019c5
 80014ac:	08001a01 	.word	0x08001a01
 80014b0:	08001a3b 	.word	0x08001a3b
 80014b4:	08001a6f 	.word	0x08001a6f
 80014b8:	08001a9b 	.word	0x08001a9b
 80014bc:	08001ac7 	.word	0x08001ac7
 80014c0:	08001af1 	.word	0x08001af1
 80014c4:	08001bcd 	.word	0x08001bcd
 80014c8:	08001c35 	.word	0x08001c35
 80014cc:	08001c5d 	.word	0x08001c5d
 80014d0:	08001815 	.word	0x08001815
 80014d4:	08001851 	.word	0x08001851
 80014d8:	080018bf 	.word	0x080018bf
 80014dc:	080018fb 	.word	0x080018fb
 80014e0:	08001933 	.word	0x08001933
 80014e4:	0800196b 	.word	0x0800196b
 80014e8:	080019a7 	.word	0x080019a7
 80014ec:	080019e3 	.word	0x080019e3
 80014f0:	08001a1f 	.word	0x08001a1f
 80014f4:	08001a57 	.word	0x08001a57
 80014f8:	08001a7f 	.word	0x08001a7f
 80014fc:	08001aab 	.word	0x08001aab
 8001500:	08001ad7 	.word	0x08001ad7
 8001504:	08001aff 	.word	0x08001aff
 8001508:	08001c0d 	.word	0x08001c0d
 800150c:	08001c9f 	.word	0x08001c9f
 8001510:	08001c9f 	.word	0x08001c9f
 8001514:	08001c9f 	.word	0x08001c9f
 8001518:	08001c9f 	.word	0x08001c9f
 800151c:	08001c9f 	.word	0x08001c9f
 8001520:	08001c9f 	.word	0x08001c9f
 8001524:	08001c9f 	.word	0x08001c9f
 8001528:	08001c9f 	.word	0x08001c9f
 800152c:	08001c9f 	.word	0x08001c9f
 8001530:	08001c9f 	.word	0x08001c9f
 8001534:	08001c9f 	.word	0x08001c9f
 8001538:	08001c9f 	.word	0x08001c9f
 800153c:	08001c9f 	.word	0x08001c9f
 8001540:	08001c9f 	.word	0x08001c9f
 8001544:	08001c9f 	.word	0x08001c9f
 8001548:	08001c9f 	.word	0x08001c9f
 800154c:	08001c9f 	.word	0x08001c9f
 8001550:	08001c9f 	.word	0x08001c9f
 8001554:	08001c9f 	.word	0x08001c9f
 8001558:	08001c9f 	.word	0x08001c9f
 800155c:	08001c9f 	.word	0x08001c9f
 8001560:	08001c9f 	.word	0x08001c9f
 8001564:	08001c9f 	.word	0x08001c9f
 8001568:	08001c9f 	.word	0x08001c9f
 800156c:	08001c9f 	.word	0x08001c9f
 8001570:	08001c9f 	.word	0x08001c9f
 8001574:	08001c9f 	.word	0x08001c9f
 8001578:	08001c9f 	.word	0x08001c9f
 800157c:	08001c9f 	.word	0x08001c9f
 8001580:	08001c9f 	.word	0x08001c9f
 8001584:	08001c9f 	.word	0x08001c9f
 8001588:	08001c9f 	.word	0x08001c9f
 800158c:	08001c9f 	.word	0x08001c9f
 8001590:	08001c9f 	.word	0x08001c9f
 8001594:	08001c9f 	.word	0x08001c9f
 8001598:	08001c9f 	.word	0x08001c9f
 800159c:	08001c9f 	.word	0x08001c9f
 80015a0:	08001c9f 	.word	0x08001c9f
 80015a4:	08001c9f 	.word	0x08001c9f
 80015a8:	08001c9f 	.word	0x08001c9f
 80015ac:	08001c9f 	.word	0x08001c9f
 80015b0:	08001c9f 	.word	0x08001c9f
 80015b4:	08001c9f 	.word	0x08001c9f
 80015b8:	08001c9f 	.word	0x08001c9f
 80015bc:	08001c9f 	.word	0x08001c9f
 80015c0:	08001c9f 	.word	0x08001c9f
 80015c4:	08001c9f 	.word	0x08001c9f
 80015c8:	08001c9f 	.word	0x08001c9f
 80015cc:	08001c9f 	.word	0x08001c9f
 80015d0:	08001c9f 	.word	0x08001c9f
 80015d4:	08001c9f 	.word	0x08001c9f
 80015d8:	08001c9f 	.word	0x08001c9f
 80015dc:	08001c9f 	.word	0x08001c9f
 80015e0:	08001c9f 	.word	0x08001c9f
 80015e4:	08001c9f 	.word	0x08001c9f
 80015e8:	08001c9f 	.word	0x08001c9f
 80015ec:	08001c9f 	.word	0x08001c9f
 80015f0:	08001c9f 	.word	0x08001c9f
 80015f4:	08001c9f 	.word	0x08001c9f
 80015f8:	08001c9f 	.word	0x08001c9f
 80015fc:	08001c9f 	.word	0x08001c9f
 8001600:	08001c9f 	.word	0x08001c9f
 8001604:	08001c9f 	.word	0x08001c9f
 8001608:	08001c9f 	.word	0x08001c9f
 800160c:	08001c9f 	.word	0x08001c9f
 8001610:	08001c9f 	.word	0x08001c9f
 8001614:	08001c9f 	.word	0x08001c9f
 8001618:	08001c9f 	.word	0x08001c9f
 800161c:	08001c9f 	.word	0x08001c9f
 8001620:	08001c9f 	.word	0x08001c9f
 8001624:	08001c9f 	.word	0x08001c9f
 8001628:	08001c9f 	.word	0x08001c9f
 800162c:	08001c9f 	.word	0x08001c9f
 8001630:	08001c9f 	.word	0x08001c9f
 8001634:	08001c9f 	.word	0x08001c9f
 8001638:	08001c9f 	.word	0x08001c9f
 800163c:	08001c9f 	.word	0x08001c9f
 8001640:	08001c9f 	.word	0x08001c9f
 8001644:	08001c9f 	.word	0x08001c9f
 8001648:	08001c9f 	.word	0x08001c9f
 800164c:	08001c9f 	.word	0x08001c9f
 8001650:	08001c9f 	.word	0x08001c9f
 8001654:	08001c9f 	.word	0x08001c9f
 8001658:	08001c9f 	.word	0x08001c9f
 800165c:	08001c9f 	.word	0x08001c9f
 8001660:	08001c9f 	.word	0x08001c9f
 8001664:	08001c9f 	.word	0x08001c9f
 8001668:	08001c9f 	.word	0x08001c9f
 800166c:	08001c9f 	.word	0x08001c9f
 8001670:	08001c9f 	.word	0x08001c9f
 8001674:	08001c9f 	.word	0x08001c9f
 8001678:	08001c9f 	.word	0x08001c9f
 800167c:	08001c9f 	.word	0x08001c9f
 8001680:	08001c9f 	.word	0x08001c9f
 8001684:	08001c9f 	.word	0x08001c9f
 8001688:	08001c9f 	.word	0x08001c9f
 800168c:	08001c9f 	.word	0x08001c9f
 8001690:	08001c9f 	.word	0x08001c9f
 8001694:	08001c9f 	.word	0x08001c9f
 8001698:	08001c9f 	.word	0x08001c9f
 800169c:	08001c9f 	.word	0x08001c9f
 80016a0:	08001c9f 	.word	0x08001c9f
 80016a4:	08001c9f 	.word	0x08001c9f
 80016a8:	08001c9f 	.word	0x08001c9f
 80016ac:	08001c9f 	.word	0x08001c9f
 80016b0:	08001c9f 	.word	0x08001c9f
 80016b4:	08001c9f 	.word	0x08001c9f
 80016b8:	08001c9f 	.word	0x08001c9f
 80016bc:	08001c9f 	.word	0x08001c9f
 80016c0:	08001c9f 	.word	0x08001c9f
 80016c4:	08001c9f 	.word	0x08001c9f
 80016c8:	08001c9f 	.word	0x08001c9f
 80016cc:	08001c9f 	.word	0x08001c9f
 80016d0:	08001c9f 	.word	0x08001c9f
 80016d4:	08001c9f 	.word	0x08001c9f
 80016d8:	08001c9f 	.word	0x08001c9f
 80016dc:	08001c9f 	.word	0x08001c9f
 80016e0:	08001c9f 	.word	0x08001c9f
 80016e4:	08001c9f 	.word	0x08001c9f
 80016e8:	08001c9f 	.word	0x08001c9f
 80016ec:	08001c9f 	.word	0x08001c9f
 80016f0:	08001c9f 	.word	0x08001c9f
 80016f4:	08001c9f 	.word	0x08001c9f
 80016f8:	08001c9f 	.word	0x08001c9f
 80016fc:	08001c9f 	.word	0x08001c9f
 8001700:	08001c9f 	.word	0x08001c9f
 8001704:	08001c9f 	.word	0x08001c9f
 8001708:	08001c9f 	.word	0x08001c9f
 800170c:	08001c9f 	.word	0x08001c9f
 8001710:	08001c9f 	.word	0x08001c9f
 8001714:	08001c9f 	.word	0x08001c9f
 8001718:	08001c9f 	.word	0x08001c9f
 800171c:	08001c9f 	.word	0x08001c9f
 8001720:	08001c9f 	.word	0x08001c9f
 8001724:	08001c9f 	.word	0x08001c9f
 8001728:	08001c9f 	.word	0x08001c9f
 800172c:	08001c9f 	.word	0x08001c9f
 8001730:	08001c9f 	.word	0x08001c9f
 8001734:	08001c9f 	.word	0x08001c9f
 8001738:	08001c9f 	.word	0x08001c9f
 800173c:	08001c9f 	.word	0x08001c9f
 8001740:	08001c9f 	.word	0x08001c9f
 8001744:	08001c9f 	.word	0x08001c9f
 8001748:	08001c9f 	.word	0x08001c9f
 800174c:	08001c99 	.word	0x08001c99
 8001750:	08001c9f 	.word	0x08001c9f
 8001754:	08001c9f 	.word	0x08001c9f
 8001758:	08001c9f 	.word	0x08001c9f
 800175c:	08001c9f 	.word	0x08001c9f
 8001760:	08001c9f 	.word	0x08001c9f
 8001764:	08001c9f 	.word	0x08001c9f
 8001768:	08001c9f 	.word	0x08001c9f
 800176c:	08001c9f 	.word	0x08001c9f
 8001770:	08001c9f 	.word	0x08001c9f
 8001774:	08001c9f 	.word	0x08001c9f
 8001778:	08001c9f 	.word	0x08001c9f
 800177c:	08001c9f 	.word	0x08001c9f
 8001780:	08001c9f 	.word	0x08001c9f
 8001784:	08001c9f 	.word	0x08001c9f
 8001788:	08001c9f 	.word	0x08001c9f
 800178c:	08001ca7 	.word	0x08001ca7
 8001790:	08001c9f 	.word	0x08001c9f
 8001794:	08001c9f 	.word	0x08001c9f
 8001798:	08001c9f 	.word	0x08001c9f
 800179c:	08001c9f 	.word	0x08001c9f
 80017a0:	08001c9f 	.word	0x08001c9f
 80017a4:	08001c9f 	.word	0x08001c9f
 80017a8:	08001c9f 	.word	0x08001c9f
 80017ac:	08001c9f 	.word	0x08001c9f
 80017b0:	08001c9f 	.word	0x08001c9f
 80017b4:	08001c9f 	.word	0x08001c9f
 80017b8:	08001c9f 	.word	0x08001c9f
 80017bc:	08001c9f 	.word	0x08001c9f
 80017c0:	08001c9f 	.word	0x08001c9f
 80017c4:	08001c9f 	.word	0x08001c9f
 80017c8:	08001c9f 	.word	0x08001c9f
 80017cc:	08001ca7 	.word	0x08001ca7
 80017d0:	08001c85 	.word	0x08001c85
 80017d4:	08001c9f 	.word	0x08001c9f
 80017d8:	08001c9f 	.word	0x08001c9f
 80017dc:	08001c9f 	.word	0x08001c9f
 80017e0:	08001c9f 	.word	0x08001c9f
 80017e4:	08001c9f 	.word	0x08001c9f
 80017e8:	08001c9f 	.word	0x08001c9f
 80017ec:	08001c9f 	.word	0x08001c9f
 80017f0:	08001c9f 	.word	0x08001c9f
 80017f4:	08001c9f 	.word	0x08001c9f
 80017f8:	08001c9f 	.word	0x08001c9f
 80017fc:	08001c9f 	.word	0x08001c9f
 8001800:	08001c9f 	.word	0x08001c9f
 8001804:	08001c9f 	.word	0x08001c9f
 8001808:	08001c9f 	.word	0x08001c9f
 800180c:	08001c9f 	.word	0x08001c9f
 8001810:	08001c71 	.word	0x08001c71
	case 0x10: {
		printf("SDN1 ON\n");
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <HAL_UART_RxCpltCallback+0x3dc>)
 8001816:	f015 f8b7 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_UART_RxCpltCallback+0x3e0>)
 800181c:	2104      	movs	r1, #4
 800181e:	2201      	movs	r2, #1
 8001820:	4618      	mov	r0, r3
 8001822:	f007 fd57 	bl	80092d4 <HAL_GPIO_WritePin>
		break;
 8001826:	e247      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8001828:	4808      	ldr	r0, [pc, #32]	; (800184c <HAL_UART_RxCpltCallback+0x3e4>)
 800182a:	f015 f8ad 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_UART_RxCpltCallback+0x3e0>)
 8001830:	2104      	movs	r1, #4
 8001832:	2200      	movs	r2, #0
 8001834:	4618      	mov	r0, r3
 8001836:	f007 fd4d 	bl	80092d4 <HAL_GPIO_WritePin>
		break;
 800183a:	e23d      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
 800183c:	240007f0 	.word	0x240007f0
 8001840:	24000aec 	.word	0x24000aec
 8001844:	080171a0 	.word	0x080171a0
 8001848:	58020400 	.word	0x58020400
 800184c:	080171a8 	.word	0x080171a8
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8001850:	48bb      	ldr	r0, [pc, #748]	; (8001b40 <HAL_UART_RxCpltCallback+0x6d8>)
 8001852:	f015 f899 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8001856:	4bbb      	ldr	r3, [pc, #748]	; (8001b44 <HAL_UART_RxCpltCallback+0x6dc>)
 8001858:	2120      	movs	r1, #32
 800185a:	2201      	movs	r2, #1
 800185c:	4618      	mov	r0, r3
 800185e:	f007 fd39 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 8001862:	2101      	movs	r1, #1
 8001864:	2008      	movs	r0, #8
 8001866:	f002 fab3 	bl	8003dd0 <set_rail_monitor_enable>
		break;
 800186a:	e225      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 800186c:	48b6      	ldr	r0, [pc, #728]	; (8001b48 <HAL_UART_RxCpltCallback+0x6e0>)
 800186e:	f015 f88b 	bl	8016988 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 8001872:	2308      	movs	r3, #8
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	e00f      	b.n	8001898 <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8001878:	4ab4      	ldr	r2, [pc, #720]	; (8001b4c <HAL_UART_RxCpltCallback+0x6e4>)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001880:	4ab2      	ldr	r2, [pc, #712]	; (8001b4c <HAL_UART_RxCpltCallback+0x6e4>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	889b      	ldrh	r3, [r3, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	4619      	mov	r1, r3
 800188e:	f007 fd21 	bl	80092d4 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	3b01      	subs	r3, #1
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b00      	cmp	r3, #0
 800189c:	dcec      	bgt.n	8001878 <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 800189e:	2310      	movs	r3, #16
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	e008      	b.n	80018b6 <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f002 fa90 	bl	8003dd0 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b07      	cmp	r3, #7
 80018ba:	dcf3      	bgt.n	80018a4 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 80018bc:	e1fc      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 80018be:	48a4      	ldr	r0, [pc, #656]	; (8001b50 <HAL_UART_RxCpltCallback+0x6e8>)
 80018c0:	f015 f862 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 80018c4:	4ba3      	ldr	r3, [pc, #652]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 80018c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ca:	2201      	movs	r2, #1
 80018cc:	4618      	mov	r0, r3
 80018ce:	f007 fd01 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 80018d2:	2101      	movs	r1, #1
 80018d4:	2009      	movs	r0, #9
 80018d6:	f002 fa7b 	bl	8003dd0 <set_rail_monitor_enable>

		break;
 80018da:	e1ed      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 80018dc:	489e      	ldr	r0, [pc, #632]	; (8001b58 <HAL_UART_RxCpltCallback+0x6f0>)
 80018de:	f015 f853 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 80018e2:	4b9c      	ldr	r3, [pc, #624]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 80018e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018e8:	2200      	movs	r2, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f007 fcf2 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 80018f0:	2100      	movs	r1, #0
 80018f2:	2009      	movs	r0, #9
 80018f4:	f002 fa6c 	bl	8003dd0 <set_rail_monitor_enable>
		break;
 80018f8:	e1de      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 80018fa:	4898      	ldr	r0, [pc, #608]	; (8001b5c <HAL_UART_RxCpltCallback+0x6f4>)
 80018fc:	f015 f844 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8001900:	4b94      	ldr	r3, [pc, #592]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	2201      	movs	r2, #1
 8001906:	4618      	mov	r0, r3
 8001908:	f007 fce4 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 800190c:	2101      	movs	r1, #1
 800190e:	200a      	movs	r0, #10
 8001910:	f002 fa5e 	bl	8003dd0 <set_rail_monitor_enable>

		break;
 8001914:	e1d0      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001916:	4892      	ldr	r0, [pc, #584]	; (8001b60 <HAL_UART_RxCpltCallback+0x6f8>)
 8001918:	f015 f836 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800191c:	4b8d      	ldr	r3, [pc, #564]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	2200      	movs	r2, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f007 fcd6 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001928:	2100      	movs	r1, #0
 800192a:	200a      	movs	r0, #10
 800192c:	f002 fa50 	bl	8003dd0 <set_rail_monitor_enable>
		break;
 8001930:	e1c2      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001932:	488c      	ldr	r0, [pc, #560]	; (8001b64 <HAL_UART_RxCpltCallback+0x6fc>)
 8001934:	f015 f828 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001938:	4b86      	ldr	r3, [pc, #536]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 800193a:	2140      	movs	r1, #64	; 0x40
 800193c:	2201      	movs	r2, #1
 800193e:	4618      	mov	r0, r3
 8001940:	f007 fcc8 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001944:	2101      	movs	r1, #1
 8001946:	200b      	movs	r0, #11
 8001948:	f002 fa42 	bl	8003dd0 <set_rail_monitor_enable>

		break;
 800194c:	e1b4      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 800194e:	4886      	ldr	r0, [pc, #536]	; (8001b68 <HAL_UART_RxCpltCallback+0x700>)
 8001950:	f015 f81a 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001954:	4b7f      	ldr	r3, [pc, #508]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001956:	2140      	movs	r1, #64	; 0x40
 8001958:	2200      	movs	r2, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f007 fcba 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001960:	2100      	movs	r1, #0
 8001962:	200b      	movs	r0, #11
 8001964:	f002 fa34 	bl	8003dd0 <set_rail_monitor_enable>
		break;
 8001968:	e1a6      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 800196a:	4880      	ldr	r0, [pc, #512]	; (8001b6c <HAL_UART_RxCpltCallback+0x704>)
 800196c:	f015 f80c 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001970:	4b78      	ldr	r3, [pc, #480]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001976:	2201      	movs	r2, #1
 8001978:	4618      	mov	r0, r3
 800197a:	f007 fcab 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 800197e:	2101      	movs	r1, #1
 8001980:	200c      	movs	r0, #12
 8001982:	f002 fa25 	bl	8003dd0 <set_rail_monitor_enable>

		break;
 8001986:	e197      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001988:	4879      	ldr	r0, [pc, #484]	; (8001b70 <HAL_UART_RxCpltCallback+0x708>)
 800198a:	f014 fffd 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 800198e:	4b71      	ldr	r3, [pc, #452]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001990:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001994:	2200      	movs	r2, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f007 fc9c 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 800199c:	2100      	movs	r1, #0
 800199e:	200c      	movs	r0, #12
 80019a0:	f002 fa16 	bl	8003dd0 <set_rail_monitor_enable>
		break;
 80019a4:	e188      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 80019a6:	4873      	ldr	r0, [pc, #460]	; (8001b74 <HAL_UART_RxCpltCallback+0x70c>)
 80019a8:	f014 ffee 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80019ac:	4b69      	ldr	r3, [pc, #420]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 80019ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b2:	2201      	movs	r2, #1
 80019b4:	4618      	mov	r0, r3
 80019b6:	f007 fc8d 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 80019ba:	2101      	movs	r1, #1
 80019bc:	200d      	movs	r0, #13
 80019be:	f002 fa07 	bl	8003dd0 <set_rail_monitor_enable>

		break;
 80019c2:	e179      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 80019c4:	486c      	ldr	r0, [pc, #432]	; (8001b78 <HAL_UART_RxCpltCallback+0x710>)
 80019c6:	f014 ffdf 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 80019ca:	4b62      	ldr	r3, [pc, #392]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 80019cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d0:	2200      	movs	r2, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f007 fc7e 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 80019d8:	2100      	movs	r1, #0
 80019da:	200d      	movs	r0, #13
 80019dc:	f002 f9f8 	bl	8003dd0 <set_rail_monitor_enable>
		break;
 80019e0:	e16a      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 80019e2:	4866      	ldr	r0, [pc, #408]	; (8001b7c <HAL_UART_RxCpltCallback+0x714>)
 80019e4:	f014 ffd0 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 80019e8:	4b5a      	ldr	r3, [pc, #360]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 80019ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ee:	2201      	movs	r2, #1
 80019f0:	4618      	mov	r0, r3
 80019f2:	f007 fc6f 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 80019f6:	2101      	movs	r1, #1
 80019f8:	200f      	movs	r0, #15
 80019fa:	f002 f9e9 	bl	8003dd0 <set_rail_monitor_enable>

		break;
 80019fe:	e15b      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001a00:	485f      	ldr	r0, [pc, #380]	; (8001b80 <HAL_UART_RxCpltCallback+0x718>)
 8001a02:	f014 ffc1 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001a06:	4b53      	ldr	r3, [pc, #332]	; (8001b54 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f007 fc60 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001a14:	2100      	movs	r1, #0
 8001a16:	200f      	movs	r0, #15
 8001a18:	f002 f9da 	bl	8003dd0 <set_rail_monitor_enable>
		break;
 8001a1c:	e14c      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001a1e:	4859      	ldr	r0, [pc, #356]	; (8001b84 <HAL_UART_RxCpltCallback+0x71c>)
 8001a20:	f014 ffb2 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001a24:	4b47      	ldr	r3, [pc, #284]	; (8001b44 <HAL_UART_RxCpltCallback+0x6dc>)
 8001a26:	2140      	movs	r1, #64	; 0x40
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f007 fc52 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001a30:	2101      	movs	r1, #1
 8001a32:	2010      	movs	r0, #16
 8001a34:	f002 f9cc 	bl	8003dd0 <set_rail_monitor_enable>

		break;
 8001a38:	e13e      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001a3a:	4853      	ldr	r0, [pc, #332]	; (8001b88 <HAL_UART_RxCpltCallback+0x720>)
 8001a3c:	f014 ffa4 	bl	8016988 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001a40:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <HAL_UART_RxCpltCallback+0x6dc>)
 8001a42:	2140      	movs	r1, #64	; 0x40
 8001a44:	2200      	movs	r2, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f007 fc44 	bl	80092d4 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2010      	movs	r0, #16
 8001a50:	f002 f9be 	bl	8003dd0 <set_rail_monitor_enable>
		break;
 8001a54:	e130      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001a56:	484d      	ldr	r0, [pc, #308]	; (8001b8c <HAL_UART_RxCpltCallback+0x724>)
 8001a58:	f014 ff96 	bl	8016988 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2320      	movs	r3, #32
 8001a62:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <HAL_UART_RxCpltCallback+0x728>)
 8001a64:	2100      	movs	r1, #0
 8001a66:	484b      	ldr	r0, [pc, #300]	; (8001b94 <HAL_UART_RxCpltCallback+0x72c>)
 8001a68:	f004 f898 	bl	8005b9c <HAL_DAC_Start_DMA>
		break;
 8001a6c:	e124      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001a6e:	484a      	ldr	r0, [pc, #296]	; (8001b98 <HAL_UART_RxCpltCallback+0x730>)
 8001a70:	f014 ff8a 	bl	8016988 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001a74:	2100      	movs	r1, #0
 8001a76:	4847      	ldr	r0, [pc, #284]	; (8001b94 <HAL_UART_RxCpltCallback+0x72c>)
 8001a78:	f004 f950 	bl	8005d1c <HAL_DAC_Stop_DMA>
		break;
 8001a7c:	e11c      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001a7e:	4847      	ldr	r0, [pc, #284]	; (8001b9c <HAL_UART_RxCpltCallback+0x734>)
 8001a80:	f014 ff82 	bl	8016988 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001a84:	210c      	movs	r1, #12
 8001a86:	4846      	ldr	r0, [pc, #280]	; (8001ba0 <HAL_UART_RxCpltCallback+0x738>)
 8001a88:	f00c ffec 	bl	800ea64 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001a8c:	4b45      	ldr	r3, [pc, #276]	; (8001ba4 <HAL_UART_RxCpltCallback+0x73c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2102      	movs	r1, #2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f011 fbc0 	bl	8013218 <osEventFlagsSet>
		break;
 8001a98:	e10e      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001a9a:	4843      	ldr	r0, [pc, #268]	; (8001ba8 <HAL_UART_RxCpltCallback+0x740>)
 8001a9c:	f014 ff74 	bl	8016988 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001aa0:	210c      	movs	r1, #12
 8001aa2:	483f      	ldr	r0, [pc, #252]	; (8001ba0 <HAL_UART_RxCpltCallback+0x738>)
 8001aa4:	f00d f938 	bl	800ed18 <HAL_TIM_OC_Stop_IT>
		break;
 8001aa8:	e106      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001aaa:	4840      	ldr	r0, [pc, #256]	; (8001bac <HAL_UART_RxCpltCallback+0x744>)
 8001aac:	f014 ff6c 	bl	8016988 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	483f      	ldr	r0, [pc, #252]	; (8001bb0 <HAL_UART_RxCpltCallback+0x748>)
 8001ab4:	f00c ffd6 	bl	800ea64 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	; (8001ba4 <HAL_UART_RxCpltCallback+0x73c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2101      	movs	r1, #1
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f011 fbaa 	bl	8013218 <osEventFlagsSet>
		break;
 8001ac4:	e0f8      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8001ac6:	483b      	ldr	r0, [pc, #236]	; (8001bb4 <HAL_UART_RxCpltCallback+0x74c>)
 8001ac8:	f014 ff5e 	bl	8016988 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001acc:	2100      	movs	r1, #0
 8001ace:	4838      	ldr	r0, [pc, #224]	; (8001bb0 <HAL_UART_RxCpltCallback+0x748>)
 8001ad0:	f00d f922 	bl	800ed18 <HAL_TIM_OC_Stop_IT>
		break;
 8001ad4:	e0f0      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1C: {
		printf("HK ON \n");
 8001ad6:	4838      	ldr	r0, [pc, #224]	; (8001bb8 <HAL_UART_RxCpltCallback+0x750>)
 8001ad8:	f014 ff56 	bl	8016988 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001adc:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_UART_RxCpltCallback+0x73c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f011 fb98 	bl	8013218 <osEventFlagsSet>
		HK_ENABLED = 1;
 8001ae8:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <HAL_UART_RxCpltCallback+0x754>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
		break;
 8001aee:	e0e3      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8001af0:	4833      	ldr	r0, [pc, #204]	; (8001bc0 <HAL_UART_RxCpltCallback+0x758>)
 8001af2:	f014 ff49 	bl	8016988 <puts>
		HK_ENABLED = 0;
 8001af6:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <HAL_UART_RxCpltCallback+0x754>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
		break;
 8001afc:	e0dc      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001afe:	4831      	ldr	r0, [pc, #196]	; (8001bc4 <HAL_UART_RxCpltCallback+0x75c>)
 8001b00:	f014 ff42 	bl	8016988 <puts>
		if (step < 17) {
 8001b04:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_UART_RxCpltCallback+0x760>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	f200 80cd 	bhi.w	8001caa <HAL_UART_RxCpltCallback+0x842>
			step += 2;
 8001b10:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_UART_RxCpltCallback+0x760>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	3302      	adds	r3, #2
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <HAL_UART_RxCpltCallback+0x760>)
 8001b1c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_UART_RxCpltCallback+0x760>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <HAL_UART_RxCpltCallback+0x728>)
 8001b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4818      	ldr	r0, [pc, #96]	; (8001b94 <HAL_UART_RxCpltCallback+0x72c>)
 8001b32:	f004 f996 	bl	8005e62 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001b36:	2100      	movs	r1, #0
 8001b38:	4816      	ldr	r0, [pc, #88]	; (8001b94 <HAL_UART_RxCpltCallback+0x72c>)
 8001b3a:	f003 ffd7 	bl	8005aec <HAL_DAC_Start>
		}
		break;
 8001b3e:	e0b4      	b.n	8001caa <HAL_UART_RxCpltCallback+0x842>
 8001b40:	080171b4 	.word	0x080171b4
 8001b44:	58020400 	.word	0x58020400
 8001b48:	080171c0 	.word	0x080171c0
 8001b4c:	080174e0 	.word	0x080174e0
 8001b50:	080171cc 	.word	0x080171cc
 8001b54:	58020800 	.word	0x58020800
 8001b58:	080171d8 	.word	0x080171d8
 8001b5c:	080171e8 	.word	0x080171e8
 8001b60:	080171f4 	.word	0x080171f4
 8001b64:	08017200 	.word	0x08017200
 8001b68:	0801720c 	.word	0x0801720c
 8001b6c:	0801721c 	.word	0x0801721c
 8001b70:	08017228 	.word	0x08017228
 8001b74:	08017234 	.word	0x08017234
 8001b78:	08017240 	.word	0x08017240
 8001b7c:	0801724c 	.word	0x0801724c
 8001b80:	0801725c 	.word	0x0801725c
 8001b84:	0801726c 	.word	0x0801726c
 8001b88:	08017278 	.word	0x08017278
 8001b8c:	08017288 	.word	0x08017288
 8001b90:	24000000 	.word	0x24000000
 8001b94:	240002f4 	.word	0x240002f4
 8001b98:	08017298 	.word	0x08017298
 8001b9c:	080172a8 	.word	0x080172a8
 8001ba0:	24000a54 	.word	0x24000a54
 8001ba4:	240007e4 	.word	0x240007e4
 8001ba8:	080172b0 	.word	0x080172b0
 8001bac:	080172bc 	.word	0x080172bc
 8001bb0:	24000a08 	.word	0x24000a08
 8001bb4:	080172c4 	.word	0x080172c4
 8001bb8:	080172cc 	.word	0x080172cc
 8001bbc:	24000830 	.word	0x24000830
 8001bc0:	080172d4 	.word	0x080172d4
 8001bc4:	080172dc 	.word	0x080172dc
 8001bc8:	24000080 	.word	0x24000080
	}
	case 0x0D: {
		printf("Step Down\n");
 8001bcc:	483c      	ldr	r0, [pc, #240]	; (8001cc0 <HAL_UART_RxCpltCallback+0x858>)
 8001bce:	f014 fedb 	bl	8016988 <puts>
		if (step > 3) {
 8001bd2:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <HAL_UART_RxCpltCallback+0x85c>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d968      	bls.n	8001cae <HAL_UART_RxCpltCallback+0x846>
			step -= 2;
 8001bdc:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <HAL_UART_RxCpltCallback+0x85c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	3b02      	subs	r3, #2
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b37      	ldr	r3, [pc, #220]	; (8001cc4 <HAL_UART_RxCpltCallback+0x85c>)
 8001be8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001bea:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_UART_RxCpltCallback+0x85c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <HAL_UART_RxCpltCallback+0x860>)
 8001bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4833      	ldr	r0, [pc, #204]	; (8001ccc <HAL_UART_RxCpltCallback+0x864>)
 8001bfe:	f004 f930 	bl	8005e62 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001c02:	2100      	movs	r1, #0
 8001c04:	4831      	ldr	r0, [pc, #196]	; (8001ccc <HAL_UART_RxCpltCallback+0x864>)
 8001c06:	f003 ff71 	bl	8005aec <HAL_DAC_Start>
		}
		break;
 8001c0a:	e050      	b.n	8001cae <HAL_UART_RxCpltCallback+0x846>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001c0c:	4830      	ldr	r0, [pc, #192]	; (8001cd0 <HAL_UART_RxCpltCallback+0x868>)
 8001c0e:	f014 febb 	bl	8016988 <puts>
		if (cadence <= 50000) {
 8001c12:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d849      	bhi.n	8001cb2 <HAL_UART_RxCpltCallback+0x84a>
			cadence *= 2;
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4a2b      	ldr	r2, [pc, #172]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c26:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001c32:	e03e      	b.n	8001cb2 <HAL_UART_RxCpltCallback+0x84a>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001c34:	4828      	ldr	r0, [pc, #160]	; (8001cd8 <HAL_UART_RxCpltCallback+0x870>)
 8001c36:	f014 fea7 	bl	8016988 <puts>
		if (cadence >= 6250) {
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f641 0269 	movw	r2, #6249	; 0x1869
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d937      	bls.n	8001cb6 <HAL_UART_RxCpltCallback+0x84e>
			cadence /= 2;
 8001c46:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	085b      	lsrs	r3, r3, #1
 8001c4c:	4a21      	ldr	r2, [pc, #132]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c4e:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001c50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <HAL_UART_RxCpltCallback+0x86c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001c5a:	e02c      	b.n	8001cb6 <HAL_UART_RxCpltCallback+0x84e>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001c5c:	481f      	ldr	r0, [pc, #124]	; (8001cdc <HAL_UART_RxCpltCallback+0x874>)
 8001c5e:	f014 fe93 	bl	8016988 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001c62:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_UART_RxCpltCallback+0x878>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2102      	movs	r1, #2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f011 fad5 	bl	8013218 <osEventFlagsSet>
		break;
 8001c6e:	e023      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001c70:	481c      	ldr	r0, [pc, #112]	; (8001ce4 <HAL_UART_RxCpltCallback+0x87c>)
 8001c72:	f014 fe89 	bl	8016988 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_UART_RxCpltCallback+0x878>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f011 facb 	bl	8013218 <osEventFlagsSet>
		break;
 8001c82:	e019      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001c84:	4818      	ldr	r0, [pc, #96]	; (8001ce8 <HAL_UART_RxCpltCallback+0x880>)
 8001c86:	f014 fe7f 	bl	8016988 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_UART_RxCpltCallback+0x878>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2108      	movs	r1, #8
 8001c90:	4618      	mov	r0, r3
 8001c92:	f011 fac1 	bl	8013218 <osEventFlagsSet>
		break;
 8001c96:	e00f      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	}
	case 0xAF: {
		sync();
 8001c98:	f000 f964 	bl	8001f64 <sync>
		break;
 8001c9c:	e00c      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
	case 0xCF: {
		// TODO: set a flag to start idle mode
		break;
	}
	default: {
		printf("Unknown Command\n");
 8001c9e:	4813      	ldr	r0, [pc, #76]	; (8001cec <HAL_UART_RxCpltCallback+0x884>)
 8001ca0:	f014 fe72 	bl	8016988 <puts>
		break;
 8001ca4:	e008      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001ca6:	bf00      	nop
 8001ca8:	e006      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001caa:	bf00      	nop
 8001cac:	e004      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001cae:	bf00      	nop
 8001cb0:	e002      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001cb2:	bf00      	nop
 8001cb4:	e000      	b.n	8001cb8 <HAL_UART_RxCpltCallback+0x850>
		break;
 8001cb6:	bf00      	nop
	}
	}
}
 8001cb8:	bf00      	nop
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	080172e4 	.word	0x080172e4
 8001cc4:	24000080 	.word	0x24000080
 8001cc8:	24000000 	.word	0x24000000
 8001ccc:	240002f4 	.word	0x240002f4
 8001cd0:	080172f0 	.word	0x080172f0
 8001cd4:	24000084 	.word	0x24000084
 8001cd8:	080172fc 	.word	0x080172fc
 8001cdc:	08017308 	.word	0x08017308
 8001ce0:	240007e8 	.word	0x240007e8
 8001ce4:	08017318 	.word	0x08017318
 8001ce8:	08017324 	.word	0x08017324
 8001cec:	08017330 	.word	0x08017330

08001cf0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <HAL_UART_TxCpltCallback+0x1c>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	24000088 	.word	0x24000088

08001d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d14:	f002 f956 	bl	8003fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d18:	f000 f826 	bl	8001d68 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d1c:	f000 f8a4 	bl	8001e68 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d20:	f7ff fa36 	bl	8001190 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d24:	f7fe ffe0 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001d28:	f001 fbde 	bl	80034e8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001d2c:	f001 fda4 	bl	8003878 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001d30:	f7ff faa8 	bl	8001284 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001d34:	f000 ff30 	bl	8002b98 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001d38:	f001 fb60 	bl	80033fc <MX_TIM2_Init>
  MX_TIM1_Init();
 8001d3c:	f001 fab0 	bl	80032a0 <MX_TIM1_Init>
  MX_ADC3_Init();
 8001d40:	f7fe fd72 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001d44:	f7fe fc4e 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001d48:	f7fe ff1a 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001d4c:	f000 fecc 	bl	8002ae8 <MX_SPI1_Init>
  MX_RTC_Init();
 8001d50:	f000 fcb0 	bl	80026b4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001d54:	f000 f8b8 	bl	8001ec8 <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001d58:	f011 f908 	bl	8012f6c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001d5c:	f7ff f80a 	bl	8000d74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d60:	f011 f928 	bl	8012fb4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001d64:	e7fe      	b.n	8001d64 <main+0x54>
	...

08001d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b09c      	sub	sp, #112	; 0x70
 8001d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d72:	224c      	movs	r2, #76	; 0x4c
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f014 fcb0 	bl	80166dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2220      	movs	r2, #32
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f014 fcaa 	bl	80166dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001d88:	2002      	movs	r0, #2
 8001d8a:	f008 f8c9 	bl	8009f20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b33      	ldr	r3, [pc, #204]	; (8001e60 <SystemClock_Config+0xf8>)
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	4a32      	ldr	r2, [pc, #200]	; (8001e60 <SystemClock_Config+0xf8>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001d9e:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <SystemClock_Config+0xf8>)
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <SystemClock_Config+0xfc>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001db0:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <SystemClock_Config+0xfc>)
 8001db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <SystemClock_Config+0xfc>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001dc4:	bf00      	nop
 8001dc6:	4b27      	ldr	r3, [pc, #156]	; (8001e64 <SystemClock_Config+0xfc>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd2:	d1f8      	bne.n	8001dc6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001dde:	2309      	movs	r3, #9
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001de2:	2340      	movs	r3, #64	; 0x40
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001de6:	2302      	movs	r3, #2
 8001de8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dea:	2302      	movs	r3, #2
 8001dec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001dee:	2304      	movs	r3, #4
 8001df0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001df2:	2320      	movs	r3, #32
 8001df4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001df6:	2304      	movs	r3, #4
 8001df8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001e02:	2308      	movs	r3, #8
 8001e04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e12:	4618      	mov	r0, r3
 8001e14:	f008 f8be 	bl	8009f94 <HAL_RCC_OscConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001e1e:	f000 f94b 	bl	80020b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e22:	233f      	movs	r3, #63	; 0x3f
 8001e24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e26:	2303      	movs	r3, #3
 8001e28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2101      	movs	r1, #1
 8001e46:	4618      	mov	r0, r3
 8001e48:	f008 fcfe 	bl	800a848 <HAL_RCC_ClockConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001e52:	f000 f931 	bl	80020b8 <Error_Handler>
  }
}
 8001e56:	bf00      	nop
 8001e58:	3770      	adds	r7, #112	; 0x70
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	58000400 	.word	0x58000400
 8001e64:	58024800 	.word	0x58024800

08001e68 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b0b0      	sub	sp, #192	; 0xc0
 8001e6c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e6e:	463b      	mov	r3, r7
 8001e70:	22c0      	movs	r2, #192	; 0xc0
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f014 fc31 	bl	80166dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001e86:	2304      	movs	r3, #4
 8001e88:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001e8e:	2308      	movs	r3, #8
 8001e90:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001e92:	2304      	movs	r3, #4
 8001e94:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001e96:	2302      	movs	r3, #2
 8001e98:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eac:	463b      	mov	r3, r7
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f009 f898 	bl	800afe4 <HAL_RCCEx_PeriphCLKConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001eba:	f000 f8fd 	bl	80020b8 <Error_Handler>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	37c0      	adds	r7, #192	; 0xc0
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f011 f964 	bl	801319a <osEventFlagsNew>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <system_setup+0x84>)
 8001ed6:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <system_setup+0x84>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d100      	bne.n	8001ee2 <system_setup+0x1a>
        while (1);
 8001ee0:	e7fe      	b.n	8001ee0 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f011 f959 	bl	801319a <osEventFlagsNew>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <system_setup+0x88>)
 8001eec:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <system_setup+0x88>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d100      	bne.n	8001ef8 <system_setup+0x30>
        while (1);
 8001ef6:	e7fe      	b.n	8001ef6 <system_setup+0x2e>
    }

	// ---- 2 ---- //
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_SIZE, sizeof(packet_t), NULL);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2108      	movs	r1, #8
 8001efc:	2080      	movs	r0, #128	; 0x80
 8001efe:	f011 fa35 	bl	801336c <osMessageQueueNew>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4a13      	ldr	r2, [pc, #76]	; (8001f54 <system_setup+0x8c>)
 8001f06:	6013      	str	r3, [r2, #0]
	if (mid_MsgQueue == NULL) {
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <system_setup+0x8c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d100      	bne.n	8001f12 <system_setup+0x4a>
		while (1);
 8001f10:	e7fe      	b.n	8001f10 <system_setup+0x48>
	}

	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 8001f12:	f001 fd9f 	bl	8003a54 <voltage_monitor_init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d100      	bne.n	8001f1e <system_setup+0x56>
		while (1);
 8001f1c:	e7fe      	b.n	8001f1c <system_setup+0x54>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001f1e:	2100      	movs	r1, #0
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <system_setup+0x90>)
 8001f22:	f00c fd9f 	bl	800ea64 <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 8001f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f2a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 8001f30:	f000 fc52 	bl	80027d8 <init_adc_dma>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d100      	bne.n	8001f3c <system_setup+0x74>
		while (1);
 8001f3a:	e7fe      	b.n	8001f3a <system_setup+0x72>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4907      	ldr	r1, [pc, #28]	; (8001f5c <system_setup+0x94>)
 8001f40:	4807      	ldr	r0, [pc, #28]	; (8001f60 <system_setup+0x98>)
 8001f42:	f00e fa6f 	bl	8010424 <HAL_UART_Receive_IT>

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	240007e4 	.word	0x240007e4
 8001f50:	240007e8 	.word	0x240007e8
 8001f54:	240007ec 	.word	0x240007ec
 8001f58:	24000aa0 	.word	0x24000aa0
 8001f5c:	240007f0 	.word	0x240007f0
 8001f60:	24000aec 	.word	0x24000aec

08001f64 <sync>:

void sync() {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
	send_ACK();
 8001f6a:	f000 f81f 	bl	8001fac <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8001f6e:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <sync+0x40>)
 8001f70:	f00e fb24 	bl	80105bc <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8001f74:	2364      	movs	r3, #100	; 0x64
 8001f76:	2209      	movs	r2, #9
 8001f78:	490b      	ldr	r1, [pc, #44]	; (8001fa8 <sync+0x44>)
 8001f7a:	480a      	ldr	r0, [pc, #40]	; (8001fa4 <sync+0x40>)
 8001f7c:	f00e f98a 	bl	8010294 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <sync+0x44>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	2bff      	cmp	r3, #255	; 0xff
 8001f8a:	d1f3      	bne.n	8001f74 <sync+0x10>

	//calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4906      	ldr	r1, [pc, #24]	; (8001fa8 <sync+0x44>)
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <sync+0x40>)
 8001f92:	f00e fa47 	bl	8010424 <HAL_UART_Receive_IT>

	send_ACK();
 8001f96:	f000 f809 	bl	8001fac <send_ACK>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	24000aec 	.word	0x24000aec
 8001fa8:	240007f0 	.word	0x240007f0

08001fac <send_ACK>:

void send_ACK() {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <send_ACK+0x1c>)
 8001fb2:	22ff      	movs	r2, #255	; 0xff
 8001fb4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8001fb6:	2364      	movs	r3, #100	; 0x64
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4903      	ldr	r1, [pc, #12]	; (8001fc8 <send_ACK+0x1c>)
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <send_ACK+0x20>)
 8001fbe:	f00e f8db 	bl	8010178 <HAL_UART_Transmit>
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	24000838 	.word	0x24000838
 8001fcc:	24000aec 	.word	0x24000aec

08001fd0 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8001fd6:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <get_current_step+0xc0>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d04a      	beq.n	800207c <get_current_step+0xac>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fec:	da48      	bge.n	8002080 <get_current_step+0xb0>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f640 628b 	movw	r2, #3723	; 0xe8b
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d03f      	beq.n	8002078 <get_current_step+0xa8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f640 628b 	movw	r2, #3723	; 0xe8b
 8001ffe:	4293      	cmp	r3, r2
 8002000:	dc3e      	bgt.n	8002080 <get_current_step+0xb0>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f640 421f 	movw	r2, #3103	; 0xc1f
 8002008:	4293      	cmp	r3, r2
 800200a:	d033      	beq.n	8002074 <get_current_step+0xa4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8002012:	da35      	bge.n	8002080 <get_current_step+0xb0>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f640 12b2 	movw	r2, #2482	; 0x9b2
 800201a:	4293      	cmp	r3, r2
 800201c:	d028      	beq.n	8002070 <get_current_step+0xa0>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8002024:	4293      	cmp	r3, r2
 8002026:	dc2b      	bgt.n	8002080 <get_current_step+0xb0>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f240 7245 	movw	r2, #1861	; 0x745
 800202e:	4293      	cmp	r3, r2
 8002030:	d01c      	beq.n	800206c <get_current_step+0x9c>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f240 7245 	movw	r2, #1861	; 0x745
 8002038:	4293      	cmp	r3, r2
 800203a:	dc21      	bgt.n	8002080 <get_current_step+0xb0>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002042:	4293      	cmp	r3, r2
 8002044:	d010      	beq.n	8002068 <get_current_step+0x98>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f240 42d9 	movw	r2, #1241	; 0x4d9
 800204c:	4293      	cmp	r3, r2
 800204e:	dc17      	bgt.n	8002080 <get_current_step+0xb0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d004      	beq.n	8002060 <get_current_step+0x90>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 800205c:	d002      	beq.n	8002064 <get_current_step+0x94>
 800205e:	e00f      	b.n	8002080 <get_current_step+0xb0>
	case 0:
		return 0;
 8002060:	2300      	movs	r3, #0
 8002062:	e00e      	b.n	8002082 <get_current_step+0xb2>
	case 620:
		return 1;
 8002064:	2301      	movs	r3, #1
 8002066:	e00c      	b.n	8002082 <get_current_step+0xb2>
	case 1241:
		return 2;
 8002068:	2302      	movs	r3, #2
 800206a:	e00a      	b.n	8002082 <get_current_step+0xb2>
	case 1861:
		return 3;
 800206c:	2303      	movs	r3, #3
 800206e:	e008      	b.n	8002082 <get_current_step+0xb2>
	case 2482:
		return 4;
 8002070:	2304      	movs	r3, #4
 8002072:	e006      	b.n	8002082 <get_current_step+0xb2>
	case 3103:
		return 5;
 8002074:	2305      	movs	r3, #5
 8002076:	e004      	b.n	8002082 <get_current_step+0xb2>
	case 3723:
		return 6;
 8002078:	2306      	movs	r3, #6
 800207a:	e002      	b.n	8002082 <get_current_step+0xb2>
	case 4095:
		return 7;
 800207c:	2307      	movs	r3, #7
 800207e:	e000      	b.n	8002082 <get_current_step+0xb2>
	default:
		return -1;
 8002080:	23ff      	movs	r3, #255	; 0xff
	}
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40007400 	.word	0x40007400

08002094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020a6:	f001 ffc9 	bl	800403c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40001000 	.word	0x40001000

080020b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020bc:	b672      	cpsid	i
}
 80020be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80020c0:	e7fe      	b.n	80020c0 <Error_Handler+0x8>

080020c2 <packetize>:

uint16_t pmt_seq = 0;
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;

packet_t packetize(const uint8_t *data, uint16_t size) {
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	4613      	mov	r3, r2
 80020ce:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f014 fae4 	bl	80166a0 <malloc>
 80020d8:	4603      	mov	r3, r0
 80020da:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	88fa      	ldrh	r2, [r7, #6]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f014 faec 	bl	80166c0 <memcpy>
	packet.size = size;
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	82bb      	strh	r3, [r7, #20]
	return packet;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	461a      	mov	r2, r3
 80020f0:	f107 0310 	add.w	r3, r7, #16
 80020f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020f8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <create_pmt_packet>:

void create_pmt_packet() {
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 800210a:	bf00      	nop
 800210c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002110:	4836      	ldr	r0, [pc, #216]	; (80021ec <create_pmt_packet+0xe8>)
 8002112:	f007 f8c7 	bl	80092a4 <HAL_GPIO_ReadPin>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f7      	bne.n	800210c <create_pmt_packet+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 800211c:	200a      	movs	r0, #10
 800211e:	f014 fabf 	bl	80166a0 <malloc>
 8002122:	4603      	mov	r3, r0
 8002124:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002126:	2002      	movs	r0, #2
 8002128:	f014 faba 	bl	80166a0 <malloc>
 800212c:	4603      	mov	r3, r0
 800212e:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002130:	2004      	movs	r0, #4
 8002132:	f014 fab5 	bl	80166a0 <malloc>
 8002136:	4603      	mov	r3, r0
 8002138:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f001 fb02 	bl	8003744 <get_uptime>

	sample_pmt_spi(pmt_spi);
 8002140:	6938      	ldr	r0, [r7, #16]
 8002142:	f000 fb89 	bl	8002858 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	22bb      	movs	r2, #187	; 0xbb
 800214a:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3301      	adds	r3, #1
 8002150:	22bb      	movs	r2, #187	; 0xbb
 8002152:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002154:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <create_pmt_packet+0xec>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	b29a      	uxth	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	3302      	adds	r3, #2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <create_pmt_packet+0xec>)
 8002166:	881a      	ldrh	r2, [r3, #0]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3303      	adds	r3, #3
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3304      	adds	r3, #4
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	7812      	ldrb	r2, [r2, #0]
 8002178:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3305      	adds	r3, #5
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	7852      	ldrb	r2, [r2, #1]
 8002182:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3306      	adds	r3, #6
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	7812      	ldrb	r2, [r2, #0]
 800218c:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3307      	adds	r3, #7
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	7852      	ldrb	r2, [r2, #1]
 8002196:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3308      	adds	r3, #8
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	7892      	ldrb	r2, [r2, #2]
 80021a0:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3309      	adds	r3, #9
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	78d2      	ldrb	r2, [r2, #3]
 80021aa:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = packetize(buffer, PMT_DATA_SIZE);
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	220a      	movs	r2, #10
 80021b0:	6979      	ldr	r1, [r7, #20]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff85 	bl	80020c2 <packetize>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <create_pmt_packet+0xf0>)
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	1d39      	adds	r1, r7, #4
 80021be:	2300      	movs	r3, #0
 80021c0:	2200      	movs	r2, #0
 80021c2:	f011 f947 	bl	8013454 <osMessageQueuePut>
	pmt_seq++;
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <create_pmt_packet+0xec>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	3301      	adds	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <create_pmt_packet+0xec>)
 80021d0:	801a      	strh	r2, [r3, #0]
	free(buffer);
 80021d2:	6978      	ldr	r0, [r7, #20]
 80021d4:	f014 fa6c 	bl	80166b0 <free>
	free(pmt_spi);
 80021d8:	6938      	ldr	r0, [r7, #16]
 80021da:	f014 fa69 	bl	80166b0 <free>
	free(uptime);
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f014 fa66 	bl	80166b0 <free>
}
 80021e4:	bf00      	nop
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	58020000 	.word	0x58020000
 80021f0:	2400083a 	.word	0x2400083a
 80021f4:	240007ec 	.word	0x240007ec

080021f8 <create_erpa_packet>:


void create_erpa_packet() {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80021fe:	bf00      	nop
 8002200:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002204:	484a      	ldr	r0, [pc, #296]	; (8002330 <create_erpa_packet+0x138>)
 8002206:	f007 f84d 	bl	80092a4 <HAL_GPIO_ReadPin>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1f7      	bne.n	8002200 <create_erpa_packet+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8002210:	200e      	movs	r0, #14
 8002212:	f014 fa45 	bl	80166a0 <malloc>
 8002216:	4603      	mov	r3, r0
 8002218:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 800221a:	2002      	movs	r0, #2
 800221c:	f014 fa40 	bl	80166a0 <malloc>
 8002220:	4603      	mov	r3, r0
 8002222:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8002224:	2002      	movs	r0, #2
 8002226:	f014 fa3b 	bl	80166a0 <malloc>
 800222a:	4603      	mov	r3, r0
 800222c:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800222e:	2004      	movs	r0, #4
 8002230:	f014 fa36 	bl	80166a0 <malloc>
 8002234:	4603      	mov	r3, r0
 8002236:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 8002238:	23ff      	movs	r3, #255	; 0xff
 800223a:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 800223c:	6938      	ldr	r0, [r7, #16]
 800223e:	f001 fa81 	bl	8003744 <get_uptime>
	sweep_step = get_current_step();
 8002242:	f7ff fec5 	bl	8001fd0 <get_current_step>
 8002246:	4603      	mov	r3, r0
 8002248:	73fb      	strb	r3, [r7, #15]

	sample_erpa_spi(erpa_spi);
 800224a:	69b8      	ldr	r0, [r7, #24]
 800224c:	f000 fb28 	bl	80028a0 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8002250:	6978      	ldr	r0, [r7, #20]
 8002252:	f000 fb49 	bl	80028e8 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	22aa      	movs	r2, #170	; 0xaa
 800225a:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	3301      	adds	r3, #1
 8002260:	22aa      	movs	r2, #170	; 0xaa
 8002262:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002264:	4b33      	ldr	r3, [pc, #204]	; (8002334 <create_erpa_packet+0x13c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	0c1a      	lsrs	r2, r3, #16
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3302      	adds	r3, #2
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8002272:	4b30      	ldr	r3, [pc, #192]	; (8002334 <create_erpa_packet+0x13c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0a1a      	lsrs	r2, r3, #8
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	3303      	adds	r3, #3
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 8002280:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <create_erpa_packet+0x13c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	3304      	adds	r3, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	3305      	adds	r3, #5
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	b29a      	uxth	r2, r3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	3306      	adds	r3, #6
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	881a      	ldrh	r2, [r3, #0]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	3307      	adds	r3, #7
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	3308      	adds	r3, #8
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	7812      	ldrb	r2, [r2, #0]
 80022b8:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3309      	adds	r3, #9
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	7852      	ldrb	r2, [r2, #1]
 80022c2:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	330a      	adds	r3, #10
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	7812      	ldrb	r2, [r2, #0]
 80022cc:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	330b      	adds	r3, #11
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	7852      	ldrb	r2, [r2, #1]
 80022d6:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	330c      	adds	r3, #12
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	7892      	ldrb	r2, [r2, #2]
 80022e0:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	330d      	adds	r3, #13
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	78d2      	ldrb	r2, [r2, #3]
 80022ea:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = packetize(buffer, ERPA_DATA_SIZE);
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	220e      	movs	r2, #14
 80022f0:	69f9      	ldr	r1, [r7, #28]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff fee5 	bl	80020c2 <packetize>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <create_erpa_packet+0x140>)
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	1d39      	adds	r1, r7, #4
 80022fe:	2300      	movs	r3, #0
 8002300:	2200      	movs	r2, #0
 8002302:	f011 f8a7 	bl	8013454 <osMessageQueuePut>
	erpa_seq++;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <create_erpa_packet+0x13c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3301      	adds	r3, #1
 800230c:	4a09      	ldr	r2, [pc, #36]	; (8002334 <create_erpa_packet+0x13c>)
 800230e:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002310:	69f8      	ldr	r0, [r7, #28]
 8002312:	f014 f9cd 	bl	80166b0 <free>
	free(erpa_spi);
 8002316:	69b8      	ldr	r0, [r7, #24]
 8002318:	f014 f9ca 	bl	80166b0 <free>
	free(erpa_adc);
 800231c:	6978      	ldr	r0, [r7, #20]
 800231e:	f014 f9c7 	bl	80166b0 <free>
	free(uptime);
 8002322:	6938      	ldr	r0, [r7, #16]
 8002324:	f014 f9c4 	bl	80166b0 <free>
}
 8002328:	bf00      	nop
 800232a:	3720      	adds	r7, #32
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	58020400 	.word	0x58020400
 8002334:	2400083c 	.word	0x2400083c
 8002338:	240007ec 	.word	0x240007ec

0800233c <create_hk_packet>:


void create_hk_packet() {
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 8002342:	2036      	movs	r0, #54	; 0x36
 8002344:	f014 f9ac 	bl	80166a0 <malloc>
 8002348:	4603      	mov	r3, r0
 800234a:	617b      	str	r3, [r7, #20]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 800234c:	200a      	movs	r0, #10
 800234e:	f014 f9a7 	bl	80166a0 <malloc>
 8002352:	4603      	mov	r3, r0
 8002354:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002356:	2004      	movs	r0, #4
 8002358:	f014 f9a2 	bl	80166a0 <malloc>
 800235c:	4603      	mov	r3, r0
 800235e:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f001 f9ef 	bl	8003744 <get_uptime>
	get_timestamp(timestamp);
 8002366:	6938      	ldr	r0, [r7, #16]
 8002368:	f001 fa36 	bl	80037d8 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 800236c:	f001 fd50 	bl	8003e10 <get_rail_monitor>
 8002370:	60b8      	str	r0, [r7, #8]


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	22cc      	movs	r2, #204	; 0xcc
 8002376:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	3301      	adds	r3, #1
 800237c:	22cc      	movs	r2, #204	; 0xcc
 800237e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8002380:	4ba1      	ldr	r3, [pc, #644]	; (8002608 <create_hk_packet+0x2cc>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	0a1b      	lsrs	r3, r3, #8
 8002386:	b29a      	uxth	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3302      	adds	r3, #2
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8002390:	4b9d      	ldr	r3, [pc, #628]	; (8002608 <create_hk_packet+0x2cc>)
 8002392:	881a      	ldrh	r2, [r3, #0]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	3303      	adds	r3, #3
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	889b      	ldrh	r3, [r3, #4]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3304      	adds	r3, #4
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	889a      	ldrh	r2, [r3, #4]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	3305      	adds	r3, #5
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	330a      	adds	r3, #10
 80023bc:	889b      	ldrh	r3, [r3, #4]
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	3306      	adds	r3, #6
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	330a      	adds	r3, #10
 80023ce:	889a      	ldrh	r2, [r3, #4]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3307      	adds	r3, #7
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	3314      	adds	r3, #20
 80023dc:	889b      	ldrh	r3, [r3, #4]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	3308      	adds	r3, #8
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	3314      	adds	r3, #20
 80023ee:	889a      	ldrh	r2, [r3, #4]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3309      	adds	r3, #9
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	331e      	adds	r3, #30
 80023fc:	889b      	ldrh	r3, [r3, #4]
 80023fe:	0a1b      	lsrs	r3, r3, #8
 8002400:	b29a      	uxth	r2, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	330a      	adds	r3, #10
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	331e      	adds	r3, #30
 800240e:	889a      	ldrh	r2, [r3, #4]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	330b      	adds	r3, #11
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	3328      	adds	r3, #40	; 0x28
 800241c:	889b      	ldrh	r3, [r3, #4]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	b29a      	uxth	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	330c      	adds	r3, #12
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	701a      	strb	r2, [r3, #0]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	3328      	adds	r3, #40	; 0x28
 800242e:	889a      	ldrh	r2, [r3, #4]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	330d      	adds	r3, #13
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	3332      	adds	r3, #50	; 0x32
 800243c:	889b      	ldrh	r3, [r3, #4]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	b29a      	uxth	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	330e      	adds	r3, #14
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	701a      	strb	r2, [r3, #0]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	3332      	adds	r3, #50	; 0x32
 800244e:	889a      	ldrh	r2, [r3, #4]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	330f      	adds	r3, #15
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	333c      	adds	r3, #60	; 0x3c
 800245c:	889b      	ldrh	r3, [r3, #4]
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	b29a      	uxth	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3310      	adds	r3, #16
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	333c      	adds	r3, #60	; 0x3c
 800246e:	889a      	ldrh	r2, [r3, #4]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3311      	adds	r3, #17
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	3346      	adds	r3, #70	; 0x46
 800247c:	889b      	ldrh	r3, [r3, #4]
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	b29a      	uxth	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3312      	adds	r3, #18
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	3346      	adds	r3, #70	; 0x46
 800248e:	889a      	ldrh	r2, [r3, #4]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3313      	adds	r3, #19
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	3350      	adds	r3, #80	; 0x50
 800249c:	889b      	ldrh	r3, [r3, #4]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3314      	adds	r3, #20
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	3350      	adds	r3, #80	; 0x50
 80024ae:	889a      	ldrh	r2, [r3, #4]
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3315      	adds	r3, #21
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	335a      	adds	r3, #90	; 0x5a
 80024bc:	889b      	ldrh	r3, [r3, #4]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3316      	adds	r3, #22
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	335a      	adds	r3, #90	; 0x5a
 80024ce:	889a      	ldrh	r2, [r3, #4]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3317      	adds	r3, #23
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	3364      	adds	r3, #100	; 0x64
 80024dc:	889b      	ldrh	r3, [r3, #4]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3318      	adds	r3, #24
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3364      	adds	r3, #100	; 0x64
 80024ee:	889a      	ldrh	r2, [r3, #4]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3319      	adds	r3, #25
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	336e      	adds	r3, #110	; 0x6e
 80024fc:	889b      	ldrh	r3, [r3, #4]
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	b29a      	uxth	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	331a      	adds	r3, #26
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	336e      	adds	r3, #110	; 0x6e
 800250e:	889a      	ldrh	r2, [r3, #4]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	331b      	adds	r3, #27
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	3378      	adds	r3, #120	; 0x78
 800251c:	889b      	ldrh	r3, [r3, #4]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	b29a      	uxth	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	331c      	adds	r3, #28
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3378      	adds	r3, #120	; 0x78
 800252e:	889a      	ldrh	r2, [r3, #4]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	331d      	adds	r3, #29
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	3382      	adds	r3, #130	; 0x82
 800253c:	889b      	ldrh	r3, [r3, #4]
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	b29a      	uxth	r2, r3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	331e      	adds	r3, #30
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	701a      	strb	r2, [r3, #0]
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	3382      	adds	r3, #130	; 0x82
 800254e:	889a      	ldrh	r2, [r3, #4]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	331f      	adds	r3, #31
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	338c      	adds	r3, #140	; 0x8c
 800255c:	889b      	ldrh	r3, [r3, #4]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	b29a      	uxth	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	3320      	adds	r3, #32
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	338c      	adds	r3, #140	; 0x8c
 800256e:	889a      	ldrh	r2, [r3, #4]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3321      	adds	r3, #33	; 0x21
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	3396      	adds	r3, #150	; 0x96
 800257c:	889b      	ldrh	r3, [r3, #4]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	b29a      	uxth	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3322      	adds	r3, #34	; 0x22
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	3396      	adds	r3, #150	; 0x96
 800258e:	889a      	ldrh	r2, [r3, #4]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	3323      	adds	r3, #35	; 0x23
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	33a0      	adds	r3, #160	; 0xa0
 800259c:	889b      	ldrh	r3, [r3, #4]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3324      	adds	r3, #36	; 0x24
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	33a0      	adds	r3, #160	; 0xa0
 80025ae:	889a      	ldrh	r2, [r3, #4]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3325      	adds	r3, #37	; 0x25
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	33aa      	adds	r3, #170	; 0xaa
 80025bc:	889b      	ldrh	r3, [r3, #4]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	3326      	adds	r3, #38	; 0x26
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	33aa      	adds	r3, #170	; 0xaa
 80025ce:	889a      	ldrh	r2, [r3, #4]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3327      	adds	r3, #39	; 0x27
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[0];
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3328      	adds	r3, #40	; 0x28
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	7812      	ldrb	r2, [r2, #0]
 80025e0:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3329      	adds	r3, #41	; 0x29
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	7852      	ldrb	r2, [r2, #1]
 80025ea:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	332a      	adds	r3, #42	; 0x2a
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	7892      	ldrb	r2, [r2, #2]
 80025f4:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	332b      	adds	r3, #43	; 0x2b
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	78d2      	ldrb	r2, [r2, #3]
 80025fe:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	332c      	adds	r3, #44	; 0x2c
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	e001      	b.n	800260c <create_hk_packet+0x2d0>
 8002608:	24000840 	.word	0x24000840
 800260c:	7912      	ldrb	r2, [r2, #4]
 800260e:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	332d      	adds	r3, #45	; 0x2d
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	7952      	ldrb	r2, [r2, #5]
 8002618:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	332e      	adds	r3, #46	; 0x2e
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	7992      	ldrb	r2, [r2, #6]
 8002622:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	332f      	adds	r3, #47	; 0x2f
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	79d2      	ldrb	r2, [r2, #7]
 800262c:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3330      	adds	r3, #48	; 0x30
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	7a12      	ldrb	r2, [r2, #8]
 8002636:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3331      	adds	r3, #49	; 0x31
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	7a52      	ldrb	r2, [r2, #9]
 8002640:	701a      	strb	r2, [r3, #0]
	buffer[50] = uptime[0];
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3332      	adds	r3, #50	; 0x32
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	7812      	ldrb	r2, [r2, #0]
 800264a:	701a      	strb	r2, [r3, #0]
	buffer[51] = uptime[1];
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3333      	adds	r3, #51	; 0x33
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	7852      	ldrb	r2, [r2, #1]
 8002654:	701a      	strb	r2, [r3, #0]
	buffer[52] = uptime[2];
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	3334      	adds	r3, #52	; 0x34
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	7892      	ldrb	r2, [r2, #2]
 800265e:	701a      	strb	r2, [r3, #0]
	buffer[53] = uptime[3];
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3335      	adds	r3, #53	; 0x35
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	78d2      	ldrb	r2, [r2, #3]
 8002668:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = packetize(buffer, HK_DATA_SIZE);
 800266a:	463b      	mov	r3, r7
 800266c:	2236      	movs	r2, #54	; 0x36
 800266e:	6979      	ldr	r1, [r7, #20]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fd26 	bl	80020c2 <packetize>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002676:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <create_hk_packet+0x370>)
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	4639      	mov	r1, r7
 800267c:	2300      	movs	r3, #0
 800267e:	2200      	movs	r2, #0
 8002680:	f010 fee8 	bl	8013454 <osMessageQueuePut>
	hk_seq++;
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <create_hk_packet+0x374>)
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <create_hk_packet+0x374>)
 800268e:	801a      	strh	r2, [r3, #0]
	free(buffer);
 8002690:	6978      	ldr	r0, [r7, #20]
 8002692:	f014 f80d 	bl	80166b0 <free>
	free(timestamp);
 8002696:	6938      	ldr	r0, [r7, #16]
 8002698:	f014 f80a 	bl	80166b0 <free>
	free(uptime);
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f014 f807 	bl	80166b0 <free>
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	240007ec 	.word	0x240007ec
 80026b0:	24000840 	.word	0x24000840

080026b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80026c8:	2300      	movs	r3, #0
 80026ca:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026cc:	4b26      	ldr	r3, [pc, #152]	; (8002768 <MX_RTC_Init+0xb4>)
 80026ce:	4a27      	ldr	r2, [pc, #156]	; (800276c <MX_RTC_Init+0xb8>)
 80026d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026d2:	4b25      	ldr	r3, [pc, #148]	; (8002768 <MX_RTC_Init+0xb4>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <MX_RTC_Init+0xb4>)
 80026da:	2263      	movs	r2, #99	; 0x63
 80026dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <MX_RTC_Init+0xb4>)
 80026e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80026e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <MX_RTC_Init+0xb4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <MX_RTC_Init+0xb4>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <MX_RTC_Init+0xb4>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <MX_RTC_Init+0xb4>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026fe:	481a      	ldr	r0, [pc, #104]	; (8002768 <MX_RTC_Init+0xb4>)
 8002700:	f00b f96e 	bl	800d9e0 <HAL_RTC_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800270a:	f7ff fcd5 	bl	80020b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800270e:	2300      	movs	r3, #0
 8002710:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002712:	2300      	movs	r3, #0
 8002714:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002716:	2300      	movs	r3, #0
 8002718:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	2201      	movs	r2, #1
 8002726:	4619      	mov	r1, r3
 8002728:	480f      	ldr	r0, [pc, #60]	; (8002768 <MX_RTC_Init+0xb4>)
 800272a:	f00b f9db 	bl	800dae4 <HAL_RTC_SetTime>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002734:	f7ff fcc0 	bl	80020b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002738:	2301      	movs	r3, #1
 800273a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800273c:	2301      	movs	r3, #1
 800273e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002740:	2301      	movs	r3, #1
 8002742:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002744:	2300      	movs	r3, #0
 8002746:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002748:	463b      	mov	r3, r7
 800274a:	2201      	movs	r2, #1
 800274c:	4619      	mov	r1, r3
 800274e:	4806      	ldr	r0, [pc, #24]	; (8002768 <MX_RTC_Init+0xb4>)
 8002750:	f00b fac2 	bl	800dcd8 <HAL_RTC_SetDate>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800275a:	f7ff fcad 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800275e:	bf00      	nop
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	24000844 	.word	0x24000844
 800276c:	58004000 	.word	0x58004000

08002770 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b0b2      	sub	sp, #200	; 0xc8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002778:	f107 0308 	add.w	r3, r7, #8
 800277c:	22c0      	movs	r2, #192	; 0xc0
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f013 ffab 	bl	80166dc <memset>
  if(rtcHandle->Instance==RTC)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a10      	ldr	r2, [pc, #64]	; (80027cc <HAL_RTC_MspInit+0x5c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d118      	bne.n	80027c2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002790:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <HAL_RTC_MspInit+0x60>)
 800279e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a2:	f107 0308 	add.w	r3, r7, #8
 80027a6:	4618      	mov	r0, r3
 80027a8:	f008 fc1c 	bl	800afe4 <HAL_RCCEx_PeriphCLKConfig>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80027b2:	f7ff fc81 	bl	80020b8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_RTC_MspInit+0x64>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	4a06      	ldr	r2, [pc, #24]	; (80027d4 <HAL_RTC_MspInit+0x64>)
 80027bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80027c2:	bf00      	nop
 80027c4:	37c8      	adds	r7, #200	; 0xc8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	58004000 	.word	0x58004000
 80027d0:	00019300 	.word	0x00019300
 80027d4:	58024400 	.word	0x58024400

080027d8 <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80027e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80027e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027ea:	4817      	ldr	r0, [pc, #92]	; (8002848 <init_adc_dma+0x70>)
 80027ec:	f002 ff3a 	bl	8005664 <HAL_ADCEx_Calibration_Start>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80027f6:	f7ff fc5f 	bl	80020b8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80027fa:	220b      	movs	r2, #11
 80027fc:	4913      	ldr	r1, [pc, #76]	; (800284c <init_adc_dma+0x74>)
 80027fe:	4812      	ldr	r0, [pc, #72]	; (8002848 <init_adc_dma+0x70>)
 8002800:	f002 f80e 	bl	8004820 <HAL_ADC_Start_DMA>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800280a:	f7ff fc55 	bl	80020b8 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800280e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002812:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002816:	480e      	ldr	r0, [pc, #56]	; (8002850 <init_adc_dma+0x78>)
 8002818:	f002 ff24 	bl	8005664 <HAL_ADCEx_Calibration_Start>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8002822:	f7ff fc49 	bl	80020b8 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002826:	2204      	movs	r2, #4
 8002828:	490a      	ldr	r1, [pc, #40]	; (8002854 <init_adc_dma+0x7c>)
 800282a:	4809      	ldr	r0, [pc, #36]	; (8002850 <init_adc_dma+0x78>)
 800282c:	f001 fff8 	bl	8004820 <HAL_ADC_Start_DMA>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002836:	f7ff fc3f 	bl	80020b8 <Error_Handler>
	}
	status = 1;
 800283a:	2301      	movs	r3, #1
 800283c:	71fb      	strb	r3, [r7, #7]

	return status;
 800283e:	79fb      	ldrb	r3, [r7, #7]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	2400013c 	.word	0x2400013c
 800284c:	24000880 	.word	0x24000880
 8002850:	240001a0 	.word	0x240001a0
 8002854:	240008a0 	.word	0x240008a0

08002858 <sample_pmt_spi>:

void sample_pmt_spi(uint8_t *buffer) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8002860:	f107 010c 	add.w	r1, r7, #12
 8002864:	2301      	movs	r3, #1
 8002866:	2201      	movs	r2, #1
 8002868:	480c      	ldr	r0, [pc, #48]	; (800289c <sample_pmt_spi+0x44>)
 800286a:	f00b fcff 	bl	800e26c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8002872:	7b7b      	ldrb	r3, [r7, #13]
 8002874:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8002876:	4b09      	ldr	r3, [pc, #36]	; (800289c <sample_pmt_spi+0x44>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b07      	ldr	r3, [pc, #28]	; (800289c <sample_pmt_spi+0x44>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002884:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7bba      	ldrb	r2, [r7, #14]
 800288a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3301      	adds	r3, #1
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	701a      	strb	r2, [r3, #0]
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	240008a8 	.word	0x240008a8

080028a0 <sample_erpa_spi>:

void sample_erpa_spi(uint8_t *buffer) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 80028a8:	f107 010c 	add.w	r1, r7, #12
 80028ac:	2364      	movs	r3, #100	; 0x64
 80028ae:	2201      	movs	r2, #1
 80028b0:	480c      	ldr	r0, [pc, #48]	; (80028e4 <sample_erpa_spi+0x44>)
 80028b2:	f00b fcdb 	bl	800e26c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 80028b6:	2300      	movs	r3, #0
 80028b8:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 80028ba:	7b7b      	ldrb	r3, [r7, #13]
 80028bc:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <sample_erpa_spi+0x44>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <sample_erpa_spi+0x44>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028cc:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	7bba      	ldrb	r2, [r7, #14]
 80028d2:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3301      	adds	r3, #1
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	701a      	strb	r2, [r3, #0]
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	24000930 	.word	0x24000930

080028e8 <sample_erpa_adc>:

void sample_erpa_adc(uint16_t *buffer) {
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <sample_erpa_adc+0x20>)
 80028f2:	885b      	ldrh	r3, [r3, #2]
 80028f4:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	89fa      	ldrh	r2, [r7, #14]
 80028fa:	801a      	strh	r2, [r3, #0]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	24000880 	.word	0x24000880

0800290c <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8002914:	2390      	movs	r3, #144	; 0x90
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f8a2 	bl	8002a60 <poll_i2c_sensor>
 800291c:	4603      	mov	r3, r0
 800291e:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8002920:	2394      	movs	r3, #148	; 0x94
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f89c 	bl	8002a60 <poll_i2c_sensor>
 8002928:	4603      	mov	r3, r0
 800292a:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 800292c:	2392      	movs	r3, #146	; 0x92
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f896 	bl	8002a60 <poll_i2c_sensor>
 8002934:	4603      	mov	r3, r0
 8002936:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002938:	2396      	movs	r3, #150	; 0x96
 800293a:	4618      	mov	r0, r3
 800293c:	f000 f890 	bl	8002a60 <poll_i2c_sensor>
 8002940:	4603      	mov	r3, r0
 8002942:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	89fa      	ldrh	r2, [r7, #14]
 8002948:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3302      	adds	r3, #2
 800294e:	89ba      	ldrh	r2, [r7, #12]
 8002950:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3304      	adds	r3, #4
 8002956:	897a      	ldrh	r2, [r7, #10]
 8002958:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3306      	adds	r3, #6
 800295e:	893a      	ldrh	r2, [r7, #8]
 8002960:	801a      	strh	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	; 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <sample_hk_adc1+0xa0>)
 8002976:	8a9b      	ldrh	r3, [r3, #20]
 8002978:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 800297a:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <sample_hk_adc1+0xa0>)
 800297c:	8a1b      	ldrh	r3, [r3, #16]
 800297e:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <sample_hk_adc1+0xa0>)
 8002982:	899b      	ldrh	r3, [r3, #12]
 8002984:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002986:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <sample_hk_adc1+0xa0>)
 8002988:	8a5b      	ldrh	r3, [r3, #18]
 800298a:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 800298c:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <sample_hk_adc1+0xa0>)
 800298e:	889b      	ldrh	r3, [r3, #4]
 8002990:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8002992:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <sample_hk_adc1+0xa0>)
 8002994:	88db      	ldrh	r3, [r3, #6]
 8002996:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002998:	4b1c      	ldr	r3, [pc, #112]	; (8002a0c <sample_hk_adc1+0xa0>)
 800299a:	89db      	ldrh	r3, [r3, #14]
 800299c:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 800299e:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <sample_hk_adc1+0xa0>)
 80029a0:	891b      	ldrh	r3, [r3, #8]
 80029a2:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <sample_hk_adc1+0xa0>)
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80029aa:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <sample_hk_adc1+0xa0>)
 80029ac:	895b      	ldrh	r3, [r3, #10]
 80029ae:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	8bfa      	ldrh	r2, [r7, #30]
 80029b4:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3302      	adds	r3, #2
 80029ba:	8bba      	ldrh	r2, [r7, #28]
 80029bc:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	8b7a      	ldrh	r2, [r7, #26]
 80029c4:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3306      	adds	r3, #6
 80029ca:	8b3a      	ldrh	r2, [r7, #24]
 80029cc:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3308      	adds	r3, #8
 80029d2:	8afa      	ldrh	r2, [r7, #22]
 80029d4:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	330a      	adds	r3, #10
 80029da:	8aba      	ldrh	r2, [r7, #20]
 80029dc:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	330c      	adds	r3, #12
 80029e2:	8a7a      	ldrh	r2, [r7, #18]
 80029e4:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	330e      	adds	r3, #14
 80029ea:	8a3a      	ldrh	r2, [r7, #16]
 80029ec:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3310      	adds	r3, #16
 80029f2:	89fa      	ldrh	r2, [r7, #14]
 80029f4:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3312      	adds	r3, #18
 80029fa:	89ba      	ldrh	r2, [r7, #12]
 80029fc:	801a      	strh	r2, [r3, #0]
}
 80029fe:	bf00      	nop
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	24000880 	.word	0x24000880

08002a10 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002a18:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <sample_hk_adc3+0x4c>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <sample_hk_adc3+0x4c>)
 8002a20:	885b      	ldrh	r3, [r3, #2]
 8002a22:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002a24:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <sample_hk_adc3+0x4c>)
 8002a26:	889b      	ldrh	r3, [r3, #4]
 8002a28:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <sample_hk_adc3+0x4c>)
 8002a2c:	88db      	ldrh	r3, [r3, #6]
 8002a2e:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	89fa      	ldrh	r2, [r7, #14]
 8002a34:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3302      	adds	r3, #2
 8002a3a:	89ba      	ldrh	r2, [r7, #12]
 8002a3c:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	897a      	ldrh	r2, [r7, #10]
 8002a44:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3306      	adds	r3, #6
 8002a4a:	893a      	ldrh	r2, [r7, #8]
 8002a4c:	801a      	strh	r2, [r3, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	240008a0 	.word	0x240008a0

08002a60 <poll_i2c_sensor>:

int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	b299      	uxth	r1, r3
 8002a72:	f107 0208 	add.w	r2, r7, #8
 8002a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	4817      	ldr	r0, [pc, #92]	; (8002adc <poll_i2c_sensor+0x7c>)
 8002a80:	f006 fcde 	bl	8009440 <HAL_I2C_Master_Transmit>
 8002a84:	4603      	mov	r3, r0
 8002a86:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8002a88:	7b7b      	ldrb	r3, [r7, #13]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8002a8e:	4814      	ldr	r0, [pc, #80]	; (8002ae0 <poll_i2c_sensor+0x80>)
 8002a90:	f013 ff7a 	bl	8016988 <puts>
 8002a94:	e01c      	b.n	8002ad0 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	b299      	uxth	r1, r3
 8002a9a:	f107 0208 	add.w	r2, r7, #8
 8002a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	480d      	ldr	r0, [pc, #52]	; (8002adc <poll_i2c_sensor+0x7c>)
 8002aa8:	f006 fde2 	bl	8009670 <HAL_I2C_Master_Receive>
 8002aac:	4603      	mov	r3, r0
 8002aae:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8002ab0:	7b7b      	ldrb	r3, [r7, #13]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8002ab6:	480b      	ldr	r0, [pc, #44]	; (8002ae4 <poll_i2c_sensor+0x84>)
 8002ab8:	f013 ff66 	bl	8016988 <puts>
 8002abc:	e008      	b.n	8002ad0 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8002abe:	7a3b      	ldrb	r3, [r7, #8]
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8002ac4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ac8:	7a7a      	ldrb	r2, [r7, #9]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	10db      	asrs	r3, r3, #3
 8002ace:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8002ad0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	24000790 	.word	0x24000790
 8002ae0:	08017340 	.word	0x08017340
 8002ae4:	08017350 	.word	0x08017350

08002ae8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002aec:	4b28      	ldr	r3, [pc, #160]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002aee:	4a29      	ldr	r2, [pc, #164]	; (8002b94 <MX_SPI1_Init+0xac>)
 8002af0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002af2:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002af4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002af8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002afa:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002afc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b00:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002b02:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b04:	220f      	movs	r2, #15
 8002b06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b0e:	4b20      	ldr	r3, [pc, #128]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b14:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b1e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002b22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b2a:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b30:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b3c:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b42:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002b4a:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b7a:	4805      	ldr	r0, [pc, #20]	; (8002b90 <MX_SPI1_Init+0xa8>)
 8002b7c:	f00b fa52 	bl	800e024 <HAL_SPI_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002b86:	f7ff fa97 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	240008a8 	.word	0x240008a8
 8002b94:	40013000 	.word	0x40013000

08002b98 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002b9c:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002b9e:	4a29      	ldr	r2, [pc, #164]	; (8002c44 <MX_SPI2_Init+0xac>)
 8002ba0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002ba2:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002ba4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002ba8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002baa:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002bac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002bb0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002bb2:	4b23      	ldr	r3, [pc, #140]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002bb4:	220f      	movs	r2, #15
 8002bb6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bbe:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002bc4:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002bc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002bce:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002bd2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bda:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bf2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002c06:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c2a:	4805      	ldr	r0, [pc, #20]	; (8002c40 <MX_SPI2_Init+0xa8>)
 8002c2c:	f00b f9fa 	bl	800e024 <HAL_SPI_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002c36:	f7ff fa3f 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	24000930 	.word	0x24000930
 8002c44:	40003800 	.word	0x40003800

08002c48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b0bc      	sub	sp, #240	; 0xf0
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c60:	f107 0318 	add.w	r3, r7, #24
 8002c64:	22c0      	movs	r2, #192	; 0xc0
 8002c66:	2100      	movs	r1, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f013 fd37 	bl	80166dc <memset>
  if(spiHandle->Instance==SPI1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a4c      	ldr	r2, [pc, #304]	; (8002da4 <HAL_SPI_MspInit+0x15c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d145      	bne.n	8002d04 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002c78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c88:	f107 0318 	add.w	r3, r7, #24
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f008 f9a9 	bl	800afe4 <HAL_RCCEx_PeriphCLKConfig>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002c98:	f7ff fa0e 	bl	80020b8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c9c:	4b42      	ldr	r3, [pc, #264]	; (8002da8 <HAL_SPI_MspInit+0x160>)
 8002c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ca2:	4a41      	ldr	r2, [pc, #260]	; (8002da8 <HAL_SPI_MspInit+0x160>)
 8002ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cac:	4b3e      	ldr	r3, [pc, #248]	; (8002da8 <HAL_SPI_MspInit+0x160>)
 8002cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cba:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <HAL_SPI_MspInit+0x160>)
 8002cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc0:	4a39      	ldr	r2, [pc, #228]	; (8002da8 <HAL_SPI_MspInit+0x160>)
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cca:	4b37      	ldr	r3, [pc, #220]	; (8002da8 <HAL_SPI_MspInit+0x160>)
 8002ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002cd8:	2318      	movs	r3, #24
 8002cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cf0:	2305      	movs	r3, #5
 8002cf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	482b      	ldr	r0, [pc, #172]	; (8002dac <HAL_SPI_MspInit+0x164>)
 8002cfe:	f006 f921 	bl	8008f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002d02:	e04a      	b.n	8002d9a <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a29      	ldr	r2, [pc, #164]	; (8002db0 <HAL_SPI_MspInit+0x168>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d145      	bne.n	8002d9a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002d0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d1e:	f107 0318 	add.w	r3, r7, #24
 8002d22:	4618      	mov	r0, r3
 8002d24:	f008 f95e 	bl	800afe4 <HAL_RCCEx_PeriphCLKConfig>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002d2e:	f7ff f9c3 	bl	80020b8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d32:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_SPI_MspInit+0x160>)
 8002d34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d38:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <HAL_SPI_MspInit+0x160>)
 8002d3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d42:	4b19      	ldr	r3, [pc, #100]	; (8002da8 <HAL_SPI_MspInit+0x160>)
 8002d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d50:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <HAL_SPI_MspInit+0x160>)
 8002d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d56:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <HAL_SPI_MspInit+0x160>)
 8002d58:	f043 0302 	orr.w	r3, r3, #2
 8002d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d60:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <HAL_SPI_MspInit+0x160>)
 8002d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002d6e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002d72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d88:	2305      	movs	r3, #5
 8002d8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d8e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d92:	4619      	mov	r1, r3
 8002d94:	4805      	ldr	r0, [pc, #20]	; (8002dac <HAL_SPI_MspInit+0x164>)
 8002d96:	f006 f8d5 	bl	8008f44 <HAL_GPIO_Init>
}
 8002d9a:	bf00      	nop
 8002d9c:	37f0      	adds	r7, #240	; 0xf0
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40013000 	.word	0x40013000
 8002da8:	58024400 	.word	0x58024400
 8002dac:	58020400 	.word	0x58020400
 8002db0:	40003800 	.word	0x40003800

08002db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_MspInit+0x38>)
 8002dbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <HAL_MspInit+0x38>)
 8002dc2:	f043 0302 	orr.w	r3, r3, #2
 8002dc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_MspInit+0x38>)
 8002dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	210f      	movs	r1, #15
 8002ddc:	f06f 0001 	mvn.w	r0, #1
 8002de0:	f002 fe3a 	bl	8005a58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	58024400 	.word	0x58024400

08002df0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b090      	sub	sp, #64	; 0x40
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b0f      	cmp	r3, #15
 8002dfc:	d827      	bhi.n	8002e4e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	2036      	movs	r0, #54	; 0x36
 8002e04:	f002 fe28 	bl	8005a58 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e08:	2036      	movs	r0, #54	; 0x36
 8002e0a:	f002 fe3f 	bl	8005a8c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002e0e:	4a29      	ldr	r2, [pc, #164]	; (8002eb4 <HAL_InitTick+0xc4>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e14:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <HAL_InitTick+0xc8>)
 8002e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e1a:	4a27      	ldr	r2, [pc, #156]	; (8002eb8 <HAL_InitTick+0xc8>)
 8002e1c:	f043 0310 	orr.w	r3, r3, #16
 8002e20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e24:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_InitTick+0xc8>)
 8002e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e32:	f107 0210 	add.w	r2, r7, #16
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f008 f88f 	bl	800af60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <HAL_InitTick+0x6a>
 8002e4c:	e001      	b.n	8002e52 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e02b      	b.n	8002eaa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e52:	f008 f859 	bl	800af08 <HAL_RCC_GetPCLK1Freq>
 8002e56:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002e58:	e004      	b.n	8002e64 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e5a:	f008 f855 	bl	800af08 <HAL_RCC_GetPCLK1Freq>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e66:	4a15      	ldr	r2, [pc, #84]	; (8002ebc <HAL_InitTick+0xcc>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	0c9b      	lsrs	r3, r3, #18
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002e74:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <HAL_InitTick+0xd4>)
 8002e76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002e7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002e80:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002e92:	480b      	ldr	r0, [pc, #44]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002e94:	f00b fd17 	bl	800e8c6 <HAL_TIM_Base_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002e9e:	4808      	ldr	r0, [pc, #32]	; (8002ec0 <HAL_InitTick+0xd0>)
 8002ea0:	f00b fd68 	bl	800e974 <HAL_TIM_Base_Start_IT>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	e000      	b.n	8002eaa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3740      	adds	r7, #64	; 0x40
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	24000094 	.word	0x24000094
 8002eb8:	58024400 	.word	0x58024400
 8002ebc:	431bde83 	.word	0x431bde83
 8002ec0:	240009b8 	.word	0x240009b8
 8002ec4:	40001000 	.word	0x40001000

08002ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002ecc:	e7fe      	b.n	8002ecc <NMI_Handler+0x4>

08002ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed2:	e7fe      	b.n	8002ed2 <HardFault_Handler+0x4>

08002ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ed8:	e7fe      	b.n	8002ed8 <MemManage_Handler+0x4>

08002eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ede:	e7fe      	b.n	8002ede <BusFault_Handler+0x4>

08002ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee4:	e7fe      	b.n	8002ee4 <UsageFault_Handler+0x4>

08002ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ef8:	4802      	ldr	r0, [pc, #8]	; (8002f04 <DMA1_Stream0_IRQHandler+0x10>)
 8002efa:	f004 fd05 	bl	8007908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002efe:	bf00      	nop
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	24000204 	.word	0x24000204

08002f08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002f0c:	4802      	ldr	r0, [pc, #8]	; (8002f18 <DMA1_Stream1_IRQHandler+0x10>)
 8002f0e:	f004 fcfb 	bl	8007908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	2400027c 	.word	0x2400027c

08002f1c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <DMA1_Stream2_IRQHandler+0x10>)
 8002f22:	f004 fcf1 	bl	8007908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	24000b80 	.word	0x24000b80

08002f30 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002f34:	4802      	ldr	r0, [pc, #8]	; (8002f40 <DMA1_Stream5_IRQHandler+0x10>)
 8002f36:	f004 fce7 	bl	8007908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	24000308 	.word	0x24000308

08002f44 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f48:	4802      	ldr	r0, [pc, #8]	; (8002f54 <TIM1_BRK_IRQHandler+0x10>)
 8002f4a:	f00c f82a 	bl	800efa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	24000a08 	.word	0x24000a08

08002f58 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f5c:	4802      	ldr	r0, [pc, #8]	; (8002f68 <TIM1_UP_IRQHandler+0x10>)
 8002f5e:	f00c f820 	bl	800efa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	24000a08 	.word	0x24000a08

08002f6c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f70:	4802      	ldr	r0, [pc, #8]	; (8002f7c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002f72:	f00c f816 	bl	800efa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	24000a08 	.word	0x24000a08

08002f80 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f84:	4802      	ldr	r0, [pc, #8]	; (8002f90 <TIM1_CC_IRQHandler+0x10>)
 8002f86:	f00c f80c 	bl	800efa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	24000a08 	.word	0x24000a08

08002f94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f98:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <TIM2_IRQHandler+0x10>)
 8002f9a:	f00c f802 	bl	800efa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	24000a54 	.word	0x24000a54

08002fa8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <TIM3_IRQHandler+0x10>)
 8002fae:	f00b fff8 	bl	800efa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	24000aa0 	.word	0x24000aa0

08002fbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <USART1_IRQHandler+0x10>)
 8002fc2:	f00d fbb1 	bl	8010728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	24000aec 	.word	0x24000aec

08002fd0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <TIM6_DAC_IRQHandler+0x20>)
 8002fd6:	791b      	ldrb	r3, [r3, #4]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002fde:	4804      	ldr	r0, [pc, #16]	; (8002ff0 <TIM6_DAC_IRQHandler+0x20>)
 8002fe0:	f002 fee9 	bl	8005db6 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002fe4:	4803      	ldr	r0, [pc, #12]	; (8002ff4 <TIM6_DAC_IRQHandler+0x24>)
 8002fe6:	f00b ffdc 	bl	800efa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	240002f4 	.word	0x240002f4
 8002ff4:	240009b8 	.word	0x240009b8

08002ff8 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8003002:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <ITM_SendChar+0x48>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <ITM_SendChar+0x48>)
 8003008:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300c:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <ITM_SendChar+0x4c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <ITM_SendChar+0x4c>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800301a:	bf00      	nop
 800301c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f8      	beq.n	800301c <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800302a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	6013      	str	r3, [r2, #0]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	e000edfc 	.word	0xe000edfc
 8003044:	e0000e00 	.word	0xe0000e00

08003048 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
 8003058:	e00a      	b.n	8003070 <_read+0x28>
		*ptr++ = __io_getchar();
 800305a:	f3af 8000 	nop.w
 800305e:	4601      	mov	r1, r0
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	60ba      	str	r2, [r7, #8]
 8003066:	b2ca      	uxtb	r2, r1
 8003068:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3301      	adds	r3, #1
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	dbf0      	blt.n	800305a <_read+0x12>
	}

	return len;
 8003078:	687b      	ldr	r3, [r7, #4]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8003082:	b580      	push	{r7, lr}
 8003084:	b086      	sub	sp, #24
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e009      	b.n	80030a8 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	60ba      	str	r2, [r7, #8]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ffab 	bl	8002ff8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	3301      	adds	r3, #1
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	dbf1      	blt.n	8003094 <_write+0x12>
	}
	return len;
 80030b0:	687b      	ldr	r3, [r7, #4]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <_close>:

int _close(int file) {
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <_fstat>:

int _fstat(int file, struct stat *st) {
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030e2:	605a      	str	r2, [r3, #4]
	return 0;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <_isatty>:

int _isatty(int file) {
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80030fa:	2301      	movs	r3, #1
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800312c:	4a14      	ldr	r2, [pc, #80]	; (8003180 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003138:	4b13      	ldr	r3, [pc, #76]	; (8003188 <_sbrk+0x64>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d102      	bne.n	8003146 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <_sbrk+0x64>)
 8003142:	4a12      	ldr	r2, [pc, #72]	; (800318c <_sbrk+0x68>)
 8003144:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003146:	4b10      	ldr	r3, [pc, #64]	; (8003188 <_sbrk+0x64>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	429a      	cmp	r2, r3
 8003152:	d207      	bcs.n	8003164 <_sbrk+0x40>
		errno = ENOMEM;
 8003154:	f013 fa7a 	bl	801664c <__errno>
 8003158:	4603      	mov	r3, r0
 800315a:	220c      	movs	r2, #12
 800315c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003162:	e009      	b.n	8003178 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003164:	4b08      	ldr	r3, [pc, #32]	; (8003188 <_sbrk+0x64>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800316a:	4b07      	ldr	r3, [pc, #28]	; (8003188 <_sbrk+0x64>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	4a05      	ldr	r2, [pc, #20]	; (8003188 <_sbrk+0x64>)
 8003174:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003176:	68fb      	ldr	r3, [r7, #12]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	24080000 	.word	0x24080000
 8003184:	00000400 	.word	0x00000400
 8003188:	24000a04 	.word	0x24000a04
 800318c:	24005610 	.word	0x24005610

08003190 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003194:	4b37      	ldr	r3, [pc, #220]	; (8003274 <SystemInit+0xe4>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	4a36      	ldr	r2, [pc, #216]	; (8003274 <SystemInit+0xe4>)
 800319c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80031a4:	4b34      	ldr	r3, [pc, #208]	; (8003278 <SystemInit+0xe8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	2b06      	cmp	r3, #6
 80031ae:	d807      	bhi.n	80031c0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80031b0:	4b31      	ldr	r3, [pc, #196]	; (8003278 <SystemInit+0xe8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f023 030f 	bic.w	r3, r3, #15
 80031b8:	4a2f      	ldr	r2, [pc, #188]	; (8003278 <SystemInit+0xe8>)
 80031ba:	f043 0307 	orr.w	r3, r3, #7
 80031be:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80031c0:	4b2e      	ldr	r3, [pc, #184]	; (800327c <SystemInit+0xec>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2d      	ldr	r2, [pc, #180]	; (800327c <SystemInit+0xec>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80031cc:	4b2b      	ldr	r3, [pc, #172]	; (800327c <SystemInit+0xec>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80031d2:	4b2a      	ldr	r3, [pc, #168]	; (800327c <SystemInit+0xec>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	4929      	ldr	r1, [pc, #164]	; (800327c <SystemInit+0xec>)
 80031d8:	4b29      	ldr	r3, [pc, #164]	; (8003280 <SystemInit+0xf0>)
 80031da:	4013      	ands	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80031de:	4b26      	ldr	r3, [pc, #152]	; (8003278 <SystemInit+0xe8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80031ea:	4b23      	ldr	r3, [pc, #140]	; (8003278 <SystemInit+0xe8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 030f 	bic.w	r3, r3, #15
 80031f2:	4a21      	ldr	r2, [pc, #132]	; (8003278 <SystemInit+0xe8>)
 80031f4:	f043 0307 	orr.w	r3, r3, #7
 80031f8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80031fa:	4b20      	ldr	r3, [pc, #128]	; (800327c <SystemInit+0xec>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003200:	4b1e      	ldr	r3, [pc, #120]	; (800327c <SystemInit+0xec>)
 8003202:	2200      	movs	r2, #0
 8003204:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8003206:	4b1d      	ldr	r3, [pc, #116]	; (800327c <SystemInit+0xec>)
 8003208:	2200      	movs	r2, #0
 800320a:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <SystemInit+0xec>)
 800320e:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <SystemInit+0xf4>)
 8003210:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <SystemInit+0xec>)
 8003214:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <SystemInit+0xf8>)
 8003216:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8003218:	4b18      	ldr	r3, [pc, #96]	; (800327c <SystemInit+0xec>)
 800321a:	4a1c      	ldr	r2, [pc, #112]	; (800328c <SystemInit+0xfc>)
 800321c:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800321e:	4b17      	ldr	r3, [pc, #92]	; (800327c <SystemInit+0xec>)
 8003220:	2200      	movs	r2, #0
 8003222:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <SystemInit+0xec>)
 8003226:	4a19      	ldr	r2, [pc, #100]	; (800328c <SystemInit+0xfc>)
 8003228:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800322a:	4b14      	ldr	r3, [pc, #80]	; (800327c <SystemInit+0xec>)
 800322c:	2200      	movs	r2, #0
 800322e:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8003230:	4b12      	ldr	r3, [pc, #72]	; (800327c <SystemInit+0xec>)
 8003232:	4a16      	ldr	r2, [pc, #88]	; (800328c <SystemInit+0xfc>)
 8003234:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003236:	4b11      	ldr	r3, [pc, #68]	; (800327c <SystemInit+0xec>)
 8003238:	2200      	movs	r2, #0
 800323a:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <SystemInit+0xec>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a0e      	ldr	r2, [pc, #56]	; (800327c <SystemInit+0xec>)
 8003242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003246:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <SystemInit+0xec>)
 800324a:	2200      	movs	r2, #0
 800324c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <SystemInit+0x100>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <SystemInit+0x104>)
 8003254:	4013      	ands	r3, r2
 8003256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800325a:	d202      	bcs.n	8003262 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 800325c:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <SystemInit+0x108>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003262:	4b0e      	ldr	r3, [pc, #56]	; (800329c <SystemInit+0x10c>)
 8003264:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003268:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800326a:	bf00      	nop
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000ed00 	.word	0xe000ed00
 8003278:	52002000 	.word	0x52002000
 800327c:	58024400 	.word	0x58024400
 8003280:	eaf6ed7f 	.word	0xeaf6ed7f
 8003284:	02020200 	.word	0x02020200
 8003288:	01ff0000 	.word	0x01ff0000
 800328c:	01010280 	.word	0x01010280
 8003290:	5c001000 	.word	0x5c001000
 8003294:	ffff0000 	.word	0xffff0000
 8003298:	51008108 	.word	0x51008108
 800329c:	52004000 	.word	0x52004000

080032a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b09a      	sub	sp, #104	; 0x68
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	605a      	str	r2, [r3, #4]
 80032b0:	609a      	str	r2, [r3, #8]
 80032b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
 80032d0:	615a      	str	r2, [r3, #20]
 80032d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032d4:	1d3b      	adds	r3, r7, #4
 80032d6:	222c      	movs	r2, #44	; 0x2c
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f013 f9fe 	bl	80166dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032e0:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <MX_TIM1_Init+0x154>)
 80032e2:	4a45      	ldr	r2, [pc, #276]	; (80033f8 <MX_TIM1_Init+0x158>)
 80032e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 80032e6:	4b43      	ldr	r3, [pc, #268]	; (80033f4 <MX_TIM1_Init+0x154>)
 80032e8:	2231      	movs	r2, #49	; 0x31
 80032ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ec:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <MX_TIM1_Init+0x154>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80032f2:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <MX_TIM1_Init+0x154>)
 80032f4:	f24f 4223 	movw	r2, #62499	; 0xf423
 80032f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032fa:	4b3e      	ldr	r3, [pc, #248]	; (80033f4 <MX_TIM1_Init+0x154>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003300:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <MX_TIM1_Init+0x154>)
 8003302:	2200      	movs	r2, #0
 8003304:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003306:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <MX_TIM1_Init+0x154>)
 8003308:	2200      	movs	r2, #0
 800330a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800330c:	4839      	ldr	r0, [pc, #228]	; (80033f4 <MX_TIM1_Init+0x154>)
 800330e:	f00b fada 	bl	800e8c6 <HAL_TIM_Base_Init>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003318:	f7fe fece 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800331c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003320:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003322:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003326:	4619      	mov	r1, r3
 8003328:	4832      	ldr	r0, [pc, #200]	; (80033f4 <MX_TIM1_Init+0x154>)
 800332a:	f00c f855 	bl	800f3d8 <HAL_TIM_ConfigClockSource>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003334:	f7fe fec0 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003338:	482e      	ldr	r0, [pc, #184]	; (80033f4 <MX_TIM1_Init+0x154>)
 800333a:	f00b fdd1 	bl	800eee0 <HAL_TIM_PWM_Init>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003344:	f7fe feb8 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003348:	2300      	movs	r3, #0
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800334c:	2300      	movs	r3, #0
 800334e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003350:	2300      	movs	r3, #0
 8003352:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003354:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003358:	4619      	mov	r1, r3
 800335a:	4826      	ldr	r0, [pc, #152]	; (80033f4 <MX_TIM1_Init+0x154>)
 800335c:	f00c fd92 	bl	800fe84 <HAL_TIMEx_MasterConfigSynchronization>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003366:	f7fe fea7 	bl	80020b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800336a:	2360      	movs	r3, #96	; 0x60
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800336e:	f240 13df 	movw	r3, #479	; 0x1df
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003374:	2300      	movs	r3, #0
 8003376:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003378:	2300      	movs	r3, #0
 800337a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800337c:	2300      	movs	r3, #0
 800337e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003380:	2300      	movs	r3, #0
 8003382:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003384:	2300      	movs	r3, #0
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003388:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800338c:	2200      	movs	r2, #0
 800338e:	4619      	mov	r1, r3
 8003390:	4818      	ldr	r0, [pc, #96]	; (80033f4 <MX_TIM1_Init+0x154>)
 8003392:	f00b ff0d 	bl	800f1b0 <HAL_TIM_PWM_ConfigChannel>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800339c:	f7fe fe8c 	bl	80020b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033a0:	2300      	movs	r3, #0
 80033a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80033be:	2300      	movs	r3, #0
 80033c0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80033c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	4619      	mov	r1, r3
 80033d4:	4807      	ldr	r0, [pc, #28]	; (80033f4 <MX_TIM1_Init+0x154>)
 80033d6:	f00c fde3 	bl	800ffa0 <HAL_TIMEx_ConfigBreakDeadTime>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80033e0:	f7fe fe6a 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80033e4:	4803      	ldr	r0, [pc, #12]	; (80033f4 <MX_TIM1_Init+0x154>)
 80033e6:	f000 f949 	bl	800367c <HAL_TIM_MspPostInit>

}
 80033ea:	bf00      	nop
 80033ec:	3768      	adds	r7, #104	; 0x68
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	24000a08 	.word	0x24000a08
 80033f8:	40010000 	.word	0x40010000

080033fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08e      	sub	sp, #56	; 0x38
 8003400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	609a      	str	r2, [r3, #8]
 800340e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003410:	f107 031c 	add.w	r3, r7, #28
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800341c:	463b      	mov	r3, r7
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	611a      	str	r2, [r3, #16]
 800342a:	615a      	str	r2, [r3, #20]
 800342c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800342e:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <MX_TIM2_Init+0xe8>)
 8003430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003434:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8003436:	4b2b      	ldr	r3, [pc, #172]	; (80034e4 <MX_TIM2_Init+0xe8>)
 8003438:	2231      	movs	r2, #49	; 0x31
 800343a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800343c:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <MX_TIM2_Init+0xe8>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8003442:	4b28      	ldr	r3, [pc, #160]	; (80034e4 <MX_TIM2_Init+0xe8>)
 8003444:	f640 4234 	movw	r2, #3124	; 0xc34
 8003448:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800344a:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <MX_TIM2_Init+0xe8>)
 800344c:	2200      	movs	r2, #0
 800344e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003450:	4b24      	ldr	r3, [pc, #144]	; (80034e4 <MX_TIM2_Init+0xe8>)
 8003452:	2280      	movs	r2, #128	; 0x80
 8003454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003456:	4823      	ldr	r0, [pc, #140]	; (80034e4 <MX_TIM2_Init+0xe8>)
 8003458:	f00b fa35 	bl	800e8c6 <HAL_TIM_Base_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003462:	f7fe fe29 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800346c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003470:	4619      	mov	r1, r3
 8003472:	481c      	ldr	r0, [pc, #112]	; (80034e4 <MX_TIM2_Init+0xe8>)
 8003474:	f00b ffb0 	bl	800f3d8 <HAL_TIM_ConfigClockSource>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800347e:	f7fe fe1b 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003482:	4818      	ldr	r0, [pc, #96]	; (80034e4 <MX_TIM2_Init+0xe8>)
 8003484:	f00b fd2c 	bl	800eee0 <HAL_TIM_PWM_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800348e:	f7fe fe13 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003492:	2320      	movs	r3, #32
 8003494:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800349a:	f107 031c 	add.w	r3, r7, #28
 800349e:	4619      	mov	r1, r3
 80034a0:	4810      	ldr	r0, [pc, #64]	; (80034e4 <MX_TIM2_Init+0xe8>)
 80034a2:	f00c fcef 	bl	800fe84 <HAL_TIMEx_MasterConfigSynchronization>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80034ac:	f7fe fe04 	bl	80020b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034b0:	2360      	movs	r3, #96	; 0x60
 80034b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034bc:	2300      	movs	r3, #0
 80034be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034c0:	463b      	mov	r3, r7
 80034c2:	220c      	movs	r2, #12
 80034c4:	4619      	mov	r1, r3
 80034c6:	4807      	ldr	r0, [pc, #28]	; (80034e4 <MX_TIM2_Init+0xe8>)
 80034c8:	f00b fe72 	bl	800f1b0 <HAL_TIM_PWM_ConfigChannel>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80034d2:	f7fe fdf1 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80034d6:	4803      	ldr	r0, [pc, #12]	; (80034e4 <MX_TIM2_Init+0xe8>)
 80034d8:	f000 f8d0 	bl	800367c <HAL_TIM_MspPostInit>

}
 80034dc:	bf00      	nop
 80034de:	3738      	adds	r7, #56	; 0x38
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	24000a54 	.word	0x24000a54

080034e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ee:	f107 0310 	add.w	r3, r7, #16
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	609a      	str	r2, [r3, #8]
 80034fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034fc:	1d3b      	adds	r3, r7, #4
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003506:	4b1d      	ldr	r3, [pc, #116]	; (800357c <MX_TIM3_Init+0x94>)
 8003508:	4a1d      	ldr	r2, [pc, #116]	; (8003580 <MX_TIM3_Init+0x98>)
 800350a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <MX_TIM3_Init+0x94>)
 800350e:	2263      	movs	r2, #99	; 0x63
 8003510:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003512:	4b1a      	ldr	r3, [pc, #104]	; (800357c <MX_TIM3_Init+0x94>)
 8003514:	2200      	movs	r2, #0
 8003516:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8003518:	4b18      	ldr	r3, [pc, #96]	; (800357c <MX_TIM3_Init+0x94>)
 800351a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800351e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003520:	4b16      	ldr	r3, [pc, #88]	; (800357c <MX_TIM3_Init+0x94>)
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <MX_TIM3_Init+0x94>)
 8003528:	2200      	movs	r2, #0
 800352a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800352c:	4813      	ldr	r0, [pc, #76]	; (800357c <MX_TIM3_Init+0x94>)
 800352e:	f00b f9ca 	bl	800e8c6 <HAL_TIM_Base_Init>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003538:	f7fe fdbe 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800353c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003540:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003542:	f107 0310 	add.w	r3, r7, #16
 8003546:	4619      	mov	r1, r3
 8003548:	480c      	ldr	r0, [pc, #48]	; (800357c <MX_TIM3_Init+0x94>)
 800354a:	f00b ff45 	bl	800f3d8 <HAL_TIM_ConfigClockSource>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003554:	f7fe fdb0 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003558:	2300      	movs	r3, #0
 800355a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	4619      	mov	r1, r3
 8003564:	4805      	ldr	r0, [pc, #20]	; (800357c <MX_TIM3_Init+0x94>)
 8003566:	f00c fc8d 	bl	800fe84 <HAL_TIMEx_MasterConfigSynchronization>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003570:	f7fe fda2 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003574:	bf00      	nop
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	24000aa0 	.word	0x24000aa0
 8003580:	40000400 	.word	0x40000400

08003584 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a37      	ldr	r2, [pc, #220]	; (8003670 <HAL_TIM_Base_MspInit+0xec>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d12f      	bne.n	80035f6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003596:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_TIM_Base_MspInit+0xf0>)
 8003598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800359c:	4a35      	ldr	r2, [pc, #212]	; (8003674 <HAL_TIM_Base_MspInit+0xf0>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_TIM_Base_MspInit+0xf0>)
 80035a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80035b4:	2200      	movs	r2, #0
 80035b6:	2105      	movs	r1, #5
 80035b8:	2018      	movs	r0, #24
 80035ba:	f002 fa4d 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80035be:	2018      	movs	r0, #24
 80035c0:	f002 fa64 	bl	8005a8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80035c4:	2200      	movs	r2, #0
 80035c6:	2105      	movs	r1, #5
 80035c8:	2019      	movs	r0, #25
 80035ca:	f002 fa45 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80035ce:	2019      	movs	r0, #25
 80035d0:	f002 fa5c 	bl	8005a8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80035d4:	2200      	movs	r2, #0
 80035d6:	2105      	movs	r1, #5
 80035d8:	201a      	movs	r0, #26
 80035da:	f002 fa3d 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80035de:	201a      	movs	r0, #26
 80035e0:	f002 fa54 	bl	8005a8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80035e4:	2200      	movs	r2, #0
 80035e6:	2105      	movs	r1, #5
 80035e8:	201b      	movs	r0, #27
 80035ea:	f002 fa35 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80035ee:	201b      	movs	r0, #27
 80035f0:	f002 fa4c 	bl	8005a8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80035f4:	e038      	b.n	8003668 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fe:	d117      	bne.n	8003630 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003600:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <HAL_TIM_Base_MspInit+0xf0>)
 8003602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003606:	4a1b      	ldr	r2, [pc, #108]	; (8003674 <HAL_TIM_Base_MspInit+0xf0>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003610:	4b18      	ldr	r3, [pc, #96]	; (8003674 <HAL_TIM_Base_MspInit+0xf0>)
 8003612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800361e:	2200      	movs	r2, #0
 8003620:	2105      	movs	r1, #5
 8003622:	201c      	movs	r0, #28
 8003624:	f002 fa18 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003628:	201c      	movs	r0, #28
 800362a:	f002 fa2f 	bl	8005a8c <HAL_NVIC_EnableIRQ>
}
 800362e:	e01b      	b.n	8003668 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a10      	ldr	r2, [pc, #64]	; (8003678 <HAL_TIM_Base_MspInit+0xf4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d116      	bne.n	8003668 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <HAL_TIM_Base_MspInit+0xf0>)
 800363c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003640:	4a0c      	ldr	r2, [pc, #48]	; (8003674 <HAL_TIM_Base_MspInit+0xf0>)
 8003642:	f043 0302 	orr.w	r3, r3, #2
 8003646:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_TIM_Base_MspInit+0xf0>)
 800364c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003658:	2200      	movs	r2, #0
 800365a:	2105      	movs	r1, #5
 800365c:	201d      	movs	r0, #29
 800365e:	f002 f9fb 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003662:	201d      	movs	r0, #29
 8003664:	f002 fa12 	bl	8005a8c <HAL_NVIC_EnableIRQ>
}
 8003668:	bf00      	nop
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40010000 	.word	0x40010000
 8003674:	58024400 	.word	0x58024400
 8003678:	40000400 	.word	0x40000400

0800367c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003684:	f107 0314 	add.w	r3, r7, #20
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a26      	ldr	r2, [pc, #152]	; (8003734 <HAL_TIM_MspPostInit+0xb8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d120      	bne.n	80036e0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369e:	4b26      	ldr	r3, [pc, #152]	; (8003738 <HAL_TIM_MspPostInit+0xbc>)
 80036a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036a4:	4a24      	ldr	r2, [pc, #144]	; (8003738 <HAL_TIM_MspPostInit+0xbc>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <HAL_TIM_MspPostInit+0xbc>)
 80036b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c2:	2302      	movs	r3, #2
 80036c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	2300      	movs	r3, #0
 80036cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d2:	f107 0314 	add.w	r3, r7, #20
 80036d6:	4619      	mov	r1, r3
 80036d8:	4818      	ldr	r0, [pc, #96]	; (800373c <HAL_TIM_MspPostInit+0xc0>)
 80036da:	f005 fc33 	bl	8008f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80036de:	e024      	b.n	800372a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e8:	d11f      	bne.n	800372a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ea:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_TIM_MspPostInit+0xbc>)
 80036ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f0:	4a11      	ldr	r2, [pc, #68]	; (8003738 <HAL_TIM_MspPostInit+0xbc>)
 80036f2:	f043 0302 	orr.w	r3, r3, #2
 80036f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036fa:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <HAL_TIM_MspPostInit+0xbc>)
 80036fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800370c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	2302      	movs	r3, #2
 8003710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003716:	2300      	movs	r3, #0
 8003718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800371a:	2301      	movs	r3, #1
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	4619      	mov	r1, r3
 8003724:	4806      	ldr	r0, [pc, #24]	; (8003740 <HAL_TIM_MspPostInit+0xc4>)
 8003726:	f005 fc0d 	bl	8008f44 <HAL_GPIO_Init>
}
 800372a:	bf00      	nop
 800372c:	3728      	adds	r7, #40	; 0x28
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40010000 	.word	0x40010000
 8003738:	58024400 	.word	0x58024400
 800373c:	58020000 	.word	0x58020000
 8003740:	58020400 	.word	0x58020400

08003744 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 8003750:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <get_uptime+0x88>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 8003756:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <get_uptime+0x8c>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <get_uptime+0x88>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	429a      	cmp	r2, r3
 8003764:	d005      	beq.n	8003772 <get_uptime+0x2e>
		ms = uptime_millis;
 8003766:	4b19      	ldr	r3, [pc, #100]	; (80037cc <get_uptime+0x88>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 800376c:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <get_uptime+0x8c>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003778:	fb03 f202 	mul.w	r2, r3, r2
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <get_uptime+0x8c>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	3301      	adds	r3, #1
 8003782:	4914      	ldr	r1, [pc, #80]	; (80037d4 <get_uptime+0x90>)
 8003784:	fba1 1303 	umull	r1, r3, r1, r3
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	6939      	ldr	r1, [r7, #16]
 800378c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	0e1b      	lsrs	r3, r3, #24
 8003798:	b2da      	uxtb	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	0c1a      	lsrs	r2, r3, #16
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3301      	adds	r3, #1
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	0a1a      	lsrs	r2, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3302      	adds	r3, #2
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3303      	adds	r3, #3
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	701a      	strb	r2, [r3, #0]
}
 80037c0:	bf00      	nop
 80037c2:	371c      	adds	r7, #28
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	24000834 	.word	0x24000834
 80037d0:	e000e010 	.word	0xe000e010
 80037d4:	10624dd3 	.word	0x10624dd3

080037d8 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80037e0:	f107 0310 	add.w	r3, r7, #16
 80037e4:	2200      	movs	r2, #0
 80037e6:	4619      	mov	r1, r3
 80037e8:	4821      	ldr	r0, [pc, #132]	; (8003870 <get_timestamp+0x98>)
 80037ea:	f00a fa19 	bl	800dc20 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80037ee:	f107 030c 	add.w	r3, r7, #12
 80037f2:	2200      	movs	r2, #0
 80037f4:	4619      	mov	r1, r3
 80037f6:	481e      	ldr	r0, [pc, #120]	; (8003870 <get_timestamp+0x98>)
 80037f8:	f00a faf6 	bl	800dde8 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2264      	movs	r2, #100	; 0x64
 8003800:	fb03 f202 	mul.w	r2, r3, r2
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <get_timestamp+0x9c>)
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 800380a:	7bfa      	ldrb	r2, [r7, #15]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3301      	adds	r3, #1
 8003814:	7b7a      	ldrb	r2, [r7, #13]
 8003816:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3302      	adds	r3, #2
 800381c:	7bba      	ldrb	r2, [r7, #14]
 800381e:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3303      	adds	r3, #3
 8003824:	7c3a      	ldrb	r2, [r7, #16]
 8003826:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	7c7a      	ldrb	r2, [r7, #17]
 800382e:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3305      	adds	r3, #5
 8003834:	7cba      	ldrb	r2, [r7, #18]
 8003836:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	0e1a      	lsrs	r2, r3, #24
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3306      	adds	r3, #6
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	0c1a      	lsrs	r2, r3, #16
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3307      	adds	r3, #7
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	0a1a      	lsrs	r2, r3, #8
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3308      	adds	r3, #8
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3309      	adds	r3, #9
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	701a      	strb	r2, [r3, #0]
}
 8003866:	bf00      	nop
 8003868:	3728      	adds	r7, #40	; 0x28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	24000844 	.word	0x24000844
 8003874:	000f4240 	.word	0x000f4240

08003878 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800387c:	4b22      	ldr	r3, [pc, #136]	; (8003908 <MX_USART1_UART_Init+0x90>)
 800387e:	4a23      	ldr	r2, [pc, #140]	; (800390c <MX_USART1_UART_Init+0x94>)
 8003880:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8003882:	4b21      	ldr	r3, [pc, #132]	; (8003908 <MX_USART1_UART_Init+0x90>)
 8003884:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003888:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800388a:	4b1f      	ldr	r3, [pc, #124]	; (8003908 <MX_USART1_UART_Init+0x90>)
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003890:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <MX_USART1_UART_Init+0x90>)
 8003892:	2200      	movs	r2, #0
 8003894:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003896:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <MX_USART1_UART_Init+0x90>)
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800389c:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <MX_USART1_UART_Init+0x90>)
 800389e:	220c      	movs	r2, #12
 80038a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a2:	4b19      	ldr	r3, [pc, #100]	; (8003908 <MX_USART1_UART_Init+0x90>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a8:	4b17      	ldr	r3, [pc, #92]	; (8003908 <MX_USART1_UART_Init+0x90>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038ae:	4b16      	ldr	r3, [pc, #88]	; (8003908 <MX_USART1_UART_Init+0x90>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038b4:	4b14      	ldr	r3, [pc, #80]	; (8003908 <MX_USART1_UART_Init+0x90>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <MX_USART1_UART_Init+0x90>)
 80038bc:	2200      	movs	r2, #0
 80038be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038c0:	4811      	ldr	r0, [pc, #68]	; (8003908 <MX_USART1_UART_Init+0x90>)
 80038c2:	f00c fc09 	bl	80100d8 <HAL_UART_Init>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80038cc:	f7fe fbf4 	bl	80020b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038d0:	2100      	movs	r1, #0
 80038d2:	480d      	ldr	r0, [pc, #52]	; (8003908 <MX_USART1_UART_Init+0x90>)
 80038d4:	f00f fa3b 	bl	8012d4e <HAL_UARTEx_SetTxFifoThreshold>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80038de:	f7fe fbeb 	bl	80020b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038e2:	2100      	movs	r1, #0
 80038e4:	4808      	ldr	r0, [pc, #32]	; (8003908 <MX_USART1_UART_Init+0x90>)
 80038e6:	f00f fa70 	bl	8012dca <HAL_UARTEx_SetRxFifoThreshold>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80038f0:	f7fe fbe2 	bl	80020b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80038f4:	4804      	ldr	r0, [pc, #16]	; (8003908 <MX_USART1_UART_Init+0x90>)
 80038f6:	f00f f9f1 	bl	8012cdc <HAL_UARTEx_DisableFifoMode>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003900:	f7fe fbda 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003904:	bf00      	nop
 8003906:	bd80      	pop	{r7, pc}
 8003908:	24000aec 	.word	0x24000aec
 800390c:	40011000 	.word	0x40011000

08003910 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b0ba      	sub	sp, #232	; 0xe8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003918:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003928:	f107 0310 	add.w	r3, r7, #16
 800392c:	22c0      	movs	r2, #192	; 0xc0
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f012 fed3 	bl	80166dc <memset>
  if(uartHandle->Instance==USART1)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a41      	ldr	r2, [pc, #260]	; (8003a40 <HAL_UART_MspInit+0x130>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d17b      	bne.n	8003a38 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003940:	f04f 0201 	mov.w	r2, #1
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 800394c:	2318      	movs	r3, #24
 800394e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003952:	f107 0310 	add.w	r3, r7, #16
 8003956:	4618      	mov	r0, r3
 8003958:	f007 fb44 	bl	800afe4 <HAL_RCCEx_PeriphCLKConfig>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003962:	f7fe fba9 	bl	80020b8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003966:	4b37      	ldr	r3, [pc, #220]	; (8003a44 <HAL_UART_MspInit+0x134>)
 8003968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800396c:	4a35      	ldr	r2, [pc, #212]	; (8003a44 <HAL_UART_MspInit+0x134>)
 800396e:	f043 0310 	orr.w	r3, r3, #16
 8003972:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003976:	4b33      	ldr	r3, [pc, #204]	; (8003a44 <HAL_UART_MspInit+0x134>)
 8003978:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003984:	4b2f      	ldr	r3, [pc, #188]	; (8003a44 <HAL_UART_MspInit+0x134>)
 8003986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800398a:	4a2e      	ldr	r2, [pc, #184]	; (8003a44 <HAL_UART_MspInit+0x134>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003994:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_UART_MspInit+0x134>)
 8003996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039aa:	2302      	movs	r3, #2
 80039ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b6:	2300      	movs	r3, #0
 80039b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039bc:	2307      	movs	r3, #7
 80039be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039c6:	4619      	mov	r1, r3
 80039c8:	481f      	ldr	r0, [pc, #124]	; (8003a48 <HAL_UART_MspInit+0x138>)
 80039ca:	f005 fabb 	bl	8008f44 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 80039ce:	4b1f      	ldr	r3, [pc, #124]	; (8003a4c <HAL_UART_MspInit+0x13c>)
 80039d0:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <HAL_UART_MspInit+0x140>)
 80039d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80039d4:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_UART_MspInit+0x13c>)
 80039d6:	222a      	movs	r2, #42	; 0x2a
 80039d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039da:	4b1c      	ldr	r3, [pc, #112]	; (8003a4c <HAL_UART_MspInit+0x13c>)
 80039dc:	2240      	movs	r2, #64	; 0x40
 80039de:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <HAL_UART_MspInit+0x13c>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <HAL_UART_MspInit+0x13c>)
 80039e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ee:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <HAL_UART_MspInit+0x13c>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039f4:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <HAL_UART_MspInit+0x13c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <HAL_UART_MspInit+0x13c>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_UART_MspInit+0x13c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <HAL_UART_MspInit+0x13c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003a0c:	480f      	ldr	r0, [pc, #60]	; (8003a4c <HAL_UART_MspInit+0x13c>)
 8003a0e:	f002 fc51 	bl	80062b4 <HAL_DMA_Init>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003a18:	f7fe fb4e 	bl	80020b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0b      	ldr	r2, [pc, #44]	; (8003a4c <HAL_UART_MspInit+0x13c>)
 8003a20:	67da      	str	r2, [r3, #124]	; 0x7c
 8003a22:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <HAL_UART_MspInit+0x13c>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2105      	movs	r1, #5
 8003a2c:	2025      	movs	r0, #37	; 0x25
 8003a2e:	f002 f813 	bl	8005a58 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003a32:	2025      	movs	r0, #37	; 0x25
 8003a34:	f002 f82a 	bl	8005a8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003a38:	bf00      	nop
 8003a3a:	37e8      	adds	r7, #232	; 0xe8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40011000 	.word	0x40011000
 8003a44:	58024400 	.word	0x58024400
 8003a48:	58020000 	.word	0x58020000
 8003a4c:	24000b80 	.word	0x24000b80
 8003a50:	40020040 	.word	0x40020040

08003a54 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8003a5e:	4bc2      	ldr	r3, [pc, #776]	; (8003d68 <voltage_monitor_init+0x314>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8003a64:	4bc0      	ldr	r3, [pc, #768]	; (8003d68 <voltage_monitor_init+0x314>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8003a6a:	4bbf      	ldr	r3, [pc, #764]	; (8003d68 <voltage_monitor_init+0x314>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8003a70:	4bbd      	ldr	r3, [pc, #756]	; (8003d68 <voltage_monitor_init+0x314>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003a76:	4bbc      	ldr	r3, [pc, #752]	; (8003d68 <voltage_monitor_init+0x314>)
 8003a78:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a7c:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8003a7e:	4bba      	ldr	r3, [pc, #744]	; (8003d68 <voltage_monitor_init+0x314>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8003a84:	4bb8      	ldr	r3, [pc, #736]	; (8003d68 <voltage_monitor_init+0x314>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8003a8a:	4bb7      	ldr	r3, [pc, #732]	; (8003d68 <voltage_monitor_init+0x314>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8003a90:	4bb5      	ldr	r3, [pc, #724]	; (8003d68 <voltage_monitor_init+0x314>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8003a96:	4bb4      	ldr	r3, [pc, #720]	; (8003d68 <voltage_monitor_init+0x314>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003a9c:	4bb2      	ldr	r3, [pc, #712]	; (8003d68 <voltage_monitor_init+0x314>)
 8003a9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003aa2:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8003aa4:	4bb0      	ldr	r3, [pc, #704]	; (8003d68 <voltage_monitor_init+0x314>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8003aaa:	4baf      	ldr	r3, [pc, #700]	; (8003d68 <voltage_monitor_init+0x314>)
 8003aac:	2202      	movs	r2, #2
 8003aae:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8003ab0:	4bad      	ldr	r3, [pc, #692]	; (8003d68 <voltage_monitor_init+0x314>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8003ab6:	4bac      	ldr	r3, [pc, #688]	; (8003d68 <voltage_monitor_init+0x314>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8003abc:	4baa      	ldr	r3, [pc, #680]	; (8003d68 <voltage_monitor_init+0x314>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003ac2:	4ba9      	ldr	r3, [pc, #676]	; (8003d68 <voltage_monitor_init+0x314>)
 8003ac4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ac8:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8003aca:	4ba7      	ldr	r3, [pc, #668]	; (8003d68 <voltage_monitor_init+0x314>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8003ad0:	4ba5      	ldr	r3, [pc, #660]	; (8003d68 <voltage_monitor_init+0x314>)
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8003ad6:	4ba4      	ldr	r3, [pc, #656]	; (8003d68 <voltage_monitor_init+0x314>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8003adc:	4ba2      	ldr	r3, [pc, #648]	; (8003d68 <voltage_monitor_init+0x314>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8003ae4:	4ba0      	ldr	r3, [pc, #640]	; (8003d68 <voltage_monitor_init+0x314>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003aea:	4b9f      	ldr	r3, [pc, #636]	; (8003d68 <voltage_monitor_init+0x314>)
 8003aec:	f242 7210 	movw	r2, #10000	; 0x2710
 8003af0:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8003af2:	4b9d      	ldr	r3, [pc, #628]	; (8003d68 <voltage_monitor_init+0x314>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003af8:	4b9b      	ldr	r3, [pc, #620]	; (8003d68 <voltage_monitor_init+0x314>)
 8003afa:	2204      	movs	r2, #4
 8003afc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003b00:	4b99      	ldr	r3, [pc, #612]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003b08:	4b97      	ldr	r3, [pc, #604]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003b10:	4b95      	ldr	r3, [pc, #596]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b16:	4b94      	ldr	r3, [pc, #592]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b18:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b1c:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003b1e:	4b92      	ldr	r3, [pc, #584]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003b24:	4b90      	ldr	r3, [pc, #576]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b26:	2205      	movs	r2, #5
 8003b28:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003b2c:	4b8e      	ldr	r3, [pc, #568]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8003b34:	4b8c      	ldr	r3, [pc, #560]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003b3c:	4b8a      	ldr	r3, [pc, #552]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b42:	4b89      	ldr	r3, [pc, #548]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b44:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b48:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8003b4a:	4b87      	ldr	r3, [pc, #540]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003b50:	4b85      	ldr	r3, [pc, #532]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b52:	2206      	movs	r2, #6
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8003b58:	4b83      	ldr	r3, [pc, #524]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003b60:	4b81      	ldr	r3, [pc, #516]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8003b68:	4b7f      	ldr	r3, [pc, #508]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003b70:	4b7d      	ldr	r3, [pc, #500]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b72:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b76:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8003b7a:	4b7b      	ldr	r3, [pc, #492]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8003b82:	4b79      	ldr	r3, [pc, #484]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b84:	2207      	movs	r2, #7
 8003b86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8003b8a:	4b77      	ldr	r3, [pc, #476]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8003b92:	4b75      	ldr	r3, [pc, #468]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8003b9a:	4b73      	ldr	r3, [pc, #460]	; (8003d68 <voltage_monitor_init+0x314>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003ba2:	4b71      	ldr	r3, [pc, #452]	; (8003d68 <voltage_monitor_init+0x314>)
 8003ba4:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ba8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8003bac:	4b6e      	ldr	r3, [pc, #440]	; (8003d68 <voltage_monitor_init+0x314>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8003bb4:	4b6c      	ldr	r3, [pc, #432]	; (8003d68 <voltage_monitor_init+0x314>)
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8003bbc:	4b6a      	ldr	r3, [pc, #424]	; (8003d68 <voltage_monitor_init+0x314>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8003bc4:	4b68      	ldr	r3, [pc, #416]	; (8003d68 <voltage_monitor_init+0x314>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003bcc:	4b66      	ldr	r3, [pc, #408]	; (8003d68 <voltage_monitor_init+0x314>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003bd4:	4b64      	ldr	r3, [pc, #400]	; (8003d68 <voltage_monitor_init+0x314>)
 8003bd6:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003bda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8003bde:	4b62      	ldr	r3, [pc, #392]	; (8003d68 <voltage_monitor_init+0x314>)
 8003be0:	f640 3283 	movw	r2, #2947	; 0xb83
 8003be4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003be8:	4b5f      	ldr	r3, [pc, #380]	; (8003d68 <voltage_monitor_init+0x314>)
 8003bea:	2209      	movs	r2, #9
 8003bec:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003bf0:	4b5d      	ldr	r3, [pc, #372]	; (8003d68 <voltage_monitor_init+0x314>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003bf8:	4b5b      	ldr	r3, [pc, #364]	; (8003d68 <voltage_monitor_init+0x314>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003c00:	4b59      	ldr	r3, [pc, #356]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003c08:	4b57      	ldr	r3, [pc, #348]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c0a:	f640 7245 	movw	r2, #3909	; 0xf45
 8003c0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003c12:	4b55      	ldr	r3, [pc, #340]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003c1a:	4b53      	ldr	r3, [pc, #332]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c1c:	220a      	movs	r2, #10
 8003c1e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003c22:	4b51      	ldr	r3, [pc, #324]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003c2a:	4b4f      	ldr	r3, [pc, #316]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003c32:	4b4d      	ldr	r3, [pc, #308]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8003c3a:	4b4b      	ldr	r3, [pc, #300]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c3c:	f640 7245 	movw	r2, #3909	; 0xf45
 8003c40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8003c44:	4b48      	ldr	r3, [pc, #288]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c46:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003c4a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8003c4e:	4b46      	ldr	r3, [pc, #280]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c50:	220b      	movs	r2, #11
 8003c52:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8003c56:	4b44      	ldr	r3, [pc, #272]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8003c5e:	4b42      	ldr	r3, [pc, #264]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8003c66:	4b40      	ldr	r3, [pc, #256]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8003c6e:	4b3e      	ldr	r3, [pc, #248]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c70:	f640 72fb 	movw	r2, #4091	; 0xffb
 8003c74:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8003c78:	4b3b      	ldr	r3, [pc, #236]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c7a:	f640 6276 	movw	r2, #3702	; 0xe76
 8003c7e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 8003c82:	4b39      	ldr	r3, [pc, #228]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c84:	220c      	movs	r2, #12
 8003c86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8003c8a:	4b37      	ldr	r3, [pc, #220]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8003c92:	4b35      	ldr	r3, [pc, #212]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8003c9a:	4b33      	ldr	r3, [pc, #204]	; (8003d68 <voltage_monitor_init+0x314>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8003ca2:	4b31      	ldr	r3, [pc, #196]	; (8003d68 <voltage_monitor_init+0x314>)
 8003ca4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003ca8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8003cac:	4b2e      	ldr	r3, [pc, #184]	; (8003d68 <voltage_monitor_init+0x314>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8003cb4:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <voltage_monitor_init+0x314>)
 8003cb6:	220d      	movs	r2, #13
 8003cb8:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8003cbc:	4b2a      	ldr	r3, [pc, #168]	; (8003d68 <voltage_monitor_init+0x314>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8003cc4:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <voltage_monitor_init+0x314>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8003ccc:	4b26      	ldr	r3, [pc, #152]	; (8003d68 <voltage_monitor_init+0x314>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8003cd4:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <voltage_monitor_init+0x314>)
 8003cd6:	f640 7238 	movw	r2, #3896	; 0xf38
 8003cda:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <voltage_monitor_init+0x314>)
 8003ce0:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8003ce4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <voltage_monitor_init+0x314>)
 8003cea:	220e      	movs	r2, #14
 8003cec:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <voltage_monitor_init+0x314>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <voltage_monitor_init+0x314>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8003d00:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <voltage_monitor_init+0x314>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 8003d08:	4b17      	ldr	r3, [pc, #92]	; (8003d68 <voltage_monitor_init+0x314>)
 8003d0a:	f640 7245 	movw	r2, #3909	; 0xf45
 8003d0e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <voltage_monitor_init+0x314>)
 8003d14:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003d18:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8003d1c:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <voltage_monitor_init+0x314>)
 8003d1e:	220f      	movs	r2, #15
 8003d20:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8003d24:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <voltage_monitor_init+0x314>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 8003d2c:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <voltage_monitor_init+0x314>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 8003d34:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <voltage_monitor_init+0x314>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <voltage_monitor_init+0x314>)
 8003d3e:	f241 0264 	movw	r2, #4196	; 0x1064
 8003d42:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <voltage_monitor_init+0x314>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <voltage_monitor_init+0x314>)
 8003d50:	2210      	movs	r2, #16
 8003d52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <voltage_monitor_init+0x314>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 8003d5e:	4b02      	ldr	r3, [pc, #8]	; (8003d68 <voltage_monitor_init+0x314>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 8003d66:	e001      	b.n	8003d6c <voltage_monitor_init+0x318>
 8003d68:	24000bf8 	.word	0x24000bf8
	rail_monitor[RAIL_n800v].data = 0;
 8003d6c:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <voltage_monitor_init+0x378>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 8003d74:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <voltage_monitor_init+0x378>)
 8003d76:	f640 5208 	movw	r2, #3336	; 0xd08
 8003d7a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8003d7e:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <voltage_monitor_init+0x378>)
 8003d80:	f640 32ca 	movw	r2, #3018	; 0xbca
 8003d84:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8003d88:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <voltage_monitor_init+0x378>)
 8003d8a:	2211      	movs	r2, #17
 8003d8c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8003d90:	4b0e      	ldr	r3, [pc, #56]	; (8003dcc <voltage_monitor_init+0x378>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <voltage_monitor_init+0x378>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <voltage_monitor_init+0x378>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003da8:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <voltage_monitor_init+0x378>)
 8003daa:	f242 7210 	movw	r2, #10000	; 0x2710
 8003dae:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <voltage_monitor_init+0x378>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	71fb      	strb	r3, [r7, #7]

	return status;
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	24000bf8 	.word	0x24000bf8

08003dd0 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	460a      	mov	r2, r1
 8003dda:	71fb      	strb	r3, [r7, #7]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8003de4:	79fa      	ldrb	r2, [r7, #7]
 8003de6:	4909      	ldr	r1, [pc, #36]	; (8003e0c <set_rail_monitor_enable+0x3c>)
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	440b      	add	r3, r1
 8003df2:	3302      	adds	r3, #2
 8003df4:	79ba      	ldrb	r2, [r7, #6]
 8003df6:	701a      	strb	r2, [r3, #0]
	status = 1;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]

	return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	24000bf8 	.word	0x24000bf8

08003e10 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
	return rail_monitor;
 8003e14:	4b02      	ldr	r3, [pc, #8]	; (8003e20 <get_rail_monitor+0x10>)
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	24000bf8 	.word	0x24000bf8

08003e24 <set_rail_monitor>:

uint8_t set_rail_monitor() {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	73fb      	strb	r3, [r7, #15]
	uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 8003e2e:	2014      	movs	r0, #20
 8003e30:	f012 fc36 	bl	80166a0 <malloc>
 8003e34:	4603      	mov	r3, r0
 8003e36:	60bb      	str	r3, [r7, #8]
	uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8003e38:	2008      	movs	r0, #8
 8003e3a:	f012 fc31 	bl	80166a0 <malloc>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	607b      	str	r3, [r7, #4]
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8003e42:	2008      	movs	r0, #8
 8003e44:	f012 fc2c 	bl	80166a0 <malloc>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	603b      	str	r3, [r7, #0]

	sample_hk_i2c(hk_i2c);
 8003e4c:	6838      	ldr	r0, [r7, #0]
 8003e4e:	f7fe fd5d 	bl	800290c <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8003e52:	68b8      	ldr	r0, [r7, #8]
 8003e54:	f7fe fd8a 	bl	800296c <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7fe fdd9 	bl	8002a10 <sample_hk_adc3>

	rail_monitor[RAIL_vsense].data = hk_adc3[1];
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	885a      	ldrh	r2, [r3, #2]
 8003e62:	4b36      	ldr	r3, [pc, #216]	; (8003f3c <set_rail_monitor+0x118>)
 8003e64:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vrefint].data = hk_adc3[0];
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	881a      	ldrh	r2, [r3, #0]
 8003e6a:	4b34      	ldr	r3, [pc, #208]	; (8003f3c <set_rail_monitor+0x118>)
 8003e6c:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_TEMP1].data = hk_i2c[0];
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <set_rail_monitor+0x118>)
 8003e78:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP2].data = hk_i2c[1];
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <set_rail_monitor+0x118>)
 8003e86:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP3].data = hk_i2c[2];
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <set_rail_monitor+0x118>)
 8003e94:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP4].data = hk_i2c[3];
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	3306      	adds	r3, #6
 8003e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <set_rail_monitor+0x118>)
 8003ea2:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_busvmon].data = hk_adc1[0];
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	881a      	ldrh	r2, [r3, #0]
 8003ea8:	4b24      	ldr	r3, [pc, #144]	; (8003f3c <set_rail_monitor+0x118>)
 8003eaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busimon].data = hk_adc1[1];
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	885a      	ldrh	r2, [r3, #2]
 8003eb2:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <set_rail_monitor+0x118>)
 8003eb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_2v5].data = hk_adc1[2];
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	889a      	ldrh	r2, [r3, #4]
 8003ebc:	4b1f      	ldr	r3, [pc, #124]	; (8003f3c <set_rail_monitor+0x118>)
 8003ebe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_3v3].data = hk_adc3[3];
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	88da      	ldrh	r2, [r3, #6]
 8003ec6:	4b1d      	ldr	r3, [pc, #116]	; (8003f3c <set_rail_monitor+0x118>)
 8003ec8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_5v].data = hk_adc1[6];
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	899a      	ldrh	r2, [r3, #12]
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <set_rail_monitor+0x118>)
 8003ed2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_n3v3].data = hk_adc1[3];
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	88da      	ldrh	r2, [r3, #6]
 8003eda:	4b18      	ldr	r3, [pc, #96]	; (8003f3c <set_rail_monitor+0x118>)
 8003edc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n5v].data = hk_adc3[2];
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	889a      	ldrh	r2, [r3, #4]
 8003ee4:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <set_rail_monitor+0x118>)
 8003ee6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_15v].data = hk_adc1[7];
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	89da      	ldrh	r2, [r3, #14]
 8003eee:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <set_rail_monitor+0x118>)
 8003ef0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_5vref].data = hk_adc1[8];
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	8a1a      	ldrh	r2, [r3, #16]
 8003ef8:	4b10      	ldr	r3, [pc, #64]	; (8003f3c <set_rail_monitor+0x118>)
 8003efa:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_n200v].data = hk_adc1[4];
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	891a      	ldrh	r2, [r3, #8]
 8003f02:	4b0e      	ldr	r3, [pc, #56]	; (8003f3c <set_rail_monitor+0x118>)
 8003f04:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n800v].data = hk_adc1[5];
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	895a      	ldrh	r2, [r3, #10]
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <set_rail_monitor+0x118>)
 8003f0e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_TMP1].data = hk_adc1[9];
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	8a5a      	ldrh	r2, [r3, #18]
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <set_rail_monitor+0x118>)
 8003f18:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	free(hk_adc1);
 8003f1c:	68b8      	ldr	r0, [r7, #8]
 8003f1e:	f012 fbc7 	bl	80166b0 <free>
	free(hk_adc3);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f012 fbc4 	bl	80166b0 <free>
	free(hk_i2c);
 8003f28:	6838      	ldr	r0, [r7, #0]
 8003f2a:	f012 fbc1 	bl	80166b0 <free>

	status = 1;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	73fb      	strb	r3, [r7, #15]

	return status;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	24000bf8 	.word	0x24000bf8

08003f40 <in_range>:


uint8_t in_range(uint16_t raw, int min, int max) {
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 8003f4e:	89fb      	ldrh	r3, [r7, #14]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	db05      	blt.n	8003f62 <in_range+0x22>
 8003f56:	89fb      	ldrh	r3, [r7, #14]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	dc01      	bgt.n	8003f62 <in_range+0x22>
		return 1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <in_range+0x24>
	}
	return 0;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fa8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f74:	f7ff f90c 	bl	8003190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f78:	480c      	ldr	r0, [pc, #48]	; (8003fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f7a:	490d      	ldr	r1, [pc, #52]	; (8003fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f80:	e002      	b.n	8003f88 <LoopCopyDataInit>

08003f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f86:	3304      	adds	r3, #4

08003f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f8c:	d3f9      	bcc.n	8003f82 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f8e:	4a0a      	ldr	r2, [pc, #40]	; (8003fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f90:	4c0a      	ldr	r4, [pc, #40]	; (8003fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f94:	e001      	b.n	8003f9a <LoopFillZerobss>

08003f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f98:	3204      	adds	r2, #4

08003f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f9c:	d3fb      	bcc.n	8003f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f9e:	f012 fb5b 	bl	8016658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fa2:	f7fd feb5 	bl	8001d10 <main>
  bx  lr
 8003fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fa8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003fac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003fb0:	24000104 	.word	0x24000104
  ldr r2, =_sidata
 8003fb4:	080175dc 	.word	0x080175dc
  ldr r2, =_sbss
 8003fb8:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8003fbc:	24005610 	.word	0x24005610

08003fc0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fc0:	e7fe      	b.n	8003fc0 <ADC3_IRQHandler>
	...

08003fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fca:	2003      	movs	r0, #3
 8003fcc:	f001 fd39 	bl	8005a42 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fd0:	f006 fdf0 	bl	800abb4 <HAL_RCC_GetSysClockFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b15      	ldr	r3, [pc, #84]	; (800402c <HAL_Init+0x68>)
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	0a1b      	lsrs	r3, r3, #8
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	4913      	ldr	r1, [pc, #76]	; (8004030 <HAL_Init+0x6c>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fee:	4b0f      	ldr	r3, [pc, #60]	; (800402c <HAL_Init+0x68>)
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	4a0e      	ldr	r2, [pc, #56]	; (8004030 <HAL_Init+0x6c>)
 8003ff8:	5cd3      	ldrb	r3, [r2, r3]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
 8004004:	4a0b      	ldr	r2, [pc, #44]	; (8004034 <HAL_Init+0x70>)
 8004006:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004008:	4a0b      	ldr	r2, [pc, #44]	; (8004038 <HAL_Init+0x74>)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800400e:	2005      	movs	r0, #5
 8004010:	f7fe feee 	bl	8002df0 <HAL_InitTick>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e002      	b.n	8004024 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800401e:	f7fe fec9 	bl	8002db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	58024400 	.word	0x58024400
 8004030:	08017528 	.word	0x08017528
 8004034:	24000090 	.word	0x24000090
 8004038:	2400008c 	.word	0x2400008c

0800403c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004040:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_IncTick+0x20>)
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_IncTick+0x24>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4413      	add	r3, r2
 800404c:	4a04      	ldr	r2, [pc, #16]	; (8004060 <HAL_IncTick+0x24>)
 800404e:	6013      	str	r3, [r2, #0]
}
 8004050:	bf00      	nop
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	24000098 	.word	0x24000098
 8004060:	24000cac 	.word	0x24000cac

08004064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return uwTick;
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_GetTick+0x14>)
 800406a:	681b      	ldr	r3, [r3, #0]
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	24000cac 	.word	0x24000cac

0800407c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004080:	4b03      	ldr	r3, [pc, #12]	; (8004090 <HAL_GetREVID+0x14>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	0c1b      	lsrs	r3, r3, #16
}
 8004086:	4618      	mov	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	5c001000 	.word	0x5c001000

08004094 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800409e:	4b07      	ldr	r3, [pc, #28]	; (80040bc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	401a      	ands	r2, r3
 80040a8:	4904      	ldr	r1, [pc, #16]	; (80040bc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	604b      	str	r3, [r1, #4]
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	58000400 	.word	0x58000400

080040c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	609a      	str	r2, [r3, #8]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	609a      	str	r2, [r3, #8]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3360      	adds	r3, #96	; 0x60
 800413a:	461a      	mov	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4413      	add	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	430b      	orrs	r3, r1
 8004156:	431a      	orrs	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	fa01 f303 	lsl.w	r3, r1, r3
 8004188:	431a      	orrs	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	611a      	str	r2, [r3, #16]
}
 800418e:	bf00      	nop
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800419a:	b480      	push	{r7}
 800419c:	b087      	sub	sp, #28
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3360      	adds	r3, #96	; 0x60
 80041aa:	461a      	mov	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	431a      	orrs	r2, r3
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	601a      	str	r2, [r3, #0]
  }
}
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b087      	sub	sp, #28
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3330      	adds	r3, #48	; 0x30
 8004206:	461a      	mov	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	0a1b      	lsrs	r3, r3, #8
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	4413      	add	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	211f      	movs	r1, #31
 8004222:	fa01 f303 	lsl.w	r3, r1, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	401a      	ands	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0e9b      	lsrs	r3, r3, #26
 800422e:	f003 011f 	and.w	r1, r3, #31
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 031f 	and.w	r3, r3, #31
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	431a      	orrs	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f023 0203 	bic.w	r2, r3, #3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	60da      	str	r2, [r3, #12]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3314      	adds	r3, #20
 8004284:	461a      	mov	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	0e5b      	lsrs	r3, r3, #25
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	4413      	add	r3, r2
 8004292:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	0d1b      	lsrs	r3, r3, #20
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	2107      	movs	r1, #7
 80042a2:	fa01 f303 	lsl.w	r3, r1, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	401a      	ands	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	0d1b      	lsrs	r3, r3, #20
 80042ae:	f003 031f 	and.w	r3, r3, #31
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	fa01 f303 	lsl.w	r3, r1, r3
 80042b8:	431a      	orrs	r2, r3
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80042be:	bf00      	nop
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
	...

080042cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e4:	43db      	mvns	r3, r3
 80042e6:	401a      	ands	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f003 0318 	and.w	r3, r3, #24
 80042ee:	4908      	ldr	r1, [pc, #32]	; (8004310 <LL_ADC_SetChannelSingleDiff+0x44>)
 80042f0:	40d9      	lsrs	r1, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	400b      	ands	r3, r1
 80042f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042fa:	431a      	orrs	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	000fffff 	.word	0x000fffff

08004314 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 031f 	and.w	r3, r3, #31
}
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	4b04      	ldr	r3, [pc, #16]	; (8004350 <LL_ADC_DisableDeepPowerDown+0x20>)
 800433e:	4013      	ands	r3, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6093      	str	r3, [r2, #8]
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	5fffffc0 	.word	0x5fffffc0

08004354 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004368:	d101      	bne.n	800436e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	4b05      	ldr	r3, [pc, #20]	; (80043a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800438a:	4013      	ands	r3, r2
 800438c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	6fffffc0 	.word	0x6fffffc0

080043a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043b8:	d101      	bne.n	80043be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <LL_ADC_Enable+0x24>)
 80043da:	4013      	ands	r3, r2
 80043dc:	f043 0201 	orr.w	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	7fffffc0 	.word	0x7fffffc0

080043f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <LL_ADC_Disable+0x24>)
 8004402:	4013      	ands	r3, r2
 8004404:	f043 0202 	orr.w	r2, r3, #2
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	7fffffc0 	.word	0x7fffffc0

0800441c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <LL_ADC_IsEnabled+0x18>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <LL_ADC_IsEnabled+0x1a>
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004442:	b480      	push	{r7}
 8004444:	b083      	sub	sp, #12
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b02      	cmp	r3, #2
 8004454:	d101      	bne.n	800445a <LL_ADC_IsDisableOngoing+0x18>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <LL_ADC_IsDisableOngoing+0x1a>
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <LL_ADC_REG_StartConversion+0x24>)
 8004476:	4013      	ands	r3, r2
 8004478:	f043 0204 	orr.w	r2, r3, #4
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	7fffffc0 	.word	0x7fffffc0

08004490 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d101      	bne.n	80044a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b08      	cmp	r3, #8
 80044c8:	d101      	bne.n	80044ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044dc:	b590      	push	{r4, r7, lr}
 80044de:	b089      	sub	sp, #36	; 0x24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e18f      	b.n	8004816 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fc fa21 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff ff19 	bl	8004354 <LL_ADC_IsDeepPowerDownEnabled>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d004      	beq.n	8004532 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff feff 	bl	8004330 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ff34 	bl	80043a4 <LL_ADC_IsInternalRegulatorEnabled>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d114      	bne.n	800456c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff ff18 	bl	800437c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800454c:	4b87      	ldr	r3, [pc, #540]	; (800476c <HAL_ADC_Init+0x290>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	099b      	lsrs	r3, r3, #6
 8004552:	4a87      	ldr	r2, [pc, #540]	; (8004770 <HAL_ADC_Init+0x294>)
 8004554:	fba2 2303 	umull	r2, r3, r2, r3
 8004558:	099b      	lsrs	r3, r3, #6
 800455a:	3301      	adds	r3, #1
 800455c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800455e:	e002      	b.n	8004566 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	3b01      	subs	r3, #1
 8004564:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f9      	bne.n	8004560 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff ff17 	bl	80043a4 <LL_ADC_IsInternalRegulatorEnabled>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10d      	bne.n	8004598 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	f043 0210 	orr.w	r2, r3, #16
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458c:	f043 0201 	orr.w	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff ff77 	bl	8004490 <LL_ADC_REG_IsConversionOngoing>
 80045a2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f040 8129 	bne.w	8004804 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f040 8125 	bne.w	8004804 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80045c2:	f043 0202 	orr.w	r2, r3, #2
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff ff24 	bl	800441c <LL_ADC_IsEnabled>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d136      	bne.n	8004648 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a65      	ldr	r2, [pc, #404]	; (8004774 <HAL_ADC_Init+0x298>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d004      	beq.n	80045ee <HAL_ADC_Init+0x112>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a63      	ldr	r2, [pc, #396]	; (8004778 <HAL_ADC_Init+0x29c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d10e      	bne.n	800460c <HAL_ADC_Init+0x130>
 80045ee:	4861      	ldr	r0, [pc, #388]	; (8004774 <HAL_ADC_Init+0x298>)
 80045f0:	f7ff ff14 	bl	800441c <LL_ADC_IsEnabled>
 80045f4:	4604      	mov	r4, r0
 80045f6:	4860      	ldr	r0, [pc, #384]	; (8004778 <HAL_ADC_Init+0x29c>)
 80045f8:	f7ff ff10 	bl	800441c <LL_ADC_IsEnabled>
 80045fc:	4603      	mov	r3, r0
 80045fe:	4323      	orrs	r3, r4
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e008      	b.n	800461e <HAL_ADC_Init+0x142>
 800460c:	485b      	ldr	r0, [pc, #364]	; (800477c <HAL_ADC_Init+0x2a0>)
 800460e:	f7ff ff05 	bl	800441c <LL_ADC_IsEnabled>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d012      	beq.n	8004648 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a53      	ldr	r2, [pc, #332]	; (8004774 <HAL_ADC_Init+0x298>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_ADC_Init+0x15a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a51      	ldr	r2, [pc, #324]	; (8004778 <HAL_ADC_Init+0x29c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d101      	bne.n	800463a <HAL_ADC_Init+0x15e>
 8004636:	4a52      	ldr	r2, [pc, #328]	; (8004780 <HAL_ADC_Init+0x2a4>)
 8004638:	e000      	b.n	800463c <HAL_ADC_Init+0x160>
 800463a:	4a52      	ldr	r2, [pc, #328]	; (8004784 <HAL_ADC_Init+0x2a8>)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f7ff fd3c 	bl	80040c0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004648:	f7ff fd18 	bl	800407c <HAL_GetREVID>
 800464c:	4603      	mov	r3, r0
 800464e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004652:	4293      	cmp	r3, r2
 8004654:	d914      	bls.n	8004680 <HAL_ADC_Init+0x1a4>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2b10      	cmp	r3, #16
 800465c:	d110      	bne.n	8004680 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	7d5b      	ldrb	r3, [r3, #21]
 8004662:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004668:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800466e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	7f1b      	ldrb	r3, [r3, #28]
 8004674:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004676:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004678:	f043 030c 	orr.w	r3, r3, #12
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	e00d      	b.n	800469c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	7d5b      	ldrb	r3, [r3, #21]
 8004684:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800468a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004690:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	7f1b      	ldrb	r3, [r3, #28]
 8004696:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	7f1b      	ldrb	r3, [r3, #28]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d106      	bne.n	80046b2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	045b      	lsls	r3, r3, #17
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	4b2c      	ldr	r3, [pc, #176]	; (8004788 <HAL_ADC_Init+0x2ac>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	69b9      	ldr	r1, [r7, #24]
 80046de:	430b      	orrs	r3, r1
 80046e0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fed2 	bl	8004490 <LL_ADC_REG_IsConversionOngoing>
 80046ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff fedf 	bl	80044b6 <LL_ADC_INJ_IsConversionOngoing>
 80046f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d15f      	bne.n	80047c0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d15c      	bne.n	80047c0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	7d1b      	ldrb	r3, [r3, #20]
 800470a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004710:	4313      	orrs	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	4b1c      	ldr	r3, [pc, #112]	; (800478c <HAL_ADC_Init+0x2b0>)
 800471c:	4013      	ands	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	69b9      	ldr	r1, [r7, #24]
 8004724:	430b      	orrs	r3, r1
 8004726:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800472e:	2b01      	cmp	r3, #1
 8004730:	d130      	bne.n	8004794 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	4b14      	ldr	r3, [pc, #80]	; (8004790 <HAL_ADC_Init+0x2b4>)
 8004740:	4013      	ands	r3, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004746:	3a01      	subs	r2, #1
 8004748:	0411      	lsls	r1, r2, #16
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800474e:	4311      	orrs	r1, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004754:	4311      	orrs	r1, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800475a:	430a      	orrs	r2, r1
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	611a      	str	r2, [r3, #16]
 8004768:	e01c      	b.n	80047a4 <HAL_ADC_Init+0x2c8>
 800476a:	bf00      	nop
 800476c:	2400008c 	.word	0x2400008c
 8004770:	053e2d63 	.word	0x053e2d63
 8004774:	40022000 	.word	0x40022000
 8004778:	40022100 	.word	0x40022100
 800477c:	58026000 	.word	0x58026000
 8004780:	40022300 	.word	0x40022300
 8004784:	58026300 	.word	0x58026300
 8004788:	fff0c003 	.word	0xfff0c003
 800478c:	ffffbffc 	.word	0xffffbffc
 8004790:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fdec 	bl	8005398 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10c      	bne.n	80047e2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	f023 010f 	bic.w	r1, r3, #15
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	1e5a      	subs	r2, r3, #1
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
 80047e0:	e007      	b.n	80047f2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 020f 	bic.w	r2, r2, #15
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	f043 0201 	orr.w	r2, r3, #1
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
 8004802:	e007      	b.n	8004814 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004808:	f043 0210 	orr.w	r2, r3, #16
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004814:	7ffb      	ldrb	r3, [r7, #31]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3724      	adds	r7, #36	; 0x24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd90      	pop	{r4, r7, pc}
 800481e:	bf00      	nop

08004820 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a55      	ldr	r2, [pc, #340]	; (8004988 <HAL_ADC_Start_DMA+0x168>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d004      	beq.n	8004840 <HAL_ADC_Start_DMA+0x20>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a54      	ldr	r2, [pc, #336]	; (800498c <HAL_ADC_Start_DMA+0x16c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d101      	bne.n	8004844 <HAL_ADC_Start_DMA+0x24>
 8004840:	4b53      	ldr	r3, [pc, #332]	; (8004990 <HAL_ADC_Start_DMA+0x170>)
 8004842:	e000      	b.n	8004846 <HAL_ADC_Start_DMA+0x26>
 8004844:	4b53      	ldr	r3, [pc, #332]	; (8004994 <HAL_ADC_Start_DMA+0x174>)
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fd64 	bl	8004314 <LL_ADC_GetMultimode>
 800484c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7ff fe1c 	bl	8004490 <LL_ADC_REG_IsConversionOngoing>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 808c 	bne.w	8004978 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_ADC_Start_DMA+0x4e>
 800486a:	2302      	movs	r3, #2
 800486c:	e087      	b.n	800497e <HAL_ADC_Start_DMA+0x15e>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b05      	cmp	r3, #5
 8004880:	d002      	beq.n	8004888 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b09      	cmp	r3, #9
 8004886:	d170      	bne.n	800496a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fc07 	bl	800509c <ADC_Enable>
 800488e:	4603      	mov	r3, r0
 8004890:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004892:	7dfb      	ldrb	r3, [r7, #23]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d163      	bne.n	8004960 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800489c:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <HAL_ADC_Start_DMA+0x178>)
 800489e:	4013      	ands	r3, r2
 80048a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a37      	ldr	r2, [pc, #220]	; (800498c <HAL_ADC_Start_DMA+0x16c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d002      	beq.n	80048b8 <HAL_ADC_Start_DMA+0x98>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	e000      	b.n	80048ba <HAL_ADC_Start_DMA+0x9a>
 80048b8:	4b33      	ldr	r3, [pc, #204]	; (8004988 <HAL_ADC_Start_DMA+0x168>)
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	4293      	cmp	r3, r2
 80048c0:	d002      	beq.n	80048c8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d105      	bne.n	80048d4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d006      	beq.n	80048ee <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e4:	f023 0206 	bic.w	r2, r3, #6
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	659a      	str	r2, [r3, #88]	; 0x58
 80048ec:	e002      	b.n	80048f4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f8:	4a28      	ldr	r2, [pc, #160]	; (800499c <HAL_ADC_Start_DMA+0x17c>)
 80048fa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004900:	4a27      	ldr	r2, [pc, #156]	; (80049a0 <HAL_ADC_Start_DMA+0x180>)
 8004902:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004908:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <HAL_ADC_Start_DMA+0x184>)
 800490a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	221c      	movs	r2, #28
 8004912:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0210 	orr.w	r2, r2, #16
 800492a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f7ff fc89 	bl	800424e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3340      	adds	r3, #64	; 0x40
 8004946:	4619      	mov	r1, r3
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f002 f80e 	bl	800696c <HAL_DMA_Start_IT>
 8004950:	4603      	mov	r3, r0
 8004952:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fd85 	bl	8004468 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800495e:	e00d      	b.n	800497c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004968:	e008      	b.n	800497c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004976:	e001      	b.n	800497c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004978:	2302      	movs	r3, #2
 800497a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800497c:	7dfb      	ldrb	r3, [r7, #23]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3718      	adds	r7, #24
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40022000 	.word	0x40022000
 800498c:	40022100 	.word	0x40022100
 8004990:	40022300 	.word	0x40022300
 8004994:	58026300 	.word	0x58026300
 8004998:	fffff0fe 	.word	0xfffff0fe
 800499c:	0800526f 	.word	0x0800526f
 80049a0:	08005347 	.word	0x08005347
 80049a4:	08005363 	.word	0x08005363

080049a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b0a1      	sub	sp, #132	; 0x84
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4a65      	ldr	r2, [pc, #404]	; (8004b94 <HAL_ADC_ConfigChannel+0x1b0>)
 80049fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x2a>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e32e      	b.n	800506c <HAL_ADC_ConfigChannel+0x688>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fd38 	bl	8004490 <LL_ADC_REG_IsConversionOngoing>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f040 8313 	bne.w	800504e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	db2c      	blt.n	8004a8a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d108      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x6a>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	0e9b      	lsrs	r3, r3, #26
 8004a42:	f003 031f 	and.w	r3, r3, #31
 8004a46:	2201      	movs	r2, #1
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	e016      	b.n	8004a7c <HAL_ADC_ConfigChannel+0x98>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a56:	fa93 f3a3 	rbit	r3, r3
 8004a5a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a5e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004a66:	2320      	movs	r3, #32
 8004a68:	e003      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a6c:	fab3 f383 	clz	r3, r3
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	f003 031f 	and.w	r3, r3, #31
 8004a76:	2201      	movs	r2, #1
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	69d1      	ldr	r1, [r2, #28]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	430b      	orrs	r3, r1
 8004a88:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6859      	ldr	r1, [r3, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f7ff fbad 	bl	80041f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff fcf5 	bl	8004490 <LL_ADC_REG_IsConversionOngoing>
 8004aa6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff fd02 	bl	80044b6 <LL_ADC_INJ_IsConversionOngoing>
 8004ab2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f040 80b8 	bne.w	8004c2c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f040 80b4 	bne.w	8004c2c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	6819      	ldr	r1, [r3, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f7ff fbcf 	bl	8004274 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004ad6:	4b30      	ldr	r3, [pc, #192]	; (8004b98 <HAL_ADC_ConfigChannel+0x1b4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004ade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ae2:	d10b      	bne.n	8004afc <HAL_ADC_ConfigChannel+0x118>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	e01d      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x154>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x13e>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	089b      	lsrs	r3, r3, #2
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	e00a      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x154>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	695a      	ldr	r2, [r3, #20]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	089b      	lsrs	r3, r3, #2
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d02c      	beq.n	8004b9c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6818      	ldr	r0, [r3, #0]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	6919      	ldr	r1, [r3, #16]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b50:	f7ff faea 	bl	8004128 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6919      	ldr	r1, [r3, #16]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	7e5b      	ldrb	r3, [r3, #25]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d102      	bne.n	8004b6a <HAL_ADC_ConfigChannel+0x186>
 8004b64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b68:	e000      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x188>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	f7ff fb14 	bl	800419a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6919      	ldr	r1, [r3, #16]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	7e1b      	ldrb	r3, [r3, #24]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d102      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x1a4>
 8004b82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b86:	e000      	b.n	8004b8a <HAL_ADC_ConfigChannel+0x1a6>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f7ff faec 	bl	8004168 <LL_ADC_SetDataRightShift>
 8004b90:	e04c      	b.n	8004c2c <HAL_ADC_ConfigChannel+0x248>
 8004b92:	bf00      	nop
 8004b94:	47ff0000 	.word	0x47ff0000
 8004b98:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	069b      	lsls	r3, r3, #26
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d107      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bbe:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	069b      	lsls	r3, r3, #26
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d107      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004be2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	069b      	lsls	r3, r3, #26
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d107      	bne.n	8004c08 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c06:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	069b      	lsls	r3, r3, #26
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d107      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c2a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff fbf3 	bl	800441c <LL_ADC_IsEnabled>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f040 8211 	bne.w	8005060 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6819      	ldr	r1, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f7ff fb3e 	bl	80042cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	4aa1      	ldr	r2, [pc, #644]	; (8004edc <HAL_ADC_ConfigChannel+0x4f8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	f040 812e 	bne.w	8004eb8 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10b      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x2a0>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	0e9b      	lsrs	r3, r3, #26
 8004c72:	3301      	adds	r3, #1
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	2b09      	cmp	r3, #9
 8004c7a:	bf94      	ite	ls
 8004c7c:	2301      	movls	r3, #1
 8004c7e:	2300      	movhi	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	e019      	b.n	8004cb8 <HAL_ADC_ConfigChannel+0x2d4>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c8c:	fa93 f3a3 	rbit	r3, r3
 8004c90:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004c9c:	2320      	movs	r3, #32
 8004c9e:	e003      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca2:	fab3 f383 	clz	r3, r3
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	2b09      	cmp	r3, #9
 8004cb0:	bf94      	ite	ls
 8004cb2:	2301      	movls	r3, #1
 8004cb4:	2300      	movhi	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d079      	beq.n	8004db0 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d107      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x2f4>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	0e9b      	lsrs	r3, r3, #26
 8004cce:	3301      	adds	r3, #1
 8004cd0:	069b      	lsls	r3, r3, #26
 8004cd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cd6:	e015      	b.n	8004d04 <HAL_ADC_ConfigChannel+0x320>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce0:	fa93 f3a3 	rbit	r3, r3
 8004ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004cf0:	2320      	movs	r3, #32
 8004cf2:	e003      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf6:	fab3 f383 	clz	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	069b      	lsls	r3, r3, #26
 8004d00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x340>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	0e9b      	lsrs	r3, r3, #26
 8004d16:	3301      	adds	r3, #1
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d22:	e017      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x370>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d34:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004d3c:	2320      	movs	r3, #32
 8004d3e:	e003      	b.n	8004d48 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d42:	fab3 f383 	clz	r3, r3
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	3301      	adds	r3, #1
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	2101      	movs	r1, #1
 8004d50:	fa01 f303 	lsl.w	r3, r1, r3
 8004d54:	ea42 0103 	orr.w	r1, r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10a      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x396>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	0e9b      	lsrs	r3, r3, #26
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f003 021f 	and.w	r2, r3, #31
 8004d70:	4613      	mov	r3, r2
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	4413      	add	r3, r2
 8004d76:	051b      	lsls	r3, r3, #20
 8004d78:	e018      	b.n	8004dac <HAL_ADC_ConfigChannel+0x3c8>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d82:	fa93 f3a3 	rbit	r3, r3
 8004d86:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8004d92:	2320      	movs	r3, #32
 8004d94:	e003      	b.n	8004d9e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	fab3 f383 	clz	r3, r3
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	3301      	adds	r3, #1
 8004da0:	f003 021f 	and.w	r2, r3, #31
 8004da4:	4613      	mov	r3, r2
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	4413      	add	r3, r2
 8004daa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dac:	430b      	orrs	r3, r1
 8004dae:	e07e      	b.n	8004eae <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d107      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x3e8>
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	0e9b      	lsrs	r3, r3, #26
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	069b      	lsls	r3, r3, #26
 8004dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dca:	e015      	b.n	8004df8 <HAL_ADC_ConfigChannel+0x414>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	fa93 f3a3 	rbit	r3, r3
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8004de4:	2320      	movs	r3, #32
 8004de6:	e003      	b.n	8004df0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	fab3 f383 	clz	r3, r3
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	3301      	adds	r3, #1
 8004df2:	069b      	lsls	r3, r3, #26
 8004df4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x434>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	0e9b      	lsrs	r3, r3, #26
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	f003 031f 	and.w	r3, r3, #31
 8004e10:	2101      	movs	r1, #1
 8004e12:	fa01 f303 	lsl.w	r3, r1, r3
 8004e16:	e017      	b.n	8004e48 <HAL_ADC_ConfigChannel+0x464>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	fa93 f3a3 	rbit	r3, r3
 8004e24:	61bb      	str	r3, [r7, #24]
  return result;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004e30:	2320      	movs	r3, #32
 8004e32:	e003      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	fab3 f383 	clz	r3, r3
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	2101      	movs	r1, #1
 8004e44:	fa01 f303 	lsl.w	r3, r1, r3
 8004e48:	ea42 0103 	orr.w	r1, r2, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10d      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x490>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	0e9b      	lsrs	r3, r3, #26
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f003 021f 	and.w	r2, r3, #31
 8004e64:	4613      	mov	r3, r2
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	4413      	add	r3, r2
 8004e6a:	3b1e      	subs	r3, #30
 8004e6c:	051b      	lsls	r3, r3, #20
 8004e6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e72:	e01b      	b.n	8004eac <HAL_ADC_ConfigChannel+0x4c8>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	fa93 f3a3 	rbit	r3, r3
 8004e80:	60fb      	str	r3, [r7, #12]
  return result;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004e8c:	2320      	movs	r3, #32
 8004e8e:	e003      	b.n	8004e98 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	fab3 f383 	clz	r3, r3
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	3301      	adds	r3, #1
 8004e9a:	f003 021f 	and.w	r2, r3, #31
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	4413      	add	r3, r2
 8004ea4:	3b1e      	subs	r3, #30
 8004ea6:	051b      	lsls	r3, r3, #20
 8004ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eac:	430b      	orrs	r3, r1
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	6892      	ldr	r2, [r2, #8]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	f7ff f9de 	bl	8004274 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f280 80cf 	bge.w	8005060 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a06      	ldr	r2, [pc, #24]	; (8004ee0 <HAL_ADC_ConfigChannel+0x4fc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d004      	beq.n	8004ed6 <HAL_ADC_ConfigChannel+0x4f2>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a04      	ldr	r2, [pc, #16]	; (8004ee4 <HAL_ADC_ConfigChannel+0x500>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d10a      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x508>
 8004ed6:	4b04      	ldr	r3, [pc, #16]	; (8004ee8 <HAL_ADC_ConfigChannel+0x504>)
 8004ed8:	e009      	b.n	8004eee <HAL_ADC_ConfigChannel+0x50a>
 8004eda:	bf00      	nop
 8004edc:	47ff0000 	.word	0x47ff0000
 8004ee0:	40022000 	.word	0x40022000
 8004ee4:	40022100 	.word	0x40022100
 8004ee8:	40022300 	.word	0x40022300
 8004eec:	4b61      	ldr	r3, [pc, #388]	; (8005074 <HAL_ADC_ConfigChannel+0x690>)
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff f90c 	bl	800410c <LL_ADC_GetCommonPathInternalCh>
 8004ef4:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a5f      	ldr	r2, [pc, #380]	; (8005078 <HAL_ADC_ConfigChannel+0x694>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d004      	beq.n	8004f0a <HAL_ADC_ConfigChannel+0x526>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a5d      	ldr	r2, [pc, #372]	; (800507c <HAL_ADC_ConfigChannel+0x698>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d10e      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x544>
 8004f0a:	485b      	ldr	r0, [pc, #364]	; (8005078 <HAL_ADC_ConfigChannel+0x694>)
 8004f0c:	f7ff fa86 	bl	800441c <LL_ADC_IsEnabled>
 8004f10:	4604      	mov	r4, r0
 8004f12:	485a      	ldr	r0, [pc, #360]	; (800507c <HAL_ADC_ConfigChannel+0x698>)
 8004f14:	f7ff fa82 	bl	800441c <LL_ADC_IsEnabled>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	4323      	orrs	r3, r4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	e008      	b.n	8004f3a <HAL_ADC_ConfigChannel+0x556>
 8004f28:	4855      	ldr	r0, [pc, #340]	; (8005080 <HAL_ADC_ConfigChannel+0x69c>)
 8004f2a:	f7ff fa77 	bl	800441c <LL_ADC_IsEnabled>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bf0c      	ite	eq
 8004f34:	2301      	moveq	r3, #1
 8004f36:	2300      	movne	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d07d      	beq.n	800503a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a50      	ldr	r2, [pc, #320]	; (8005084 <HAL_ADC_ConfigChannel+0x6a0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d130      	bne.n	8004faa <HAL_ADC_ConfigChannel+0x5c6>
 8004f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d12b      	bne.n	8004faa <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a4a      	ldr	r2, [pc, #296]	; (8005080 <HAL_ADC_ConfigChannel+0x69c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	f040 8081 	bne.w	8005060 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a45      	ldr	r2, [pc, #276]	; (8005078 <HAL_ADC_ConfigChannel+0x694>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d004      	beq.n	8004f72 <HAL_ADC_ConfigChannel+0x58e>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a43      	ldr	r2, [pc, #268]	; (800507c <HAL_ADC_ConfigChannel+0x698>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d101      	bne.n	8004f76 <HAL_ADC_ConfigChannel+0x592>
 8004f72:	4a45      	ldr	r2, [pc, #276]	; (8005088 <HAL_ADC_ConfigChannel+0x6a4>)
 8004f74:	e000      	b.n	8004f78 <HAL_ADC_ConfigChannel+0x594>
 8004f76:	4a3f      	ldr	r2, [pc, #252]	; (8005074 <HAL_ADC_ConfigChannel+0x690>)
 8004f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f7ff f8b0 	bl	80040e6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f86:	4b41      	ldr	r3, [pc, #260]	; (800508c <HAL_ADC_ConfigChannel+0x6a8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	099b      	lsrs	r3, r3, #6
 8004f8c:	4a40      	ldr	r2, [pc, #256]	; (8005090 <HAL_ADC_ConfigChannel+0x6ac>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	099b      	lsrs	r3, r3, #6
 8004f94:	3301      	adds	r3, #1
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f9a:	e002      	b.n	8004fa2 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1f9      	bne.n	8004f9c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fa8:	e05a      	b.n	8005060 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a39      	ldr	r2, [pc, #228]	; (8005094 <HAL_ADC_ConfigChannel+0x6b0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d11e      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x60e>
 8004fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d119      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2f      	ldr	r2, [pc, #188]	; (8005080 <HAL_ADC_ConfigChannel+0x69c>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d14b      	bne.n	8005060 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2a      	ldr	r2, [pc, #168]	; (8005078 <HAL_ADC_ConfigChannel+0x694>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_ADC_ConfigChannel+0x5f8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a29      	ldr	r2, [pc, #164]	; (800507c <HAL_ADC_ConfigChannel+0x698>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d101      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x5fc>
 8004fdc:	4a2a      	ldr	r2, [pc, #168]	; (8005088 <HAL_ADC_ConfigChannel+0x6a4>)
 8004fde:	e000      	b.n	8004fe2 <HAL_ADC_ConfigChannel+0x5fe>
 8004fe0:	4a24      	ldr	r2, [pc, #144]	; (8005074 <HAL_ADC_ConfigChannel+0x690>)
 8004fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f7ff f87b 	bl	80040e6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ff0:	e036      	b.n	8005060 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a28      	ldr	r2, [pc, #160]	; (8005098 <HAL_ADC_ConfigChannel+0x6b4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d131      	bne.n	8005060 <HAL_ADC_ConfigChannel+0x67c>
 8004ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d12c      	bne.n	8005060 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <HAL_ADC_ConfigChannel+0x69c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d127      	bne.n	8005060 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a18      	ldr	r2, [pc, #96]	; (8005078 <HAL_ADC_ConfigChannel+0x694>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_ADC_ConfigChannel+0x640>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a17      	ldr	r2, [pc, #92]	; (800507c <HAL_ADC_ConfigChannel+0x698>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d101      	bne.n	8005028 <HAL_ADC_ConfigChannel+0x644>
 8005024:	4a18      	ldr	r2, [pc, #96]	; (8005088 <HAL_ADC_ConfigChannel+0x6a4>)
 8005026:	e000      	b.n	800502a <HAL_ADC_ConfigChannel+0x646>
 8005028:	4a12      	ldr	r2, [pc, #72]	; (8005074 <HAL_ADC_ConfigChannel+0x690>)
 800502a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f7ff f857 	bl	80040e6 <LL_ADC_SetCommonPathInternalCh>
 8005038:	e012      	b.n	8005060 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f043 0220 	orr.w	r2, r3, #32
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800504c:	e008      	b.n	8005060 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005052:	f043 0220 	orr.w	r2, r3, #32
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005068:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800506c:	4618      	mov	r0, r3
 800506e:	3784      	adds	r7, #132	; 0x84
 8005070:	46bd      	mov	sp, r7
 8005072:	bd90      	pop	{r4, r7, pc}
 8005074:	58026300 	.word	0x58026300
 8005078:	40022000 	.word	0x40022000
 800507c:	40022100 	.word	0x40022100
 8005080:	58026000 	.word	0x58026000
 8005084:	cb840000 	.word	0xcb840000
 8005088:	40022300 	.word	0x40022300
 800508c:	2400008c 	.word	0x2400008c
 8005090:	053e2d63 	.word	0x053e2d63
 8005094:	c7520000 	.word	0xc7520000
 8005098:	cfb80000 	.word	0xcfb80000

0800509c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff f9b7 	bl	800441c <LL_ADC_IsEnabled>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d16e      	bne.n	8005192 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	4b38      	ldr	r3, [pc, #224]	; (800519c <ADC_Enable+0x100>)
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00d      	beq.n	80050de <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c6:	f043 0210 	orr.w	r2, r3, #16
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d2:	f043 0201 	orr.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e05a      	b.n	8005194 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff f972 	bl	80043cc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80050e8:	f7fe ffbc 	bl	8004064 <HAL_GetTick>
 80050ec:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a2b      	ldr	r2, [pc, #172]	; (80051a0 <ADC_Enable+0x104>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d004      	beq.n	8005102 <ADC_Enable+0x66>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a29      	ldr	r2, [pc, #164]	; (80051a4 <ADC_Enable+0x108>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d101      	bne.n	8005106 <ADC_Enable+0x6a>
 8005102:	4b29      	ldr	r3, [pc, #164]	; (80051a8 <ADC_Enable+0x10c>)
 8005104:	e000      	b.n	8005108 <ADC_Enable+0x6c>
 8005106:	4b29      	ldr	r3, [pc, #164]	; (80051ac <ADC_Enable+0x110>)
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff f903 	bl	8004314 <LL_ADC_GetMultimode>
 800510e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a23      	ldr	r2, [pc, #140]	; (80051a4 <ADC_Enable+0x108>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d002      	beq.n	8005120 <ADC_Enable+0x84>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	e000      	b.n	8005122 <ADC_Enable+0x86>
 8005120:	4b1f      	ldr	r3, [pc, #124]	; (80051a0 <ADC_Enable+0x104>)
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	4293      	cmp	r3, r2
 8005128:	d02c      	beq.n	8005184 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d130      	bne.n	8005192 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005130:	e028      	b.n	8005184 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff f970 	bl	800441c <LL_ADC_IsEnabled>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d104      	bne.n	800514c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff f940 	bl	80043cc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800514c:	f7fe ff8a 	bl	8004064 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d914      	bls.n	8005184 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b01      	cmp	r3, #1
 8005166:	d00d      	beq.n	8005184 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516c:	f043 0210 	orr.w	r2, r3, #16
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005178:	f043 0201 	orr.w	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e007      	b.n	8005194 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b01      	cmp	r3, #1
 8005190:	d1cf      	bne.n	8005132 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	8000003f 	.word	0x8000003f
 80051a0:	40022000 	.word	0x40022000
 80051a4:	40022100 	.word	0x40022100
 80051a8:	40022300 	.word	0x40022300
 80051ac:	58026300 	.word	0x58026300

080051b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff f940 	bl	8004442 <LL_ADC_IsDisableOngoing>
 80051c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7ff f927 	bl	800441c <LL_ADC_IsEnabled>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d047      	beq.n	8005264 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d144      	bne.n	8005264 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 030d 	and.w	r3, r3, #13
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d10c      	bne.n	8005202 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff f901 	bl	80043f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2203      	movs	r2, #3
 80051f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80051fa:	f7fe ff33 	bl	8004064 <HAL_GetTick>
 80051fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005200:	e029      	b.n	8005256 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	f043 0210 	orr.w	r2, r3, #16
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005212:	f043 0201 	orr.w	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e023      	b.n	8005266 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800521e:	f7fe ff21 	bl	8004064 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d914      	bls.n	8005256 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00d      	beq.n	8005256 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523e:	f043 0210 	orr.w	r2, r3, #16
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524a:	f043 0201 	orr.w	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e007      	b.n	8005266 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1dc      	bne.n	800521e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005280:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005284:	2b00      	cmp	r3, #0
 8005286:	d14b      	bne.n	8005320 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d021      	beq.n	80052e6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe ff92 	bl	80041d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d032      	beq.n	8005318 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d12b      	bne.n	8005318 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d11f      	bne.n	8005318 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052dc:	f043 0201 	orr.w	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54
 80052e4:	e018      	b.n	8005318 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d111      	bne.n	8005318 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d105      	bne.n	8005318 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005310:	f043 0201 	orr.w	r2, r3, #1
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff fb45 	bl	80049a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800531e:	e00e      	b.n	800533e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f7ff fb4f 	bl	80049d0 <HAL_ADC_ErrorCallback>
}
 8005332:	e004      	b.n	800533e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4798      	blx	r3
}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7ff fb31 	bl	80049bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005380:	f043 0204 	orr.w	r2, r3, #4
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff fb21 	bl	80049d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800538e:	bf00      	nop
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a7a      	ldr	r2, [pc, #488]	; (8005590 <ADC_ConfigureBoostMode+0x1f8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d004      	beq.n	80053b4 <ADC_ConfigureBoostMode+0x1c>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a79      	ldr	r2, [pc, #484]	; (8005594 <ADC_ConfigureBoostMode+0x1fc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d109      	bne.n	80053c8 <ADC_ConfigureBoostMode+0x30>
 80053b4:	4b78      	ldr	r3, [pc, #480]	; (8005598 <ADC_ConfigureBoostMode+0x200>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bf14      	ite	ne
 80053c0:	2301      	movne	r3, #1
 80053c2:	2300      	moveq	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	e008      	b.n	80053da <ADC_ConfigureBoostMode+0x42>
 80053c8:	4b74      	ldr	r3, [pc, #464]	; (800559c <ADC_ConfigureBoostMode+0x204>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01c      	beq.n	8005418 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80053de:	f005 fd63 	bl	800aea8 <HAL_RCC_GetHCLKFreq>
 80053e2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053ec:	d010      	beq.n	8005410 <ADC_ConfigureBoostMode+0x78>
 80053ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053f2:	d873      	bhi.n	80054dc <ADC_ConfigureBoostMode+0x144>
 80053f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f8:	d002      	beq.n	8005400 <ADC_ConfigureBoostMode+0x68>
 80053fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053fe:	d16d      	bne.n	80054dc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	0c1b      	lsrs	r3, r3, #16
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	fbb2 f3f3 	udiv	r3, r2, r3
 800540c:	60fb      	str	r3, [r7, #12]
        break;
 800540e:	e068      	b.n	80054e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	089b      	lsrs	r3, r3, #2
 8005414:	60fb      	str	r3, [r7, #12]
        break;
 8005416:	e064      	b.n	80054e2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005418:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800541c:	f04f 0100 	mov.w	r1, #0
 8005420:	f006 ffea 	bl	800c3f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005424:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800542e:	d051      	beq.n	80054d4 <ADC_ConfigureBoostMode+0x13c>
 8005430:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005434:	d854      	bhi.n	80054e0 <ADC_ConfigureBoostMode+0x148>
 8005436:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800543a:	d047      	beq.n	80054cc <ADC_ConfigureBoostMode+0x134>
 800543c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005440:	d84e      	bhi.n	80054e0 <ADC_ConfigureBoostMode+0x148>
 8005442:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005446:	d03d      	beq.n	80054c4 <ADC_ConfigureBoostMode+0x12c>
 8005448:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800544c:	d848      	bhi.n	80054e0 <ADC_ConfigureBoostMode+0x148>
 800544e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005452:	d033      	beq.n	80054bc <ADC_ConfigureBoostMode+0x124>
 8005454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005458:	d842      	bhi.n	80054e0 <ADC_ConfigureBoostMode+0x148>
 800545a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800545e:	d029      	beq.n	80054b4 <ADC_ConfigureBoostMode+0x11c>
 8005460:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005464:	d83c      	bhi.n	80054e0 <ADC_ConfigureBoostMode+0x148>
 8005466:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800546a:	d01a      	beq.n	80054a2 <ADC_ConfigureBoostMode+0x10a>
 800546c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005470:	d836      	bhi.n	80054e0 <ADC_ConfigureBoostMode+0x148>
 8005472:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005476:	d014      	beq.n	80054a2 <ADC_ConfigureBoostMode+0x10a>
 8005478:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800547c:	d830      	bhi.n	80054e0 <ADC_ConfigureBoostMode+0x148>
 800547e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005482:	d00e      	beq.n	80054a2 <ADC_ConfigureBoostMode+0x10a>
 8005484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005488:	d82a      	bhi.n	80054e0 <ADC_ConfigureBoostMode+0x148>
 800548a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800548e:	d008      	beq.n	80054a2 <ADC_ConfigureBoostMode+0x10a>
 8005490:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005494:	d824      	bhi.n	80054e0 <ADC_ConfigureBoostMode+0x148>
 8005496:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800549a:	d002      	beq.n	80054a2 <ADC_ConfigureBoostMode+0x10a>
 800549c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054a0:	d11e      	bne.n	80054e0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	0c9b      	lsrs	r3, r3, #18
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	60fb      	str	r3, [r7, #12]
        break;
 80054b2:	e016      	b.n	80054e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	091b      	lsrs	r3, r3, #4
 80054b8:	60fb      	str	r3, [r7, #12]
        break;
 80054ba:	e012      	b.n	80054e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	60fb      	str	r3, [r7, #12]
        break;
 80054c2:	e00e      	b.n	80054e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	099b      	lsrs	r3, r3, #6
 80054c8:	60fb      	str	r3, [r7, #12]
        break;
 80054ca:	e00a      	b.n	80054e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	09db      	lsrs	r3, r3, #7
 80054d0:	60fb      	str	r3, [r7, #12]
        break;
 80054d2:	e006      	b.n	80054e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	0a1b      	lsrs	r3, r3, #8
 80054d8:	60fb      	str	r3, [r7, #12]
        break;
 80054da:	e002      	b.n	80054e2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80054dc:	bf00      	nop
 80054de:	e000      	b.n	80054e2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80054e0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80054e2:	f7fe fdcb 	bl	800407c <HAL_GetREVID>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d815      	bhi.n	800551c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a2b      	ldr	r2, [pc, #172]	; (80055a0 <ADC_ConfigureBoostMode+0x208>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d908      	bls.n	800550a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005506:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005508:	e03e      	b.n	8005588 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005518:	609a      	str	r2, [r3, #8]
}
 800551a:	e035      	b.n	8005588 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	085b      	lsrs	r3, r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <ADC_ConfigureBoostMode+0x20c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d808      	bhi.n	800553c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005538:	609a      	str	r2, [r3, #8]
}
 800553a:	e025      	b.n	8005588 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a1a      	ldr	r2, [pc, #104]	; (80055a8 <ADC_ConfigureBoostMode+0x210>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d80a      	bhi.n	800555a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005556:	609a      	str	r2, [r3, #8]
}
 8005558:	e016      	b.n	8005588 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4a13      	ldr	r2, [pc, #76]	; (80055ac <ADC_ConfigureBoostMode+0x214>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d80a      	bhi.n	8005578 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005574:	609a      	str	r2, [r3, #8]
}
 8005576:	e007      	b.n	8005588 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005586:	609a      	str	r2, [r3, #8]
}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40022000 	.word	0x40022000
 8005594:	40022100 	.word	0x40022100
 8005598:	40022300 	.word	0x40022300
 800559c:	58026300 	.word	0x58026300
 80055a0:	01312d00 	.word	0x01312d00
 80055a4:	005f5e10 	.word	0x005f5e10
 80055a8:	00bebc20 	.word	0x00bebc20
 80055ac:	017d7840 	.word	0x017d7840

080055b0 <LL_ADC_IsEnabled>:
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <LL_ADC_IsEnabled+0x18>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <LL_ADC_IsEnabled+0x1a>
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <LL_ADC_StartCalibration>:
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	4b09      	ldr	r3, [pc, #36]	; (8005610 <LL_ADC_StartCalibration+0x38>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80055f8:	430a      	orrs	r2, r1
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	609a      	str	r2, [r3, #8]
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	3ffeffc0 	.word	0x3ffeffc0

08005614 <LL_ADC_IsCalibrationOnGoing>:
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005628:	d101      	bne.n	800562e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <LL_ADC_REG_IsConversionOngoing>:
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b04      	cmp	r3, #4
 800564e:	d101      	bne.n	8005654 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005650:	2301      	movs	r3, #1
 8005652:	e000      	b.n	8005656 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
	...

08005664 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_ADCEx_Calibration_Start+0x1e>
 800567e:	2302      	movs	r3, #2
 8005680:	e04c      	b.n	800571c <HAL_ADCEx_Calibration_Start+0xb8>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f7ff fd90 	bl	80051b0 <ADC_Disable>
 8005690:	4603      	mov	r3, r0
 8005692:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005694:	7dfb      	ldrb	r3, [r7, #23]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d135      	bne.n	8005706 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800569e:	4b21      	ldr	r3, [pc, #132]	; (8005724 <HAL_ADCEx_Calibration_Start+0xc0>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	f043 0202 	orr.w	r2, r3, #2
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff ff90 	bl	80055d8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80056b8:	e014      	b.n	80056e4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	3301      	adds	r3, #1
 80056be:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	4a19      	ldr	r2, [pc, #100]	; (8005728 <HAL_ADCEx_Calibration_Start+0xc4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d30d      	bcc.n	80056e4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056cc:	f023 0312 	bic.w	r3, r3, #18
 80056d0:	f043 0210 	orr.w	r2, r3, #16
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e01b      	b.n	800571c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff ff93 	bl	8005614 <LL_ADC_IsCalibrationOnGoing>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e2      	bne.n	80056ba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f8:	f023 0303 	bic.w	r3, r3, #3
 80056fc:	f043 0201 	orr.w	r2, r3, #1
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	655a      	str	r2, [r3, #84]	; 0x54
 8005704:	e005      	b.n	8005712 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570a:	f043 0210 	orr.w	r2, r3, #16
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800571a:	7dfb      	ldrb	r3, [r7, #23]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	ffffeefd 	.word	0xffffeefd
 8005728:	25c3f800 	.word	0x25c3f800

0800572c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b09f      	sub	sp, #124	; 0x7c
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005746:	2302      	movs	r3, #2
 8005748:	e0be      	b.n	80058c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005752:	2300      	movs	r3, #0
 8005754:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005756:	2300      	movs	r3, #0
 8005758:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a5c      	ldr	r2, [pc, #368]	; (80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d102      	bne.n	800576a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005764:	4b5b      	ldr	r3, [pc, #364]	; (80058d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005766:	60bb      	str	r3, [r7, #8]
 8005768:	e001      	b.n	800576e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10b      	bne.n	800578c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005778:	f043 0220 	orr.w	r2, r3, #32
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e09d      	b.n	80058c8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff ff54 	bl	800563c <LL_ADC_REG_IsConversionOngoing>
 8005794:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff ff4e 	bl	800563c <LL_ADC_REG_IsConversionOngoing>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d17f      	bne.n	80058a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80057a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d17c      	bne.n	80058a6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a47      	ldr	r2, [pc, #284]	; (80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d004      	beq.n	80057c0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a46      	ldr	r2, [pc, #280]	; (80058d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d101      	bne.n	80057c4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80057c0:	4b45      	ldr	r3, [pc, #276]	; (80058d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80057c2:	e000      	b.n	80057c6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80057c4:	4b45      	ldr	r3, [pc, #276]	; (80058dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80057c6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d039      	beq.n	8005844 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80057d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	431a      	orrs	r2, r3
 80057de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a3a      	ldr	r2, [pc, #232]	; (80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d004      	beq.n	80057f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a38      	ldr	r2, [pc, #224]	; (80058d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d10e      	bne.n	8005814 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80057f6:	4836      	ldr	r0, [pc, #216]	; (80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80057f8:	f7ff feda 	bl	80055b0 <LL_ADC_IsEnabled>
 80057fc:	4604      	mov	r4, r0
 80057fe:	4835      	ldr	r0, [pc, #212]	; (80058d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005800:	f7ff fed6 	bl	80055b0 <LL_ADC_IsEnabled>
 8005804:	4603      	mov	r3, r0
 8005806:	4323      	orrs	r3, r4
 8005808:	2b00      	cmp	r3, #0
 800580a:	bf0c      	ite	eq
 800580c:	2301      	moveq	r3, #1
 800580e:	2300      	movne	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	e008      	b.n	8005826 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005814:	4832      	ldr	r0, [pc, #200]	; (80058e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005816:	f7ff fecb 	bl	80055b0 <LL_ADC_IsEnabled>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	bf0c      	ite	eq
 8005820:	2301      	moveq	r3, #1
 8005822:	2300      	movne	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d047      	beq.n	80058ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800582a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	4b2d      	ldr	r3, [pc, #180]	; (80058e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005830:	4013      	ands	r3, r2
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	6811      	ldr	r1, [r2, #0]
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	6892      	ldr	r2, [r2, #8]
 800583a:	430a      	orrs	r2, r1
 800583c:	431a      	orrs	r2, r3
 800583e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005840:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005842:	e03a      	b.n	80058ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800584c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a1e      	ldr	r2, [pc, #120]	; (80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d004      	beq.n	8005864 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d10e      	bne.n	8005882 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005864:	481a      	ldr	r0, [pc, #104]	; (80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005866:	f7ff fea3 	bl	80055b0 <LL_ADC_IsEnabled>
 800586a:	4604      	mov	r4, r0
 800586c:	4819      	ldr	r0, [pc, #100]	; (80058d4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800586e:	f7ff fe9f 	bl	80055b0 <LL_ADC_IsEnabled>
 8005872:	4603      	mov	r3, r0
 8005874:	4323      	orrs	r3, r4
 8005876:	2b00      	cmp	r3, #0
 8005878:	bf0c      	ite	eq
 800587a:	2301      	moveq	r3, #1
 800587c:	2300      	movne	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	e008      	b.n	8005894 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005882:	4817      	ldr	r0, [pc, #92]	; (80058e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005884:	f7ff fe94 	bl	80055b0 <LL_ADC_IsEnabled>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	bf0c      	ite	eq
 800588e:	2301      	moveq	r3, #1
 8005890:	2300      	movne	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d010      	beq.n	80058ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800589e:	4013      	ands	r3, r2
 80058a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058a2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058a4:	e009      	b.n	80058ba <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058aa:	f043 0220 	orr.w	r2, r3, #32
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80058b8:	e000      	b.n	80058bc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058ba:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80058c4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	377c      	adds	r7, #124	; 0x7c
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd90      	pop	{r4, r7, pc}
 80058d0:	40022000 	.word	0x40022000
 80058d4:	40022100 	.word	0x40022100
 80058d8:	40022300 	.word	0x40022300
 80058dc:	58026300 	.word	0x58026300
 80058e0:	58026000 	.word	0x58026000
 80058e4:	fffff0e0 	.word	0xfffff0e0

080058e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058f8:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <__NVIC_SetPriorityGrouping+0x40>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005904:	4013      	ands	r3, r2
 8005906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <__NVIC_SetPriorityGrouping+0x44>)
 8005912:	4313      	orrs	r3, r2
 8005914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005916:	4a04      	ldr	r2, [pc, #16]	; (8005928 <__NVIC_SetPriorityGrouping+0x40>)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	60d3      	str	r3, [r2, #12]
}
 800591c:	bf00      	nop
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	e000ed00 	.word	0xe000ed00
 800592c:	05fa0000 	.word	0x05fa0000

08005930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005934:	4b04      	ldr	r3, [pc, #16]	; (8005948 <__NVIC_GetPriorityGrouping+0x18>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	0a1b      	lsrs	r3, r3, #8
 800593a:	f003 0307 	and.w	r3, r3, #7
}
 800593e:	4618      	mov	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	e000ed00 	.word	0xe000ed00

0800594c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005956:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800595a:	2b00      	cmp	r3, #0
 800595c:	db0b      	blt.n	8005976 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	f003 021f 	and.w	r2, r3, #31
 8005964:	4907      	ldr	r1, [pc, #28]	; (8005984 <__NVIC_EnableIRQ+0x38>)
 8005966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2001      	movs	r0, #1
 800596e:	fa00 f202 	lsl.w	r2, r0, r2
 8005972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	e000e100 	.word	0xe000e100

08005988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	6039      	str	r1, [r7, #0]
 8005992:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005998:	2b00      	cmp	r3, #0
 800599a:	db0a      	blt.n	80059b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	490c      	ldr	r1, [pc, #48]	; (80059d4 <__NVIC_SetPriority+0x4c>)
 80059a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059a6:	0112      	lsls	r2, r2, #4
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	440b      	add	r3, r1
 80059ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059b0:	e00a      	b.n	80059c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	4908      	ldr	r1, [pc, #32]	; (80059d8 <__NVIC_SetPriority+0x50>)
 80059b8:	88fb      	ldrh	r3, [r7, #6]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	3b04      	subs	r3, #4
 80059c0:	0112      	lsls	r2, r2, #4
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	440b      	add	r3, r1
 80059c6:	761a      	strb	r2, [r3, #24]
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	e000e100 	.word	0xe000e100
 80059d8:	e000ed00 	.word	0xe000ed00

080059dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059dc:	b480      	push	{r7}
 80059de:	b089      	sub	sp, #36	; 0x24
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f1c3 0307 	rsb	r3, r3, #7
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	bf28      	it	cs
 80059fa:	2304      	movcs	r3, #4
 80059fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	3304      	adds	r3, #4
 8005a02:	2b06      	cmp	r3, #6
 8005a04:	d902      	bls.n	8005a0c <NVIC_EncodePriority+0x30>
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	3b03      	subs	r3, #3
 8005a0a:	e000      	b.n	8005a0e <NVIC_EncodePriority+0x32>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43da      	mvns	r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	401a      	ands	r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2e:	43d9      	mvns	r1, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a34:	4313      	orrs	r3, r2
         );
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3724      	adds	r7, #36	; 0x24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7ff ff4c 	bl	80058e8 <__NVIC_SetPriorityGrouping>
}
 8005a50:	bf00      	nop
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a66:	f7ff ff63 	bl	8005930 <__NVIC_GetPriorityGrouping>
 8005a6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	68b9      	ldr	r1, [r7, #8]
 8005a70:	6978      	ldr	r0, [r7, #20]
 8005a72:	f7ff ffb3 	bl	80059dc <NVIC_EncodePriority>
 8005a76:	4602      	mov	r2, r0
 8005a78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff ff82 	bl	8005988 <__NVIC_SetPriority>
}
 8005a84:	bf00      	nop
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff ff56 	bl	800594c <__NVIC_EnableIRQ>
}
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e014      	b.n	8005ae4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	791b      	ldrb	r3, [r3, #4]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d105      	bne.n	8005ad0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fb f88a 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e046      	b.n	8005b8e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	795b      	ldrb	r3, [r3, #5]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_DAC_Start+0x20>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e040      	b.n	8005b8e <HAL_DAC_Start+0xa2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6819      	ldr	r1, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2201      	movs	r2, #1
 8005b26:	409a      	lsls	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10f      	bne.n	8005b56 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d11d      	bne.n	8005b80 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	605a      	str	r2, [r3, #4]
 8005b54:	e014      	b.n	8005b80 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	f003 0310 	and.w	r3, r3, #16
 8005b66:	2102      	movs	r1, #2
 8005b68:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d107      	bne.n	8005b80 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0202 	orr.w	r2, r2, #2
 8005b7e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0a2      	b.n	8005cfa <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	795b      	ldrb	r3, [r3, #5]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_DAC_Start_DMA+0x24>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e09c      	b.n	8005cfa <HAL_DAC_Start_DMA+0x15e>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d129      	bne.n	8005c26 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	4a4b      	ldr	r2, [pc, #300]	; (8005d04 <HAL_DAC_Start_DMA+0x168>)
 8005bd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	4a4a      	ldr	r2, [pc, #296]	; (8005d08 <HAL_DAC_Start_DMA+0x16c>)
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	4a49      	ldr	r2, [pc, #292]	; (8005d0c <HAL_DAC_Start_DMA+0x170>)
 8005be8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bf8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_DAC_Start_DMA+0x6c>
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d005      	beq.n	8005c12 <HAL_DAC_Start_DMA+0x76>
 8005c06:	e009      	b.n	8005c1c <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	613b      	str	r3, [r7, #16]
        break;
 8005c10:	e033      	b.n	8005c7a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	330c      	adds	r3, #12
 8005c18:	613b      	str	r3, [r7, #16]
        break;
 8005c1a:	e02e      	b.n	8005c7a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3310      	adds	r3, #16
 8005c22:	613b      	str	r3, [r7, #16]
        break;
 8005c24:	e029      	b.n	8005c7a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	4a39      	ldr	r2, [pc, #228]	; (8005d10 <HAL_DAC_Start_DMA+0x174>)
 8005c2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	4a38      	ldr	r2, [pc, #224]	; (8005d14 <HAL_DAC_Start_DMA+0x178>)
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	4a37      	ldr	r2, [pc, #220]	; (8005d18 <HAL_DAC_Start_DMA+0x17c>)
 8005c3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c4c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_DAC_Start_DMA+0xc0>
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	2b04      	cmp	r3, #4
 8005c58:	d005      	beq.n	8005c66 <HAL_DAC_Start_DMA+0xca>
 8005c5a:	e009      	b.n	8005c70 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3314      	adds	r3, #20
 8005c62:	613b      	str	r3, [r7, #16]
        break;
 8005c64:	e009      	b.n	8005c7a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3318      	adds	r3, #24
 8005c6c:	613b      	str	r3, [r7, #16]
        break;
 8005c6e:	e004      	b.n	8005c7a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	331c      	adds	r3, #28
 8005c76:	613b      	str	r3, [r7, #16]
        break;
 8005c78:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d111      	bne.n	8005ca4 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c8e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6898      	ldr	r0, [r3, #8]
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	f000 fe67 	bl	800696c <HAL_DMA_Start_IT>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	75fb      	strb	r3, [r7, #23]
 8005ca2:	e010      	b.n	8005cc6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005cb2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68d8      	ldr	r0, [r3, #12]
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	f000 fe55 	bl	800696c <HAL_DMA_Start_IT>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10c      	bne.n	8005cec <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6819      	ldr	r1, [r3, #0]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2201      	movs	r2, #1
 8005ce0:	409a      	lsls	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	e005      	b.n	8005cf8 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f043 0204 	orr.w	r2, r3, #4
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	0800618d 	.word	0x0800618d
 8005d08:	080061af 	.word	0x080061af
 8005d0c:	080061cb 	.word	0x080061cb
 8005d10:	08006249 	.word	0x08006249
 8005d14:	0800626b 	.word	0x0800626b
 8005d18:	08006287 	.word	0x08006287

08005d1c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e03e      	b.n	8005dae <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6819      	ldr	r1, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	43da      	mvns	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	400a      	ands	r2, r1
 8005d4c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6819      	ldr	r1, [r3, #0]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	f003 0310 	and.w	r3, r3, #16
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d60:	43da      	mvns	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	400a      	ands	r2, r1
 8005d68:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10d      	bne.n	8005d8c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 f863 	bl	8006e40 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e00c      	b.n	8005da6 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f001 f855 	bl	8006e40 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8005da4:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dcc:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01d      	beq.n	8005e14 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d018      	beq.n	8005e14 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2204      	movs	r2, #4
 8005de6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f043 0201 	orr.w	r2, r3, #1
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005dfc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e0c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f86f 	bl	8005ef2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d01d      	beq.n	8005e5a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d018      	beq.n	8005e5a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2204      	movs	r2, #4
 8005e2c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f043 0202 	orr.w	r2, r3, #2
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005e42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f9ed 	bl	8006234 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b087      	sub	sp, #28
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e015      	b.n	8005eaa <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d105      	bne.n	8005e96 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4413      	add	r3, r2
 8005e90:	3308      	adds	r3, #8
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	e004      	b.n	8005ea0 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	3314      	adds	r3, #20
 8005e9e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
	...

08005f08 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08a      	sub	sp, #40	; 0x28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <HAL_DAC_ConfigChannel+0x1e>
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e12a      	b.n	8006180 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	795b      	ldrb	r3, [r3, #5]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d101      	bne.n	8005f36 <HAL_DAC_ConfigChannel+0x2e>
 8005f32:	2302      	movs	r3, #2
 8005f34:	e124      	b.n	8006180 <HAL_DAC_ConfigChannel+0x278>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d17a      	bne.n	8006040 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005f4a:	f7fe f88b 	bl	8004064 <HAL_GetTick>
 8005f4e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d13d      	bne.n	8005fd2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f56:	e018      	b.n	8005f8a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005f58:	f7fe f884 	bl	8004064 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d911      	bls.n	8005f8a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f6c:	4b86      	ldr	r3, [pc, #536]	; (8006188 <HAL_DAC_ConfigChannel+0x280>)
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f043 0208 	orr.w	r2, r3, #8
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2203      	movs	r2, #3
 8005f84:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e0fa      	b.n	8006180 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f90:	4b7d      	ldr	r3, [pc, #500]	; (8006188 <HAL_DAC_ConfigChannel+0x280>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1df      	bne.n	8005f58 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	6992      	ldr	r2, [r2, #24]
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8005fa2:	e020      	b.n	8005fe6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005fa4:	f7fe f85e 	bl	8004064 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d90f      	bls.n	8005fd2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	da0a      	bge.n	8005fd2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	f043 0208 	orr.w	r2, r3, #8
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2203      	movs	r2, #3
 8005fcc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e0d6      	b.n	8006180 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	dbe3      	blt.n	8005fa4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	6992      	ldr	r2, [r2, #24]
 8005fe4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffa:	43db      	mvns	r3, r3
 8005ffc:	ea02 0103 	and.w	r1, r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f003 0310 	and.w	r3, r3, #16
 800600a:	409a      	lsls	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	21ff      	movs	r1, #255	; 0xff
 8006022:	fa01 f303 	lsl.w	r3, r1, r3
 8006026:	43db      	mvns	r3, r3
 8006028:	ea02 0103 	and.w	r1, r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	6a1a      	ldr	r2, [r3, #32]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f003 0310 	and.w	r3, r3, #16
 8006036:	409a      	lsls	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d11d      	bne.n	8006084 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	221f      	movs	r2, #31
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	43db      	mvns	r3, r3
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	4013      	ands	r3, r2
 8006062:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4313      	orrs	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f003 0310 	and.w	r3, r3, #16
 8006092:	2207      	movs	r2, #7
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	43db      	mvns	r3, r3
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	4013      	ands	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d102      	bne.n	80060ae <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
 80060ac:	e00f      	b.n	80060ce <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d102      	bne.n	80060bc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80060b6:	2301      	movs	r3, #1
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ba:	e008      	b.n	80060ce <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80060c4:	2301      	movs	r3, #1
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
 80060c8:	e001      	b.n	80060ce <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f003 0310 	and.w	r3, r3, #16
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6819      	ldr	r1, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	43da      	mvns	r2, r3
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	400a      	ands	r2, r1
 8006114:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	43db      	mvns	r3, r3
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	4013      	ands	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	4313      	orrs	r3, r2
 800614a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6819      	ldr	r1, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f003 0310 	and.w	r3, r3, #16
 8006160:	22c0      	movs	r2, #192	; 0xc0
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	43da      	mvns	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	400a      	ands	r2, r1
 800616e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800617c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006180:	4618      	mov	r0, r3
 8006182:	3728      	adds	r7, #40	; 0x28
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	20008000 	.word	0x20008000

0800618c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fe8b 	bl	8005eb6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2201      	movs	r2, #1
 80061a4:	711a      	strb	r2, [r3, #4]
}
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff fe84 	bl	8005eca <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80061c2:	bf00      	nop
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	f043 0204 	orr.w	r2, r3, #4
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f7ff fe7a 	bl	8005ede <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	711a      	strb	r2, [r3, #4]
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006254:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7ff ffce 	bl	80061f8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	711a      	strb	r2, [r3, #4]
}
 8006262:	bf00      	nop
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff ffc7 	bl	800620c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006292:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f043 0204 	orr.w	r2, r3, #4
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f7ff ffbd 	bl	8006220 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	711a      	strb	r2, [r3, #4]
}
 80062ac:	bf00      	nop
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80062bc:	f7fd fed2 	bl	8004064 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e316      	b.n	80068fa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a66      	ldr	r2, [pc, #408]	; (800646c <HAL_DMA_Init+0x1b8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d04a      	beq.n	800636c <HAL_DMA_Init+0xb8>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a65      	ldr	r2, [pc, #404]	; (8006470 <HAL_DMA_Init+0x1bc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d045      	beq.n	800636c <HAL_DMA_Init+0xb8>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a63      	ldr	r2, [pc, #396]	; (8006474 <HAL_DMA_Init+0x1c0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d040      	beq.n	800636c <HAL_DMA_Init+0xb8>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a62      	ldr	r2, [pc, #392]	; (8006478 <HAL_DMA_Init+0x1c4>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d03b      	beq.n	800636c <HAL_DMA_Init+0xb8>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a60      	ldr	r2, [pc, #384]	; (800647c <HAL_DMA_Init+0x1c8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d036      	beq.n	800636c <HAL_DMA_Init+0xb8>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a5f      	ldr	r2, [pc, #380]	; (8006480 <HAL_DMA_Init+0x1cc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d031      	beq.n	800636c <HAL_DMA_Init+0xb8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a5d      	ldr	r2, [pc, #372]	; (8006484 <HAL_DMA_Init+0x1d0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d02c      	beq.n	800636c <HAL_DMA_Init+0xb8>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a5c      	ldr	r2, [pc, #368]	; (8006488 <HAL_DMA_Init+0x1d4>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d027      	beq.n	800636c <HAL_DMA_Init+0xb8>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a5a      	ldr	r2, [pc, #360]	; (800648c <HAL_DMA_Init+0x1d8>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d022      	beq.n	800636c <HAL_DMA_Init+0xb8>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a59      	ldr	r2, [pc, #356]	; (8006490 <HAL_DMA_Init+0x1dc>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d01d      	beq.n	800636c <HAL_DMA_Init+0xb8>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a57      	ldr	r2, [pc, #348]	; (8006494 <HAL_DMA_Init+0x1e0>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d018      	beq.n	800636c <HAL_DMA_Init+0xb8>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a56      	ldr	r2, [pc, #344]	; (8006498 <HAL_DMA_Init+0x1e4>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d013      	beq.n	800636c <HAL_DMA_Init+0xb8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a54      	ldr	r2, [pc, #336]	; (800649c <HAL_DMA_Init+0x1e8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00e      	beq.n	800636c <HAL_DMA_Init+0xb8>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a53      	ldr	r2, [pc, #332]	; (80064a0 <HAL_DMA_Init+0x1ec>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d009      	beq.n	800636c <HAL_DMA_Init+0xb8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a51      	ldr	r2, [pc, #324]	; (80064a4 <HAL_DMA_Init+0x1f0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <HAL_DMA_Init+0xb8>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a50      	ldr	r2, [pc, #320]	; (80064a8 <HAL_DMA_Init+0x1f4>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d101      	bne.n	8006370 <HAL_DMA_Init+0xbc>
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <HAL_DMA_Init+0xbe>
 8006370:	2300      	movs	r3, #0
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 813b 	beq.w	80065ee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a37      	ldr	r2, [pc, #220]	; (800646c <HAL_DMA_Init+0x1b8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d04a      	beq.n	8006428 <HAL_DMA_Init+0x174>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a36      	ldr	r2, [pc, #216]	; (8006470 <HAL_DMA_Init+0x1bc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d045      	beq.n	8006428 <HAL_DMA_Init+0x174>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a34      	ldr	r2, [pc, #208]	; (8006474 <HAL_DMA_Init+0x1c0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d040      	beq.n	8006428 <HAL_DMA_Init+0x174>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a33      	ldr	r2, [pc, #204]	; (8006478 <HAL_DMA_Init+0x1c4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d03b      	beq.n	8006428 <HAL_DMA_Init+0x174>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a31      	ldr	r2, [pc, #196]	; (800647c <HAL_DMA_Init+0x1c8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d036      	beq.n	8006428 <HAL_DMA_Init+0x174>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a30      	ldr	r2, [pc, #192]	; (8006480 <HAL_DMA_Init+0x1cc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d031      	beq.n	8006428 <HAL_DMA_Init+0x174>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a2e      	ldr	r2, [pc, #184]	; (8006484 <HAL_DMA_Init+0x1d0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d02c      	beq.n	8006428 <HAL_DMA_Init+0x174>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a2d      	ldr	r2, [pc, #180]	; (8006488 <HAL_DMA_Init+0x1d4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d027      	beq.n	8006428 <HAL_DMA_Init+0x174>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a2b      	ldr	r2, [pc, #172]	; (800648c <HAL_DMA_Init+0x1d8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d022      	beq.n	8006428 <HAL_DMA_Init+0x174>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a2a      	ldr	r2, [pc, #168]	; (8006490 <HAL_DMA_Init+0x1dc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d01d      	beq.n	8006428 <HAL_DMA_Init+0x174>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a28      	ldr	r2, [pc, #160]	; (8006494 <HAL_DMA_Init+0x1e0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d018      	beq.n	8006428 <HAL_DMA_Init+0x174>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a27      	ldr	r2, [pc, #156]	; (8006498 <HAL_DMA_Init+0x1e4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d013      	beq.n	8006428 <HAL_DMA_Init+0x174>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a25      	ldr	r2, [pc, #148]	; (800649c <HAL_DMA_Init+0x1e8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00e      	beq.n	8006428 <HAL_DMA_Init+0x174>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <HAL_DMA_Init+0x1ec>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d009      	beq.n	8006428 <HAL_DMA_Init+0x174>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <HAL_DMA_Init+0x1f0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <HAL_DMA_Init+0x174>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a21      	ldr	r2, [pc, #132]	; (80064a8 <HAL_DMA_Init+0x1f4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d108      	bne.n	800643a <HAL_DMA_Init+0x186>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0201 	bic.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	e007      	b.n	800644a <HAL_DMA_Init+0x196>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800644a:	e02f      	b.n	80064ac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800644c:	f7fd fe0a 	bl	8004064 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b05      	cmp	r3, #5
 8006458:	d928      	bls.n	80064ac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2203      	movs	r2, #3
 8006464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e246      	b.n	80068fa <HAL_DMA_Init+0x646>
 800646c:	40020010 	.word	0x40020010
 8006470:	40020028 	.word	0x40020028
 8006474:	40020040 	.word	0x40020040
 8006478:	40020058 	.word	0x40020058
 800647c:	40020070 	.word	0x40020070
 8006480:	40020088 	.word	0x40020088
 8006484:	400200a0 	.word	0x400200a0
 8006488:	400200b8 	.word	0x400200b8
 800648c:	40020410 	.word	0x40020410
 8006490:	40020428 	.word	0x40020428
 8006494:	40020440 	.word	0x40020440
 8006498:	40020458 	.word	0x40020458
 800649c:	40020470 	.word	0x40020470
 80064a0:	40020488 	.word	0x40020488
 80064a4:	400204a0 	.word	0x400204a0
 80064a8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1c8      	bne.n	800644c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4b83      	ldr	r3, [pc, #524]	; (80066d4 <HAL_DMA_Init+0x420>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80064d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064de:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064ea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d107      	bne.n	8006510 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	4313      	orrs	r3, r2
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006510:	4b71      	ldr	r3, [pc, #452]	; (80066d8 <HAL_DMA_Init+0x424>)
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	4b71      	ldr	r3, [pc, #452]	; (80066dc <HAL_DMA_Init+0x428>)
 8006516:	4013      	ands	r3, r2
 8006518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800651c:	d328      	bcc.n	8006570 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b28      	cmp	r3, #40	; 0x28
 8006524:	d903      	bls.n	800652e <HAL_DMA_Init+0x27a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b2e      	cmp	r3, #46	; 0x2e
 800652c:	d917      	bls.n	800655e <HAL_DMA_Init+0x2aa>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b3e      	cmp	r3, #62	; 0x3e
 8006534:	d903      	bls.n	800653e <HAL_DMA_Init+0x28a>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	2b42      	cmp	r3, #66	; 0x42
 800653c:	d90f      	bls.n	800655e <HAL_DMA_Init+0x2aa>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b46      	cmp	r3, #70	; 0x46
 8006544:	d903      	bls.n	800654e <HAL_DMA_Init+0x29a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b48      	cmp	r3, #72	; 0x48
 800654c:	d907      	bls.n	800655e <HAL_DMA_Init+0x2aa>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	2b4e      	cmp	r3, #78	; 0x4e
 8006554:	d905      	bls.n	8006562 <HAL_DMA_Init+0x2ae>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2b52      	cmp	r3, #82	; 0x52
 800655c:	d801      	bhi.n	8006562 <HAL_DMA_Init+0x2ae>
 800655e:	2301      	movs	r3, #1
 8006560:	e000      	b.n	8006564 <HAL_DMA_Init+0x2b0>
 8006562:	2300      	movs	r3, #0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800656e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f023 0307 	bic.w	r3, r3, #7
 8006586:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	2b04      	cmp	r3, #4
 8006598:	d117      	bne.n	80065ca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00e      	beq.n	80065ca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f002 fb3f 	bl	8008c30 <DMA_CheckFifoParam>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2240      	movs	r2, #64	; 0x40
 80065bc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e197      	b.n	80068fa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f002 fa7a 	bl	8008acc <DMA_CalcBaseAndBitshift>
 80065d8:	4603      	mov	r3, r0
 80065da:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	223f      	movs	r2, #63	; 0x3f
 80065e6:	409a      	lsls	r2, r3
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	609a      	str	r2, [r3, #8]
 80065ec:	e0cd      	b.n	800678a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a3b      	ldr	r2, [pc, #236]	; (80066e0 <HAL_DMA_Init+0x42c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d022      	beq.n	800663e <HAL_DMA_Init+0x38a>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a39      	ldr	r2, [pc, #228]	; (80066e4 <HAL_DMA_Init+0x430>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d01d      	beq.n	800663e <HAL_DMA_Init+0x38a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a38      	ldr	r2, [pc, #224]	; (80066e8 <HAL_DMA_Init+0x434>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d018      	beq.n	800663e <HAL_DMA_Init+0x38a>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a36      	ldr	r2, [pc, #216]	; (80066ec <HAL_DMA_Init+0x438>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <HAL_DMA_Init+0x38a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a35      	ldr	r2, [pc, #212]	; (80066f0 <HAL_DMA_Init+0x43c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d00e      	beq.n	800663e <HAL_DMA_Init+0x38a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a33      	ldr	r2, [pc, #204]	; (80066f4 <HAL_DMA_Init+0x440>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d009      	beq.n	800663e <HAL_DMA_Init+0x38a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a32      	ldr	r2, [pc, #200]	; (80066f8 <HAL_DMA_Init+0x444>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d004      	beq.n	800663e <HAL_DMA_Init+0x38a>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a30      	ldr	r2, [pc, #192]	; (80066fc <HAL_DMA_Init+0x448>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d101      	bne.n	8006642 <HAL_DMA_Init+0x38e>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <HAL_DMA_Init+0x390>
 8006642:	2300      	movs	r3, #0
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 8097 	beq.w	8006778 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a24      	ldr	r2, [pc, #144]	; (80066e0 <HAL_DMA_Init+0x42c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d021      	beq.n	8006698 <HAL_DMA_Init+0x3e4>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a22      	ldr	r2, [pc, #136]	; (80066e4 <HAL_DMA_Init+0x430>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d01c      	beq.n	8006698 <HAL_DMA_Init+0x3e4>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a21      	ldr	r2, [pc, #132]	; (80066e8 <HAL_DMA_Init+0x434>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d017      	beq.n	8006698 <HAL_DMA_Init+0x3e4>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1f      	ldr	r2, [pc, #124]	; (80066ec <HAL_DMA_Init+0x438>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d012      	beq.n	8006698 <HAL_DMA_Init+0x3e4>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a1e      	ldr	r2, [pc, #120]	; (80066f0 <HAL_DMA_Init+0x43c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00d      	beq.n	8006698 <HAL_DMA_Init+0x3e4>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a1c      	ldr	r2, [pc, #112]	; (80066f4 <HAL_DMA_Init+0x440>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d008      	beq.n	8006698 <HAL_DMA_Init+0x3e4>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1b      	ldr	r2, [pc, #108]	; (80066f8 <HAL_DMA_Init+0x444>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <HAL_DMA_Init+0x3e4>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a19      	ldr	r2, [pc, #100]	; (80066fc <HAL_DMA_Init+0x448>)
 8006696:	4293      	cmp	r3, r2
 8006698:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4b12      	ldr	r3, [pc, #72]	; (8006700 <HAL_DMA_Init+0x44c>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	2b40      	cmp	r3, #64	; 0x40
 80066c0:	d020      	beq.n	8006704 <HAL_DMA_Init+0x450>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	2b80      	cmp	r3, #128	; 0x80
 80066c8:	d102      	bne.n	80066d0 <HAL_DMA_Init+0x41c>
 80066ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066ce:	e01a      	b.n	8006706 <HAL_DMA_Init+0x452>
 80066d0:	2300      	movs	r3, #0
 80066d2:	e018      	b.n	8006706 <HAL_DMA_Init+0x452>
 80066d4:	fe10803f 	.word	0xfe10803f
 80066d8:	5c001000 	.word	0x5c001000
 80066dc:	ffff0000 	.word	0xffff0000
 80066e0:	58025408 	.word	0x58025408
 80066e4:	5802541c 	.word	0x5802541c
 80066e8:	58025430 	.word	0x58025430
 80066ec:	58025444 	.word	0x58025444
 80066f0:	58025458 	.word	0x58025458
 80066f4:	5802546c 	.word	0x5802546c
 80066f8:	58025480 	.word	0x58025480
 80066fc:	58025494 	.word	0x58025494
 8006700:	fffe000f 	.word	0xfffe000f
 8006704:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	68d2      	ldr	r2, [r2, #12]
 800670a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800670c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006714:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800671c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006724:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800672c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006734:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	461a      	mov	r2, r3
 800674a:	4b6e      	ldr	r3, [pc, #440]	; (8006904 <HAL_DMA_Init+0x650>)
 800674c:	4413      	add	r3, r2
 800674e:	4a6e      	ldr	r2, [pc, #440]	; (8006908 <HAL_DMA_Init+0x654>)
 8006750:	fba2 2303 	umull	r2, r3, r2, r3
 8006754:	091b      	lsrs	r3, r3, #4
 8006756:	009a      	lsls	r2, r3, #2
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f002 f9b5 	bl	8008acc <DMA_CalcBaseAndBitshift>
 8006762:	4603      	mov	r3, r0
 8006764:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676a:	f003 031f 	and.w	r3, r3, #31
 800676e:	2201      	movs	r2, #1
 8006770:	409a      	lsls	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	605a      	str	r2, [r3, #4]
 8006776:	e008      	b.n	800678a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2240      	movs	r2, #64	; 0x40
 800677c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2203      	movs	r2, #3
 8006782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e0b7      	b.n	80068fa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a5f      	ldr	r2, [pc, #380]	; (800690c <HAL_DMA_Init+0x658>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d072      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a5d      	ldr	r2, [pc, #372]	; (8006910 <HAL_DMA_Init+0x65c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d06d      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a5c      	ldr	r2, [pc, #368]	; (8006914 <HAL_DMA_Init+0x660>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d068      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a5a      	ldr	r2, [pc, #360]	; (8006918 <HAL_DMA_Init+0x664>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d063      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a59      	ldr	r2, [pc, #356]	; (800691c <HAL_DMA_Init+0x668>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d05e      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a57      	ldr	r2, [pc, #348]	; (8006920 <HAL_DMA_Init+0x66c>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d059      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a56      	ldr	r2, [pc, #344]	; (8006924 <HAL_DMA_Init+0x670>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d054      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a54      	ldr	r2, [pc, #336]	; (8006928 <HAL_DMA_Init+0x674>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d04f      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a53      	ldr	r2, [pc, #332]	; (800692c <HAL_DMA_Init+0x678>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d04a      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a51      	ldr	r2, [pc, #324]	; (8006930 <HAL_DMA_Init+0x67c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d045      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a50      	ldr	r2, [pc, #320]	; (8006934 <HAL_DMA_Init+0x680>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d040      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a4e      	ldr	r2, [pc, #312]	; (8006938 <HAL_DMA_Init+0x684>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d03b      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a4d      	ldr	r2, [pc, #308]	; (800693c <HAL_DMA_Init+0x688>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d036      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a4b      	ldr	r2, [pc, #300]	; (8006940 <HAL_DMA_Init+0x68c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d031      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a4a      	ldr	r2, [pc, #296]	; (8006944 <HAL_DMA_Init+0x690>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d02c      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a48      	ldr	r2, [pc, #288]	; (8006948 <HAL_DMA_Init+0x694>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d027      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a47      	ldr	r2, [pc, #284]	; (800694c <HAL_DMA_Init+0x698>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d022      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a45      	ldr	r2, [pc, #276]	; (8006950 <HAL_DMA_Init+0x69c>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d01d      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a44      	ldr	r2, [pc, #272]	; (8006954 <HAL_DMA_Init+0x6a0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d018      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a42      	ldr	r2, [pc, #264]	; (8006958 <HAL_DMA_Init+0x6a4>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a41      	ldr	r2, [pc, #260]	; (800695c <HAL_DMA_Init+0x6a8>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a3f      	ldr	r2, [pc, #252]	; (8006960 <HAL_DMA_Init+0x6ac>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a3e      	ldr	r2, [pc, #248]	; (8006964 <HAL_DMA_Init+0x6b0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_DMA_Init+0x5c6>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a3c      	ldr	r2, [pc, #240]	; (8006968 <HAL_DMA_Init+0x6b4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d101      	bne.n	800687e <HAL_DMA_Init+0x5ca>
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <HAL_DMA_Init+0x5cc>
 800687e:	2300      	movs	r3, #0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d032      	beq.n	80068ea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f002 fa4f 	bl	8008d28 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b80      	cmp	r3, #128	; 0x80
 8006890:	d102      	bne.n	8006898 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80068ac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d010      	beq.n	80068d8 <HAL_DMA_Init+0x624>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2b08      	cmp	r3, #8
 80068bc:	d80c      	bhi.n	80068d8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f002 facc 	bl	8008e5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c8:	2200      	movs	r2, #0
 80068ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80068d4:	605a      	str	r2, [r3, #4]
 80068d6:	e008      	b.n	80068ea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	a7fdabf8 	.word	0xa7fdabf8
 8006908:	cccccccd 	.word	0xcccccccd
 800690c:	40020010 	.word	0x40020010
 8006910:	40020028 	.word	0x40020028
 8006914:	40020040 	.word	0x40020040
 8006918:	40020058 	.word	0x40020058
 800691c:	40020070 	.word	0x40020070
 8006920:	40020088 	.word	0x40020088
 8006924:	400200a0 	.word	0x400200a0
 8006928:	400200b8 	.word	0x400200b8
 800692c:	40020410 	.word	0x40020410
 8006930:	40020428 	.word	0x40020428
 8006934:	40020440 	.word	0x40020440
 8006938:	40020458 	.word	0x40020458
 800693c:	40020470 	.word	0x40020470
 8006940:	40020488 	.word	0x40020488
 8006944:	400204a0 	.word	0x400204a0
 8006948:	400204b8 	.word	0x400204b8
 800694c:	58025408 	.word	0x58025408
 8006950:	5802541c 	.word	0x5802541c
 8006954:	58025430 	.word	0x58025430
 8006958:	58025444 	.word	0x58025444
 800695c:	58025458 	.word	0x58025458
 8006960:	5802546c 	.word	0x5802546c
 8006964:	58025480 	.word	0x58025480
 8006968:	58025494 	.word	0x58025494

0800696c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800697a:	2300      	movs	r3, #0
 800697c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e226      	b.n	8006dd6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800698e:	2b01      	cmp	r3, #1
 8006990:	d101      	bne.n	8006996 <HAL_DMA_Start_IT+0x2a>
 8006992:	2302      	movs	r3, #2
 8006994:	e21f      	b.n	8006dd6 <HAL_DMA_Start_IT+0x46a>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	f040 820a 	bne.w	8006dc0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2202      	movs	r2, #2
 80069b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a68      	ldr	r2, [pc, #416]	; (8006b60 <HAL_DMA_Start_IT+0x1f4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d04a      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a66      	ldr	r2, [pc, #408]	; (8006b64 <HAL_DMA_Start_IT+0x1f8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d045      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a65      	ldr	r2, [pc, #404]	; (8006b68 <HAL_DMA_Start_IT+0x1fc>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d040      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a63      	ldr	r2, [pc, #396]	; (8006b6c <HAL_DMA_Start_IT+0x200>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d03b      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a62      	ldr	r2, [pc, #392]	; (8006b70 <HAL_DMA_Start_IT+0x204>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d036      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a60      	ldr	r2, [pc, #384]	; (8006b74 <HAL_DMA_Start_IT+0x208>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d031      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a5f      	ldr	r2, [pc, #380]	; (8006b78 <HAL_DMA_Start_IT+0x20c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d02c      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a5d      	ldr	r2, [pc, #372]	; (8006b7c <HAL_DMA_Start_IT+0x210>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d027      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a5c      	ldr	r2, [pc, #368]	; (8006b80 <HAL_DMA_Start_IT+0x214>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d022      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a5a      	ldr	r2, [pc, #360]	; (8006b84 <HAL_DMA_Start_IT+0x218>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d01d      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a59      	ldr	r2, [pc, #356]	; (8006b88 <HAL_DMA_Start_IT+0x21c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d018      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a57      	ldr	r2, [pc, #348]	; (8006b8c <HAL_DMA_Start_IT+0x220>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d013      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a56      	ldr	r2, [pc, #344]	; (8006b90 <HAL_DMA_Start_IT+0x224>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00e      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a54      	ldr	r2, [pc, #336]	; (8006b94 <HAL_DMA_Start_IT+0x228>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d009      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a53      	ldr	r2, [pc, #332]	; (8006b98 <HAL_DMA_Start_IT+0x22c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d004      	beq.n	8006a5a <HAL_DMA_Start_IT+0xee>
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a51      	ldr	r2, [pc, #324]	; (8006b9c <HAL_DMA_Start_IT+0x230>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d108      	bne.n	8006a6c <HAL_DMA_Start_IT+0x100>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0201 	bic.w	r2, r2, #1
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	e007      	b.n	8006a7c <HAL_DMA_Start_IT+0x110>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f022 0201 	bic.w	r2, r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f001 fe76 	bl	8008774 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a34      	ldr	r2, [pc, #208]	; (8006b60 <HAL_DMA_Start_IT+0x1f4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d04a      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a33      	ldr	r2, [pc, #204]	; (8006b64 <HAL_DMA_Start_IT+0x1f8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d045      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a31      	ldr	r2, [pc, #196]	; (8006b68 <HAL_DMA_Start_IT+0x1fc>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d040      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a30      	ldr	r2, [pc, #192]	; (8006b6c <HAL_DMA_Start_IT+0x200>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d03b      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a2e      	ldr	r2, [pc, #184]	; (8006b70 <HAL_DMA_Start_IT+0x204>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d036      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a2d      	ldr	r2, [pc, #180]	; (8006b74 <HAL_DMA_Start_IT+0x208>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d031      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a2b      	ldr	r2, [pc, #172]	; (8006b78 <HAL_DMA_Start_IT+0x20c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d02c      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a2a      	ldr	r2, [pc, #168]	; (8006b7c <HAL_DMA_Start_IT+0x210>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d027      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a28      	ldr	r2, [pc, #160]	; (8006b80 <HAL_DMA_Start_IT+0x214>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d022      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a27      	ldr	r2, [pc, #156]	; (8006b84 <HAL_DMA_Start_IT+0x218>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d01d      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a25      	ldr	r2, [pc, #148]	; (8006b88 <HAL_DMA_Start_IT+0x21c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d018      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a24      	ldr	r2, [pc, #144]	; (8006b8c <HAL_DMA_Start_IT+0x220>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d013      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a22      	ldr	r2, [pc, #136]	; (8006b90 <HAL_DMA_Start_IT+0x224>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00e      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a21      	ldr	r2, [pc, #132]	; (8006b94 <HAL_DMA_Start_IT+0x228>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d009      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a1f      	ldr	r2, [pc, #124]	; (8006b98 <HAL_DMA_Start_IT+0x22c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d004      	beq.n	8006b28 <HAL_DMA_Start_IT+0x1bc>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a1e      	ldr	r2, [pc, #120]	; (8006b9c <HAL_DMA_Start_IT+0x230>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d101      	bne.n	8006b2c <HAL_DMA_Start_IT+0x1c0>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e000      	b.n	8006b2e <HAL_DMA_Start_IT+0x1c2>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d036      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f023 021e 	bic.w	r2, r3, #30
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0216 	orr.w	r2, r2, #22
 8006b44:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d03e      	beq.n	8006bcc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0208 	orr.w	r2, r2, #8
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	e035      	b.n	8006bcc <HAL_DMA_Start_IT+0x260>
 8006b60:	40020010 	.word	0x40020010
 8006b64:	40020028 	.word	0x40020028
 8006b68:	40020040 	.word	0x40020040
 8006b6c:	40020058 	.word	0x40020058
 8006b70:	40020070 	.word	0x40020070
 8006b74:	40020088 	.word	0x40020088
 8006b78:	400200a0 	.word	0x400200a0
 8006b7c:	400200b8 	.word	0x400200b8
 8006b80:	40020410 	.word	0x40020410
 8006b84:	40020428 	.word	0x40020428
 8006b88:	40020440 	.word	0x40020440
 8006b8c:	40020458 	.word	0x40020458
 8006b90:	40020470 	.word	0x40020470
 8006b94:	40020488 	.word	0x40020488
 8006b98:	400204a0 	.word	0x400204a0
 8006b9c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f023 020e 	bic.w	r2, r3, #14
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f042 020a 	orr.w	r2, r2, #10
 8006bb2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d007      	beq.n	8006bcc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0204 	orr.w	r2, r2, #4
 8006bca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a83      	ldr	r2, [pc, #524]	; (8006de0 <HAL_DMA_Start_IT+0x474>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d072      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a82      	ldr	r2, [pc, #520]	; (8006de4 <HAL_DMA_Start_IT+0x478>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d06d      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a80      	ldr	r2, [pc, #512]	; (8006de8 <HAL_DMA_Start_IT+0x47c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d068      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a7f      	ldr	r2, [pc, #508]	; (8006dec <HAL_DMA_Start_IT+0x480>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d063      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a7d      	ldr	r2, [pc, #500]	; (8006df0 <HAL_DMA_Start_IT+0x484>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d05e      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a7c      	ldr	r2, [pc, #496]	; (8006df4 <HAL_DMA_Start_IT+0x488>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d059      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a7a      	ldr	r2, [pc, #488]	; (8006df8 <HAL_DMA_Start_IT+0x48c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d054      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a79      	ldr	r2, [pc, #484]	; (8006dfc <HAL_DMA_Start_IT+0x490>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d04f      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a77      	ldr	r2, [pc, #476]	; (8006e00 <HAL_DMA_Start_IT+0x494>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d04a      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a76      	ldr	r2, [pc, #472]	; (8006e04 <HAL_DMA_Start_IT+0x498>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d045      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a74      	ldr	r2, [pc, #464]	; (8006e08 <HAL_DMA_Start_IT+0x49c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d040      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a73      	ldr	r2, [pc, #460]	; (8006e0c <HAL_DMA_Start_IT+0x4a0>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d03b      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a71      	ldr	r2, [pc, #452]	; (8006e10 <HAL_DMA_Start_IT+0x4a4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d036      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a70      	ldr	r2, [pc, #448]	; (8006e14 <HAL_DMA_Start_IT+0x4a8>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d031      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a6e      	ldr	r2, [pc, #440]	; (8006e18 <HAL_DMA_Start_IT+0x4ac>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d02c      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a6d      	ldr	r2, [pc, #436]	; (8006e1c <HAL_DMA_Start_IT+0x4b0>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d027      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a6b      	ldr	r2, [pc, #428]	; (8006e20 <HAL_DMA_Start_IT+0x4b4>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d022      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a6a      	ldr	r2, [pc, #424]	; (8006e24 <HAL_DMA_Start_IT+0x4b8>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d01d      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a68      	ldr	r2, [pc, #416]	; (8006e28 <HAL_DMA_Start_IT+0x4bc>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d018      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a67      	ldr	r2, [pc, #412]	; (8006e2c <HAL_DMA_Start_IT+0x4c0>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d013      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a65      	ldr	r2, [pc, #404]	; (8006e30 <HAL_DMA_Start_IT+0x4c4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d00e      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a64      	ldr	r2, [pc, #400]	; (8006e34 <HAL_DMA_Start_IT+0x4c8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d009      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a62      	ldr	r2, [pc, #392]	; (8006e38 <HAL_DMA_Start_IT+0x4cc>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d004      	beq.n	8006cbc <HAL_DMA_Start_IT+0x350>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a61      	ldr	r2, [pc, #388]	; (8006e3c <HAL_DMA_Start_IT+0x4d0>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d101      	bne.n	8006cc0 <HAL_DMA_Start_IT+0x354>
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e000      	b.n	8006cc2 <HAL_DMA_Start_IT+0x356>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d01a      	beq.n	8006cfc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d007      	beq.n	8006ce4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cfa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a37      	ldr	r2, [pc, #220]	; (8006de0 <HAL_DMA_Start_IT+0x474>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d04a      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a36      	ldr	r2, [pc, #216]	; (8006de4 <HAL_DMA_Start_IT+0x478>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d045      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a34      	ldr	r2, [pc, #208]	; (8006de8 <HAL_DMA_Start_IT+0x47c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d040      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a33      	ldr	r2, [pc, #204]	; (8006dec <HAL_DMA_Start_IT+0x480>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d03b      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a31      	ldr	r2, [pc, #196]	; (8006df0 <HAL_DMA_Start_IT+0x484>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d036      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a30      	ldr	r2, [pc, #192]	; (8006df4 <HAL_DMA_Start_IT+0x488>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d031      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a2e      	ldr	r2, [pc, #184]	; (8006df8 <HAL_DMA_Start_IT+0x48c>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d02c      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a2d      	ldr	r2, [pc, #180]	; (8006dfc <HAL_DMA_Start_IT+0x490>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d027      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a2b      	ldr	r2, [pc, #172]	; (8006e00 <HAL_DMA_Start_IT+0x494>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d022      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a2a      	ldr	r2, [pc, #168]	; (8006e04 <HAL_DMA_Start_IT+0x498>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d01d      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a28      	ldr	r2, [pc, #160]	; (8006e08 <HAL_DMA_Start_IT+0x49c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d018      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a27      	ldr	r2, [pc, #156]	; (8006e0c <HAL_DMA_Start_IT+0x4a0>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d013      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a25      	ldr	r2, [pc, #148]	; (8006e10 <HAL_DMA_Start_IT+0x4a4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00e      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a24      	ldr	r2, [pc, #144]	; (8006e14 <HAL_DMA_Start_IT+0x4a8>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d009      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a22      	ldr	r2, [pc, #136]	; (8006e18 <HAL_DMA_Start_IT+0x4ac>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d004      	beq.n	8006d9c <HAL_DMA_Start_IT+0x430>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a21      	ldr	r2, [pc, #132]	; (8006e1c <HAL_DMA_Start_IT+0x4b0>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d108      	bne.n	8006dae <HAL_DMA_Start_IT+0x442>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f042 0201 	orr.w	r2, r2, #1
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	e012      	b.n	8006dd4 <HAL_DMA_Start_IT+0x468>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0201 	orr.w	r2, r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	e009      	b.n	8006dd4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	40020010 	.word	0x40020010
 8006de4:	40020028 	.word	0x40020028
 8006de8:	40020040 	.word	0x40020040
 8006dec:	40020058 	.word	0x40020058
 8006df0:	40020070 	.word	0x40020070
 8006df4:	40020088 	.word	0x40020088
 8006df8:	400200a0 	.word	0x400200a0
 8006dfc:	400200b8 	.word	0x400200b8
 8006e00:	40020410 	.word	0x40020410
 8006e04:	40020428 	.word	0x40020428
 8006e08:	40020440 	.word	0x40020440
 8006e0c:	40020458 	.word	0x40020458
 8006e10:	40020470 	.word	0x40020470
 8006e14:	40020488 	.word	0x40020488
 8006e18:	400204a0 	.word	0x400204a0
 8006e1c:	400204b8 	.word	0x400204b8
 8006e20:	58025408 	.word	0x58025408
 8006e24:	5802541c 	.word	0x5802541c
 8006e28:	58025430 	.word	0x58025430
 8006e2c:	58025444 	.word	0x58025444
 8006e30:	58025458 	.word	0x58025458
 8006e34:	5802546c 	.word	0x5802546c
 8006e38:	58025480 	.word	0x58025480
 8006e3c:	58025494 	.word	0x58025494

08006e40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006e48:	f7fd f90c 	bl	8004064 <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e2dc      	b.n	8007412 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d008      	beq.n	8006e76 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2280      	movs	r2, #128	; 0x80
 8006e68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e2cd      	b.n	8007412 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a76      	ldr	r2, [pc, #472]	; (8007054 <HAL_DMA_Abort+0x214>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d04a      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a74      	ldr	r2, [pc, #464]	; (8007058 <HAL_DMA_Abort+0x218>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d045      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a73      	ldr	r2, [pc, #460]	; (800705c <HAL_DMA_Abort+0x21c>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d040      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a71      	ldr	r2, [pc, #452]	; (8007060 <HAL_DMA_Abort+0x220>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d03b      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a70      	ldr	r2, [pc, #448]	; (8007064 <HAL_DMA_Abort+0x224>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d036      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a6e      	ldr	r2, [pc, #440]	; (8007068 <HAL_DMA_Abort+0x228>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d031      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a6d      	ldr	r2, [pc, #436]	; (800706c <HAL_DMA_Abort+0x22c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d02c      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a6b      	ldr	r2, [pc, #428]	; (8007070 <HAL_DMA_Abort+0x230>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d027      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a6a      	ldr	r2, [pc, #424]	; (8007074 <HAL_DMA_Abort+0x234>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d022      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a68      	ldr	r2, [pc, #416]	; (8007078 <HAL_DMA_Abort+0x238>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d01d      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a67      	ldr	r2, [pc, #412]	; (800707c <HAL_DMA_Abort+0x23c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d018      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a65      	ldr	r2, [pc, #404]	; (8007080 <HAL_DMA_Abort+0x240>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d013      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a64      	ldr	r2, [pc, #400]	; (8007084 <HAL_DMA_Abort+0x244>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00e      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a62      	ldr	r2, [pc, #392]	; (8007088 <HAL_DMA_Abort+0x248>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d009      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a61      	ldr	r2, [pc, #388]	; (800708c <HAL_DMA_Abort+0x24c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d004      	beq.n	8006f16 <HAL_DMA_Abort+0xd6>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a5f      	ldr	r2, [pc, #380]	; (8007090 <HAL_DMA_Abort+0x250>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d101      	bne.n	8006f1a <HAL_DMA_Abort+0xda>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <HAL_DMA_Abort+0xdc>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d013      	beq.n	8006f48 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 021e 	bic.w	r2, r2, #30
 8006f2e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	695a      	ldr	r2, [r3, #20]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f3e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	e00a      	b.n	8006f5e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 020e 	bic.w	r2, r2, #14
 8006f56:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a3c      	ldr	r2, [pc, #240]	; (8007054 <HAL_DMA_Abort+0x214>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d072      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a3a      	ldr	r2, [pc, #232]	; (8007058 <HAL_DMA_Abort+0x218>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d06d      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a39      	ldr	r2, [pc, #228]	; (800705c <HAL_DMA_Abort+0x21c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d068      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a37      	ldr	r2, [pc, #220]	; (8007060 <HAL_DMA_Abort+0x220>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d063      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a36      	ldr	r2, [pc, #216]	; (8007064 <HAL_DMA_Abort+0x224>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d05e      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a34      	ldr	r2, [pc, #208]	; (8007068 <HAL_DMA_Abort+0x228>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d059      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a33      	ldr	r2, [pc, #204]	; (800706c <HAL_DMA_Abort+0x22c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d054      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a31      	ldr	r2, [pc, #196]	; (8007070 <HAL_DMA_Abort+0x230>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d04f      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a30      	ldr	r2, [pc, #192]	; (8007074 <HAL_DMA_Abort+0x234>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d04a      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a2e      	ldr	r2, [pc, #184]	; (8007078 <HAL_DMA_Abort+0x238>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d045      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a2d      	ldr	r2, [pc, #180]	; (800707c <HAL_DMA_Abort+0x23c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d040      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a2b      	ldr	r2, [pc, #172]	; (8007080 <HAL_DMA_Abort+0x240>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d03b      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <HAL_DMA_Abort+0x244>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d036      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a28      	ldr	r2, [pc, #160]	; (8007088 <HAL_DMA_Abort+0x248>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d031      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a27      	ldr	r2, [pc, #156]	; (800708c <HAL_DMA_Abort+0x24c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d02c      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a25      	ldr	r2, [pc, #148]	; (8007090 <HAL_DMA_Abort+0x250>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d027      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a24      	ldr	r2, [pc, #144]	; (8007094 <HAL_DMA_Abort+0x254>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d022      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a22      	ldr	r2, [pc, #136]	; (8007098 <HAL_DMA_Abort+0x258>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d01d      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a21      	ldr	r2, [pc, #132]	; (800709c <HAL_DMA_Abort+0x25c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d018      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a1f      	ldr	r2, [pc, #124]	; (80070a0 <HAL_DMA_Abort+0x260>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d013      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a1e      	ldr	r2, [pc, #120]	; (80070a4 <HAL_DMA_Abort+0x264>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d00e      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a1c      	ldr	r2, [pc, #112]	; (80070a8 <HAL_DMA_Abort+0x268>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d009      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a1b      	ldr	r2, [pc, #108]	; (80070ac <HAL_DMA_Abort+0x26c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d004      	beq.n	800704e <HAL_DMA_Abort+0x20e>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a19      	ldr	r2, [pc, #100]	; (80070b0 <HAL_DMA_Abort+0x270>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d132      	bne.n	80070b4 <HAL_DMA_Abort+0x274>
 800704e:	2301      	movs	r3, #1
 8007050:	e031      	b.n	80070b6 <HAL_DMA_Abort+0x276>
 8007052:	bf00      	nop
 8007054:	40020010 	.word	0x40020010
 8007058:	40020028 	.word	0x40020028
 800705c:	40020040 	.word	0x40020040
 8007060:	40020058 	.word	0x40020058
 8007064:	40020070 	.word	0x40020070
 8007068:	40020088 	.word	0x40020088
 800706c:	400200a0 	.word	0x400200a0
 8007070:	400200b8 	.word	0x400200b8
 8007074:	40020410 	.word	0x40020410
 8007078:	40020428 	.word	0x40020428
 800707c:	40020440 	.word	0x40020440
 8007080:	40020458 	.word	0x40020458
 8007084:	40020470 	.word	0x40020470
 8007088:	40020488 	.word	0x40020488
 800708c:	400204a0 	.word	0x400204a0
 8007090:	400204b8 	.word	0x400204b8
 8007094:	58025408 	.word	0x58025408
 8007098:	5802541c 	.word	0x5802541c
 800709c:	58025430 	.word	0x58025430
 80070a0:	58025444 	.word	0x58025444
 80070a4:	58025458 	.word	0x58025458
 80070a8:	5802546c 	.word	0x5802546c
 80070ac:	58025480 	.word	0x58025480
 80070b0:	58025494 	.word	0x58025494
 80070b4:	2300      	movs	r3, #0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a6d      	ldr	r2, [pc, #436]	; (8007284 <HAL_DMA_Abort+0x444>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d04a      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a6b      	ldr	r2, [pc, #428]	; (8007288 <HAL_DMA_Abort+0x448>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d045      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a6a      	ldr	r2, [pc, #424]	; (800728c <HAL_DMA_Abort+0x44c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d040      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a68      	ldr	r2, [pc, #416]	; (8007290 <HAL_DMA_Abort+0x450>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d03b      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a67      	ldr	r2, [pc, #412]	; (8007294 <HAL_DMA_Abort+0x454>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d036      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a65      	ldr	r2, [pc, #404]	; (8007298 <HAL_DMA_Abort+0x458>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d031      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a64      	ldr	r2, [pc, #400]	; (800729c <HAL_DMA_Abort+0x45c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d02c      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a62      	ldr	r2, [pc, #392]	; (80072a0 <HAL_DMA_Abort+0x460>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d027      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a61      	ldr	r2, [pc, #388]	; (80072a4 <HAL_DMA_Abort+0x464>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d022      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a5f      	ldr	r2, [pc, #380]	; (80072a8 <HAL_DMA_Abort+0x468>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d01d      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a5e      	ldr	r2, [pc, #376]	; (80072ac <HAL_DMA_Abort+0x46c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d018      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a5c      	ldr	r2, [pc, #368]	; (80072b0 <HAL_DMA_Abort+0x470>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d013      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a5b      	ldr	r2, [pc, #364]	; (80072b4 <HAL_DMA_Abort+0x474>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00e      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a59      	ldr	r2, [pc, #356]	; (80072b8 <HAL_DMA_Abort+0x478>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d009      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a58      	ldr	r2, [pc, #352]	; (80072bc <HAL_DMA_Abort+0x47c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d004      	beq.n	800716a <HAL_DMA_Abort+0x32a>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a56      	ldr	r2, [pc, #344]	; (80072c0 <HAL_DMA_Abort+0x480>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d108      	bne.n	800717c <HAL_DMA_Abort+0x33c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0201 	bic.w	r2, r2, #1
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e007      	b.n	800718c <HAL_DMA_Abort+0x34c>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0201 	bic.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800718c:	e013      	b.n	80071b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800718e:	f7fc ff69 	bl	8004064 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b05      	cmp	r3, #5
 800719a:	d90c      	bls.n	80071b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2220      	movs	r2, #32
 80071a0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2203      	movs	r2, #3
 80071a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e12d      	b.n	8007412 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1e5      	bne.n	800718e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a2f      	ldr	r2, [pc, #188]	; (8007284 <HAL_DMA_Abort+0x444>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d04a      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a2d      	ldr	r2, [pc, #180]	; (8007288 <HAL_DMA_Abort+0x448>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d045      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a2c      	ldr	r2, [pc, #176]	; (800728c <HAL_DMA_Abort+0x44c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d040      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a2a      	ldr	r2, [pc, #168]	; (8007290 <HAL_DMA_Abort+0x450>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d03b      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a29      	ldr	r2, [pc, #164]	; (8007294 <HAL_DMA_Abort+0x454>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d036      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a27      	ldr	r2, [pc, #156]	; (8007298 <HAL_DMA_Abort+0x458>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d031      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a26      	ldr	r2, [pc, #152]	; (800729c <HAL_DMA_Abort+0x45c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d02c      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a24      	ldr	r2, [pc, #144]	; (80072a0 <HAL_DMA_Abort+0x460>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d027      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a23      	ldr	r2, [pc, #140]	; (80072a4 <HAL_DMA_Abort+0x464>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d022      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a21      	ldr	r2, [pc, #132]	; (80072a8 <HAL_DMA_Abort+0x468>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d01d      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a20      	ldr	r2, [pc, #128]	; (80072ac <HAL_DMA_Abort+0x46c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d018      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a1e      	ldr	r2, [pc, #120]	; (80072b0 <HAL_DMA_Abort+0x470>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d013      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a1d      	ldr	r2, [pc, #116]	; (80072b4 <HAL_DMA_Abort+0x474>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00e      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a1b      	ldr	r2, [pc, #108]	; (80072b8 <HAL_DMA_Abort+0x478>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d009      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a1a      	ldr	r2, [pc, #104]	; (80072bc <HAL_DMA_Abort+0x47c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d004      	beq.n	8007262 <HAL_DMA_Abort+0x422>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a18      	ldr	r2, [pc, #96]	; (80072c0 <HAL_DMA_Abort+0x480>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d101      	bne.n	8007266 <HAL_DMA_Abort+0x426>
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <HAL_DMA_Abort+0x428>
 8007266:	2300      	movs	r3, #0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d02b      	beq.n	80072c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007270:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007276:	f003 031f 	and.w	r3, r3, #31
 800727a:	223f      	movs	r2, #63	; 0x3f
 800727c:	409a      	lsls	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	609a      	str	r2, [r3, #8]
 8007282:	e02a      	b.n	80072da <HAL_DMA_Abort+0x49a>
 8007284:	40020010 	.word	0x40020010
 8007288:	40020028 	.word	0x40020028
 800728c:	40020040 	.word	0x40020040
 8007290:	40020058 	.word	0x40020058
 8007294:	40020070 	.word	0x40020070
 8007298:	40020088 	.word	0x40020088
 800729c:	400200a0 	.word	0x400200a0
 80072a0:	400200b8 	.word	0x400200b8
 80072a4:	40020410 	.word	0x40020410
 80072a8:	40020428 	.word	0x40020428
 80072ac:	40020440 	.word	0x40020440
 80072b0:	40020458 	.word	0x40020458
 80072b4:	40020470 	.word	0x40020470
 80072b8:	40020488 	.word	0x40020488
 80072bc:	400204a0 	.word	0x400204a0
 80072c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	2201      	movs	r2, #1
 80072d4:	409a      	lsls	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a4f      	ldr	r2, [pc, #316]	; (800741c <HAL_DMA_Abort+0x5dc>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d072      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a4d      	ldr	r2, [pc, #308]	; (8007420 <HAL_DMA_Abort+0x5e0>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d06d      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a4c      	ldr	r2, [pc, #304]	; (8007424 <HAL_DMA_Abort+0x5e4>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d068      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a4a      	ldr	r2, [pc, #296]	; (8007428 <HAL_DMA_Abort+0x5e8>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d063      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a49      	ldr	r2, [pc, #292]	; (800742c <HAL_DMA_Abort+0x5ec>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d05e      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a47      	ldr	r2, [pc, #284]	; (8007430 <HAL_DMA_Abort+0x5f0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d059      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a46      	ldr	r2, [pc, #280]	; (8007434 <HAL_DMA_Abort+0x5f4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d054      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a44      	ldr	r2, [pc, #272]	; (8007438 <HAL_DMA_Abort+0x5f8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d04f      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a43      	ldr	r2, [pc, #268]	; (800743c <HAL_DMA_Abort+0x5fc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d04a      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a41      	ldr	r2, [pc, #260]	; (8007440 <HAL_DMA_Abort+0x600>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d045      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a40      	ldr	r2, [pc, #256]	; (8007444 <HAL_DMA_Abort+0x604>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d040      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a3e      	ldr	r2, [pc, #248]	; (8007448 <HAL_DMA_Abort+0x608>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d03b      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a3d      	ldr	r2, [pc, #244]	; (800744c <HAL_DMA_Abort+0x60c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d036      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a3b      	ldr	r2, [pc, #236]	; (8007450 <HAL_DMA_Abort+0x610>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d031      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a3a      	ldr	r2, [pc, #232]	; (8007454 <HAL_DMA_Abort+0x614>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d02c      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a38      	ldr	r2, [pc, #224]	; (8007458 <HAL_DMA_Abort+0x618>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d027      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a37      	ldr	r2, [pc, #220]	; (800745c <HAL_DMA_Abort+0x61c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d022      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a35      	ldr	r2, [pc, #212]	; (8007460 <HAL_DMA_Abort+0x620>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d01d      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a34      	ldr	r2, [pc, #208]	; (8007464 <HAL_DMA_Abort+0x624>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d018      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a32      	ldr	r2, [pc, #200]	; (8007468 <HAL_DMA_Abort+0x628>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d013      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a31      	ldr	r2, [pc, #196]	; (800746c <HAL_DMA_Abort+0x62c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00e      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a2f      	ldr	r2, [pc, #188]	; (8007470 <HAL_DMA_Abort+0x630>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d009      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a2e      	ldr	r2, [pc, #184]	; (8007474 <HAL_DMA_Abort+0x634>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d004      	beq.n	80073ca <HAL_DMA_Abort+0x58a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a2c      	ldr	r2, [pc, #176]	; (8007478 <HAL_DMA_Abort+0x638>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d101      	bne.n	80073ce <HAL_DMA_Abort+0x58e>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e000      	b.n	80073d0 <HAL_DMA_Abort+0x590>
 80073ce:	2300      	movs	r3, #0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d015      	beq.n	8007400 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00c      	beq.n	8007400 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	40020010 	.word	0x40020010
 8007420:	40020028 	.word	0x40020028
 8007424:	40020040 	.word	0x40020040
 8007428:	40020058 	.word	0x40020058
 800742c:	40020070 	.word	0x40020070
 8007430:	40020088 	.word	0x40020088
 8007434:	400200a0 	.word	0x400200a0
 8007438:	400200b8 	.word	0x400200b8
 800743c:	40020410 	.word	0x40020410
 8007440:	40020428 	.word	0x40020428
 8007444:	40020440 	.word	0x40020440
 8007448:	40020458 	.word	0x40020458
 800744c:	40020470 	.word	0x40020470
 8007450:	40020488 	.word	0x40020488
 8007454:	400204a0 	.word	0x400204a0
 8007458:	400204b8 	.word	0x400204b8
 800745c:	58025408 	.word	0x58025408
 8007460:	5802541c 	.word	0x5802541c
 8007464:	58025430 	.word	0x58025430
 8007468:	58025444 	.word	0x58025444
 800746c:	58025458 	.word	0x58025458
 8007470:	5802546c 	.word	0x5802546c
 8007474:	58025480 	.word	0x58025480
 8007478:	58025494 	.word	0x58025494

0800747c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e237      	b.n	80078fe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b02      	cmp	r3, #2
 8007498:	d004      	beq.n	80074a4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2280      	movs	r2, #128	; 0x80
 800749e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e22c      	b.n	80078fe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a5c      	ldr	r2, [pc, #368]	; (800761c <HAL_DMA_Abort_IT+0x1a0>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d04a      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a5b      	ldr	r2, [pc, #364]	; (8007620 <HAL_DMA_Abort_IT+0x1a4>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d045      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a59      	ldr	r2, [pc, #356]	; (8007624 <HAL_DMA_Abort_IT+0x1a8>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d040      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a58      	ldr	r2, [pc, #352]	; (8007628 <HAL_DMA_Abort_IT+0x1ac>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d03b      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a56      	ldr	r2, [pc, #344]	; (800762c <HAL_DMA_Abort_IT+0x1b0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d036      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a55      	ldr	r2, [pc, #340]	; (8007630 <HAL_DMA_Abort_IT+0x1b4>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d031      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a53      	ldr	r2, [pc, #332]	; (8007634 <HAL_DMA_Abort_IT+0x1b8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d02c      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a52      	ldr	r2, [pc, #328]	; (8007638 <HAL_DMA_Abort_IT+0x1bc>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d027      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a50      	ldr	r2, [pc, #320]	; (800763c <HAL_DMA_Abort_IT+0x1c0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d022      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a4f      	ldr	r2, [pc, #316]	; (8007640 <HAL_DMA_Abort_IT+0x1c4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d01d      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a4d      	ldr	r2, [pc, #308]	; (8007644 <HAL_DMA_Abort_IT+0x1c8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d018      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a4c      	ldr	r2, [pc, #304]	; (8007648 <HAL_DMA_Abort_IT+0x1cc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d013      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a4a      	ldr	r2, [pc, #296]	; (800764c <HAL_DMA_Abort_IT+0x1d0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00e      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a49      	ldr	r2, [pc, #292]	; (8007650 <HAL_DMA_Abort_IT+0x1d4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d009      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a47      	ldr	r2, [pc, #284]	; (8007654 <HAL_DMA_Abort_IT+0x1d8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d004      	beq.n	8007544 <HAL_DMA_Abort_IT+0xc8>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a46      	ldr	r2, [pc, #280]	; (8007658 <HAL_DMA_Abort_IT+0x1dc>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d101      	bne.n	8007548 <HAL_DMA_Abort_IT+0xcc>
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <HAL_DMA_Abort_IT+0xce>
 8007548:	2300      	movs	r3, #0
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 8086 	beq.w	800765c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2204      	movs	r2, #4
 8007554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a2f      	ldr	r2, [pc, #188]	; (800761c <HAL_DMA_Abort_IT+0x1a0>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d04a      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a2e      	ldr	r2, [pc, #184]	; (8007620 <HAL_DMA_Abort_IT+0x1a4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d045      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a2c      	ldr	r2, [pc, #176]	; (8007624 <HAL_DMA_Abort_IT+0x1a8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d040      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a2b      	ldr	r2, [pc, #172]	; (8007628 <HAL_DMA_Abort_IT+0x1ac>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d03b      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a29      	ldr	r2, [pc, #164]	; (800762c <HAL_DMA_Abort_IT+0x1b0>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d036      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a28      	ldr	r2, [pc, #160]	; (8007630 <HAL_DMA_Abort_IT+0x1b4>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d031      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a26      	ldr	r2, [pc, #152]	; (8007634 <HAL_DMA_Abort_IT+0x1b8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d02c      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a25      	ldr	r2, [pc, #148]	; (8007638 <HAL_DMA_Abort_IT+0x1bc>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d027      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a23      	ldr	r2, [pc, #140]	; (800763c <HAL_DMA_Abort_IT+0x1c0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d022      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a22      	ldr	r2, [pc, #136]	; (8007640 <HAL_DMA_Abort_IT+0x1c4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d01d      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a20      	ldr	r2, [pc, #128]	; (8007644 <HAL_DMA_Abort_IT+0x1c8>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d018      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1f      	ldr	r2, [pc, #124]	; (8007648 <HAL_DMA_Abort_IT+0x1cc>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d013      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a1d      	ldr	r2, [pc, #116]	; (800764c <HAL_DMA_Abort_IT+0x1d0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d00e      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a1c      	ldr	r2, [pc, #112]	; (8007650 <HAL_DMA_Abort_IT+0x1d4>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d009      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a1a      	ldr	r2, [pc, #104]	; (8007654 <HAL_DMA_Abort_IT+0x1d8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d004      	beq.n	80075f8 <HAL_DMA_Abort_IT+0x17c>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a19      	ldr	r2, [pc, #100]	; (8007658 <HAL_DMA_Abort_IT+0x1dc>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d108      	bne.n	800760a <HAL_DMA_Abort_IT+0x18e>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0201 	bic.w	r2, r2, #1
 8007606:	601a      	str	r2, [r3, #0]
 8007608:	e178      	b.n	80078fc <HAL_DMA_Abort_IT+0x480>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 0201 	bic.w	r2, r2, #1
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	e16f      	b.n	80078fc <HAL_DMA_Abort_IT+0x480>
 800761c:	40020010 	.word	0x40020010
 8007620:	40020028 	.word	0x40020028
 8007624:	40020040 	.word	0x40020040
 8007628:	40020058 	.word	0x40020058
 800762c:	40020070 	.word	0x40020070
 8007630:	40020088 	.word	0x40020088
 8007634:	400200a0 	.word	0x400200a0
 8007638:	400200b8 	.word	0x400200b8
 800763c:	40020410 	.word	0x40020410
 8007640:	40020428 	.word	0x40020428
 8007644:	40020440 	.word	0x40020440
 8007648:	40020458 	.word	0x40020458
 800764c:	40020470 	.word	0x40020470
 8007650:	40020488 	.word	0x40020488
 8007654:	400204a0 	.word	0x400204a0
 8007658:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 020e 	bic.w	r2, r2, #14
 800766a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a6c      	ldr	r2, [pc, #432]	; (8007824 <HAL_DMA_Abort_IT+0x3a8>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d04a      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a6b      	ldr	r2, [pc, #428]	; (8007828 <HAL_DMA_Abort_IT+0x3ac>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d045      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a69      	ldr	r2, [pc, #420]	; (800782c <HAL_DMA_Abort_IT+0x3b0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d040      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a68      	ldr	r2, [pc, #416]	; (8007830 <HAL_DMA_Abort_IT+0x3b4>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d03b      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a66      	ldr	r2, [pc, #408]	; (8007834 <HAL_DMA_Abort_IT+0x3b8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d036      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a65      	ldr	r2, [pc, #404]	; (8007838 <HAL_DMA_Abort_IT+0x3bc>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d031      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a63      	ldr	r2, [pc, #396]	; (800783c <HAL_DMA_Abort_IT+0x3c0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d02c      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a62      	ldr	r2, [pc, #392]	; (8007840 <HAL_DMA_Abort_IT+0x3c4>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d027      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a60      	ldr	r2, [pc, #384]	; (8007844 <HAL_DMA_Abort_IT+0x3c8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d022      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a5f      	ldr	r2, [pc, #380]	; (8007848 <HAL_DMA_Abort_IT+0x3cc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d01d      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a5d      	ldr	r2, [pc, #372]	; (800784c <HAL_DMA_Abort_IT+0x3d0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d018      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a5c      	ldr	r2, [pc, #368]	; (8007850 <HAL_DMA_Abort_IT+0x3d4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d013      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a5a      	ldr	r2, [pc, #360]	; (8007854 <HAL_DMA_Abort_IT+0x3d8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00e      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a59      	ldr	r2, [pc, #356]	; (8007858 <HAL_DMA_Abort_IT+0x3dc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d009      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a57      	ldr	r2, [pc, #348]	; (800785c <HAL_DMA_Abort_IT+0x3e0>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d004      	beq.n	800770c <HAL_DMA_Abort_IT+0x290>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a56      	ldr	r2, [pc, #344]	; (8007860 <HAL_DMA_Abort_IT+0x3e4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d108      	bne.n	800771e <HAL_DMA_Abort_IT+0x2a2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0201 	bic.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	e007      	b.n	800772e <HAL_DMA_Abort_IT+0x2b2>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 0201 	bic.w	r2, r2, #1
 800772c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a3c      	ldr	r2, [pc, #240]	; (8007824 <HAL_DMA_Abort_IT+0x3a8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d072      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a3a      	ldr	r2, [pc, #232]	; (8007828 <HAL_DMA_Abort_IT+0x3ac>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d06d      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a39      	ldr	r2, [pc, #228]	; (800782c <HAL_DMA_Abort_IT+0x3b0>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d068      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a37      	ldr	r2, [pc, #220]	; (8007830 <HAL_DMA_Abort_IT+0x3b4>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d063      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a36      	ldr	r2, [pc, #216]	; (8007834 <HAL_DMA_Abort_IT+0x3b8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d05e      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a34      	ldr	r2, [pc, #208]	; (8007838 <HAL_DMA_Abort_IT+0x3bc>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d059      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a33      	ldr	r2, [pc, #204]	; (800783c <HAL_DMA_Abort_IT+0x3c0>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d054      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a31      	ldr	r2, [pc, #196]	; (8007840 <HAL_DMA_Abort_IT+0x3c4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d04f      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a30      	ldr	r2, [pc, #192]	; (8007844 <HAL_DMA_Abort_IT+0x3c8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d04a      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a2e      	ldr	r2, [pc, #184]	; (8007848 <HAL_DMA_Abort_IT+0x3cc>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d045      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a2d      	ldr	r2, [pc, #180]	; (800784c <HAL_DMA_Abort_IT+0x3d0>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d040      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a2b      	ldr	r2, [pc, #172]	; (8007850 <HAL_DMA_Abort_IT+0x3d4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d03b      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a2a      	ldr	r2, [pc, #168]	; (8007854 <HAL_DMA_Abort_IT+0x3d8>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d036      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a28      	ldr	r2, [pc, #160]	; (8007858 <HAL_DMA_Abort_IT+0x3dc>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d031      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a27      	ldr	r2, [pc, #156]	; (800785c <HAL_DMA_Abort_IT+0x3e0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d02c      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a25      	ldr	r2, [pc, #148]	; (8007860 <HAL_DMA_Abort_IT+0x3e4>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d027      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a24      	ldr	r2, [pc, #144]	; (8007864 <HAL_DMA_Abort_IT+0x3e8>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d022      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a22      	ldr	r2, [pc, #136]	; (8007868 <HAL_DMA_Abort_IT+0x3ec>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d01d      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a21      	ldr	r2, [pc, #132]	; (800786c <HAL_DMA_Abort_IT+0x3f0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d018      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a1f      	ldr	r2, [pc, #124]	; (8007870 <HAL_DMA_Abort_IT+0x3f4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d013      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a1e      	ldr	r2, [pc, #120]	; (8007874 <HAL_DMA_Abort_IT+0x3f8>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d00e      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a1c      	ldr	r2, [pc, #112]	; (8007878 <HAL_DMA_Abort_IT+0x3fc>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d009      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a1b      	ldr	r2, [pc, #108]	; (800787c <HAL_DMA_Abort_IT+0x400>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d004      	beq.n	800781e <HAL_DMA_Abort_IT+0x3a2>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a19      	ldr	r2, [pc, #100]	; (8007880 <HAL_DMA_Abort_IT+0x404>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d132      	bne.n	8007884 <HAL_DMA_Abort_IT+0x408>
 800781e:	2301      	movs	r3, #1
 8007820:	e031      	b.n	8007886 <HAL_DMA_Abort_IT+0x40a>
 8007822:	bf00      	nop
 8007824:	40020010 	.word	0x40020010
 8007828:	40020028 	.word	0x40020028
 800782c:	40020040 	.word	0x40020040
 8007830:	40020058 	.word	0x40020058
 8007834:	40020070 	.word	0x40020070
 8007838:	40020088 	.word	0x40020088
 800783c:	400200a0 	.word	0x400200a0
 8007840:	400200b8 	.word	0x400200b8
 8007844:	40020410 	.word	0x40020410
 8007848:	40020428 	.word	0x40020428
 800784c:	40020440 	.word	0x40020440
 8007850:	40020458 	.word	0x40020458
 8007854:	40020470 	.word	0x40020470
 8007858:	40020488 	.word	0x40020488
 800785c:	400204a0 	.word	0x400204a0
 8007860:	400204b8 	.word	0x400204b8
 8007864:	58025408 	.word	0x58025408
 8007868:	5802541c 	.word	0x5802541c
 800786c:	58025430 	.word	0x58025430
 8007870:	58025444 	.word	0x58025444
 8007874:	58025458 	.word	0x58025458
 8007878:	5802546c 	.word	0x5802546c
 800787c:	58025480 	.word	0x58025480
 8007880:	58025494 	.word	0x58025494
 8007884:	2300      	movs	r3, #0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d028      	beq.n	80078dc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007894:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007898:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a4:	f003 031f 	and.w	r3, r3, #31
 80078a8:	2201      	movs	r2, #1
 80078aa:	409a      	lsls	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80078b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00c      	beq.n	80078dc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80078da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d003      	beq.n	80078fc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop

08007908 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	; 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007914:	4b67      	ldr	r3, [pc, #412]	; (8007ab4 <HAL_DMA_IRQHandler+0x1ac>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a67      	ldr	r2, [pc, #412]	; (8007ab8 <HAL_DMA_IRQHandler+0x1b0>)
 800791a:	fba2 2303 	umull	r2, r3, r2, r3
 800791e:	0a9b      	lsrs	r3, r3, #10
 8007920:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007926:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800792c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a5f      	ldr	r2, [pc, #380]	; (8007abc <HAL_DMA_IRQHandler+0x1b4>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d04a      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a5d      	ldr	r2, [pc, #372]	; (8007ac0 <HAL_DMA_IRQHandler+0x1b8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d045      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a5c      	ldr	r2, [pc, #368]	; (8007ac4 <HAL_DMA_IRQHandler+0x1bc>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d040      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a5a      	ldr	r2, [pc, #360]	; (8007ac8 <HAL_DMA_IRQHandler+0x1c0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d03b      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a59      	ldr	r2, [pc, #356]	; (8007acc <HAL_DMA_IRQHandler+0x1c4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d036      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a57      	ldr	r2, [pc, #348]	; (8007ad0 <HAL_DMA_IRQHandler+0x1c8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d031      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a56      	ldr	r2, [pc, #344]	; (8007ad4 <HAL_DMA_IRQHandler+0x1cc>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d02c      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a54      	ldr	r2, [pc, #336]	; (8007ad8 <HAL_DMA_IRQHandler+0x1d0>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d027      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a53      	ldr	r2, [pc, #332]	; (8007adc <HAL_DMA_IRQHandler+0x1d4>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d022      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a51      	ldr	r2, [pc, #324]	; (8007ae0 <HAL_DMA_IRQHandler+0x1d8>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d01d      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a50      	ldr	r2, [pc, #320]	; (8007ae4 <HAL_DMA_IRQHandler+0x1dc>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d018      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a4e      	ldr	r2, [pc, #312]	; (8007ae8 <HAL_DMA_IRQHandler+0x1e0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d013      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a4d      	ldr	r2, [pc, #308]	; (8007aec <HAL_DMA_IRQHandler+0x1e4>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00e      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a4b      	ldr	r2, [pc, #300]	; (8007af0 <HAL_DMA_IRQHandler+0x1e8>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d009      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a4a      	ldr	r2, [pc, #296]	; (8007af4 <HAL_DMA_IRQHandler+0x1ec>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d004      	beq.n	80079da <HAL_DMA_IRQHandler+0xd2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a48      	ldr	r2, [pc, #288]	; (8007af8 <HAL_DMA_IRQHandler+0x1f0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d101      	bne.n	80079de <HAL_DMA_IRQHandler+0xd6>
 80079da:	2301      	movs	r3, #1
 80079dc:	e000      	b.n	80079e0 <HAL_DMA_IRQHandler+0xd8>
 80079de:	2300      	movs	r3, #0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 842b 	beq.w	800823c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ea:	f003 031f 	and.w	r3, r3, #31
 80079ee:	2208      	movs	r2, #8
 80079f0:	409a      	lsls	r2, r3
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	4013      	ands	r3, r2
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 80a2 	beq.w	8007b40 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a2e      	ldr	r2, [pc, #184]	; (8007abc <HAL_DMA_IRQHandler+0x1b4>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d04a      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a2d      	ldr	r2, [pc, #180]	; (8007ac0 <HAL_DMA_IRQHandler+0x1b8>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d045      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a2b      	ldr	r2, [pc, #172]	; (8007ac4 <HAL_DMA_IRQHandler+0x1bc>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d040      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a2a      	ldr	r2, [pc, #168]	; (8007ac8 <HAL_DMA_IRQHandler+0x1c0>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d03b      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a28      	ldr	r2, [pc, #160]	; (8007acc <HAL_DMA_IRQHandler+0x1c4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d036      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a27      	ldr	r2, [pc, #156]	; (8007ad0 <HAL_DMA_IRQHandler+0x1c8>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d031      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a25      	ldr	r2, [pc, #148]	; (8007ad4 <HAL_DMA_IRQHandler+0x1cc>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d02c      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a24      	ldr	r2, [pc, #144]	; (8007ad8 <HAL_DMA_IRQHandler+0x1d0>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d027      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a22      	ldr	r2, [pc, #136]	; (8007adc <HAL_DMA_IRQHandler+0x1d4>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d022      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a21      	ldr	r2, [pc, #132]	; (8007ae0 <HAL_DMA_IRQHandler+0x1d8>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d01d      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1f      	ldr	r2, [pc, #124]	; (8007ae4 <HAL_DMA_IRQHandler+0x1dc>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d018      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ae8 <HAL_DMA_IRQHandler+0x1e0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d013      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1c      	ldr	r2, [pc, #112]	; (8007aec <HAL_DMA_IRQHandler+0x1e4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00e      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a1b      	ldr	r2, [pc, #108]	; (8007af0 <HAL_DMA_IRQHandler+0x1e8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d009      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a19      	ldr	r2, [pc, #100]	; (8007af4 <HAL_DMA_IRQHandler+0x1ec>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d004      	beq.n	8007a9c <HAL_DMA_IRQHandler+0x194>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a18      	ldr	r2, [pc, #96]	; (8007af8 <HAL_DMA_IRQHandler+0x1f0>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d12f      	bne.n	8007afc <HAL_DMA_IRQHandler+0x1f4>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0304 	and.w	r3, r3, #4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	bf14      	ite	ne
 8007aaa:	2301      	movne	r3, #1
 8007aac:	2300      	moveq	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	e02e      	b.n	8007b10 <HAL_DMA_IRQHandler+0x208>
 8007ab2:	bf00      	nop
 8007ab4:	2400008c 	.word	0x2400008c
 8007ab8:	1b4e81b5 	.word	0x1b4e81b5
 8007abc:	40020010 	.word	0x40020010
 8007ac0:	40020028 	.word	0x40020028
 8007ac4:	40020040 	.word	0x40020040
 8007ac8:	40020058 	.word	0x40020058
 8007acc:	40020070 	.word	0x40020070
 8007ad0:	40020088 	.word	0x40020088
 8007ad4:	400200a0 	.word	0x400200a0
 8007ad8:	400200b8 	.word	0x400200b8
 8007adc:	40020410 	.word	0x40020410
 8007ae0:	40020428 	.word	0x40020428
 8007ae4:	40020440 	.word	0x40020440
 8007ae8:	40020458 	.word	0x40020458
 8007aec:	40020470 	.word	0x40020470
 8007af0:	40020488 	.word	0x40020488
 8007af4:	400204a0 	.word	0x400204a0
 8007af8:	400204b8 	.word	0x400204b8
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0308 	and.w	r3, r3, #8
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bf14      	ite	ne
 8007b0a:	2301      	movne	r3, #1
 8007b0c:	2300      	moveq	r3, #0
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d015      	beq.n	8007b40 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0204 	bic.w	r2, r2, #4
 8007b22:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b28:	f003 031f 	and.w	r3, r3, #31
 8007b2c:	2208      	movs	r2, #8
 8007b2e:	409a      	lsls	r2, r3
 8007b30:	6a3b      	ldr	r3, [r7, #32]
 8007b32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b38:	f043 0201 	orr.w	r2, r3, #1
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b44:	f003 031f 	and.w	r3, r3, #31
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d06e      	beq.n	8007c34 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a69      	ldr	r2, [pc, #420]	; (8007d00 <HAL_DMA_IRQHandler+0x3f8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d04a      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a67      	ldr	r2, [pc, #412]	; (8007d04 <HAL_DMA_IRQHandler+0x3fc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d045      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a66      	ldr	r2, [pc, #408]	; (8007d08 <HAL_DMA_IRQHandler+0x400>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d040      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a64      	ldr	r2, [pc, #400]	; (8007d0c <HAL_DMA_IRQHandler+0x404>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d03b      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a63      	ldr	r2, [pc, #396]	; (8007d10 <HAL_DMA_IRQHandler+0x408>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d036      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a61      	ldr	r2, [pc, #388]	; (8007d14 <HAL_DMA_IRQHandler+0x40c>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d031      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a60      	ldr	r2, [pc, #384]	; (8007d18 <HAL_DMA_IRQHandler+0x410>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d02c      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a5e      	ldr	r2, [pc, #376]	; (8007d1c <HAL_DMA_IRQHandler+0x414>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d027      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a5d      	ldr	r2, [pc, #372]	; (8007d20 <HAL_DMA_IRQHandler+0x418>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d022      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a5b      	ldr	r2, [pc, #364]	; (8007d24 <HAL_DMA_IRQHandler+0x41c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d01d      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a5a      	ldr	r2, [pc, #360]	; (8007d28 <HAL_DMA_IRQHandler+0x420>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d018      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a58      	ldr	r2, [pc, #352]	; (8007d2c <HAL_DMA_IRQHandler+0x424>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d013      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a57      	ldr	r2, [pc, #348]	; (8007d30 <HAL_DMA_IRQHandler+0x428>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d00e      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a55      	ldr	r2, [pc, #340]	; (8007d34 <HAL_DMA_IRQHandler+0x42c>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d009      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a54      	ldr	r2, [pc, #336]	; (8007d38 <HAL_DMA_IRQHandler+0x430>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d004      	beq.n	8007bf6 <HAL_DMA_IRQHandler+0x2ee>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a52      	ldr	r2, [pc, #328]	; (8007d3c <HAL_DMA_IRQHandler+0x434>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d10a      	bne.n	8007c0c <HAL_DMA_IRQHandler+0x304>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	bf14      	ite	ne
 8007c04:	2301      	movne	r3, #1
 8007c06:	2300      	moveq	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	e003      	b.n	8007c14 <HAL_DMA_IRQHandler+0x30c>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2300      	movs	r3, #0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00d      	beq.n	8007c34 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c1c:	f003 031f 	and.w	r3, r3, #31
 8007c20:	2201      	movs	r2, #1
 8007c22:	409a      	lsls	r2, r3
 8007c24:	6a3b      	ldr	r3, [r7, #32]
 8007c26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2c:	f043 0202 	orr.w	r2, r3, #2
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c38:	f003 031f 	and.w	r3, r3, #31
 8007c3c:	2204      	movs	r2, #4
 8007c3e:	409a      	lsls	r2, r3
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	4013      	ands	r3, r2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 808f 	beq.w	8007d68 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a2c      	ldr	r2, [pc, #176]	; (8007d00 <HAL_DMA_IRQHandler+0x3f8>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d04a      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a2a      	ldr	r2, [pc, #168]	; (8007d04 <HAL_DMA_IRQHandler+0x3fc>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d045      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a29      	ldr	r2, [pc, #164]	; (8007d08 <HAL_DMA_IRQHandler+0x400>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d040      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a27      	ldr	r2, [pc, #156]	; (8007d0c <HAL_DMA_IRQHandler+0x404>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d03b      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a26      	ldr	r2, [pc, #152]	; (8007d10 <HAL_DMA_IRQHandler+0x408>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d036      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a24      	ldr	r2, [pc, #144]	; (8007d14 <HAL_DMA_IRQHandler+0x40c>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d031      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a23      	ldr	r2, [pc, #140]	; (8007d18 <HAL_DMA_IRQHandler+0x410>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d02c      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a21      	ldr	r2, [pc, #132]	; (8007d1c <HAL_DMA_IRQHandler+0x414>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d027      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a20      	ldr	r2, [pc, #128]	; (8007d20 <HAL_DMA_IRQHandler+0x418>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d022      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a1e      	ldr	r2, [pc, #120]	; (8007d24 <HAL_DMA_IRQHandler+0x41c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d01d      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a1d      	ldr	r2, [pc, #116]	; (8007d28 <HAL_DMA_IRQHandler+0x420>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d018      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a1b      	ldr	r2, [pc, #108]	; (8007d2c <HAL_DMA_IRQHandler+0x424>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d013      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a1a      	ldr	r2, [pc, #104]	; (8007d30 <HAL_DMA_IRQHandler+0x428>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d00e      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a18      	ldr	r2, [pc, #96]	; (8007d34 <HAL_DMA_IRQHandler+0x42c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d009      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <HAL_DMA_IRQHandler+0x430>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d004      	beq.n	8007cea <HAL_DMA_IRQHandler+0x3e2>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a15      	ldr	r2, [pc, #84]	; (8007d3c <HAL_DMA_IRQHandler+0x434>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d12a      	bne.n	8007d40 <HAL_DMA_IRQHandler+0x438>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bf14      	ite	ne
 8007cf8:	2301      	movne	r3, #1
 8007cfa:	2300      	moveq	r3, #0
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	e023      	b.n	8007d48 <HAL_DMA_IRQHandler+0x440>
 8007d00:	40020010 	.word	0x40020010
 8007d04:	40020028 	.word	0x40020028
 8007d08:	40020040 	.word	0x40020040
 8007d0c:	40020058 	.word	0x40020058
 8007d10:	40020070 	.word	0x40020070
 8007d14:	40020088 	.word	0x40020088
 8007d18:	400200a0 	.word	0x400200a0
 8007d1c:	400200b8 	.word	0x400200b8
 8007d20:	40020410 	.word	0x40020410
 8007d24:	40020428 	.word	0x40020428
 8007d28:	40020440 	.word	0x40020440
 8007d2c:	40020458 	.word	0x40020458
 8007d30:	40020470 	.word	0x40020470
 8007d34:	40020488 	.word	0x40020488
 8007d38:	400204a0 	.word	0x400204a0
 8007d3c:	400204b8 	.word	0x400204b8
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2300      	movs	r3, #0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00d      	beq.n	8007d68 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d50:	f003 031f 	and.w	r3, r3, #31
 8007d54:	2204      	movs	r2, #4
 8007d56:	409a      	lsls	r2, r3
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d60:	f043 0204 	orr.w	r2, r3, #4
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d6c:	f003 031f 	and.w	r3, r3, #31
 8007d70:	2210      	movs	r2, #16
 8007d72:	409a      	lsls	r2, r3
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	4013      	ands	r3, r2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 80a6 	beq.w	8007eca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a85      	ldr	r2, [pc, #532]	; (8007f98 <HAL_DMA_IRQHandler+0x690>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d04a      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a83      	ldr	r2, [pc, #524]	; (8007f9c <HAL_DMA_IRQHandler+0x694>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d045      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a82      	ldr	r2, [pc, #520]	; (8007fa0 <HAL_DMA_IRQHandler+0x698>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d040      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a80      	ldr	r2, [pc, #512]	; (8007fa4 <HAL_DMA_IRQHandler+0x69c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d03b      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a7f      	ldr	r2, [pc, #508]	; (8007fa8 <HAL_DMA_IRQHandler+0x6a0>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d036      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a7d      	ldr	r2, [pc, #500]	; (8007fac <HAL_DMA_IRQHandler+0x6a4>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d031      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a7c      	ldr	r2, [pc, #496]	; (8007fb0 <HAL_DMA_IRQHandler+0x6a8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d02c      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a7a      	ldr	r2, [pc, #488]	; (8007fb4 <HAL_DMA_IRQHandler+0x6ac>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d027      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a79      	ldr	r2, [pc, #484]	; (8007fb8 <HAL_DMA_IRQHandler+0x6b0>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d022      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a77      	ldr	r2, [pc, #476]	; (8007fbc <HAL_DMA_IRQHandler+0x6b4>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d01d      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a76      	ldr	r2, [pc, #472]	; (8007fc0 <HAL_DMA_IRQHandler+0x6b8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d018      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a74      	ldr	r2, [pc, #464]	; (8007fc4 <HAL_DMA_IRQHandler+0x6bc>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d013      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a73      	ldr	r2, [pc, #460]	; (8007fc8 <HAL_DMA_IRQHandler+0x6c0>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d00e      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a71      	ldr	r2, [pc, #452]	; (8007fcc <HAL_DMA_IRQHandler+0x6c4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d009      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a70      	ldr	r2, [pc, #448]	; (8007fd0 <HAL_DMA_IRQHandler+0x6c8>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d004      	beq.n	8007e1e <HAL_DMA_IRQHandler+0x516>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a6e      	ldr	r2, [pc, #440]	; (8007fd4 <HAL_DMA_IRQHandler+0x6cc>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d10a      	bne.n	8007e34 <HAL_DMA_IRQHandler+0x52c>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bf14      	ite	ne
 8007e2c:	2301      	movne	r3, #1
 8007e2e:	2300      	moveq	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	e009      	b.n	8007e48 <HAL_DMA_IRQHandler+0x540>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0304 	and.w	r3, r3, #4
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	bf14      	ite	ne
 8007e42:	2301      	movne	r3, #1
 8007e44:	2300      	moveq	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d03e      	beq.n	8007eca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e50:	f003 031f 	and.w	r3, r3, #31
 8007e54:	2210      	movs	r2, #16
 8007e56:	409a      	lsls	r2, r3
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d018      	beq.n	8007e9c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d108      	bne.n	8007e8a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d024      	beq.n	8007eca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
 8007e88:	e01f      	b.n	8007eca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d01b      	beq.n	8007eca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	4798      	blx	r3
 8007e9a:	e016      	b.n	8007eca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d107      	bne.n	8007eba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f022 0208 	bic.w	r2, r2, #8
 8007eb8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ece:	f003 031f 	and.w	r3, r3, #31
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	409a      	lsls	r2, r3
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	4013      	ands	r3, r2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	f000 8110 	beq.w	8008100 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a2c      	ldr	r2, [pc, #176]	; (8007f98 <HAL_DMA_IRQHandler+0x690>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d04a      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a2b      	ldr	r2, [pc, #172]	; (8007f9c <HAL_DMA_IRQHandler+0x694>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d045      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a29      	ldr	r2, [pc, #164]	; (8007fa0 <HAL_DMA_IRQHandler+0x698>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d040      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a28      	ldr	r2, [pc, #160]	; (8007fa4 <HAL_DMA_IRQHandler+0x69c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d03b      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a26      	ldr	r2, [pc, #152]	; (8007fa8 <HAL_DMA_IRQHandler+0x6a0>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d036      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a25      	ldr	r2, [pc, #148]	; (8007fac <HAL_DMA_IRQHandler+0x6a4>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d031      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a23      	ldr	r2, [pc, #140]	; (8007fb0 <HAL_DMA_IRQHandler+0x6a8>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d02c      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a22      	ldr	r2, [pc, #136]	; (8007fb4 <HAL_DMA_IRQHandler+0x6ac>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d027      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a20      	ldr	r2, [pc, #128]	; (8007fb8 <HAL_DMA_IRQHandler+0x6b0>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d022      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a1f      	ldr	r2, [pc, #124]	; (8007fbc <HAL_DMA_IRQHandler+0x6b4>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d01d      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a1d      	ldr	r2, [pc, #116]	; (8007fc0 <HAL_DMA_IRQHandler+0x6b8>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d018      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a1c      	ldr	r2, [pc, #112]	; (8007fc4 <HAL_DMA_IRQHandler+0x6bc>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d013      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a1a      	ldr	r2, [pc, #104]	; (8007fc8 <HAL_DMA_IRQHandler+0x6c0>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00e      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a19      	ldr	r2, [pc, #100]	; (8007fcc <HAL_DMA_IRQHandler+0x6c4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d009      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a17      	ldr	r2, [pc, #92]	; (8007fd0 <HAL_DMA_IRQHandler+0x6c8>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d004      	beq.n	8007f80 <HAL_DMA_IRQHandler+0x678>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a16      	ldr	r2, [pc, #88]	; (8007fd4 <HAL_DMA_IRQHandler+0x6cc>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d12b      	bne.n	8007fd8 <HAL_DMA_IRQHandler+0x6d0>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0310 	and.w	r3, r3, #16
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	bf14      	ite	ne
 8007f8e:	2301      	movne	r3, #1
 8007f90:	2300      	moveq	r3, #0
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	e02a      	b.n	8007fec <HAL_DMA_IRQHandler+0x6e4>
 8007f96:	bf00      	nop
 8007f98:	40020010 	.word	0x40020010
 8007f9c:	40020028 	.word	0x40020028
 8007fa0:	40020040 	.word	0x40020040
 8007fa4:	40020058 	.word	0x40020058
 8007fa8:	40020070 	.word	0x40020070
 8007fac:	40020088 	.word	0x40020088
 8007fb0:	400200a0 	.word	0x400200a0
 8007fb4:	400200b8 	.word	0x400200b8
 8007fb8:	40020410 	.word	0x40020410
 8007fbc:	40020428 	.word	0x40020428
 8007fc0:	40020440 	.word	0x40020440
 8007fc4:	40020458 	.word	0x40020458
 8007fc8:	40020470 	.word	0x40020470
 8007fcc:	40020488 	.word	0x40020488
 8007fd0:	400204a0 	.word	0x400204a0
 8007fd4:	400204b8 	.word	0x400204b8
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 0302 	and.w	r3, r3, #2
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	bf14      	ite	ne
 8007fe6:	2301      	movne	r3, #1
 8007fe8:	2300      	moveq	r3, #0
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 8087 	beq.w	8008100 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff6:	f003 031f 	and.w	r3, r3, #31
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	409a      	lsls	r2, r3
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b04      	cmp	r3, #4
 800800c:	d139      	bne.n	8008082 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f022 0216 	bic.w	r2, r2, #22
 800801c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	695a      	ldr	r2, [r3, #20]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800802c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	2b00      	cmp	r3, #0
 8008034:	d103      	bne.n	800803e <HAL_DMA_IRQHandler+0x736>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800803a:	2b00      	cmp	r3, #0
 800803c:	d007      	beq.n	800804e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0208 	bic.w	r2, r2, #8
 800804c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008052:	f003 031f 	and.w	r3, r3, #31
 8008056:	223f      	movs	r2, #63	; 0x3f
 8008058:	409a      	lsls	r2, r3
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 834a 	beq.w	800870c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	4798      	blx	r3
          }
          return;
 8008080:	e344      	b.n	800870c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d018      	beq.n	80080c2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d108      	bne.n	80080b0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d02c      	beq.n	8008100 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	4798      	blx	r3
 80080ae:	e027      	b.n	8008100 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d023      	beq.n	8008100 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	4798      	blx	r3
 80080c0:	e01e      	b.n	8008100 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10f      	bne.n	80080f0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0210 	bic.w	r2, r2, #16
 80080de:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 8306 	beq.w	8008716 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 8088 	beq.w	8008228 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2204      	movs	r2, #4
 800811c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a7a      	ldr	r2, [pc, #488]	; (8008310 <HAL_DMA_IRQHandler+0xa08>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d04a      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a79      	ldr	r2, [pc, #484]	; (8008314 <HAL_DMA_IRQHandler+0xa0c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d045      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a77      	ldr	r2, [pc, #476]	; (8008318 <HAL_DMA_IRQHandler+0xa10>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d040      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a76      	ldr	r2, [pc, #472]	; (800831c <HAL_DMA_IRQHandler+0xa14>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d03b      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a74      	ldr	r2, [pc, #464]	; (8008320 <HAL_DMA_IRQHandler+0xa18>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d036      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a73      	ldr	r2, [pc, #460]	; (8008324 <HAL_DMA_IRQHandler+0xa1c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d031      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a71      	ldr	r2, [pc, #452]	; (8008328 <HAL_DMA_IRQHandler+0xa20>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d02c      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a70      	ldr	r2, [pc, #448]	; (800832c <HAL_DMA_IRQHandler+0xa24>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d027      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a6e      	ldr	r2, [pc, #440]	; (8008330 <HAL_DMA_IRQHandler+0xa28>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d022      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a6d      	ldr	r2, [pc, #436]	; (8008334 <HAL_DMA_IRQHandler+0xa2c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d01d      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a6b      	ldr	r2, [pc, #428]	; (8008338 <HAL_DMA_IRQHandler+0xa30>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d018      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a6a      	ldr	r2, [pc, #424]	; (800833c <HAL_DMA_IRQHandler+0xa34>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d013      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a68      	ldr	r2, [pc, #416]	; (8008340 <HAL_DMA_IRQHandler+0xa38>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00e      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a67      	ldr	r2, [pc, #412]	; (8008344 <HAL_DMA_IRQHandler+0xa3c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d009      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a65      	ldr	r2, [pc, #404]	; (8008348 <HAL_DMA_IRQHandler+0xa40>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d004      	beq.n	80081c0 <HAL_DMA_IRQHandler+0x8b8>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a64      	ldr	r2, [pc, #400]	; (800834c <HAL_DMA_IRQHandler+0xa44>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d108      	bne.n	80081d2 <HAL_DMA_IRQHandler+0x8ca>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 0201 	bic.w	r2, r2, #1
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e007      	b.n	80081e2 <HAL_DMA_IRQHandler+0x8da>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f022 0201 	bic.w	r2, r2, #1
 80081e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3301      	adds	r3, #1
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d307      	bcc.n	80081fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0301 	and.w	r3, r3, #1
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1f2      	bne.n	80081e2 <HAL_DMA_IRQHandler+0x8da>
 80081fc:	e000      	b.n	8008200 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80081fe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2203      	movs	r2, #3
 8008212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008216:	e003      	b.n	8008220 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 8272 	beq.w	8008716 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	4798      	blx	r3
 800823a:	e26c      	b.n	8008716 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a43      	ldr	r2, [pc, #268]	; (8008350 <HAL_DMA_IRQHandler+0xa48>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d022      	beq.n	800828c <HAL_DMA_IRQHandler+0x984>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a42      	ldr	r2, [pc, #264]	; (8008354 <HAL_DMA_IRQHandler+0xa4c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d01d      	beq.n	800828c <HAL_DMA_IRQHandler+0x984>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a40      	ldr	r2, [pc, #256]	; (8008358 <HAL_DMA_IRQHandler+0xa50>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d018      	beq.n	800828c <HAL_DMA_IRQHandler+0x984>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a3f      	ldr	r2, [pc, #252]	; (800835c <HAL_DMA_IRQHandler+0xa54>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d013      	beq.n	800828c <HAL_DMA_IRQHandler+0x984>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a3d      	ldr	r2, [pc, #244]	; (8008360 <HAL_DMA_IRQHandler+0xa58>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d00e      	beq.n	800828c <HAL_DMA_IRQHandler+0x984>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a3c      	ldr	r2, [pc, #240]	; (8008364 <HAL_DMA_IRQHandler+0xa5c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d009      	beq.n	800828c <HAL_DMA_IRQHandler+0x984>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a3a      	ldr	r2, [pc, #232]	; (8008368 <HAL_DMA_IRQHandler+0xa60>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d004      	beq.n	800828c <HAL_DMA_IRQHandler+0x984>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a39      	ldr	r2, [pc, #228]	; (800836c <HAL_DMA_IRQHandler+0xa64>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d101      	bne.n	8008290 <HAL_DMA_IRQHandler+0x988>
 800828c:	2301      	movs	r3, #1
 800828e:	e000      	b.n	8008292 <HAL_DMA_IRQHandler+0x98a>
 8008290:	2300      	movs	r3, #0
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 823f 	beq.w	8008716 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a4:	f003 031f 	and.w	r3, r3, #31
 80082a8:	2204      	movs	r2, #4
 80082aa:	409a      	lsls	r2, r3
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	4013      	ands	r3, r2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 80cd 	beq.w	8008450 <HAL_DMA_IRQHandler+0xb48>
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 80c7 	beq.w	8008450 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082c6:	f003 031f 	and.w	r3, r3, #31
 80082ca:	2204      	movs	r2, #4
 80082cc:	409a      	lsls	r2, r3
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d049      	beq.n	8008370 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d109      	bne.n	80082fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 8210 	beq.w	8008710 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082f8:	e20a      	b.n	8008710 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 8206 	beq.w	8008710 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800830c:	e200      	b.n	8008710 <HAL_DMA_IRQHandler+0xe08>
 800830e:	bf00      	nop
 8008310:	40020010 	.word	0x40020010
 8008314:	40020028 	.word	0x40020028
 8008318:	40020040 	.word	0x40020040
 800831c:	40020058 	.word	0x40020058
 8008320:	40020070 	.word	0x40020070
 8008324:	40020088 	.word	0x40020088
 8008328:	400200a0 	.word	0x400200a0
 800832c:	400200b8 	.word	0x400200b8
 8008330:	40020410 	.word	0x40020410
 8008334:	40020428 	.word	0x40020428
 8008338:	40020440 	.word	0x40020440
 800833c:	40020458 	.word	0x40020458
 8008340:	40020470 	.word	0x40020470
 8008344:	40020488 	.word	0x40020488
 8008348:	400204a0 	.word	0x400204a0
 800834c:	400204b8 	.word	0x400204b8
 8008350:	58025408 	.word	0x58025408
 8008354:	5802541c 	.word	0x5802541c
 8008358:	58025430 	.word	0x58025430
 800835c:	58025444 	.word	0x58025444
 8008360:	58025458 	.word	0x58025458
 8008364:	5802546c 	.word	0x5802546c
 8008368:	58025480 	.word	0x58025480
 800836c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f003 0320 	and.w	r3, r3, #32
 8008376:	2b00      	cmp	r3, #0
 8008378:	d160      	bne.n	800843c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a7f      	ldr	r2, [pc, #508]	; (800857c <HAL_DMA_IRQHandler+0xc74>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d04a      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a7d      	ldr	r2, [pc, #500]	; (8008580 <HAL_DMA_IRQHandler+0xc78>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d045      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a7c      	ldr	r2, [pc, #496]	; (8008584 <HAL_DMA_IRQHandler+0xc7c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d040      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a7a      	ldr	r2, [pc, #488]	; (8008588 <HAL_DMA_IRQHandler+0xc80>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d03b      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a79      	ldr	r2, [pc, #484]	; (800858c <HAL_DMA_IRQHandler+0xc84>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d036      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a77      	ldr	r2, [pc, #476]	; (8008590 <HAL_DMA_IRQHandler+0xc88>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d031      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a76      	ldr	r2, [pc, #472]	; (8008594 <HAL_DMA_IRQHandler+0xc8c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d02c      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a74      	ldr	r2, [pc, #464]	; (8008598 <HAL_DMA_IRQHandler+0xc90>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d027      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a73      	ldr	r2, [pc, #460]	; (800859c <HAL_DMA_IRQHandler+0xc94>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d022      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a71      	ldr	r2, [pc, #452]	; (80085a0 <HAL_DMA_IRQHandler+0xc98>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d01d      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a70      	ldr	r2, [pc, #448]	; (80085a4 <HAL_DMA_IRQHandler+0xc9c>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d018      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a6e      	ldr	r2, [pc, #440]	; (80085a8 <HAL_DMA_IRQHandler+0xca0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d013      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a6d      	ldr	r2, [pc, #436]	; (80085ac <HAL_DMA_IRQHandler+0xca4>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d00e      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a6b      	ldr	r2, [pc, #428]	; (80085b0 <HAL_DMA_IRQHandler+0xca8>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d009      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a6a      	ldr	r2, [pc, #424]	; (80085b4 <HAL_DMA_IRQHandler+0xcac>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d004      	beq.n	800841a <HAL_DMA_IRQHandler+0xb12>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a68      	ldr	r2, [pc, #416]	; (80085b8 <HAL_DMA_IRQHandler+0xcb0>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d108      	bne.n	800842c <HAL_DMA_IRQHandler+0xb24>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 0208 	bic.w	r2, r2, #8
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	e007      	b.n	800843c <HAL_DMA_IRQHandler+0xb34>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0204 	bic.w	r2, r2, #4
 800843a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 8165 	beq.w	8008710 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800844e:	e15f      	b.n	8008710 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008454:	f003 031f 	and.w	r3, r3, #31
 8008458:	2202      	movs	r2, #2
 800845a:	409a      	lsls	r2, r3
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	4013      	ands	r3, r2
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 80c5 	beq.w	80085f0 <HAL_DMA_IRQHandler+0xce8>
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f003 0302 	and.w	r3, r3, #2
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 80bf 	beq.w	80085f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008476:	f003 031f 	and.w	r3, r3, #31
 800847a:	2202      	movs	r2, #2
 800847c:	409a      	lsls	r2, r3
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d018      	beq.n	80084be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d109      	bne.n	80084aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 813a 	beq.w	8008714 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084a8:	e134      	b.n	8008714 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 8130 	beq.w	8008714 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80084bc:	e12a      	b.n	8008714 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f040 8089 	bne.w	80085dc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a2b      	ldr	r2, [pc, #172]	; (800857c <HAL_DMA_IRQHandler+0xc74>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d04a      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a29      	ldr	r2, [pc, #164]	; (8008580 <HAL_DMA_IRQHandler+0xc78>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d045      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a28      	ldr	r2, [pc, #160]	; (8008584 <HAL_DMA_IRQHandler+0xc7c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d040      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a26      	ldr	r2, [pc, #152]	; (8008588 <HAL_DMA_IRQHandler+0xc80>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d03b      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a25      	ldr	r2, [pc, #148]	; (800858c <HAL_DMA_IRQHandler+0xc84>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d036      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a23      	ldr	r2, [pc, #140]	; (8008590 <HAL_DMA_IRQHandler+0xc88>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d031      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a22      	ldr	r2, [pc, #136]	; (8008594 <HAL_DMA_IRQHandler+0xc8c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d02c      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a20      	ldr	r2, [pc, #128]	; (8008598 <HAL_DMA_IRQHandler+0xc90>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d027      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a1f      	ldr	r2, [pc, #124]	; (800859c <HAL_DMA_IRQHandler+0xc94>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d022      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a1d      	ldr	r2, [pc, #116]	; (80085a0 <HAL_DMA_IRQHandler+0xc98>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d01d      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a1c      	ldr	r2, [pc, #112]	; (80085a4 <HAL_DMA_IRQHandler+0xc9c>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d018      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a1a      	ldr	r2, [pc, #104]	; (80085a8 <HAL_DMA_IRQHandler+0xca0>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d013      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a19      	ldr	r2, [pc, #100]	; (80085ac <HAL_DMA_IRQHandler+0xca4>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d00e      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a17      	ldr	r2, [pc, #92]	; (80085b0 <HAL_DMA_IRQHandler+0xca8>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d009      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a16      	ldr	r2, [pc, #88]	; (80085b4 <HAL_DMA_IRQHandler+0xcac>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d004      	beq.n	800856a <HAL_DMA_IRQHandler+0xc62>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a14      	ldr	r2, [pc, #80]	; (80085b8 <HAL_DMA_IRQHandler+0xcb0>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d128      	bne.n	80085bc <HAL_DMA_IRQHandler+0xcb4>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0214 	bic.w	r2, r2, #20
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	e027      	b.n	80085cc <HAL_DMA_IRQHandler+0xcc4>
 800857c:	40020010 	.word	0x40020010
 8008580:	40020028 	.word	0x40020028
 8008584:	40020040 	.word	0x40020040
 8008588:	40020058 	.word	0x40020058
 800858c:	40020070 	.word	0x40020070
 8008590:	40020088 	.word	0x40020088
 8008594:	400200a0 	.word	0x400200a0
 8008598:	400200b8 	.word	0x400200b8
 800859c:	40020410 	.word	0x40020410
 80085a0:	40020428 	.word	0x40020428
 80085a4:	40020440 	.word	0x40020440
 80085a8:	40020458 	.word	0x40020458
 80085ac:	40020470 	.word	0x40020470
 80085b0:	40020488 	.word	0x40020488
 80085b4:	400204a0 	.word	0x400204a0
 80085b8:	400204b8 	.word	0x400204b8
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 020a 	bic.w	r2, r2, #10
 80085ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 8097 	beq.w	8008714 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085ee:	e091      	b.n	8008714 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085f4:	f003 031f 	and.w	r3, r3, #31
 80085f8:	2208      	movs	r2, #8
 80085fa:	409a      	lsls	r2, r3
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	4013      	ands	r3, r2
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 8088 	beq.w	8008716 <HAL_DMA_IRQHandler+0xe0e>
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f003 0308 	and.w	r3, r3, #8
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 8082 	beq.w	8008716 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a41      	ldr	r2, [pc, #260]	; (800871c <HAL_DMA_IRQHandler+0xe14>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d04a      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a3f      	ldr	r2, [pc, #252]	; (8008720 <HAL_DMA_IRQHandler+0xe18>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d045      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a3e      	ldr	r2, [pc, #248]	; (8008724 <HAL_DMA_IRQHandler+0xe1c>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d040      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a3c      	ldr	r2, [pc, #240]	; (8008728 <HAL_DMA_IRQHandler+0xe20>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d03b      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a3b      	ldr	r2, [pc, #236]	; (800872c <HAL_DMA_IRQHandler+0xe24>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d036      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a39      	ldr	r2, [pc, #228]	; (8008730 <HAL_DMA_IRQHandler+0xe28>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d031      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a38      	ldr	r2, [pc, #224]	; (8008734 <HAL_DMA_IRQHandler+0xe2c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d02c      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a36      	ldr	r2, [pc, #216]	; (8008738 <HAL_DMA_IRQHandler+0xe30>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d027      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a35      	ldr	r2, [pc, #212]	; (800873c <HAL_DMA_IRQHandler+0xe34>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d022      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a33      	ldr	r2, [pc, #204]	; (8008740 <HAL_DMA_IRQHandler+0xe38>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d01d      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a32      	ldr	r2, [pc, #200]	; (8008744 <HAL_DMA_IRQHandler+0xe3c>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d018      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a30      	ldr	r2, [pc, #192]	; (8008748 <HAL_DMA_IRQHandler+0xe40>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d013      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a2f      	ldr	r2, [pc, #188]	; (800874c <HAL_DMA_IRQHandler+0xe44>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d00e      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a2d      	ldr	r2, [pc, #180]	; (8008750 <HAL_DMA_IRQHandler+0xe48>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d009      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a2c      	ldr	r2, [pc, #176]	; (8008754 <HAL_DMA_IRQHandler+0xe4c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d004      	beq.n	80086b2 <HAL_DMA_IRQHandler+0xdaa>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a2a      	ldr	r2, [pc, #168]	; (8008758 <HAL_DMA_IRQHandler+0xe50>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d108      	bne.n	80086c4 <HAL_DMA_IRQHandler+0xdbc>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 021c 	bic.w	r2, r2, #28
 80086c0:	601a      	str	r2, [r3, #0]
 80086c2:	e007      	b.n	80086d4 <HAL_DMA_IRQHandler+0xdcc>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 020e 	bic.w	r2, r2, #14
 80086d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d8:	f003 031f 	and.w	r3, r3, #31
 80086dc:	2201      	movs	r2, #1
 80086de:	409a      	lsls	r2, r3
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d009      	beq.n	8008716 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	4798      	blx	r3
 800870a:	e004      	b.n	8008716 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800870c:	bf00      	nop
 800870e:	e002      	b.n	8008716 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008710:	bf00      	nop
 8008712:	e000      	b.n	8008716 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008714:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008716:	3728      	adds	r7, #40	; 0x28
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	40020010 	.word	0x40020010
 8008720:	40020028 	.word	0x40020028
 8008724:	40020040 	.word	0x40020040
 8008728:	40020058 	.word	0x40020058
 800872c:	40020070 	.word	0x40020070
 8008730:	40020088 	.word	0x40020088
 8008734:	400200a0 	.word	0x400200a0
 8008738:	400200b8 	.word	0x400200b8
 800873c:	40020410 	.word	0x40020410
 8008740:	40020428 	.word	0x40020428
 8008744:	40020440 	.word	0x40020440
 8008748:	40020458 	.word	0x40020458
 800874c:	40020470 	.word	0x40020470
 8008750:	40020488 	.word	0x40020488
 8008754:	400204a0 	.word	0x400204a0
 8008758:	400204b8 	.word	0x400204b8

0800875c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008774:	b480      	push	{r7}
 8008776:	b087      	sub	sp, #28
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008786:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800878c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a7f      	ldr	r2, [pc, #508]	; (8008990 <DMA_SetConfig+0x21c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d072      	beq.n	800887e <DMA_SetConfig+0x10a>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a7d      	ldr	r2, [pc, #500]	; (8008994 <DMA_SetConfig+0x220>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d06d      	beq.n	800887e <DMA_SetConfig+0x10a>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a7c      	ldr	r2, [pc, #496]	; (8008998 <DMA_SetConfig+0x224>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d068      	beq.n	800887e <DMA_SetConfig+0x10a>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a7a      	ldr	r2, [pc, #488]	; (800899c <DMA_SetConfig+0x228>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d063      	beq.n	800887e <DMA_SetConfig+0x10a>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a79      	ldr	r2, [pc, #484]	; (80089a0 <DMA_SetConfig+0x22c>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d05e      	beq.n	800887e <DMA_SetConfig+0x10a>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a77      	ldr	r2, [pc, #476]	; (80089a4 <DMA_SetConfig+0x230>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d059      	beq.n	800887e <DMA_SetConfig+0x10a>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a76      	ldr	r2, [pc, #472]	; (80089a8 <DMA_SetConfig+0x234>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d054      	beq.n	800887e <DMA_SetConfig+0x10a>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a74      	ldr	r2, [pc, #464]	; (80089ac <DMA_SetConfig+0x238>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d04f      	beq.n	800887e <DMA_SetConfig+0x10a>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a73      	ldr	r2, [pc, #460]	; (80089b0 <DMA_SetConfig+0x23c>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d04a      	beq.n	800887e <DMA_SetConfig+0x10a>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a71      	ldr	r2, [pc, #452]	; (80089b4 <DMA_SetConfig+0x240>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d045      	beq.n	800887e <DMA_SetConfig+0x10a>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a70      	ldr	r2, [pc, #448]	; (80089b8 <DMA_SetConfig+0x244>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d040      	beq.n	800887e <DMA_SetConfig+0x10a>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a6e      	ldr	r2, [pc, #440]	; (80089bc <DMA_SetConfig+0x248>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d03b      	beq.n	800887e <DMA_SetConfig+0x10a>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a6d      	ldr	r2, [pc, #436]	; (80089c0 <DMA_SetConfig+0x24c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d036      	beq.n	800887e <DMA_SetConfig+0x10a>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a6b      	ldr	r2, [pc, #428]	; (80089c4 <DMA_SetConfig+0x250>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d031      	beq.n	800887e <DMA_SetConfig+0x10a>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a6a      	ldr	r2, [pc, #424]	; (80089c8 <DMA_SetConfig+0x254>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d02c      	beq.n	800887e <DMA_SetConfig+0x10a>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a68      	ldr	r2, [pc, #416]	; (80089cc <DMA_SetConfig+0x258>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d027      	beq.n	800887e <DMA_SetConfig+0x10a>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a67      	ldr	r2, [pc, #412]	; (80089d0 <DMA_SetConfig+0x25c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d022      	beq.n	800887e <DMA_SetConfig+0x10a>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a65      	ldr	r2, [pc, #404]	; (80089d4 <DMA_SetConfig+0x260>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d01d      	beq.n	800887e <DMA_SetConfig+0x10a>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a64      	ldr	r2, [pc, #400]	; (80089d8 <DMA_SetConfig+0x264>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d018      	beq.n	800887e <DMA_SetConfig+0x10a>
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a62      	ldr	r2, [pc, #392]	; (80089dc <DMA_SetConfig+0x268>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d013      	beq.n	800887e <DMA_SetConfig+0x10a>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a61      	ldr	r2, [pc, #388]	; (80089e0 <DMA_SetConfig+0x26c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d00e      	beq.n	800887e <DMA_SetConfig+0x10a>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a5f      	ldr	r2, [pc, #380]	; (80089e4 <DMA_SetConfig+0x270>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d009      	beq.n	800887e <DMA_SetConfig+0x10a>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a5e      	ldr	r2, [pc, #376]	; (80089e8 <DMA_SetConfig+0x274>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d004      	beq.n	800887e <DMA_SetConfig+0x10a>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a5c      	ldr	r2, [pc, #368]	; (80089ec <DMA_SetConfig+0x278>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d101      	bne.n	8008882 <DMA_SetConfig+0x10e>
 800887e:	2301      	movs	r3, #1
 8008880:	e000      	b.n	8008884 <DMA_SetConfig+0x110>
 8008882:	2300      	movs	r3, #0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00d      	beq.n	80088a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008890:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d004      	beq.n	80088a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80088a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a39      	ldr	r2, [pc, #228]	; (8008990 <DMA_SetConfig+0x21c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d04a      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a38      	ldr	r2, [pc, #224]	; (8008994 <DMA_SetConfig+0x220>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d045      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a36      	ldr	r2, [pc, #216]	; (8008998 <DMA_SetConfig+0x224>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d040      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a35      	ldr	r2, [pc, #212]	; (800899c <DMA_SetConfig+0x228>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d03b      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a33      	ldr	r2, [pc, #204]	; (80089a0 <DMA_SetConfig+0x22c>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d036      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a32      	ldr	r2, [pc, #200]	; (80089a4 <DMA_SetConfig+0x230>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d031      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a30      	ldr	r2, [pc, #192]	; (80089a8 <DMA_SetConfig+0x234>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d02c      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a2f      	ldr	r2, [pc, #188]	; (80089ac <DMA_SetConfig+0x238>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d027      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a2d      	ldr	r2, [pc, #180]	; (80089b0 <DMA_SetConfig+0x23c>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d022      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a2c      	ldr	r2, [pc, #176]	; (80089b4 <DMA_SetConfig+0x240>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d01d      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a2a      	ldr	r2, [pc, #168]	; (80089b8 <DMA_SetConfig+0x244>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d018      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a29      	ldr	r2, [pc, #164]	; (80089bc <DMA_SetConfig+0x248>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d013      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a27      	ldr	r2, [pc, #156]	; (80089c0 <DMA_SetConfig+0x24c>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d00e      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a26      	ldr	r2, [pc, #152]	; (80089c4 <DMA_SetConfig+0x250>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d009      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a24      	ldr	r2, [pc, #144]	; (80089c8 <DMA_SetConfig+0x254>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d004      	beq.n	8008944 <DMA_SetConfig+0x1d0>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a23      	ldr	r2, [pc, #140]	; (80089cc <DMA_SetConfig+0x258>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d101      	bne.n	8008948 <DMA_SetConfig+0x1d4>
 8008944:	2301      	movs	r3, #1
 8008946:	e000      	b.n	800894a <DMA_SetConfig+0x1d6>
 8008948:	2300      	movs	r3, #0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d059      	beq.n	8008a02 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008952:	f003 031f 	and.w	r3, r3, #31
 8008956:	223f      	movs	r2, #63	; 0x3f
 8008958:	409a      	lsls	r2, r3
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800896c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	2b40      	cmp	r3, #64	; 0x40
 800897c:	d138      	bne.n	80089f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800898e:	e086      	b.n	8008a9e <DMA_SetConfig+0x32a>
 8008990:	40020010 	.word	0x40020010
 8008994:	40020028 	.word	0x40020028
 8008998:	40020040 	.word	0x40020040
 800899c:	40020058 	.word	0x40020058
 80089a0:	40020070 	.word	0x40020070
 80089a4:	40020088 	.word	0x40020088
 80089a8:	400200a0 	.word	0x400200a0
 80089ac:	400200b8 	.word	0x400200b8
 80089b0:	40020410 	.word	0x40020410
 80089b4:	40020428 	.word	0x40020428
 80089b8:	40020440 	.word	0x40020440
 80089bc:	40020458 	.word	0x40020458
 80089c0:	40020470 	.word	0x40020470
 80089c4:	40020488 	.word	0x40020488
 80089c8:	400204a0 	.word	0x400204a0
 80089cc:	400204b8 	.word	0x400204b8
 80089d0:	58025408 	.word	0x58025408
 80089d4:	5802541c 	.word	0x5802541c
 80089d8:	58025430 	.word	0x58025430
 80089dc:	58025444 	.word	0x58025444
 80089e0:	58025458 	.word	0x58025458
 80089e4:	5802546c 	.word	0x5802546c
 80089e8:	58025480 	.word	0x58025480
 80089ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	60da      	str	r2, [r3, #12]
}
 8008a00:	e04d      	b.n	8008a9e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a29      	ldr	r2, [pc, #164]	; (8008aac <DMA_SetConfig+0x338>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d022      	beq.n	8008a52 <DMA_SetConfig+0x2de>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a27      	ldr	r2, [pc, #156]	; (8008ab0 <DMA_SetConfig+0x33c>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d01d      	beq.n	8008a52 <DMA_SetConfig+0x2de>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a26      	ldr	r2, [pc, #152]	; (8008ab4 <DMA_SetConfig+0x340>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d018      	beq.n	8008a52 <DMA_SetConfig+0x2de>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a24      	ldr	r2, [pc, #144]	; (8008ab8 <DMA_SetConfig+0x344>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d013      	beq.n	8008a52 <DMA_SetConfig+0x2de>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a23      	ldr	r2, [pc, #140]	; (8008abc <DMA_SetConfig+0x348>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d00e      	beq.n	8008a52 <DMA_SetConfig+0x2de>
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a21      	ldr	r2, [pc, #132]	; (8008ac0 <DMA_SetConfig+0x34c>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d009      	beq.n	8008a52 <DMA_SetConfig+0x2de>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a20      	ldr	r2, [pc, #128]	; (8008ac4 <DMA_SetConfig+0x350>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d004      	beq.n	8008a52 <DMA_SetConfig+0x2de>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a1e      	ldr	r2, [pc, #120]	; (8008ac8 <DMA_SetConfig+0x354>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d101      	bne.n	8008a56 <DMA_SetConfig+0x2e2>
 8008a52:	2301      	movs	r3, #1
 8008a54:	e000      	b.n	8008a58 <DMA_SetConfig+0x2e4>
 8008a56:	2300      	movs	r3, #0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d020      	beq.n	8008a9e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a60:	f003 031f 	and.w	r3, r3, #31
 8008a64:	2201      	movs	r2, #1
 8008a66:	409a      	lsls	r2, r3
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	2b40      	cmp	r3, #64	; 0x40
 8008a7a:	d108      	bne.n	8008a8e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	60da      	str	r2, [r3, #12]
}
 8008a8c:	e007      	b.n	8008a9e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	60da      	str	r2, [r3, #12]
}
 8008a9e:	bf00      	nop
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	58025408 	.word	0x58025408
 8008ab0:	5802541c 	.word	0x5802541c
 8008ab4:	58025430 	.word	0x58025430
 8008ab8:	58025444 	.word	0x58025444
 8008abc:	58025458 	.word	0x58025458
 8008ac0:	5802546c 	.word	0x5802546c
 8008ac4:	58025480 	.word	0x58025480
 8008ac8:	58025494 	.word	0x58025494

08008acc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a42      	ldr	r2, [pc, #264]	; (8008be4 <DMA_CalcBaseAndBitshift+0x118>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d04a      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a41      	ldr	r2, [pc, #260]	; (8008be8 <DMA_CalcBaseAndBitshift+0x11c>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d045      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a3f      	ldr	r2, [pc, #252]	; (8008bec <DMA_CalcBaseAndBitshift+0x120>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d040      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a3e      	ldr	r2, [pc, #248]	; (8008bf0 <DMA_CalcBaseAndBitshift+0x124>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d03b      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a3c      	ldr	r2, [pc, #240]	; (8008bf4 <DMA_CalcBaseAndBitshift+0x128>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d036      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a3b      	ldr	r2, [pc, #236]	; (8008bf8 <DMA_CalcBaseAndBitshift+0x12c>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d031      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a39      	ldr	r2, [pc, #228]	; (8008bfc <DMA_CalcBaseAndBitshift+0x130>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d02c      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a38      	ldr	r2, [pc, #224]	; (8008c00 <DMA_CalcBaseAndBitshift+0x134>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d027      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a36      	ldr	r2, [pc, #216]	; (8008c04 <DMA_CalcBaseAndBitshift+0x138>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d022      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a35      	ldr	r2, [pc, #212]	; (8008c08 <DMA_CalcBaseAndBitshift+0x13c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d01d      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a33      	ldr	r2, [pc, #204]	; (8008c0c <DMA_CalcBaseAndBitshift+0x140>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d018      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a32      	ldr	r2, [pc, #200]	; (8008c10 <DMA_CalcBaseAndBitshift+0x144>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d013      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a30      	ldr	r2, [pc, #192]	; (8008c14 <DMA_CalcBaseAndBitshift+0x148>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d00e      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a2f      	ldr	r2, [pc, #188]	; (8008c18 <DMA_CalcBaseAndBitshift+0x14c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d009      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a2d      	ldr	r2, [pc, #180]	; (8008c1c <DMA_CalcBaseAndBitshift+0x150>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d004      	beq.n	8008b74 <DMA_CalcBaseAndBitshift+0xa8>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a2c      	ldr	r2, [pc, #176]	; (8008c20 <DMA_CalcBaseAndBitshift+0x154>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d101      	bne.n	8008b78 <DMA_CalcBaseAndBitshift+0xac>
 8008b74:	2301      	movs	r3, #1
 8008b76:	e000      	b.n	8008b7a <DMA_CalcBaseAndBitshift+0xae>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d024      	beq.n	8008bc8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	3b10      	subs	r3, #16
 8008b86:	4a27      	ldr	r2, [pc, #156]	; (8008c24 <DMA_CalcBaseAndBitshift+0x158>)
 8008b88:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8c:	091b      	lsrs	r3, r3, #4
 8008b8e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f003 0307 	and.w	r3, r3, #7
 8008b96:	4a24      	ldr	r2, [pc, #144]	; (8008c28 <DMA_CalcBaseAndBitshift+0x15c>)
 8008b98:	5cd3      	ldrb	r3, [r2, r3]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b03      	cmp	r3, #3
 8008ba4:	d908      	bls.n	8008bb8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	461a      	mov	r2, r3
 8008bac:	4b1f      	ldr	r3, [pc, #124]	; (8008c2c <DMA_CalcBaseAndBitshift+0x160>)
 8008bae:	4013      	ands	r3, r2
 8008bb0:	1d1a      	adds	r2, r3, #4
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	659a      	str	r2, [r3, #88]	; 0x58
 8008bb6:	e00d      	b.n	8008bd4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	4b1b      	ldr	r3, [pc, #108]	; (8008c2c <DMA_CalcBaseAndBitshift+0x160>)
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8008bc6:	e005      	b.n	8008bd4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	40020010 	.word	0x40020010
 8008be8:	40020028 	.word	0x40020028
 8008bec:	40020040 	.word	0x40020040
 8008bf0:	40020058 	.word	0x40020058
 8008bf4:	40020070 	.word	0x40020070
 8008bf8:	40020088 	.word	0x40020088
 8008bfc:	400200a0 	.word	0x400200a0
 8008c00:	400200b8 	.word	0x400200b8
 8008c04:	40020410 	.word	0x40020410
 8008c08:	40020428 	.word	0x40020428
 8008c0c:	40020440 	.word	0x40020440
 8008c10:	40020458 	.word	0x40020458
 8008c14:	40020470 	.word	0x40020470
 8008c18:	40020488 	.word	0x40020488
 8008c1c:	400204a0 	.word	0x400204a0
 8008c20:	400204b8 	.word	0x400204b8
 8008c24:	aaaaaaab 	.word	0xaaaaaaab
 8008c28:	08017538 	.word	0x08017538
 8008c2c:	fffffc00 	.word	0xfffffc00

08008c30 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d120      	bne.n	8008c86 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d858      	bhi.n	8008cfe <DMA_CheckFifoParam+0xce>
 8008c4c:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <DMA_CheckFifoParam+0x24>)
 8008c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008c65 	.word	0x08008c65
 8008c58:	08008c77 	.word	0x08008c77
 8008c5c:	08008c65 	.word	0x08008c65
 8008c60:	08008cff 	.word	0x08008cff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d048      	beq.n	8008d02 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c74:	e045      	b.n	8008d02 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c7e:	d142      	bne.n	8008d06 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c84:	e03f      	b.n	8008d06 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c8e:	d123      	bne.n	8008cd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d838      	bhi.n	8008d0a <DMA_CheckFifoParam+0xda>
 8008c98:	a201      	add	r2, pc, #4	; (adr r2, 8008ca0 <DMA_CheckFifoParam+0x70>)
 8008c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9e:	bf00      	nop
 8008ca0:	08008cb1 	.word	0x08008cb1
 8008ca4:	08008cb7 	.word	0x08008cb7
 8008ca8:	08008cb1 	.word	0x08008cb1
 8008cac:	08008cc9 	.word	0x08008cc9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
        break;
 8008cb4:	e030      	b.n	8008d18 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d025      	beq.n	8008d0e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cc6:	e022      	b.n	8008d0e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008cd0:	d11f      	bne.n	8008d12 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008cd6:	e01c      	b.n	8008d12 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d902      	bls.n	8008ce6 <DMA_CheckFifoParam+0xb6>
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d003      	beq.n	8008cec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008ce4:	e018      	b.n	8008d18 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	73fb      	strb	r3, [r7, #15]
        break;
 8008cea:	e015      	b.n	8008d18 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00e      	beq.n	8008d16 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfc:	e00b      	b.n	8008d16 <DMA_CheckFifoParam+0xe6>
        break;
 8008cfe:	bf00      	nop
 8008d00:	e00a      	b.n	8008d18 <DMA_CheckFifoParam+0xe8>
        break;
 8008d02:	bf00      	nop
 8008d04:	e008      	b.n	8008d18 <DMA_CheckFifoParam+0xe8>
        break;
 8008d06:	bf00      	nop
 8008d08:	e006      	b.n	8008d18 <DMA_CheckFifoParam+0xe8>
        break;
 8008d0a:	bf00      	nop
 8008d0c:	e004      	b.n	8008d18 <DMA_CheckFifoParam+0xe8>
        break;
 8008d0e:	bf00      	nop
 8008d10:	e002      	b.n	8008d18 <DMA_CheckFifoParam+0xe8>
        break;
 8008d12:	bf00      	nop
 8008d14:	e000      	b.n	8008d18 <DMA_CheckFifoParam+0xe8>
    break;
 8008d16:	bf00      	nop
    }
  }

  return status;
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop

08008d28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a38      	ldr	r2, [pc, #224]	; (8008e1c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d022      	beq.n	8008d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a36      	ldr	r2, [pc, #216]	; (8008e20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d01d      	beq.n	8008d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a35      	ldr	r2, [pc, #212]	; (8008e24 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d018      	beq.n	8008d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a33      	ldr	r2, [pc, #204]	; (8008e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d013      	beq.n	8008d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a32      	ldr	r2, [pc, #200]	; (8008e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d00e      	beq.n	8008d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a30      	ldr	r2, [pc, #192]	; (8008e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d009      	beq.n	8008d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a2f      	ldr	r2, [pc, #188]	; (8008e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d004      	beq.n	8008d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a2d      	ldr	r2, [pc, #180]	; (8008e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d101      	bne.n	8008d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e000      	b.n	8008d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d01a      	beq.n	8008dc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	3b08      	subs	r3, #8
 8008d98:	4a28      	ldr	r2, [pc, #160]	; (8008e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9e:	091b      	lsrs	r3, r3, #4
 8008da0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	4b26      	ldr	r3, [pc, #152]	; (8008e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008da6:	4413      	add	r3, r2
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	461a      	mov	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a24      	ldr	r2, [pc, #144]	; (8008e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008db4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f003 031f 	and.w	r3, r3, #31
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	409a      	lsls	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008dc4:	e024      	b.n	8008e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	3b10      	subs	r3, #16
 8008dce:	4a1e      	ldr	r2, [pc, #120]	; (8008e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd4:	091b      	lsrs	r3, r3, #4
 8008dd6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	4a1c      	ldr	r2, [pc, #112]	; (8008e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d806      	bhi.n	8008dee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	4a1b      	ldr	r2, [pc, #108]	; (8008e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d902      	bls.n	8008dee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	3308      	adds	r3, #8
 8008dec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	4b18      	ldr	r3, [pc, #96]	; (8008e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008df2:	4413      	add	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	461a      	mov	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a16      	ldr	r2, [pc, #88]	; (8008e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008e00:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f003 031f 	and.w	r3, r3, #31
 8008e08:	2201      	movs	r2, #1
 8008e0a:	409a      	lsls	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e10:	bf00      	nop
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	58025408 	.word	0x58025408
 8008e20:	5802541c 	.word	0x5802541c
 8008e24:	58025430 	.word	0x58025430
 8008e28:	58025444 	.word	0x58025444
 8008e2c:	58025458 	.word	0x58025458
 8008e30:	5802546c 	.word	0x5802546c
 8008e34:	58025480 	.word	0x58025480
 8008e38:	58025494 	.word	0x58025494
 8008e3c:	cccccccd 	.word	0xcccccccd
 8008e40:	16009600 	.word	0x16009600
 8008e44:	58025880 	.word	0x58025880
 8008e48:	aaaaaaab 	.word	0xaaaaaaab
 8008e4c:	400204b8 	.word	0x400204b8
 8008e50:	4002040f 	.word	0x4002040f
 8008e54:	10008200 	.word	0x10008200
 8008e58:	40020880 	.word	0x40020880

08008e5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d04a      	beq.n	8008f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b08      	cmp	r3, #8
 8008e76:	d847      	bhi.n	8008f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a25      	ldr	r2, [pc, #148]	; (8008f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d022      	beq.n	8008ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a24      	ldr	r2, [pc, #144]	; (8008f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d01d      	beq.n	8008ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a22      	ldr	r2, [pc, #136]	; (8008f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d018      	beq.n	8008ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a21      	ldr	r2, [pc, #132]	; (8008f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d013      	beq.n	8008ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a1f      	ldr	r2, [pc, #124]	; (8008f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d00e      	beq.n	8008ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a1e      	ldr	r2, [pc, #120]	; (8008f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d009      	beq.n	8008ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a1c      	ldr	r2, [pc, #112]	; (8008f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d004      	beq.n	8008ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a1b      	ldr	r2, [pc, #108]	; (8008f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d101      	bne.n	8008ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e000      	b.n	8008ece <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00a      	beq.n	8008ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	4b17      	ldr	r3, [pc, #92]	; (8008f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	461a      	mov	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a15      	ldr	r2, [pc, #84]	; (8008f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008ee4:	671a      	str	r2, [r3, #112]	; 0x70
 8008ee6:	e009      	b.n	8008efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	4b14      	ldr	r3, [pc, #80]	; (8008f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008eec:	4413      	add	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a11      	ldr	r2, [pc, #68]	; (8008f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008efa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	3b01      	subs	r3, #1
 8008f00:	2201      	movs	r2, #1
 8008f02:	409a      	lsls	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008f08:	bf00      	nop
 8008f0a:	3714      	adds	r7, #20
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr
 8008f14:	58025408 	.word	0x58025408
 8008f18:	5802541c 	.word	0x5802541c
 8008f1c:	58025430 	.word	0x58025430
 8008f20:	58025444 	.word	0x58025444
 8008f24:	58025458 	.word	0x58025458
 8008f28:	5802546c 	.word	0x5802546c
 8008f2c:	58025480 	.word	0x58025480
 8008f30:	58025494 	.word	0x58025494
 8008f34:	1600963f 	.word	0x1600963f
 8008f38:	58025940 	.word	0x58025940
 8008f3c:	1000823f 	.word	0x1000823f
 8008f40:	40020940 	.word	0x40020940

08008f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b089      	sub	sp, #36	; 0x24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008f52:	4b89      	ldr	r3, [pc, #548]	; (8009178 <HAL_GPIO_Init+0x234>)
 8008f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008f56:	e194      	b.n	8009282 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	2101      	movs	r1, #1
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	fa01 f303 	lsl.w	r3, r1, r3
 8008f64:	4013      	ands	r3, r2
 8008f66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 8186 	beq.w	800927c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f003 0303 	and.w	r3, r3, #3
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d005      	beq.n	8008f88 <HAL_GPIO_Init+0x44>
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	f003 0303 	and.w	r3, r3, #3
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d130      	bne.n	8008fea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	005b      	lsls	r3, r3, #1
 8008f92:	2203      	movs	r2, #3
 8008f94:	fa02 f303 	lsl.w	r3, r2, r3
 8008f98:	43db      	mvns	r3, r3
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	005b      	lsls	r3, r3, #1
 8008fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc6:	43db      	mvns	r3, r3
 8008fc8:	69ba      	ldr	r2, [r7, #24]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	091b      	lsrs	r3, r3, #4
 8008fd4:	f003 0201 	and.w	r2, r3, #1
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	fa02 f303 	lsl.w	r3, r2, r3
 8008fde:	69ba      	ldr	r2, [r7, #24]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f003 0303 	and.w	r3, r3, #3
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d017      	beq.n	8009026 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	005b      	lsls	r3, r3, #1
 8009000:	2203      	movs	r2, #3
 8009002:	fa02 f303 	lsl.w	r3, r2, r3
 8009006:	43db      	mvns	r3, r3
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	4013      	ands	r3, r2
 800900c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	689a      	ldr	r2, [r3, #8]
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	fa02 f303 	lsl.w	r3, r2, r3
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	4313      	orrs	r3, r2
 800901e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	69ba      	ldr	r2, [r7, #24]
 8009024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f003 0303 	and.w	r3, r3, #3
 800902e:	2b02      	cmp	r3, #2
 8009030:	d123      	bne.n	800907a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	08da      	lsrs	r2, r3, #3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3208      	adds	r2, #8
 800903a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800903e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	f003 0307 	and.w	r3, r3, #7
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	220f      	movs	r2, #15
 800904a:	fa02 f303 	lsl.w	r3, r2, r3
 800904e:	43db      	mvns	r3, r3
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	4013      	ands	r3, r2
 8009054:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	691a      	ldr	r2, [r3, #16]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	f003 0307 	and.w	r3, r3, #7
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	fa02 f303 	lsl.w	r3, r2, r3
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	4313      	orrs	r3, r2
 800906a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	08da      	lsrs	r2, r3, #3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	3208      	adds	r2, #8
 8009074:	69b9      	ldr	r1, [r7, #24]
 8009076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	2203      	movs	r2, #3
 8009086:	fa02 f303 	lsl.w	r3, r2, r3
 800908a:	43db      	mvns	r3, r3
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	4013      	ands	r3, r2
 8009090:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f003 0203 	and.w	r2, r3, #3
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	fa02 f303 	lsl.w	r3, r2, r3
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	69ba      	ldr	r2, [r7, #24]
 80090ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 80e0 	beq.w	800927c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090bc:	4b2f      	ldr	r3, [pc, #188]	; (800917c <HAL_GPIO_Init+0x238>)
 80090be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80090c2:	4a2e      	ldr	r2, [pc, #184]	; (800917c <HAL_GPIO_Init+0x238>)
 80090c4:	f043 0302 	orr.w	r3, r3, #2
 80090c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80090cc:	4b2b      	ldr	r3, [pc, #172]	; (800917c <HAL_GPIO_Init+0x238>)
 80090ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80090da:	4a29      	ldr	r2, [pc, #164]	; (8009180 <HAL_GPIO_Init+0x23c>)
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	089b      	lsrs	r3, r3, #2
 80090e0:	3302      	adds	r3, #2
 80090e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	f003 0303 	and.w	r3, r3, #3
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	220f      	movs	r2, #15
 80090f2:	fa02 f303 	lsl.w	r3, r2, r3
 80090f6:	43db      	mvns	r3, r3
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	4013      	ands	r3, r2
 80090fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a20      	ldr	r2, [pc, #128]	; (8009184 <HAL_GPIO_Init+0x240>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d052      	beq.n	80091ac <HAL_GPIO_Init+0x268>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a1f      	ldr	r2, [pc, #124]	; (8009188 <HAL_GPIO_Init+0x244>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d031      	beq.n	8009172 <HAL_GPIO_Init+0x22e>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a1e      	ldr	r2, [pc, #120]	; (800918c <HAL_GPIO_Init+0x248>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d02b      	beq.n	800916e <HAL_GPIO_Init+0x22a>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a1d      	ldr	r2, [pc, #116]	; (8009190 <HAL_GPIO_Init+0x24c>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d025      	beq.n	800916a <HAL_GPIO_Init+0x226>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a1c      	ldr	r2, [pc, #112]	; (8009194 <HAL_GPIO_Init+0x250>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d01f      	beq.n	8009166 <HAL_GPIO_Init+0x222>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a1b      	ldr	r2, [pc, #108]	; (8009198 <HAL_GPIO_Init+0x254>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d019      	beq.n	8009162 <HAL_GPIO_Init+0x21e>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a1a      	ldr	r2, [pc, #104]	; (800919c <HAL_GPIO_Init+0x258>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d013      	beq.n	800915e <HAL_GPIO_Init+0x21a>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a19      	ldr	r2, [pc, #100]	; (80091a0 <HAL_GPIO_Init+0x25c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d00d      	beq.n	800915a <HAL_GPIO_Init+0x216>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a18      	ldr	r2, [pc, #96]	; (80091a4 <HAL_GPIO_Init+0x260>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d007      	beq.n	8009156 <HAL_GPIO_Init+0x212>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a17      	ldr	r2, [pc, #92]	; (80091a8 <HAL_GPIO_Init+0x264>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d101      	bne.n	8009152 <HAL_GPIO_Init+0x20e>
 800914e:	2309      	movs	r3, #9
 8009150:	e02d      	b.n	80091ae <HAL_GPIO_Init+0x26a>
 8009152:	230a      	movs	r3, #10
 8009154:	e02b      	b.n	80091ae <HAL_GPIO_Init+0x26a>
 8009156:	2308      	movs	r3, #8
 8009158:	e029      	b.n	80091ae <HAL_GPIO_Init+0x26a>
 800915a:	2307      	movs	r3, #7
 800915c:	e027      	b.n	80091ae <HAL_GPIO_Init+0x26a>
 800915e:	2306      	movs	r3, #6
 8009160:	e025      	b.n	80091ae <HAL_GPIO_Init+0x26a>
 8009162:	2305      	movs	r3, #5
 8009164:	e023      	b.n	80091ae <HAL_GPIO_Init+0x26a>
 8009166:	2304      	movs	r3, #4
 8009168:	e021      	b.n	80091ae <HAL_GPIO_Init+0x26a>
 800916a:	2303      	movs	r3, #3
 800916c:	e01f      	b.n	80091ae <HAL_GPIO_Init+0x26a>
 800916e:	2302      	movs	r3, #2
 8009170:	e01d      	b.n	80091ae <HAL_GPIO_Init+0x26a>
 8009172:	2301      	movs	r3, #1
 8009174:	e01b      	b.n	80091ae <HAL_GPIO_Init+0x26a>
 8009176:	bf00      	nop
 8009178:	58000080 	.word	0x58000080
 800917c:	58024400 	.word	0x58024400
 8009180:	58000400 	.word	0x58000400
 8009184:	58020000 	.word	0x58020000
 8009188:	58020400 	.word	0x58020400
 800918c:	58020800 	.word	0x58020800
 8009190:	58020c00 	.word	0x58020c00
 8009194:	58021000 	.word	0x58021000
 8009198:	58021400 	.word	0x58021400
 800919c:	58021800 	.word	0x58021800
 80091a0:	58021c00 	.word	0x58021c00
 80091a4:	58022000 	.word	0x58022000
 80091a8:	58022400 	.word	0x58022400
 80091ac:	2300      	movs	r3, #0
 80091ae:	69fa      	ldr	r2, [r7, #28]
 80091b0:	f002 0203 	and.w	r2, r2, #3
 80091b4:	0092      	lsls	r2, r2, #2
 80091b6:	4093      	lsls	r3, r2
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80091be:	4938      	ldr	r1, [pc, #224]	; (80092a0 <HAL_GPIO_Init+0x35c>)
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	089b      	lsrs	r3, r3, #2
 80091c4:	3302      	adds	r3, #2
 80091c6:	69ba      	ldr	r2, [r7, #24]
 80091c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80091cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	43db      	mvns	r3, r3
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	4013      	ands	r3, r2
 80091dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80091ea:	69ba      	ldr	r2, [r7, #24]
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80091f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80091fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	43db      	mvns	r3, r3
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	4013      	ands	r3, r2
 800920a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d003      	beq.n	8009220 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009218:	69ba      	ldr	r2, [r7, #24]
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	4313      	orrs	r3, r2
 800921e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	43db      	mvns	r3, r3
 8009232:	69ba      	ldr	r2, [r7, #24]
 8009234:	4013      	ands	r3, r2
 8009236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d003      	beq.n	800924c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8009244:	69ba      	ldr	r2, [r7, #24]
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	4313      	orrs	r3, r2
 800924a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	43db      	mvns	r3, r3
 800925c:	69ba      	ldr	r2, [r7, #24]
 800925e:	4013      	ands	r3, r2
 8009260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d003      	beq.n	8009276 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	4313      	orrs	r3, r2
 8009274:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	3301      	adds	r3, #1
 8009280:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	fa22 f303 	lsr.w	r3, r2, r3
 800928c:	2b00      	cmp	r3, #0
 800928e:	f47f ae63 	bne.w	8008f58 <HAL_GPIO_Init+0x14>
  }
}
 8009292:	bf00      	nop
 8009294:	bf00      	nop
 8009296:	3724      	adds	r7, #36	; 0x24
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	58000400 	.word	0x58000400

080092a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b085      	sub	sp, #20
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	887b      	ldrh	r3, [r7, #2]
 80092b6:	4013      	ands	r3, r2
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d002      	beq.n	80092c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80092bc:	2301      	movs	r3, #1
 80092be:	73fb      	strb	r3, [r7, #15]
 80092c0:	e001      	b.n	80092c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80092c2:	2300      	movs	r3, #0
 80092c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3714      	adds	r7, #20
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	807b      	strh	r3, [r7, #2]
 80092e0:	4613      	mov	r3, r2
 80092e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80092e4:	787b      	ldrb	r3, [r7, #1]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80092ea:	887a      	ldrh	r2, [r7, #2]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80092f0:	e003      	b.n	80092fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80092f2:	887b      	ldrh	r3, [r7, #2]
 80092f4:	041a      	lsls	r2, r3, #16
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	619a      	str	r2, [r3, #24]
}
 80092fa:	bf00      	nop
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
	...

08009308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d101      	bne.n	800931a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e08b      	b.n	8009432 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d106      	bne.n	8009334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f7f7 ffea 	bl	8001308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2224      	movs	r2, #36	; 0x24
 8009338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f022 0201 	bic.w	r2, r2, #1
 800934a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009358:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689a      	ldr	r2, [r3, #8]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009368:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d107      	bne.n	8009382 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	689a      	ldr	r2, [r3, #8]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800937e:	609a      	str	r2, [r3, #8]
 8009380:	e006      	b.n	8009390 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689a      	ldr	r2, [r3, #8]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800938e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	2b02      	cmp	r3, #2
 8009396:	d108      	bne.n	80093aa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093a6:	605a      	str	r2, [r3, #4]
 80093a8:	e007      	b.n	80093ba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6859      	ldr	r1, [r3, #4]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	4b1d      	ldr	r3, [pc, #116]	; (800943c <HAL_I2C_Init+0x134>)
 80093c6:	430b      	orrs	r3, r1
 80093c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68da      	ldr	r2, [r3, #12]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	691a      	ldr	r2, [r3, #16]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	430a      	orrs	r2, r1
 80093f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	69d9      	ldr	r1, [r3, #28]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a1a      	ldr	r2, [r3, #32]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f042 0201 	orr.w	r2, r2, #1
 8009412:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2220      	movs	r2, #32
 800941e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	02008000 	.word	0x02008000

08009440 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af02      	add	r7, sp, #8
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	607a      	str	r2, [r7, #4]
 800944a:	461a      	mov	r2, r3
 800944c:	460b      	mov	r3, r1
 800944e:	817b      	strh	r3, [r7, #10]
 8009450:	4613      	mov	r3, r2
 8009452:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b20      	cmp	r3, #32
 800945e:	f040 80fd 	bne.w	800965c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009468:	2b01      	cmp	r3, #1
 800946a:	d101      	bne.n	8009470 <HAL_I2C_Master_Transmit+0x30>
 800946c:	2302      	movs	r3, #2
 800946e:	e0f6      	b.n	800965e <HAL_I2C_Master_Transmit+0x21e>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009478:	f7fa fdf4 	bl	8004064 <HAL_GetTick>
 800947c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	2319      	movs	r3, #25
 8009484:	2201      	movs	r2, #1
 8009486:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f000 fa0a 	bl	80098a4 <I2C_WaitOnFlagUntilTimeout>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e0e1      	b.n	800965e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2221      	movs	r2, #33	; 0x21
 800949e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2210      	movs	r2, #16
 80094a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	893a      	ldrh	r2, [r7, #8]
 80094ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	2bff      	cmp	r3, #255	; 0xff
 80094ca:	d906      	bls.n	80094da <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	22ff      	movs	r2, #255	; 0xff
 80094d0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80094d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094d6:	617b      	str	r3, [r7, #20]
 80094d8:	e007      	b.n	80094ea <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094de:	b29a      	uxth	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80094e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094e8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d024      	beq.n	800953c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	781a      	ldrb	r2, [r3, #0]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800950c:	b29b      	uxth	r3, r3
 800950e:	3b01      	subs	r3, #1
 8009510:	b29a      	uxth	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800951a:	3b01      	subs	r3, #1
 800951c:	b29a      	uxth	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009526:	b2db      	uxtb	r3, r3
 8009528:	3301      	adds	r3, #1
 800952a:	b2da      	uxtb	r2, r3
 800952c:	8979      	ldrh	r1, [r7, #10]
 800952e:	4b4e      	ldr	r3, [pc, #312]	; (8009668 <HAL_I2C_Master_Transmit+0x228>)
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 fc05 	bl	8009d44 <I2C_TransferConfig>
 800953a:	e066      	b.n	800960a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009540:	b2da      	uxtb	r2, r3
 8009542:	8979      	ldrh	r1, [r7, #10]
 8009544:	4b48      	ldr	r3, [pc, #288]	; (8009668 <HAL_I2C_Master_Transmit+0x228>)
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f000 fbfa 	bl	8009d44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009550:	e05b      	b.n	800960a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	6a39      	ldr	r1, [r7, #32]
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 f9fd 	bl	8009956 <I2C_WaitOnTXISFlagUntilTimeout>
 800955c:	4603      	mov	r3, r0
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e07b      	b.n	800965e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956a:	781a      	ldrb	r2, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009576:	1c5a      	adds	r2, r3, #1
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009580:	b29b      	uxth	r3, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	b29a      	uxth	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800958e:	3b01      	subs	r3, #1
 8009590:	b29a      	uxth	r2, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800959a:	b29b      	uxth	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	d034      	beq.n	800960a <HAL_I2C_Master_Transmit+0x1ca>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d130      	bne.n	800960a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	6a3b      	ldr	r3, [r7, #32]
 80095ae:	2200      	movs	r2, #0
 80095b0:	2180      	movs	r1, #128	; 0x80
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 f976 	bl	80098a4 <I2C_WaitOnFlagUntilTimeout>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e04d      	b.n	800965e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	2bff      	cmp	r3, #255	; 0xff
 80095ca:	d90e      	bls.n	80095ea <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	22ff      	movs	r2, #255	; 0xff
 80095d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	8979      	ldrh	r1, [r7, #10]
 80095da:	2300      	movs	r3, #0
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f000 fbae 	bl	8009d44 <I2C_TransferConfig>
 80095e8:	e00f      	b.n	800960a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f8:	b2da      	uxtb	r2, r3
 80095fa:	8979      	ldrh	r1, [r7, #10]
 80095fc:	2300      	movs	r3, #0
 80095fe:	9300      	str	r3, [sp, #0]
 8009600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 fb9d 	bl	8009d44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800960e:	b29b      	uxth	r3, r3
 8009610:	2b00      	cmp	r3, #0
 8009612:	d19e      	bne.n	8009552 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	6a39      	ldr	r1, [r7, #32]
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 f9e3 	bl	80099e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e01a      	b.n	800965e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2220      	movs	r2, #32
 800962e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6859      	ldr	r1, [r3, #4]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	4b0c      	ldr	r3, [pc, #48]	; (800966c <HAL_I2C_Master_Transmit+0x22c>)
 800963c:	400b      	ands	r3, r1
 800963e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2220      	movs	r2, #32
 8009644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	e000      	b.n	800965e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800965c:	2302      	movs	r3, #2
  }
}
 800965e:	4618      	mov	r0, r3
 8009660:	3718      	adds	r7, #24
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	80002000 	.word	0x80002000
 800966c:	fe00e800 	.word	0xfe00e800

08009670 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af02      	add	r7, sp, #8
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	607a      	str	r2, [r7, #4]
 800967a:	461a      	mov	r2, r3
 800967c:	460b      	mov	r3, r1
 800967e:	817b      	strh	r3, [r7, #10]
 8009680:	4613      	mov	r3, r2
 8009682:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b20      	cmp	r3, #32
 800968e:	f040 80db 	bne.w	8009848 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009698:	2b01      	cmp	r3, #1
 800969a:	d101      	bne.n	80096a0 <HAL_I2C_Master_Receive+0x30>
 800969c:	2302      	movs	r3, #2
 800969e:	e0d4      	b.n	800984a <HAL_I2C_Master_Receive+0x1da>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2201      	movs	r2, #1
 80096a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80096a8:	f7fa fcdc 	bl	8004064 <HAL_GetTick>
 80096ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	2319      	movs	r3, #25
 80096b4:	2201      	movs	r2, #1
 80096b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f000 f8f2 	bl	80098a4 <I2C_WaitOnFlagUntilTimeout>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e0bf      	b.n	800984a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2222      	movs	r2, #34	; 0x22
 80096ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2210      	movs	r2, #16
 80096d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	893a      	ldrh	r2, [r7, #8]
 80096ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	2bff      	cmp	r3, #255	; 0xff
 80096fa:	d90e      	bls.n	800971a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	22ff      	movs	r2, #255	; 0xff
 8009700:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009706:	b2da      	uxtb	r2, r3
 8009708:	8979      	ldrh	r1, [r7, #10]
 800970a:	4b52      	ldr	r3, [pc, #328]	; (8009854 <HAL_I2C_Master_Receive+0x1e4>)
 800970c:	9300      	str	r3, [sp, #0]
 800970e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f000 fb16 	bl	8009d44 <I2C_TransferConfig>
 8009718:	e06d      	b.n	80097f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800971e:	b29a      	uxth	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009728:	b2da      	uxtb	r2, r3
 800972a:	8979      	ldrh	r1, [r7, #10]
 800972c:	4b49      	ldr	r3, [pc, #292]	; (8009854 <HAL_I2C_Master_Receive+0x1e4>)
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f000 fb05 	bl	8009d44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800973a:	e05c      	b.n	80097f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	6a39      	ldr	r1, [r7, #32]
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 f993 	bl	8009a6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e07c      	b.n	800984a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975a:	b2d2      	uxtb	r2, r2
 800975c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	1c5a      	adds	r2, r3, #1
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800976c:	3b01      	subs	r3, #1
 800976e:	b29a      	uxth	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009778:	b29b      	uxth	r3, r3
 800977a:	3b01      	subs	r3, #1
 800977c:	b29a      	uxth	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009786:	b29b      	uxth	r3, r3
 8009788:	2b00      	cmp	r3, #0
 800978a:	d034      	beq.n	80097f6 <HAL_I2C_Master_Receive+0x186>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009790:	2b00      	cmp	r3, #0
 8009792:	d130      	bne.n	80097f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	6a3b      	ldr	r3, [r7, #32]
 800979a:	2200      	movs	r2, #0
 800979c:	2180      	movs	r1, #128	; 0x80
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 f880 	bl	80098a4 <I2C_WaitOnFlagUntilTimeout>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	e04d      	b.n	800984a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	2bff      	cmp	r3, #255	; 0xff
 80097b6:	d90e      	bls.n	80097d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	22ff      	movs	r2, #255	; 0xff
 80097bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097c2:	b2da      	uxtb	r2, r3
 80097c4:	8979      	ldrh	r1, [r7, #10]
 80097c6:	2300      	movs	r3, #0
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 fab8 	bl	8009d44 <I2C_TransferConfig>
 80097d4:	e00f      	b.n	80097f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097da:	b29a      	uxth	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	8979      	ldrh	r1, [r7, #10]
 80097e8:	2300      	movs	r3, #0
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f000 faa7 	bl	8009d44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d19d      	bne.n	800973c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009800:	697a      	ldr	r2, [r7, #20]
 8009802:	6a39      	ldr	r1, [r7, #32]
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 f8ed 	bl	80099e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e01a      	b.n	800984a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2220      	movs	r2, #32
 800981a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6859      	ldr	r1, [r3, #4]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <HAL_I2C_Master_Receive+0x1e8>)
 8009828:	400b      	ands	r3, r1
 800982a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2220      	movs	r2, #32
 8009830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	e000      	b.n	800984a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009848:	2302      	movs	r3, #2
  }
}
 800984a:	4618      	mov	r0, r3
 800984c:	3718      	adds	r7, #24
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	80002400 	.word	0x80002400
 8009858:	fe00e800 	.word	0xfe00e800

0800985c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	f003 0302 	and.w	r3, r3, #2
 800986e:	2b02      	cmp	r3, #2
 8009870:	d103      	bne.n	800987a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2200      	movs	r2, #0
 8009878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	2b01      	cmp	r3, #1
 8009886:	d007      	beq.n	8009898 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	699a      	ldr	r2, [r3, #24]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f042 0201 	orr.w	r2, r2, #1
 8009896:	619a      	str	r2, [r3, #24]
  }
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	603b      	str	r3, [r7, #0]
 80098b0:	4613      	mov	r3, r2
 80098b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098b4:	e03b      	b.n	800992e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 f962 	bl	8009b84 <I2C_IsErrorOccurred>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d001      	beq.n	80098ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e041      	b.n	800994e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098d0:	d02d      	beq.n	800992e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098d2:	f7fa fbc7 	bl	8004064 <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d302      	bcc.n	80098e8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d122      	bne.n	800992e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	699a      	ldr	r2, [r3, #24]
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	4013      	ands	r3, r2
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	bf0c      	ite	eq
 80098f8:	2301      	moveq	r3, #1
 80098fa:	2300      	movne	r3, #0
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	461a      	mov	r2, r3
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	429a      	cmp	r2, r3
 8009904:	d113      	bne.n	800992e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800990a:	f043 0220 	orr.w	r2, r3, #32
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2220      	movs	r2, #32
 8009916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e00f      	b.n	800994e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	699a      	ldr	r2, [r3, #24]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	4013      	ands	r3, r2
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	429a      	cmp	r2, r3
 800993c:	bf0c      	ite	eq
 800993e:	2301      	moveq	r3, #1
 8009940:	2300      	movne	r3, #0
 8009942:	b2db      	uxtb	r3, r3
 8009944:	461a      	mov	r2, r3
 8009946:	79fb      	ldrb	r3, [r7, #7]
 8009948:	429a      	cmp	r2, r3
 800994a:	d0b4      	beq.n	80098b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	60f8      	str	r0, [r7, #12]
 800995e:	60b9      	str	r1, [r7, #8]
 8009960:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009962:	e033      	b.n	80099cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	68b9      	ldr	r1, [r7, #8]
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f000 f90b 	bl	8009b84 <I2C_IsErrorOccurred>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e031      	b.n	80099dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800997e:	d025      	beq.n	80099cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009980:	f7fa fb70 	bl	8004064 <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	429a      	cmp	r2, r3
 800998e:	d302      	bcc.n	8009996 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d11a      	bne.n	80099cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	f003 0302 	and.w	r3, r3, #2
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d013      	beq.n	80099cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099a8:	f043 0220 	orr.w	r2, r3, #32
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e007      	b.n	80099dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	f003 0302 	and.w	r3, r3, #2
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d1c4      	bne.n	8009964 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099f0:	e02f      	b.n	8009a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	68b9      	ldr	r1, [r7, #8]
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 f8c4 	bl	8009b84 <I2C_IsErrorOccurred>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
 8009a04:	e02d      	b.n	8009a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a06:	f7fa fb2d 	bl	8004064 <HAL_GetTick>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	68ba      	ldr	r2, [r7, #8]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d302      	bcc.n	8009a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d11a      	bne.n	8009a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	699b      	ldr	r3, [r3, #24]
 8009a22:	f003 0320 	and.w	r3, r3, #32
 8009a26:	2b20      	cmp	r3, #32
 8009a28:	d013      	beq.n	8009a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a2e:	f043 0220 	orr.w	r2, r3, #32
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e007      	b.n	8009a62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	f003 0320 	and.w	r3, r3, #32
 8009a5c:	2b20      	cmp	r3, #32
 8009a5e:	d1c8      	bne.n	80099f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}
	...

08009a6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009a7c:	e071      	b.n	8009b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	68b9      	ldr	r1, [r7, #8]
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 f87e 	bl	8009b84 <I2C_IsErrorOccurred>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	f003 0320 	and.w	r3, r3, #32
 8009a9c:	2b20      	cmp	r3, #32
 8009a9e:	d13b      	bne.n	8009b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009aa0:	7dfb      	ldrb	r3, [r7, #23]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d138      	bne.n	8009b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b04      	cmp	r3, #4
 8009ab2:	d105      	bne.n	8009ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	f003 0310 	and.w	r3, r3, #16
 8009aca:	2b10      	cmp	r3, #16
 8009acc:	d121      	bne.n	8009b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2210      	movs	r2, #16
 8009ad4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2204      	movs	r2, #4
 8009ada:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2220      	movs	r2, #32
 8009ae2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6859      	ldr	r1, [r3, #4]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	4b24      	ldr	r3, [pc, #144]	; (8009b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009af0:	400b      	ands	r3, r1
 8009af2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2220      	movs	r2, #32
 8009af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	75fb      	strb	r3, [r7, #23]
 8009b10:	e002      	b.n	8009b18 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009b18:	f7fa faa4 	bl	8004064 <HAL_GetTick>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d302      	bcc.n	8009b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d119      	bne.n	8009b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009b2e:	7dfb      	ldrb	r3, [r7, #23]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d116      	bne.n	8009b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	f003 0304 	and.w	r3, r3, #4
 8009b3e:	2b04      	cmp	r3, #4
 8009b40:	d00f      	beq.n	8009b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b46:	f043 0220 	orr.w	r2, r3, #32
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2220      	movs	r2, #32
 8009b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	d002      	beq.n	8009b76 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d083      	beq.n	8009a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3718      	adds	r7, #24
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	fe00e800 	.word	0xfe00e800

08009b84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08a      	sub	sp, #40	; 0x28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	f003 0310 	and.w	r3, r3, #16
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d068      	beq.n	8009c82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2210      	movs	r2, #16
 8009bb6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009bb8:	e049      	b.n	8009c4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bc0:	d045      	beq.n	8009c4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009bc2:	f7fa fa4f 	bl	8004064 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	68ba      	ldr	r2, [r7, #8]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d302      	bcc.n	8009bd8 <I2C_IsErrorOccurred+0x54>
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d13a      	bne.n	8009c4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009be2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bfa:	d121      	bne.n	8009c40 <I2C_IsErrorOccurred+0xbc>
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c02:	d01d      	beq.n	8009c40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009c04:	7cfb      	ldrb	r3, [r7, #19]
 8009c06:	2b20      	cmp	r3, #32
 8009c08:	d01a      	beq.n	8009c40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	685a      	ldr	r2, [r3, #4]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009c1a:	f7fa fa23 	bl	8004064 <HAL_GetTick>
 8009c1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c20:	e00e      	b.n	8009c40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009c22:	f7fa fa1f 	bl	8004064 <HAL_GetTick>
 8009c26:	4602      	mov	r2, r0
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	2b19      	cmp	r3, #25
 8009c2e:	d907      	bls.n	8009c40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	f043 0320 	orr.w	r3, r3, #32
 8009c36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009c3e:	e006      	b.n	8009c4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	f003 0320 	and.w	r3, r3, #32
 8009c4a:	2b20      	cmp	r3, #32
 8009c4c:	d1e9      	bne.n	8009c22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	f003 0320 	and.w	r3, r3, #32
 8009c58:	2b20      	cmp	r3, #32
 8009c5a:	d003      	beq.n	8009c64 <I2C_IsErrorOccurred+0xe0>
 8009c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d0aa      	beq.n	8009bba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d103      	bne.n	8009c74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2220      	movs	r2, #32
 8009c72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	f043 0304 	orr.w	r3, r3, #4
 8009c7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00b      	beq.n	8009cac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	f043 0301 	orr.w	r3, r3, #1
 8009c9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ca4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00b      	beq.n	8009cce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	f043 0308 	orr.w	r3, r3, #8
 8009cbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009cc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00b      	beq.n	8009cf0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	f043 0302 	orr.w	r3, r3, #2
 8009cde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ce8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d01c      	beq.n	8009d32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f7ff fdaf 	bl	800985c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6859      	ldr	r1, [r3, #4]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <I2C_IsErrorOccurred+0x1bc>)
 8009d0a:	400b      	ands	r3, r1
 8009d0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d12:	6a3b      	ldr	r3, [r7, #32]
 8009d14:	431a      	orrs	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2220      	movs	r2, #32
 8009d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3728      	adds	r7, #40	; 0x28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	fe00e800 	.word	0xfe00e800

08009d44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	607b      	str	r3, [r7, #4]
 8009d4e:	460b      	mov	r3, r1
 8009d50:	817b      	strh	r3, [r7, #10]
 8009d52:	4613      	mov	r3, r2
 8009d54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d56:	897b      	ldrh	r3, [r7, #10]
 8009d58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d5c:	7a7b      	ldrb	r3, [r7, #9]
 8009d5e:	041b      	lsls	r3, r3, #16
 8009d60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685a      	ldr	r2, [r3, #4]
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	0d5b      	lsrs	r3, r3, #21
 8009d7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009d82:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <I2C_TransferConfig+0x60>)
 8009d84:	430b      	orrs	r3, r1
 8009d86:	43db      	mvns	r3, r3
 8009d88:	ea02 0103 	and.w	r1, r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	430a      	orrs	r2, r1
 8009d94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009d96:	bf00      	nop
 8009d98:	371c      	adds	r7, #28
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	03ff63ff 	.word	0x03ff63ff

08009da8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b20      	cmp	r3, #32
 8009dbc:	d138      	bne.n	8009e30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d101      	bne.n	8009dcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009dc8:	2302      	movs	r3, #2
 8009dca:	e032      	b.n	8009e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2224      	movs	r2, #36	; 0x24
 8009dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f022 0201 	bic.w	r2, r2, #1
 8009dea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009dfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6819      	ldr	r1, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	683a      	ldr	r2, [r7, #0]
 8009e08:	430a      	orrs	r2, r1
 8009e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f042 0201 	orr.w	r2, r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2220      	movs	r2, #32
 8009e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	e000      	b.n	8009e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e30:	2302      	movs	r3, #2
  }
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b085      	sub	sp, #20
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
 8009e46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b20      	cmp	r3, #32
 8009e52:	d139      	bne.n	8009ec8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d101      	bne.n	8009e62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009e5e:	2302      	movs	r3, #2
 8009e60:	e033      	b.n	8009eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2224      	movs	r2, #36	; 0x24
 8009e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f022 0201 	bic.w	r2, r2, #1
 8009e80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	021b      	lsls	r3, r3, #8
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f042 0201 	orr.w	r2, r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	e000      	b.n	8009eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009ec8:	2302      	movs	r3, #2
  }
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
	...

08009ed8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ee0:	4b0d      	ldr	r3, [pc, #52]	; (8009f18 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ee6:	4a0c      	ldr	r2, [pc, #48]	; (8009f18 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009ee8:	f043 0302 	orr.w	r3, r3, #2
 8009eec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009ef0:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009ef2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ef6:	f003 0302 	and.w	r3, r3, #2
 8009efa:	60fb      	str	r3, [r7, #12]
 8009efc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8009efe:	4b07      	ldr	r3, [pc, #28]	; (8009f1c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	4906      	ldr	r1, [pc, #24]	; (8009f1c <HAL_I2CEx_EnableFastModePlus+0x44>)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	604b      	str	r3, [r1, #4]
}
 8009f0a:	bf00      	nop
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	58024400 	.word	0x58024400
 8009f1c:	58000400 	.word	0x58000400

08009f20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009f28:	4b19      	ldr	r3, [pc, #100]	; (8009f90 <HAL_PWREx_ConfigSupply+0x70>)
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	f003 0304 	and.w	r3, r3, #4
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d00a      	beq.n	8009f4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009f34:	4b16      	ldr	r3, [pc, #88]	; (8009f90 <HAL_PWREx_ConfigSupply+0x70>)
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	f003 0307 	and.w	r3, r3, #7
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d001      	beq.n	8009f46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e01f      	b.n	8009f86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009f46:	2300      	movs	r3, #0
 8009f48:	e01d      	b.n	8009f86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009f4a:	4b11      	ldr	r3, [pc, #68]	; (8009f90 <HAL_PWREx_ConfigSupply+0x70>)
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	f023 0207 	bic.w	r2, r3, #7
 8009f52:	490f      	ldr	r1, [pc, #60]	; (8009f90 <HAL_PWREx_ConfigSupply+0x70>)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009f5a:	f7fa f883 	bl	8004064 <HAL_GetTick>
 8009f5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f60:	e009      	b.n	8009f76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009f62:	f7fa f87f 	bl	8004064 <HAL_GetTick>
 8009f66:	4602      	mov	r2, r0
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f70:	d901      	bls.n	8009f76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e007      	b.n	8009f86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f76:	4b06      	ldr	r3, [pc, #24]	; (8009f90 <HAL_PWREx_ConfigSupply+0x70>)
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f82:	d1ee      	bne.n	8009f62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3710      	adds	r7, #16
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	58024800 	.word	0x58024800

08009f94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08c      	sub	sp, #48	; 0x30
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d102      	bne.n	8009fa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	f000 bc48 	b.w	800a838 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0301 	and.w	r3, r3, #1
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 8088 	beq.w	800a0c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fb6:	4b99      	ldr	r3, [pc, #612]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009fc0:	4b96      	ldr	r3, [pc, #600]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 8009fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc8:	2b10      	cmp	r3, #16
 8009fca:	d007      	beq.n	8009fdc <HAL_RCC_OscConfig+0x48>
 8009fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fce:	2b18      	cmp	r3, #24
 8009fd0:	d111      	bne.n	8009ff6 <HAL_RCC_OscConfig+0x62>
 8009fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd4:	f003 0303 	and.w	r3, r3, #3
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d10c      	bne.n	8009ff6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fdc:	4b8f      	ldr	r3, [pc, #572]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d06d      	beq.n	800a0c4 <HAL_RCC_OscConfig+0x130>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d169      	bne.n	800a0c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	f000 bc21 	b.w	800a838 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ffe:	d106      	bne.n	800a00e <HAL_RCC_OscConfig+0x7a>
 800a000:	4b86      	ldr	r3, [pc, #536]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a85      	ldr	r2, [pc, #532]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	e02e      	b.n	800a06c <HAL_RCC_OscConfig+0xd8>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10c      	bne.n	800a030 <HAL_RCC_OscConfig+0x9c>
 800a016:	4b81      	ldr	r3, [pc, #516]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a80      	ldr	r2, [pc, #512]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a01c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	4b7e      	ldr	r3, [pc, #504]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a7d      	ldr	r2, [pc, #500]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a02c:	6013      	str	r3, [r2, #0]
 800a02e:	e01d      	b.n	800a06c <HAL_RCC_OscConfig+0xd8>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a038:	d10c      	bne.n	800a054 <HAL_RCC_OscConfig+0xc0>
 800a03a:	4b78      	ldr	r3, [pc, #480]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a77      	ldr	r2, [pc, #476]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	4b75      	ldr	r3, [pc, #468]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a74      	ldr	r2, [pc, #464]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a04c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	e00b      	b.n	800a06c <HAL_RCC_OscConfig+0xd8>
 800a054:	4b71      	ldr	r3, [pc, #452]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a70      	ldr	r2, [pc, #448]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a05a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	4b6e      	ldr	r3, [pc, #440]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a6d      	ldr	r2, [pc, #436]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a06a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d013      	beq.n	800a09c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a074:	f7f9 fff6 	bl	8004064 <HAL_GetTick>
 800a078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a07a:	e008      	b.n	800a08e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a07c:	f7f9 fff2 	bl	8004064 <HAL_GetTick>
 800a080:	4602      	mov	r2, r0
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	2b64      	cmp	r3, #100	; 0x64
 800a088:	d901      	bls.n	800a08e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a08a:	2303      	movs	r3, #3
 800a08c:	e3d4      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a08e:	4b63      	ldr	r3, [pc, #396]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d0f0      	beq.n	800a07c <HAL_RCC_OscConfig+0xe8>
 800a09a:	e014      	b.n	800a0c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a09c:	f7f9 ffe2 	bl	8004064 <HAL_GetTick>
 800a0a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0a2:	e008      	b.n	800a0b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0a4:	f7f9 ffde 	bl	8004064 <HAL_GetTick>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	2b64      	cmp	r3, #100	; 0x64
 800a0b0:	d901      	bls.n	800a0b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	e3c0      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0b6:	4b59      	ldr	r3, [pc, #356]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1f0      	bne.n	800a0a4 <HAL_RCC_OscConfig+0x110>
 800a0c2:	e000      	b.n	800a0c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 80ca 	beq.w	800a268 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0d4:	4b51      	ldr	r3, [pc, #324]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a0d6:	691b      	ldr	r3, [r3, #16]
 800a0d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0de:	4b4f      	ldr	r3, [pc, #316]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d007      	beq.n	800a0fa <HAL_RCC_OscConfig+0x166>
 800a0ea:	6a3b      	ldr	r3, [r7, #32]
 800a0ec:	2b18      	cmp	r3, #24
 800a0ee:	d156      	bne.n	800a19e <HAL_RCC_OscConfig+0x20a>
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	f003 0303 	and.w	r3, r3, #3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d151      	bne.n	800a19e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0fa:	4b48      	ldr	r3, [pc, #288]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0304 	and.w	r3, r3, #4
 800a102:	2b00      	cmp	r3, #0
 800a104:	d005      	beq.n	800a112 <HAL_RCC_OscConfig+0x17e>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d101      	bne.n	800a112 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	e392      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a112:	4b42      	ldr	r3, [pc, #264]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f023 0219 	bic.w	r2, r3, #25
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	493f      	ldr	r1, [pc, #252]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a120:	4313      	orrs	r3, r2
 800a122:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a124:	f7f9 ff9e 	bl	8004064 <HAL_GetTick>
 800a128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a12a:	e008      	b.n	800a13e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a12c:	f7f9 ff9a 	bl	8004064 <HAL_GetTick>
 800a130:	4602      	mov	r2, r0
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	2b02      	cmp	r3, #2
 800a138:	d901      	bls.n	800a13e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e37c      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a13e:	4b37      	ldr	r3, [pc, #220]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f003 0304 	and.w	r3, r3, #4
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0f0      	beq.n	800a12c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a14a:	f7f9 ff97 	bl	800407c <HAL_GetREVID>
 800a14e:	4603      	mov	r3, r0
 800a150:	f241 0203 	movw	r2, #4099	; 0x1003
 800a154:	4293      	cmp	r3, r2
 800a156:	d817      	bhi.n	800a188 <HAL_RCC_OscConfig+0x1f4>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	2b40      	cmp	r3, #64	; 0x40
 800a15e:	d108      	bne.n	800a172 <HAL_RCC_OscConfig+0x1de>
 800a160:	4b2e      	ldr	r3, [pc, #184]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a168:	4a2c      	ldr	r2, [pc, #176]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a16a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a16e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a170:	e07a      	b.n	800a268 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a172:	4b2a      	ldr	r3, [pc, #168]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	031b      	lsls	r3, r3, #12
 800a180:	4926      	ldr	r1, [pc, #152]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a182:	4313      	orrs	r3, r2
 800a184:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a186:	e06f      	b.n	800a268 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a188:	4b24      	ldr	r3, [pc, #144]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	061b      	lsls	r3, r3, #24
 800a196:	4921      	ldr	r1, [pc, #132]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a198:	4313      	orrs	r3, r2
 800a19a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a19c:	e064      	b.n	800a268 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d047      	beq.n	800a236 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a1a6:	4b1d      	ldr	r3, [pc, #116]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f023 0219 	bic.w	r2, r3, #25
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	491a      	ldr	r1, [pc, #104]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b8:	f7f9 ff54 	bl	8004064 <HAL_GetTick>
 800a1bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1be:	e008      	b.n	800a1d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1c0:	f7f9 ff50 	bl	8004064 <HAL_GetTick>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d901      	bls.n	800a1d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e332      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1d2:	4b12      	ldr	r3, [pc, #72]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 0304 	and.w	r3, r3, #4
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0f0      	beq.n	800a1c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1de:	f7f9 ff4d 	bl	800407c <HAL_GetREVID>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d819      	bhi.n	800a220 <HAL_RCC_OscConfig+0x28c>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	2b40      	cmp	r3, #64	; 0x40
 800a1f2:	d108      	bne.n	800a206 <HAL_RCC_OscConfig+0x272>
 800a1f4:	4b09      	ldr	r3, [pc, #36]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a1fc:	4a07      	ldr	r2, [pc, #28]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a1fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a202:	6053      	str	r3, [r2, #4]
 800a204:	e030      	b.n	800a268 <HAL_RCC_OscConfig+0x2d4>
 800a206:	4b05      	ldr	r3, [pc, #20]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	031b      	lsls	r3, r3, #12
 800a214:	4901      	ldr	r1, [pc, #4]	; (800a21c <HAL_RCC_OscConfig+0x288>)
 800a216:	4313      	orrs	r3, r2
 800a218:	604b      	str	r3, [r1, #4]
 800a21a:	e025      	b.n	800a268 <HAL_RCC_OscConfig+0x2d4>
 800a21c:	58024400 	.word	0x58024400
 800a220:	4b9a      	ldr	r3, [pc, #616]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	061b      	lsls	r3, r3, #24
 800a22e:	4997      	ldr	r1, [pc, #604]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a230:	4313      	orrs	r3, r2
 800a232:	604b      	str	r3, [r1, #4]
 800a234:	e018      	b.n	800a268 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a236:	4b95      	ldr	r3, [pc, #596]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a94      	ldr	r2, [pc, #592]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a23c:	f023 0301 	bic.w	r3, r3, #1
 800a240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a242:	f7f9 ff0f 	bl	8004064 <HAL_GetTick>
 800a246:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a248:	e008      	b.n	800a25c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a24a:	f7f9 ff0b 	bl	8004064 <HAL_GetTick>
 800a24e:	4602      	mov	r2, r0
 800a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	2b02      	cmp	r3, #2
 800a256:	d901      	bls.n	800a25c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	e2ed      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a25c:	4b8b      	ldr	r3, [pc, #556]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1f0      	bne.n	800a24a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 0310 	and.w	r3, r3, #16
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 80a9 	beq.w	800a3c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a276:	4b85      	ldr	r3, [pc, #532]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a27e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a280:	4b82      	ldr	r3, [pc, #520]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a284:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	2b08      	cmp	r3, #8
 800a28a:	d007      	beq.n	800a29c <HAL_RCC_OscConfig+0x308>
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	2b18      	cmp	r3, #24
 800a290:	d13a      	bne.n	800a308 <HAL_RCC_OscConfig+0x374>
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f003 0303 	and.w	r3, r3, #3
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d135      	bne.n	800a308 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a29c:	4b7b      	ldr	r3, [pc, #492]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d005      	beq.n	800a2b4 <HAL_RCC_OscConfig+0x320>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	69db      	ldr	r3, [r3, #28]
 800a2ac:	2b80      	cmp	r3, #128	; 0x80
 800a2ae:	d001      	beq.n	800a2b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e2c1      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2b4:	f7f9 fee2 	bl	800407c <HAL_GetREVID>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	f241 0203 	movw	r2, #4099	; 0x1003
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d817      	bhi.n	800a2f2 <HAL_RCC_OscConfig+0x35e>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	2b20      	cmp	r3, #32
 800a2c8:	d108      	bne.n	800a2dc <HAL_RCC_OscConfig+0x348>
 800a2ca:	4b70      	ldr	r3, [pc, #448]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a2d2:	4a6e      	ldr	r2, [pc, #440]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a2d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2d8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2da:	e075      	b.n	800a3c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2dc:	4b6b      	ldr	r3, [pc, #428]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	069b      	lsls	r3, r3, #26
 800a2ea:	4968      	ldr	r1, [pc, #416]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2f0:	e06a      	b.n	800a3c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2f2:	4b66      	ldr	r3, [pc, #408]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	061b      	lsls	r3, r3, #24
 800a300:	4962      	ldr	r1, [pc, #392]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a302:	4313      	orrs	r3, r2
 800a304:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a306:	e05f      	b.n	800a3c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d042      	beq.n	800a396 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a310:	4b5e      	ldr	r3, [pc, #376]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a5d      	ldr	r2, [pc, #372]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a31a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a31c:	f7f9 fea2 	bl	8004064 <HAL_GetTick>
 800a320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a322:	e008      	b.n	800a336 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a324:	f7f9 fe9e 	bl	8004064 <HAL_GetTick>
 800a328:	4602      	mov	r2, r0
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d901      	bls.n	800a336 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	e280      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a336:	4b55      	ldr	r3, [pc, #340]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d0f0      	beq.n	800a324 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a342:	f7f9 fe9b 	bl	800407c <HAL_GetREVID>
 800a346:	4603      	mov	r3, r0
 800a348:	f241 0203 	movw	r2, #4099	; 0x1003
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d817      	bhi.n	800a380 <HAL_RCC_OscConfig+0x3ec>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	2b20      	cmp	r3, #32
 800a356:	d108      	bne.n	800a36a <HAL_RCC_OscConfig+0x3d6>
 800a358:	4b4c      	ldr	r3, [pc, #304]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a360:	4a4a      	ldr	r2, [pc, #296]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a362:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a366:	6053      	str	r3, [r2, #4]
 800a368:	e02e      	b.n	800a3c8 <HAL_RCC_OscConfig+0x434>
 800a36a:	4b48      	ldr	r3, [pc, #288]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	069b      	lsls	r3, r3, #26
 800a378:	4944      	ldr	r1, [pc, #272]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a37a:	4313      	orrs	r3, r2
 800a37c:	604b      	str	r3, [r1, #4]
 800a37e:	e023      	b.n	800a3c8 <HAL_RCC_OscConfig+0x434>
 800a380:	4b42      	ldr	r3, [pc, #264]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a1b      	ldr	r3, [r3, #32]
 800a38c:	061b      	lsls	r3, r3, #24
 800a38e:	493f      	ldr	r1, [pc, #252]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a390:	4313      	orrs	r3, r2
 800a392:	60cb      	str	r3, [r1, #12]
 800a394:	e018      	b.n	800a3c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a396:	4b3d      	ldr	r3, [pc, #244]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a3c      	ldr	r2, [pc, #240]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a39c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3a2:	f7f9 fe5f 	bl	8004064 <HAL_GetTick>
 800a3a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3a8:	e008      	b.n	800a3bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3aa:	f7f9 fe5b 	bl	8004064 <HAL_GetTick>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d901      	bls.n	800a3bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	e23d      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3bc:	4b33      	ldr	r3, [pc, #204]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1f0      	bne.n	800a3aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f003 0308 	and.w	r3, r3, #8
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d036      	beq.n	800a442 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d019      	beq.n	800a410 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3dc:	4b2b      	ldr	r3, [pc, #172]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a3de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3e0:	4a2a      	ldr	r2, [pc, #168]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a3e2:	f043 0301 	orr.w	r3, r3, #1
 800a3e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3e8:	f7f9 fe3c 	bl	8004064 <HAL_GetTick>
 800a3ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a3ee:	e008      	b.n	800a402 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3f0:	f7f9 fe38 	bl	8004064 <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d901      	bls.n	800a402 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e21a      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a402:	4b22      	ldr	r3, [pc, #136]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a406:	f003 0302 	and.w	r3, r3, #2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0f0      	beq.n	800a3f0 <HAL_RCC_OscConfig+0x45c>
 800a40e:	e018      	b.n	800a442 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a410:	4b1e      	ldr	r3, [pc, #120]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a414:	4a1d      	ldr	r2, [pc, #116]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a416:	f023 0301 	bic.w	r3, r3, #1
 800a41a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a41c:	f7f9 fe22 	bl	8004064 <HAL_GetTick>
 800a420:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a422:	e008      	b.n	800a436 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a424:	f7f9 fe1e 	bl	8004064 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d901      	bls.n	800a436 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e200      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a436:	4b15      	ldr	r3, [pc, #84]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a43a:	f003 0302 	and.w	r3, r3, #2
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1f0      	bne.n	800a424 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0320 	and.w	r3, r3, #32
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d039      	beq.n	800a4c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d01c      	beq.n	800a490 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a456:	4b0d      	ldr	r3, [pc, #52]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a0c      	ldr	r2, [pc, #48]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a45c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a460:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a462:	f7f9 fdff 	bl	8004064 <HAL_GetTick>
 800a466:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a468:	e008      	b.n	800a47c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a46a:	f7f9 fdfb 	bl	8004064 <HAL_GetTick>
 800a46e:	4602      	mov	r2, r0
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	1ad3      	subs	r3, r2, r3
 800a474:	2b02      	cmp	r3, #2
 800a476:	d901      	bls.n	800a47c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a478:	2303      	movs	r3, #3
 800a47a:	e1dd      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a47c:	4b03      	ldr	r3, [pc, #12]	; (800a48c <HAL_RCC_OscConfig+0x4f8>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d0f0      	beq.n	800a46a <HAL_RCC_OscConfig+0x4d6>
 800a488:	e01b      	b.n	800a4c2 <HAL_RCC_OscConfig+0x52e>
 800a48a:	bf00      	nop
 800a48c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a490:	4b9b      	ldr	r3, [pc, #620]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a9a      	ldr	r2, [pc, #616]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a49a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a49c:	f7f9 fde2 	bl	8004064 <HAL_GetTick>
 800a4a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4a2:	e008      	b.n	800a4b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4a4:	f7f9 fdde 	bl	8004064 <HAL_GetTick>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	1ad3      	subs	r3, r2, r3
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d901      	bls.n	800a4b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	e1c0      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4b6:	4b92      	ldr	r3, [pc, #584]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1f0      	bne.n	800a4a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f003 0304 	and.w	r3, r3, #4
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 8081 	beq.w	800a5d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a4d0:	4b8c      	ldr	r3, [pc, #560]	; (800a704 <HAL_RCC_OscConfig+0x770>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a8b      	ldr	r2, [pc, #556]	; (800a704 <HAL_RCC_OscConfig+0x770>)
 800a4d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a4dc:	f7f9 fdc2 	bl	8004064 <HAL_GetTick>
 800a4e0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4e2:	e008      	b.n	800a4f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4e4:	f7f9 fdbe 	bl	8004064 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	2b64      	cmp	r3, #100	; 0x64
 800a4f0:	d901      	bls.n	800a4f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e1a0      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4f6:	4b83      	ldr	r3, [pc, #524]	; (800a704 <HAL_RCC_OscConfig+0x770>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0f0      	beq.n	800a4e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d106      	bne.n	800a518 <HAL_RCC_OscConfig+0x584>
 800a50a:	4b7d      	ldr	r3, [pc, #500]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50e:	4a7c      	ldr	r2, [pc, #496]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a510:	f043 0301 	orr.w	r3, r3, #1
 800a514:	6713      	str	r3, [r2, #112]	; 0x70
 800a516:	e02d      	b.n	800a574 <HAL_RCC_OscConfig+0x5e0>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10c      	bne.n	800a53a <HAL_RCC_OscConfig+0x5a6>
 800a520:	4b77      	ldr	r3, [pc, #476]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a524:	4a76      	ldr	r2, [pc, #472]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a526:	f023 0301 	bic.w	r3, r3, #1
 800a52a:	6713      	str	r3, [r2, #112]	; 0x70
 800a52c:	4b74      	ldr	r3, [pc, #464]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a52e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a530:	4a73      	ldr	r2, [pc, #460]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a532:	f023 0304 	bic.w	r3, r3, #4
 800a536:	6713      	str	r3, [r2, #112]	; 0x70
 800a538:	e01c      	b.n	800a574 <HAL_RCC_OscConfig+0x5e0>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	2b05      	cmp	r3, #5
 800a540:	d10c      	bne.n	800a55c <HAL_RCC_OscConfig+0x5c8>
 800a542:	4b6f      	ldr	r3, [pc, #444]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a546:	4a6e      	ldr	r2, [pc, #440]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a548:	f043 0304 	orr.w	r3, r3, #4
 800a54c:	6713      	str	r3, [r2, #112]	; 0x70
 800a54e:	4b6c      	ldr	r3, [pc, #432]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a552:	4a6b      	ldr	r2, [pc, #428]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a554:	f043 0301 	orr.w	r3, r3, #1
 800a558:	6713      	str	r3, [r2, #112]	; 0x70
 800a55a:	e00b      	b.n	800a574 <HAL_RCC_OscConfig+0x5e0>
 800a55c:	4b68      	ldr	r3, [pc, #416]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a55e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a560:	4a67      	ldr	r2, [pc, #412]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a562:	f023 0301 	bic.w	r3, r3, #1
 800a566:	6713      	str	r3, [r2, #112]	; 0x70
 800a568:	4b65      	ldr	r3, [pc, #404]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a56a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a56c:	4a64      	ldr	r2, [pc, #400]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a56e:	f023 0304 	bic.w	r3, r3, #4
 800a572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d015      	beq.n	800a5a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a57c:	f7f9 fd72 	bl	8004064 <HAL_GetTick>
 800a580:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a582:	e00a      	b.n	800a59a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a584:	f7f9 fd6e 	bl	8004064 <HAL_GetTick>
 800a588:	4602      	mov	r2, r0
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a592:	4293      	cmp	r3, r2
 800a594:	d901      	bls.n	800a59a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a596:	2303      	movs	r3, #3
 800a598:	e14e      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a59a:	4b59      	ldr	r3, [pc, #356]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a59c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a59e:	f003 0302 	and.w	r3, r3, #2
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d0ee      	beq.n	800a584 <HAL_RCC_OscConfig+0x5f0>
 800a5a6:	e014      	b.n	800a5d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5a8:	f7f9 fd5c 	bl	8004064 <HAL_GetTick>
 800a5ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a5ae:	e00a      	b.n	800a5c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5b0:	f7f9 fd58 	bl	8004064 <HAL_GetTick>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b8:	1ad3      	subs	r3, r2, r3
 800a5ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d901      	bls.n	800a5c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	e138      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a5c6:	4b4e      	ldr	r3, [pc, #312]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ca:	f003 0302 	and.w	r3, r3, #2
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d1ee      	bne.n	800a5b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 812d 	beq.w	800a836 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a5dc:	4b48      	ldr	r3, [pc, #288]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5e4:	2b18      	cmp	r3, #24
 800a5e6:	f000 80bd 	beq.w	800a764 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	f040 809e 	bne.w	800a730 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5f4:	4b42      	ldr	r3, [pc, #264]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a41      	ldr	r2, [pc, #260]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a5fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a5fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a600:	f7f9 fd30 	bl	8004064 <HAL_GetTick>
 800a604:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a606:	e008      	b.n	800a61a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a608:	f7f9 fd2c 	bl	8004064 <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2b02      	cmp	r3, #2
 800a614:	d901      	bls.n	800a61a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e10e      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a61a:	4b39      	ldr	r3, [pc, #228]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1f0      	bne.n	800a608 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a626:	4b36      	ldr	r3, [pc, #216]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a62a:	4b37      	ldr	r3, [pc, #220]	; (800a708 <HAL_RCC_OscConfig+0x774>)
 800a62c:	4013      	ands	r3, r2
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a636:	0112      	lsls	r2, r2, #4
 800a638:	430a      	orrs	r2, r1
 800a63a:	4931      	ldr	r1, [pc, #196]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a63c:	4313      	orrs	r3, r2
 800a63e:	628b      	str	r3, [r1, #40]	; 0x28
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a644:	3b01      	subs	r3, #1
 800a646:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64e:	3b01      	subs	r3, #1
 800a650:	025b      	lsls	r3, r3, #9
 800a652:	b29b      	uxth	r3, r3
 800a654:	431a      	orrs	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65a:	3b01      	subs	r3, #1
 800a65c:	041b      	lsls	r3, r3, #16
 800a65e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a662:	431a      	orrs	r2, r3
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a668:	3b01      	subs	r3, #1
 800a66a:	061b      	lsls	r3, r3, #24
 800a66c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a670:	4923      	ldr	r1, [pc, #140]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a672:	4313      	orrs	r3, r2
 800a674:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a676:	4b22      	ldr	r3, [pc, #136]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67a:	4a21      	ldr	r2, [pc, #132]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a67c:	f023 0301 	bic.w	r3, r3, #1
 800a680:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a682:	4b1f      	ldr	r3, [pc, #124]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a686:	4b21      	ldr	r3, [pc, #132]	; (800a70c <HAL_RCC_OscConfig+0x778>)
 800a688:	4013      	ands	r3, r2
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a68e:	00d2      	lsls	r2, r2, #3
 800a690:	491b      	ldr	r1, [pc, #108]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a692:	4313      	orrs	r3, r2
 800a694:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a696:	4b1a      	ldr	r3, [pc, #104]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69a:	f023 020c 	bic.w	r2, r3, #12
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	4917      	ldr	r1, [pc, #92]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a6a8:	4b15      	ldr	r3, [pc, #84]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ac:	f023 0202 	bic.w	r2, r3, #2
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b4:	4912      	ldr	r1, [pc, #72]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a6ba:	4b11      	ldr	r3, [pc, #68]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6be:	4a10      	ldr	r2, [pc, #64]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a6c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6c6:	4b0e      	ldr	r3, [pc, #56]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ca:	4a0d      	ldr	r2, [pc, #52]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a6cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a6d2:	4b0b      	ldr	r3, [pc, #44]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d6:	4a0a      	ldr	r2, [pc, #40]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a6d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a6de:	4b08      	ldr	r3, [pc, #32]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e2:	4a07      	ldr	r2, [pc, #28]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a6e4:	f043 0301 	orr.w	r3, r3, #1
 800a6e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a6ea:	4b05      	ldr	r3, [pc, #20]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a04      	ldr	r2, [pc, #16]	; (800a700 <HAL_RCC_OscConfig+0x76c>)
 800a6f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a6f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6f6:	f7f9 fcb5 	bl	8004064 <HAL_GetTick>
 800a6fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6fc:	e011      	b.n	800a722 <HAL_RCC_OscConfig+0x78e>
 800a6fe:	bf00      	nop
 800a700:	58024400 	.word	0x58024400
 800a704:	58024800 	.word	0x58024800
 800a708:	fffffc0c 	.word	0xfffffc0c
 800a70c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a710:	f7f9 fca8 	bl	8004064 <HAL_GetTick>
 800a714:	4602      	mov	r2, r0
 800a716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d901      	bls.n	800a722 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e08a      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a722:	4b47      	ldr	r3, [pc, #284]	; (800a840 <HAL_RCC_OscConfig+0x8ac>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0f0      	beq.n	800a710 <HAL_RCC_OscConfig+0x77c>
 800a72e:	e082      	b.n	800a836 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a730:	4b43      	ldr	r3, [pc, #268]	; (800a840 <HAL_RCC_OscConfig+0x8ac>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a42      	ldr	r2, [pc, #264]	; (800a840 <HAL_RCC_OscConfig+0x8ac>)
 800a736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a73a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a73c:	f7f9 fc92 	bl	8004064 <HAL_GetTick>
 800a740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a742:	e008      	b.n	800a756 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a744:	f7f9 fc8e 	bl	8004064 <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d901      	bls.n	800a756 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e070      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a756:	4b3a      	ldr	r3, [pc, #232]	; (800a840 <HAL_RCC_OscConfig+0x8ac>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1f0      	bne.n	800a744 <HAL_RCC_OscConfig+0x7b0>
 800a762:	e068      	b.n	800a836 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a764:	4b36      	ldr	r3, [pc, #216]	; (800a840 <HAL_RCC_OscConfig+0x8ac>)
 800a766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a768:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a76a:	4b35      	ldr	r3, [pc, #212]	; (800a840 <HAL_RCC_OscConfig+0x8ac>)
 800a76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	2b01      	cmp	r3, #1
 800a776:	d031      	beq.n	800a7dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f003 0203 	and.w	r2, r3, #3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a782:	429a      	cmp	r2, r3
 800a784:	d12a      	bne.n	800a7dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	091b      	lsrs	r3, r3, #4
 800a78a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a792:	429a      	cmp	r2, r3
 800a794:	d122      	bne.n	800a7dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d11a      	bne.n	800a7dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	0a5b      	lsrs	r3, r3, #9
 800a7aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d111      	bne.n	800a7dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	0c1b      	lsrs	r3, r3, #16
 800a7bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d108      	bne.n	800a7dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	0e1b      	lsrs	r3, r3, #24
 800a7ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d001      	beq.n	800a7e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e02b      	b.n	800a838 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a7e0:	4b17      	ldr	r3, [pc, #92]	; (800a840 <HAL_RCC_OscConfig+0x8ac>)
 800a7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e4:	08db      	lsrs	r3, r3, #3
 800a7e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d01f      	beq.n	800a836 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a7f6:	4b12      	ldr	r3, [pc, #72]	; (800a840 <HAL_RCC_OscConfig+0x8ac>)
 800a7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fa:	4a11      	ldr	r2, [pc, #68]	; (800a840 <HAL_RCC_OscConfig+0x8ac>)
 800a7fc:	f023 0301 	bic.w	r3, r3, #1
 800a800:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a802:	f7f9 fc2f 	bl	8004064 <HAL_GetTick>
 800a806:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a808:	bf00      	nop
 800a80a:	f7f9 fc2b 	bl	8004064 <HAL_GetTick>
 800a80e:	4602      	mov	r2, r0
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	4293      	cmp	r3, r2
 800a814:	d0f9      	beq.n	800a80a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a816:	4b0a      	ldr	r3, [pc, #40]	; (800a840 <HAL_RCC_OscConfig+0x8ac>)
 800a818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a81a:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <HAL_RCC_OscConfig+0x8b0>)
 800a81c:	4013      	ands	r3, r2
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a822:	00d2      	lsls	r2, r2, #3
 800a824:	4906      	ldr	r1, [pc, #24]	; (800a840 <HAL_RCC_OscConfig+0x8ac>)
 800a826:	4313      	orrs	r3, r2
 800a828:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a82a:	4b05      	ldr	r3, [pc, #20]	; (800a840 <HAL_RCC_OscConfig+0x8ac>)
 800a82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a82e:	4a04      	ldr	r2, [pc, #16]	; (800a840 <HAL_RCC_OscConfig+0x8ac>)
 800a830:	f043 0301 	orr.w	r3, r3, #1
 800a834:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3730      	adds	r7, #48	; 0x30
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	58024400 	.word	0x58024400
 800a844:	ffff0007 	.word	0xffff0007

0800a848 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d101      	bne.n	800a85c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	e19c      	b.n	800ab96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a85c:	4b8a      	ldr	r3, [pc, #552]	; (800aa88 <HAL_RCC_ClockConfig+0x240>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 030f 	and.w	r3, r3, #15
 800a864:	683a      	ldr	r2, [r7, #0]
 800a866:	429a      	cmp	r2, r3
 800a868:	d910      	bls.n	800a88c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a86a:	4b87      	ldr	r3, [pc, #540]	; (800aa88 <HAL_RCC_ClockConfig+0x240>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f023 020f 	bic.w	r2, r3, #15
 800a872:	4985      	ldr	r1, [pc, #532]	; (800aa88 <HAL_RCC_ClockConfig+0x240>)
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	4313      	orrs	r3, r2
 800a878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a87a:	4b83      	ldr	r3, [pc, #524]	; (800aa88 <HAL_RCC_ClockConfig+0x240>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 030f 	and.w	r3, r3, #15
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	429a      	cmp	r2, r3
 800a886:	d001      	beq.n	800a88c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e184      	b.n	800ab96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f003 0304 	and.w	r3, r3, #4
 800a894:	2b00      	cmp	r3, #0
 800a896:	d010      	beq.n	800a8ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	691a      	ldr	r2, [r3, #16]
 800a89c:	4b7b      	ldr	r3, [pc, #492]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d908      	bls.n	800a8ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a8a8:	4b78      	ldr	r3, [pc, #480]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a8aa:	699b      	ldr	r3, [r3, #24]
 800a8ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	4975      	ldr	r1, [pc, #468]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0308 	and.w	r3, r3, #8
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d010      	beq.n	800a8e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	695a      	ldr	r2, [r3, #20]
 800a8ca:	4b70      	ldr	r3, [pc, #448]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a8cc:	69db      	ldr	r3, [r3, #28]
 800a8ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d908      	bls.n	800a8e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8d6:	4b6d      	ldr	r3, [pc, #436]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a8d8:	69db      	ldr	r3, [r3, #28]
 800a8da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	496a      	ldr	r1, [pc, #424]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0310 	and.w	r3, r3, #16
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d010      	beq.n	800a916 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	699a      	ldr	r2, [r3, #24]
 800a8f8:	4b64      	ldr	r3, [pc, #400]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a8fa:	69db      	ldr	r3, [r3, #28]
 800a8fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a900:	429a      	cmp	r2, r3
 800a902:	d908      	bls.n	800a916 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a904:	4b61      	ldr	r3, [pc, #388]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a906:	69db      	ldr	r3, [r3, #28]
 800a908:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	699b      	ldr	r3, [r3, #24]
 800a910:	495e      	ldr	r1, [pc, #376]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a912:	4313      	orrs	r3, r2
 800a914:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0320 	and.w	r3, r3, #32
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d010      	beq.n	800a944 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	69da      	ldr	r2, [r3, #28]
 800a926:	4b59      	ldr	r3, [pc, #356]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a92e:	429a      	cmp	r2, r3
 800a930:	d908      	bls.n	800a944 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a932:	4b56      	ldr	r3, [pc, #344]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	4953      	ldr	r1, [pc, #332]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a940:	4313      	orrs	r3, r2
 800a942:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0302 	and.w	r3, r3, #2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d010      	beq.n	800a972 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	68da      	ldr	r2, [r3, #12]
 800a954:	4b4d      	ldr	r3, [pc, #308]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	f003 030f 	and.w	r3, r3, #15
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d908      	bls.n	800a972 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a960:	4b4a      	ldr	r3, [pc, #296]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	f023 020f 	bic.w	r2, r3, #15
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	4947      	ldr	r1, [pc, #284]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a96e:	4313      	orrs	r3, r2
 800a970:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f003 0301 	and.w	r3, r3, #1
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d055      	beq.n	800aa2a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a97e:	4b43      	ldr	r3, [pc, #268]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	4940      	ldr	r1, [pc, #256]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a98c:	4313      	orrs	r3, r2
 800a98e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	2b02      	cmp	r3, #2
 800a996:	d107      	bne.n	800a9a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a998:	4b3c      	ldr	r3, [pc, #240]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d121      	bne.n	800a9e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e0f6      	b.n	800ab96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	2b03      	cmp	r3, #3
 800a9ae:	d107      	bne.n	800a9c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9b0:	4b36      	ldr	r3, [pc, #216]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d115      	bne.n	800a9e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e0ea      	b.n	800ab96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d107      	bne.n	800a9d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9c8:	4b30      	ldr	r3, [pc, #192]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d109      	bne.n	800a9e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e0de      	b.n	800ab96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9d8:	4b2c      	ldr	r3, [pc, #176]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 0304 	and.w	r3, r3, #4
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e0d6      	b.n	800ab96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a9e8:	4b28      	ldr	r3, [pc, #160]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	f023 0207 	bic.w	r2, r3, #7
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	4925      	ldr	r1, [pc, #148]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9fa:	f7f9 fb33 	bl	8004064 <HAL_GetTick>
 800a9fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa00:	e00a      	b.n	800aa18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa02:	f7f9 fb2f 	bl	8004064 <HAL_GetTick>
 800aa06:	4602      	mov	r2, r0
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d901      	bls.n	800aa18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aa14:	2303      	movs	r3, #3
 800aa16:	e0be      	b.n	800ab96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa18:	4b1c      	ldr	r3, [pc, #112]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	00db      	lsls	r3, r3, #3
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d1eb      	bne.n	800aa02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0302 	and.w	r3, r3, #2
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d010      	beq.n	800aa58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68da      	ldr	r2, [r3, #12]
 800aa3a:	4b14      	ldr	r3, [pc, #80]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	f003 030f 	and.w	r3, r3, #15
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d208      	bcs.n	800aa58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa46:	4b11      	ldr	r3, [pc, #68]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	f023 020f 	bic.w	r2, r3, #15
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	490e      	ldr	r1, [pc, #56]	; (800aa8c <HAL_RCC_ClockConfig+0x244>)
 800aa54:	4313      	orrs	r3, r2
 800aa56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa58:	4b0b      	ldr	r3, [pc, #44]	; (800aa88 <HAL_RCC_ClockConfig+0x240>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 030f 	and.w	r3, r3, #15
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d214      	bcs.n	800aa90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa66:	4b08      	ldr	r3, [pc, #32]	; (800aa88 <HAL_RCC_ClockConfig+0x240>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f023 020f 	bic.w	r2, r3, #15
 800aa6e:	4906      	ldr	r1, [pc, #24]	; (800aa88 <HAL_RCC_ClockConfig+0x240>)
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa76:	4b04      	ldr	r3, [pc, #16]	; (800aa88 <HAL_RCC_ClockConfig+0x240>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 030f 	and.w	r3, r3, #15
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d005      	beq.n	800aa90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e086      	b.n	800ab96 <HAL_RCC_ClockConfig+0x34e>
 800aa88:	52002000 	.word	0x52002000
 800aa8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f003 0304 	and.w	r3, r3, #4
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d010      	beq.n	800aabe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	691a      	ldr	r2, [r3, #16]
 800aaa0:	4b3f      	ldr	r3, [pc, #252]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d208      	bcs.n	800aabe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aaac:	4b3c      	ldr	r3, [pc, #240]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	4939      	ldr	r1, [pc, #228]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800aaba:	4313      	orrs	r3, r2
 800aabc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 0308 	and.w	r3, r3, #8
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d010      	beq.n	800aaec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	695a      	ldr	r2, [r3, #20]
 800aace:	4b34      	ldr	r3, [pc, #208]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800aad0:	69db      	ldr	r3, [r3, #28]
 800aad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d208      	bcs.n	800aaec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aada:	4b31      	ldr	r3, [pc, #196]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800aadc:	69db      	ldr	r3, [r3, #28]
 800aade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	695b      	ldr	r3, [r3, #20]
 800aae6:	492e      	ldr	r1, [pc, #184]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800aae8:	4313      	orrs	r3, r2
 800aaea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 0310 	and.w	r3, r3, #16
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d010      	beq.n	800ab1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	699a      	ldr	r2, [r3, #24]
 800aafc:	4b28      	ldr	r3, [pc, #160]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800aafe:	69db      	ldr	r3, [r3, #28]
 800ab00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d208      	bcs.n	800ab1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab08:	4b25      	ldr	r3, [pc, #148]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800ab0a:	69db      	ldr	r3, [r3, #28]
 800ab0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	4922      	ldr	r1, [pc, #136]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800ab16:	4313      	orrs	r3, r2
 800ab18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 0320 	and.w	r3, r3, #32
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d010      	beq.n	800ab48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	69da      	ldr	r2, [r3, #28]
 800ab2a:	4b1d      	ldr	r3, [pc, #116]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d208      	bcs.n	800ab48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ab36:	4b1a      	ldr	r3, [pc, #104]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	69db      	ldr	r3, [r3, #28]
 800ab42:	4917      	ldr	r1, [pc, #92]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800ab44:	4313      	orrs	r3, r2
 800ab46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ab48:	f000 f834 	bl	800abb4 <HAL_RCC_GetSysClockFreq>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	4b14      	ldr	r3, [pc, #80]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800ab50:	699b      	ldr	r3, [r3, #24]
 800ab52:	0a1b      	lsrs	r3, r3, #8
 800ab54:	f003 030f 	and.w	r3, r3, #15
 800ab58:	4912      	ldr	r1, [pc, #72]	; (800aba4 <HAL_RCC_ClockConfig+0x35c>)
 800ab5a:	5ccb      	ldrb	r3, [r1, r3]
 800ab5c:	f003 031f 	and.w	r3, r3, #31
 800ab60:	fa22 f303 	lsr.w	r3, r2, r3
 800ab64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab66:	4b0e      	ldr	r3, [pc, #56]	; (800aba0 <HAL_RCC_ClockConfig+0x358>)
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	f003 030f 	and.w	r3, r3, #15
 800ab6e:	4a0d      	ldr	r2, [pc, #52]	; (800aba4 <HAL_RCC_ClockConfig+0x35c>)
 800ab70:	5cd3      	ldrb	r3, [r2, r3]
 800ab72:	f003 031f 	and.w	r3, r3, #31
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	fa22 f303 	lsr.w	r3, r2, r3
 800ab7c:	4a0a      	ldr	r2, [pc, #40]	; (800aba8 <HAL_RCC_ClockConfig+0x360>)
 800ab7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab80:	4a0a      	ldr	r2, [pc, #40]	; (800abac <HAL_RCC_ClockConfig+0x364>)
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ab86:	4b0a      	ldr	r3, [pc, #40]	; (800abb0 <HAL_RCC_ClockConfig+0x368>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7f8 f930 	bl	8002df0 <HAL_InitTick>
 800ab90:	4603      	mov	r3, r0
 800ab92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ab94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3718      	adds	r7, #24
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	58024400 	.word	0x58024400
 800aba4:	08017528 	.word	0x08017528
 800aba8:	24000090 	.word	0x24000090
 800abac:	2400008c 	.word	0x2400008c
 800abb0:	24000094 	.word	0x24000094

0800abb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b089      	sub	sp, #36	; 0x24
 800abb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800abba:	4bb3      	ldr	r3, [pc, #716]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abc2:	2b18      	cmp	r3, #24
 800abc4:	f200 8155 	bhi.w	800ae72 <HAL_RCC_GetSysClockFreq+0x2be>
 800abc8:	a201      	add	r2, pc, #4	; (adr r2, 800abd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800abca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abce:	bf00      	nop
 800abd0:	0800ac35 	.word	0x0800ac35
 800abd4:	0800ae73 	.word	0x0800ae73
 800abd8:	0800ae73 	.word	0x0800ae73
 800abdc:	0800ae73 	.word	0x0800ae73
 800abe0:	0800ae73 	.word	0x0800ae73
 800abe4:	0800ae73 	.word	0x0800ae73
 800abe8:	0800ae73 	.word	0x0800ae73
 800abec:	0800ae73 	.word	0x0800ae73
 800abf0:	0800ac5b 	.word	0x0800ac5b
 800abf4:	0800ae73 	.word	0x0800ae73
 800abf8:	0800ae73 	.word	0x0800ae73
 800abfc:	0800ae73 	.word	0x0800ae73
 800ac00:	0800ae73 	.word	0x0800ae73
 800ac04:	0800ae73 	.word	0x0800ae73
 800ac08:	0800ae73 	.word	0x0800ae73
 800ac0c:	0800ae73 	.word	0x0800ae73
 800ac10:	0800ac61 	.word	0x0800ac61
 800ac14:	0800ae73 	.word	0x0800ae73
 800ac18:	0800ae73 	.word	0x0800ae73
 800ac1c:	0800ae73 	.word	0x0800ae73
 800ac20:	0800ae73 	.word	0x0800ae73
 800ac24:	0800ae73 	.word	0x0800ae73
 800ac28:	0800ae73 	.word	0x0800ae73
 800ac2c:	0800ae73 	.word	0x0800ae73
 800ac30:	0800ac67 	.word	0x0800ac67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac34:	4b94      	ldr	r3, [pc, #592]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 0320 	and.w	r3, r3, #32
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d009      	beq.n	800ac54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac40:	4b91      	ldr	r3, [pc, #580]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	08db      	lsrs	r3, r3, #3
 800ac46:	f003 0303 	and.w	r3, r3, #3
 800ac4a:	4a90      	ldr	r2, [pc, #576]	; (800ae8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac4c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ac52:	e111      	b.n	800ae78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ac54:	4b8d      	ldr	r3, [pc, #564]	; (800ae8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac56:	61bb      	str	r3, [r7, #24]
      break;
 800ac58:	e10e      	b.n	800ae78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ac5a:	4b8d      	ldr	r3, [pc, #564]	; (800ae90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac5c:	61bb      	str	r3, [r7, #24]
      break;
 800ac5e:	e10b      	b.n	800ae78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ac60:	4b8c      	ldr	r3, [pc, #560]	; (800ae94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ac62:	61bb      	str	r3, [r7, #24]
      break;
 800ac64:	e108      	b.n	800ae78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac66:	4b88      	ldr	r3, [pc, #544]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6a:	f003 0303 	and.w	r3, r3, #3
 800ac6e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ac70:	4b85      	ldr	r3, [pc, #532]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac74:	091b      	lsrs	r3, r3, #4
 800ac76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac7a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ac7c:	4b82      	ldr	r3, [pc, #520]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	f003 0301 	and.w	r3, r3, #1
 800ac84:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac86:	4b80      	ldr	r3, [pc, #512]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8a:	08db      	lsrs	r3, r3, #3
 800ac8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	fb02 f303 	mul.w	r3, r2, r3
 800ac96:	ee07 3a90 	vmov	s15, r3
 800ac9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f000 80e1 	beq.w	800ae6c <HAL_RCC_GetSysClockFreq+0x2b8>
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b02      	cmp	r3, #2
 800acae:	f000 8083 	beq.w	800adb8 <HAL_RCC_GetSysClockFreq+0x204>
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	f200 80a1 	bhi.w	800adfc <HAL_RCC_GetSysClockFreq+0x248>
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d003      	beq.n	800acc8 <HAL_RCC_GetSysClockFreq+0x114>
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d056      	beq.n	800ad74 <HAL_RCC_GetSysClockFreq+0x1c0>
 800acc6:	e099      	b.n	800adfc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acc8:	4b6f      	ldr	r3, [pc, #444]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 0320 	and.w	r3, r3, #32
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d02d      	beq.n	800ad30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acd4:	4b6c      	ldr	r3, [pc, #432]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	08db      	lsrs	r3, r3, #3
 800acda:	f003 0303 	and.w	r3, r3, #3
 800acde:	4a6b      	ldr	r2, [pc, #428]	; (800ae8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ace0:	fa22 f303 	lsr.w	r3, r2, r3
 800ace4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	ee07 3a90 	vmov	s15, r3
 800acec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	ee07 3a90 	vmov	s15, r3
 800acf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfe:	4b62      	ldr	r3, [pc, #392]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad12:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ae98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ad2e:	e087      	b.n	800ae40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ae9c <HAL_RCC_GetSysClockFreq+0x2e8>
 800ad3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad42:	4b51      	ldr	r3, [pc, #324]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad52:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad56:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ae98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad72:	e065      	b.n	800ae40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aea0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad86:	4b40      	ldr	r3, [pc, #256]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad96:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ae98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adb6:	e043      	b.n	800ae40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	ee07 3a90 	vmov	s15, r3
 800adbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aea4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800adc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adca:	4b2f      	ldr	r3, [pc, #188]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adda:	ed97 6a02 	vldr	s12, [r7, #8]
 800adde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ae98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ade2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ade6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adfa:	e021      	b.n	800ae40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	ee07 3a90 	vmov	s15, r3
 800ae02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae06:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aea0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae0e:	4b1e      	ldr	r3, [pc, #120]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ae98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ae40:	4b11      	ldr	r3, [pc, #68]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae44:	0a5b      	lsrs	r3, r3, #9
 800ae46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	ee07 3a90 	vmov	s15, r3
 800ae54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae58:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae64:	ee17 3a90 	vmov	r3, s15
 800ae68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ae6a:	e005      	b.n	800ae78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	61bb      	str	r3, [r7, #24]
      break;
 800ae70:	e002      	b.n	800ae78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ae72:	4b07      	ldr	r3, [pc, #28]	; (800ae90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae74:	61bb      	str	r3, [r7, #24]
      break;
 800ae76:	bf00      	nop
  }

  return sysclockfreq;
 800ae78:	69bb      	ldr	r3, [r7, #24]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3724      	adds	r7, #36	; 0x24
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	58024400 	.word	0x58024400
 800ae8c:	03d09000 	.word	0x03d09000
 800ae90:	003d0900 	.word	0x003d0900
 800ae94:	017d7840 	.word	0x017d7840
 800ae98:	46000000 	.word	0x46000000
 800ae9c:	4c742400 	.word	0x4c742400
 800aea0:	4a742400 	.word	0x4a742400
 800aea4:	4bbebc20 	.word	0x4bbebc20

0800aea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aeae:	f7ff fe81 	bl	800abb4 <HAL_RCC_GetSysClockFreq>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	4b10      	ldr	r3, [pc, #64]	; (800aef8 <HAL_RCC_GetHCLKFreq+0x50>)
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	0a1b      	lsrs	r3, r3, #8
 800aeba:	f003 030f 	and.w	r3, r3, #15
 800aebe:	490f      	ldr	r1, [pc, #60]	; (800aefc <HAL_RCC_GetHCLKFreq+0x54>)
 800aec0:	5ccb      	ldrb	r3, [r1, r3]
 800aec2:	f003 031f 	and.w	r3, r3, #31
 800aec6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aecc:	4b0a      	ldr	r3, [pc, #40]	; (800aef8 <HAL_RCC_GetHCLKFreq+0x50>)
 800aece:	699b      	ldr	r3, [r3, #24]
 800aed0:	f003 030f 	and.w	r3, r3, #15
 800aed4:	4a09      	ldr	r2, [pc, #36]	; (800aefc <HAL_RCC_GetHCLKFreq+0x54>)
 800aed6:	5cd3      	ldrb	r3, [r2, r3]
 800aed8:	f003 031f 	and.w	r3, r3, #31
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	fa22 f303 	lsr.w	r3, r2, r3
 800aee2:	4a07      	ldr	r2, [pc, #28]	; (800af00 <HAL_RCC_GetHCLKFreq+0x58>)
 800aee4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aee6:	4a07      	ldr	r2, [pc, #28]	; (800af04 <HAL_RCC_GetHCLKFreq+0x5c>)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aeec:	4b04      	ldr	r3, [pc, #16]	; (800af00 <HAL_RCC_GetHCLKFreq+0x58>)
 800aeee:	681b      	ldr	r3, [r3, #0]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	58024400 	.word	0x58024400
 800aefc:	08017528 	.word	0x08017528
 800af00:	24000090 	.word	0x24000090
 800af04:	2400008c 	.word	0x2400008c

0800af08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800af0c:	f7ff ffcc 	bl	800aea8 <HAL_RCC_GetHCLKFreq>
 800af10:	4602      	mov	r2, r0
 800af12:	4b06      	ldr	r3, [pc, #24]	; (800af2c <HAL_RCC_GetPCLK1Freq+0x24>)
 800af14:	69db      	ldr	r3, [r3, #28]
 800af16:	091b      	lsrs	r3, r3, #4
 800af18:	f003 0307 	and.w	r3, r3, #7
 800af1c:	4904      	ldr	r1, [pc, #16]	; (800af30 <HAL_RCC_GetPCLK1Freq+0x28>)
 800af1e:	5ccb      	ldrb	r3, [r1, r3]
 800af20:	f003 031f 	and.w	r3, r3, #31
 800af24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800af28:	4618      	mov	r0, r3
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	58024400 	.word	0x58024400
 800af30:	08017528 	.word	0x08017528

0800af34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800af38:	f7ff ffb6 	bl	800aea8 <HAL_RCC_GetHCLKFreq>
 800af3c:	4602      	mov	r2, r0
 800af3e:	4b06      	ldr	r3, [pc, #24]	; (800af58 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af40:	69db      	ldr	r3, [r3, #28]
 800af42:	0a1b      	lsrs	r3, r3, #8
 800af44:	f003 0307 	and.w	r3, r3, #7
 800af48:	4904      	ldr	r1, [pc, #16]	; (800af5c <HAL_RCC_GetPCLK2Freq+0x28>)
 800af4a:	5ccb      	ldrb	r3, [r1, r3]
 800af4c:	f003 031f 	and.w	r3, r3, #31
 800af50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800af54:	4618      	mov	r0, r3
 800af56:	bd80      	pop	{r7, pc}
 800af58:	58024400 	.word	0x58024400
 800af5c:	08017528 	.word	0x08017528

0800af60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	223f      	movs	r2, #63	; 0x3f
 800af6e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800af70:	4b1a      	ldr	r3, [pc, #104]	; (800afdc <HAL_RCC_GetClockConfig+0x7c>)
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	f003 0207 	and.w	r2, r3, #7
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800af7c:	4b17      	ldr	r3, [pc, #92]	; (800afdc <HAL_RCC_GetClockConfig+0x7c>)
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800af88:	4b14      	ldr	r3, [pc, #80]	; (800afdc <HAL_RCC_GetClockConfig+0x7c>)
 800af8a:	699b      	ldr	r3, [r3, #24]
 800af8c:	f003 020f 	and.w	r2, r3, #15
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800af94:	4b11      	ldr	r3, [pc, #68]	; (800afdc <HAL_RCC_GetClockConfig+0x7c>)
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800afa0:	4b0e      	ldr	r3, [pc, #56]	; (800afdc <HAL_RCC_GetClockConfig+0x7c>)
 800afa2:	69db      	ldr	r3, [r3, #28]
 800afa4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800afac:	4b0b      	ldr	r3, [pc, #44]	; (800afdc <HAL_RCC_GetClockConfig+0x7c>)
 800afae:	69db      	ldr	r3, [r3, #28]
 800afb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800afb8:	4b08      	ldr	r3, [pc, #32]	; (800afdc <HAL_RCC_GetClockConfig+0x7c>)
 800afba:	6a1b      	ldr	r3, [r3, #32]
 800afbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800afc4:	4b06      	ldr	r3, [pc, #24]	; (800afe0 <HAL_RCC_GetClockConfig+0x80>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 020f 	and.w	r2, r3, #15
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	601a      	str	r2, [r3, #0]
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	58024400 	.word	0x58024400
 800afe0:	52002000 	.word	0x52002000

0800afe4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afe8:	b0ca      	sub	sp, #296	; 0x128
 800afea:	af00      	add	r7, sp, #0
 800afec:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aff0:	2300      	movs	r3, #0
 800aff2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aff6:	2300      	movs	r3, #0
 800aff8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800affc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b004:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b008:	2500      	movs	r5, #0
 800b00a:	ea54 0305 	orrs.w	r3, r4, r5
 800b00e:	d049      	beq.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b016:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b01a:	d02f      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b01c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b020:	d828      	bhi.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b022:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b026:	d01a      	beq.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b028:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b02c:	d822      	bhi.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d003      	beq.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b036:	d007      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b038:	e01c      	b.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b03a:	4bb8      	ldr	r3, [pc, #736]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03e:	4ab7      	ldr	r2, [pc, #732]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b046:	e01a      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b04c:	3308      	adds	r3, #8
 800b04e:	2102      	movs	r1, #2
 800b050:	4618      	mov	r0, r3
 800b052:	f002 fb61 	bl	800d718 <RCCEx_PLL2_Config>
 800b056:	4603      	mov	r3, r0
 800b058:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b05c:	e00f      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b062:	3328      	adds	r3, #40	; 0x28
 800b064:	2102      	movs	r1, #2
 800b066:	4618      	mov	r0, r3
 800b068:	f002 fc08 	bl	800d87c <RCCEx_PLL3_Config>
 800b06c:	4603      	mov	r3, r0
 800b06e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b072:	e004      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b07a:	e000      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b07c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b07e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b082:	2b00      	cmp	r3, #0
 800b084:	d10a      	bne.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b086:	4ba5      	ldr	r3, [pc, #660]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b08a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b094:	4aa1      	ldr	r2, [pc, #644]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b096:	430b      	orrs	r3, r1
 800b098:	6513      	str	r3, [r2, #80]	; 0x50
 800b09a:	e003      	b.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b09c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b0a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b0b0:	f04f 0900 	mov.w	r9, #0
 800b0b4:	ea58 0309 	orrs.w	r3, r8, r9
 800b0b8:	d047      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b0ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0c0:	2b04      	cmp	r3, #4
 800b0c2:	d82a      	bhi.n	800b11a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b0c4:	a201      	add	r2, pc, #4	; (adr r2, 800b0cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ca:	bf00      	nop
 800b0cc:	0800b0e1 	.word	0x0800b0e1
 800b0d0:	0800b0ef 	.word	0x0800b0ef
 800b0d4:	0800b105 	.word	0x0800b105
 800b0d8:	0800b123 	.word	0x0800b123
 800b0dc:	0800b123 	.word	0x0800b123
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0e0:	4b8e      	ldr	r3, [pc, #568]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e4:	4a8d      	ldr	r2, [pc, #564]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0ec:	e01a      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f2:	3308      	adds	r3, #8
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f002 fb0e 	bl	800d718 <RCCEx_PLL2_Config>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b102:	e00f      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b108:	3328      	adds	r3, #40	; 0x28
 800b10a:	2100      	movs	r1, #0
 800b10c:	4618      	mov	r0, r3
 800b10e:	f002 fbb5 	bl	800d87c <RCCEx_PLL3_Config>
 800b112:	4603      	mov	r3, r0
 800b114:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b118:	e004      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b120:	e000      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b122:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10a      	bne.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b12c:	4b7b      	ldr	r3, [pc, #492]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b130:	f023 0107 	bic.w	r1, r3, #7
 800b134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b13a:	4a78      	ldr	r2, [pc, #480]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b13c:	430b      	orrs	r3, r1
 800b13e:	6513      	str	r3, [r2, #80]	; 0x50
 800b140:	e003      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b142:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b146:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b152:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b156:	f04f 0b00 	mov.w	fp, #0
 800b15a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b15e:	d04c      	beq.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b16a:	d030      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b16c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b170:	d829      	bhi.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b172:	2bc0      	cmp	r3, #192	; 0xc0
 800b174:	d02d      	beq.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b176:	2bc0      	cmp	r3, #192	; 0xc0
 800b178:	d825      	bhi.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b17a:	2b80      	cmp	r3, #128	; 0x80
 800b17c:	d018      	beq.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b17e:	2b80      	cmp	r3, #128	; 0x80
 800b180:	d821      	bhi.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b182:	2b00      	cmp	r3, #0
 800b184:	d002      	beq.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b186:	2b40      	cmp	r3, #64	; 0x40
 800b188:	d007      	beq.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b18a:	e01c      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b18c:	4b63      	ldr	r3, [pc, #396]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b190:	4a62      	ldr	r2, [pc, #392]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b198:	e01c      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b19e:	3308      	adds	r3, #8
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f002 fab8 	bl	800d718 <RCCEx_PLL2_Config>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b1ae:	e011      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b4:	3328      	adds	r3, #40	; 0x28
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f002 fb5f 	bl	800d87c <RCCEx_PLL3_Config>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b1c4:	e006      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1cc:	e002      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b1ce:	bf00      	nop
 800b1d0:	e000      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b1d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10a      	bne.n	800b1f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b1dc:	4b4f      	ldr	r3, [pc, #316]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1ea:	4a4c      	ldr	r2, [pc, #304]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b1ec:	430b      	orrs	r3, r1
 800b1ee:	6513      	str	r3, [r2, #80]	; 0x50
 800b1f0:	e003      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b202:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b206:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b20a:	2300      	movs	r3, #0
 800b20c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b210:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b214:	460b      	mov	r3, r1
 800b216:	4313      	orrs	r3, r2
 800b218:	d053      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b21e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b222:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b226:	d035      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b228:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b22c:	d82e      	bhi.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b22e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b232:	d031      	beq.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b234:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b238:	d828      	bhi.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b23a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b23e:	d01a      	beq.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b244:	d822      	bhi.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b246:	2b00      	cmp	r3, #0
 800b248:	d003      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b24a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b24e:	d007      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b250:	e01c      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b252:	4b32      	ldr	r3, [pc, #200]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b256:	4a31      	ldr	r2, [pc, #196]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b25c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b25e:	e01c      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b264:	3308      	adds	r3, #8
 800b266:	2100      	movs	r1, #0
 800b268:	4618      	mov	r0, r3
 800b26a:	f002 fa55 	bl	800d718 <RCCEx_PLL2_Config>
 800b26e:	4603      	mov	r3, r0
 800b270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b274:	e011      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b27a:	3328      	adds	r3, #40	; 0x28
 800b27c:	2100      	movs	r1, #0
 800b27e:	4618      	mov	r0, r3
 800b280:	f002 fafc 	bl	800d87c <RCCEx_PLL3_Config>
 800b284:	4603      	mov	r3, r0
 800b286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b28a:	e006      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b292:	e002      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b294:	bf00      	nop
 800b296:	e000      	b.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b29a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10b      	bne.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b2a2:	4b1e      	ldr	r3, [pc, #120]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2a6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b2aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2b2:	4a1a      	ldr	r2, [pc, #104]	; (800b31c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2b4:	430b      	orrs	r3, r1
 800b2b6:	6593      	str	r3, [r2, #88]	; 0x58
 800b2b8:	e003      	b.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ca:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b2ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b2d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b2dc:	460b      	mov	r3, r1
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	d056      	beq.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b2e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b2ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2ee:	d038      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b2f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2f4:	d831      	bhi.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2fa:	d034      	beq.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b2fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b300:	d82b      	bhi.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b306:	d01d      	beq.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b30c:	d825      	bhi.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d006      	beq.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b312:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b316:	d00a      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b318:	e01f      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b31a:	bf00      	nop
 800b31c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b320:	4ba2      	ldr	r3, [pc, #648]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b324:	4aa1      	ldr	r2, [pc, #644]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b32a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b32c:	e01c      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b32e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b332:	3308      	adds	r3, #8
 800b334:	2100      	movs	r1, #0
 800b336:	4618      	mov	r0, r3
 800b338:	f002 f9ee 	bl	800d718 <RCCEx_PLL2_Config>
 800b33c:	4603      	mov	r3, r0
 800b33e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b342:	e011      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b348:	3328      	adds	r3, #40	; 0x28
 800b34a:	2100      	movs	r1, #0
 800b34c:	4618      	mov	r0, r3
 800b34e:	f002 fa95 	bl	800d87c <RCCEx_PLL3_Config>
 800b352:	4603      	mov	r3, r0
 800b354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b358:	e006      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b360:	e002      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b362:	bf00      	nop
 800b364:	e000      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b366:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d10b      	bne.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b370:	4b8e      	ldr	r3, [pc, #568]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b374:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b37c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b380:	4a8a      	ldr	r2, [pc, #552]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b382:	430b      	orrs	r3, r1
 800b384:	6593      	str	r3, [r2, #88]	; 0x58
 800b386:	e003      	b.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b388:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b38c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b398:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b39c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b3a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	d03a      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3b6:	2b30      	cmp	r3, #48	; 0x30
 800b3b8:	d01f      	beq.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b3ba:	2b30      	cmp	r3, #48	; 0x30
 800b3bc:	d819      	bhi.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b3be:	2b20      	cmp	r3, #32
 800b3c0:	d00c      	beq.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b3c2:	2b20      	cmp	r3, #32
 800b3c4:	d815      	bhi.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d019      	beq.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b3ca:	2b10      	cmp	r3, #16
 800b3cc:	d111      	bne.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3ce:	4b77      	ldr	r3, [pc, #476]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d2:	4a76      	ldr	r2, [pc, #472]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b3da:	e011      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b3dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	2102      	movs	r1, #2
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f002 f997 	bl	800d718 <RCCEx_PLL2_Config>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b3f0:	e006      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3f8:	e002      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b3fa:	bf00      	nop
 800b3fc:	e000      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b3fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b400:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b404:	2b00      	cmp	r3, #0
 800b406:	d10a      	bne.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b408:	4b68      	ldr	r3, [pc, #416]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b40a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b40c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b410:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b416:	4a65      	ldr	r2, [pc, #404]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b418:	430b      	orrs	r3, r1
 800b41a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b41c:	e003      	b.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b41e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b422:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b432:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b436:	2300      	movs	r3, #0
 800b438:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b43c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b440:	460b      	mov	r3, r1
 800b442:	4313      	orrs	r3, r2
 800b444:	d051      	beq.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b44a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b44c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b450:	d035      	beq.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b456:	d82e      	bhi.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b458:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b45c:	d031      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b45e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b462:	d828      	bhi.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b468:	d01a      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b46a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b46e:	d822      	bhi.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b478:	d007      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b47a:	e01c      	b.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b47c:	4b4b      	ldr	r3, [pc, #300]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b480:	4a4a      	ldr	r2, [pc, #296]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b486:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b488:	e01c      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b48a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48e:	3308      	adds	r3, #8
 800b490:	2100      	movs	r1, #0
 800b492:	4618      	mov	r0, r3
 800b494:	f002 f940 	bl	800d718 <RCCEx_PLL2_Config>
 800b498:	4603      	mov	r3, r0
 800b49a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b49e:	e011      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a4:	3328      	adds	r3, #40	; 0x28
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f002 f9e7 	bl	800d87c <RCCEx_PLL3_Config>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b4b4:	e006      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4bc:	e002      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b4be:	bf00      	nop
 800b4c0:	e000      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b4c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10a      	bne.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b4cc:	4b37      	ldr	r3, [pc, #220]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4d0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4da:	4a34      	ldr	r2, [pc, #208]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b4dc:	430b      	orrs	r3, r1
 800b4de:	6513      	str	r3, [r2, #80]	; 0x50
 800b4e0:	e003      	b.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b4ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b4f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b500:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b504:	460b      	mov	r3, r1
 800b506:	4313      	orrs	r3, r2
 800b508:	d056      	beq.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b50a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b50e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b510:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b514:	d033      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b516:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b51a:	d82c      	bhi.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b51c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b520:	d02f      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b522:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b526:	d826      	bhi.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b528:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b52c:	d02b      	beq.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b52e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b532:	d820      	bhi.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b534:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b538:	d012      	beq.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b53a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b53e:	d81a      	bhi.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b540:	2b00      	cmp	r3, #0
 800b542:	d022      	beq.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b548:	d115      	bne.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b54e:	3308      	adds	r3, #8
 800b550:	2101      	movs	r1, #1
 800b552:	4618      	mov	r0, r3
 800b554:	f002 f8e0 	bl	800d718 <RCCEx_PLL2_Config>
 800b558:	4603      	mov	r3, r0
 800b55a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b55e:	e015      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b564:	3328      	adds	r3, #40	; 0x28
 800b566:	2101      	movs	r1, #1
 800b568:	4618      	mov	r0, r3
 800b56a:	f002 f987 	bl	800d87c <RCCEx_PLL3_Config>
 800b56e:	4603      	mov	r3, r0
 800b570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b574:	e00a      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b576:	2301      	movs	r3, #1
 800b578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b57c:	e006      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b57e:	bf00      	nop
 800b580:	e004      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b582:	bf00      	nop
 800b584:	e002      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b586:	bf00      	nop
 800b588:	e000      	b.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b58a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b58c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10d      	bne.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b594:	4b05      	ldr	r3, [pc, #20]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b598:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5a2:	4a02      	ldr	r2, [pc, #8]	; (800b5ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b5a4:	430b      	orrs	r3, r1
 800b5a6:	6513      	str	r3, [r2, #80]	; 0x50
 800b5a8:	e006      	b.n	800b5b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b5aa:	bf00      	nop
 800b5ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b5c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b5ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	d055      	beq.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b5d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5e4:	d033      	beq.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b5e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5ea:	d82c      	bhi.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5f0:	d02f      	beq.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b5f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5f6:	d826      	bhi.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5fc:	d02b      	beq.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b5fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b602:	d820      	bhi.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b608:	d012      	beq.n	800b630 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b60a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b60e:	d81a      	bhi.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b610:	2b00      	cmp	r3, #0
 800b612:	d022      	beq.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b618:	d115      	bne.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b61e:	3308      	adds	r3, #8
 800b620:	2101      	movs	r1, #1
 800b622:	4618      	mov	r0, r3
 800b624:	f002 f878 	bl	800d718 <RCCEx_PLL2_Config>
 800b628:	4603      	mov	r3, r0
 800b62a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b62e:	e015      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b634:	3328      	adds	r3, #40	; 0x28
 800b636:	2101      	movs	r1, #1
 800b638:	4618      	mov	r0, r3
 800b63a:	f002 f91f 	bl	800d87c <RCCEx_PLL3_Config>
 800b63e:	4603      	mov	r3, r0
 800b640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b644:	e00a      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b64c:	e006      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b64e:	bf00      	nop
 800b650:	e004      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b652:	bf00      	nop
 800b654:	e002      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b656:	bf00      	nop
 800b658:	e000      	b.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b65a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b65c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b660:	2b00      	cmp	r3, #0
 800b662:	d10b      	bne.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b664:	4ba3      	ldr	r3, [pc, #652]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b668:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b66c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b674:	4a9f      	ldr	r2, [pc, #636]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b676:	430b      	orrs	r3, r1
 800b678:	6593      	str	r3, [r2, #88]	; 0x58
 800b67a:	e003      	b.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b67c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b680:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b694:	2300      	movs	r3, #0
 800b696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b69a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b69e:	460b      	mov	r3, r1
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	d037      	beq.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b6a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6ae:	d00e      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b6b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6b4:	d816      	bhi.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d018      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b6ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6be:	d111      	bne.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6c0:	4b8c      	ldr	r3, [pc, #560]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c4:	4a8b      	ldr	r2, [pc, #556]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b6cc:	e00f      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d2:	3308      	adds	r3, #8
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f002 f81e 	bl	800d718 <RCCEx_PLL2_Config>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b6e2:	e004      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6ea:	e000      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b6ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10a      	bne.n	800b70c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b6f6:	4b7f      	ldr	r3, [pc, #508]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6fa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b6fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b704:	4a7b      	ldr	r2, [pc, #492]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b706:	430b      	orrs	r3, r1
 800b708:	6513      	str	r3, [r2, #80]	; 0x50
 800b70a:	e003      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b70c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b710:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b724:	2300      	movs	r3, #0
 800b726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b72a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b72e:	460b      	mov	r3, r1
 800b730:	4313      	orrs	r3, r2
 800b732:	d039      	beq.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d81c      	bhi.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b73e:	a201      	add	r2, pc, #4	; (adr r2, 800b744 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b744:	0800b781 	.word	0x0800b781
 800b748:	0800b755 	.word	0x0800b755
 800b74c:	0800b763 	.word	0x0800b763
 800b750:	0800b781 	.word	0x0800b781
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b754:	4b67      	ldr	r3, [pc, #412]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b758:	4a66      	ldr	r2, [pc, #408]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b75a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b75e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b760:	e00f      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b766:	3308      	adds	r3, #8
 800b768:	2102      	movs	r1, #2
 800b76a:	4618      	mov	r0, r3
 800b76c:	f001 ffd4 	bl	800d718 <RCCEx_PLL2_Config>
 800b770:	4603      	mov	r3, r0
 800b772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b776:	e004      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b77e:	e000      	b.n	800b782 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b780:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10a      	bne.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b78a:	4b5a      	ldr	r3, [pc, #360]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b78c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b78e:	f023 0103 	bic.w	r1, r3, #3
 800b792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b798:	4a56      	ldr	r2, [pc, #344]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b79a:	430b      	orrs	r3, r1
 800b79c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b79e:	e003      	b.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b7b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b7be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	f000 809f 	beq.w	800b908 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b7ca:	4b4b      	ldr	r3, [pc, #300]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a4a      	ldr	r2, [pc, #296]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b7d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b7d6:	f7f8 fc45 	bl	8004064 <HAL_GetTick>
 800b7da:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7de:	e00b      	b.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7e0:	f7f8 fc40 	bl	8004064 <HAL_GetTick>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b7ea:	1ad3      	subs	r3, r2, r3
 800b7ec:	2b64      	cmp	r3, #100	; 0x64
 800b7ee:	d903      	bls.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7f6:	e005      	b.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7f8:	4b3f      	ldr	r3, [pc, #252]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b800:	2b00      	cmp	r3, #0
 800b802:	d0ed      	beq.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b804:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d179      	bne.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b80c:	4b39      	ldr	r3, [pc, #228]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b80e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b814:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b818:	4053      	eors	r3, r2
 800b81a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d015      	beq.n	800b84e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b822:	4b34      	ldr	r3, [pc, #208]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b82a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b82e:	4b31      	ldr	r3, [pc, #196]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b832:	4a30      	ldr	r2, [pc, #192]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b838:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b83a:	4b2e      	ldr	r3, [pc, #184]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b83c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b83e:	4a2d      	ldr	r2, [pc, #180]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b844:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b846:	4a2b      	ldr	r2, [pc, #172]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b848:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b84c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b84e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b852:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b85a:	d118      	bne.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b85c:	f7f8 fc02 	bl	8004064 <HAL_GetTick>
 800b860:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b864:	e00d      	b.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b866:	f7f8 fbfd 	bl	8004064 <HAL_GetTick>
 800b86a:	4602      	mov	r2, r0
 800b86c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b870:	1ad2      	subs	r2, r2, r3
 800b872:	f241 3388 	movw	r3, #5000	; 0x1388
 800b876:	429a      	cmp	r2, r3
 800b878:	d903      	bls.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b87a:	2303      	movs	r3, #3
 800b87c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b880:	e005      	b.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b882:	4b1c      	ldr	r3, [pc, #112]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b886:	f003 0302 	and.w	r3, r3, #2
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d0eb      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b88e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b892:	2b00      	cmp	r3, #0
 800b894:	d129      	bne.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b89e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b8a6:	d10e      	bne.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b8a8:	4b12      	ldr	r3, [pc, #72]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8aa:	691b      	ldr	r3, [r3, #16]
 800b8ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b8b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8b8:	091a      	lsrs	r2, r3, #4
 800b8ba:	4b10      	ldr	r3, [pc, #64]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b8bc:	4013      	ands	r3, r2
 800b8be:	4a0d      	ldr	r2, [pc, #52]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8c0:	430b      	orrs	r3, r1
 800b8c2:	6113      	str	r3, [r2, #16]
 800b8c4:	e005      	b.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b8c6:	4b0b      	ldr	r3, [pc, #44]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	4a0a      	ldr	r2, [pc, #40]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b8d0:	6113      	str	r3, [r2, #16]
 800b8d2:	4b08      	ldr	r3, [pc, #32]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b8de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8e2:	4a04      	ldr	r2, [pc, #16]	; (800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b8e4:	430b      	orrs	r3, r1
 800b8e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b8e8:	e00e      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b8f2:	e009      	b.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b8f4:	58024400 	.word	0x58024400
 800b8f8:	58024800 	.word	0x58024800
 800b8fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f002 0301 	and.w	r3, r2, #1
 800b914:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b918:	2300      	movs	r3, #0
 800b91a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b91e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b922:	460b      	mov	r3, r1
 800b924:	4313      	orrs	r3, r2
 800b926:	f000 8089 	beq.w	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b92e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b930:	2b28      	cmp	r3, #40	; 0x28
 800b932:	d86b      	bhi.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b934:	a201      	add	r2, pc, #4	; (adr r2, 800b93c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93a:	bf00      	nop
 800b93c:	0800ba15 	.word	0x0800ba15
 800b940:	0800ba0d 	.word	0x0800ba0d
 800b944:	0800ba0d 	.word	0x0800ba0d
 800b948:	0800ba0d 	.word	0x0800ba0d
 800b94c:	0800ba0d 	.word	0x0800ba0d
 800b950:	0800ba0d 	.word	0x0800ba0d
 800b954:	0800ba0d 	.word	0x0800ba0d
 800b958:	0800ba0d 	.word	0x0800ba0d
 800b95c:	0800b9e1 	.word	0x0800b9e1
 800b960:	0800ba0d 	.word	0x0800ba0d
 800b964:	0800ba0d 	.word	0x0800ba0d
 800b968:	0800ba0d 	.word	0x0800ba0d
 800b96c:	0800ba0d 	.word	0x0800ba0d
 800b970:	0800ba0d 	.word	0x0800ba0d
 800b974:	0800ba0d 	.word	0x0800ba0d
 800b978:	0800ba0d 	.word	0x0800ba0d
 800b97c:	0800b9f7 	.word	0x0800b9f7
 800b980:	0800ba0d 	.word	0x0800ba0d
 800b984:	0800ba0d 	.word	0x0800ba0d
 800b988:	0800ba0d 	.word	0x0800ba0d
 800b98c:	0800ba0d 	.word	0x0800ba0d
 800b990:	0800ba0d 	.word	0x0800ba0d
 800b994:	0800ba0d 	.word	0x0800ba0d
 800b998:	0800ba0d 	.word	0x0800ba0d
 800b99c:	0800ba15 	.word	0x0800ba15
 800b9a0:	0800ba0d 	.word	0x0800ba0d
 800b9a4:	0800ba0d 	.word	0x0800ba0d
 800b9a8:	0800ba0d 	.word	0x0800ba0d
 800b9ac:	0800ba0d 	.word	0x0800ba0d
 800b9b0:	0800ba0d 	.word	0x0800ba0d
 800b9b4:	0800ba0d 	.word	0x0800ba0d
 800b9b8:	0800ba0d 	.word	0x0800ba0d
 800b9bc:	0800ba15 	.word	0x0800ba15
 800b9c0:	0800ba0d 	.word	0x0800ba0d
 800b9c4:	0800ba0d 	.word	0x0800ba0d
 800b9c8:	0800ba0d 	.word	0x0800ba0d
 800b9cc:	0800ba0d 	.word	0x0800ba0d
 800b9d0:	0800ba0d 	.word	0x0800ba0d
 800b9d4:	0800ba0d 	.word	0x0800ba0d
 800b9d8:	0800ba0d 	.word	0x0800ba0d
 800b9dc:	0800ba15 	.word	0x0800ba15
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e4:	3308      	adds	r3, #8
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f001 fe95 	bl	800d718 <RCCEx_PLL2_Config>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b9f4:	e00f      	b.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9fa:	3328      	adds	r3, #40	; 0x28
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f001 ff3c 	bl	800d87c <RCCEx_PLL3_Config>
 800ba04:	4603      	mov	r3, r0
 800ba06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800ba0a:	e004      	b.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba12:	e000      	b.n	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800ba14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10a      	bne.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ba1e:	4bbf      	ldr	r3, [pc, #764]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba22:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800ba26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba2c:	4abb      	ldr	r2, [pc, #748]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba2e:	430b      	orrs	r3, r1
 800ba30:	6553      	str	r3, [r2, #84]	; 0x54
 800ba32:	e003      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ba3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba44:	f002 0302 	and.w	r3, r2, #2
 800ba48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ba52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ba56:	460b      	mov	r3, r1
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	d041      	beq.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ba5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba62:	2b05      	cmp	r3, #5
 800ba64:	d824      	bhi.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800ba66:	a201      	add	r2, pc, #4	; (adr r2, 800ba6c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ba68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6c:	0800bab9 	.word	0x0800bab9
 800ba70:	0800ba85 	.word	0x0800ba85
 800ba74:	0800ba9b 	.word	0x0800ba9b
 800ba78:	0800bab9 	.word	0x0800bab9
 800ba7c:	0800bab9 	.word	0x0800bab9
 800ba80:	0800bab9 	.word	0x0800bab9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba88:	3308      	adds	r3, #8
 800ba8a:	2101      	movs	r1, #1
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f001 fe43 	bl	800d718 <RCCEx_PLL2_Config>
 800ba92:	4603      	mov	r3, r0
 800ba94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ba98:	e00f      	b.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba9e:	3328      	adds	r3, #40	; 0x28
 800baa0:	2101      	movs	r1, #1
 800baa2:	4618      	mov	r0, r3
 800baa4:	f001 feea 	bl	800d87c <RCCEx_PLL3_Config>
 800baa8:	4603      	mov	r3, r0
 800baaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800baae:	e004      	b.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bab6:	e000      	b.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10a      	bne.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bac2:	4b96      	ldr	r3, [pc, #600]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bac6:	f023 0107 	bic.w	r1, r3, #7
 800baca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bace:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bad0:	4a92      	ldr	r2, [pc, #584]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bad2:	430b      	orrs	r3, r1
 800bad4:	6553      	str	r3, [r2, #84]	; 0x54
 800bad6:	e003      	b.n	800bae0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800badc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae8:	f002 0304 	and.w	r3, r2, #4
 800baec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800baf0:	2300      	movs	r3, #0
 800baf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800baf6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bafa:	460b      	mov	r3, r1
 800bafc:	4313      	orrs	r3, r2
 800bafe:	d044      	beq.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bb00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb08:	2b05      	cmp	r3, #5
 800bb0a:	d825      	bhi.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bb0c:	a201      	add	r2, pc, #4	; (adr r2, 800bb14 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb12:	bf00      	nop
 800bb14:	0800bb61 	.word	0x0800bb61
 800bb18:	0800bb2d 	.word	0x0800bb2d
 800bb1c:	0800bb43 	.word	0x0800bb43
 800bb20:	0800bb61 	.word	0x0800bb61
 800bb24:	0800bb61 	.word	0x0800bb61
 800bb28:	0800bb61 	.word	0x0800bb61
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb30:	3308      	adds	r3, #8
 800bb32:	2101      	movs	r1, #1
 800bb34:	4618      	mov	r0, r3
 800bb36:	f001 fdef 	bl	800d718 <RCCEx_PLL2_Config>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb40:	e00f      	b.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb46:	3328      	adds	r3, #40	; 0x28
 800bb48:	2101      	movs	r1, #1
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f001 fe96 	bl	800d87c <RCCEx_PLL3_Config>
 800bb50:	4603      	mov	r3, r0
 800bb52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb56:	e004      	b.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb5e:	e000      	b.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bb60:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10b      	bne.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bb6a:	4b6c      	ldr	r3, [pc, #432]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb6e:	f023 0107 	bic.w	r1, r3, #7
 800bb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb7a:	4a68      	ldr	r2, [pc, #416]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb7c:	430b      	orrs	r3, r1
 800bb7e:	6593      	str	r3, [r2, #88]	; 0x58
 800bb80:	e003      	b.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb92:	f002 0320 	and.w	r3, r2, #32
 800bb96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bba0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bba4:	460b      	mov	r3, r1
 800bba6:	4313      	orrs	r3, r2
 800bba8:	d055      	beq.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbb6:	d033      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bbb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbbc:	d82c      	bhi.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbc2:	d02f      	beq.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bbc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbc8:	d826      	bhi.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbce:	d02b      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bbd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbd4:	d820      	bhi.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbda:	d012      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bbdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbe0:	d81a      	bhi.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d022      	beq.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bbe6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbea:	d115      	bne.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf0:	3308      	adds	r3, #8
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f001 fd8f 	bl	800d718 <RCCEx_PLL2_Config>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bc00:	e015      	b.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc06:	3328      	adds	r3, #40	; 0x28
 800bc08:	2102      	movs	r1, #2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f001 fe36 	bl	800d87c <RCCEx_PLL3_Config>
 800bc10:	4603      	mov	r3, r0
 800bc12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bc16:	e00a      	b.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc1e:	e006      	b.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc20:	bf00      	nop
 800bc22:	e004      	b.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc24:	bf00      	nop
 800bc26:	e002      	b.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc28:	bf00      	nop
 800bc2a:	e000      	b.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bc2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d10b      	bne.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc36:	4b39      	ldr	r3, [pc, #228]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc3a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bc3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc46:	4a35      	ldr	r2, [pc, #212]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bc48:	430b      	orrs	r3, r1
 800bc4a:	6553      	str	r3, [r2, #84]	; 0x54
 800bc4c:	e003      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bc56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bc62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bc66:	2300      	movs	r3, #0
 800bc68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bc6c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bc70:	460b      	mov	r3, r1
 800bc72:	4313      	orrs	r3, r2
 800bc74:	d058      	beq.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bc76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc82:	d033      	beq.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bc84:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc88:	d82c      	bhi.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc8e:	d02f      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bc90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc94:	d826      	bhi.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc9a:	d02b      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bc9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bca0:	d820      	bhi.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bca6:	d012      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcac:	d81a      	bhi.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d022      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bcb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcb6:	d115      	bne.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcbc:	3308      	adds	r3, #8
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f001 fd29 	bl	800d718 <RCCEx_PLL2_Config>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bccc:	e015      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcd2:	3328      	adds	r3, #40	; 0x28
 800bcd4:	2102      	movs	r1, #2
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f001 fdd0 	bl	800d87c <RCCEx_PLL3_Config>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bce2:	e00a      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcea:	e006      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bcec:	bf00      	nop
 800bcee:	e004      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bcf0:	bf00      	nop
 800bcf2:	e002      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bcf4:	bf00      	nop
 800bcf6:	e000      	b.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bcf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10e      	bne.n	800bd20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bd02:	4b06      	ldr	r3, [pc, #24]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd06:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bd0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd12:	4a02      	ldr	r2, [pc, #8]	; (800bd1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bd14:	430b      	orrs	r3, r1
 800bd16:	6593      	str	r3, [r2, #88]	; 0x58
 800bd18:	e006      	b.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bd1a:	bf00      	nop
 800bd1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bd28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bd34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd38:	2300      	movs	r3, #0
 800bd3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bd3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bd42:	460b      	mov	r3, r1
 800bd44:	4313      	orrs	r3, r2
 800bd46:	d055      	beq.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bd48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bd54:	d033      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bd56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bd5a:	d82c      	bhi.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd60:	d02f      	beq.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bd62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd66:	d826      	bhi.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bd6c:	d02b      	beq.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bd6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bd72:	d820      	bhi.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd78:	d012      	beq.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bd7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd7e:	d81a      	bhi.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d022      	beq.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bd84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd88:	d115      	bne.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd8e:	3308      	adds	r3, #8
 800bd90:	2100      	movs	r1, #0
 800bd92:	4618      	mov	r0, r3
 800bd94:	f001 fcc0 	bl	800d718 <RCCEx_PLL2_Config>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bd9e:	e015      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bda0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda4:	3328      	adds	r3, #40	; 0x28
 800bda6:	2102      	movs	r1, #2
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f001 fd67 	bl	800d87c <RCCEx_PLL3_Config>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bdb4:	e00a      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bdbc:	e006      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdbe:	bf00      	nop
 800bdc0:	e004      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdc2:	bf00      	nop
 800bdc4:	e002      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdc6:	bf00      	nop
 800bdc8:	e000      	b.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bdca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10b      	bne.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bdd4:	4ba1      	ldr	r3, [pc, #644]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdd8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bde4:	4a9d      	ldr	r2, [pc, #628]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bde6:	430b      	orrs	r3, r1
 800bde8:	6593      	str	r3, [r2, #88]	; 0x58
 800bdea:	e003      	b.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bdf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f002 0308 	and.w	r3, r2, #8
 800be00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be04:	2300      	movs	r3, #0
 800be06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800be0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800be0e:	460b      	mov	r3, r1
 800be10:	4313      	orrs	r3, r2
 800be12:	d01e      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800be14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be20:	d10c      	bne.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be26:	3328      	adds	r3, #40	; 0x28
 800be28:	2102      	movs	r1, #2
 800be2a:	4618      	mov	r0, r3
 800be2c:	f001 fd26 	bl	800d87c <RCCEx_PLL3_Config>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d002      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800be3c:	4b87      	ldr	r3, [pc, #540]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be4c:	4a83      	ldr	r2, [pc, #524]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be4e:	430b      	orrs	r3, r1
 800be50:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5a:	f002 0310 	and.w	r3, r2, #16
 800be5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be62:	2300      	movs	r3, #0
 800be64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800be68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800be6c:	460b      	mov	r3, r1
 800be6e:	4313      	orrs	r3, r2
 800be70:	d01e      	beq.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800be72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be7e:	d10c      	bne.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be84:	3328      	adds	r3, #40	; 0x28
 800be86:	2102      	movs	r1, #2
 800be88:	4618      	mov	r0, r3
 800be8a:	f001 fcf7 	bl	800d87c <RCCEx_PLL3_Config>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be9a:	4b70      	ldr	r3, [pc, #448]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800beaa:	4a6c      	ldr	r2, [pc, #432]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800beac:	430b      	orrs	r3, r1
 800beae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800beb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bebc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bec0:	2300      	movs	r3, #0
 800bec2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bec6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800beca:	460b      	mov	r3, r1
 800becc:	4313      	orrs	r3, r2
 800bece:	d03e      	beq.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bed4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bedc:	d022      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bede:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bee2:	d81b      	bhi.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d003      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beec:	d00b      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800beee:	e015      	b.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bef4:	3308      	adds	r3, #8
 800bef6:	2100      	movs	r1, #0
 800bef8:	4618      	mov	r0, r3
 800befa:	f001 fc0d 	bl	800d718 <RCCEx_PLL2_Config>
 800befe:	4603      	mov	r3, r0
 800bf00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bf04:	e00f      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf0a:	3328      	adds	r3, #40	; 0x28
 800bf0c:	2102      	movs	r1, #2
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f001 fcb4 	bl	800d87c <RCCEx_PLL3_Config>
 800bf14:	4603      	mov	r3, r0
 800bf16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bf1a:	e004      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf22:	e000      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bf24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10b      	bne.n	800bf46 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf2e:	4b4b      	ldr	r3, [pc, #300]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf32:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bf36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf3e:	4a47      	ldr	r2, [pc, #284]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf40:	430b      	orrs	r3, r1
 800bf42:	6593      	str	r3, [r2, #88]	; 0x58
 800bf44:	e003      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bf4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf56:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bf5a:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bf64:	460b      	mov	r3, r1
 800bf66:	4313      	orrs	r3, r2
 800bf68:	d03b      	beq.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bf6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf76:	d01f      	beq.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bf78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf7c:	d818      	bhi.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bf7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf82:	d003      	beq.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bf84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf88:	d007      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bf8a:	e011      	b.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf8c:	4b33      	ldr	r3, [pc, #204]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf90:	4a32      	ldr	r2, [pc, #200]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bf98:	e00f      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf9e:	3328      	adds	r3, #40	; 0x28
 800bfa0:	2101      	movs	r1, #1
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f001 fc6a 	bl	800d87c <RCCEx_PLL3_Config>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bfae:	e004      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bfb6:	e000      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bfb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d10b      	bne.n	800bfda <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bfc2:	4b26      	ldr	r3, [pc, #152]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfc6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bfca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfd2:	4a22      	ldr	r2, [pc, #136]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfd4:	430b      	orrs	r3, r1
 800bfd6:	6553      	str	r3, [r2, #84]	; 0x54
 800bfd8:	e003      	b.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bfe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bfee:	673b      	str	r3, [r7, #112]	; 0x70
 800bff0:	2300      	movs	r3, #0
 800bff2:	677b      	str	r3, [r7, #116]	; 0x74
 800bff4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bff8:	460b      	mov	r3, r1
 800bffa:	4313      	orrs	r3, r2
 800bffc:	d034      	beq.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c004:	2b00      	cmp	r3, #0
 800c006:	d003      	beq.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c00c:	d007      	beq.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c00e:	e011      	b.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c010:	4b12      	ldr	r3, [pc, #72]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c014:	4a11      	ldr	r2, [pc, #68]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c01a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c01c:	e00e      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c01e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c022:	3308      	adds	r3, #8
 800c024:	2102      	movs	r1, #2
 800c026:	4618      	mov	r0, r3
 800c028:	f001 fb76 	bl	800d718 <RCCEx_PLL2_Config>
 800c02c:	4603      	mov	r3, r0
 800c02e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c032:	e003      	b.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c03a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c03c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c040:	2b00      	cmp	r3, #0
 800c042:	d10d      	bne.n	800c060 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c044:	4b05      	ldr	r3, [pc, #20]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c048:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c052:	4a02      	ldr	r2, [pc, #8]	; (800c05c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c054:	430b      	orrs	r3, r1
 800c056:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c058:	e006      	b.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c05a:	bf00      	nop
 800c05c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c060:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c064:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c070:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c074:	66bb      	str	r3, [r7, #104]	; 0x68
 800c076:	2300      	movs	r3, #0
 800c078:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c07a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c07e:	460b      	mov	r3, r1
 800c080:	4313      	orrs	r3, r2
 800c082:	d00c      	beq.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c088:	3328      	adds	r3, #40	; 0x28
 800c08a:	2102      	movs	r1, #2
 800c08c:	4618      	mov	r0, r3
 800c08e:	f001 fbf5 	bl	800d87c <RCCEx_PLL3_Config>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c098:	2301      	movs	r3, #1
 800c09a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c0aa:	663b      	str	r3, [r7, #96]	; 0x60
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	667b      	str	r3, [r7, #100]	; 0x64
 800c0b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	d038      	beq.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c0ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0c6:	d018      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c0c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c0cc:	d811      	bhi.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c0ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0d2:	d014      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c0d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0d8:	d80b      	bhi.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d011      	beq.n	800c102 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c0de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0e2:	d106      	bne.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0e4:	4bc3      	ldr	r3, [pc, #780]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e8:	4ac2      	ldr	r2, [pc, #776]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c0f0:	e008      	b.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c0f8:	e004      	b.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c0fa:	bf00      	nop
 800c0fc:	e002      	b.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c0fe:	bf00      	nop
 800c100:	e000      	b.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c102:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10b      	bne.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c10c:	4bb9      	ldr	r3, [pc, #740]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c10e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c110:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c11c:	4ab5      	ldr	r2, [pc, #724]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c11e:	430b      	orrs	r3, r1
 800c120:	6553      	str	r3, [r2, #84]	; 0x54
 800c122:	e003      	b.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c128:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c134:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c138:	65bb      	str	r3, [r7, #88]	; 0x58
 800c13a:	2300      	movs	r3, #0
 800c13c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c13e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c142:	460b      	mov	r3, r1
 800c144:	4313      	orrs	r3, r2
 800c146:	d009      	beq.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c148:	4baa      	ldr	r3, [pc, #680]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c14a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c14c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c156:	4aa7      	ldr	r2, [pc, #668]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c158:	430b      	orrs	r3, r1
 800c15a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c164:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c168:	653b      	str	r3, [r7, #80]	; 0x50
 800c16a:	2300      	movs	r3, #0
 800c16c:	657b      	str	r3, [r7, #84]	; 0x54
 800c16e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c172:	460b      	mov	r3, r1
 800c174:	4313      	orrs	r3, r2
 800c176:	d00a      	beq.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c178:	4b9e      	ldr	r3, [pc, #632]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c184:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c188:	4a9a      	ldr	r2, [pc, #616]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c18a:	430b      	orrs	r3, r1
 800c18c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c196:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c19a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c19c:	2300      	movs	r3, #0
 800c19e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c1a4:	460b      	mov	r3, r1
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	d009      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c1aa:	4b92      	ldr	r3, [pc, #584]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1ae:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c1b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1b8:	4a8e      	ldr	r2, [pc, #568]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1ba:	430b      	orrs	r3, r1
 800c1bc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c1be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c1ca:	643b      	str	r3, [r7, #64]	; 0x40
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	647b      	str	r3, [r7, #68]	; 0x44
 800c1d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	d00e      	beq.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c1da:	4b86      	ldr	r3, [pc, #536]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	4a85      	ldr	r2, [pc, #532]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1e4:	6113      	str	r3, [r2, #16]
 800c1e6:	4b83      	ldr	r3, [pc, #524]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1e8:	6919      	ldr	r1, [r3, #16]
 800c1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c1f2:	4a80      	ldr	r2, [pc, #512]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1f4:	430b      	orrs	r3, r1
 800c1f6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c1f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c200:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c204:	63bb      	str	r3, [r7, #56]	; 0x38
 800c206:	2300      	movs	r3, #0
 800c208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c20a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c20e:	460b      	mov	r3, r1
 800c210:	4313      	orrs	r3, r2
 800c212:	d009      	beq.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c214:	4b77      	ldr	r3, [pc, #476]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c218:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c222:	4a74      	ldr	r2, [pc, #464]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c224:	430b      	orrs	r3, r1
 800c226:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c234:	633b      	str	r3, [r7, #48]	; 0x30
 800c236:	2300      	movs	r3, #0
 800c238:	637b      	str	r3, [r7, #52]	; 0x34
 800c23a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c23e:	460b      	mov	r3, r1
 800c240:	4313      	orrs	r3, r2
 800c242:	d00a      	beq.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c244:	4b6b      	ldr	r3, [pc, #428]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c248:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c24c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c254:	4a67      	ldr	r2, [pc, #412]	; (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c256:	430b      	orrs	r3, r1
 800c258:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c262:	2100      	movs	r1, #0
 800c264:	62b9      	str	r1, [r7, #40]	; 0x28
 800c266:	f003 0301 	and.w	r3, r3, #1
 800c26a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c26c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c270:	460b      	mov	r3, r1
 800c272:	4313      	orrs	r3, r2
 800c274:	d011      	beq.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c27a:	3308      	adds	r3, #8
 800c27c:	2100      	movs	r1, #0
 800c27e:	4618      	mov	r0, r3
 800c280:	f001 fa4a 	bl	800d718 <RCCEx_PLL2_Config>
 800c284:	4603      	mov	r3, r0
 800c286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c28a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d003      	beq.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c296:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	6239      	str	r1, [r7, #32]
 800c2a6:	f003 0302 	and.w	r3, r3, #2
 800c2aa:	627b      	str	r3, [r7, #36]	; 0x24
 800c2ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c2b0:	460b      	mov	r3, r1
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	d011      	beq.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ba:	3308      	adds	r3, #8
 800c2bc:	2101      	movs	r1, #1
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f001 fa2a 	bl	800d718 <RCCEx_PLL2_Config>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d003      	beq.n	800c2da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e2:	2100      	movs	r1, #0
 800c2e4:	61b9      	str	r1, [r7, #24]
 800c2e6:	f003 0304 	and.w	r3, r3, #4
 800c2ea:	61fb      	str	r3, [r7, #28]
 800c2ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	d011      	beq.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2fa:	3308      	adds	r3, #8
 800c2fc:	2102      	movs	r1, #2
 800c2fe:	4618      	mov	r0, r3
 800c300:	f001 fa0a 	bl	800d718 <RCCEx_PLL2_Config>
 800c304:	4603      	mov	r3, r0
 800c306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c30a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d003      	beq.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c316:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c322:	2100      	movs	r1, #0
 800c324:	6139      	str	r1, [r7, #16]
 800c326:	f003 0308 	and.w	r3, r3, #8
 800c32a:	617b      	str	r3, [r7, #20]
 800c32c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c330:	460b      	mov	r3, r1
 800c332:	4313      	orrs	r3, r2
 800c334:	d011      	beq.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c33a:	3328      	adds	r3, #40	; 0x28
 800c33c:	2100      	movs	r1, #0
 800c33e:	4618      	mov	r0, r3
 800c340:	f001 fa9c 	bl	800d87c <RCCEx_PLL3_Config>
 800c344:	4603      	mov	r3, r0
 800c346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c34a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c362:	2100      	movs	r1, #0
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	f003 0310 	and.w	r3, r3, #16
 800c36a:	60fb      	str	r3, [r7, #12]
 800c36c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c370:	460b      	mov	r3, r1
 800c372:	4313      	orrs	r3, r2
 800c374:	d011      	beq.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c37a:	3328      	adds	r3, #40	; 0x28
 800c37c:	2101      	movs	r1, #1
 800c37e:	4618      	mov	r0, r3
 800c380:	f001 fa7c 	bl	800d87c <RCCEx_PLL3_Config>
 800c384:	4603      	mov	r3, r0
 800c386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c38a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	6039      	str	r1, [r7, #0]
 800c3a6:	f003 0320 	and.w	r3, r3, #32
 800c3aa:	607b      	str	r3, [r7, #4]
 800c3ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	d011      	beq.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3ba:	3328      	adds	r3, #40	; 0x28
 800c3bc:	2102      	movs	r1, #2
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f001 fa5c 	bl	800d87c <RCCEx_PLL3_Config>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c3ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d003      	beq.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c3da:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d101      	bne.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e000      	b.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c3e6:	2301      	movs	r3, #1
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3f4:	58024400 	.word	0x58024400

0800c3f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b090      	sub	sp, #64	; 0x40
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c402:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c406:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c40a:	430b      	orrs	r3, r1
 800c40c:	f040 8094 	bne.w	800c538 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c410:	4b9e      	ldr	r3, [pc, #632]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c414:	f003 0307 	and.w	r3, r3, #7
 800c418:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41c:	2b04      	cmp	r3, #4
 800c41e:	f200 8087 	bhi.w	800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c422:	a201      	add	r2, pc, #4	; (adr r2, 800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c428:	0800c43d 	.word	0x0800c43d
 800c42c:	0800c465 	.word	0x0800c465
 800c430:	0800c48d 	.word	0x0800c48d
 800c434:	0800c529 	.word	0x0800c529
 800c438:	0800c4b5 	.word	0x0800c4b5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c43c:	4b93      	ldr	r3, [pc, #588]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c448:	d108      	bne.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c44a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c44e:	4618      	mov	r0, r3
 800c450:	f001 f810 	bl	800d474 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c456:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c458:	f000 bd45 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c460:	f000 bd41 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c464:	4b89      	ldr	r3, [pc, #548]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c46c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c470:	d108      	bne.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c472:	f107 0318 	add.w	r3, r7, #24
 800c476:	4618      	mov	r0, r3
 800c478:	f000 fd54 	bl	800cf24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c480:	f000 bd31 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c484:	2300      	movs	r3, #0
 800c486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c488:	f000 bd2d 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c48c:	4b7f      	ldr	r3, [pc, #508]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c498:	d108      	bne.n	800c4ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c49a:	f107 030c 	add.w	r3, r7, #12
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f000 fe94 	bl	800d1cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4a8:	f000 bd1d 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4b0:	f000 bd19 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4b4:	4b75      	ldr	r3, [pc, #468]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4be:	4b73      	ldr	r3, [pc, #460]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f003 0304 	and.w	r3, r3, #4
 800c4c6:	2b04      	cmp	r3, #4
 800c4c8:	d10c      	bne.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d109      	bne.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4d0:	4b6e      	ldr	r3, [pc, #440]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	08db      	lsrs	r3, r3, #3
 800c4d6:	f003 0303 	and.w	r3, r3, #3
 800c4da:	4a6d      	ldr	r2, [pc, #436]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c4dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4e2:	e01f      	b.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4e4:	4b69      	ldr	r3, [pc, #420]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4f0:	d106      	bne.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c4f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4f8:	d102      	bne.n	800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4fa:	4b66      	ldr	r3, [pc, #408]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4fe:	e011      	b.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c500:	4b62      	ldr	r3, [pc, #392]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c50c:	d106      	bne.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c514:	d102      	bne.n	800c51c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c516:	4b60      	ldr	r3, [pc, #384]	; (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c51a:	e003      	b.n	800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c51c:	2300      	movs	r3, #0
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c520:	f000 bce1 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c524:	f000 bcdf 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c528:	4b5c      	ldr	r3, [pc, #368]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c52c:	f000 bcdb 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c530:	2300      	movs	r3, #0
 800c532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c534:	f000 bcd7 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c53c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c540:	430b      	orrs	r3, r1
 800c542:	f040 80ad 	bne.w	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c546:	4b51      	ldr	r3, [pc, #324]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c54a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c54e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c556:	d056      	beq.n	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c55e:	f200 8090 	bhi.w	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c564:	2bc0      	cmp	r3, #192	; 0xc0
 800c566:	f000 8088 	beq.w	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56c:	2bc0      	cmp	r3, #192	; 0xc0
 800c56e:	f200 8088 	bhi.w	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	2b80      	cmp	r3, #128	; 0x80
 800c576:	d032      	beq.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57a:	2b80      	cmp	r3, #128	; 0x80
 800c57c:	f200 8081 	bhi.w	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c582:	2b00      	cmp	r3, #0
 800c584:	d003      	beq.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c588:	2b40      	cmp	r3, #64	; 0x40
 800c58a:	d014      	beq.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c58c:	e079      	b.n	800c682 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c58e:	4b3f      	ldr	r3, [pc, #252]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c59a:	d108      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c59c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 ff67 	bl	800d474 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5aa:	f000 bc9c 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5b2:	f000 bc98 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5b6:	4b35      	ldr	r3, [pc, #212]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5c2:	d108      	bne.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5c4:	f107 0318 	add.w	r3, r7, #24
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f000 fcab 	bl	800cf24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5d2:	f000 bc88 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5da:	f000 bc84 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5de:	4b2b      	ldr	r3, [pc, #172]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5ea:	d108      	bne.n	800c5fe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5ec:	f107 030c 	add.w	r3, r7, #12
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f000 fdeb 	bl	800d1cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5fa:	f000 bc74 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c602:	f000 bc70 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c606:	4b21      	ldr	r3, [pc, #132]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c60a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c60e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c610:	4b1e      	ldr	r3, [pc, #120]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f003 0304 	and.w	r3, r3, #4
 800c618:	2b04      	cmp	r3, #4
 800c61a:	d10c      	bne.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d109      	bne.n	800c636 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c622:	4b1a      	ldr	r3, [pc, #104]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	08db      	lsrs	r3, r3, #3
 800c628:	f003 0303 	and.w	r3, r3, #3
 800c62c:	4a18      	ldr	r2, [pc, #96]	; (800c690 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c62e:	fa22 f303 	lsr.w	r3, r2, r3
 800c632:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c634:	e01f      	b.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c636:	4b15      	ldr	r3, [pc, #84]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c63e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c642:	d106      	bne.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c646:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c64a:	d102      	bne.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c64c:	4b11      	ldr	r3, [pc, #68]	; (800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c64e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c650:	e011      	b.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c652:	4b0e      	ldr	r3, [pc, #56]	; (800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c65a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c65e:	d106      	bne.n	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c666:	d102      	bne.n	800c66e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c668:	4b0b      	ldr	r3, [pc, #44]	; (800c698 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c66a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c66c:	e003      	b.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c66e:	2300      	movs	r3, #0
 800c670:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c672:	f000 bc38 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c676:	f000 bc36 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c67a:	4b08      	ldr	r3, [pc, #32]	; (800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c67c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c67e:	f000 bc32 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c682:	2300      	movs	r3, #0
 800c684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c686:	f000 bc2e 	b.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c68a:	bf00      	nop
 800c68c:	58024400 	.word	0x58024400
 800c690:	03d09000 	.word	0x03d09000
 800c694:	003d0900 	.word	0x003d0900
 800c698:	017d7840 	.word	0x017d7840
 800c69c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c6a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6a4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c6a8:	430b      	orrs	r3, r1
 800c6aa:	f040 809c 	bne.w	800c7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c6ae:	4b9e      	ldr	r3, [pc, #632]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6b2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c6b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c6be:	d054      	beq.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c6c6:	f200 808b 	bhi.w	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c6d0:	f000 8083 	beq.w	800c7da <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c6da:	f200 8081 	bhi.w	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6e4:	d02f      	beq.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6ec:	d878      	bhi.n	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d004      	beq.n	800c6fe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6fa:	d012      	beq.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c6fc:	e070      	b.n	800c7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6fe:	4b8a      	ldr	r3, [pc, #552]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c706:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c70a:	d107      	bne.n	800c71c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c70c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c710:	4618      	mov	r0, r3
 800c712:	f000 feaf 	bl	800d474 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c718:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c71a:	e3e4      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c71c:	2300      	movs	r3, #0
 800c71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c720:	e3e1      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c722:	4b81      	ldr	r3, [pc, #516]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c72a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c72e:	d107      	bne.n	800c740 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c730:	f107 0318 	add.w	r3, r7, #24
 800c734:	4618      	mov	r0, r3
 800c736:	f000 fbf5 	bl	800cf24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c73e:	e3d2      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c740:	2300      	movs	r3, #0
 800c742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c744:	e3cf      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c746:	4b78      	ldr	r3, [pc, #480]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c74e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c752:	d107      	bne.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c754:	f107 030c 	add.w	r3, r7, #12
 800c758:	4618      	mov	r0, r3
 800c75a:	f000 fd37 	bl	800d1cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c762:	e3c0      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c764:	2300      	movs	r3, #0
 800c766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c768:	e3bd      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c76a:	4b6f      	ldr	r3, [pc, #444]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c76e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c772:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c774:	4b6c      	ldr	r3, [pc, #432]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f003 0304 	and.w	r3, r3, #4
 800c77c:	2b04      	cmp	r3, #4
 800c77e:	d10c      	bne.n	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c782:	2b00      	cmp	r3, #0
 800c784:	d109      	bne.n	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c786:	4b68      	ldr	r3, [pc, #416]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	08db      	lsrs	r3, r3, #3
 800c78c:	f003 0303 	and.w	r3, r3, #3
 800c790:	4a66      	ldr	r2, [pc, #408]	; (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c792:	fa22 f303 	lsr.w	r3, r2, r3
 800c796:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c798:	e01e      	b.n	800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c79a:	4b63      	ldr	r3, [pc, #396]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7a6:	d106      	bne.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c7a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7ae:	d102      	bne.n	800c7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c7b0:	4b5f      	ldr	r3, [pc, #380]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7b4:	e010      	b.n	800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7b6:	4b5c      	ldr	r3, [pc, #368]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7c2:	d106      	bne.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c7c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7ca:	d102      	bne.n	800c7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c7cc:	4b59      	ldr	r3, [pc, #356]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7d0:	e002      	b.n	800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c7d6:	e386      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c7d8:	e385      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c7da:	4b57      	ldr	r3, [pc, #348]	; (800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c7dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7de:	e382      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e4:	e37f      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c7e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7ea:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c7ee:	430b      	orrs	r3, r1
 800c7f0:	f040 80a7 	bne.w	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c7f4:	4b4c      	ldr	r3, [pc, #304]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7f8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c7fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c804:	d055      	beq.n	800c8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c808:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c80c:	f200 8096 	bhi.w	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c812:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c816:	f000 8084 	beq.w	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c820:	f200 808c 	bhi.w	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c82a:	d030      	beq.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c832:	f200 8083 	bhi.w	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d004      	beq.n	800c846 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c842:	d012      	beq.n	800c86a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c844:	e07a      	b.n	800c93c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c846:	4b38      	ldr	r3, [pc, #224]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c84e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c852:	d107      	bne.n	800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c858:	4618      	mov	r0, r3
 800c85a:	f000 fe0b 	bl	800d474 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c860:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c862:	e340      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c864:	2300      	movs	r3, #0
 800c866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c868:	e33d      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c86a:	4b2f      	ldr	r3, [pc, #188]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c876:	d107      	bne.n	800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c878:	f107 0318 	add.w	r3, r7, #24
 800c87c:	4618      	mov	r0, r3
 800c87e:	f000 fb51 	bl	800cf24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c886:	e32e      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c88c:	e32b      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c88e:	4b26      	ldr	r3, [pc, #152]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c89a:	d107      	bne.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c89c:	f107 030c 	add.w	r3, r7, #12
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f000 fc93 	bl	800d1cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8aa:	e31c      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b0:	e319      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c8b2:	4b1d      	ldr	r3, [pc, #116]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8ba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8bc:	4b1a      	ldr	r3, [pc, #104]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f003 0304 	and.w	r3, r3, #4
 800c8c4:	2b04      	cmp	r3, #4
 800c8c6:	d10c      	bne.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d109      	bne.n	800c8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8ce:	4b16      	ldr	r3, [pc, #88]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	08db      	lsrs	r3, r3, #3
 800c8d4:	f003 0303 	and.w	r3, r3, #3
 800c8d8:	4a14      	ldr	r2, [pc, #80]	; (800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c8da:	fa22 f303 	lsr.w	r3, r2, r3
 800c8de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8e0:	e01e      	b.n	800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8e2:	4b11      	ldr	r3, [pc, #68]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8ee:	d106      	bne.n	800c8fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8f6:	d102      	bne.n	800c8fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8f8:	4b0d      	ldr	r3, [pc, #52]	; (800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8fc:	e010      	b.n	800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8fe:	4b0a      	ldr	r3, [pc, #40]	; (800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c90a:	d106      	bne.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c90e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c912:	d102      	bne.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c914:	4b07      	ldr	r3, [pc, #28]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c916:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c918:	e002      	b.n	800c920 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c91e:	e2e2      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c920:	e2e1      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c922:	4b05      	ldr	r3, [pc, #20]	; (800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c926:	e2de      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c928:	58024400 	.word	0x58024400
 800c92c:	03d09000 	.word	0x03d09000
 800c930:	003d0900 	.word	0x003d0900
 800c934:	017d7840 	.word	0x017d7840
 800c938:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c93c:	2300      	movs	r3, #0
 800c93e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c940:	e2d1      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c942:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c946:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c94a:	430b      	orrs	r3, r1
 800c94c:	f040 809c 	bne.w	800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c950:	4b93      	ldr	r3, [pc, #588]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c954:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c958:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c960:	d054      	beq.n	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c968:	f200 808b 	bhi.w	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c972:	f000 8083 	beq.w	800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c978:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c97c:	f200 8081 	bhi.w	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c986:	d02f      	beq.n	800c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c98e:	d878      	bhi.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c992:	2b00      	cmp	r3, #0
 800c994:	d004      	beq.n	800c9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c99c:	d012      	beq.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c99e:	e070      	b.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c9a0:	4b7f      	ldr	r3, [pc, #508]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9ac:	d107      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f000 fd5e 	bl	800d474 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9bc:	e293      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c2:	e290      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9c4:	4b76      	ldr	r3, [pc, #472]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9d0:	d107      	bne.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9d2:	f107 0318 	add.w	r3, r7, #24
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f000 faa4 	bl	800cf24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9e0:	e281      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e6:	e27e      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9e8:	4b6d      	ldr	r3, [pc, #436]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9f4:	d107      	bne.n	800ca06 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9f6:	f107 030c 	add.w	r3, r7, #12
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 fbe6 	bl	800d1cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca04:	e26f      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca06:	2300      	movs	r3, #0
 800ca08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca0a:	e26c      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca0c:	4b64      	ldr	r3, [pc, #400]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca14:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca16:	4b62      	ldr	r3, [pc, #392]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f003 0304 	and.w	r3, r3, #4
 800ca1e:	2b04      	cmp	r3, #4
 800ca20:	d10c      	bne.n	800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ca22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d109      	bne.n	800ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca28:	4b5d      	ldr	r3, [pc, #372]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	08db      	lsrs	r3, r3, #3
 800ca2e:	f003 0303 	and.w	r3, r3, #3
 800ca32:	4a5c      	ldr	r2, [pc, #368]	; (800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ca34:	fa22 f303 	lsr.w	r3, r2, r3
 800ca38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca3a:	e01e      	b.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca3c:	4b58      	ldr	r3, [pc, #352]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca48:	d106      	bne.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ca4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca50:	d102      	bne.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca52:	4b55      	ldr	r3, [pc, #340]	; (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ca54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca56:	e010      	b.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca58:	4b51      	ldr	r3, [pc, #324]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca64:	d106      	bne.n	800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ca66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca6c:	d102      	bne.n	800ca74 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca6e:	4b4f      	ldr	r3, [pc, #316]	; (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ca70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca72:	e002      	b.n	800ca7a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca74:	2300      	movs	r3, #0
 800ca76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca78:	e235      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca7a:	e234      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca7c:	4b4c      	ldr	r3, [pc, #304]	; (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ca7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca80:	e231      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ca82:	2300      	movs	r3, #0
 800ca84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca86:	e22e      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ca88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca8c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ca90:	430b      	orrs	r3, r1
 800ca92:	f040 808f 	bne.w	800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ca96:	4b42      	ldr	r3, [pc, #264]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca9a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ca9e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800caa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800caa6:	d06b      	beq.n	800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800caa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800caae:	d874      	bhi.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cab6:	d056      	beq.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cabe:	d86c      	bhi.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cac6:	d03b      	beq.n	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cace:	d864      	bhi.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cad6:	d021      	beq.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cade:	d85c      	bhi.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d004      	beq.n	800caf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800caec:	d004      	beq.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800caee:	e054      	b.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800caf0:	f7fe fa0a 	bl	800af08 <HAL_RCC_GetPCLK1Freq>
 800caf4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800caf6:	e1f6      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800caf8:	4b29      	ldr	r3, [pc, #164]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb04:	d107      	bne.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb06:	f107 0318 	add.w	r3, r7, #24
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f000 fa0a 	bl	800cf24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb14:	e1e7      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb1a:	e1e4      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb1c:	4b20      	ldr	r3, [pc, #128]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb28:	d107      	bne.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb2a:	f107 030c 	add.w	r3, r7, #12
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f000 fb4c 	bl	800d1cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb38:	e1d5      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb3e:	e1d2      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb40:	4b17      	ldr	r3, [pc, #92]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f003 0304 	and.w	r3, r3, #4
 800cb48:	2b04      	cmp	r3, #4
 800cb4a:	d109      	bne.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb4c:	4b14      	ldr	r3, [pc, #80]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	08db      	lsrs	r3, r3, #3
 800cb52:	f003 0303 	and.w	r3, r3, #3
 800cb56:	4a13      	ldr	r2, [pc, #76]	; (800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cb58:	fa22 f303 	lsr.w	r3, r2, r3
 800cb5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb5e:	e1c2      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb60:	2300      	movs	r3, #0
 800cb62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb64:	e1bf      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cb66:	4b0e      	ldr	r3, [pc, #56]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb72:	d102      	bne.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cb74:	4b0c      	ldr	r3, [pc, #48]	; (800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cb76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb78:	e1b5      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb7e:	e1b2      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb80:	4b07      	ldr	r3, [pc, #28]	; (800cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb8c:	d102      	bne.n	800cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cb8e:	4b07      	ldr	r3, [pc, #28]	; (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cb90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb92:	e1a8      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb94:	2300      	movs	r3, #0
 800cb96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb98:	e1a5      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb9e:	e1a2      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cba0:	58024400 	.word	0x58024400
 800cba4:	03d09000 	.word	0x03d09000
 800cba8:	003d0900 	.word	0x003d0900
 800cbac:	017d7840 	.word	0x017d7840
 800cbb0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cbb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbb8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cbbc:	430b      	orrs	r3, r1
 800cbbe:	d173      	bne.n	800cca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cbc0:	4b9c      	ldr	r3, [pc, #624]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cbc8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbd0:	d02f      	beq.n	800cc32 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbd8:	d863      	bhi.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d004      	beq.n	800cbea <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbe6:	d012      	beq.n	800cc0e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cbe8:	e05b      	b.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbea:	4b92      	ldr	r3, [pc, #584]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbf6:	d107      	bne.n	800cc08 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbf8:	f107 0318 	add.w	r3, r7, #24
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f000 f991 	bl	800cf24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc06:	e16e      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc0c:	e16b      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc0e:	4b89      	ldr	r3, [pc, #548]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc1a:	d107      	bne.n	800cc2c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc1c:	f107 030c 	add.w	r3, r7, #12
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 fad3 	bl	800d1cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc2a:	e15c      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc30:	e159      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc32:	4b80      	ldr	r3, [pc, #512]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cc3a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc3c:	4b7d      	ldr	r3, [pc, #500]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f003 0304 	and.w	r3, r3, #4
 800cc44:	2b04      	cmp	r3, #4
 800cc46:	d10c      	bne.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d109      	bne.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc4e:	4b79      	ldr	r3, [pc, #484]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	08db      	lsrs	r3, r3, #3
 800cc54:	f003 0303 	and.w	r3, r3, #3
 800cc58:	4a77      	ldr	r2, [pc, #476]	; (800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cc5a:	fa22 f303 	lsr.w	r3, r2, r3
 800cc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc60:	e01e      	b.n	800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc62:	4b74      	ldr	r3, [pc, #464]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc6e:	d106      	bne.n	800cc7e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc76:	d102      	bne.n	800cc7e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc78:	4b70      	ldr	r3, [pc, #448]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc7c:	e010      	b.n	800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc7e:	4b6d      	ldr	r3, [pc, #436]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc8a:	d106      	bne.n	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc92:	d102      	bne.n	800cc9a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc94:	4b6a      	ldr	r3, [pc, #424]	; (800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cc96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc98:	e002      	b.n	800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc9e:	e122      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cca0:	e121      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cca2:	2300      	movs	r3, #0
 800cca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cca6:	e11e      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccac:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ccb0:	430b      	orrs	r3, r1
 800ccb2:	d133      	bne.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ccb4:	4b5f      	ldr	r3, [pc, #380]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ccbc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ccbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d004      	beq.n	800ccce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccca:	d012      	beq.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cccc:	e023      	b.n	800cd16 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccce:	4b59      	ldr	r3, [pc, #356]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccda:	d107      	bne.n	800ccec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cce0:	4618      	mov	r0, r3
 800cce2:	f000 fbc7 	bl	800d474 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccea:	e0fc      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccec:	2300      	movs	r3, #0
 800ccee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccf0:	e0f9      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccf2:	4b50      	ldr	r3, [pc, #320]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccfe:	d107      	bne.n	800cd10 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd00:	f107 0318 	add.w	r3, r7, #24
 800cd04:	4618      	mov	r0, r3
 800cd06:	f000 f90d 	bl	800cf24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd0e:	e0ea      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd10:	2300      	movs	r3, #0
 800cd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd14:	e0e7      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cd16:	2300      	movs	r3, #0
 800cd18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd1a:	e0e4      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cd1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd20:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cd24:	430b      	orrs	r3, r1
 800cd26:	f040 808d 	bne.w	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cd2a:	4b42      	ldr	r3, [pc, #264]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd2e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cd32:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd3a:	d06b      	beq.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800cd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cd42:	d874      	bhi.n	800ce2e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd4a:	d056      	beq.n	800cdfa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800cd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd52:	d86c      	bhi.n	800ce2e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd5a:	d03b      	beq.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd62:	d864      	bhi.n	800ce2e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd6a:	d021      	beq.n	800cdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd72:	d85c      	bhi.n	800ce2e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d004      	beq.n	800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd80:	d004      	beq.n	800cd8c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cd82:	e054      	b.n	800ce2e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cd84:	f000 f8b8 	bl	800cef8 <HAL_RCCEx_GetD3PCLK1Freq>
 800cd88:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd8a:	e0ac      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd8c:	4b29      	ldr	r3, [pc, #164]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd98:	d107      	bne.n	800cdaa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd9a:	f107 0318 	add.w	r3, r7, #24
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f000 f8c0 	bl	800cf24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cda8:	e09d      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdae:	e09a      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cdb0:	4b20      	ldr	r3, [pc, #128]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cdb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cdbc:	d107      	bne.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdbe:	f107 030c 	add.w	r3, r7, #12
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f000 fa02 	bl	800d1cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdcc:	e08b      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdd2:	e088      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cdd4:	4b17      	ldr	r3, [pc, #92]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f003 0304 	and.w	r3, r3, #4
 800cddc:	2b04      	cmp	r3, #4
 800cdde:	d109      	bne.n	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cde0:	4b14      	ldr	r3, [pc, #80]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	08db      	lsrs	r3, r3, #3
 800cde6:	f003 0303 	and.w	r3, r3, #3
 800cdea:	4a13      	ldr	r2, [pc, #76]	; (800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cdec:	fa22 f303 	lsr.w	r3, r2, r3
 800cdf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdf2:	e078      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf8:	e075      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cdfa:	4b0e      	ldr	r3, [pc, #56]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce06:	d102      	bne.n	800ce0e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ce08:	4b0c      	ldr	r3, [pc, #48]	; (800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ce0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce0c:	e06b      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce12:	e068      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce14:	4b07      	ldr	r3, [pc, #28]	; (800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce20:	d102      	bne.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ce22:	4b07      	ldr	r3, [pc, #28]	; (800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ce24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce26:	e05e      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce2c:	e05b      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce32:	e058      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ce34:	58024400 	.word	0x58024400
 800ce38:	03d09000 	.word	0x03d09000
 800ce3c:	003d0900 	.word	0x003d0900
 800ce40:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ce44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce48:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ce4c:	430b      	orrs	r3, r1
 800ce4e:	d148      	bne.n	800cee2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ce50:	4b27      	ldr	r3, [pc, #156]	; (800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce58:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce60:	d02a      	beq.n	800ceb8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce68:	d838      	bhi.n	800cedc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ce6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d004      	beq.n	800ce7a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ce70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce76:	d00d      	beq.n	800ce94 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ce78:	e030      	b.n	800cedc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce7a:	4b1d      	ldr	r3, [pc, #116]	; (800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce86:	d102      	bne.n	800ce8e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ce88:	4b1a      	ldr	r3, [pc, #104]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ce8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce8c:	e02b      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce92:	e028      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce94:	4b16      	ldr	r3, [pc, #88]	; (800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cea0:	d107      	bne.n	800ceb2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cea6:	4618      	mov	r0, r3
 800cea8:	f000 fae4 	bl	800d474 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ceac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceb0:	e019      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceb6:	e016      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ceb8:	4b0d      	ldr	r3, [pc, #52]	; (800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cec4:	d107      	bne.n	800ced6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cec6:	f107 0318 	add.w	r3, r7, #24
 800ceca:	4618      	mov	r0, r3
 800cecc:	f000 f82a 	bl	800cf24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ced4:	e007      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ced6:	2300      	movs	r3, #0
 800ced8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceda:	e004      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cedc:	2300      	movs	r3, #0
 800cede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee0:	e001      	b.n	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cee2:	2300      	movs	r3, #0
 800cee4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3740      	adds	r7, #64	; 0x40
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	58024400 	.word	0x58024400
 800cef4:	017d7840 	.word	0x017d7840

0800cef8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cefc:	f7fd ffd4 	bl	800aea8 <HAL_RCC_GetHCLKFreq>
 800cf00:	4602      	mov	r2, r0
 800cf02:	4b06      	ldr	r3, [pc, #24]	; (800cf1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cf04:	6a1b      	ldr	r3, [r3, #32]
 800cf06:	091b      	lsrs	r3, r3, #4
 800cf08:	f003 0307 	and.w	r3, r3, #7
 800cf0c:	4904      	ldr	r1, [pc, #16]	; (800cf20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cf0e:	5ccb      	ldrb	r3, [r1, r3]
 800cf10:	f003 031f 	and.w	r3, r3, #31
 800cf14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	58024400 	.word	0x58024400
 800cf20:	08017528 	.word	0x08017528

0800cf24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b089      	sub	sp, #36	; 0x24
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf2c:	4ba1      	ldr	r3, [pc, #644]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf30:	f003 0303 	and.w	r3, r3, #3
 800cf34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cf36:	4b9f      	ldr	r3, [pc, #636]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf3a:	0b1b      	lsrs	r3, r3, #12
 800cf3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cf42:	4b9c      	ldr	r3, [pc, #624]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf46:	091b      	lsrs	r3, r3, #4
 800cf48:	f003 0301 	and.w	r3, r3, #1
 800cf4c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cf4e:	4b99      	ldr	r3, [pc, #612]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf52:	08db      	lsrs	r3, r3, #3
 800cf54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf58:	693a      	ldr	r2, [r7, #16]
 800cf5a:	fb02 f303 	mul.w	r3, r2, r3
 800cf5e:	ee07 3a90 	vmov	s15, r3
 800cf62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	f000 8111 	beq.w	800d194 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cf72:	69bb      	ldr	r3, [r7, #24]
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	f000 8083 	beq.w	800d080 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	f200 80a1 	bhi.w	800d0c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d003      	beq.n	800cf90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d056      	beq.n	800d03c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cf8e:	e099      	b.n	800d0c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf90:	4b88      	ldr	r3, [pc, #544]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f003 0320 	and.w	r3, r3, #32
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d02d      	beq.n	800cff8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf9c:	4b85      	ldr	r3, [pc, #532]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	08db      	lsrs	r3, r3, #3
 800cfa2:	f003 0303 	and.w	r3, r3, #3
 800cfa6:	4a84      	ldr	r2, [pc, #528]	; (800d1b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cfa8:	fa22 f303 	lsr.w	r3, r2, r3
 800cfac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	ee07 3a90 	vmov	s15, r3
 800cfb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	ee07 3a90 	vmov	s15, r3
 800cfbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfc6:	4b7b      	ldr	r3, [pc, #492]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfce:	ee07 3a90 	vmov	s15, r3
 800cfd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfda:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d1bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cff2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cff6:	e087      	b.n	800d108 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	ee07 3a90 	vmov	s15, r3
 800cffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d002:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d00a:	4b6a      	ldr	r3, [pc, #424]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d012:	ee07 3a90 	vmov	s15, r3
 800d016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d01a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d01e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d1bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d02a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d02e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d032:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d03a:	e065      	b.n	800d108 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	ee07 3a90 	vmov	s15, r3
 800d042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d046:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d04a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d04e:	4b59      	ldr	r3, [pc, #356]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d056:	ee07 3a90 	vmov	s15, r3
 800d05a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d05e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d062:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d1bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d06a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d06e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d07a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d07e:	e043      	b.n	800d108 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	ee07 3a90 	vmov	s15, r3
 800d086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d08a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d08e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d092:	4b48      	ldr	r3, [pc, #288]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d09a:	ee07 3a90 	vmov	s15, r3
 800d09e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d1bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0c2:	e021      	b.n	800d108 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	ee07 3a90 	vmov	s15, r3
 800d0ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d0d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0d6:	4b37      	ldr	r3, [pc, #220]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0de:	ee07 3a90 	vmov	s15, r3
 800d0e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d1bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d106:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d108:	4b2a      	ldr	r3, [pc, #168]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d10c:	0a5b      	lsrs	r3, r3, #9
 800d10e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d112:	ee07 3a90 	vmov	s15, r3
 800d116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d11a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d11e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d122:	edd7 6a07 	vldr	s13, [r7, #28]
 800d126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d12a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d12e:	ee17 2a90 	vmov	r2, s15
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d136:	4b1f      	ldr	r3, [pc, #124]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13a:	0c1b      	lsrs	r3, r3, #16
 800d13c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d140:	ee07 3a90 	vmov	s15, r3
 800d144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d148:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d14c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d150:	edd7 6a07 	vldr	s13, [r7, #28]
 800d154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d15c:	ee17 2a90 	vmov	r2, s15
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d164:	4b13      	ldr	r3, [pc, #76]	; (800d1b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d168:	0e1b      	lsrs	r3, r3, #24
 800d16a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d16e:	ee07 3a90 	vmov	s15, r3
 800d172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d17a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d17e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d18a:	ee17 2a90 	vmov	r2, s15
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d192:	e008      	b.n	800d1a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2200      	movs	r2, #0
 800d198:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	609a      	str	r2, [r3, #8]
}
 800d1a6:	bf00      	nop
 800d1a8:	3724      	adds	r7, #36	; 0x24
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	58024400 	.word	0x58024400
 800d1b8:	03d09000 	.word	0x03d09000
 800d1bc:	46000000 	.word	0x46000000
 800d1c0:	4c742400 	.word	0x4c742400
 800d1c4:	4a742400 	.word	0x4a742400
 800d1c8:	4bbebc20 	.word	0x4bbebc20

0800d1cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b089      	sub	sp, #36	; 0x24
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d1d4:	4ba1      	ldr	r3, [pc, #644]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1d8:	f003 0303 	and.w	r3, r3, #3
 800d1dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d1de:	4b9f      	ldr	r3, [pc, #636]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e2:	0d1b      	lsrs	r3, r3, #20
 800d1e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d1ea:	4b9c      	ldr	r3, [pc, #624]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ee:	0a1b      	lsrs	r3, r3, #8
 800d1f0:	f003 0301 	and.w	r3, r3, #1
 800d1f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d1f6:	4b99      	ldr	r3, [pc, #612]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1fa:	08db      	lsrs	r3, r3, #3
 800d1fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d200:	693a      	ldr	r2, [r7, #16]
 800d202:	fb02 f303 	mul.w	r3, r2, r3
 800d206:	ee07 3a90 	vmov	s15, r3
 800d20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d20e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	2b00      	cmp	r3, #0
 800d216:	f000 8111 	beq.w	800d43c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	f000 8083 	beq.w	800d328 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	2b02      	cmp	r3, #2
 800d226:	f200 80a1 	bhi.w	800d36c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d22a:	69bb      	ldr	r3, [r7, #24]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d003      	beq.n	800d238 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	2b01      	cmp	r3, #1
 800d234:	d056      	beq.n	800d2e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d236:	e099      	b.n	800d36c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d238:	4b88      	ldr	r3, [pc, #544]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f003 0320 	and.w	r3, r3, #32
 800d240:	2b00      	cmp	r3, #0
 800d242:	d02d      	beq.n	800d2a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d244:	4b85      	ldr	r3, [pc, #532]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	08db      	lsrs	r3, r3, #3
 800d24a:	f003 0303 	and.w	r3, r3, #3
 800d24e:	4a84      	ldr	r2, [pc, #528]	; (800d460 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d250:	fa22 f303 	lsr.w	r3, r2, r3
 800d254:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	ee07 3a90 	vmov	s15, r3
 800d25c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	ee07 3a90 	vmov	s15, r3
 800d266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d26a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d26e:	4b7b      	ldr	r3, [pc, #492]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d276:	ee07 3a90 	vmov	s15, r3
 800d27a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d27e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d282:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d464 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d28a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d28e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d29a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d29e:	e087      	b.n	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	ee07 3a90 	vmov	s15, r3
 800d2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d468 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d2ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2b2:	4b6a      	ldr	r3, [pc, #424]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ba:	ee07 3a90 	vmov	s15, r3
 800d2be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d464 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2e2:	e065      	b.n	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	ee07 3a90 	vmov	s15, r3
 800d2ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d46c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d2f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2f6:	4b59      	ldr	r3, [pc, #356]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2fe:	ee07 3a90 	vmov	s15, r3
 800d302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d306:	ed97 6a03 	vldr	s12, [r7, #12]
 800d30a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d464 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d30e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d31a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d31e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d326:	e043      	b.n	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	ee07 3a90 	vmov	s15, r3
 800d32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d332:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d470 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d33a:	4b48      	ldr	r3, [pc, #288]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d33e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d342:	ee07 3a90 	vmov	s15, r3
 800d346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d34a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d34e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d464 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d35a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d35e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d362:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d36a:	e021      	b.n	800d3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	ee07 3a90 	vmov	s15, r3
 800d372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d376:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d46c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d37a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d37e:	4b37      	ldr	r3, [pc, #220]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d386:	ee07 3a90 	vmov	s15, r3
 800d38a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d38e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d392:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d464 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d39a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d39e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d3b0:	4b2a      	ldr	r3, [pc, #168]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3b4:	0a5b      	lsrs	r3, r3, #9
 800d3b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3ba:	ee07 3a90 	vmov	s15, r3
 800d3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3d6:	ee17 2a90 	vmov	r2, s15
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d3de:	4b1f      	ldr	r3, [pc, #124]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3e2:	0c1b      	lsrs	r3, r3, #16
 800d3e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3e8:	ee07 3a90 	vmov	s15, r3
 800d3ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d404:	ee17 2a90 	vmov	r2, s15
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d40c:	4b13      	ldr	r3, [pc, #76]	; (800d45c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d410:	0e1b      	lsrs	r3, r3, #24
 800d412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d416:	ee07 3a90 	vmov	s15, r3
 800d41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d41e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d422:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d426:	edd7 6a07 	vldr	s13, [r7, #28]
 800d42a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d42e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d432:	ee17 2a90 	vmov	r2, s15
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d43a:	e008      	b.n	800d44e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2200      	movs	r2, #0
 800d440:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	609a      	str	r2, [r3, #8]
}
 800d44e:	bf00      	nop
 800d450:	3724      	adds	r7, #36	; 0x24
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	58024400 	.word	0x58024400
 800d460:	03d09000 	.word	0x03d09000
 800d464:	46000000 	.word	0x46000000
 800d468:	4c742400 	.word	0x4c742400
 800d46c:	4a742400 	.word	0x4a742400
 800d470:	4bbebc20 	.word	0x4bbebc20

0800d474 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d474:	b480      	push	{r7}
 800d476:	b089      	sub	sp, #36	; 0x24
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d47c:	4ba0      	ldr	r3, [pc, #640]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d480:	f003 0303 	and.w	r3, r3, #3
 800d484:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d486:	4b9e      	ldr	r3, [pc, #632]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d48a:	091b      	lsrs	r3, r3, #4
 800d48c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d490:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d492:	4b9b      	ldr	r3, [pc, #620]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d496:	f003 0301 	and.w	r3, r3, #1
 800d49a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d49c:	4b98      	ldr	r3, [pc, #608]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a0:	08db      	lsrs	r3, r3, #3
 800d4a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4a6:	693a      	ldr	r2, [r7, #16]
 800d4a8:	fb02 f303 	mul.w	r3, r2, r3
 800d4ac:	ee07 3a90 	vmov	s15, r3
 800d4b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4b4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	f000 8111 	beq.w	800d6e2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	f000 8083 	beq.w	800d5ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d4c8:	69bb      	ldr	r3, [r7, #24]
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	f200 80a1 	bhi.w	800d612 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d003      	beq.n	800d4de <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d056      	beq.n	800d58a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d4dc:	e099      	b.n	800d612 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4de:	4b88      	ldr	r3, [pc, #544]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f003 0320 	and.w	r3, r3, #32
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d02d      	beq.n	800d546 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4ea:	4b85      	ldr	r3, [pc, #532]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	08db      	lsrs	r3, r3, #3
 800d4f0:	f003 0303 	and.w	r3, r3, #3
 800d4f4:	4a83      	ldr	r2, [pc, #524]	; (800d704 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d4f6:	fa22 f303 	lsr.w	r3, r2, r3
 800d4fa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	ee07 3a90 	vmov	s15, r3
 800d502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	ee07 3a90 	vmov	s15, r3
 800d50c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d510:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d514:	4b7a      	ldr	r3, [pc, #488]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d51c:	ee07 3a90 	vmov	s15, r3
 800d520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d524:	ed97 6a03 	vldr	s12, [r7, #12]
 800d528:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d708 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d52c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d530:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d534:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d53c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d540:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d544:	e087      	b.n	800d656 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	ee07 3a90 	vmov	s15, r3
 800d54c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d550:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d70c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d558:	4b69      	ldr	r3, [pc, #420]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d55c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d560:	ee07 3a90 	vmov	s15, r3
 800d564:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d568:	ed97 6a03 	vldr	s12, [r7, #12]
 800d56c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d708 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d570:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d574:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d578:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d57c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d580:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d584:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d588:	e065      	b.n	800d656 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	ee07 3a90 	vmov	s15, r3
 800d590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d594:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d710 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d59c:	4b58      	ldr	r3, [pc, #352]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5a4:	ee07 3a90 	vmov	s15, r3
 800d5a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5b0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d708 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5cc:	e043      	b.n	800d656 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	ee07 3a90 	vmov	s15, r3
 800d5d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5d8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d714 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d5dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5e0:	4b47      	ldr	r3, [pc, #284]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5e8:	ee07 3a90 	vmov	s15, r3
 800d5ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5f4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d708 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d60c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d610:	e021      	b.n	800d656 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	ee07 3a90 	vmov	s15, r3
 800d618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d61c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d70c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d624:	4b36      	ldr	r3, [pc, #216]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d62c:	ee07 3a90 	vmov	s15, r3
 800d630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d634:	ed97 6a03 	vldr	s12, [r7, #12]
 800d638:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d708 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d63c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d644:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d64c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d650:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d654:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d656:	4b2a      	ldr	r3, [pc, #168]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d65a:	0a5b      	lsrs	r3, r3, #9
 800d65c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d660:	ee07 3a90 	vmov	s15, r3
 800d664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d66c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d670:	edd7 6a07 	vldr	s13, [r7, #28]
 800d674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d67c:	ee17 2a90 	vmov	r2, s15
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d684:	4b1e      	ldr	r3, [pc, #120]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d688:	0c1b      	lsrs	r3, r3, #16
 800d68a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d68e:	ee07 3a90 	vmov	s15, r3
 800d692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d69a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d69e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6aa:	ee17 2a90 	vmov	r2, s15
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d6b2:	4b13      	ldr	r3, [pc, #76]	; (800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b6:	0e1b      	lsrs	r3, r3, #24
 800d6b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6bc:	ee07 3a90 	vmov	s15, r3
 800d6c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d6c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d6cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d6d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6d8:	ee17 2a90 	vmov	r2, s15
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d6e0:	e008      	b.n	800d6f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	609a      	str	r2, [r3, #8]
}
 800d6f4:	bf00      	nop
 800d6f6:	3724      	adds	r7, #36	; 0x24
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr
 800d700:	58024400 	.word	0x58024400
 800d704:	03d09000 	.word	0x03d09000
 800d708:	46000000 	.word	0x46000000
 800d70c:	4c742400 	.word	0x4c742400
 800d710:	4a742400 	.word	0x4a742400
 800d714:	4bbebc20 	.word	0x4bbebc20

0800d718 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d722:	2300      	movs	r3, #0
 800d724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d726:	4b53      	ldr	r3, [pc, #332]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d72a:	f003 0303 	and.w	r3, r3, #3
 800d72e:	2b03      	cmp	r3, #3
 800d730:	d101      	bne.n	800d736 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	e099      	b.n	800d86a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d736:	4b4f      	ldr	r3, [pc, #316]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4a4e      	ldr	r2, [pc, #312]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d73c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d742:	f7f6 fc8f 	bl	8004064 <HAL_GetTick>
 800d746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d748:	e008      	b.n	800d75c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d74a:	f7f6 fc8b 	bl	8004064 <HAL_GetTick>
 800d74e:	4602      	mov	r2, r0
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	2b02      	cmp	r3, #2
 800d756:	d901      	bls.n	800d75c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d758:	2303      	movs	r3, #3
 800d75a:	e086      	b.n	800d86a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d75c:	4b45      	ldr	r3, [pc, #276]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d764:	2b00      	cmp	r3, #0
 800d766:	d1f0      	bne.n	800d74a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d768:	4b42      	ldr	r3, [pc, #264]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d76c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	031b      	lsls	r3, r3, #12
 800d776:	493f      	ldr	r1, [pc, #252]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d778:	4313      	orrs	r3, r2
 800d77a:	628b      	str	r3, [r1, #40]	; 0x28
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	3b01      	subs	r3, #1
 800d782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	689b      	ldr	r3, [r3, #8]
 800d78a:	3b01      	subs	r3, #1
 800d78c:	025b      	lsls	r3, r3, #9
 800d78e:	b29b      	uxth	r3, r3
 800d790:	431a      	orrs	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	68db      	ldr	r3, [r3, #12]
 800d796:	3b01      	subs	r3, #1
 800d798:	041b      	lsls	r3, r3, #16
 800d79a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d79e:	431a      	orrs	r2, r3
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	691b      	ldr	r3, [r3, #16]
 800d7a4:	3b01      	subs	r3, #1
 800d7a6:	061b      	lsls	r3, r3, #24
 800d7a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d7ac:	4931      	ldr	r1, [pc, #196]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d7b2:	4b30      	ldr	r3, [pc, #192]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	695b      	ldr	r3, [r3, #20]
 800d7be:	492d      	ldr	r1, [pc, #180]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d7c4:	4b2b      	ldr	r3, [pc, #172]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c8:	f023 0220 	bic.w	r2, r3, #32
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	699b      	ldr	r3, [r3, #24]
 800d7d0:	4928      	ldr	r1, [pc, #160]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d7d6:	4b27      	ldr	r3, [pc, #156]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7da:	4a26      	ldr	r2, [pc, #152]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d7dc:	f023 0310 	bic.w	r3, r3, #16
 800d7e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d7e2:	4b24      	ldr	r3, [pc, #144]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d7e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7e6:	4b24      	ldr	r3, [pc, #144]	; (800d878 <RCCEx_PLL2_Config+0x160>)
 800d7e8:	4013      	ands	r3, r2
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	69d2      	ldr	r2, [r2, #28]
 800d7ee:	00d2      	lsls	r2, r2, #3
 800d7f0:	4920      	ldr	r1, [pc, #128]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d7f6:	4b1f      	ldr	r3, [pc, #124]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7fa:	4a1e      	ldr	r2, [pc, #120]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d7fc:	f043 0310 	orr.w	r3, r3, #16
 800d800:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d106      	bne.n	800d816 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d808:	4b1a      	ldr	r3, [pc, #104]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	4a19      	ldr	r2, [pc, #100]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d80e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d812:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d814:	e00f      	b.n	800d836 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d106      	bne.n	800d82a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d81c:	4b15      	ldr	r3, [pc, #84]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d820:	4a14      	ldr	r2, [pc, #80]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d826:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d828:	e005      	b.n	800d836 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d82a:	4b12      	ldr	r3, [pc, #72]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d82c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d82e:	4a11      	ldr	r2, [pc, #68]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d834:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d836:	4b0f      	ldr	r3, [pc, #60]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a0e      	ldr	r2, [pc, #56]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d83c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d842:	f7f6 fc0f 	bl	8004064 <HAL_GetTick>
 800d846:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d848:	e008      	b.n	800d85c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d84a:	f7f6 fc0b 	bl	8004064 <HAL_GetTick>
 800d84e:	4602      	mov	r2, r0
 800d850:	68bb      	ldr	r3, [r7, #8]
 800d852:	1ad3      	subs	r3, r2, r3
 800d854:	2b02      	cmp	r3, #2
 800d856:	d901      	bls.n	800d85c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d858:	2303      	movs	r3, #3
 800d85a:	e006      	b.n	800d86a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d85c:	4b05      	ldr	r3, [pc, #20]	; (800d874 <RCCEx_PLL2_Config+0x15c>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d864:	2b00      	cmp	r3, #0
 800d866:	d0f0      	beq.n	800d84a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d868:	7bfb      	ldrb	r3, [r7, #15]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	58024400 	.word	0x58024400
 800d878:	ffff0007 	.word	0xffff0007

0800d87c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d886:	2300      	movs	r3, #0
 800d888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d88a:	4b53      	ldr	r3, [pc, #332]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d88c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d88e:	f003 0303 	and.w	r3, r3, #3
 800d892:	2b03      	cmp	r3, #3
 800d894:	d101      	bne.n	800d89a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d896:	2301      	movs	r3, #1
 800d898:	e099      	b.n	800d9ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d89a:	4b4f      	ldr	r3, [pc, #316]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4a4e      	ldr	r2, [pc, #312]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d8a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8a6:	f7f6 fbdd 	bl	8004064 <HAL_GetTick>
 800d8aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d8ac:	e008      	b.n	800d8c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d8ae:	f7f6 fbd9 	bl	8004064 <HAL_GetTick>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	68bb      	ldr	r3, [r7, #8]
 800d8b6:	1ad3      	subs	r3, r2, r3
 800d8b8:	2b02      	cmp	r3, #2
 800d8ba:	d901      	bls.n	800d8c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d8bc:	2303      	movs	r3, #3
 800d8be:	e086      	b.n	800d9ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d8c0:	4b45      	ldr	r3, [pc, #276]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d1f0      	bne.n	800d8ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d8cc:	4b42      	ldr	r3, [pc, #264]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	051b      	lsls	r3, r3, #20
 800d8da:	493f      	ldr	r1, [pc, #252]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	628b      	str	r3, [r1, #40]	; 0x28
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	3b01      	subs	r3, #1
 800d8f0:	025b      	lsls	r3, r3, #9
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	431a      	orrs	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	041b      	lsls	r3, r3, #16
 800d8fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d902:	431a      	orrs	r2, r3
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	691b      	ldr	r3, [r3, #16]
 800d908:	3b01      	subs	r3, #1
 800d90a:	061b      	lsls	r3, r3, #24
 800d90c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d910:	4931      	ldr	r1, [pc, #196]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d912:	4313      	orrs	r3, r2
 800d914:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d916:	4b30      	ldr	r3, [pc, #192]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d91a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	695b      	ldr	r3, [r3, #20]
 800d922:	492d      	ldr	r1, [pc, #180]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d924:	4313      	orrs	r3, r2
 800d926:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d928:	4b2b      	ldr	r3, [pc, #172]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d92c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	699b      	ldr	r3, [r3, #24]
 800d934:	4928      	ldr	r1, [pc, #160]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d936:	4313      	orrs	r3, r2
 800d938:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d93a:	4b27      	ldr	r3, [pc, #156]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d93e:	4a26      	ldr	r2, [pc, #152]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d944:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d946:	4b24      	ldr	r3, [pc, #144]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d94a:	4b24      	ldr	r3, [pc, #144]	; (800d9dc <RCCEx_PLL3_Config+0x160>)
 800d94c:	4013      	ands	r3, r2
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	69d2      	ldr	r2, [r2, #28]
 800d952:	00d2      	lsls	r2, r2, #3
 800d954:	4920      	ldr	r1, [pc, #128]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d956:	4313      	orrs	r3, r2
 800d958:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d95a:	4b1f      	ldr	r3, [pc, #124]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d95e:	4a1e      	ldr	r2, [pc, #120]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d964:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d106      	bne.n	800d97a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d96c:	4b1a      	ldr	r3, [pc, #104]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d970:	4a19      	ldr	r2, [pc, #100]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d972:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d976:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d978:	e00f      	b.n	800d99a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d106      	bne.n	800d98e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d980:	4b15      	ldr	r3, [pc, #84]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d984:	4a14      	ldr	r2, [pc, #80]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d986:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d98a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d98c:	e005      	b.n	800d99a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d98e:	4b12      	ldr	r3, [pc, #72]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d992:	4a11      	ldr	r2, [pc, #68]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d994:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d998:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d99a:	4b0f      	ldr	r3, [pc, #60]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a0e      	ldr	r2, [pc, #56]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d9a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9a6:	f7f6 fb5d 	bl	8004064 <HAL_GetTick>
 800d9aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d9ac:	e008      	b.n	800d9c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d9ae:	f7f6 fb59 	bl	8004064 <HAL_GetTick>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	1ad3      	subs	r3, r2, r3
 800d9b8:	2b02      	cmp	r3, #2
 800d9ba:	d901      	bls.n	800d9c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d9bc:	2303      	movs	r3, #3
 800d9be:	e006      	b.n	800d9ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d9c0:	4b05      	ldr	r3, [pc, #20]	; (800d9d8 <RCCEx_PLL3_Config+0x15c>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d0f0      	beq.n	800d9ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	58024400 	.word	0x58024400
 800d9dc:	ffff0007 	.word	0xffff0007

0800d9e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d071      	beq.n	800dad6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d106      	bne.n	800da0c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f7f4 feb2 	bl	8002770 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2202      	movs	r2, #2
 800da10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	f003 0310 	and.w	r3, r3, #16
 800da1e:	2b10      	cmp	r3, #16
 800da20:	d050      	beq.n	800dac4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	22ca      	movs	r2, #202	; 0xca
 800da28:	625a      	str	r2, [r3, #36]	; 0x24
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	2253      	movs	r2, #83	; 0x53
 800da30:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 fa4a 	bl	800decc <RTC_EnterInitMode>
 800da38:	4603      	mov	r3, r0
 800da3a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800da3c:	7bfb      	ldrb	r3, [r7, #15]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d124      	bne.n	800da8c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	6899      	ldr	r1, [r3, #8]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	4b24      	ldr	r3, [pc, #144]	; (800dae0 <HAL_RTC_Init+0x100>)
 800da4e:	400b      	ands	r3, r1
 800da50:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	6899      	ldr	r1, [r3, #8]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	685a      	ldr	r2, [r3, #4]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	691b      	ldr	r3, [r3, #16]
 800da60:	431a      	orrs	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	699b      	ldr	r3, [r3, #24]
 800da66:	431a      	orrs	r2, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	430a      	orrs	r2, r1
 800da6e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	0419      	lsls	r1, r3, #16
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68da      	ldr	r2, [r3, #12]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	430a      	orrs	r2, r1
 800da80:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 fa56 	bl	800df34 <RTC_ExitInitMode>
 800da88:	4603      	mov	r3, r0
 800da8a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800da8c:	7bfb      	ldrb	r3, [r7, #15]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d113      	bne.n	800daba <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f022 0203 	bic.w	r2, r2, #3
 800daa0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	69da      	ldr	r2, [r3, #28]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	695b      	ldr	r3, [r3, #20]
 800dab0:	431a      	orrs	r2, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	430a      	orrs	r2, r1
 800dab8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	22ff      	movs	r2, #255	; 0xff
 800dac0:	625a      	str	r2, [r3, #36]	; 0x24
 800dac2:	e001      	b.n	800dac8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800dac4:	2300      	movs	r3, #0
 800dac6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800dac8:	7bfb      	ldrb	r3, [r7, #15]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d103      	bne.n	800dad6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2201      	movs	r2, #1
 800dad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800dad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3710      	adds	r7, #16
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	ff8fffbf 	.word	0xff8fffbf

0800dae4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dae4:	b590      	push	{r4, r7, lr}
 800dae6:	b087      	sub	sp, #28
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d101      	bne.n	800dafe <HAL_RTC_SetTime+0x1a>
 800dafa:	2302      	movs	r3, #2
 800dafc:	e089      	b.n	800dc12 <HAL_RTC_SetTime+0x12e>
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2201      	movs	r2, #1
 800db02:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2202      	movs	r2, #2
 800db0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	22ca      	movs	r2, #202	; 0xca
 800db14:	625a      	str	r2, [r3, #36]	; 0x24
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	2253      	movs	r2, #83	; 0x53
 800db1c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f000 f9d4 	bl	800decc <RTC_EnterInitMode>
 800db24:	4603      	mov	r3, r0
 800db26:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800db28:	7cfb      	ldrb	r3, [r7, #19]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d161      	bne.n	800dbf2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d126      	bne.n	800db82 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d102      	bne.n	800db48 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	2200      	movs	r2, #0
 800db46:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f000 fa2f 	bl	800dfb0 <RTC_ByteToBcd2>
 800db52:	4603      	mov	r3, r0
 800db54:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	785b      	ldrb	r3, [r3, #1]
 800db5a:	4618      	mov	r0, r3
 800db5c:	f000 fa28 	bl	800dfb0 <RTC_ByteToBcd2>
 800db60:	4603      	mov	r3, r0
 800db62:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db64:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	789b      	ldrb	r3, [r3, #2]
 800db6a:	4618      	mov	r0, r3
 800db6c:	f000 fa20 	bl	800dfb0 <RTC_ByteToBcd2>
 800db70:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800db72:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	78db      	ldrb	r3, [r3, #3]
 800db7a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db7c:	4313      	orrs	r3, r2
 800db7e:	617b      	str	r3, [r7, #20]
 800db80:	e018      	b.n	800dbb4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d102      	bne.n	800db96 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	2200      	movs	r2, #0
 800db94:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	785b      	ldrb	r3, [r3, #1]
 800dba0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dba2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dba8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	78db      	ldrb	r3, [r3, #3]
 800dbae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	6979      	ldr	r1, [r7, #20]
 800dbba:	4b18      	ldr	r3, [pc, #96]	; (800dc1c <HAL_RTC_SetTime+0x138>)
 800dbbc:	400b      	ands	r3, r1
 800dbbe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	689a      	ldr	r2, [r3, #8]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dbce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	6899      	ldr	r1, [r3, #8]
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	68da      	ldr	r2, [r3, #12]
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	691b      	ldr	r3, [r3, #16]
 800dbde:	431a      	orrs	r2, r3
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	430a      	orrs	r2, r1
 800dbe6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f000 f9a3 	bl	800df34 <RTC_ExitInitMode>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	22ff      	movs	r2, #255	; 0xff
 800dbf8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800dbfa:	7cfb      	ldrb	r3, [r7, #19]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d103      	bne.n	800dc08 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2201      	movs	r2, #1
 800dc04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800dc10:	7cfb      	ldrb	r3, [r7, #19]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	371c      	adds	r7, #28
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd90      	pop	{r4, r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	007f7f7f 	.word	0x007f7f7f

0800dc20 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b086      	sub	sp, #24
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	691b      	ldr	r3, [r3, #16]
 800dc3c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	681a      	ldr	r2, [r3, #0]
 800dc4a:	4b22      	ldr	r3, [pc, #136]	; (800dcd4 <HAL_RTC_GetTime+0xb4>)
 800dc4c:	4013      	ands	r3, r2
 800dc4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	0c1b      	lsrs	r3, r3, #16
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc5a:	b2da      	uxtb	r2, r3
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	0a1b      	lsrs	r3, r3, #8
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc78:	b2da      	uxtb	r2, r3
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	0d9b      	lsrs	r3, r3, #22
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	f003 0301 	and.w	r3, r3, #1
 800dc88:	b2da      	uxtb	r2, r3
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d11a      	bne.n	800dcca <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f000 f9a9 	bl	800dff0 <RTC_Bcd2ToByte>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	461a      	mov	r2, r3
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	785b      	ldrb	r3, [r3, #1]
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f000 f9a0 	bl	800dff0 <RTC_Bcd2ToByte>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	789b      	ldrb	r3, [r3, #2]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f000 f997 	bl	800dff0 <RTC_Bcd2ToByte>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3718      	adds	r7, #24
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	007f7f7f 	.word	0x007f7f7f

0800dcd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dcd8:	b590      	push	{r4, r7, lr}
 800dcda:	b087      	sub	sp, #28
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d101      	bne.n	800dcf2 <HAL_RTC_SetDate+0x1a>
 800dcee:	2302      	movs	r3, #2
 800dcf0:	e073      	b.n	800ddda <HAL_RTC_SetDate+0x102>
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2202      	movs	r2, #2
 800dcfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d10e      	bne.n	800dd26 <HAL_RTC_SetDate+0x4e>
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	785b      	ldrb	r3, [r3, #1]
 800dd0c:	f003 0310 	and.w	r3, r3, #16
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d008      	beq.n	800dd26 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	785b      	ldrb	r3, [r3, #1]
 800dd18:	f023 0310 	bic.w	r3, r3, #16
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	330a      	adds	r3, #10
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d11c      	bne.n	800dd66 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	78db      	ldrb	r3, [r3, #3]
 800dd30:	4618      	mov	r0, r3
 800dd32:	f000 f93d 	bl	800dfb0 <RTC_ByteToBcd2>
 800dd36:	4603      	mov	r3, r0
 800dd38:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	785b      	ldrb	r3, [r3, #1]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f000 f936 	bl	800dfb0 <RTC_ByteToBcd2>
 800dd44:	4603      	mov	r3, r0
 800dd46:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dd48:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	789b      	ldrb	r3, [r3, #2]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f000 f92e 	bl	800dfb0 <RTC_ByteToBcd2>
 800dd54:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800dd56:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800dd60:	4313      	orrs	r3, r2
 800dd62:	617b      	str	r3, [r7, #20]
 800dd64:	e00e      	b.n	800dd84 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	78db      	ldrb	r3, [r3, #3]
 800dd6a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	785b      	ldrb	r3, [r3, #1]
 800dd70:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dd72:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800dd74:	68ba      	ldr	r2, [r7, #8]
 800dd76:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800dd78:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800dd80:	4313      	orrs	r3, r2
 800dd82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	22ca      	movs	r2, #202	; 0xca
 800dd8a:	625a      	str	r2, [r3, #36]	; 0x24
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	2253      	movs	r2, #83	; 0x53
 800dd92:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f000 f899 	bl	800decc <RTC_EnterInitMode>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800dd9e:	7cfb      	ldrb	r3, [r7, #19]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d10a      	bne.n	800ddba <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	6979      	ldr	r1, [r7, #20]
 800ddaa:	4b0e      	ldr	r3, [pc, #56]	; (800dde4 <HAL_RTC_SetDate+0x10c>)
 800ddac:	400b      	ands	r3, r1
 800ddae:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	f000 f8bf 	bl	800df34 <RTC_ExitInitMode>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	22ff      	movs	r2, #255	; 0xff
 800ddc0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ddc2:	7cfb      	ldrb	r3, [r7, #19]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d103      	bne.n	800ddd0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ddd8:	7cfb      	ldrb	r3, [r7, #19]


}
 800ddda:	4618      	mov	r0, r3
 800dddc:	371c      	adds	r7, #28
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd90      	pop	{r4, r7, pc}
 800dde2:	bf00      	nop
 800dde4:	00ffff3f 	.word	0x00ffff3f

0800dde8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b086      	sub	sp, #24
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	685a      	ldr	r2, [r3, #4]
 800ddfa:	4b21      	ldr	r3, [pc, #132]	; (800de80 <HAL_RTC_GetDate+0x98>)
 800ddfc:	4013      	ands	r3, r2
 800ddfe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	0c1b      	lsrs	r3, r3, #16
 800de04:	b2da      	uxtb	r2, r3
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	0a1b      	lsrs	r3, r3, #8
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	f003 031f 	and.w	r3, r3, #31
 800de14:	b2da      	uxtb	r2, r3
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	b2db      	uxtb	r3, r3
 800de1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de22:	b2da      	uxtb	r2, r3
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	0b5b      	lsrs	r3, r3, #13
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	f003 0307 	and.w	r3, r3, #7
 800de32:	b2da      	uxtb	r2, r3
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d11a      	bne.n	800de74 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	78db      	ldrb	r3, [r3, #3]
 800de42:	4618      	mov	r0, r3
 800de44:	f000 f8d4 	bl	800dff0 <RTC_Bcd2ToByte>
 800de48:	4603      	mov	r3, r0
 800de4a:	461a      	mov	r2, r3
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	785b      	ldrb	r3, [r3, #1]
 800de54:	4618      	mov	r0, r3
 800de56:	f000 f8cb 	bl	800dff0 <RTC_Bcd2ToByte>
 800de5a:	4603      	mov	r3, r0
 800de5c:	461a      	mov	r2, r3
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	789b      	ldrb	r3, [r3, #2]
 800de66:	4618      	mov	r0, r3
 800de68:	f000 f8c2 	bl	800dff0 <RTC_Bcd2ToByte>
 800de6c:	4603      	mov	r3, r0
 800de6e:	461a      	mov	r2, r3
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3718      	adds	r7, #24
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	00ffff3f 	.word	0x00ffff3f

0800de84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4a0d      	ldr	r2, [pc, #52]	; (800dec8 <HAL_RTC_WaitForSynchro+0x44>)
 800de92:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800de94:	f7f6 f8e6 	bl	8004064 <HAL_GetTick>
 800de98:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800de9a:	e009      	b.n	800deb0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800de9c:	f7f6 f8e2 	bl	8004064 <HAL_GetTick>
 800dea0:	4602      	mov	r2, r0
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	1ad3      	subs	r3, r2, r3
 800dea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800deaa:	d901      	bls.n	800deb0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800deac:	2303      	movs	r3, #3
 800deae:	e007      	b.n	800dec0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	f003 0320 	and.w	r3, r3, #32
 800deba:	2b00      	cmp	r3, #0
 800debc:	d0ee      	beq.n	800de9c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800debe:	2300      	movs	r3, #0
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3710      	adds	r7, #16
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	0003ff5f 	.word	0x0003ff5f

0800decc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b084      	sub	sp, #16
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ded4:	2300      	movs	r3, #0
 800ded6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	68db      	ldr	r3, [r3, #12]
 800dede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d120      	bne.n	800df28 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800deee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800def0:	f7f6 f8b8 	bl	8004064 <HAL_GetTick>
 800def4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800def6:	e00d      	b.n	800df14 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800def8:	f7f6 f8b4 	bl	8004064 <HAL_GetTick>
 800defc:	4602      	mov	r2, r0
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	1ad3      	subs	r3, r2, r3
 800df02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df06:	d905      	bls.n	800df14 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800df08:	2303      	movs	r3, #3
 800df0a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2203      	movs	r2, #3
 800df10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d102      	bne.n	800df28 <RTC_EnterInitMode+0x5c>
 800df22:	7bfb      	ldrb	r3, [r7, #15]
 800df24:	2b03      	cmp	r3, #3
 800df26:	d1e7      	bne.n	800def8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800df28:	7bfb      	ldrb	r3, [r7, #15]
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
	...

0800df34 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800df3c:	2300      	movs	r3, #0
 800df3e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800df40:	4b1a      	ldr	r3, [pc, #104]	; (800dfac <RTC_ExitInitMode+0x78>)
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	4a19      	ldr	r2, [pc, #100]	; (800dfac <RTC_ExitInitMode+0x78>)
 800df46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df4a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800df4c:	4b17      	ldr	r3, [pc, #92]	; (800dfac <RTC_ExitInitMode+0x78>)
 800df4e:	689b      	ldr	r3, [r3, #8]
 800df50:	f003 0320 	and.w	r3, r3, #32
 800df54:	2b00      	cmp	r3, #0
 800df56:	d10c      	bne.n	800df72 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7ff ff93 	bl	800de84 <HAL_RTC_WaitForSynchro>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d01e      	beq.n	800dfa2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2203      	movs	r2, #3
 800df68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800df6c:	2303      	movs	r3, #3
 800df6e:	73fb      	strb	r3, [r7, #15]
 800df70:	e017      	b.n	800dfa2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800df72:	4b0e      	ldr	r3, [pc, #56]	; (800dfac <RTC_ExitInitMode+0x78>)
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	4a0d      	ldr	r2, [pc, #52]	; (800dfac <RTC_ExitInitMode+0x78>)
 800df78:	f023 0320 	bic.w	r3, r3, #32
 800df7c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f7ff ff80 	bl	800de84 <HAL_RTC_WaitForSynchro>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d005      	beq.n	800df96 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2203      	movs	r2, #3
 800df8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800df92:	2303      	movs	r3, #3
 800df94:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800df96:	4b05      	ldr	r3, [pc, #20]	; (800dfac <RTC_ExitInitMode+0x78>)
 800df98:	689b      	ldr	r3, [r3, #8]
 800df9a:	4a04      	ldr	r2, [pc, #16]	; (800dfac <RTC_ExitInitMode+0x78>)
 800df9c:	f043 0320 	orr.w	r3, r3, #32
 800dfa0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800dfa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3710      	adds	r7, #16
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	58004000 	.word	0x58004000

0800dfb0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800dfbe:	79fb      	ldrb	r3, [r7, #7]
 800dfc0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800dfc2:	e005      	b.n	800dfd0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800dfca:	7afb      	ldrb	r3, [r7, #11]
 800dfcc:	3b0a      	subs	r3, #10
 800dfce:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800dfd0:	7afb      	ldrb	r3, [r7, #11]
 800dfd2:	2b09      	cmp	r3, #9
 800dfd4:	d8f6      	bhi.n	800dfc4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	011b      	lsls	r3, r3, #4
 800dfdc:	b2da      	uxtb	r2, r3
 800dfde:	7afb      	ldrb	r3, [r7, #11]
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	b2db      	uxtb	r3, r3
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3714      	adds	r7, #20
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfee:	4770      	bx	lr

0800dff0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b085      	sub	sp, #20
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	4603      	mov	r3, r0
 800dff8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dffa:	79fb      	ldrb	r3, [r7, #7]
 800dffc:	091b      	lsrs	r3, r3, #4
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	461a      	mov	r2, r3
 800e002:	0092      	lsls	r2, r2, #2
 800e004:	4413      	add	r3, r2
 800e006:	005b      	lsls	r3, r3, #1
 800e008:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e00a:	79fb      	ldrb	r3, [r7, #7]
 800e00c:	f003 030f 	and.w	r3, r3, #15
 800e010:	b2da      	uxtb	r2, r3
 800e012:	7bfb      	ldrb	r3, [r7, #15]
 800e014:	4413      	add	r3, r2
 800e016:	b2db      	uxtb	r3, r3
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3714      	adds	r7, #20
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d101      	bne.n	800e036 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e032:	2301      	movs	r3, #1
 800e034:	e10f      	b.n	800e256 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2200      	movs	r2, #0
 800e03a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a87      	ldr	r2, [pc, #540]	; (800e260 <HAL_SPI_Init+0x23c>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d00f      	beq.n	800e066 <HAL_SPI_Init+0x42>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4a86      	ldr	r2, [pc, #536]	; (800e264 <HAL_SPI_Init+0x240>)
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d00a      	beq.n	800e066 <HAL_SPI_Init+0x42>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4a84      	ldr	r2, [pc, #528]	; (800e268 <HAL_SPI_Init+0x244>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d005      	beq.n	800e066 <HAL_SPI_Init+0x42>
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	68db      	ldr	r3, [r3, #12]
 800e05e:	2b0f      	cmp	r3, #15
 800e060:	d901      	bls.n	800e066 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e062:	2301      	movs	r3, #1
 800e064:	e0f7      	b.n	800e256 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 fc12 	bl	800e890 <SPI_GetPacketSize>
 800e06c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	4a7b      	ldr	r2, [pc, #492]	; (800e260 <HAL_SPI_Init+0x23c>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d00c      	beq.n	800e092 <HAL_SPI_Init+0x6e>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a79      	ldr	r2, [pc, #484]	; (800e264 <HAL_SPI_Init+0x240>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d007      	beq.n	800e092 <HAL_SPI_Init+0x6e>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4a78      	ldr	r2, [pc, #480]	; (800e268 <HAL_SPI_Init+0x244>)
 800e088:	4293      	cmp	r3, r2
 800e08a:	d002      	beq.n	800e092 <HAL_SPI_Init+0x6e>
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2b08      	cmp	r3, #8
 800e090:	d811      	bhi.n	800e0b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e096:	4a72      	ldr	r2, [pc, #456]	; (800e260 <HAL_SPI_Init+0x23c>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d009      	beq.n	800e0b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a70      	ldr	r2, [pc, #448]	; (800e264 <HAL_SPI_Init+0x240>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d004      	beq.n	800e0b0 <HAL_SPI_Init+0x8c>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4a6f      	ldr	r2, [pc, #444]	; (800e268 <HAL_SPI_Init+0x244>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d104      	bne.n	800e0ba <HAL_SPI_Init+0x96>
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2b10      	cmp	r3, #16
 800e0b4:	d901      	bls.n	800e0ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e0cd      	b.n	800e256 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d106      	bne.n	800e0d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f7f4 fdba 	bl	8002c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2202      	movs	r2, #2
 800e0d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f022 0201 	bic.w	r2, r2, #1
 800e0ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	689b      	ldr	r3, [r3, #8]
 800e0f2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e0f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	699b      	ldr	r3, [r3, #24]
 800e0fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e100:	d119      	bne.n	800e136 <HAL_SPI_Init+0x112>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e10a:	d103      	bne.n	800e114 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e110:	2b00      	cmp	r3, #0
 800e112:	d008      	beq.n	800e126 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d10c      	bne.n	800e136 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e124:	d107      	bne.n	800e136 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	681a      	ldr	r2, [r3, #0]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e134:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d00f      	beq.n	800e162 <HAL_SPI_Init+0x13e>
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	68db      	ldr	r3, [r3, #12]
 800e146:	2b06      	cmp	r3, #6
 800e148:	d90b      	bls.n	800e162 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	430a      	orrs	r2, r1
 800e15e:	601a      	str	r2, [r3, #0]
 800e160:	e007      	b.n	800e172 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e170:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	69da      	ldr	r2, [r3, #28]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e17a:	431a      	orrs	r2, r3
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	431a      	orrs	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e184:	ea42 0103 	orr.w	r1, r2, r3
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	68da      	ldr	r2, [r3, #12]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	430a      	orrs	r2, r1
 800e192:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19c:	431a      	orrs	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1a2:	431a      	orrs	r2, r3
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	699b      	ldr	r3, [r3, #24]
 800e1a8:	431a      	orrs	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	691b      	ldr	r3, [r3, #16]
 800e1ae:	431a      	orrs	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	695b      	ldr	r3, [r3, #20]
 800e1b4:	431a      	orrs	r2, r3
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6a1b      	ldr	r3, [r3, #32]
 800e1ba:	431a      	orrs	r2, r3
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	431a      	orrs	r2, r3
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1c6:	431a      	orrs	r2, r3
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	431a      	orrs	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1d2:	ea42 0103 	orr.w	r1, r2, r3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	430a      	orrs	r2, r1
 800e1e0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d113      	bne.n	800e212 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e1fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	689b      	ldr	r3, [r3, #8]
 800e204:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e210:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f022 0201 	bic.w	r2, r2, #1
 800e220:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00a      	beq.n	800e244 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	430a      	orrs	r2, r1
 800e242:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2200      	movs	r2, #0
 800e248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2201      	movs	r2, #1
 800e250:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e254:	2300      	movs	r3, #0
}
 800e256:	4618      	mov	r0, r3
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	40013000 	.word	0x40013000
 800e264:	40003800 	.word	0x40003800
 800e268:	40003c00 	.word	0x40003c00

0800e26c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	603b      	str	r3, [r7, #0]
 800e278:	4613      	mov	r3, r2
 800e27a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e280:	095b      	lsrs	r3, r3, #5
 800e282:	b29b      	uxth	r3, r3
 800e284:	3301      	adds	r3, #1
 800e286:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3330      	adds	r3, #48	; 0x30
 800e28e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e290:	f7f5 fee8 	bl	8004064 <HAL_GetTick>
 800e294:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d001      	beq.n	800e2a6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e2a2:	2302      	movs	r3, #2
 800e2a4:	e250      	b.n	800e748 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d002      	beq.n	800e2b2 <HAL_SPI_Receive+0x46>
 800e2ac:	88fb      	ldrh	r3, [r7, #6]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d101      	bne.n	800e2b6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e248      	b.n	800e748 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d101      	bne.n	800e2c4 <HAL_SPI_Receive+0x58>
 800e2c0:	2302      	movs	r3, #2
 800e2c2:	e241      	b.n	800e748 <HAL_SPI_Receive+0x4dc>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2204      	movs	r2, #4
 800e2d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	68ba      	ldr	r2, [r7, #8]
 800e2e0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	88fa      	ldrh	r2, [r7, #6]
 800e2e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	88fa      	ldrh	r2, [r7, #6]
 800e2ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2200      	movs	r2, #0
 800e304:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2200      	movs	r2, #0
 800e30c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2200      	movs	r2, #0
 800e312:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	689b      	ldr	r3, [r3, #8]
 800e318:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e31c:	d108      	bne.n	800e330 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e32c:	601a      	str	r2, [r3, #0]
 800e32e:	e009      	b.n	800e344 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e342:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	685a      	ldr	r2, [r3, #4]
 800e34a:	4b95      	ldr	r3, [pc, #596]	; (800e5a0 <HAL_SPI_Receive+0x334>)
 800e34c:	4013      	ands	r3, r2
 800e34e:	88f9      	ldrh	r1, [r7, #6]
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	6812      	ldr	r2, [r2, #0]
 800e354:	430b      	orrs	r3, r1
 800e356:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f042 0201 	orr.w	r2, r2, #1
 800e366:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e370:	d107      	bne.n	800e382 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e380:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	2b0f      	cmp	r3, #15
 800e388:	d96c      	bls.n	800e464 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e38a:	e064      	b.n	800e456 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	695b      	ldr	r3, [r3, #20]
 800e392:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	695b      	ldr	r3, [r3, #20]
 800e39a:	f003 0301 	and.w	r3, r3, #1
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d114      	bne.n	800e3cc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681a      	ldr	r2, [r3, #0]
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e3ac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3b2:	1d1a      	adds	r2, r3, #4
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	3b01      	subs	r3, #1
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e3ca:	e044      	b.n	800e456 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	8bfa      	ldrh	r2, [r7, #30]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d919      	bls.n	800e40e <HAL_SPI_Receive+0x1a2>
 800e3da:	693b      	ldr	r3, [r7, #16]
 800e3dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d014      	beq.n	800e40e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e3ee:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e3f4:	1d1a      	adds	r2, r3, #4
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e400:	b29b      	uxth	r3, r3
 800e402:	3b01      	subs	r3, #1
 800e404:	b29a      	uxth	r2, r3
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e40c:	e023      	b.n	800e456 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e40e:	f7f5 fe29 	bl	8004064 <HAL_GetTick>
 800e412:	4602      	mov	r2, r0
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	1ad3      	subs	r3, r2, r3
 800e418:	683a      	ldr	r2, [r7, #0]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d803      	bhi.n	800e426 <HAL_SPI_Receive+0x1ba>
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e424:	d102      	bne.n	800e42c <HAL_SPI_Receive+0x1c0>
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d114      	bne.n	800e456 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f000 f98f 	bl	800e750 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e438:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2201      	movs	r2, #1
 800e446:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2200      	movs	r2, #0
 800e44e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e452:	2303      	movs	r3, #3
 800e454:	e178      	b.n	800e748 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d194      	bne.n	800e38c <HAL_SPI_Receive+0x120>
 800e462:	e15e      	b.n	800e722 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	2b07      	cmp	r3, #7
 800e46a:	f240 8153 	bls.w	800e714 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e46e:	e08f      	b.n	800e590 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	695b      	ldr	r3, [r3, #20]
 800e476:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	695b      	ldr	r3, [r3, #20]
 800e47e:	f003 0301 	and.w	r3, r3, #1
 800e482:	2b01      	cmp	r3, #1
 800e484:	d114      	bne.n	800e4b0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e48a:	69ba      	ldr	r2, [r7, #24]
 800e48c:	8812      	ldrh	r2, [r2, #0]
 800e48e:	b292      	uxth	r2, r2
 800e490:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e496:	1c9a      	adds	r2, r3, #2
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	3b01      	subs	r3, #1
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e4ae:	e06f      	b.n	800e590 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	8bfa      	ldrh	r2, [r7, #30]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d924      	bls.n	800e508 <HAL_SPI_Receive+0x29c>
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d01f      	beq.n	800e508 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4cc:	69ba      	ldr	r2, [r7, #24]
 800e4ce:	8812      	ldrh	r2, [r2, #0]
 800e4d0:	b292      	uxth	r2, r2
 800e4d2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4d8:	1c9a      	adds	r2, r3, #2
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4e2:	69ba      	ldr	r2, [r7, #24]
 800e4e4:	8812      	ldrh	r2, [r2, #0]
 800e4e6:	b292      	uxth	r2, r2
 800e4e8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4ee:	1c9a      	adds	r2, r3, #2
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	3b02      	subs	r3, #2
 800e4fe:	b29a      	uxth	r2, r3
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e506:	e043      	b.n	800e590 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e50e:	b29b      	uxth	r3, r3
 800e510:	2b01      	cmp	r3, #1
 800e512:	d119      	bne.n	800e548 <HAL_SPI_Receive+0x2dc>
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d014      	beq.n	800e548 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e522:	69ba      	ldr	r2, [r7, #24]
 800e524:	8812      	ldrh	r2, [r2, #0]
 800e526:	b292      	uxth	r2, r2
 800e528:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e52e:	1c9a      	adds	r2, r3, #2
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	3b01      	subs	r3, #1
 800e53e:	b29a      	uxth	r2, r3
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e546:	e023      	b.n	800e590 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e548:	f7f5 fd8c 	bl	8004064 <HAL_GetTick>
 800e54c:	4602      	mov	r2, r0
 800e54e:	697b      	ldr	r3, [r7, #20]
 800e550:	1ad3      	subs	r3, r2, r3
 800e552:	683a      	ldr	r2, [r7, #0]
 800e554:	429a      	cmp	r2, r3
 800e556:	d803      	bhi.n	800e560 <HAL_SPI_Receive+0x2f4>
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e55e:	d102      	bne.n	800e566 <HAL_SPI_Receive+0x2fa>
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d114      	bne.n	800e590 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f000 f8f2 	bl	800e750 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e572:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2200      	movs	r2, #0
 800e588:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e58c:	2303      	movs	r3, #3
 800e58e:	e0db      	b.n	800e748 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e596:	b29b      	uxth	r3, r3
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f47f af69 	bne.w	800e470 <HAL_SPI_Receive+0x204>
 800e59e:	e0c0      	b.n	800e722 <HAL_SPI_Receive+0x4b6>
 800e5a0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	695b      	ldr	r3, [r3, #20]
 800e5aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	695b      	ldr	r3, [r3, #20]
 800e5b2:	f003 0301 	and.w	r3, r3, #1
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d117      	bne.n	800e5ea <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5c6:	7812      	ldrb	r2, [r2, #0]
 800e5c8:	b2d2      	uxtb	r2, r2
 800e5ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5d0:	1c5a      	adds	r2, r3, #1
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e5e8:	e094      	b.n	800e714 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	8bfa      	ldrh	r2, [r7, #30]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d946      	bls.n	800e686 <HAL_SPI_Receive+0x41a>
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d041      	beq.n	800e686 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e60e:	7812      	ldrb	r2, [r2, #0]
 800e610:	b2d2      	uxtb	r2, r2
 800e612:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e618:	1c5a      	adds	r2, r3, #1
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e62a:	7812      	ldrb	r2, [r2, #0]
 800e62c:	b2d2      	uxtb	r2, r2
 800e62e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e634:	1c5a      	adds	r2, r3, #1
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e646:	7812      	ldrb	r2, [r2, #0]
 800e648:	b2d2      	uxtb	r2, r2
 800e64a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e650:	1c5a      	adds	r2, r3, #1
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e662:	7812      	ldrb	r2, [r2, #0]
 800e664:	b2d2      	uxtb	r2, r2
 800e666:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e66c:	1c5a      	adds	r2, r3, #1
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e678:	b29b      	uxth	r3, r3
 800e67a:	3b04      	subs	r3, #4
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e684:	e046      	b.n	800e714 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	2b03      	cmp	r3, #3
 800e690:	d81c      	bhi.n	800e6cc <HAL_SPI_Receive+0x460>
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d017      	beq.n	800e6cc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6a8:	7812      	ldrb	r2, [r2, #0]
 800e6aa:	b2d2      	uxtb	r2, r2
 800e6ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6b2:	1c5a      	adds	r2, r3, #1
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	3b01      	subs	r3, #1
 800e6c2:	b29a      	uxth	r2, r3
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6ca:	e023      	b.n	800e714 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e6cc:	f7f5 fcca 	bl	8004064 <HAL_GetTick>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	1ad3      	subs	r3, r2, r3
 800e6d6:	683a      	ldr	r2, [r7, #0]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d803      	bhi.n	800e6e4 <HAL_SPI_Receive+0x478>
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6e2:	d102      	bne.n	800e6ea <HAL_SPI_Receive+0x47e>
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d114      	bne.n	800e714 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f000 f830 	bl	800e750 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2201      	movs	r2, #1
 800e704:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e710:	2303      	movs	r3, #3
 800e712:	e019      	b.n	800e748 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	f47f af41 	bne.w	800e5a4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e722:	68f8      	ldr	r0, [r7, #12]
 800e724:	f000 f814 	bl	800e750 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2201      	movs	r2, #1
 800e72c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2200      	movs	r2, #0
 800e734:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d001      	beq.n	800e746 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e742:	2301      	movs	r3, #1
 800e744:	e000      	b.n	800e748 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e746:	2300      	movs	r3, #0
  }
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3720      	adds	r7, #32
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	695b      	ldr	r3, [r3, #20]
 800e75e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	699a      	ldr	r2, [r3, #24]
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f042 0208 	orr.w	r2, r2, #8
 800e76e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	699a      	ldr	r2, [r3, #24]
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f042 0210 	orr.w	r2, r2, #16
 800e77e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	681a      	ldr	r2, [r3, #0]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f022 0201 	bic.w	r2, r2, #1
 800e78e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	6919      	ldr	r1, [r3, #16]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681a      	ldr	r2, [r3, #0]
 800e79a:	4b3c      	ldr	r3, [pc, #240]	; (800e88c <SPI_CloseTransfer+0x13c>)
 800e79c:	400b      	ands	r3, r1
 800e79e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	689a      	ldr	r2, [r3, #8]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e7ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	2b04      	cmp	r3, #4
 800e7ba:	d014      	beq.n	800e7e6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f003 0320 	and.w	r3, r3, #32
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00f      	beq.n	800e7e6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	699a      	ldr	r2, [r3, #24]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f042 0220 	orr.w	r2, r2, #32
 800e7e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	2b03      	cmp	r3, #3
 800e7f0:	d014      	beq.n	800e81c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d00f      	beq.n	800e81c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e802:	f043 0204 	orr.w	r2, r3, #4
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	699a      	ldr	r2, [r3, #24]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e81a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00f      	beq.n	800e846 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e82c:	f043 0201 	orr.w	r2, r3, #1
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	699a      	ldr	r2, [r3, #24]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e844:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d00f      	beq.n	800e870 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e856:	f043 0208 	orr.w	r2, r3, #8
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	699a      	ldr	r2, [r3, #24]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e86e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e880:	bf00      	nop
 800e882:	3714      	adds	r7, #20
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr
 800e88c:	fffffc90 	.word	0xfffffc90

0800e890 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e890:	b480      	push	{r7}
 800e892:	b085      	sub	sp, #20
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e89c:	095b      	lsrs	r3, r3, #5
 800e89e:	3301      	adds	r3, #1
 800e8a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	3307      	adds	r3, #7
 800e8ae:	08db      	lsrs	r3, r3, #3
 800e8b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	fb02 f303 	mul.w	r3, r2, r3
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3714      	adds	r7, #20
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr

0800e8c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b082      	sub	sp, #8
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d101      	bne.n	800e8d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e049      	b.n	800e96c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d106      	bne.n	800e8f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f7f4 fe49 	bl	8003584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2202      	movs	r2, #2
 800e8f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	3304      	adds	r3, #4
 800e902:	4619      	mov	r1, r3
 800e904:	4610      	mov	r0, r2
 800e906:	f000 fe7d 	bl	800f604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2201      	movs	r2, #1
 800e90e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2201      	movs	r2, #1
 800e916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2201      	movs	r2, #1
 800e91e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2201      	movs	r2, #1
 800e926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2201      	movs	r2, #1
 800e92e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2201      	movs	r2, #1
 800e936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2201      	movs	r2, #1
 800e93e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2201      	movs	r2, #1
 800e946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	2201      	movs	r2, #1
 800e94e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2201      	movs	r2, #1
 800e956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2201      	movs	r2, #1
 800e95e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2201      	movs	r2, #1
 800e966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e974:	b480      	push	{r7}
 800e976:	b085      	sub	sp, #20
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e982:	b2db      	uxtb	r3, r3
 800e984:	2b01      	cmp	r3, #1
 800e986:	d001      	beq.n	800e98c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e988:	2301      	movs	r3, #1
 800e98a:	e054      	b.n	800ea36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2202      	movs	r2, #2
 800e990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	68da      	ldr	r2, [r3, #12]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f042 0201 	orr.w	r2, r2, #1
 800e9a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a26      	ldr	r2, [pc, #152]	; (800ea44 <HAL_TIM_Base_Start_IT+0xd0>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d022      	beq.n	800e9f4 <HAL_TIM_Base_Start_IT+0x80>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9b6:	d01d      	beq.n	800e9f4 <HAL_TIM_Base_Start_IT+0x80>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a22      	ldr	r2, [pc, #136]	; (800ea48 <HAL_TIM_Base_Start_IT+0xd4>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d018      	beq.n	800e9f4 <HAL_TIM_Base_Start_IT+0x80>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4a21      	ldr	r2, [pc, #132]	; (800ea4c <HAL_TIM_Base_Start_IT+0xd8>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d013      	beq.n	800e9f4 <HAL_TIM_Base_Start_IT+0x80>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a1f      	ldr	r2, [pc, #124]	; (800ea50 <HAL_TIM_Base_Start_IT+0xdc>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d00e      	beq.n	800e9f4 <HAL_TIM_Base_Start_IT+0x80>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a1e      	ldr	r2, [pc, #120]	; (800ea54 <HAL_TIM_Base_Start_IT+0xe0>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d009      	beq.n	800e9f4 <HAL_TIM_Base_Start_IT+0x80>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a1c      	ldr	r2, [pc, #112]	; (800ea58 <HAL_TIM_Base_Start_IT+0xe4>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d004      	beq.n	800e9f4 <HAL_TIM_Base_Start_IT+0x80>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4a1b      	ldr	r2, [pc, #108]	; (800ea5c <HAL_TIM_Base_Start_IT+0xe8>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d115      	bne.n	800ea20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	689a      	ldr	r2, [r3, #8]
 800e9fa:	4b19      	ldr	r3, [pc, #100]	; (800ea60 <HAL_TIM_Base_Start_IT+0xec>)
 800e9fc:	4013      	ands	r3, r2
 800e9fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2b06      	cmp	r3, #6
 800ea04:	d015      	beq.n	800ea32 <HAL_TIM_Base_Start_IT+0xbe>
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea0c:	d011      	beq.n	800ea32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	f042 0201 	orr.w	r2, r2, #1
 800ea1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea1e:	e008      	b.n	800ea32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	681a      	ldr	r2, [r3, #0]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f042 0201 	orr.w	r2, r2, #1
 800ea2e:	601a      	str	r2, [r3, #0]
 800ea30:	e000      	b.n	800ea34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ea34:	2300      	movs	r3, #0
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr
 800ea42:	bf00      	nop
 800ea44:	40010000 	.word	0x40010000
 800ea48:	40000400 	.word	0x40000400
 800ea4c:	40000800 	.word	0x40000800
 800ea50:	40000c00 	.word	0x40000c00
 800ea54:	40010400 	.word	0x40010400
 800ea58:	40001800 	.word	0x40001800
 800ea5c:	40014000 	.word	0x40014000
 800ea60:	00010007 	.word	0x00010007

0800ea64 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d109      	bne.n	800ea8c <HAL_TIM_OC_Start_IT+0x28>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	bf14      	ite	ne
 800ea84:	2301      	movne	r3, #1
 800ea86:	2300      	moveq	r3, #0
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	e03c      	b.n	800eb06 <HAL_TIM_OC_Start_IT+0xa2>
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	2b04      	cmp	r3, #4
 800ea90:	d109      	bne.n	800eaa6 <HAL_TIM_OC_Start_IT+0x42>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ea98:	b2db      	uxtb	r3, r3
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	bf14      	ite	ne
 800ea9e:	2301      	movne	r3, #1
 800eaa0:	2300      	moveq	r3, #0
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	e02f      	b.n	800eb06 <HAL_TIM_OC_Start_IT+0xa2>
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	2b08      	cmp	r3, #8
 800eaaa:	d109      	bne.n	800eac0 <HAL_TIM_OC_Start_IT+0x5c>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	bf14      	ite	ne
 800eab8:	2301      	movne	r3, #1
 800eaba:	2300      	moveq	r3, #0
 800eabc:	b2db      	uxtb	r3, r3
 800eabe:	e022      	b.n	800eb06 <HAL_TIM_OC_Start_IT+0xa2>
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	2b0c      	cmp	r3, #12
 800eac4:	d109      	bne.n	800eada <HAL_TIM_OC_Start_IT+0x76>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	2b01      	cmp	r3, #1
 800ead0:	bf14      	ite	ne
 800ead2:	2301      	movne	r3, #1
 800ead4:	2300      	moveq	r3, #0
 800ead6:	b2db      	uxtb	r3, r3
 800ead8:	e015      	b.n	800eb06 <HAL_TIM_OC_Start_IT+0xa2>
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	2b10      	cmp	r3, #16
 800eade:	d109      	bne.n	800eaf4 <HAL_TIM_OC_Start_IT+0x90>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	bf14      	ite	ne
 800eaec:	2301      	movne	r3, #1
 800eaee:	2300      	moveq	r3, #0
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	e008      	b.n	800eb06 <HAL_TIM_OC_Start_IT+0xa2>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eafa:	b2db      	uxtb	r3, r3
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	bf14      	ite	ne
 800eb00:	2301      	movne	r3, #1
 800eb02:	2300      	moveq	r3, #0
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d001      	beq.n	800eb0e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	e0ec      	b.n	800ece8 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d104      	bne.n	800eb1e <HAL_TIM_OC_Start_IT+0xba>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2202      	movs	r2, #2
 800eb18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb1c:	e023      	b.n	800eb66 <HAL_TIM_OC_Start_IT+0x102>
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	2b04      	cmp	r3, #4
 800eb22:	d104      	bne.n	800eb2e <HAL_TIM_OC_Start_IT+0xca>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2202      	movs	r2, #2
 800eb28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb2c:	e01b      	b.n	800eb66 <HAL_TIM_OC_Start_IT+0x102>
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	2b08      	cmp	r3, #8
 800eb32:	d104      	bne.n	800eb3e <HAL_TIM_OC_Start_IT+0xda>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2202      	movs	r2, #2
 800eb38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb3c:	e013      	b.n	800eb66 <HAL_TIM_OC_Start_IT+0x102>
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	2b0c      	cmp	r3, #12
 800eb42:	d104      	bne.n	800eb4e <HAL_TIM_OC_Start_IT+0xea>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2202      	movs	r2, #2
 800eb48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb4c:	e00b      	b.n	800eb66 <HAL_TIM_OC_Start_IT+0x102>
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	2b10      	cmp	r3, #16
 800eb52:	d104      	bne.n	800eb5e <HAL_TIM_OC_Start_IT+0xfa>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2202      	movs	r2, #2
 800eb58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb5c:	e003      	b.n	800eb66 <HAL_TIM_OC_Start_IT+0x102>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2202      	movs	r2, #2
 800eb62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	2b0c      	cmp	r3, #12
 800eb6a:	d841      	bhi.n	800ebf0 <HAL_TIM_OC_Start_IT+0x18c>
 800eb6c:	a201      	add	r2, pc, #4	; (adr r2, 800eb74 <HAL_TIM_OC_Start_IT+0x110>)
 800eb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb72:	bf00      	nop
 800eb74:	0800eba9 	.word	0x0800eba9
 800eb78:	0800ebf1 	.word	0x0800ebf1
 800eb7c:	0800ebf1 	.word	0x0800ebf1
 800eb80:	0800ebf1 	.word	0x0800ebf1
 800eb84:	0800ebbb 	.word	0x0800ebbb
 800eb88:	0800ebf1 	.word	0x0800ebf1
 800eb8c:	0800ebf1 	.word	0x0800ebf1
 800eb90:	0800ebf1 	.word	0x0800ebf1
 800eb94:	0800ebcd 	.word	0x0800ebcd
 800eb98:	0800ebf1 	.word	0x0800ebf1
 800eb9c:	0800ebf1 	.word	0x0800ebf1
 800eba0:	0800ebf1 	.word	0x0800ebf1
 800eba4:	0800ebdf 	.word	0x0800ebdf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	68da      	ldr	r2, [r3, #12]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f042 0202 	orr.w	r2, r2, #2
 800ebb6:	60da      	str	r2, [r3, #12]
      break;
 800ebb8:	e01d      	b.n	800ebf6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	68da      	ldr	r2, [r3, #12]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	f042 0204 	orr.w	r2, r2, #4
 800ebc8:	60da      	str	r2, [r3, #12]
      break;
 800ebca:	e014      	b.n	800ebf6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	68da      	ldr	r2, [r3, #12]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f042 0208 	orr.w	r2, r2, #8
 800ebda:	60da      	str	r2, [r3, #12]
      break;
 800ebdc:	e00b      	b.n	800ebf6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	68da      	ldr	r2, [r3, #12]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f042 0210 	orr.w	r2, r2, #16
 800ebec:	60da      	str	r2, [r3, #12]
      break;
 800ebee:	e002      	b.n	800ebf6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	73fb      	strb	r3, [r7, #15]
      break;
 800ebf4:	bf00      	nop
  }

  if (status == HAL_OK)
 800ebf6:	7bfb      	ldrb	r3, [r7, #15]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d174      	bne.n	800ece6 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	2201      	movs	r2, #1
 800ec02:	6839      	ldr	r1, [r7, #0]
 800ec04:	4618      	mov	r0, r3
 800ec06:	f001 f917 	bl	800fe38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	4a38      	ldr	r2, [pc, #224]	; (800ecf0 <HAL_TIM_OC_Start_IT+0x28c>)
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d013      	beq.n	800ec3c <HAL_TIM_OC_Start_IT+0x1d8>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4a36      	ldr	r2, [pc, #216]	; (800ecf4 <HAL_TIM_OC_Start_IT+0x290>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d00e      	beq.n	800ec3c <HAL_TIM_OC_Start_IT+0x1d8>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	4a35      	ldr	r2, [pc, #212]	; (800ecf8 <HAL_TIM_OC_Start_IT+0x294>)
 800ec24:	4293      	cmp	r3, r2
 800ec26:	d009      	beq.n	800ec3c <HAL_TIM_OC_Start_IT+0x1d8>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	4a33      	ldr	r2, [pc, #204]	; (800ecfc <HAL_TIM_OC_Start_IT+0x298>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d004      	beq.n	800ec3c <HAL_TIM_OC_Start_IT+0x1d8>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4a32      	ldr	r2, [pc, #200]	; (800ed00 <HAL_TIM_OC_Start_IT+0x29c>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d101      	bne.n	800ec40 <HAL_TIM_OC_Start_IT+0x1dc>
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	e000      	b.n	800ec42 <HAL_TIM_OC_Start_IT+0x1de>
 800ec40:	2300      	movs	r3, #0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d007      	beq.n	800ec56 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ec54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	4a25      	ldr	r2, [pc, #148]	; (800ecf0 <HAL_TIM_OC_Start_IT+0x28c>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d022      	beq.n	800eca6 <HAL_TIM_OC_Start_IT+0x242>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec68:	d01d      	beq.n	800eca6 <HAL_TIM_OC_Start_IT+0x242>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	4a25      	ldr	r2, [pc, #148]	; (800ed04 <HAL_TIM_OC_Start_IT+0x2a0>)
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d018      	beq.n	800eca6 <HAL_TIM_OC_Start_IT+0x242>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4a23      	ldr	r2, [pc, #140]	; (800ed08 <HAL_TIM_OC_Start_IT+0x2a4>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d013      	beq.n	800eca6 <HAL_TIM_OC_Start_IT+0x242>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	4a22      	ldr	r2, [pc, #136]	; (800ed0c <HAL_TIM_OC_Start_IT+0x2a8>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d00e      	beq.n	800eca6 <HAL_TIM_OC_Start_IT+0x242>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4a19      	ldr	r2, [pc, #100]	; (800ecf4 <HAL_TIM_OC_Start_IT+0x290>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d009      	beq.n	800eca6 <HAL_TIM_OC_Start_IT+0x242>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4a1e      	ldr	r2, [pc, #120]	; (800ed10 <HAL_TIM_OC_Start_IT+0x2ac>)
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d004      	beq.n	800eca6 <HAL_TIM_OC_Start_IT+0x242>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4a15      	ldr	r2, [pc, #84]	; (800ecf8 <HAL_TIM_OC_Start_IT+0x294>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d115      	bne.n	800ecd2 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	689a      	ldr	r2, [r3, #8]
 800ecac:	4b19      	ldr	r3, [pc, #100]	; (800ed14 <HAL_TIM_OC_Start_IT+0x2b0>)
 800ecae:	4013      	ands	r3, r2
 800ecb0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2b06      	cmp	r3, #6
 800ecb6:	d015      	beq.n	800ece4 <HAL_TIM_OC_Start_IT+0x280>
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecbe:	d011      	beq.n	800ece4 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	681a      	ldr	r2, [r3, #0]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	f042 0201 	orr.w	r2, r2, #1
 800ecce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ecd0:	e008      	b.n	800ece4 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	681a      	ldr	r2, [r3, #0]
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f042 0201 	orr.w	r2, r2, #1
 800ece0:	601a      	str	r2, [r3, #0]
 800ece2:	e000      	b.n	800ece6 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ece4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800ece6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3710      	adds	r7, #16
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	40010000 	.word	0x40010000
 800ecf4:	40010400 	.word	0x40010400
 800ecf8:	40014000 	.word	0x40014000
 800ecfc:	40014400 	.word	0x40014400
 800ed00:	40014800 	.word	0x40014800
 800ed04:	40000400 	.word	0x40000400
 800ed08:	40000800 	.word	0x40000800
 800ed0c:	40000c00 	.word	0x40000c00
 800ed10:	40001800 	.word	0x40001800
 800ed14:	00010007 	.word	0x00010007

0800ed18 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed22:	2300      	movs	r3, #0
 800ed24:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	2b0c      	cmp	r3, #12
 800ed2a:	d841      	bhi.n	800edb0 <HAL_TIM_OC_Stop_IT+0x98>
 800ed2c:	a201      	add	r2, pc, #4	; (adr r2, 800ed34 <HAL_TIM_OC_Stop_IT+0x1c>)
 800ed2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed32:	bf00      	nop
 800ed34:	0800ed69 	.word	0x0800ed69
 800ed38:	0800edb1 	.word	0x0800edb1
 800ed3c:	0800edb1 	.word	0x0800edb1
 800ed40:	0800edb1 	.word	0x0800edb1
 800ed44:	0800ed7b 	.word	0x0800ed7b
 800ed48:	0800edb1 	.word	0x0800edb1
 800ed4c:	0800edb1 	.word	0x0800edb1
 800ed50:	0800edb1 	.word	0x0800edb1
 800ed54:	0800ed8d 	.word	0x0800ed8d
 800ed58:	0800edb1 	.word	0x0800edb1
 800ed5c:	0800edb1 	.word	0x0800edb1
 800ed60:	0800edb1 	.word	0x0800edb1
 800ed64:	0800ed9f 	.word	0x0800ed9f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	68da      	ldr	r2, [r3, #12]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f022 0202 	bic.w	r2, r2, #2
 800ed76:	60da      	str	r2, [r3, #12]
      break;
 800ed78:	e01d      	b.n	800edb6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	68da      	ldr	r2, [r3, #12]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f022 0204 	bic.w	r2, r2, #4
 800ed88:	60da      	str	r2, [r3, #12]
      break;
 800ed8a:	e014      	b.n	800edb6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	68da      	ldr	r2, [r3, #12]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f022 0208 	bic.w	r2, r2, #8
 800ed9a:	60da      	str	r2, [r3, #12]
      break;
 800ed9c:	e00b      	b.n	800edb6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	68da      	ldr	r2, [r3, #12]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f022 0210 	bic.w	r2, r2, #16
 800edac:	60da      	str	r2, [r3, #12]
      break;
 800edae:	e002      	b.n	800edb6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800edb0:	2301      	movs	r3, #1
 800edb2:	73fb      	strb	r3, [r7, #15]
      break;
 800edb4:	bf00      	nop
  }

  if (status == HAL_OK)
 800edb6:	7bfb      	ldrb	r3, [r7, #15]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	f040 8081 	bne.w	800eec0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	2200      	movs	r2, #0
 800edc4:	6839      	ldr	r1, [r7, #0]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f001 f836 	bl	800fe38 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a3e      	ldr	r2, [pc, #248]	; (800eecc <HAL_TIM_OC_Stop_IT+0x1b4>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d013      	beq.n	800edfe <HAL_TIM_OC_Stop_IT+0xe6>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a3d      	ldr	r2, [pc, #244]	; (800eed0 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d00e      	beq.n	800edfe <HAL_TIM_OC_Stop_IT+0xe6>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	4a3b      	ldr	r2, [pc, #236]	; (800eed4 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d009      	beq.n	800edfe <HAL_TIM_OC_Stop_IT+0xe6>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4a3a      	ldr	r2, [pc, #232]	; (800eed8 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d004      	beq.n	800edfe <HAL_TIM_OC_Stop_IT+0xe6>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a38      	ldr	r2, [pc, #224]	; (800eedc <HAL_TIM_OC_Stop_IT+0x1c4>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d101      	bne.n	800ee02 <HAL_TIM_OC_Stop_IT+0xea>
 800edfe:	2301      	movs	r3, #1
 800ee00:	e000      	b.n	800ee04 <HAL_TIM_OC_Stop_IT+0xec>
 800ee02:	2300      	movs	r3, #0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d017      	beq.n	800ee38 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	6a1a      	ldr	r2, [r3, #32]
 800ee0e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ee12:	4013      	ands	r3, r2
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d10f      	bne.n	800ee38 <HAL_TIM_OC_Stop_IT+0x120>
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	6a1a      	ldr	r2, [r3, #32]
 800ee1e:	f240 4344 	movw	r3, #1092	; 0x444
 800ee22:	4013      	ands	r3, r2
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d107      	bne.n	800ee38 <HAL_TIM_OC_Stop_IT+0x120>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ee36:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	6a1a      	ldr	r2, [r3, #32]
 800ee3e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ee42:	4013      	ands	r3, r2
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10f      	bne.n	800ee68 <HAL_TIM_OC_Stop_IT+0x150>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	6a1a      	ldr	r2, [r3, #32]
 800ee4e:	f240 4344 	movw	r3, #1092	; 0x444
 800ee52:	4013      	ands	r3, r2
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d107      	bne.n	800ee68 <HAL_TIM_OC_Stop_IT+0x150>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	681a      	ldr	r2, [r3, #0]
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f022 0201 	bic.w	r2, r2, #1
 800ee66:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d104      	bne.n	800ee78 <HAL_TIM_OC_Stop_IT+0x160>
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2201      	movs	r2, #1
 800ee72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee76:	e023      	b.n	800eec0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	2b04      	cmp	r3, #4
 800ee7c:	d104      	bne.n	800ee88 <HAL_TIM_OC_Stop_IT+0x170>
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	2201      	movs	r2, #1
 800ee82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee86:	e01b      	b.n	800eec0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	2b08      	cmp	r3, #8
 800ee8c:	d104      	bne.n	800ee98 <HAL_TIM_OC_Stop_IT+0x180>
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2201      	movs	r2, #1
 800ee92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee96:	e013      	b.n	800eec0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	2b0c      	cmp	r3, #12
 800ee9c:	d104      	bne.n	800eea8 <HAL_TIM_OC_Stop_IT+0x190>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2201      	movs	r2, #1
 800eea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eea6:	e00b      	b.n	800eec0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	2b10      	cmp	r3, #16
 800eeac:	d104      	bne.n	800eeb8 <HAL_TIM_OC_Stop_IT+0x1a0>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eeb6:	e003      	b.n	800eec0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2201      	movs	r2, #1
 800eebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800eec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3710      	adds	r7, #16
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	40010000 	.word	0x40010000
 800eed0:	40010400 	.word	0x40010400
 800eed4:	40014000 	.word	0x40014000
 800eed8:	40014400 	.word	0x40014400
 800eedc:	40014800 	.word	0x40014800

0800eee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d101      	bne.n	800eef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eeee:	2301      	movs	r3, #1
 800eef0:	e049      	b.n	800ef86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eef8:	b2db      	uxtb	r3, r3
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d106      	bne.n	800ef0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2200      	movs	r2, #0
 800ef02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 f841 	bl	800ef8e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2202      	movs	r2, #2
 800ef10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	3304      	adds	r3, #4
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	4610      	mov	r0, r2
 800ef20:	f000 fb70 	bl	800f604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2201      	movs	r2, #1
 800ef28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2201      	movs	r2, #1
 800ef38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2201      	movs	r2, #1
 800ef48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2201      	movs	r2, #1
 800ef58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2201      	movs	r2, #1
 800ef60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2201      	movs	r2, #1
 800ef68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2201      	movs	r2, #1
 800ef70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2201      	movs	r2, #1
 800ef78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2201      	movs	r2, #1
 800ef80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef84:	2300      	movs	r3, #0
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	3708      	adds	r7, #8
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	bd80      	pop	{r7, pc}

0800ef8e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ef8e:	b480      	push	{r7}
 800ef90:	b083      	sub	sp, #12
 800ef92:	af00      	add	r7, sp, #0
 800ef94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ef96:	bf00      	nop
 800ef98:	370c      	adds	r7, #12
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr

0800efa2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800efa2:	b580      	push	{r7, lr}
 800efa4:	b084      	sub	sp, #16
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	691b      	ldr	r3, [r3, #16]
 800efb8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	f003 0302 	and.w	r3, r3, #2
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d020      	beq.n	800f006 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f003 0302 	and.w	r3, r3, #2
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d01b      	beq.n	800f006 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f06f 0202 	mvn.w	r2, #2
 800efd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2201      	movs	r2, #1
 800efdc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	699b      	ldr	r3, [r3, #24]
 800efe4:	f003 0303 	and.w	r3, r3, #3
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d003      	beq.n	800eff4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f000 faeb 	bl	800f5c8 <HAL_TIM_IC_CaptureCallback>
 800eff2:	e005      	b.n	800f000 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f7f2 f9f1 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 faee 	bl	800f5dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2200      	movs	r2, #0
 800f004:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	f003 0304 	and.w	r3, r3, #4
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d020      	beq.n	800f052 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f003 0304 	and.w	r3, r3, #4
 800f016:	2b00      	cmp	r3, #0
 800f018:	d01b      	beq.n	800f052 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	f06f 0204 	mvn.w	r2, #4
 800f022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2202      	movs	r2, #2
 800f028:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	699b      	ldr	r3, [r3, #24]
 800f030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f034:	2b00      	cmp	r3, #0
 800f036:	d003      	beq.n	800f040 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f000 fac5 	bl	800f5c8 <HAL_TIM_IC_CaptureCallback>
 800f03e:	e005      	b.n	800f04c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f7f2 f9cb 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 fac8 	bl	800f5dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2200      	movs	r2, #0
 800f050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	f003 0308 	and.w	r3, r3, #8
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d020      	beq.n	800f09e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f003 0308 	and.w	r3, r3, #8
 800f062:	2b00      	cmp	r3, #0
 800f064:	d01b      	beq.n	800f09e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	f06f 0208 	mvn.w	r2, #8
 800f06e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2204      	movs	r2, #4
 800f074:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	69db      	ldr	r3, [r3, #28]
 800f07c:	f003 0303 	and.w	r3, r3, #3
 800f080:	2b00      	cmp	r3, #0
 800f082:	d003      	beq.n	800f08c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 fa9f 	bl	800f5c8 <HAL_TIM_IC_CaptureCallback>
 800f08a:	e005      	b.n	800f098 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f7f2 f9a5 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 faa2 	bl	800f5dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	f003 0310 	and.w	r3, r3, #16
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d020      	beq.n	800f0ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f003 0310 	and.w	r3, r3, #16
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d01b      	beq.n	800f0ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	f06f 0210 	mvn.w	r2, #16
 800f0ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2208      	movs	r2, #8
 800f0c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	69db      	ldr	r3, [r3, #28]
 800f0c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d003      	beq.n	800f0d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f000 fa79 	bl	800f5c8 <HAL_TIM_IC_CaptureCallback>
 800f0d6:	e005      	b.n	800f0e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7f2 f97f 	bl	80013dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 fa7c 	bl	800f5dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	f003 0301 	and.w	r3, r3, #1
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d00c      	beq.n	800f10e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f003 0301 	and.w	r3, r3, #1
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d007      	beq.n	800f10e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	f06f 0201 	mvn.w	r2, #1
 800f106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f7f2 ffc3 	bl	8002094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f114:	2b00      	cmp	r3, #0
 800f116:	d104      	bne.n	800f122 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00c      	beq.n	800f13c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d007      	beq.n	800f13c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 ffba 	bl	80100b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00c      	beq.n	800f160 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d007      	beq.n	800f160 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 ffb2 	bl	80100c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f166:	2b00      	cmp	r3, #0
 800f168:	d00c      	beq.n	800f184 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f170:	2b00      	cmp	r3, #0
 800f172:	d007      	beq.n	800f184 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f17c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f000 fa36 	bl	800f5f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	f003 0320 	and.w	r3, r3, #32
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00c      	beq.n	800f1a8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f003 0320 	and.w	r3, r3, #32
 800f194:	2b00      	cmp	r3, #0
 800f196:	d007      	beq.n	800f1a8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f06f 0220 	mvn.w	r2, #32
 800f1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f000 ff7a 	bl	801009c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f1a8:	bf00      	nop
 800f1aa:	3710      	adds	r7, #16
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b086      	sub	sp, #24
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d101      	bne.n	800f1ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f1ca:	2302      	movs	r3, #2
 800f1cc:	e0ff      	b.n	800f3ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2201      	movs	r2, #1
 800f1d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2b14      	cmp	r3, #20
 800f1da:	f200 80f0 	bhi.w	800f3be <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f1de:	a201      	add	r2, pc, #4	; (adr r2, 800f1e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e4:	0800f239 	.word	0x0800f239
 800f1e8:	0800f3bf 	.word	0x0800f3bf
 800f1ec:	0800f3bf 	.word	0x0800f3bf
 800f1f0:	0800f3bf 	.word	0x0800f3bf
 800f1f4:	0800f279 	.word	0x0800f279
 800f1f8:	0800f3bf 	.word	0x0800f3bf
 800f1fc:	0800f3bf 	.word	0x0800f3bf
 800f200:	0800f3bf 	.word	0x0800f3bf
 800f204:	0800f2bb 	.word	0x0800f2bb
 800f208:	0800f3bf 	.word	0x0800f3bf
 800f20c:	0800f3bf 	.word	0x0800f3bf
 800f210:	0800f3bf 	.word	0x0800f3bf
 800f214:	0800f2fb 	.word	0x0800f2fb
 800f218:	0800f3bf 	.word	0x0800f3bf
 800f21c:	0800f3bf 	.word	0x0800f3bf
 800f220:	0800f3bf 	.word	0x0800f3bf
 800f224:	0800f33d 	.word	0x0800f33d
 800f228:	0800f3bf 	.word	0x0800f3bf
 800f22c:	0800f3bf 	.word	0x0800f3bf
 800f230:	0800f3bf 	.word	0x0800f3bf
 800f234:	0800f37d 	.word	0x0800f37d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	68b9      	ldr	r1, [r7, #8]
 800f23e:	4618      	mov	r0, r3
 800f240:	f000 fa86 	bl	800f750 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	699a      	ldr	r2, [r3, #24]
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f042 0208 	orr.w	r2, r2, #8
 800f252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	699a      	ldr	r2, [r3, #24]
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f022 0204 	bic.w	r2, r2, #4
 800f262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	6999      	ldr	r1, [r3, #24]
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	691a      	ldr	r2, [r3, #16]
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	430a      	orrs	r2, r1
 800f274:	619a      	str	r2, [r3, #24]
      break;
 800f276:	e0a5      	b.n	800f3c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	68b9      	ldr	r1, [r7, #8]
 800f27e:	4618      	mov	r0, r3
 800f280:	f000 faf6 	bl	800f870 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	699a      	ldr	r2, [r3, #24]
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	699a      	ldr	r2, [r3, #24]
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f2a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	6999      	ldr	r1, [r3, #24]
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	691b      	ldr	r3, [r3, #16]
 800f2ae:	021a      	lsls	r2, r3, #8
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	430a      	orrs	r2, r1
 800f2b6:	619a      	str	r2, [r3, #24]
      break;
 800f2b8:	e084      	b.n	800f3c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	68b9      	ldr	r1, [r7, #8]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f000 fb5f 	bl	800f984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	69da      	ldr	r2, [r3, #28]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f042 0208 	orr.w	r2, r2, #8
 800f2d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	69da      	ldr	r2, [r3, #28]
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f022 0204 	bic.w	r2, r2, #4
 800f2e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	69d9      	ldr	r1, [r3, #28]
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	691a      	ldr	r2, [r3, #16]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	430a      	orrs	r2, r1
 800f2f6:	61da      	str	r2, [r3, #28]
      break;
 800f2f8:	e064      	b.n	800f3c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	68b9      	ldr	r1, [r7, #8]
 800f300:	4618      	mov	r0, r3
 800f302:	f000 fbc7 	bl	800fa94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	69da      	ldr	r2, [r3, #28]
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	69da      	ldr	r2, [r3, #28]
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	69d9      	ldr	r1, [r3, #28]
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	691b      	ldr	r3, [r3, #16]
 800f330:	021a      	lsls	r2, r3, #8
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	430a      	orrs	r2, r1
 800f338:	61da      	str	r2, [r3, #28]
      break;
 800f33a:	e043      	b.n	800f3c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	68b9      	ldr	r1, [r7, #8]
 800f342:	4618      	mov	r0, r3
 800f344:	f000 fc10 	bl	800fb68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f042 0208 	orr.w	r2, r2, #8
 800f356:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f022 0204 	bic.w	r2, r2, #4
 800f366:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	691a      	ldr	r2, [r3, #16]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	430a      	orrs	r2, r1
 800f378:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f37a:	e023      	b.n	800f3c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	68b9      	ldr	r1, [r7, #8]
 800f382:	4618      	mov	r0, r3
 800f384:	f000 fc54 	bl	800fc30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f396:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f3a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	691b      	ldr	r3, [r3, #16]
 800f3b2:	021a      	lsls	r2, r3, #8
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	430a      	orrs	r2, r1
 800f3ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f3bc:	e002      	b.n	800f3c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f3be:	2301      	movs	r3, #1
 800f3c0:	75fb      	strb	r3, [r7, #23]
      break;
 800f3c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f3cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3718      	adds	r7, #24
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop

0800f3d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d101      	bne.n	800f3f4 <HAL_TIM_ConfigClockSource+0x1c>
 800f3f0:	2302      	movs	r3, #2
 800f3f2:	e0dc      	b.n	800f5ae <HAL_TIM_ConfigClockSource+0x1d6>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2202      	movs	r2, #2
 800f400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	689b      	ldr	r3, [r3, #8]
 800f40a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f40c:	68ba      	ldr	r2, [r7, #8]
 800f40e:	4b6a      	ldr	r3, [pc, #424]	; (800f5b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f410:	4013      	ands	r3, r2
 800f412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f41a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	68ba      	ldr	r2, [r7, #8]
 800f422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4a64      	ldr	r2, [pc, #400]	; (800f5bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	f000 80a9 	beq.w	800f582 <HAL_TIM_ConfigClockSource+0x1aa>
 800f430:	4a62      	ldr	r2, [pc, #392]	; (800f5bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800f432:	4293      	cmp	r3, r2
 800f434:	f200 80ae 	bhi.w	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
 800f438:	4a61      	ldr	r2, [pc, #388]	; (800f5c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	f000 80a1 	beq.w	800f582 <HAL_TIM_ConfigClockSource+0x1aa>
 800f440:	4a5f      	ldr	r2, [pc, #380]	; (800f5c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f442:	4293      	cmp	r3, r2
 800f444:	f200 80a6 	bhi.w	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
 800f448:	4a5e      	ldr	r2, [pc, #376]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f44a:	4293      	cmp	r3, r2
 800f44c:	f000 8099 	beq.w	800f582 <HAL_TIM_ConfigClockSource+0x1aa>
 800f450:	4a5c      	ldr	r2, [pc, #368]	; (800f5c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f452:	4293      	cmp	r3, r2
 800f454:	f200 809e 	bhi.w	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
 800f458:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f45c:	f000 8091 	beq.w	800f582 <HAL_TIM_ConfigClockSource+0x1aa>
 800f460:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f464:	f200 8096 	bhi.w	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
 800f468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f46c:	f000 8089 	beq.w	800f582 <HAL_TIM_ConfigClockSource+0x1aa>
 800f470:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f474:	f200 808e 	bhi.w	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
 800f478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f47c:	d03e      	beq.n	800f4fc <HAL_TIM_ConfigClockSource+0x124>
 800f47e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f482:	f200 8087 	bhi.w	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
 800f486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f48a:	f000 8086 	beq.w	800f59a <HAL_TIM_ConfigClockSource+0x1c2>
 800f48e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f492:	d87f      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
 800f494:	2b70      	cmp	r3, #112	; 0x70
 800f496:	d01a      	beq.n	800f4ce <HAL_TIM_ConfigClockSource+0xf6>
 800f498:	2b70      	cmp	r3, #112	; 0x70
 800f49a:	d87b      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
 800f49c:	2b60      	cmp	r3, #96	; 0x60
 800f49e:	d050      	beq.n	800f542 <HAL_TIM_ConfigClockSource+0x16a>
 800f4a0:	2b60      	cmp	r3, #96	; 0x60
 800f4a2:	d877      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4a4:	2b50      	cmp	r3, #80	; 0x50
 800f4a6:	d03c      	beq.n	800f522 <HAL_TIM_ConfigClockSource+0x14a>
 800f4a8:	2b50      	cmp	r3, #80	; 0x50
 800f4aa:	d873      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4ac:	2b40      	cmp	r3, #64	; 0x40
 800f4ae:	d058      	beq.n	800f562 <HAL_TIM_ConfigClockSource+0x18a>
 800f4b0:	2b40      	cmp	r3, #64	; 0x40
 800f4b2:	d86f      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4b4:	2b30      	cmp	r3, #48	; 0x30
 800f4b6:	d064      	beq.n	800f582 <HAL_TIM_ConfigClockSource+0x1aa>
 800f4b8:	2b30      	cmp	r3, #48	; 0x30
 800f4ba:	d86b      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4bc:	2b20      	cmp	r3, #32
 800f4be:	d060      	beq.n	800f582 <HAL_TIM_ConfigClockSource+0x1aa>
 800f4c0:	2b20      	cmp	r3, #32
 800f4c2:	d867      	bhi.n	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d05c      	beq.n	800f582 <HAL_TIM_ConfigClockSource+0x1aa>
 800f4c8:	2b10      	cmp	r3, #16
 800f4ca:	d05a      	beq.n	800f582 <HAL_TIM_ConfigClockSource+0x1aa>
 800f4cc:	e062      	b.n	800f594 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6818      	ldr	r0, [r3, #0]
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	6899      	ldr	r1, [r3, #8]
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	685a      	ldr	r2, [r3, #4]
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	f000 fc8b 	bl	800fdf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	689b      	ldr	r3, [r3, #8]
 800f4e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f4f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	68ba      	ldr	r2, [r7, #8]
 800f4f8:	609a      	str	r2, [r3, #8]
      break;
 800f4fa:	e04f      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6818      	ldr	r0, [r3, #0]
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	6899      	ldr	r1, [r3, #8]
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	685a      	ldr	r2, [r3, #4]
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	68db      	ldr	r3, [r3, #12]
 800f50c:	f000 fc74 	bl	800fdf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	689a      	ldr	r2, [r3, #8]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f51e:	609a      	str	r2, [r3, #8]
      break;
 800f520:	e03c      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6818      	ldr	r0, [r3, #0]
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	6859      	ldr	r1, [r3, #4]
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	461a      	mov	r2, r3
 800f530:	f000 fbe4 	bl	800fcfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2150      	movs	r1, #80	; 0x50
 800f53a:	4618      	mov	r0, r3
 800f53c:	f000 fc3e 	bl	800fdbc <TIM_ITRx_SetConfig>
      break;
 800f540:	e02c      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6818      	ldr	r0, [r3, #0]
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	6859      	ldr	r1, [r3, #4]
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	461a      	mov	r2, r3
 800f550:	f000 fc03 	bl	800fd5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	2160      	movs	r1, #96	; 0x60
 800f55a:	4618      	mov	r0, r3
 800f55c:	f000 fc2e 	bl	800fdbc <TIM_ITRx_SetConfig>
      break;
 800f560:	e01c      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6818      	ldr	r0, [r3, #0]
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	6859      	ldr	r1, [r3, #4]
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	68db      	ldr	r3, [r3, #12]
 800f56e:	461a      	mov	r2, r3
 800f570:	f000 fbc4 	bl	800fcfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2140      	movs	r1, #64	; 0x40
 800f57a:	4618      	mov	r0, r3
 800f57c:	f000 fc1e 	bl	800fdbc <TIM_ITRx_SetConfig>
      break;
 800f580:	e00c      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4619      	mov	r1, r3
 800f58c:	4610      	mov	r0, r2
 800f58e:	f000 fc15 	bl	800fdbc <TIM_ITRx_SetConfig>
      break;
 800f592:	e003      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f594:	2301      	movs	r3, #1
 800f596:	73fb      	strb	r3, [r7, #15]
      break;
 800f598:	e000      	b.n	800f59c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f59a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2201      	movs	r2, #1
 800f5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3710      	adds	r7, #16
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	ffceff88 	.word	0xffceff88
 800f5bc:	00100040 	.word	0x00100040
 800f5c0:	00100030 	.word	0x00100030
 800f5c4:	00100020 	.word	0x00100020

0800f5c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b083      	sub	sp, #12
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f5d0:	bf00      	nop
 800f5d2:	370c      	adds	r7, #12
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr

0800f5dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b083      	sub	sp, #12
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f5e4:	bf00      	nop
 800f5e6:	370c      	adds	r7, #12
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ee:	4770      	bx	lr

0800f5f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f5f0:	b480      	push	{r7}
 800f5f2:	b083      	sub	sp, #12
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f5f8:	bf00      	nop
 800f5fa:	370c      	adds	r7, #12
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f602:	4770      	bx	lr

0800f604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f604:	b480      	push	{r7}
 800f606:	b085      	sub	sp, #20
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
 800f60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	4a46      	ldr	r2, [pc, #280]	; (800f730 <TIM_Base_SetConfig+0x12c>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d013      	beq.n	800f644 <TIM_Base_SetConfig+0x40>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f622:	d00f      	beq.n	800f644 <TIM_Base_SetConfig+0x40>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	4a43      	ldr	r2, [pc, #268]	; (800f734 <TIM_Base_SetConfig+0x130>)
 800f628:	4293      	cmp	r3, r2
 800f62a:	d00b      	beq.n	800f644 <TIM_Base_SetConfig+0x40>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	4a42      	ldr	r2, [pc, #264]	; (800f738 <TIM_Base_SetConfig+0x134>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d007      	beq.n	800f644 <TIM_Base_SetConfig+0x40>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	4a41      	ldr	r2, [pc, #260]	; (800f73c <TIM_Base_SetConfig+0x138>)
 800f638:	4293      	cmp	r3, r2
 800f63a:	d003      	beq.n	800f644 <TIM_Base_SetConfig+0x40>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	4a40      	ldr	r2, [pc, #256]	; (800f740 <TIM_Base_SetConfig+0x13c>)
 800f640:	4293      	cmp	r3, r2
 800f642:	d108      	bne.n	800f656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f64a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	68fa      	ldr	r2, [r7, #12]
 800f652:	4313      	orrs	r3, r2
 800f654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4a35      	ldr	r2, [pc, #212]	; (800f730 <TIM_Base_SetConfig+0x12c>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d01f      	beq.n	800f69e <TIM_Base_SetConfig+0x9a>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f664:	d01b      	beq.n	800f69e <TIM_Base_SetConfig+0x9a>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	4a32      	ldr	r2, [pc, #200]	; (800f734 <TIM_Base_SetConfig+0x130>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d017      	beq.n	800f69e <TIM_Base_SetConfig+0x9a>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	4a31      	ldr	r2, [pc, #196]	; (800f738 <TIM_Base_SetConfig+0x134>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d013      	beq.n	800f69e <TIM_Base_SetConfig+0x9a>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	4a30      	ldr	r2, [pc, #192]	; (800f73c <TIM_Base_SetConfig+0x138>)
 800f67a:	4293      	cmp	r3, r2
 800f67c:	d00f      	beq.n	800f69e <TIM_Base_SetConfig+0x9a>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	4a2f      	ldr	r2, [pc, #188]	; (800f740 <TIM_Base_SetConfig+0x13c>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d00b      	beq.n	800f69e <TIM_Base_SetConfig+0x9a>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	4a2e      	ldr	r2, [pc, #184]	; (800f744 <TIM_Base_SetConfig+0x140>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d007      	beq.n	800f69e <TIM_Base_SetConfig+0x9a>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4a2d      	ldr	r2, [pc, #180]	; (800f748 <TIM_Base_SetConfig+0x144>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d003      	beq.n	800f69e <TIM_Base_SetConfig+0x9a>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4a2c      	ldr	r2, [pc, #176]	; (800f74c <TIM_Base_SetConfig+0x148>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d108      	bne.n	800f6b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	695b      	ldr	r3, [r3, #20]
 800f6ba:	4313      	orrs	r3, r2
 800f6bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	689a      	ldr	r2, [r3, #8]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	681a      	ldr	r2, [r3, #0]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	4a16      	ldr	r2, [pc, #88]	; (800f730 <TIM_Base_SetConfig+0x12c>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d00f      	beq.n	800f6fc <TIM_Base_SetConfig+0xf8>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4a18      	ldr	r2, [pc, #96]	; (800f740 <TIM_Base_SetConfig+0x13c>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d00b      	beq.n	800f6fc <TIM_Base_SetConfig+0xf8>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	4a17      	ldr	r2, [pc, #92]	; (800f744 <TIM_Base_SetConfig+0x140>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d007      	beq.n	800f6fc <TIM_Base_SetConfig+0xf8>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4a16      	ldr	r2, [pc, #88]	; (800f748 <TIM_Base_SetConfig+0x144>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d003      	beq.n	800f6fc <TIM_Base_SetConfig+0xf8>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a15      	ldr	r2, [pc, #84]	; (800f74c <TIM_Base_SetConfig+0x148>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d103      	bne.n	800f704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	691a      	ldr	r2, [r3, #16]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2201      	movs	r2, #1
 800f708:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	691b      	ldr	r3, [r3, #16]
 800f70e:	f003 0301 	and.w	r3, r3, #1
 800f712:	2b01      	cmp	r3, #1
 800f714:	d105      	bne.n	800f722 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	691b      	ldr	r3, [r3, #16]
 800f71a:	f023 0201 	bic.w	r2, r3, #1
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	611a      	str	r2, [r3, #16]
  }
}
 800f722:	bf00      	nop
 800f724:	3714      	adds	r7, #20
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr
 800f72e:	bf00      	nop
 800f730:	40010000 	.word	0x40010000
 800f734:	40000400 	.word	0x40000400
 800f738:	40000800 	.word	0x40000800
 800f73c:	40000c00 	.word	0x40000c00
 800f740:	40010400 	.word	0x40010400
 800f744:	40014000 	.word	0x40014000
 800f748:	40014400 	.word	0x40014400
 800f74c:	40014800 	.word	0x40014800

0800f750 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f750:	b480      	push	{r7}
 800f752:	b087      	sub	sp, #28
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6a1b      	ldr	r3, [r3, #32]
 800f75e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6a1b      	ldr	r3, [r3, #32]
 800f764:	f023 0201 	bic.w	r2, r3, #1
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	685b      	ldr	r3, [r3, #4]
 800f770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	699b      	ldr	r3, [r3, #24]
 800f776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f778:	68fa      	ldr	r2, [r7, #12]
 800f77a:	4b37      	ldr	r3, [pc, #220]	; (800f858 <TIM_OC1_SetConfig+0x108>)
 800f77c:	4013      	ands	r3, r2
 800f77e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	f023 0303 	bic.w	r3, r3, #3
 800f786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	68fa      	ldr	r2, [r7, #12]
 800f78e:	4313      	orrs	r3, r2
 800f790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	f023 0302 	bic.w	r3, r3, #2
 800f798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	689b      	ldr	r3, [r3, #8]
 800f79e:	697a      	ldr	r2, [r7, #20]
 800f7a0:	4313      	orrs	r3, r2
 800f7a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a2d      	ldr	r2, [pc, #180]	; (800f85c <TIM_OC1_SetConfig+0x10c>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d00f      	beq.n	800f7cc <TIM_OC1_SetConfig+0x7c>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4a2c      	ldr	r2, [pc, #176]	; (800f860 <TIM_OC1_SetConfig+0x110>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d00b      	beq.n	800f7cc <TIM_OC1_SetConfig+0x7c>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a2b      	ldr	r2, [pc, #172]	; (800f864 <TIM_OC1_SetConfig+0x114>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d007      	beq.n	800f7cc <TIM_OC1_SetConfig+0x7c>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a2a      	ldr	r2, [pc, #168]	; (800f868 <TIM_OC1_SetConfig+0x118>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d003      	beq.n	800f7cc <TIM_OC1_SetConfig+0x7c>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4a29      	ldr	r2, [pc, #164]	; (800f86c <TIM_OC1_SetConfig+0x11c>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d10c      	bne.n	800f7e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	f023 0308 	bic.w	r3, r3, #8
 800f7d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	697a      	ldr	r2, [r7, #20]
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	f023 0304 	bic.w	r3, r3, #4
 800f7e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4a1c      	ldr	r2, [pc, #112]	; (800f85c <TIM_OC1_SetConfig+0x10c>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d00f      	beq.n	800f80e <TIM_OC1_SetConfig+0xbe>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	4a1b      	ldr	r2, [pc, #108]	; (800f860 <TIM_OC1_SetConfig+0x110>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d00b      	beq.n	800f80e <TIM_OC1_SetConfig+0xbe>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4a1a      	ldr	r2, [pc, #104]	; (800f864 <TIM_OC1_SetConfig+0x114>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d007      	beq.n	800f80e <TIM_OC1_SetConfig+0xbe>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4a19      	ldr	r2, [pc, #100]	; (800f868 <TIM_OC1_SetConfig+0x118>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d003      	beq.n	800f80e <TIM_OC1_SetConfig+0xbe>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4a18      	ldr	r2, [pc, #96]	; (800f86c <TIM_OC1_SetConfig+0x11c>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d111      	bne.n	800f832 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f81c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	695b      	ldr	r3, [r3, #20]
 800f822:	693a      	ldr	r2, [r7, #16]
 800f824:	4313      	orrs	r3, r2
 800f826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	699b      	ldr	r3, [r3, #24]
 800f82c:	693a      	ldr	r2, [r7, #16]
 800f82e:	4313      	orrs	r3, r2
 800f830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	693a      	ldr	r2, [r7, #16]
 800f836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	68fa      	ldr	r2, [r7, #12]
 800f83c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	685a      	ldr	r2, [r3, #4]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	697a      	ldr	r2, [r7, #20]
 800f84a:	621a      	str	r2, [r3, #32]
}
 800f84c:	bf00      	nop
 800f84e:	371c      	adds	r7, #28
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr
 800f858:	fffeff8f 	.word	0xfffeff8f
 800f85c:	40010000 	.word	0x40010000
 800f860:	40010400 	.word	0x40010400
 800f864:	40014000 	.word	0x40014000
 800f868:	40014400 	.word	0x40014400
 800f86c:	40014800 	.word	0x40014800

0800f870 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f870:	b480      	push	{r7}
 800f872:	b087      	sub	sp, #28
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6a1b      	ldr	r3, [r3, #32]
 800f87e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6a1b      	ldr	r3, [r3, #32]
 800f884:	f023 0210 	bic.w	r2, r3, #16
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	699b      	ldr	r3, [r3, #24]
 800f896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f898:	68fa      	ldr	r2, [r7, #12]
 800f89a:	4b34      	ldr	r3, [pc, #208]	; (800f96c <TIM_OC2_SetConfig+0xfc>)
 800f89c:	4013      	ands	r3, r2
 800f89e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	021b      	lsls	r3, r3, #8
 800f8ae:	68fa      	ldr	r2, [r7, #12]
 800f8b0:	4313      	orrs	r3, r2
 800f8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	f023 0320 	bic.w	r3, r3, #32
 800f8ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	011b      	lsls	r3, r3, #4
 800f8c2:	697a      	ldr	r2, [r7, #20]
 800f8c4:	4313      	orrs	r3, r2
 800f8c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4a29      	ldr	r2, [pc, #164]	; (800f970 <TIM_OC2_SetConfig+0x100>)
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d003      	beq.n	800f8d8 <TIM_OC2_SetConfig+0x68>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4a28      	ldr	r2, [pc, #160]	; (800f974 <TIM_OC2_SetConfig+0x104>)
 800f8d4:	4293      	cmp	r3, r2
 800f8d6:	d10d      	bne.n	800f8f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	011b      	lsls	r3, r3, #4
 800f8e6:	697a      	ldr	r2, [r7, #20]
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	4a1e      	ldr	r2, [pc, #120]	; (800f970 <TIM_OC2_SetConfig+0x100>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d00f      	beq.n	800f91c <TIM_OC2_SetConfig+0xac>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	4a1d      	ldr	r2, [pc, #116]	; (800f974 <TIM_OC2_SetConfig+0x104>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d00b      	beq.n	800f91c <TIM_OC2_SetConfig+0xac>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	4a1c      	ldr	r2, [pc, #112]	; (800f978 <TIM_OC2_SetConfig+0x108>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d007      	beq.n	800f91c <TIM_OC2_SetConfig+0xac>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4a1b      	ldr	r2, [pc, #108]	; (800f97c <TIM_OC2_SetConfig+0x10c>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d003      	beq.n	800f91c <TIM_OC2_SetConfig+0xac>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	4a1a      	ldr	r2, [pc, #104]	; (800f980 <TIM_OC2_SetConfig+0x110>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	d113      	bne.n	800f944 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f922:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f92a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	695b      	ldr	r3, [r3, #20]
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	693a      	ldr	r2, [r7, #16]
 800f934:	4313      	orrs	r3, r2
 800f936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	699b      	ldr	r3, [r3, #24]
 800f93c:	009b      	lsls	r3, r3, #2
 800f93e:	693a      	ldr	r2, [r7, #16]
 800f940:	4313      	orrs	r3, r2
 800f942:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	693a      	ldr	r2, [r7, #16]
 800f948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	68fa      	ldr	r2, [r7, #12]
 800f94e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	685a      	ldr	r2, [r3, #4]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	697a      	ldr	r2, [r7, #20]
 800f95c:	621a      	str	r2, [r3, #32]
}
 800f95e:	bf00      	nop
 800f960:	371c      	adds	r7, #28
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop
 800f96c:	feff8fff 	.word	0xfeff8fff
 800f970:	40010000 	.word	0x40010000
 800f974:	40010400 	.word	0x40010400
 800f978:	40014000 	.word	0x40014000
 800f97c:	40014400 	.word	0x40014400
 800f980:	40014800 	.word	0x40014800

0800f984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f984:	b480      	push	{r7}
 800f986:	b087      	sub	sp, #28
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6a1b      	ldr	r3, [r3, #32]
 800f992:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6a1b      	ldr	r3, [r3, #32]
 800f998:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	685b      	ldr	r3, [r3, #4]
 800f9a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	69db      	ldr	r3, [r3, #28]
 800f9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	4b33      	ldr	r3, [pc, #204]	; (800fa7c <TIM_OC3_SetConfig+0xf8>)
 800f9b0:	4013      	ands	r3, r2
 800f9b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f023 0303 	bic.w	r3, r3, #3
 800f9ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	68fa      	ldr	r2, [r7, #12]
 800f9c2:	4313      	orrs	r3, r2
 800f9c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f9cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	689b      	ldr	r3, [r3, #8]
 800f9d2:	021b      	lsls	r3, r3, #8
 800f9d4:	697a      	ldr	r2, [r7, #20]
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	4a28      	ldr	r2, [pc, #160]	; (800fa80 <TIM_OC3_SetConfig+0xfc>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d003      	beq.n	800f9ea <TIM_OC3_SetConfig+0x66>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	4a27      	ldr	r2, [pc, #156]	; (800fa84 <TIM_OC3_SetConfig+0x100>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d10d      	bne.n	800fa06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f9f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	68db      	ldr	r3, [r3, #12]
 800f9f6:	021b      	lsls	r3, r3, #8
 800f9f8:	697a      	ldr	r2, [r7, #20]
 800f9fa:	4313      	orrs	r3, r2
 800f9fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4a1d      	ldr	r2, [pc, #116]	; (800fa80 <TIM_OC3_SetConfig+0xfc>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d00f      	beq.n	800fa2e <TIM_OC3_SetConfig+0xaa>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4a1c      	ldr	r2, [pc, #112]	; (800fa84 <TIM_OC3_SetConfig+0x100>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d00b      	beq.n	800fa2e <TIM_OC3_SetConfig+0xaa>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4a1b      	ldr	r2, [pc, #108]	; (800fa88 <TIM_OC3_SetConfig+0x104>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d007      	beq.n	800fa2e <TIM_OC3_SetConfig+0xaa>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4a1a      	ldr	r2, [pc, #104]	; (800fa8c <TIM_OC3_SetConfig+0x108>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d003      	beq.n	800fa2e <TIM_OC3_SetConfig+0xaa>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	4a19      	ldr	r2, [pc, #100]	; (800fa90 <TIM_OC3_SetConfig+0x10c>)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d113      	bne.n	800fa56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	695b      	ldr	r3, [r3, #20]
 800fa42:	011b      	lsls	r3, r3, #4
 800fa44:	693a      	ldr	r2, [r7, #16]
 800fa46:	4313      	orrs	r3, r2
 800fa48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	699b      	ldr	r3, [r3, #24]
 800fa4e:	011b      	lsls	r3, r3, #4
 800fa50:	693a      	ldr	r2, [r7, #16]
 800fa52:	4313      	orrs	r3, r2
 800fa54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	693a      	ldr	r2, [r7, #16]
 800fa5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	685a      	ldr	r2, [r3, #4]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	697a      	ldr	r2, [r7, #20]
 800fa6e:	621a      	str	r2, [r3, #32]
}
 800fa70:	bf00      	nop
 800fa72:	371c      	adds	r7, #28
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr
 800fa7c:	fffeff8f 	.word	0xfffeff8f
 800fa80:	40010000 	.word	0x40010000
 800fa84:	40010400 	.word	0x40010400
 800fa88:	40014000 	.word	0x40014000
 800fa8c:	40014400 	.word	0x40014400
 800fa90:	40014800 	.word	0x40014800

0800fa94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa94:	b480      	push	{r7}
 800fa96:	b087      	sub	sp, #28
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6a1b      	ldr	r3, [r3, #32]
 800faa2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6a1b      	ldr	r3, [r3, #32]
 800faa8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	69db      	ldr	r3, [r3, #28]
 800faba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	4b24      	ldr	r3, [pc, #144]	; (800fb50 <TIM_OC4_SetConfig+0xbc>)
 800fac0:	4013      	ands	r3, r2
 800fac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800faca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	021b      	lsls	r3, r3, #8
 800fad2:	68fa      	ldr	r2, [r7, #12]
 800fad4:	4313      	orrs	r3, r2
 800fad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	689b      	ldr	r3, [r3, #8]
 800fae4:	031b      	lsls	r3, r3, #12
 800fae6:	693a      	ldr	r2, [r7, #16]
 800fae8:	4313      	orrs	r3, r2
 800faea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	4a19      	ldr	r2, [pc, #100]	; (800fb54 <TIM_OC4_SetConfig+0xc0>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d00f      	beq.n	800fb14 <TIM_OC4_SetConfig+0x80>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4a18      	ldr	r2, [pc, #96]	; (800fb58 <TIM_OC4_SetConfig+0xc4>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d00b      	beq.n	800fb14 <TIM_OC4_SetConfig+0x80>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	4a17      	ldr	r2, [pc, #92]	; (800fb5c <TIM_OC4_SetConfig+0xc8>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d007      	beq.n	800fb14 <TIM_OC4_SetConfig+0x80>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	4a16      	ldr	r2, [pc, #88]	; (800fb60 <TIM_OC4_SetConfig+0xcc>)
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d003      	beq.n	800fb14 <TIM_OC4_SetConfig+0x80>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	4a15      	ldr	r2, [pc, #84]	; (800fb64 <TIM_OC4_SetConfig+0xd0>)
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d109      	bne.n	800fb28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fb14:	697b      	ldr	r3, [r7, #20]
 800fb16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fb1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	695b      	ldr	r3, [r3, #20]
 800fb20:	019b      	lsls	r3, r3, #6
 800fb22:	697a      	ldr	r2, [r7, #20]
 800fb24:	4313      	orrs	r3, r2
 800fb26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	697a      	ldr	r2, [r7, #20]
 800fb2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	68fa      	ldr	r2, [r7, #12]
 800fb32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	685a      	ldr	r2, [r3, #4]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	693a      	ldr	r2, [r7, #16]
 800fb40:	621a      	str	r2, [r3, #32]
}
 800fb42:	bf00      	nop
 800fb44:	371c      	adds	r7, #28
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr
 800fb4e:	bf00      	nop
 800fb50:	feff8fff 	.word	0xfeff8fff
 800fb54:	40010000 	.word	0x40010000
 800fb58:	40010400 	.word	0x40010400
 800fb5c:	40014000 	.word	0x40014000
 800fb60:	40014400 	.word	0x40014400
 800fb64:	40014800 	.word	0x40014800

0800fb68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b087      	sub	sp, #28
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6a1b      	ldr	r3, [r3, #32]
 800fb76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6a1b      	ldr	r3, [r3, #32]
 800fb7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fb90:	68fa      	ldr	r2, [r7, #12]
 800fb92:	4b21      	ldr	r3, [pc, #132]	; (800fc18 <TIM_OC5_SetConfig+0xb0>)
 800fb94:	4013      	ands	r3, r2
 800fb96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	4313      	orrs	r3, r2
 800fba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800fba8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	041b      	lsls	r3, r3, #16
 800fbb0:	693a      	ldr	r2, [r7, #16]
 800fbb2:	4313      	orrs	r3, r2
 800fbb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	4a18      	ldr	r2, [pc, #96]	; (800fc1c <TIM_OC5_SetConfig+0xb4>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d00f      	beq.n	800fbde <TIM_OC5_SetConfig+0x76>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	4a17      	ldr	r2, [pc, #92]	; (800fc20 <TIM_OC5_SetConfig+0xb8>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d00b      	beq.n	800fbde <TIM_OC5_SetConfig+0x76>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	4a16      	ldr	r2, [pc, #88]	; (800fc24 <TIM_OC5_SetConfig+0xbc>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d007      	beq.n	800fbde <TIM_OC5_SetConfig+0x76>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4a15      	ldr	r2, [pc, #84]	; (800fc28 <TIM_OC5_SetConfig+0xc0>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d003      	beq.n	800fbde <TIM_OC5_SetConfig+0x76>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	4a14      	ldr	r2, [pc, #80]	; (800fc2c <TIM_OC5_SetConfig+0xc4>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d109      	bne.n	800fbf2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fbe4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	695b      	ldr	r3, [r3, #20]
 800fbea:	021b      	lsls	r3, r3, #8
 800fbec:	697a      	ldr	r2, [r7, #20]
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	697a      	ldr	r2, [r7, #20]
 800fbf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	685a      	ldr	r2, [r3, #4]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	693a      	ldr	r2, [r7, #16]
 800fc0a:	621a      	str	r2, [r3, #32]
}
 800fc0c:	bf00      	nop
 800fc0e:	371c      	adds	r7, #28
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr
 800fc18:	fffeff8f 	.word	0xfffeff8f
 800fc1c:	40010000 	.word	0x40010000
 800fc20:	40010400 	.word	0x40010400
 800fc24:	40014000 	.word	0x40014000
 800fc28:	40014400 	.word	0x40014400
 800fc2c:	40014800 	.word	0x40014800

0800fc30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b087      	sub	sp, #28
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6a1b      	ldr	r3, [r3, #32]
 800fc3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6a1b      	ldr	r3, [r3, #32]
 800fc44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fc58:	68fa      	ldr	r2, [r7, #12]
 800fc5a:	4b22      	ldr	r3, [pc, #136]	; (800fce4 <TIM_OC6_SetConfig+0xb4>)
 800fc5c:	4013      	ands	r3, r2
 800fc5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc60:	683b      	ldr	r3, [r7, #0]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	021b      	lsls	r3, r3, #8
 800fc66:	68fa      	ldr	r2, [r7, #12]
 800fc68:	4313      	orrs	r3, r2
 800fc6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fc72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	689b      	ldr	r3, [r3, #8]
 800fc78:	051b      	lsls	r3, r3, #20
 800fc7a:	693a      	ldr	r2, [r7, #16]
 800fc7c:	4313      	orrs	r3, r2
 800fc7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	4a19      	ldr	r2, [pc, #100]	; (800fce8 <TIM_OC6_SetConfig+0xb8>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d00f      	beq.n	800fca8 <TIM_OC6_SetConfig+0x78>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4a18      	ldr	r2, [pc, #96]	; (800fcec <TIM_OC6_SetConfig+0xbc>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d00b      	beq.n	800fca8 <TIM_OC6_SetConfig+0x78>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	4a17      	ldr	r2, [pc, #92]	; (800fcf0 <TIM_OC6_SetConfig+0xc0>)
 800fc94:	4293      	cmp	r3, r2
 800fc96:	d007      	beq.n	800fca8 <TIM_OC6_SetConfig+0x78>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	4a16      	ldr	r2, [pc, #88]	; (800fcf4 <TIM_OC6_SetConfig+0xc4>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d003      	beq.n	800fca8 <TIM_OC6_SetConfig+0x78>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	4a15      	ldr	r2, [pc, #84]	; (800fcf8 <TIM_OC6_SetConfig+0xc8>)
 800fca4:	4293      	cmp	r3, r2
 800fca6:	d109      	bne.n	800fcbc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fcae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	695b      	ldr	r3, [r3, #20]
 800fcb4:	029b      	lsls	r3, r3, #10
 800fcb6:	697a      	ldr	r2, [r7, #20]
 800fcb8:	4313      	orrs	r3, r2
 800fcba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	697a      	ldr	r2, [r7, #20]
 800fcc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	68fa      	ldr	r2, [r7, #12]
 800fcc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	685a      	ldr	r2, [r3, #4]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	693a      	ldr	r2, [r7, #16]
 800fcd4:	621a      	str	r2, [r3, #32]
}
 800fcd6:	bf00      	nop
 800fcd8:	371c      	adds	r7, #28
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop
 800fce4:	feff8fff 	.word	0xfeff8fff
 800fce8:	40010000 	.word	0x40010000
 800fcec:	40010400 	.word	0x40010400
 800fcf0:	40014000 	.word	0x40014000
 800fcf4:	40014400 	.word	0x40014400
 800fcf8:	40014800 	.word	0x40014800

0800fcfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b087      	sub	sp, #28
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	60b9      	str	r1, [r7, #8]
 800fd06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	6a1b      	ldr	r3, [r3, #32]
 800fd0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	6a1b      	ldr	r3, [r3, #32]
 800fd12:	f023 0201 	bic.w	r2, r3, #1
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	699b      	ldr	r3, [r3, #24]
 800fd1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fd26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	011b      	lsls	r3, r3, #4
 800fd2c:	693a      	ldr	r2, [r7, #16]
 800fd2e:	4313      	orrs	r3, r2
 800fd30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	f023 030a 	bic.w	r3, r3, #10
 800fd38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fd3a:	697a      	ldr	r2, [r7, #20]
 800fd3c:	68bb      	ldr	r3, [r7, #8]
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	693a      	ldr	r2, [r7, #16]
 800fd46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	697a      	ldr	r2, [r7, #20]
 800fd4c:	621a      	str	r2, [r3, #32]
}
 800fd4e:	bf00      	nop
 800fd50:	371c      	adds	r7, #28
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr

0800fd5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd5a:	b480      	push	{r7}
 800fd5c:	b087      	sub	sp, #28
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	60f8      	str	r0, [r7, #12]
 800fd62:	60b9      	str	r1, [r7, #8]
 800fd64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	6a1b      	ldr	r3, [r3, #32]
 800fd6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	6a1b      	ldr	r3, [r3, #32]
 800fd70:	f023 0210 	bic.w	r2, r3, #16
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	699b      	ldr	r3, [r3, #24]
 800fd7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fd84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	031b      	lsls	r3, r3, #12
 800fd8a:	693a      	ldr	r2, [r7, #16]
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fd96:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	011b      	lsls	r3, r3, #4
 800fd9c:	697a      	ldr	r2, [r7, #20]
 800fd9e:	4313      	orrs	r3, r2
 800fda0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	693a      	ldr	r2, [r7, #16]
 800fda6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	697a      	ldr	r2, [r7, #20]
 800fdac:	621a      	str	r2, [r3, #32]
}
 800fdae:	bf00      	nop
 800fdb0:	371c      	adds	r7, #28
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr
	...

0800fdbc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b085      	sub	sp, #20
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	689b      	ldr	r3, [r3, #8]
 800fdca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fdcc:	68fa      	ldr	r2, [r7, #12]
 800fdce:	4b09      	ldr	r3, [pc, #36]	; (800fdf4 <TIM_ITRx_SetConfig+0x38>)
 800fdd0:	4013      	ands	r3, r2
 800fdd2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fdd4:	683a      	ldr	r2, [r7, #0]
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	f043 0307 	orr.w	r3, r3, #7
 800fdde:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	68fa      	ldr	r2, [r7, #12]
 800fde4:	609a      	str	r2, [r3, #8]
}
 800fde6:	bf00      	nop
 800fde8:	3714      	adds	r7, #20
 800fdea:	46bd      	mov	sp, r7
 800fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf0:	4770      	bx	lr
 800fdf2:	bf00      	nop
 800fdf4:	ffcfff8f 	.word	0xffcfff8f

0800fdf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b087      	sub	sp, #28
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	607a      	str	r2, [r7, #4]
 800fe04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	689b      	ldr	r3, [r3, #8]
 800fe0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fe12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	021a      	lsls	r2, r3, #8
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	431a      	orrs	r2, r3
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	4313      	orrs	r3, r2
 800fe20:	697a      	ldr	r2, [r7, #20]
 800fe22:	4313      	orrs	r3, r2
 800fe24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	697a      	ldr	r2, [r7, #20]
 800fe2a:	609a      	str	r2, [r3, #8]
}
 800fe2c:	bf00      	nop
 800fe2e:	371c      	adds	r7, #28
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b087      	sub	sp, #28
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	f003 031f 	and.w	r3, r3, #31
 800fe4a:	2201      	movs	r2, #1
 800fe4c:	fa02 f303 	lsl.w	r3, r2, r3
 800fe50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	6a1a      	ldr	r2, [r3, #32]
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	43db      	mvns	r3, r3
 800fe5a:	401a      	ands	r2, r3
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	6a1a      	ldr	r2, [r3, #32]
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	f003 031f 	and.w	r3, r3, #31
 800fe6a:	6879      	ldr	r1, [r7, #4]
 800fe6c:	fa01 f303 	lsl.w	r3, r1, r3
 800fe70:	431a      	orrs	r2, r3
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	621a      	str	r2, [r3, #32]
}
 800fe76:	bf00      	nop
 800fe78:	371c      	adds	r7, #28
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr
	...

0800fe84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe84:	b480      	push	{r7}
 800fe86:	b085      	sub	sp, #20
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d101      	bne.n	800fe9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe98:	2302      	movs	r3, #2
 800fe9a:	e06d      	b.n	800ff78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2201      	movs	r2, #1
 800fea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2202      	movs	r2, #2
 800fea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	689b      	ldr	r3, [r3, #8]
 800feba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	4a30      	ldr	r2, [pc, #192]	; (800ff84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d004      	beq.n	800fed0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	4a2f      	ldr	r2, [pc, #188]	; (800ff88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fecc:	4293      	cmp	r3, r2
 800fece:	d108      	bne.n	800fee2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fed6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	68fa      	ldr	r2, [r7, #12]
 800fede:	4313      	orrs	r3, r2
 800fee0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fee8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	68fa      	ldr	r2, [r7, #12]
 800fef0:	4313      	orrs	r3, r2
 800fef2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4a20      	ldr	r2, [pc, #128]	; (800ff84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ff02:	4293      	cmp	r3, r2
 800ff04:	d022      	beq.n	800ff4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff0e:	d01d      	beq.n	800ff4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	4a1d      	ldr	r2, [pc, #116]	; (800ff8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ff16:	4293      	cmp	r3, r2
 800ff18:	d018      	beq.n	800ff4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	4a1c      	ldr	r2, [pc, #112]	; (800ff90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ff20:	4293      	cmp	r3, r2
 800ff22:	d013      	beq.n	800ff4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	4a1a      	ldr	r2, [pc, #104]	; (800ff94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d00e      	beq.n	800ff4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	4a15      	ldr	r2, [pc, #84]	; (800ff88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d009      	beq.n	800ff4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	4a16      	ldr	r2, [pc, #88]	; (800ff98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	d004      	beq.n	800ff4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	4a15      	ldr	r2, [pc, #84]	; (800ff9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d10c      	bne.n	800ff66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	689b      	ldr	r3, [r3, #8]
 800ff58:	68ba      	ldr	r2, [r7, #8]
 800ff5a:	4313      	orrs	r3, r2
 800ff5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	68ba      	ldr	r2, [r7, #8]
 800ff64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2201      	movs	r2, #1
 800ff6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2200      	movs	r2, #0
 800ff72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff76:	2300      	movs	r3, #0
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3714      	adds	r7, #20
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr
 800ff84:	40010000 	.word	0x40010000
 800ff88:	40010400 	.word	0x40010400
 800ff8c:	40000400 	.word	0x40000400
 800ff90:	40000800 	.word	0x40000800
 800ff94:	40000c00 	.word	0x40000c00
 800ff98:	40001800 	.word	0x40001800
 800ff9c:	40014000 	.word	0x40014000

0800ffa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b085      	sub	sp, #20
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d101      	bne.n	800ffbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ffb8:	2302      	movs	r3, #2
 800ffba:	e065      	b.n	8010088 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	689b      	ldr	r3, [r3, #8]
 800ffdc:	4313      	orrs	r3, r2
 800ffde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	4313      	orrs	r3, r2
 800ffec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	4313      	orrs	r3, r2
 800fffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010002:	683b      	ldr	r3, [r7, #0]
 8010004:	691b      	ldr	r3, [r3, #16]
 8010006:	4313      	orrs	r3, r2
 8010008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	695b      	ldr	r3, [r3, #20]
 8010014:	4313      	orrs	r3, r2
 8010016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010022:	4313      	orrs	r3, r2
 8010024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	699b      	ldr	r3, [r3, #24]
 8010030:	041b      	lsls	r3, r3, #16
 8010032:	4313      	orrs	r3, r2
 8010034:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	4a16      	ldr	r2, [pc, #88]	; (8010094 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801003c:	4293      	cmp	r3, r2
 801003e:	d004      	beq.n	801004a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	4a14      	ldr	r2, [pc, #80]	; (8010098 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010046:	4293      	cmp	r3, r2
 8010048:	d115      	bne.n	8010076 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010054:	051b      	lsls	r3, r3, #20
 8010056:	4313      	orrs	r3, r2
 8010058:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	69db      	ldr	r3, [r3, #28]
 8010064:	4313      	orrs	r3, r2
 8010066:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	6a1b      	ldr	r3, [r3, #32]
 8010072:	4313      	orrs	r3, r2
 8010074:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	68fa      	ldr	r2, [r7, #12]
 801007c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2200      	movs	r2, #0
 8010082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010086:	2300      	movs	r3, #0
}
 8010088:	4618      	mov	r0, r3
 801008a:	3714      	adds	r7, #20
 801008c:	46bd      	mov	sp, r7
 801008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010092:	4770      	bx	lr
 8010094:	40010000 	.word	0x40010000
 8010098:	40010400 	.word	0x40010400

0801009c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801009c:	b480      	push	{r7}
 801009e:	b083      	sub	sp, #12
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80100a4:	bf00      	nop
 80100a6:	370c      	adds	r7, #12
 80100a8:	46bd      	mov	sp, r7
 80100aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ae:	4770      	bx	lr

080100b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80100b0:	b480      	push	{r7}
 80100b2:	b083      	sub	sp, #12
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80100b8:	bf00      	nop
 80100ba:	370c      	adds	r7, #12
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr

080100c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80100cc:	bf00      	nop
 80100ce:	370c      	adds	r7, #12
 80100d0:	46bd      	mov	sp, r7
 80100d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d6:	4770      	bx	lr

080100d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d101      	bne.n	80100ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80100e6:	2301      	movs	r3, #1
 80100e8:	e042      	b.n	8010170 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d106      	bne.n	8010102 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f7f3 fc07 	bl	8003910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2224      	movs	r2, #36	; 0x24
 8010106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	f022 0201 	bic.w	r2, r2, #1
 8010118:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801011e:	2b00      	cmp	r3, #0
 8010120:	d002      	beq.n	8010128 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f001 fc42 	bl	80119ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f000 fed7 	bl	8010edc <UART_SetConfig>
 801012e:	4603      	mov	r3, r0
 8010130:	2b01      	cmp	r3, #1
 8010132:	d101      	bne.n	8010138 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010134:	2301      	movs	r3, #1
 8010136:	e01b      	b.n	8010170 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	685a      	ldr	r2, [r3, #4]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010146:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	689a      	ldr	r2, [r3, #8]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010156:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	681a      	ldr	r2, [r3, #0]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	f042 0201 	orr.w	r2, r2, #1
 8010166:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f001 fcc1 	bl	8011af0 <UART_CheckIdleState>
 801016e:	4603      	mov	r3, r0
}
 8010170:	4618      	mov	r0, r3
 8010172:	3708      	adds	r7, #8
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b08a      	sub	sp, #40	; 0x28
 801017c:	af02      	add	r7, sp, #8
 801017e:	60f8      	str	r0, [r7, #12]
 8010180:	60b9      	str	r1, [r7, #8]
 8010182:	603b      	str	r3, [r7, #0]
 8010184:	4613      	mov	r3, r2
 8010186:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801018e:	2b20      	cmp	r3, #32
 8010190:	d17b      	bne.n	801028a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d002      	beq.n	801019e <HAL_UART_Transmit+0x26>
 8010198:	88fb      	ldrh	r3, [r7, #6]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d101      	bne.n	80101a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801019e:	2301      	movs	r3, #1
 80101a0:	e074      	b.n	801028c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	2200      	movs	r2, #0
 80101a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2221      	movs	r2, #33	; 0x21
 80101ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80101b2:	f7f3 ff57 	bl	8004064 <HAL_GetTick>
 80101b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	88fa      	ldrh	r2, [r7, #6]
 80101bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	88fa      	ldrh	r2, [r7, #6]
 80101c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	689b      	ldr	r3, [r3, #8]
 80101cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101d0:	d108      	bne.n	80101e4 <HAL_UART_Transmit+0x6c>
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	691b      	ldr	r3, [r3, #16]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d104      	bne.n	80101e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80101da:	2300      	movs	r3, #0
 80101dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80101de:	68bb      	ldr	r3, [r7, #8]
 80101e0:	61bb      	str	r3, [r7, #24]
 80101e2:	e003      	b.n	80101ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80101e8:	2300      	movs	r3, #0
 80101ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80101ec:	e030      	b.n	8010250 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	2200      	movs	r2, #0
 80101f6:	2180      	movs	r1, #128	; 0x80
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	f001 fd23 	bl	8011c44 <UART_WaitOnFlagUntilTimeout>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d005      	beq.n	8010210 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2220      	movs	r2, #32
 8010208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801020c:	2303      	movs	r3, #3
 801020e:	e03d      	b.n	801028c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d10b      	bne.n	801022e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	881b      	ldrh	r3, [r3, #0]
 801021a:	461a      	mov	r2, r3
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010224:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010226:	69bb      	ldr	r3, [r7, #24]
 8010228:	3302      	adds	r3, #2
 801022a:	61bb      	str	r3, [r7, #24]
 801022c:	e007      	b.n	801023e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	781a      	ldrb	r2, [r3, #0]
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010238:	69fb      	ldr	r3, [r7, #28]
 801023a:	3301      	adds	r3, #1
 801023c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010244:	b29b      	uxth	r3, r3
 8010246:	3b01      	subs	r3, #1
 8010248:	b29a      	uxth	r2, r3
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010256:	b29b      	uxth	r3, r3
 8010258:	2b00      	cmp	r3, #0
 801025a:	d1c8      	bne.n	80101ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	9300      	str	r3, [sp, #0]
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	2200      	movs	r2, #0
 8010264:	2140      	movs	r1, #64	; 0x40
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	f001 fcec 	bl	8011c44 <UART_WaitOnFlagUntilTimeout>
 801026c:	4603      	mov	r3, r0
 801026e:	2b00      	cmp	r3, #0
 8010270:	d005      	beq.n	801027e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2220      	movs	r2, #32
 8010276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801027a:	2303      	movs	r3, #3
 801027c:	e006      	b.n	801028c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2220      	movs	r2, #32
 8010282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010286:	2300      	movs	r3, #0
 8010288:	e000      	b.n	801028c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801028a:	2302      	movs	r3, #2
  }
}
 801028c:	4618      	mov	r0, r3
 801028e:	3720      	adds	r7, #32
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}

08010294 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b08a      	sub	sp, #40	; 0x28
 8010298:	af02      	add	r7, sp, #8
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	603b      	str	r3, [r7, #0]
 80102a0:	4613      	mov	r3, r2
 80102a2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80102aa:	2b20      	cmp	r3, #32
 80102ac:	f040 80b5 	bne.w	801041a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d002      	beq.n	80102bc <HAL_UART_Receive+0x28>
 80102b6:	88fb      	ldrh	r3, [r7, #6]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d101      	bne.n	80102c0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80102bc:	2301      	movs	r3, #1
 80102be:	e0ad      	b.n	801041c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	2200      	movs	r2, #0
 80102c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	2222      	movs	r2, #34	; 0x22
 80102cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	2200      	movs	r2, #0
 80102d4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80102d6:	f7f3 fec5 	bl	8004064 <HAL_GetTick>
 80102da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	88fa      	ldrh	r2, [r7, #6]
 80102e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	88fa      	ldrh	r2, [r7, #6]
 80102e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	689b      	ldr	r3, [r3, #8]
 80102f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102f4:	d10e      	bne.n	8010314 <HAL_UART_Receive+0x80>
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	691b      	ldr	r3, [r3, #16]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d105      	bne.n	801030a <HAL_UART_Receive+0x76>
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010308:	e02d      	b.n	8010366 <HAL_UART_Receive+0xd2>
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	22ff      	movs	r2, #255	; 0xff
 801030e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010312:	e028      	b.n	8010366 <HAL_UART_Receive+0xd2>
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	689b      	ldr	r3, [r3, #8]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d10d      	bne.n	8010338 <HAL_UART_Receive+0xa4>
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	691b      	ldr	r3, [r3, #16]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d104      	bne.n	801032e <HAL_UART_Receive+0x9a>
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	22ff      	movs	r2, #255	; 0xff
 8010328:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801032c:	e01b      	b.n	8010366 <HAL_UART_Receive+0xd2>
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	227f      	movs	r2, #127	; 0x7f
 8010332:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010336:	e016      	b.n	8010366 <HAL_UART_Receive+0xd2>
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	689b      	ldr	r3, [r3, #8]
 801033c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010340:	d10d      	bne.n	801035e <HAL_UART_Receive+0xca>
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	691b      	ldr	r3, [r3, #16]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d104      	bne.n	8010354 <HAL_UART_Receive+0xc0>
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	227f      	movs	r2, #127	; 0x7f
 801034e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010352:	e008      	b.n	8010366 <HAL_UART_Receive+0xd2>
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	223f      	movs	r2, #63	; 0x3f
 8010358:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801035c:	e003      	b.n	8010366 <HAL_UART_Receive+0xd2>
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2200      	movs	r2, #0
 8010362:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801036c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	689b      	ldr	r3, [r3, #8]
 8010372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010376:	d108      	bne.n	801038a <HAL_UART_Receive+0xf6>
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	691b      	ldr	r3, [r3, #16]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d104      	bne.n	801038a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010380:	2300      	movs	r3, #0
 8010382:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	61bb      	str	r3, [r7, #24]
 8010388:	e003      	b.n	8010392 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801038e:	2300      	movs	r3, #0
 8010390:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010392:	e036      	b.n	8010402 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	2200      	movs	r2, #0
 801039c:	2120      	movs	r1, #32
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	f001 fc50 	bl	8011c44 <UART_WaitOnFlagUntilTimeout>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d005      	beq.n	80103b6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2220      	movs	r2, #32
 80103ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80103b2:	2303      	movs	r3, #3
 80103b4:	e032      	b.n	801041c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d10c      	bne.n	80103d6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103c2:	b29a      	uxth	r2, r3
 80103c4:	8a7b      	ldrh	r3, [r7, #18]
 80103c6:	4013      	ands	r3, r2
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	69bb      	ldr	r3, [r7, #24]
 80103cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	3302      	adds	r3, #2
 80103d2:	61bb      	str	r3, [r7, #24]
 80103d4:	e00c      	b.n	80103f0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103dc:	b2da      	uxtb	r2, r3
 80103de:	8a7b      	ldrh	r3, [r7, #18]
 80103e0:	b2db      	uxtb	r3, r3
 80103e2:	4013      	ands	r3, r2
 80103e4:	b2da      	uxtb	r2, r3
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	3301      	adds	r3, #1
 80103ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	3b01      	subs	r3, #1
 80103fa:	b29a      	uxth	r2, r3
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010408:	b29b      	uxth	r3, r3
 801040a:	2b00      	cmp	r3, #0
 801040c:	d1c2      	bne.n	8010394 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2220      	movs	r2, #32
 8010412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8010416:	2300      	movs	r3, #0
 8010418:	e000      	b.n	801041c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801041a:	2302      	movs	r3, #2
  }
}
 801041c:	4618      	mov	r0, r3
 801041e:	3720      	adds	r7, #32
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b08a      	sub	sp, #40	; 0x28
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	4613      	mov	r3, r2
 8010430:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010438:	2b20      	cmp	r3, #32
 801043a:	d137      	bne.n	80104ac <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d002      	beq.n	8010448 <HAL_UART_Receive_IT+0x24>
 8010442:	88fb      	ldrh	r3, [r7, #6]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d101      	bne.n	801044c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010448:	2301      	movs	r3, #1
 801044a:	e030      	b.n	80104ae <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	2200      	movs	r2, #0
 8010450:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4a18      	ldr	r2, [pc, #96]	; (80104b8 <HAL_UART_Receive_IT+0x94>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d01f      	beq.n	801049c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010466:	2b00      	cmp	r3, #0
 8010468:	d018      	beq.n	801049c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	e853 3f00 	ldrex	r3, [r3]
 8010476:	613b      	str	r3, [r7, #16]
   return(result);
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801047e:	627b      	str	r3, [r7, #36]	; 0x24
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	461a      	mov	r2, r3
 8010486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010488:	623b      	str	r3, [r7, #32]
 801048a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801048c:	69f9      	ldr	r1, [r7, #28]
 801048e:	6a3a      	ldr	r2, [r7, #32]
 8010490:	e841 2300 	strex	r3, r2, [r1]
 8010494:	61bb      	str	r3, [r7, #24]
   return(result);
 8010496:	69bb      	ldr	r3, [r7, #24]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d1e6      	bne.n	801046a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801049c:	88fb      	ldrh	r3, [r7, #6]
 801049e:	461a      	mov	r2, r3
 80104a0:	68b9      	ldr	r1, [r7, #8]
 80104a2:	68f8      	ldr	r0, [r7, #12]
 80104a4:	f001 fc3c 	bl	8011d20 <UART_Start_Receive_IT>
 80104a8:	4603      	mov	r3, r0
 80104aa:	e000      	b.n	80104ae <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80104ac:	2302      	movs	r3, #2
  }
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3728      	adds	r7, #40	; 0x28
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	58000c00 	.word	0x58000c00

080104bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b08a      	sub	sp, #40	; 0x28
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	60b9      	str	r1, [r7, #8]
 80104c6:	4613      	mov	r3, r2
 80104c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104d0:	2b20      	cmp	r3, #32
 80104d2:	d167      	bne.n	80105a4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d002      	beq.n	80104e0 <HAL_UART_Transmit_DMA+0x24>
 80104da:	88fb      	ldrh	r3, [r7, #6]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d101      	bne.n	80104e4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80104e0:	2301      	movs	r3, #1
 80104e2:	e060      	b.n	80105a6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	68ba      	ldr	r2, [r7, #8]
 80104e8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	88fa      	ldrh	r2, [r7, #6]
 80104ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	88fa      	ldrh	r2, [r7, #6]
 80104f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	2200      	movs	r2, #0
 80104fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	2221      	movs	r2, #33	; 0x21
 8010506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801050e:	2b00      	cmp	r3, #0
 8010510:	d028      	beq.n	8010564 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010516:	4a26      	ldr	r2, [pc, #152]	; (80105b0 <HAL_UART_Transmit_DMA+0xf4>)
 8010518:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801051e:	4a25      	ldr	r2, [pc, #148]	; (80105b4 <HAL_UART_Transmit_DMA+0xf8>)
 8010520:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010526:	4a24      	ldr	r2, [pc, #144]	; (80105b8 <HAL_UART_Transmit_DMA+0xfc>)
 8010528:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801052e:	2200      	movs	r2, #0
 8010530:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801053a:	4619      	mov	r1, r3
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	3328      	adds	r3, #40	; 0x28
 8010542:	461a      	mov	r2, r3
 8010544:	88fb      	ldrh	r3, [r7, #6]
 8010546:	f7f6 fa11 	bl	800696c <HAL_DMA_Start_IT>
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	d009      	beq.n	8010564 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2210      	movs	r2, #16
 8010554:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2220      	movs	r2, #32
 801055c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010560:	2301      	movs	r3, #1
 8010562:	e020      	b.n	80105a6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2240      	movs	r2, #64	; 0x40
 801056a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	3308      	adds	r3, #8
 8010572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	e853 3f00 	ldrex	r3, [r3]
 801057a:	613b      	str	r3, [r7, #16]
   return(result);
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010582:	627b      	str	r3, [r7, #36]	; 0x24
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	3308      	adds	r3, #8
 801058a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801058c:	623a      	str	r2, [r7, #32]
 801058e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010590:	69f9      	ldr	r1, [r7, #28]
 8010592:	6a3a      	ldr	r2, [r7, #32]
 8010594:	e841 2300 	strex	r3, r2, [r1]
 8010598:	61bb      	str	r3, [r7, #24]
   return(result);
 801059a:	69bb      	ldr	r3, [r7, #24]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d1e5      	bne.n	801056c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80105a0:	2300      	movs	r3, #0
 80105a2:	e000      	b.n	80105a6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80105a4:	2302      	movs	r3, #2
  }
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3728      	adds	r7, #40	; 0x28
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	080120b5 	.word	0x080120b5
 80105b4:	0801214b 	.word	0x0801214b
 80105b8:	08012167 	.word	0x08012167

080105bc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b09a      	sub	sp, #104	; 0x68
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105cc:	e853 3f00 	ldrex	r3, [r3]
 80105d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80105d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80105d8:	667b      	str	r3, [r7, #100]	; 0x64
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	461a      	mov	r2, r3
 80105e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105e2:	657b      	str	r3, [r7, #84]	; 0x54
 80105e4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80105ea:	e841 2300 	strex	r3, r2, [r1]
 80105ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80105f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1e6      	bne.n	80105c4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	3308      	adds	r3, #8
 80105fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010600:	e853 3f00 	ldrex	r3, [r3]
 8010604:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010608:	4b46      	ldr	r3, [pc, #280]	; (8010724 <HAL_UART_AbortReceive+0x168>)
 801060a:	4013      	ands	r3, r2
 801060c:	663b      	str	r3, [r7, #96]	; 0x60
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	3308      	adds	r3, #8
 8010614:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010616:	643a      	str	r2, [r7, #64]	; 0x40
 8010618:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801061c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801061e:	e841 2300 	strex	r3, r2, [r1]
 8010622:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010626:	2b00      	cmp	r3, #0
 8010628:	d1e5      	bne.n	80105f6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801062e:	2b01      	cmp	r3, #1
 8010630:	d118      	bne.n	8010664 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010638:	6a3b      	ldr	r3, [r7, #32]
 801063a:	e853 3f00 	ldrex	r3, [r3]
 801063e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010640:	69fb      	ldr	r3, [r7, #28]
 8010642:	f023 0310 	bic.w	r3, r3, #16
 8010646:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	461a      	mov	r2, r3
 801064e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010652:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010658:	e841 2300 	strex	r3, r2, [r1]
 801065c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010660:	2b00      	cmp	r3, #0
 8010662:	d1e6      	bne.n	8010632 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	689b      	ldr	r3, [r3, #8]
 801066a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801066e:	2b40      	cmp	r3, #64	; 0x40
 8010670:	d13b      	bne.n	80106ea <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	3308      	adds	r3, #8
 8010678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	e853 3f00 	ldrex	r3, [r3]
 8010680:	60bb      	str	r3, [r7, #8]
   return(result);
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010688:	65bb      	str	r3, [r7, #88]	; 0x58
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	3308      	adds	r3, #8
 8010690:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010692:	61ba      	str	r2, [r7, #24]
 8010694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010696:	6979      	ldr	r1, [r7, #20]
 8010698:	69ba      	ldr	r2, [r7, #24]
 801069a:	e841 2300 	strex	r3, r2, [r1]
 801069e:	613b      	str	r3, [r7, #16]
   return(result);
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d1e5      	bne.n	8010672 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d01c      	beq.n	80106ea <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106b6:	2200      	movs	r2, #0
 80106b8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7f6 fbbd 	bl	8006e40 <HAL_DMA_Abort>
 80106c6:	4603      	mov	r3, r0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d00e      	beq.n	80106ea <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7f8 f842 	bl	800875c <HAL_DMA_GetError>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b20      	cmp	r3, #32
 80106dc:	d105      	bne.n	80106ea <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2210      	movs	r2, #16
 80106e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80106e6:	2303      	movs	r3, #3
 80106e8:	e017      	b.n	801071a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	2200      	movs	r2, #0
 80106ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	220f      	movs	r2, #15
 80106f8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	699a      	ldr	r2, [r3, #24]
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f042 0208 	orr.w	r2, r2, #8
 8010708:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2220      	movs	r2, #32
 801070e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2200      	movs	r2, #0
 8010716:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010718:	2300      	movs	r3, #0
}
 801071a:	4618      	mov	r0, r3
 801071c:	3768      	adds	r7, #104	; 0x68
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
 8010722:	bf00      	nop
 8010724:	effffffe 	.word	0xeffffffe

08010728 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b0ba      	sub	sp, #232	; 0xe8
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	69db      	ldr	r3, [r3, #28]
 8010736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	689b      	ldr	r3, [r3, #8]
 801074a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801074e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010752:	f640 030f 	movw	r3, #2063	; 0x80f
 8010756:	4013      	ands	r3, r2
 8010758:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801075c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010760:	2b00      	cmp	r3, #0
 8010762:	d11b      	bne.n	801079c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010768:	f003 0320 	and.w	r3, r3, #32
 801076c:	2b00      	cmp	r3, #0
 801076e:	d015      	beq.n	801079c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010774:	f003 0320 	and.w	r3, r3, #32
 8010778:	2b00      	cmp	r3, #0
 801077a:	d105      	bne.n	8010788 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801077c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010784:	2b00      	cmp	r3, #0
 8010786:	d009      	beq.n	801079c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801078c:	2b00      	cmp	r3, #0
 801078e:	f000 8377 	beq.w	8010e80 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010796:	6878      	ldr	r0, [r7, #4]
 8010798:	4798      	blx	r3
      }
      return;
 801079a:	e371      	b.n	8010e80 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801079c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	f000 8123 	beq.w	80109ec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80107a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80107aa:	4b8d      	ldr	r3, [pc, #564]	; (80109e0 <HAL_UART_IRQHandler+0x2b8>)
 80107ac:	4013      	ands	r3, r2
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d106      	bne.n	80107c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80107b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80107b6:	4b8b      	ldr	r3, [pc, #556]	; (80109e4 <HAL_UART_IRQHandler+0x2bc>)
 80107b8:	4013      	ands	r3, r2
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	f000 8116 	beq.w	80109ec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80107c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107c4:	f003 0301 	and.w	r3, r3, #1
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d011      	beq.n	80107f0 <HAL_UART_IRQHandler+0xc8>
 80107cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80107d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d00b      	beq.n	80107f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	2201      	movs	r2, #1
 80107de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80107e6:	f043 0201 	orr.w	r2, r3, #1
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80107f4:	f003 0302 	and.w	r3, r3, #2
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d011      	beq.n	8010820 <HAL_UART_IRQHandler+0xf8>
 80107fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010800:	f003 0301 	and.w	r3, r3, #1
 8010804:	2b00      	cmp	r3, #0
 8010806:	d00b      	beq.n	8010820 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	2202      	movs	r2, #2
 801080e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010816:	f043 0204 	orr.w	r2, r3, #4
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010824:	f003 0304 	and.w	r3, r3, #4
 8010828:	2b00      	cmp	r3, #0
 801082a:	d011      	beq.n	8010850 <HAL_UART_IRQHandler+0x128>
 801082c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010830:	f003 0301 	and.w	r3, r3, #1
 8010834:	2b00      	cmp	r3, #0
 8010836:	d00b      	beq.n	8010850 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	2204      	movs	r2, #4
 801083e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010846:	f043 0202 	orr.w	r2, r3, #2
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010854:	f003 0308 	and.w	r3, r3, #8
 8010858:	2b00      	cmp	r3, #0
 801085a:	d017      	beq.n	801088c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801085c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010860:	f003 0320 	and.w	r3, r3, #32
 8010864:	2b00      	cmp	r3, #0
 8010866:	d105      	bne.n	8010874 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010868:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801086c:	4b5c      	ldr	r3, [pc, #368]	; (80109e0 <HAL_UART_IRQHandler+0x2b8>)
 801086e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010870:	2b00      	cmp	r3, #0
 8010872:	d00b      	beq.n	801088c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	2208      	movs	r2, #8
 801087a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010882:	f043 0208 	orr.w	r2, r3, #8
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801088c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010894:	2b00      	cmp	r3, #0
 8010896:	d012      	beq.n	80108be <HAL_UART_IRQHandler+0x196>
 8010898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801089c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d00c      	beq.n	80108be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80108ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108b4:	f043 0220 	orr.w	r2, r3, #32
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	f000 82dd 	beq.w	8010e84 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80108ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108ce:	f003 0320 	and.w	r3, r3, #32
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d013      	beq.n	80108fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80108d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108da:	f003 0320 	and.w	r3, r3, #32
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d105      	bne.n	80108ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80108e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80108e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d007      	beq.n	80108fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d003      	beq.n	80108fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010904:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	689b      	ldr	r3, [r3, #8]
 801090e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010912:	2b40      	cmp	r3, #64	; 0x40
 8010914:	d005      	beq.n	8010922 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801091a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801091e:	2b00      	cmp	r3, #0
 8010920:	d054      	beq.n	80109cc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f001 fb60 	bl	8011fe8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	689b      	ldr	r3, [r3, #8]
 801092e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010932:	2b40      	cmp	r3, #64	; 0x40
 8010934:	d146      	bne.n	80109c4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	3308      	adds	r3, #8
 801093c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010944:	e853 3f00 	ldrex	r3, [r3]
 8010948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801094c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	3308      	adds	r3, #8
 801095e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010962:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801096a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801096e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010972:	e841 2300 	strex	r3, r2, [r1]
 8010976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801097a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801097e:	2b00      	cmp	r3, #0
 8010980:	d1d9      	bne.n	8010936 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010988:	2b00      	cmp	r3, #0
 801098a:	d017      	beq.n	80109bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010992:	4a15      	ldr	r2, [pc, #84]	; (80109e8 <HAL_UART_IRQHandler+0x2c0>)
 8010994:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801099c:	4618      	mov	r0, r3
 801099e:	f7f6 fd6d 	bl	800747c <HAL_DMA_Abort_IT>
 80109a2:	4603      	mov	r3, r0
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d019      	beq.n	80109dc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80109ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80109b6:	4610      	mov	r0, r2
 80109b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109ba:	e00f      	b.n	80109dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f000 fa77 	bl	8010eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109c2:	e00b      	b.n	80109dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f000 fa73 	bl	8010eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109ca:	e007      	b.n	80109dc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f000 fa6f 	bl	8010eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2200      	movs	r2, #0
 80109d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80109da:	e253      	b.n	8010e84 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109dc:	bf00      	nop
    return;
 80109de:	e251      	b.n	8010e84 <HAL_UART_IRQHandler+0x75c>
 80109e0:	10000001 	.word	0x10000001
 80109e4:	04000120 	.word	0x04000120
 80109e8:	080121e7 	.word	0x080121e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	f040 81e7 	bne.w	8010dc4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80109f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80109fa:	f003 0310 	and.w	r3, r3, #16
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	f000 81e0 	beq.w	8010dc4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a08:	f003 0310 	and.w	r3, r3, #16
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f000 81d9 	beq.w	8010dc4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	2210      	movs	r2, #16
 8010a18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a24:	2b40      	cmp	r3, #64	; 0x40
 8010a26:	f040 8151 	bne.w	8010ccc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	4a96      	ldr	r2, [pc, #600]	; (8010c8c <HAL_UART_IRQHandler+0x564>)
 8010a34:	4293      	cmp	r3, r2
 8010a36:	d068      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4a93      	ldr	r2, [pc, #588]	; (8010c90 <HAL_UART_IRQHandler+0x568>)
 8010a42:	4293      	cmp	r3, r2
 8010a44:	d061      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	4a91      	ldr	r2, [pc, #580]	; (8010c94 <HAL_UART_IRQHandler+0x56c>)
 8010a50:	4293      	cmp	r3, r2
 8010a52:	d05a      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4a8e      	ldr	r2, [pc, #568]	; (8010c98 <HAL_UART_IRQHandler+0x570>)
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d053      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	4a8c      	ldr	r2, [pc, #560]	; (8010c9c <HAL_UART_IRQHandler+0x574>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d04c      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4a89      	ldr	r2, [pc, #548]	; (8010ca0 <HAL_UART_IRQHandler+0x578>)
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	d045      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	4a87      	ldr	r2, [pc, #540]	; (8010ca4 <HAL_UART_IRQHandler+0x57c>)
 8010a88:	4293      	cmp	r3, r2
 8010a8a:	d03e      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a84      	ldr	r2, [pc, #528]	; (8010ca8 <HAL_UART_IRQHandler+0x580>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d037      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	4a82      	ldr	r2, [pc, #520]	; (8010cac <HAL_UART_IRQHandler+0x584>)
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	d030      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	4a7f      	ldr	r2, [pc, #508]	; (8010cb0 <HAL_UART_IRQHandler+0x588>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d029      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	4a7d      	ldr	r2, [pc, #500]	; (8010cb4 <HAL_UART_IRQHandler+0x58c>)
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	d022      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	4a7a      	ldr	r2, [pc, #488]	; (8010cb8 <HAL_UART_IRQHandler+0x590>)
 8010ace:	4293      	cmp	r3, r2
 8010ad0:	d01b      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	4a78      	ldr	r2, [pc, #480]	; (8010cbc <HAL_UART_IRQHandler+0x594>)
 8010adc:	4293      	cmp	r3, r2
 8010ade:	d014      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	4a75      	ldr	r2, [pc, #468]	; (8010cc0 <HAL_UART_IRQHandler+0x598>)
 8010aea:	4293      	cmp	r3, r2
 8010aec:	d00d      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	4a73      	ldr	r2, [pc, #460]	; (8010cc4 <HAL_UART_IRQHandler+0x59c>)
 8010af8:	4293      	cmp	r3, r2
 8010afa:	d006      	beq.n	8010b0a <HAL_UART_IRQHandler+0x3e2>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	4a70      	ldr	r2, [pc, #448]	; (8010cc8 <HAL_UART_IRQHandler+0x5a0>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d106      	bne.n	8010b18 <HAL_UART_IRQHandler+0x3f0>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	e005      	b.n	8010b24 <HAL_UART_IRQHandler+0x3fc>
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010b28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	f000 81ab 	beq.w	8010e88 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	f080 81a3 	bcs.w	8010e88 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010b48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b52:	69db      	ldr	r3, [r3, #28]
 8010b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b58:	f000 8087 	beq.w	8010c6a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b68:	e853 3f00 	ldrex	r3, [r3]
 8010b6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010b70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	461a      	mov	r2, r3
 8010b82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010b86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010b8a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010b92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010b96:	e841 2300 	strex	r3, r2, [r1]
 8010b9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d1da      	bne.n	8010b5c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	3308      	adds	r3, #8
 8010bac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bb0:	e853 3f00 	ldrex	r3, [r3]
 8010bb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010bb8:	f023 0301 	bic.w	r3, r3, #1
 8010bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	3308      	adds	r3, #8
 8010bc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010bca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010bce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010bd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010bd6:	e841 2300 	strex	r3, r2, [r1]
 8010bda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d1e1      	bne.n	8010ba6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	3308      	adds	r3, #8
 8010be8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bec:	e853 3f00 	ldrex	r3, [r3]
 8010bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	3308      	adds	r3, #8
 8010c02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010c06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010c08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010c0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010c0e:	e841 2300 	strex	r3, r2, [r1]
 8010c12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d1e3      	bne.n	8010be2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2220      	movs	r2, #32
 8010c1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2200      	movs	r2, #0
 8010c26:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c30:	e853 3f00 	ldrex	r3, [r3]
 8010c34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c38:	f023 0310 	bic.w	r3, r3, #16
 8010c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	461a      	mov	r2, r3
 8010c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010c4c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010c50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010c52:	e841 2300 	strex	r3, r2, [r1]
 8010c56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d1e4      	bne.n	8010c28 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7f6 f8eb 	bl	8006e40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2202      	movs	r2, #2
 8010c6e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	1ad3      	subs	r3, r2, r3
 8010c80:	b29b      	uxth	r3, r3
 8010c82:	4619      	mov	r1, r3
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f000 f91d 	bl	8010ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010c8a:	e0fd      	b.n	8010e88 <HAL_UART_IRQHandler+0x760>
 8010c8c:	40020010 	.word	0x40020010
 8010c90:	40020028 	.word	0x40020028
 8010c94:	40020040 	.word	0x40020040
 8010c98:	40020058 	.word	0x40020058
 8010c9c:	40020070 	.word	0x40020070
 8010ca0:	40020088 	.word	0x40020088
 8010ca4:	400200a0 	.word	0x400200a0
 8010ca8:	400200b8 	.word	0x400200b8
 8010cac:	40020410 	.word	0x40020410
 8010cb0:	40020428 	.word	0x40020428
 8010cb4:	40020440 	.word	0x40020440
 8010cb8:	40020458 	.word	0x40020458
 8010cbc:	40020470 	.word	0x40020470
 8010cc0:	40020488 	.word	0x40020488
 8010cc4:	400204a0 	.word	0x400204a0
 8010cc8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	1ad3      	subs	r3, r2, r3
 8010cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	f000 80cf 	beq.w	8010e8c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010cee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	f000 80ca 	beq.w	8010e8c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d00:	e853 3f00 	ldrex	r3, [r3]
 8010d04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	461a      	mov	r2, r3
 8010d16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d1a:	647b      	str	r3, [r7, #68]	; 0x44
 8010d1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d22:	e841 2300 	strex	r3, r2, [r1]
 8010d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d1e4      	bne.n	8010cf8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	3308      	adds	r3, #8
 8010d34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d38:	e853 3f00 	ldrex	r3, [r3]
 8010d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8010d3e:	6a3a      	ldr	r2, [r7, #32]
 8010d40:	4b55      	ldr	r3, [pc, #340]	; (8010e98 <HAL_UART_IRQHandler+0x770>)
 8010d42:	4013      	ands	r3, r2
 8010d44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	3308      	adds	r3, #8
 8010d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010d52:	633a      	str	r2, [r7, #48]	; 0x30
 8010d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d5a:	e841 2300 	strex	r3, r2, [r1]
 8010d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d1e3      	bne.n	8010d2e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2220      	movs	r2, #32
 8010d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2200      	movs	r2, #0
 8010d72:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2200      	movs	r2, #0
 8010d78:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	e853 3f00 	ldrex	r3, [r3]
 8010d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	f023 0310 	bic.w	r3, r3, #16
 8010d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	461a      	mov	r2, r3
 8010d98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010d9c:	61fb      	str	r3, [r7, #28]
 8010d9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010da0:	69b9      	ldr	r1, [r7, #24]
 8010da2:	69fa      	ldr	r2, [r7, #28]
 8010da4:	e841 2300 	strex	r3, r2, [r1]
 8010da8:	617b      	str	r3, [r7, #20]
   return(result);
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d1e4      	bne.n	8010d7a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2202      	movs	r2, #2
 8010db4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010db6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010dba:	4619      	mov	r1, r3
 8010dbc:	6878      	ldr	r0, [r7, #4]
 8010dbe:	f000 f881 	bl	8010ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010dc2:	e063      	b.n	8010e8c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d00e      	beq.n	8010dee <HAL_UART_IRQHandler+0x6c6>
 8010dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d008      	beq.n	8010dee <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010de4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f001 ff5a 	bl	8012ca0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010dec:	e051      	b.n	8010e92 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d014      	beq.n	8010e24 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d105      	bne.n	8010e12 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d008      	beq.n	8010e24 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d03a      	beq.n	8010e90 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	4798      	blx	r3
    }
    return;
 8010e22:	e035      	b.n	8010e90 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d009      	beq.n	8010e44 <HAL_UART_IRQHandler+0x71c>
 8010e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d003      	beq.n	8010e44 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010e3c:	6878      	ldr	r0, [r7, #4]
 8010e3e:	f001 f9e8 	bl	8012212 <UART_EndTransmit_IT>
    return;
 8010e42:	e026      	b.n	8010e92 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d009      	beq.n	8010e64 <HAL_UART_IRQHandler+0x73c>
 8010e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d003      	beq.n	8010e64 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f001 ff33 	bl	8012cc8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e62:	e016      	b.n	8010e92 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d010      	beq.n	8010e92 <HAL_UART_IRQHandler+0x76a>
 8010e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	da0c      	bge.n	8010e92 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f001 ff1b 	bl	8012cb4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010e7e:	e008      	b.n	8010e92 <HAL_UART_IRQHandler+0x76a>
      return;
 8010e80:	bf00      	nop
 8010e82:	e006      	b.n	8010e92 <HAL_UART_IRQHandler+0x76a>
    return;
 8010e84:	bf00      	nop
 8010e86:	e004      	b.n	8010e92 <HAL_UART_IRQHandler+0x76a>
      return;
 8010e88:	bf00      	nop
 8010e8a:	e002      	b.n	8010e92 <HAL_UART_IRQHandler+0x76a>
      return;
 8010e8c:	bf00      	nop
 8010e8e:	e000      	b.n	8010e92 <HAL_UART_IRQHandler+0x76a>
    return;
 8010e90:	bf00      	nop
  }
}
 8010e92:	37e8      	adds	r7, #232	; 0xe8
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}
 8010e98:	effffffe 	.word	0xeffffffe

08010e9c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b083      	sub	sp, #12
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010ea4:	bf00      	nop
 8010ea6:	370c      	adds	r7, #12
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eae:	4770      	bx	lr

08010eb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010eb0:	b480      	push	{r7}
 8010eb2:	b083      	sub	sp, #12
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010eb8:	bf00      	nop
 8010eba:	370c      	adds	r7, #12
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec2:	4770      	bx	lr

08010ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010ec4:	b480      	push	{r7}
 8010ec6:	b083      	sub	sp, #12
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	460b      	mov	r3, r1
 8010ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010ed0:	bf00      	nop
 8010ed2:	370c      	adds	r7, #12
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eda:	4770      	bx	lr

08010edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010ee0:	b092      	sub	sp, #72	; 0x48
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	689a      	ldr	r2, [r3, #8]
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	691b      	ldr	r3, [r3, #16]
 8010ef4:	431a      	orrs	r2, r3
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	695b      	ldr	r3, [r3, #20]
 8010efa:	431a      	orrs	r2, r3
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	69db      	ldr	r3, [r3, #28]
 8010f00:	4313      	orrs	r3, r2
 8010f02:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	681a      	ldr	r2, [r3, #0]
 8010f0a:	4bbe      	ldr	r3, [pc, #760]	; (8011204 <UART_SetConfig+0x328>)
 8010f0c:	4013      	ands	r3, r2
 8010f0e:	697a      	ldr	r2, [r7, #20]
 8010f10:	6812      	ldr	r2, [r2, #0]
 8010f12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f14:	430b      	orrs	r3, r1
 8010f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	68da      	ldr	r2, [r3, #12]
 8010f26:	697b      	ldr	r3, [r7, #20]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	430a      	orrs	r2, r1
 8010f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	699b      	ldr	r3, [r3, #24]
 8010f32:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	4ab3      	ldr	r2, [pc, #716]	; (8011208 <UART_SetConfig+0x32c>)
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d004      	beq.n	8010f48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	6a1b      	ldr	r3, [r3, #32]
 8010f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f44:	4313      	orrs	r3, r2
 8010f46:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	689a      	ldr	r2, [r3, #8]
 8010f4e:	4baf      	ldr	r3, [pc, #700]	; (801120c <UART_SetConfig+0x330>)
 8010f50:	4013      	ands	r3, r2
 8010f52:	697a      	ldr	r2, [r7, #20]
 8010f54:	6812      	ldr	r2, [r2, #0]
 8010f56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f58:	430b      	orrs	r3, r1
 8010f5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f62:	f023 010f 	bic.w	r1, r3, #15
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	430a      	orrs	r2, r1
 8010f70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	4aa6      	ldr	r2, [pc, #664]	; (8011210 <UART_SetConfig+0x334>)
 8010f78:	4293      	cmp	r3, r2
 8010f7a:	d177      	bne.n	801106c <UART_SetConfig+0x190>
 8010f7c:	4ba5      	ldr	r3, [pc, #660]	; (8011214 <UART_SetConfig+0x338>)
 8010f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f84:	2b28      	cmp	r3, #40	; 0x28
 8010f86:	d86d      	bhi.n	8011064 <UART_SetConfig+0x188>
 8010f88:	a201      	add	r2, pc, #4	; (adr r2, 8010f90 <UART_SetConfig+0xb4>)
 8010f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f8e:	bf00      	nop
 8010f90:	08011035 	.word	0x08011035
 8010f94:	08011065 	.word	0x08011065
 8010f98:	08011065 	.word	0x08011065
 8010f9c:	08011065 	.word	0x08011065
 8010fa0:	08011065 	.word	0x08011065
 8010fa4:	08011065 	.word	0x08011065
 8010fa8:	08011065 	.word	0x08011065
 8010fac:	08011065 	.word	0x08011065
 8010fb0:	0801103d 	.word	0x0801103d
 8010fb4:	08011065 	.word	0x08011065
 8010fb8:	08011065 	.word	0x08011065
 8010fbc:	08011065 	.word	0x08011065
 8010fc0:	08011065 	.word	0x08011065
 8010fc4:	08011065 	.word	0x08011065
 8010fc8:	08011065 	.word	0x08011065
 8010fcc:	08011065 	.word	0x08011065
 8010fd0:	08011045 	.word	0x08011045
 8010fd4:	08011065 	.word	0x08011065
 8010fd8:	08011065 	.word	0x08011065
 8010fdc:	08011065 	.word	0x08011065
 8010fe0:	08011065 	.word	0x08011065
 8010fe4:	08011065 	.word	0x08011065
 8010fe8:	08011065 	.word	0x08011065
 8010fec:	08011065 	.word	0x08011065
 8010ff0:	0801104d 	.word	0x0801104d
 8010ff4:	08011065 	.word	0x08011065
 8010ff8:	08011065 	.word	0x08011065
 8010ffc:	08011065 	.word	0x08011065
 8011000:	08011065 	.word	0x08011065
 8011004:	08011065 	.word	0x08011065
 8011008:	08011065 	.word	0x08011065
 801100c:	08011065 	.word	0x08011065
 8011010:	08011055 	.word	0x08011055
 8011014:	08011065 	.word	0x08011065
 8011018:	08011065 	.word	0x08011065
 801101c:	08011065 	.word	0x08011065
 8011020:	08011065 	.word	0x08011065
 8011024:	08011065 	.word	0x08011065
 8011028:	08011065 	.word	0x08011065
 801102c:	08011065 	.word	0x08011065
 8011030:	0801105d 	.word	0x0801105d
 8011034:	2301      	movs	r3, #1
 8011036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103a:	e222      	b.n	8011482 <UART_SetConfig+0x5a6>
 801103c:	2304      	movs	r3, #4
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011042:	e21e      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011044:	2308      	movs	r3, #8
 8011046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104a:	e21a      	b.n	8011482 <UART_SetConfig+0x5a6>
 801104c:	2310      	movs	r3, #16
 801104e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011052:	e216      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011054:	2320      	movs	r3, #32
 8011056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105a:	e212      	b.n	8011482 <UART_SetConfig+0x5a6>
 801105c:	2340      	movs	r3, #64	; 0x40
 801105e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011062:	e20e      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011064:	2380      	movs	r3, #128	; 0x80
 8011066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106a:	e20a      	b.n	8011482 <UART_SetConfig+0x5a6>
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a69      	ldr	r2, [pc, #420]	; (8011218 <UART_SetConfig+0x33c>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d130      	bne.n	80110d8 <UART_SetConfig+0x1fc>
 8011076:	4b67      	ldr	r3, [pc, #412]	; (8011214 <UART_SetConfig+0x338>)
 8011078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801107a:	f003 0307 	and.w	r3, r3, #7
 801107e:	2b05      	cmp	r3, #5
 8011080:	d826      	bhi.n	80110d0 <UART_SetConfig+0x1f4>
 8011082:	a201      	add	r2, pc, #4	; (adr r2, 8011088 <UART_SetConfig+0x1ac>)
 8011084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011088:	080110a1 	.word	0x080110a1
 801108c:	080110a9 	.word	0x080110a9
 8011090:	080110b1 	.word	0x080110b1
 8011094:	080110b9 	.word	0x080110b9
 8011098:	080110c1 	.word	0x080110c1
 801109c:	080110c9 	.word	0x080110c9
 80110a0:	2300      	movs	r3, #0
 80110a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110a6:	e1ec      	b.n	8011482 <UART_SetConfig+0x5a6>
 80110a8:	2304      	movs	r3, #4
 80110aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ae:	e1e8      	b.n	8011482 <UART_SetConfig+0x5a6>
 80110b0:	2308      	movs	r3, #8
 80110b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110b6:	e1e4      	b.n	8011482 <UART_SetConfig+0x5a6>
 80110b8:	2310      	movs	r3, #16
 80110ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110be:	e1e0      	b.n	8011482 <UART_SetConfig+0x5a6>
 80110c0:	2320      	movs	r3, #32
 80110c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c6:	e1dc      	b.n	8011482 <UART_SetConfig+0x5a6>
 80110c8:	2340      	movs	r3, #64	; 0x40
 80110ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ce:	e1d8      	b.n	8011482 <UART_SetConfig+0x5a6>
 80110d0:	2380      	movs	r3, #128	; 0x80
 80110d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110d6:	e1d4      	b.n	8011482 <UART_SetConfig+0x5a6>
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4a4f      	ldr	r2, [pc, #316]	; (801121c <UART_SetConfig+0x340>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	d130      	bne.n	8011144 <UART_SetConfig+0x268>
 80110e2:	4b4c      	ldr	r3, [pc, #304]	; (8011214 <UART_SetConfig+0x338>)
 80110e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110e6:	f003 0307 	and.w	r3, r3, #7
 80110ea:	2b05      	cmp	r3, #5
 80110ec:	d826      	bhi.n	801113c <UART_SetConfig+0x260>
 80110ee:	a201      	add	r2, pc, #4	; (adr r2, 80110f4 <UART_SetConfig+0x218>)
 80110f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110f4:	0801110d 	.word	0x0801110d
 80110f8:	08011115 	.word	0x08011115
 80110fc:	0801111d 	.word	0x0801111d
 8011100:	08011125 	.word	0x08011125
 8011104:	0801112d 	.word	0x0801112d
 8011108:	08011135 	.word	0x08011135
 801110c:	2300      	movs	r3, #0
 801110e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011112:	e1b6      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011114:	2304      	movs	r3, #4
 8011116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111a:	e1b2      	b.n	8011482 <UART_SetConfig+0x5a6>
 801111c:	2308      	movs	r3, #8
 801111e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011122:	e1ae      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011124:	2310      	movs	r3, #16
 8011126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112a:	e1aa      	b.n	8011482 <UART_SetConfig+0x5a6>
 801112c:	2320      	movs	r3, #32
 801112e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011132:	e1a6      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011134:	2340      	movs	r3, #64	; 0x40
 8011136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801113a:	e1a2      	b.n	8011482 <UART_SetConfig+0x5a6>
 801113c:	2380      	movs	r3, #128	; 0x80
 801113e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011142:	e19e      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	4a35      	ldr	r2, [pc, #212]	; (8011220 <UART_SetConfig+0x344>)
 801114a:	4293      	cmp	r3, r2
 801114c:	d130      	bne.n	80111b0 <UART_SetConfig+0x2d4>
 801114e:	4b31      	ldr	r3, [pc, #196]	; (8011214 <UART_SetConfig+0x338>)
 8011150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011152:	f003 0307 	and.w	r3, r3, #7
 8011156:	2b05      	cmp	r3, #5
 8011158:	d826      	bhi.n	80111a8 <UART_SetConfig+0x2cc>
 801115a:	a201      	add	r2, pc, #4	; (adr r2, 8011160 <UART_SetConfig+0x284>)
 801115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011160:	08011179 	.word	0x08011179
 8011164:	08011181 	.word	0x08011181
 8011168:	08011189 	.word	0x08011189
 801116c:	08011191 	.word	0x08011191
 8011170:	08011199 	.word	0x08011199
 8011174:	080111a1 	.word	0x080111a1
 8011178:	2300      	movs	r3, #0
 801117a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117e:	e180      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011180:	2304      	movs	r3, #4
 8011182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011186:	e17c      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011188:	2308      	movs	r3, #8
 801118a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118e:	e178      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011190:	2310      	movs	r3, #16
 8011192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011196:	e174      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011198:	2320      	movs	r3, #32
 801119a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119e:	e170      	b.n	8011482 <UART_SetConfig+0x5a6>
 80111a0:	2340      	movs	r3, #64	; 0x40
 80111a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a6:	e16c      	b.n	8011482 <UART_SetConfig+0x5a6>
 80111a8:	2380      	movs	r3, #128	; 0x80
 80111aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ae:	e168      	b.n	8011482 <UART_SetConfig+0x5a6>
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	4a1b      	ldr	r2, [pc, #108]	; (8011224 <UART_SetConfig+0x348>)
 80111b6:	4293      	cmp	r3, r2
 80111b8:	d142      	bne.n	8011240 <UART_SetConfig+0x364>
 80111ba:	4b16      	ldr	r3, [pc, #88]	; (8011214 <UART_SetConfig+0x338>)
 80111bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111be:	f003 0307 	and.w	r3, r3, #7
 80111c2:	2b05      	cmp	r3, #5
 80111c4:	d838      	bhi.n	8011238 <UART_SetConfig+0x35c>
 80111c6:	a201      	add	r2, pc, #4	; (adr r2, 80111cc <UART_SetConfig+0x2f0>)
 80111c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111cc:	080111e5 	.word	0x080111e5
 80111d0:	080111ed 	.word	0x080111ed
 80111d4:	080111f5 	.word	0x080111f5
 80111d8:	080111fd 	.word	0x080111fd
 80111dc:	08011229 	.word	0x08011229
 80111e0:	08011231 	.word	0x08011231
 80111e4:	2300      	movs	r3, #0
 80111e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ea:	e14a      	b.n	8011482 <UART_SetConfig+0x5a6>
 80111ec:	2304      	movs	r3, #4
 80111ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f2:	e146      	b.n	8011482 <UART_SetConfig+0x5a6>
 80111f4:	2308      	movs	r3, #8
 80111f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fa:	e142      	b.n	8011482 <UART_SetConfig+0x5a6>
 80111fc:	2310      	movs	r3, #16
 80111fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011202:	e13e      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011204:	cfff69f3 	.word	0xcfff69f3
 8011208:	58000c00 	.word	0x58000c00
 801120c:	11fff4ff 	.word	0x11fff4ff
 8011210:	40011000 	.word	0x40011000
 8011214:	58024400 	.word	0x58024400
 8011218:	40004400 	.word	0x40004400
 801121c:	40004800 	.word	0x40004800
 8011220:	40004c00 	.word	0x40004c00
 8011224:	40005000 	.word	0x40005000
 8011228:	2320      	movs	r3, #32
 801122a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122e:	e128      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011230:	2340      	movs	r3, #64	; 0x40
 8011232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011236:	e124      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011238:	2380      	movs	r3, #128	; 0x80
 801123a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123e:	e120      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	4acb      	ldr	r2, [pc, #812]	; (8011574 <UART_SetConfig+0x698>)
 8011246:	4293      	cmp	r3, r2
 8011248:	d176      	bne.n	8011338 <UART_SetConfig+0x45c>
 801124a:	4bcb      	ldr	r3, [pc, #812]	; (8011578 <UART_SetConfig+0x69c>)
 801124c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801124e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011252:	2b28      	cmp	r3, #40	; 0x28
 8011254:	d86c      	bhi.n	8011330 <UART_SetConfig+0x454>
 8011256:	a201      	add	r2, pc, #4	; (adr r2, 801125c <UART_SetConfig+0x380>)
 8011258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801125c:	08011301 	.word	0x08011301
 8011260:	08011331 	.word	0x08011331
 8011264:	08011331 	.word	0x08011331
 8011268:	08011331 	.word	0x08011331
 801126c:	08011331 	.word	0x08011331
 8011270:	08011331 	.word	0x08011331
 8011274:	08011331 	.word	0x08011331
 8011278:	08011331 	.word	0x08011331
 801127c:	08011309 	.word	0x08011309
 8011280:	08011331 	.word	0x08011331
 8011284:	08011331 	.word	0x08011331
 8011288:	08011331 	.word	0x08011331
 801128c:	08011331 	.word	0x08011331
 8011290:	08011331 	.word	0x08011331
 8011294:	08011331 	.word	0x08011331
 8011298:	08011331 	.word	0x08011331
 801129c:	08011311 	.word	0x08011311
 80112a0:	08011331 	.word	0x08011331
 80112a4:	08011331 	.word	0x08011331
 80112a8:	08011331 	.word	0x08011331
 80112ac:	08011331 	.word	0x08011331
 80112b0:	08011331 	.word	0x08011331
 80112b4:	08011331 	.word	0x08011331
 80112b8:	08011331 	.word	0x08011331
 80112bc:	08011319 	.word	0x08011319
 80112c0:	08011331 	.word	0x08011331
 80112c4:	08011331 	.word	0x08011331
 80112c8:	08011331 	.word	0x08011331
 80112cc:	08011331 	.word	0x08011331
 80112d0:	08011331 	.word	0x08011331
 80112d4:	08011331 	.word	0x08011331
 80112d8:	08011331 	.word	0x08011331
 80112dc:	08011321 	.word	0x08011321
 80112e0:	08011331 	.word	0x08011331
 80112e4:	08011331 	.word	0x08011331
 80112e8:	08011331 	.word	0x08011331
 80112ec:	08011331 	.word	0x08011331
 80112f0:	08011331 	.word	0x08011331
 80112f4:	08011331 	.word	0x08011331
 80112f8:	08011331 	.word	0x08011331
 80112fc:	08011329 	.word	0x08011329
 8011300:	2301      	movs	r3, #1
 8011302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011306:	e0bc      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011308:	2304      	movs	r3, #4
 801130a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130e:	e0b8      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011310:	2308      	movs	r3, #8
 8011312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011316:	e0b4      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011318:	2310      	movs	r3, #16
 801131a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801131e:	e0b0      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011320:	2320      	movs	r3, #32
 8011322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011326:	e0ac      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011328:	2340      	movs	r3, #64	; 0x40
 801132a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801132e:	e0a8      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011330:	2380      	movs	r3, #128	; 0x80
 8011332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011336:	e0a4      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	4a8f      	ldr	r2, [pc, #572]	; (801157c <UART_SetConfig+0x6a0>)
 801133e:	4293      	cmp	r3, r2
 8011340:	d130      	bne.n	80113a4 <UART_SetConfig+0x4c8>
 8011342:	4b8d      	ldr	r3, [pc, #564]	; (8011578 <UART_SetConfig+0x69c>)
 8011344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011346:	f003 0307 	and.w	r3, r3, #7
 801134a:	2b05      	cmp	r3, #5
 801134c:	d826      	bhi.n	801139c <UART_SetConfig+0x4c0>
 801134e:	a201      	add	r2, pc, #4	; (adr r2, 8011354 <UART_SetConfig+0x478>)
 8011350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011354:	0801136d 	.word	0x0801136d
 8011358:	08011375 	.word	0x08011375
 801135c:	0801137d 	.word	0x0801137d
 8011360:	08011385 	.word	0x08011385
 8011364:	0801138d 	.word	0x0801138d
 8011368:	08011395 	.word	0x08011395
 801136c:	2300      	movs	r3, #0
 801136e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011372:	e086      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011374:	2304      	movs	r3, #4
 8011376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137a:	e082      	b.n	8011482 <UART_SetConfig+0x5a6>
 801137c:	2308      	movs	r3, #8
 801137e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011382:	e07e      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011384:	2310      	movs	r3, #16
 8011386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138a:	e07a      	b.n	8011482 <UART_SetConfig+0x5a6>
 801138c:	2320      	movs	r3, #32
 801138e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011392:	e076      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011394:	2340      	movs	r3, #64	; 0x40
 8011396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139a:	e072      	b.n	8011482 <UART_SetConfig+0x5a6>
 801139c:	2380      	movs	r3, #128	; 0x80
 801139e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a2:	e06e      	b.n	8011482 <UART_SetConfig+0x5a6>
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	4a75      	ldr	r2, [pc, #468]	; (8011580 <UART_SetConfig+0x6a4>)
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d130      	bne.n	8011410 <UART_SetConfig+0x534>
 80113ae:	4b72      	ldr	r3, [pc, #456]	; (8011578 <UART_SetConfig+0x69c>)
 80113b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113b2:	f003 0307 	and.w	r3, r3, #7
 80113b6:	2b05      	cmp	r3, #5
 80113b8:	d826      	bhi.n	8011408 <UART_SetConfig+0x52c>
 80113ba:	a201      	add	r2, pc, #4	; (adr r2, 80113c0 <UART_SetConfig+0x4e4>)
 80113bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c0:	080113d9 	.word	0x080113d9
 80113c4:	080113e1 	.word	0x080113e1
 80113c8:	080113e9 	.word	0x080113e9
 80113cc:	080113f1 	.word	0x080113f1
 80113d0:	080113f9 	.word	0x080113f9
 80113d4:	08011401 	.word	0x08011401
 80113d8:	2300      	movs	r3, #0
 80113da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113de:	e050      	b.n	8011482 <UART_SetConfig+0x5a6>
 80113e0:	2304      	movs	r3, #4
 80113e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e6:	e04c      	b.n	8011482 <UART_SetConfig+0x5a6>
 80113e8:	2308      	movs	r3, #8
 80113ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ee:	e048      	b.n	8011482 <UART_SetConfig+0x5a6>
 80113f0:	2310      	movs	r3, #16
 80113f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113f6:	e044      	b.n	8011482 <UART_SetConfig+0x5a6>
 80113f8:	2320      	movs	r3, #32
 80113fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113fe:	e040      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011400:	2340      	movs	r3, #64	; 0x40
 8011402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011406:	e03c      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011408:	2380      	movs	r3, #128	; 0x80
 801140a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801140e:	e038      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	4a5b      	ldr	r2, [pc, #364]	; (8011584 <UART_SetConfig+0x6a8>)
 8011416:	4293      	cmp	r3, r2
 8011418:	d130      	bne.n	801147c <UART_SetConfig+0x5a0>
 801141a:	4b57      	ldr	r3, [pc, #348]	; (8011578 <UART_SetConfig+0x69c>)
 801141c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801141e:	f003 0307 	and.w	r3, r3, #7
 8011422:	2b05      	cmp	r3, #5
 8011424:	d826      	bhi.n	8011474 <UART_SetConfig+0x598>
 8011426:	a201      	add	r2, pc, #4	; (adr r2, 801142c <UART_SetConfig+0x550>)
 8011428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801142c:	08011445 	.word	0x08011445
 8011430:	0801144d 	.word	0x0801144d
 8011434:	08011455 	.word	0x08011455
 8011438:	0801145d 	.word	0x0801145d
 801143c:	08011465 	.word	0x08011465
 8011440:	0801146d 	.word	0x0801146d
 8011444:	2302      	movs	r3, #2
 8011446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801144a:	e01a      	b.n	8011482 <UART_SetConfig+0x5a6>
 801144c:	2304      	movs	r3, #4
 801144e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011452:	e016      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011454:	2308      	movs	r3, #8
 8011456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801145a:	e012      	b.n	8011482 <UART_SetConfig+0x5a6>
 801145c:	2310      	movs	r3, #16
 801145e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011462:	e00e      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011464:	2320      	movs	r3, #32
 8011466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146a:	e00a      	b.n	8011482 <UART_SetConfig+0x5a6>
 801146c:	2340      	movs	r3, #64	; 0x40
 801146e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011472:	e006      	b.n	8011482 <UART_SetConfig+0x5a6>
 8011474:	2380      	movs	r3, #128	; 0x80
 8011476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801147a:	e002      	b.n	8011482 <UART_SetConfig+0x5a6>
 801147c:	2380      	movs	r3, #128	; 0x80
 801147e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	4a3f      	ldr	r2, [pc, #252]	; (8011584 <UART_SetConfig+0x6a8>)
 8011488:	4293      	cmp	r3, r2
 801148a:	f040 80f8 	bne.w	801167e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801148e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011492:	2b20      	cmp	r3, #32
 8011494:	dc46      	bgt.n	8011524 <UART_SetConfig+0x648>
 8011496:	2b02      	cmp	r3, #2
 8011498:	f2c0 8082 	blt.w	80115a0 <UART_SetConfig+0x6c4>
 801149c:	3b02      	subs	r3, #2
 801149e:	2b1e      	cmp	r3, #30
 80114a0:	d87e      	bhi.n	80115a0 <UART_SetConfig+0x6c4>
 80114a2:	a201      	add	r2, pc, #4	; (adr r2, 80114a8 <UART_SetConfig+0x5cc>)
 80114a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114a8:	0801152b 	.word	0x0801152b
 80114ac:	080115a1 	.word	0x080115a1
 80114b0:	08011533 	.word	0x08011533
 80114b4:	080115a1 	.word	0x080115a1
 80114b8:	080115a1 	.word	0x080115a1
 80114bc:	080115a1 	.word	0x080115a1
 80114c0:	08011543 	.word	0x08011543
 80114c4:	080115a1 	.word	0x080115a1
 80114c8:	080115a1 	.word	0x080115a1
 80114cc:	080115a1 	.word	0x080115a1
 80114d0:	080115a1 	.word	0x080115a1
 80114d4:	080115a1 	.word	0x080115a1
 80114d8:	080115a1 	.word	0x080115a1
 80114dc:	080115a1 	.word	0x080115a1
 80114e0:	08011553 	.word	0x08011553
 80114e4:	080115a1 	.word	0x080115a1
 80114e8:	080115a1 	.word	0x080115a1
 80114ec:	080115a1 	.word	0x080115a1
 80114f0:	080115a1 	.word	0x080115a1
 80114f4:	080115a1 	.word	0x080115a1
 80114f8:	080115a1 	.word	0x080115a1
 80114fc:	080115a1 	.word	0x080115a1
 8011500:	080115a1 	.word	0x080115a1
 8011504:	080115a1 	.word	0x080115a1
 8011508:	080115a1 	.word	0x080115a1
 801150c:	080115a1 	.word	0x080115a1
 8011510:	080115a1 	.word	0x080115a1
 8011514:	080115a1 	.word	0x080115a1
 8011518:	080115a1 	.word	0x080115a1
 801151c:	080115a1 	.word	0x080115a1
 8011520:	08011593 	.word	0x08011593
 8011524:	2b40      	cmp	r3, #64	; 0x40
 8011526:	d037      	beq.n	8011598 <UART_SetConfig+0x6bc>
 8011528:	e03a      	b.n	80115a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801152a:	f7fb fce5 	bl	800cef8 <HAL_RCCEx_GetD3PCLK1Freq>
 801152e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011530:	e03c      	b.n	80115ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011536:	4618      	mov	r0, r3
 8011538:	f7fb fcf4 	bl	800cf24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801153c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801153e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011540:	e034      	b.n	80115ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011542:	f107 0318 	add.w	r3, r7, #24
 8011546:	4618      	mov	r0, r3
 8011548:	f7fb fe40 	bl	800d1cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801154c:	69fb      	ldr	r3, [r7, #28]
 801154e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011550:	e02c      	b.n	80115ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011552:	4b09      	ldr	r3, [pc, #36]	; (8011578 <UART_SetConfig+0x69c>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	f003 0320 	and.w	r3, r3, #32
 801155a:	2b00      	cmp	r3, #0
 801155c:	d016      	beq.n	801158c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801155e:	4b06      	ldr	r3, [pc, #24]	; (8011578 <UART_SetConfig+0x69c>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	08db      	lsrs	r3, r3, #3
 8011564:	f003 0303 	and.w	r3, r3, #3
 8011568:	4a07      	ldr	r2, [pc, #28]	; (8011588 <UART_SetConfig+0x6ac>)
 801156a:	fa22 f303 	lsr.w	r3, r2, r3
 801156e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011570:	e01c      	b.n	80115ac <UART_SetConfig+0x6d0>
 8011572:	bf00      	nop
 8011574:	40011400 	.word	0x40011400
 8011578:	58024400 	.word	0x58024400
 801157c:	40007800 	.word	0x40007800
 8011580:	40007c00 	.word	0x40007c00
 8011584:	58000c00 	.word	0x58000c00
 8011588:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801158c:	4b9d      	ldr	r3, [pc, #628]	; (8011804 <UART_SetConfig+0x928>)
 801158e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011590:	e00c      	b.n	80115ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011592:	4b9d      	ldr	r3, [pc, #628]	; (8011808 <UART_SetConfig+0x92c>)
 8011594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011596:	e009      	b.n	80115ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801159c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801159e:	e005      	b.n	80115ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80115a0:	2300      	movs	r3, #0
 80115a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80115a4:	2301      	movs	r3, #1
 80115a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80115aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80115ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	f000 81de 	beq.w	8011970 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b8:	4a94      	ldr	r2, [pc, #592]	; (801180c <UART_SetConfig+0x930>)
 80115ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115be:	461a      	mov	r2, r3
 80115c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80115c6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80115c8:	697b      	ldr	r3, [r7, #20]
 80115ca:	685a      	ldr	r2, [r3, #4]
 80115cc:	4613      	mov	r3, r2
 80115ce:	005b      	lsls	r3, r3, #1
 80115d0:	4413      	add	r3, r2
 80115d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d305      	bcc.n	80115e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80115de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d903      	bls.n	80115ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80115e4:	2301      	movs	r3, #1
 80115e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80115ea:	e1c1      	b.n	8011970 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80115ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115ee:	2200      	movs	r2, #0
 80115f0:	60bb      	str	r3, [r7, #8]
 80115f2:	60fa      	str	r2, [r7, #12]
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115f8:	4a84      	ldr	r2, [pc, #528]	; (801180c <UART_SetConfig+0x930>)
 80115fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80115fe:	b29b      	uxth	r3, r3
 8011600:	2200      	movs	r2, #0
 8011602:	603b      	str	r3, [r7, #0]
 8011604:	607a      	str	r2, [r7, #4]
 8011606:	e9d7 2300 	ldrd	r2, r3, [r7]
 801160a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801160e:	f7ee fe67 	bl	80002e0 <__aeabi_uldivmod>
 8011612:	4602      	mov	r2, r0
 8011614:	460b      	mov	r3, r1
 8011616:	4610      	mov	r0, r2
 8011618:	4619      	mov	r1, r3
 801161a:	f04f 0200 	mov.w	r2, #0
 801161e:	f04f 0300 	mov.w	r3, #0
 8011622:	020b      	lsls	r3, r1, #8
 8011624:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011628:	0202      	lsls	r2, r0, #8
 801162a:	6979      	ldr	r1, [r7, #20]
 801162c:	6849      	ldr	r1, [r1, #4]
 801162e:	0849      	lsrs	r1, r1, #1
 8011630:	2000      	movs	r0, #0
 8011632:	460c      	mov	r4, r1
 8011634:	4605      	mov	r5, r0
 8011636:	eb12 0804 	adds.w	r8, r2, r4
 801163a:	eb43 0905 	adc.w	r9, r3, r5
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	2200      	movs	r2, #0
 8011644:	469a      	mov	sl, r3
 8011646:	4693      	mov	fp, r2
 8011648:	4652      	mov	r2, sl
 801164a:	465b      	mov	r3, fp
 801164c:	4640      	mov	r0, r8
 801164e:	4649      	mov	r1, r9
 8011650:	f7ee fe46 	bl	80002e0 <__aeabi_uldivmod>
 8011654:	4602      	mov	r2, r0
 8011656:	460b      	mov	r3, r1
 8011658:	4613      	mov	r3, r2
 801165a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801165c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801165e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011662:	d308      	bcc.n	8011676 <UART_SetConfig+0x79a>
 8011664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801166a:	d204      	bcs.n	8011676 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011672:	60da      	str	r2, [r3, #12]
 8011674:	e17c      	b.n	8011970 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011676:	2301      	movs	r3, #1
 8011678:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801167c:	e178      	b.n	8011970 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	69db      	ldr	r3, [r3, #28]
 8011682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011686:	f040 80c5 	bne.w	8011814 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801168a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801168e:	2b20      	cmp	r3, #32
 8011690:	dc48      	bgt.n	8011724 <UART_SetConfig+0x848>
 8011692:	2b00      	cmp	r3, #0
 8011694:	db7b      	blt.n	801178e <UART_SetConfig+0x8b2>
 8011696:	2b20      	cmp	r3, #32
 8011698:	d879      	bhi.n	801178e <UART_SetConfig+0x8b2>
 801169a:	a201      	add	r2, pc, #4	; (adr r2, 80116a0 <UART_SetConfig+0x7c4>)
 801169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116a0:	0801172b 	.word	0x0801172b
 80116a4:	08011733 	.word	0x08011733
 80116a8:	0801178f 	.word	0x0801178f
 80116ac:	0801178f 	.word	0x0801178f
 80116b0:	0801173b 	.word	0x0801173b
 80116b4:	0801178f 	.word	0x0801178f
 80116b8:	0801178f 	.word	0x0801178f
 80116bc:	0801178f 	.word	0x0801178f
 80116c0:	0801174b 	.word	0x0801174b
 80116c4:	0801178f 	.word	0x0801178f
 80116c8:	0801178f 	.word	0x0801178f
 80116cc:	0801178f 	.word	0x0801178f
 80116d0:	0801178f 	.word	0x0801178f
 80116d4:	0801178f 	.word	0x0801178f
 80116d8:	0801178f 	.word	0x0801178f
 80116dc:	0801178f 	.word	0x0801178f
 80116e0:	0801175b 	.word	0x0801175b
 80116e4:	0801178f 	.word	0x0801178f
 80116e8:	0801178f 	.word	0x0801178f
 80116ec:	0801178f 	.word	0x0801178f
 80116f0:	0801178f 	.word	0x0801178f
 80116f4:	0801178f 	.word	0x0801178f
 80116f8:	0801178f 	.word	0x0801178f
 80116fc:	0801178f 	.word	0x0801178f
 8011700:	0801178f 	.word	0x0801178f
 8011704:	0801178f 	.word	0x0801178f
 8011708:	0801178f 	.word	0x0801178f
 801170c:	0801178f 	.word	0x0801178f
 8011710:	0801178f 	.word	0x0801178f
 8011714:	0801178f 	.word	0x0801178f
 8011718:	0801178f 	.word	0x0801178f
 801171c:	0801178f 	.word	0x0801178f
 8011720:	08011781 	.word	0x08011781
 8011724:	2b40      	cmp	r3, #64	; 0x40
 8011726:	d02e      	beq.n	8011786 <UART_SetConfig+0x8aa>
 8011728:	e031      	b.n	801178e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801172a:	f7f9 fbed 	bl	800af08 <HAL_RCC_GetPCLK1Freq>
 801172e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011730:	e033      	b.n	801179a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011732:	f7f9 fbff 	bl	800af34 <HAL_RCC_GetPCLK2Freq>
 8011736:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011738:	e02f      	b.n	801179a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801173a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801173e:	4618      	mov	r0, r3
 8011740:	f7fb fbf0 	bl	800cf24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011746:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011748:	e027      	b.n	801179a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801174a:	f107 0318 	add.w	r3, r7, #24
 801174e:	4618      	mov	r0, r3
 8011750:	f7fb fd3c 	bl	800d1cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011758:	e01f      	b.n	801179a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801175a:	4b2d      	ldr	r3, [pc, #180]	; (8011810 <UART_SetConfig+0x934>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	f003 0320 	and.w	r3, r3, #32
 8011762:	2b00      	cmp	r3, #0
 8011764:	d009      	beq.n	801177a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011766:	4b2a      	ldr	r3, [pc, #168]	; (8011810 <UART_SetConfig+0x934>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	08db      	lsrs	r3, r3, #3
 801176c:	f003 0303 	and.w	r3, r3, #3
 8011770:	4a24      	ldr	r2, [pc, #144]	; (8011804 <UART_SetConfig+0x928>)
 8011772:	fa22 f303 	lsr.w	r3, r2, r3
 8011776:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011778:	e00f      	b.n	801179a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801177a:	4b22      	ldr	r3, [pc, #136]	; (8011804 <UART_SetConfig+0x928>)
 801177c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801177e:	e00c      	b.n	801179a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011780:	4b21      	ldr	r3, [pc, #132]	; (8011808 <UART_SetConfig+0x92c>)
 8011782:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011784:	e009      	b.n	801179a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801178a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801178c:	e005      	b.n	801179a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801178e:	2300      	movs	r3, #0
 8011790:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011792:	2301      	movs	r3, #1
 8011794:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801179a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801179c:	2b00      	cmp	r3, #0
 801179e:	f000 80e7 	beq.w	8011970 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117a6:	4a19      	ldr	r2, [pc, #100]	; (801180c <UART_SetConfig+0x930>)
 80117a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80117ac:	461a      	mov	r2, r3
 80117ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80117b4:	005a      	lsls	r2, r3, #1
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	085b      	lsrs	r3, r3, #1
 80117bc:	441a      	add	r2, r3
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80117c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80117c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ca:	2b0f      	cmp	r3, #15
 80117cc:	d916      	bls.n	80117fc <UART_SetConfig+0x920>
 80117ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117d4:	d212      	bcs.n	80117fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80117d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d8:	b29b      	uxth	r3, r3
 80117da:	f023 030f 	bic.w	r3, r3, #15
 80117de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80117e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e2:	085b      	lsrs	r3, r3, #1
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	f003 0307 	and.w	r3, r3, #7
 80117ea:	b29a      	uxth	r2, r3
 80117ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80117ee:	4313      	orrs	r3, r2
 80117f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80117f8:	60da      	str	r2, [r3, #12]
 80117fa:	e0b9      	b.n	8011970 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80117fc:	2301      	movs	r3, #1
 80117fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011802:	e0b5      	b.n	8011970 <UART_SetConfig+0xa94>
 8011804:	03d09000 	.word	0x03d09000
 8011808:	003d0900 	.word	0x003d0900
 801180c:	08017540 	.word	0x08017540
 8011810:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011814:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011818:	2b20      	cmp	r3, #32
 801181a:	dc49      	bgt.n	80118b0 <UART_SetConfig+0x9d4>
 801181c:	2b00      	cmp	r3, #0
 801181e:	db7c      	blt.n	801191a <UART_SetConfig+0xa3e>
 8011820:	2b20      	cmp	r3, #32
 8011822:	d87a      	bhi.n	801191a <UART_SetConfig+0xa3e>
 8011824:	a201      	add	r2, pc, #4	; (adr r2, 801182c <UART_SetConfig+0x950>)
 8011826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801182a:	bf00      	nop
 801182c:	080118b7 	.word	0x080118b7
 8011830:	080118bf 	.word	0x080118bf
 8011834:	0801191b 	.word	0x0801191b
 8011838:	0801191b 	.word	0x0801191b
 801183c:	080118c7 	.word	0x080118c7
 8011840:	0801191b 	.word	0x0801191b
 8011844:	0801191b 	.word	0x0801191b
 8011848:	0801191b 	.word	0x0801191b
 801184c:	080118d7 	.word	0x080118d7
 8011850:	0801191b 	.word	0x0801191b
 8011854:	0801191b 	.word	0x0801191b
 8011858:	0801191b 	.word	0x0801191b
 801185c:	0801191b 	.word	0x0801191b
 8011860:	0801191b 	.word	0x0801191b
 8011864:	0801191b 	.word	0x0801191b
 8011868:	0801191b 	.word	0x0801191b
 801186c:	080118e7 	.word	0x080118e7
 8011870:	0801191b 	.word	0x0801191b
 8011874:	0801191b 	.word	0x0801191b
 8011878:	0801191b 	.word	0x0801191b
 801187c:	0801191b 	.word	0x0801191b
 8011880:	0801191b 	.word	0x0801191b
 8011884:	0801191b 	.word	0x0801191b
 8011888:	0801191b 	.word	0x0801191b
 801188c:	0801191b 	.word	0x0801191b
 8011890:	0801191b 	.word	0x0801191b
 8011894:	0801191b 	.word	0x0801191b
 8011898:	0801191b 	.word	0x0801191b
 801189c:	0801191b 	.word	0x0801191b
 80118a0:	0801191b 	.word	0x0801191b
 80118a4:	0801191b 	.word	0x0801191b
 80118a8:	0801191b 	.word	0x0801191b
 80118ac:	0801190d 	.word	0x0801190d
 80118b0:	2b40      	cmp	r3, #64	; 0x40
 80118b2:	d02e      	beq.n	8011912 <UART_SetConfig+0xa36>
 80118b4:	e031      	b.n	801191a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80118b6:	f7f9 fb27 	bl	800af08 <HAL_RCC_GetPCLK1Freq>
 80118ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80118bc:	e033      	b.n	8011926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80118be:	f7f9 fb39 	bl	800af34 <HAL_RCC_GetPCLK2Freq>
 80118c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80118c4:	e02f      	b.n	8011926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80118c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118ca:	4618      	mov	r0, r3
 80118cc:	f7fb fb2a 	bl	800cf24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80118d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118d4:	e027      	b.n	8011926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80118d6:	f107 0318 	add.w	r3, r7, #24
 80118da:	4618      	mov	r0, r3
 80118dc:	f7fb fc76 	bl	800d1cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80118e0:	69fb      	ldr	r3, [r7, #28]
 80118e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118e4:	e01f      	b.n	8011926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80118e6:	4b2d      	ldr	r3, [pc, #180]	; (801199c <UART_SetConfig+0xac0>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	f003 0320 	and.w	r3, r3, #32
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d009      	beq.n	8011906 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80118f2:	4b2a      	ldr	r3, [pc, #168]	; (801199c <UART_SetConfig+0xac0>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	08db      	lsrs	r3, r3, #3
 80118f8:	f003 0303 	and.w	r3, r3, #3
 80118fc:	4a28      	ldr	r2, [pc, #160]	; (80119a0 <UART_SetConfig+0xac4>)
 80118fe:	fa22 f303 	lsr.w	r3, r2, r3
 8011902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011904:	e00f      	b.n	8011926 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011906:	4b26      	ldr	r3, [pc, #152]	; (80119a0 <UART_SetConfig+0xac4>)
 8011908:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801190a:	e00c      	b.n	8011926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801190c:	4b25      	ldr	r3, [pc, #148]	; (80119a4 <UART_SetConfig+0xac8>)
 801190e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011910:	e009      	b.n	8011926 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011918:	e005      	b.n	8011926 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801191a:	2300      	movs	r3, #0
 801191c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801191e:	2301      	movs	r3, #1
 8011920:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011924:	bf00      	nop
    }

    if (pclk != 0U)
 8011926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011928:	2b00      	cmp	r3, #0
 801192a:	d021      	beq.n	8011970 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011930:	4a1d      	ldr	r2, [pc, #116]	; (80119a8 <UART_SetConfig+0xacc>)
 8011932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011936:	461a      	mov	r2, r3
 8011938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801193a:	fbb3 f2f2 	udiv	r2, r3, r2
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	085b      	lsrs	r3, r3, #1
 8011944:	441a      	add	r2, r3
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	fbb2 f3f3 	udiv	r3, r2, r3
 801194e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011952:	2b0f      	cmp	r3, #15
 8011954:	d909      	bls.n	801196a <UART_SetConfig+0xa8e>
 8011956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801195c:	d205      	bcs.n	801196a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801195e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011960:	b29a      	uxth	r2, r3
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	60da      	str	r2, [r3, #12]
 8011968:	e002      	b.n	8011970 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801196a:	2301      	movs	r3, #1
 801196c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	2201      	movs	r2, #1
 8011974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	2201      	movs	r2, #1
 801197c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	2200      	movs	r2, #0
 8011984:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	2200      	movs	r2, #0
 801198a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801198c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011990:	4618      	mov	r0, r3
 8011992:	3748      	adds	r7, #72	; 0x48
 8011994:	46bd      	mov	sp, r7
 8011996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801199a:	bf00      	nop
 801199c:	58024400 	.word	0x58024400
 80119a0:	03d09000 	.word	0x03d09000
 80119a4:	003d0900 	.word	0x003d0900
 80119a8:	08017540 	.word	0x08017540

080119ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80119ac:	b480      	push	{r7}
 80119ae:	b083      	sub	sp, #12
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119b8:	f003 0308 	and.w	r3, r3, #8
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d00a      	beq.n	80119d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	430a      	orrs	r2, r1
 80119d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119da:	f003 0301 	and.w	r3, r3, #1
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d00a      	beq.n	80119f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	685b      	ldr	r3, [r3, #4]
 80119e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	430a      	orrs	r2, r1
 80119f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119fc:	f003 0302 	and.w	r3, r3, #2
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d00a      	beq.n	8011a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	685b      	ldr	r3, [r3, #4]
 8011a0a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	430a      	orrs	r2, r1
 8011a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a1e:	f003 0304 	and.w	r3, r3, #4
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d00a      	beq.n	8011a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	685b      	ldr	r3, [r3, #4]
 8011a2c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	430a      	orrs	r2, r1
 8011a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a40:	f003 0310 	and.w	r3, r3, #16
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d00a      	beq.n	8011a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	689b      	ldr	r3, [r3, #8]
 8011a4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	430a      	orrs	r2, r1
 8011a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a62:	f003 0320 	and.w	r3, r3, #32
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d00a      	beq.n	8011a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	689b      	ldr	r3, [r3, #8]
 8011a70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	430a      	orrs	r2, r1
 8011a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d01a      	beq.n	8011ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	685b      	ldr	r3, [r3, #4]
 8011a92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	430a      	orrs	r2, r1
 8011aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011aaa:	d10a      	bne.n	8011ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	685b      	ldr	r3, [r3, #4]
 8011ab2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	430a      	orrs	r2, r1
 8011ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d00a      	beq.n	8011ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	430a      	orrs	r2, r1
 8011ae2:	605a      	str	r2, [r3, #4]
  }
}
 8011ae4:	bf00      	nop
 8011ae6:	370c      	adds	r7, #12
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr

08011af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b098      	sub	sp, #96	; 0x60
 8011af4:	af02      	add	r7, sp, #8
 8011af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2200      	movs	r2, #0
 8011afc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011b00:	f7f2 fab0 	bl	8004064 <HAL_GetTick>
 8011b04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	f003 0308 	and.w	r3, r3, #8
 8011b10:	2b08      	cmp	r3, #8
 8011b12:	d12f      	bne.n	8011b74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011b18:	9300      	str	r3, [sp, #0]
 8011b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f000 f88e 	bl	8011c44 <UART_WaitOnFlagUntilTimeout>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d022      	beq.n	8011b74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b36:	e853 3f00 	ldrex	r3, [r3]
 8011b3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b42:	653b      	str	r3, [r7, #80]	; 0x50
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	461a      	mov	r2, r3
 8011b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b4c:	647b      	str	r3, [r7, #68]	; 0x44
 8011b4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b54:	e841 2300 	strex	r3, r2, [r1]
 8011b58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d1e6      	bne.n	8011b2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2220      	movs	r2, #32
 8011b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2200      	movs	r2, #0
 8011b6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b70:	2303      	movs	r3, #3
 8011b72:	e063      	b.n	8011c3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f003 0304 	and.w	r3, r3, #4
 8011b7e:	2b04      	cmp	r3, #4
 8011b80:	d149      	bne.n	8011c16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011b86:	9300      	str	r3, [sp, #0]
 8011b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f000 f857 	bl	8011c44 <UART_WaitOnFlagUntilTimeout>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d03c      	beq.n	8011c16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba4:	e853 3f00 	ldrex	r3, [r3]
 8011ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8011baa:	6a3b      	ldr	r3, [r7, #32]
 8011bac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	461a      	mov	r2, r3
 8011bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bba:	633b      	str	r3, [r7, #48]	; 0x30
 8011bbc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bc2:	e841 2300 	strex	r3, r2, [r1]
 8011bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d1e6      	bne.n	8011b9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	3308      	adds	r3, #8
 8011bd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	e853 3f00 	ldrex	r3, [r3]
 8011bdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	f023 0301 	bic.w	r3, r3, #1
 8011be4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	3308      	adds	r3, #8
 8011bec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011bee:	61fa      	str	r2, [r7, #28]
 8011bf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bf2:	69b9      	ldr	r1, [r7, #24]
 8011bf4:	69fa      	ldr	r2, [r7, #28]
 8011bf6:	e841 2300 	strex	r3, r2, [r1]
 8011bfa:	617b      	str	r3, [r7, #20]
   return(result);
 8011bfc:	697b      	ldr	r3, [r7, #20]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d1e5      	bne.n	8011bce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2220      	movs	r2, #32
 8011c06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011c12:	2303      	movs	r3, #3
 8011c14:	e012      	b.n	8011c3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	2220      	movs	r2, #32
 8011c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2220      	movs	r2, #32
 8011c22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2200      	movs	r2, #0
 8011c30:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2200      	movs	r2, #0
 8011c36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011c3a:	2300      	movs	r3, #0
}
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	3758      	adds	r7, #88	; 0x58
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bd80      	pop	{r7, pc}

08011c44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b084      	sub	sp, #16
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	60f8      	str	r0, [r7, #12]
 8011c4c:	60b9      	str	r1, [r7, #8]
 8011c4e:	603b      	str	r3, [r7, #0]
 8011c50:	4613      	mov	r3, r2
 8011c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c54:	e04f      	b.n	8011cf6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c56:	69bb      	ldr	r3, [r7, #24]
 8011c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c5c:	d04b      	beq.n	8011cf6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c5e:	f7f2 fa01 	bl	8004064 <HAL_GetTick>
 8011c62:	4602      	mov	r2, r0
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	1ad3      	subs	r3, r2, r3
 8011c68:	69ba      	ldr	r2, [r7, #24]
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d302      	bcc.n	8011c74 <UART_WaitOnFlagUntilTimeout+0x30>
 8011c6e:	69bb      	ldr	r3, [r7, #24]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d101      	bne.n	8011c78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011c74:	2303      	movs	r3, #3
 8011c76:	e04e      	b.n	8011d16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	f003 0304 	and.w	r3, r3, #4
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d037      	beq.n	8011cf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	2b80      	cmp	r3, #128	; 0x80
 8011c8a:	d034      	beq.n	8011cf6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	2b40      	cmp	r3, #64	; 0x40
 8011c90:	d031      	beq.n	8011cf6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	69db      	ldr	r3, [r3, #28]
 8011c98:	f003 0308 	and.w	r3, r3, #8
 8011c9c:	2b08      	cmp	r3, #8
 8011c9e:	d110      	bne.n	8011cc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	2208      	movs	r2, #8
 8011ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011ca8:	68f8      	ldr	r0, [r7, #12]
 8011caa:	f000 f99d 	bl	8011fe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	2208      	movs	r2, #8
 8011cb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	e029      	b.n	8011d16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	69db      	ldr	r3, [r3, #28]
 8011cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011cd0:	d111      	bne.n	8011cf6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011cda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	f000 f983 	bl	8011fe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	2220      	movs	r2, #32
 8011ce6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	2200      	movs	r2, #0
 8011cee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011cf2:	2303      	movs	r3, #3
 8011cf4:	e00f      	b.n	8011d16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	69da      	ldr	r2, [r3, #28]
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	4013      	ands	r3, r2
 8011d00:	68ba      	ldr	r2, [r7, #8]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	bf0c      	ite	eq
 8011d06:	2301      	moveq	r3, #1
 8011d08:	2300      	movne	r3, #0
 8011d0a:	b2db      	uxtb	r3, r3
 8011d0c:	461a      	mov	r2, r3
 8011d0e:	79fb      	ldrb	r3, [r7, #7]
 8011d10:	429a      	cmp	r2, r3
 8011d12:	d0a0      	beq.n	8011c56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011d14:	2300      	movs	r3, #0
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3710      	adds	r7, #16
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
	...

08011d20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d20:	b480      	push	{r7}
 8011d22:	b0a3      	sub	sp, #140	; 0x8c
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	60f8      	str	r0, [r7, #12]
 8011d28:	60b9      	str	r1, [r7, #8]
 8011d2a:	4613      	mov	r3, r2
 8011d2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	68ba      	ldr	r2, [r7, #8]
 8011d32:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	88fa      	ldrh	r2, [r7, #6]
 8011d38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	88fa      	ldrh	r2, [r7, #6]
 8011d40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	2200      	movs	r2, #0
 8011d48:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	689b      	ldr	r3, [r3, #8]
 8011d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d52:	d10e      	bne.n	8011d72 <UART_Start_Receive_IT+0x52>
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	691b      	ldr	r3, [r3, #16]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d105      	bne.n	8011d68 <UART_Start_Receive_IT+0x48>
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011d62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d66:	e02d      	b.n	8011dc4 <UART_Start_Receive_IT+0xa4>
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	22ff      	movs	r2, #255	; 0xff
 8011d6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d70:	e028      	b.n	8011dc4 <UART_Start_Receive_IT+0xa4>
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	689b      	ldr	r3, [r3, #8]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d10d      	bne.n	8011d96 <UART_Start_Receive_IT+0x76>
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	691b      	ldr	r3, [r3, #16]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d104      	bne.n	8011d8c <UART_Start_Receive_IT+0x6c>
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	22ff      	movs	r2, #255	; 0xff
 8011d86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d8a:	e01b      	b.n	8011dc4 <UART_Start_Receive_IT+0xa4>
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	227f      	movs	r2, #127	; 0x7f
 8011d90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011d94:	e016      	b.n	8011dc4 <UART_Start_Receive_IT+0xa4>
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	689b      	ldr	r3, [r3, #8]
 8011d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011d9e:	d10d      	bne.n	8011dbc <UART_Start_Receive_IT+0x9c>
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	691b      	ldr	r3, [r3, #16]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d104      	bne.n	8011db2 <UART_Start_Receive_IT+0x92>
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	227f      	movs	r2, #127	; 0x7f
 8011dac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011db0:	e008      	b.n	8011dc4 <UART_Start_Receive_IT+0xa4>
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	223f      	movs	r2, #63	; 0x3f
 8011db6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011dba:	e003      	b.n	8011dc4 <UART_Start_Receive_IT+0xa4>
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2222      	movs	r2, #34	; 0x22
 8011dd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	3308      	adds	r3, #8
 8011dda:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011dde:	e853 3f00 	ldrex	r3, [r3]
 8011de2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011de4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011de6:	f043 0301 	orr.w	r3, r3, #1
 8011dea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	3308      	adds	r3, #8
 8011df4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011df8:	673a      	str	r2, [r7, #112]	; 0x70
 8011dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dfc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011dfe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011e00:	e841 2300 	strex	r3, r2, [r1]
 8011e04:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8011e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d1e3      	bne.n	8011dd4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011e14:	d14f      	bne.n	8011eb6 <UART_Start_Receive_IT+0x196>
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e1c:	88fa      	ldrh	r2, [r7, #6]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d349      	bcc.n	8011eb6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	689b      	ldr	r3, [r3, #8]
 8011e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e2a:	d107      	bne.n	8011e3c <UART_Start_Receive_IT+0x11c>
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	691b      	ldr	r3, [r3, #16]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d103      	bne.n	8011e3c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	4a47      	ldr	r2, [pc, #284]	; (8011f54 <UART_Start_Receive_IT+0x234>)
 8011e38:	675a      	str	r2, [r3, #116]	; 0x74
 8011e3a:	e002      	b.n	8011e42 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	4a46      	ldr	r2, [pc, #280]	; (8011f58 <UART_Start_Receive_IT+0x238>)
 8011e40:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	691b      	ldr	r3, [r3, #16]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d01a      	beq.n	8011e80 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e52:	e853 3f00 	ldrex	r3, [r3]
 8011e56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	461a      	mov	r2, r3
 8011e68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e6e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011e72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011e74:	e841 2300 	strex	r3, r2, [r1]
 8011e78:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d1e4      	bne.n	8011e4a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	3308      	adds	r3, #8
 8011e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e8a:	e853 3f00 	ldrex	r3, [r3]
 8011e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	3308      	adds	r3, #8
 8011e9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011ea0:	64ba      	str	r2, [r7, #72]	; 0x48
 8011ea2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ea4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ea8:	e841 2300 	strex	r3, r2, [r1]
 8011eac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d1e5      	bne.n	8011e80 <UART_Start_Receive_IT+0x160>
 8011eb4:	e046      	b.n	8011f44 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	689b      	ldr	r3, [r3, #8]
 8011eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ebe:	d107      	bne.n	8011ed0 <UART_Start_Receive_IT+0x1b0>
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	691b      	ldr	r3, [r3, #16]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d103      	bne.n	8011ed0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	4a24      	ldr	r2, [pc, #144]	; (8011f5c <UART_Start_Receive_IT+0x23c>)
 8011ecc:	675a      	str	r2, [r3, #116]	; 0x74
 8011ece:	e002      	b.n	8011ed6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	4a23      	ldr	r2, [pc, #140]	; (8011f60 <UART_Start_Receive_IT+0x240>)
 8011ed4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	691b      	ldr	r3, [r3, #16]
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d019      	beq.n	8011f12 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee6:	e853 3f00 	ldrex	r3, [r3]
 8011eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011ef2:	677b      	str	r3, [r7, #116]	; 0x74
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	461a      	mov	r2, r3
 8011efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011efc:	637b      	str	r3, [r7, #52]	; 0x34
 8011efe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f04:	e841 2300 	strex	r3, r2, [r1]
 8011f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d1e6      	bne.n	8011ede <UART_Start_Receive_IT+0x1be>
 8011f10:	e018      	b.n	8011f44 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	e853 3f00 	ldrex	r3, [r3]
 8011f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	f043 0320 	orr.w	r3, r3, #32
 8011f26:	67bb      	str	r3, [r7, #120]	; 0x78
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	461a      	mov	r2, r3
 8011f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f30:	623b      	str	r3, [r7, #32]
 8011f32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f34:	69f9      	ldr	r1, [r7, #28]
 8011f36:	6a3a      	ldr	r2, [r7, #32]
 8011f38:	e841 2300 	strex	r3, r2, [r1]
 8011f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8011f3e:	69bb      	ldr	r3, [r7, #24]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d1e6      	bne.n	8011f12 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011f44:	2300      	movs	r3, #0
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	378c      	adds	r7, #140	; 0x8c
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	08012939 	.word	0x08012939
 8011f58:	080125d9 	.word	0x080125d9
 8011f5c:	08012421 	.word	0x08012421
 8011f60:	08012269 	.word	0x08012269

08011f64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b08f      	sub	sp, #60	; 0x3c
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f72:	6a3b      	ldr	r3, [r7, #32]
 8011f74:	e853 3f00 	ldrex	r3, [r3]
 8011f78:	61fb      	str	r3, [r7, #28]
   return(result);
 8011f7a:	69fb      	ldr	r3, [r7, #28]
 8011f7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011f80:	637b      	str	r3, [r7, #52]	; 0x34
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	461a      	mov	r2, r3
 8011f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f8c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f92:	e841 2300 	strex	r3, r2, [r1]
 8011f96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d1e6      	bne.n	8011f6c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	3308      	adds	r3, #8
 8011fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	e853 3f00 	ldrex	r3, [r3]
 8011fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	3308      	adds	r3, #8
 8011fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fbe:	61ba      	str	r2, [r7, #24]
 8011fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fc2:	6979      	ldr	r1, [r7, #20]
 8011fc4:	69ba      	ldr	r2, [r7, #24]
 8011fc6:	e841 2300 	strex	r3, r2, [r1]
 8011fca:	613b      	str	r3, [r7, #16]
   return(result);
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d1e5      	bne.n	8011f9e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2220      	movs	r2, #32
 8011fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011fda:	bf00      	nop
 8011fdc:	373c      	adds	r7, #60	; 0x3c
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr
	...

08011fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b095      	sub	sp, #84	; 0x54
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ff8:	e853 3f00 	ldrex	r3, [r3]
 8011ffc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012004:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	461a      	mov	r2, r3
 801200c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801200e:	643b      	str	r3, [r7, #64]	; 0x40
 8012010:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012012:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012014:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012016:	e841 2300 	strex	r3, r2, [r1]
 801201a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201e:	2b00      	cmp	r3, #0
 8012020:	d1e6      	bne.n	8011ff0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	3308      	adds	r3, #8
 8012028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801202a:	6a3b      	ldr	r3, [r7, #32]
 801202c:	e853 3f00 	ldrex	r3, [r3]
 8012030:	61fb      	str	r3, [r7, #28]
   return(result);
 8012032:	69fa      	ldr	r2, [r7, #28]
 8012034:	4b1e      	ldr	r3, [pc, #120]	; (80120b0 <UART_EndRxTransfer+0xc8>)
 8012036:	4013      	ands	r3, r2
 8012038:	64bb      	str	r3, [r7, #72]	; 0x48
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	3308      	adds	r3, #8
 8012040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012044:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801204a:	e841 2300 	strex	r3, r2, [r1]
 801204e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012052:	2b00      	cmp	r3, #0
 8012054:	d1e5      	bne.n	8012022 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801205a:	2b01      	cmp	r3, #1
 801205c:	d118      	bne.n	8012090 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	e853 3f00 	ldrex	r3, [r3]
 801206a:	60bb      	str	r3, [r7, #8]
   return(result);
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	f023 0310 	bic.w	r3, r3, #16
 8012072:	647b      	str	r3, [r7, #68]	; 0x44
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	461a      	mov	r2, r3
 801207a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801207c:	61bb      	str	r3, [r7, #24]
 801207e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012080:	6979      	ldr	r1, [r7, #20]
 8012082:	69ba      	ldr	r2, [r7, #24]
 8012084:	e841 2300 	strex	r3, r2, [r1]
 8012088:	613b      	str	r3, [r7, #16]
   return(result);
 801208a:	693b      	ldr	r3, [r7, #16]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d1e6      	bne.n	801205e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2220      	movs	r2, #32
 8012094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2200      	movs	r2, #0
 801209c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2200      	movs	r2, #0
 80120a2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80120a4:	bf00      	nop
 80120a6:	3754      	adds	r7, #84	; 0x54
 80120a8:	46bd      	mov	sp, r7
 80120aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ae:	4770      	bx	lr
 80120b0:	effffffe 	.word	0xeffffffe

080120b4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b090      	sub	sp, #64	; 0x40
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	69db      	ldr	r3, [r3, #28]
 80120c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120ca:	d037      	beq.n	801213c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80120cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ce:	2200      	movs	r2, #0
 80120d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80120d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	3308      	adds	r3, #8
 80120da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120de:	e853 3f00 	ldrex	r3, [r3]
 80120e2:	623b      	str	r3, [r7, #32]
   return(result);
 80120e4:	6a3b      	ldr	r3, [r7, #32]
 80120e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80120ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80120ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	3308      	adds	r3, #8
 80120f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120f4:	633a      	str	r2, [r7, #48]	; 0x30
 80120f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120fc:	e841 2300 	strex	r3, r2, [r1]
 8012100:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012104:	2b00      	cmp	r3, #0
 8012106:	d1e5      	bne.n	80120d4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801210e:	693b      	ldr	r3, [r7, #16]
 8012110:	e853 3f00 	ldrex	r3, [r3]
 8012114:	60fb      	str	r3, [r7, #12]
   return(result);
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801211c:	637b      	str	r3, [r7, #52]	; 0x34
 801211e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	461a      	mov	r2, r3
 8012124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012126:	61fb      	str	r3, [r7, #28]
 8012128:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801212a:	69b9      	ldr	r1, [r7, #24]
 801212c:	69fa      	ldr	r2, [r7, #28]
 801212e:	e841 2300 	strex	r3, r2, [r1]
 8012132:	617b      	str	r3, [r7, #20]
   return(result);
 8012134:	697b      	ldr	r3, [r7, #20]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d1e6      	bne.n	8012108 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801213a:	e002      	b.n	8012142 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 801213c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801213e:	f7ef fdd7 	bl	8001cf0 <HAL_UART_TxCpltCallback>
}
 8012142:	bf00      	nop
 8012144:	3740      	adds	r7, #64	; 0x40
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}

0801214a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801214a:	b580      	push	{r7, lr}
 801214c:	b084      	sub	sp, #16
 801214e:	af00      	add	r7, sp, #0
 8012150:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012156:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012158:	68f8      	ldr	r0, [r7, #12]
 801215a:	f7fe fe9f 	bl	8010e9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801215e:	bf00      	nop
 8012160:	3710      	adds	r7, #16
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}

08012166 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012166:	b580      	push	{r7, lr}
 8012168:	b086      	sub	sp, #24
 801216a:	af00      	add	r7, sp, #0
 801216c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012172:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012174:	697b      	ldr	r3, [r7, #20]
 8012176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801217a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012182:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	689b      	ldr	r3, [r3, #8]
 801218a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801218e:	2b80      	cmp	r3, #128	; 0x80
 8012190:	d109      	bne.n	80121a6 <UART_DMAError+0x40>
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	2b21      	cmp	r3, #33	; 0x21
 8012196:	d106      	bne.n	80121a6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012198:	697b      	ldr	r3, [r7, #20]
 801219a:	2200      	movs	r2, #0
 801219c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80121a0:	6978      	ldr	r0, [r7, #20]
 80121a2:	f7ff fedf 	bl	8011f64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121b0:	2b40      	cmp	r3, #64	; 0x40
 80121b2:	d109      	bne.n	80121c8 <UART_DMAError+0x62>
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	2b22      	cmp	r3, #34	; 0x22
 80121b8:	d106      	bne.n	80121c8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	2200      	movs	r2, #0
 80121be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80121c2:	6978      	ldr	r0, [r7, #20]
 80121c4:	f7ff ff10 	bl	8011fe8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80121ce:	f043 0210 	orr.w	r2, r3, #16
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80121d8:	6978      	ldr	r0, [r7, #20]
 80121da:	f7fe fe69 	bl	8010eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80121de:	bf00      	nop
 80121e0:	3718      	adds	r7, #24
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}

080121e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80121e6:	b580      	push	{r7, lr}
 80121e8:	b084      	sub	sp, #16
 80121ea:	af00      	add	r7, sp, #0
 80121ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	2200      	movs	r2, #0
 80121f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	2200      	movs	r2, #0
 8012200:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012204:	68f8      	ldr	r0, [r7, #12]
 8012206:	f7fe fe53 	bl	8010eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801220a:	bf00      	nop
 801220c:	3710      	adds	r7, #16
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}

08012212 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012212:	b580      	push	{r7, lr}
 8012214:	b088      	sub	sp, #32
 8012216:	af00      	add	r7, sp, #0
 8012218:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	e853 3f00 	ldrex	r3, [r3]
 8012226:	60bb      	str	r3, [r7, #8]
   return(result);
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801222e:	61fb      	str	r3, [r7, #28]
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	461a      	mov	r2, r3
 8012236:	69fb      	ldr	r3, [r7, #28]
 8012238:	61bb      	str	r3, [r7, #24]
 801223a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801223c:	6979      	ldr	r1, [r7, #20]
 801223e:	69ba      	ldr	r2, [r7, #24]
 8012240:	e841 2300 	strex	r3, r2, [r1]
 8012244:	613b      	str	r3, [r7, #16]
   return(result);
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d1e6      	bne.n	801221a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2220      	movs	r2, #32
 8012250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2200      	movs	r2, #0
 8012258:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f7ef fd48 	bl	8001cf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012260:	bf00      	nop
 8012262:	3720      	adds	r7, #32
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b09c      	sub	sp, #112	; 0x70
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012276:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012280:	2b22      	cmp	r3, #34	; 0x22
 8012282:	f040 80be 	bne.w	8012402 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801228c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012290:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8012294:	b2d9      	uxtb	r1, r3
 8012296:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801229a:	b2da      	uxtb	r2, r3
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122a0:	400a      	ands	r2, r1
 80122a2:	b2d2      	uxtb	r2, r2
 80122a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80122aa:	1c5a      	adds	r2, r3, #1
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122b6:	b29b      	uxth	r3, r3
 80122b8:	3b01      	subs	r3, #1
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	f040 80a1 	bne.w	8012412 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122d8:	e853 3f00 	ldrex	r3, [r3]
 80122dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80122de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80122e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	461a      	mov	r2, r3
 80122ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80122ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80122f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80122f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80122f6:	e841 2300 	strex	r3, r2, [r1]
 80122fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80122fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d1e6      	bne.n	80122d0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	3308      	adds	r3, #8
 8012308:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801230c:	e853 3f00 	ldrex	r3, [r3]
 8012310:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012314:	f023 0301 	bic.w	r3, r3, #1
 8012318:	667b      	str	r3, [r7, #100]	; 0x64
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	3308      	adds	r3, #8
 8012320:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012322:	647a      	str	r2, [r7, #68]	; 0x44
 8012324:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012326:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801232a:	e841 2300 	strex	r3, r2, [r1]
 801232e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012332:	2b00      	cmp	r3, #0
 8012334:	d1e5      	bne.n	8012302 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2220      	movs	r2, #32
 801233a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2200      	movs	r2, #0
 8012342:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2200      	movs	r2, #0
 8012348:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	4a33      	ldr	r2, [pc, #204]	; (801241c <UART_RxISR_8BIT+0x1b4>)
 8012350:	4293      	cmp	r3, r2
 8012352:	d01f      	beq.n	8012394 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	685b      	ldr	r3, [r3, #4]
 801235a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801235e:	2b00      	cmp	r3, #0
 8012360:	d018      	beq.n	8012394 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236a:	e853 3f00 	ldrex	r3, [r3]
 801236e:	623b      	str	r3, [r7, #32]
   return(result);
 8012370:	6a3b      	ldr	r3, [r7, #32]
 8012372:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012376:	663b      	str	r3, [r7, #96]	; 0x60
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	461a      	mov	r2, r3
 801237e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012380:	633b      	str	r3, [r7, #48]	; 0x30
 8012382:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012384:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012388:	e841 2300 	strex	r3, r2, [r1]
 801238c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012390:	2b00      	cmp	r3, #0
 8012392:	d1e6      	bne.n	8012362 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012398:	2b01      	cmp	r3, #1
 801239a:	d12e      	bne.n	80123fa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2200      	movs	r2, #0
 80123a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	e853 3f00 	ldrex	r3, [r3]
 80123ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	f023 0310 	bic.w	r3, r3, #16
 80123b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	461a      	mov	r2, r3
 80123be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123c0:	61fb      	str	r3, [r7, #28]
 80123c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123c4:	69b9      	ldr	r1, [r7, #24]
 80123c6:	69fa      	ldr	r2, [r7, #28]
 80123c8:	e841 2300 	strex	r3, r2, [r1]
 80123cc:	617b      	str	r3, [r7, #20]
   return(result);
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d1e6      	bne.n	80123a2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	69db      	ldr	r3, [r3, #28]
 80123da:	f003 0310 	and.w	r3, r3, #16
 80123de:	2b10      	cmp	r3, #16
 80123e0:	d103      	bne.n	80123ea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	2210      	movs	r2, #16
 80123e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80123f0:	4619      	mov	r1, r3
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f7fe fd66 	bl	8010ec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80123f8:	e00b      	b.n	8012412 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7ef f834 	bl	8001468 <HAL_UART_RxCpltCallback>
}
 8012400:	e007      	b.n	8012412 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	699a      	ldr	r2, [r3, #24]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	f042 0208 	orr.w	r2, r2, #8
 8012410:	619a      	str	r2, [r3, #24]
}
 8012412:	bf00      	nop
 8012414:	3770      	adds	r7, #112	; 0x70
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
 801241a:	bf00      	nop
 801241c:	58000c00 	.word	0x58000c00

08012420 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b09c      	sub	sp, #112	; 0x70
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801242e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012438:	2b22      	cmp	r3, #34	; 0x22
 801243a:	f040 80be 	bne.w	80125ba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012444:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801244c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801244e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012452:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012456:	4013      	ands	r3, r2
 8012458:	b29a      	uxth	r2, r3
 801245a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801245c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012462:	1c9a      	adds	r2, r3, #2
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801246e:	b29b      	uxth	r3, r3
 8012470:	3b01      	subs	r3, #1
 8012472:	b29a      	uxth	r2, r3
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012480:	b29b      	uxth	r3, r3
 8012482:	2b00      	cmp	r3, #0
 8012484:	f040 80a1 	bne.w	80125ca <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801248e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012490:	e853 3f00 	ldrex	r3, [r3]
 8012494:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801249c:	667b      	str	r3, [r7, #100]	; 0x64
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	461a      	mov	r2, r3
 80124a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80124a6:	657b      	str	r3, [r7, #84]	; 0x54
 80124a8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80124ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80124ae:	e841 2300 	strex	r3, r2, [r1]
 80124b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80124b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d1e6      	bne.n	8012488 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	3308      	adds	r3, #8
 80124c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124c4:	e853 3f00 	ldrex	r3, [r3]
 80124c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80124ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124cc:	f023 0301 	bic.w	r3, r3, #1
 80124d0:	663b      	str	r3, [r7, #96]	; 0x60
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	3308      	adds	r3, #8
 80124d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80124da:	643a      	str	r2, [r7, #64]	; 0x40
 80124dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80124e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80124e2:	e841 2300 	strex	r3, r2, [r1]
 80124e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80124e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d1e5      	bne.n	80124ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	2220      	movs	r2, #32
 80124f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	2200      	movs	r2, #0
 80124fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2200      	movs	r2, #0
 8012500:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	4a33      	ldr	r2, [pc, #204]	; (80125d4 <UART_RxISR_16BIT+0x1b4>)
 8012508:	4293      	cmp	r3, r2
 801250a:	d01f      	beq.n	801254c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	685b      	ldr	r3, [r3, #4]
 8012512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012516:	2b00      	cmp	r3, #0
 8012518:	d018      	beq.n	801254c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012520:	6a3b      	ldr	r3, [r7, #32]
 8012522:	e853 3f00 	ldrex	r3, [r3]
 8012526:	61fb      	str	r3, [r7, #28]
   return(result);
 8012528:	69fb      	ldr	r3, [r7, #28]
 801252a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801252e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	461a      	mov	r2, r3
 8012536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012538:	62fb      	str	r3, [r7, #44]	; 0x2c
 801253a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801253c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801253e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012540:	e841 2300 	strex	r3, r2, [r1]
 8012544:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012548:	2b00      	cmp	r3, #0
 801254a:	d1e6      	bne.n	801251a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012550:	2b01      	cmp	r3, #1
 8012552:	d12e      	bne.n	80125b2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	2200      	movs	r2, #0
 8012558:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	e853 3f00 	ldrex	r3, [r3]
 8012566:	60bb      	str	r3, [r7, #8]
   return(result);
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	f023 0310 	bic.w	r3, r3, #16
 801256e:	65bb      	str	r3, [r7, #88]	; 0x58
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	461a      	mov	r2, r3
 8012576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012578:	61bb      	str	r3, [r7, #24]
 801257a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801257c:	6979      	ldr	r1, [r7, #20]
 801257e:	69ba      	ldr	r2, [r7, #24]
 8012580:	e841 2300 	strex	r3, r2, [r1]
 8012584:	613b      	str	r3, [r7, #16]
   return(result);
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d1e6      	bne.n	801255a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	69db      	ldr	r3, [r3, #28]
 8012592:	f003 0310 	and.w	r3, r3, #16
 8012596:	2b10      	cmp	r3, #16
 8012598:	d103      	bne.n	80125a2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	2210      	movs	r2, #16
 80125a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80125a8:	4619      	mov	r1, r3
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f7fe fc8a 	bl	8010ec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80125b0:	e00b      	b.n	80125ca <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f7ee ff58 	bl	8001468 <HAL_UART_RxCpltCallback>
}
 80125b8:	e007      	b.n	80125ca <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	699a      	ldr	r2, [r3, #24]
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	f042 0208 	orr.w	r2, r2, #8
 80125c8:	619a      	str	r2, [r3, #24]
}
 80125ca:	bf00      	nop
 80125cc:	3770      	adds	r7, #112	; 0x70
 80125ce:	46bd      	mov	sp, r7
 80125d0:	bd80      	pop	{r7, pc}
 80125d2:	bf00      	nop
 80125d4:	58000c00 	.word	0x58000c00

080125d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b0ac      	sub	sp, #176	; 0xb0
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80125e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	69db      	ldr	r3, [r3, #28]
 80125f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	689b      	ldr	r3, [r3, #8]
 8012604:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801260e:	2b22      	cmp	r3, #34	; 0x22
 8012610:	f040 8180 	bne.w	8012914 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801261a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801261e:	e123      	b.n	8012868 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012626:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801262a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801262e:	b2d9      	uxtb	r1, r3
 8012630:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012634:	b2da      	uxtb	r2, r3
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801263a:	400a      	ands	r2, r1
 801263c:	b2d2      	uxtb	r2, r2
 801263e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012644:	1c5a      	adds	r2, r3, #1
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012650:	b29b      	uxth	r3, r3
 8012652:	3b01      	subs	r3, #1
 8012654:	b29a      	uxth	r2, r3
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	69db      	ldr	r3, [r3, #28]
 8012662:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801266a:	f003 0307 	and.w	r3, r3, #7
 801266e:	2b00      	cmp	r3, #0
 8012670:	d053      	beq.n	801271a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012676:	f003 0301 	and.w	r3, r3, #1
 801267a:	2b00      	cmp	r3, #0
 801267c:	d011      	beq.n	80126a2 <UART_RxISR_8BIT_FIFOEN+0xca>
 801267e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012686:	2b00      	cmp	r3, #0
 8012688:	d00b      	beq.n	80126a2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	2201      	movs	r2, #1
 8012690:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012698:	f043 0201 	orr.w	r2, r3, #1
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80126a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126a6:	f003 0302 	and.w	r3, r3, #2
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d011      	beq.n	80126d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80126ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80126b2:	f003 0301 	and.w	r3, r3, #1
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d00b      	beq.n	80126d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	2202      	movs	r2, #2
 80126c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126c8:	f043 0204 	orr.w	r2, r3, #4
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80126d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80126d6:	f003 0304 	and.w	r3, r3, #4
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d011      	beq.n	8012702 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80126de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80126e2:	f003 0301 	and.w	r3, r3, #1
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d00b      	beq.n	8012702 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	2204      	movs	r2, #4
 80126f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126f8:	f043 0202 	orr.w	r2, r3, #2
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012708:	2b00      	cmp	r3, #0
 801270a:	d006      	beq.n	801271a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f7fe fbcf 	bl	8010eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2200      	movs	r2, #0
 8012716:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012720:	b29b      	uxth	r3, r3
 8012722:	2b00      	cmp	r3, #0
 8012724:	f040 80a0 	bne.w	8012868 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801272e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012730:	e853 3f00 	ldrex	r3, [r3]
 8012734:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8012736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801273c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	461a      	mov	r2, r3
 8012746:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801274a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801274c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801274e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012750:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012752:	e841 2300 	strex	r3, r2, [r1]
 8012756:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801275a:	2b00      	cmp	r3, #0
 801275c:	d1e4      	bne.n	8012728 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	3308      	adds	r3, #8
 8012764:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012768:	e853 3f00 	ldrex	r3, [r3]
 801276c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801276e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012770:	4b6e      	ldr	r3, [pc, #440]	; (801292c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012772:	4013      	ands	r3, r2
 8012774:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	3308      	adds	r3, #8
 801277e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012782:	66ba      	str	r2, [r7, #104]	; 0x68
 8012784:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012786:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012788:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801278a:	e841 2300 	strex	r3, r2, [r1]
 801278e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012792:	2b00      	cmp	r3, #0
 8012794:	d1e3      	bne.n	801275e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2220      	movs	r2, #32
 801279a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2200      	movs	r2, #0
 80127a2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2200      	movs	r2, #0
 80127a8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	4a60      	ldr	r2, [pc, #384]	; (8012930 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80127b0:	4293      	cmp	r3, r2
 80127b2:	d021      	beq.n	80127f8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d01a      	beq.n	80127f8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80127ca:	e853 3f00 	ldrex	r3, [r3]
 80127ce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80127d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80127d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	461a      	mov	r2, r3
 80127e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80127e4:	657b      	str	r3, [r7, #84]	; 0x54
 80127e6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80127ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80127ec:	e841 2300 	strex	r3, r2, [r1]
 80127f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80127f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d1e4      	bne.n	80127c2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127fc:	2b01      	cmp	r3, #1
 80127fe:	d130      	bne.n	8012862 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2200      	movs	r2, #0
 8012804:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801280e:	e853 3f00 	ldrex	r3, [r3]
 8012812:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012816:	f023 0310 	bic.w	r3, r3, #16
 801281a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	461a      	mov	r2, r3
 8012824:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012828:	643b      	str	r3, [r7, #64]	; 0x40
 801282a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801282c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801282e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012830:	e841 2300 	strex	r3, r2, [r1]
 8012834:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012838:	2b00      	cmp	r3, #0
 801283a:	d1e4      	bne.n	8012806 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	69db      	ldr	r3, [r3, #28]
 8012842:	f003 0310 	and.w	r3, r3, #16
 8012846:	2b10      	cmp	r3, #16
 8012848:	d103      	bne.n	8012852 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	2210      	movs	r2, #16
 8012850:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012858:	4619      	mov	r1, r3
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f7fe fb32 	bl	8010ec4 <HAL_UARTEx_RxEventCallback>
 8012860:	e002      	b.n	8012868 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7ee fe00 	bl	8001468 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012868:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 801286c:	2b00      	cmp	r3, #0
 801286e:	d006      	beq.n	801287e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012874:	f003 0320 	and.w	r3, r3, #32
 8012878:	2b00      	cmp	r3, #0
 801287a:	f47f aed1 	bne.w	8012620 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012884:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012888:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801288c:	2b00      	cmp	r3, #0
 801288e:	d049      	beq.n	8012924 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012896:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801289a:	429a      	cmp	r2, r3
 801289c:	d242      	bcs.n	8012924 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	3308      	adds	r3, #8
 80128a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128a6:	6a3b      	ldr	r3, [r7, #32]
 80128a8:	e853 3f00 	ldrex	r3, [r3]
 80128ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80128ae:	69fb      	ldr	r3, [r7, #28]
 80128b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80128b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	3308      	adds	r3, #8
 80128be:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80128c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80128c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80128c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80128ca:	e841 2300 	strex	r3, r2, [r1]
 80128ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80128d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d1e3      	bne.n	801289e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	4a16      	ldr	r2, [pc, #88]	; (8012934 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80128da:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	e853 3f00 	ldrex	r3, [r3]
 80128e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	f043 0320 	orr.w	r3, r3, #32
 80128f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	461a      	mov	r2, r3
 80128fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80128fe:	61bb      	str	r3, [r7, #24]
 8012900:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012902:	6979      	ldr	r1, [r7, #20]
 8012904:	69ba      	ldr	r2, [r7, #24]
 8012906:	e841 2300 	strex	r3, r2, [r1]
 801290a:	613b      	str	r3, [r7, #16]
   return(result);
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d1e4      	bne.n	80128dc <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012912:	e007      	b.n	8012924 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	699a      	ldr	r2, [r3, #24]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	f042 0208 	orr.w	r2, r2, #8
 8012922:	619a      	str	r2, [r3, #24]
}
 8012924:	bf00      	nop
 8012926:	37b0      	adds	r7, #176	; 0xb0
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}
 801292c:	effffffe 	.word	0xeffffffe
 8012930:	58000c00 	.word	0x58000c00
 8012934:	08012269 	.word	0x08012269

08012938 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b0ae      	sub	sp, #184	; 0xb8
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012946:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	69db      	ldr	r3, [r3, #28]
 8012950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	689b      	ldr	r3, [r3, #8]
 8012964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801296e:	2b22      	cmp	r3, #34	; 0x22
 8012970:	f040 8184 	bne.w	8012c7c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801297a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801297e:	e127      	b.n	8012bd0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012986:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801298e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012992:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012996:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801299a:	4013      	ands	r3, r2
 801299c:	b29a      	uxth	r2, r3
 801299e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80129a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129a8:	1c9a      	adds	r2, r3, #2
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80129b4:	b29b      	uxth	r3, r3
 80129b6:	3b01      	subs	r3, #1
 80129b8:	b29a      	uxth	r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	69db      	ldr	r3, [r3, #28]
 80129c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80129ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80129ce:	f003 0307 	and.w	r3, r3, #7
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d053      	beq.n	8012a7e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80129d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80129da:	f003 0301 	and.w	r3, r3, #1
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d011      	beq.n	8012a06 <UART_RxISR_16BIT_FIFOEN+0xce>
 80129e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80129e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d00b      	beq.n	8012a06 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	2201      	movs	r2, #1
 80129f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129fc:	f043 0201 	orr.w	r2, r3, #1
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a0a:	f003 0302 	and.w	r3, r3, #2
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d011      	beq.n	8012a36 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012a12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a16:	f003 0301 	and.w	r3, r3, #1
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d00b      	beq.n	8012a36 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	2202      	movs	r2, #2
 8012a24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a2c:	f043 0204 	orr.w	r2, r3, #4
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012a3a:	f003 0304 	and.w	r3, r3, #4
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d011      	beq.n	8012a66 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012a42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012a46:	f003 0301 	and.w	r3, r3, #1
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d00b      	beq.n	8012a66 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	2204      	movs	r2, #4
 8012a54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a5c:	f043 0202 	orr.w	r2, r3, #2
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d006      	beq.n	8012a7e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f7fe fa1d 	bl	8010eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	f040 80a2 	bne.w	8012bd0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a94:	e853 3f00 	ldrex	r3, [r3]
 8012a98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	461a      	mov	r2, r3
 8012aaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012aae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012ab2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ab4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012ab6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012aba:	e841 2300 	strex	r3, r2, [r1]
 8012abe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d1e2      	bne.n	8012a8c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	3308      	adds	r3, #8
 8012acc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ad0:	e853 3f00 	ldrex	r3, [r3]
 8012ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012ad6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012ad8:	4b6e      	ldr	r3, [pc, #440]	; (8012c94 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012ada:	4013      	ands	r3, r2
 8012adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	3308      	adds	r3, #8
 8012ae6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012aea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012aec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012aee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012af0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012af2:	e841 2300 	strex	r3, r2, [r1]
 8012af6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d1e3      	bne.n	8012ac6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	2220      	movs	r2, #32
 8012b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2200      	movs	r2, #0
 8012b0a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2200      	movs	r2, #0
 8012b10:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	4a60      	ldr	r2, [pc, #384]	; (8012c98 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012b18:	4293      	cmp	r3, r2
 8012b1a:	d021      	beq.n	8012b60 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	685b      	ldr	r3, [r3, #4]
 8012b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d01a      	beq.n	8012b60 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b32:	e853 3f00 	ldrex	r3, [r3]
 8012b36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012b3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	461a      	mov	r2, r3
 8012b48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012b4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8012b4e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012b52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b54:	e841 2300 	strex	r3, r2, [r1]
 8012b58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d1e4      	bne.n	8012b2a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b64:	2b01      	cmp	r3, #1
 8012b66:	d130      	bne.n	8012bca <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b76:	e853 3f00 	ldrex	r3, [r3]
 8012b7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b7e:	f023 0310 	bic.w	r3, r3, #16
 8012b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012b90:	647b      	str	r3, [r7, #68]	; 0x44
 8012b92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012b98:	e841 2300 	strex	r3, r2, [r1]
 8012b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d1e4      	bne.n	8012b6e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	69db      	ldr	r3, [r3, #28]
 8012baa:	f003 0310 	and.w	r3, r3, #16
 8012bae:	2b10      	cmp	r3, #16
 8012bb0:	d103      	bne.n	8012bba <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	2210      	movs	r2, #16
 8012bb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	6878      	ldr	r0, [r7, #4]
 8012bc4:	f7fe f97e 	bl	8010ec4 <HAL_UARTEx_RxEventCallback>
 8012bc8:	e002      	b.n	8012bd0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f7ee fc4c 	bl	8001468 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012bd0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d006      	beq.n	8012be6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012bd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012bdc:	f003 0320 	and.w	r3, r3, #32
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	f47f aecd 	bne.w	8012980 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012bec:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012bf0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d049      	beq.n	8012c8c <UART_RxISR_16BIT_FIFOEN+0x354>
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012bfe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d242      	bcs.n	8012c8c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	3308      	adds	r3, #8
 8012c0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c10:	e853 3f00 	ldrex	r3, [r3]
 8012c14:	623b      	str	r3, [r7, #32]
   return(result);
 8012c16:	6a3b      	ldr	r3, [r7, #32]
 8012c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012c1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	3308      	adds	r3, #8
 8012c26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012c2a:	633a      	str	r2, [r7, #48]	; 0x30
 8012c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c32:	e841 2300 	strex	r3, r2, [r1]
 8012c36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d1e3      	bne.n	8012c06 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	4a16      	ldr	r2, [pc, #88]	; (8012c9c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012c42:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c4a:	693b      	ldr	r3, [r7, #16]
 8012c4c:	e853 3f00 	ldrex	r3, [r3]
 8012c50:	60fb      	str	r3, [r7, #12]
   return(result);
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	f043 0320 	orr.w	r3, r3, #32
 8012c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	461a      	mov	r2, r3
 8012c62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012c66:	61fb      	str	r3, [r7, #28]
 8012c68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c6a:	69b9      	ldr	r1, [r7, #24]
 8012c6c:	69fa      	ldr	r2, [r7, #28]
 8012c6e:	e841 2300 	strex	r3, r2, [r1]
 8012c72:	617b      	str	r3, [r7, #20]
   return(result);
 8012c74:	697b      	ldr	r3, [r7, #20]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d1e4      	bne.n	8012c44 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012c7a:	e007      	b.n	8012c8c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	699a      	ldr	r2, [r3, #24]
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	f042 0208 	orr.w	r2, r2, #8
 8012c8a:	619a      	str	r2, [r3, #24]
}
 8012c8c:	bf00      	nop
 8012c8e:	37b8      	adds	r7, #184	; 0xb8
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bd80      	pop	{r7, pc}
 8012c94:	effffffe 	.word	0xeffffffe
 8012c98:	58000c00 	.word	0x58000c00
 8012c9c:	08012421 	.word	0x08012421

08012ca0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012ca0:	b480      	push	{r7}
 8012ca2:	b083      	sub	sp, #12
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012ca8:	bf00      	nop
 8012caa:	370c      	adds	r7, #12
 8012cac:	46bd      	mov	sp, r7
 8012cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb2:	4770      	bx	lr

08012cb4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012cb4:	b480      	push	{r7}
 8012cb6:	b083      	sub	sp, #12
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012cbc:	bf00      	nop
 8012cbe:	370c      	adds	r7, #12
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc6:	4770      	bx	lr

08012cc8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b083      	sub	sp, #12
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012cd0:	bf00      	nop
 8012cd2:	370c      	adds	r7, #12
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cda:	4770      	bx	lr

08012cdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b085      	sub	sp, #20
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012cea:	2b01      	cmp	r3, #1
 8012cec:	d101      	bne.n	8012cf2 <HAL_UARTEx_DisableFifoMode+0x16>
 8012cee:	2302      	movs	r3, #2
 8012cf0:	e027      	b.n	8012d42 <HAL_UARTEx_DisableFifoMode+0x66>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2201      	movs	r2, #1
 8012cf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	2224      	movs	r2, #36	; 0x24
 8012cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	681a      	ldr	r2, [r3, #0]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	f022 0201 	bic.w	r2, r2, #1
 8012d18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012d20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2200      	movs	r2, #0
 8012d26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	68fa      	ldr	r2, [r7, #12]
 8012d2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2220      	movs	r2, #32
 8012d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012d40:	2300      	movs	r3, #0
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3714      	adds	r7, #20
 8012d46:	46bd      	mov	sp, r7
 8012d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4c:	4770      	bx	lr

08012d4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012d4e:	b580      	push	{r7, lr}
 8012d50:	b084      	sub	sp, #16
 8012d52:	af00      	add	r7, sp, #0
 8012d54:	6078      	str	r0, [r7, #4]
 8012d56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012d5e:	2b01      	cmp	r3, #1
 8012d60:	d101      	bne.n	8012d66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012d62:	2302      	movs	r3, #2
 8012d64:	e02d      	b.n	8012dc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2201      	movs	r2, #1
 8012d6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2224      	movs	r2, #36	; 0x24
 8012d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	681a      	ldr	r2, [r3, #0]
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	f022 0201 	bic.w	r2, r2, #1
 8012d8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	689b      	ldr	r3, [r3, #8]
 8012d94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	683a      	ldr	r2, [r7, #0]
 8012d9e:	430a      	orrs	r2, r1
 8012da0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f000 f850 	bl	8012e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	68fa      	ldr	r2, [r7, #12]
 8012dae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	2220      	movs	r2, #32
 8012db4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2200      	movs	r2, #0
 8012dbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012dc0:	2300      	movs	r3, #0
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	3710      	adds	r7, #16
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bd80      	pop	{r7, pc}

08012dca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012dca:	b580      	push	{r7, lr}
 8012dcc:	b084      	sub	sp, #16
 8012dce:	af00      	add	r7, sp, #0
 8012dd0:	6078      	str	r0, [r7, #4]
 8012dd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012dda:	2b01      	cmp	r3, #1
 8012ddc:	d101      	bne.n	8012de2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012dde:	2302      	movs	r3, #2
 8012de0:	e02d      	b.n	8012e3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2201      	movs	r2, #1
 8012de6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2224      	movs	r2, #36	; 0x24
 8012dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	681a      	ldr	r2, [r3, #0]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	f022 0201 	bic.w	r2, r2, #1
 8012e08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	689b      	ldr	r3, [r3, #8]
 8012e10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	683a      	ldr	r2, [r7, #0]
 8012e1a:	430a      	orrs	r2, r1
 8012e1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012e1e:	6878      	ldr	r0, [r7, #4]
 8012e20:	f000 f812 	bl	8012e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	68fa      	ldr	r2, [r7, #12]
 8012e2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2220      	movs	r2, #32
 8012e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2200      	movs	r2, #0
 8012e38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012e3c:	2300      	movs	r3, #0
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	3710      	adds	r7, #16
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}
	...

08012e48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012e48:	b480      	push	{r7}
 8012e4a:	b085      	sub	sp, #20
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d108      	bne.n	8012e6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2201      	movs	r2, #1
 8012e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2201      	movs	r2, #1
 8012e64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012e68:	e031      	b.n	8012ece <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012e6a:	2310      	movs	r3, #16
 8012e6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012e6e:	2310      	movs	r3, #16
 8012e70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	689b      	ldr	r3, [r3, #8]
 8012e78:	0e5b      	lsrs	r3, r3, #25
 8012e7a:	b2db      	uxtb	r3, r3
 8012e7c:	f003 0307 	and.w	r3, r3, #7
 8012e80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	689b      	ldr	r3, [r3, #8]
 8012e88:	0f5b      	lsrs	r3, r3, #29
 8012e8a:	b2db      	uxtb	r3, r3
 8012e8c:	f003 0307 	and.w	r3, r3, #7
 8012e90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012e92:	7bbb      	ldrb	r3, [r7, #14]
 8012e94:	7b3a      	ldrb	r2, [r7, #12]
 8012e96:	4911      	ldr	r1, [pc, #68]	; (8012edc <UARTEx_SetNbDataToProcess+0x94>)
 8012e98:	5c8a      	ldrb	r2, [r1, r2]
 8012e9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012e9e:	7b3a      	ldrb	r2, [r7, #12]
 8012ea0:	490f      	ldr	r1, [pc, #60]	; (8012ee0 <UARTEx_SetNbDataToProcess+0x98>)
 8012ea2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012ea4:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ea8:	b29a      	uxth	r2, r3
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012eb0:	7bfb      	ldrb	r3, [r7, #15]
 8012eb2:	7b7a      	ldrb	r2, [r7, #13]
 8012eb4:	4909      	ldr	r1, [pc, #36]	; (8012edc <UARTEx_SetNbDataToProcess+0x94>)
 8012eb6:	5c8a      	ldrb	r2, [r1, r2]
 8012eb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012ebc:	7b7a      	ldrb	r2, [r7, #13]
 8012ebe:	4908      	ldr	r1, [pc, #32]	; (8012ee0 <UARTEx_SetNbDataToProcess+0x98>)
 8012ec0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012ec2:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ec6:	b29a      	uxth	r2, r3
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012ece:	bf00      	nop
 8012ed0:	3714      	adds	r7, #20
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr
 8012eda:	bf00      	nop
 8012edc:	08017558 	.word	0x08017558
 8012ee0:	08017560 	.word	0x08017560

08012ee4 <__NVIC_SetPriority>:
{
 8012ee4:	b480      	push	{r7}
 8012ee6:	b083      	sub	sp, #12
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	4603      	mov	r3, r0
 8012eec:	6039      	str	r1, [r7, #0]
 8012eee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012ef0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	db0a      	blt.n	8012f0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012ef8:	683b      	ldr	r3, [r7, #0]
 8012efa:	b2da      	uxtb	r2, r3
 8012efc:	490c      	ldr	r1, [pc, #48]	; (8012f30 <__NVIC_SetPriority+0x4c>)
 8012efe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f02:	0112      	lsls	r2, r2, #4
 8012f04:	b2d2      	uxtb	r2, r2
 8012f06:	440b      	add	r3, r1
 8012f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012f0c:	e00a      	b.n	8012f24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	b2da      	uxtb	r2, r3
 8012f12:	4908      	ldr	r1, [pc, #32]	; (8012f34 <__NVIC_SetPriority+0x50>)
 8012f14:	88fb      	ldrh	r3, [r7, #6]
 8012f16:	f003 030f 	and.w	r3, r3, #15
 8012f1a:	3b04      	subs	r3, #4
 8012f1c:	0112      	lsls	r2, r2, #4
 8012f1e:	b2d2      	uxtb	r2, r2
 8012f20:	440b      	add	r3, r1
 8012f22:	761a      	strb	r2, [r3, #24]
}
 8012f24:	bf00      	nop
 8012f26:	370c      	adds	r7, #12
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2e:	4770      	bx	lr
 8012f30:	e000e100 	.word	0xe000e100
 8012f34:	e000ed00 	.word	0xe000ed00

08012f38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012f3c:	4b05      	ldr	r3, [pc, #20]	; (8012f54 <SysTick_Handler+0x1c>)
 8012f3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012f40:	f002 fae2 	bl	8015508 <xTaskGetSchedulerState>
 8012f44:	4603      	mov	r3, r0
 8012f46:	2b01      	cmp	r3, #1
 8012f48:	d001      	beq.n	8012f4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012f4a:	f003 f905 	bl	8016158 <xPortSysTickHandler>
  }
}
 8012f4e:	bf00      	nop
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	e000e010 	.word	0xe000e010

08012f58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012f5c:	2100      	movs	r1, #0
 8012f5e:	f06f 0004 	mvn.w	r0, #4
 8012f62:	f7ff ffbf 	bl	8012ee4 <__NVIC_SetPriority>
#endif
}
 8012f66:	bf00      	nop
 8012f68:	bd80      	pop	{r7, pc}
	...

08012f6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012f6c:	b480      	push	{r7}
 8012f6e:	b083      	sub	sp, #12
 8012f70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f72:	f3ef 8305 	mrs	r3, IPSR
 8012f76:	603b      	str	r3, [r7, #0]
  return(result);
 8012f78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d003      	beq.n	8012f86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012f7e:	f06f 0305 	mvn.w	r3, #5
 8012f82:	607b      	str	r3, [r7, #4]
 8012f84:	e00c      	b.n	8012fa0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012f86:	4b0a      	ldr	r3, [pc, #40]	; (8012fb0 <osKernelInitialize+0x44>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d105      	bne.n	8012f9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012f8e:	4b08      	ldr	r3, [pc, #32]	; (8012fb0 <osKernelInitialize+0x44>)
 8012f90:	2201      	movs	r2, #1
 8012f92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012f94:	2300      	movs	r3, #0
 8012f96:	607b      	str	r3, [r7, #4]
 8012f98:	e002      	b.n	8012fa0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012fa0:	687b      	ldr	r3, [r7, #4]
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	370c      	adds	r7, #12
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fac:	4770      	bx	lr
 8012fae:	bf00      	nop
 8012fb0:	24000cb0 	.word	0x24000cb0

08012fb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012fba:	f3ef 8305 	mrs	r3, IPSR
 8012fbe:	603b      	str	r3, [r7, #0]
  return(result);
 8012fc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d003      	beq.n	8012fce <osKernelStart+0x1a>
    stat = osErrorISR;
 8012fc6:	f06f 0305 	mvn.w	r3, #5
 8012fca:	607b      	str	r3, [r7, #4]
 8012fcc:	e010      	b.n	8012ff0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012fce:	4b0b      	ldr	r3, [pc, #44]	; (8012ffc <osKernelStart+0x48>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	2b01      	cmp	r3, #1
 8012fd4:	d109      	bne.n	8012fea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012fd6:	f7ff ffbf 	bl	8012f58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012fda:	4b08      	ldr	r3, [pc, #32]	; (8012ffc <osKernelStart+0x48>)
 8012fdc:	2202      	movs	r2, #2
 8012fde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012fe0:	f001 fda4 	bl	8014b2c <vTaskStartScheduler>
      stat = osOK;
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	607b      	str	r3, [r7, #4]
 8012fe8:	e002      	b.n	8012ff0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012fee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012ff0:	687b      	ldr	r3, [r7, #4]
}
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	3708      	adds	r7, #8
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	24000cb0 	.word	0x24000cb0

08013000 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013000:	b580      	push	{r7, lr}
 8013002:	b08e      	sub	sp, #56	; 0x38
 8013004:	af04      	add	r7, sp, #16
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801300c:	2300      	movs	r3, #0
 801300e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013010:	f3ef 8305 	mrs	r3, IPSR
 8013014:	617b      	str	r3, [r7, #20]
  return(result);
 8013016:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013018:	2b00      	cmp	r3, #0
 801301a:	d17e      	bne.n	801311a <osThreadNew+0x11a>
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d07b      	beq.n	801311a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013022:	2380      	movs	r3, #128	; 0x80
 8013024:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013026:	2318      	movs	r3, #24
 8013028:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801302a:	2300      	movs	r3, #0
 801302c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801302e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013032:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d045      	beq.n	80130c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d002      	beq.n	8013048 <osThreadNew+0x48>
        name = attr->name;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	699b      	ldr	r3, [r3, #24]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d002      	beq.n	8013056 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	699b      	ldr	r3, [r3, #24]
 8013054:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013056:	69fb      	ldr	r3, [r7, #28]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d008      	beq.n	801306e <osThreadNew+0x6e>
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	2b38      	cmp	r3, #56	; 0x38
 8013060:	d805      	bhi.n	801306e <osThreadNew+0x6e>
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	685b      	ldr	r3, [r3, #4]
 8013066:	f003 0301 	and.w	r3, r3, #1
 801306a:	2b00      	cmp	r3, #0
 801306c:	d001      	beq.n	8013072 <osThreadNew+0x72>
        return (NULL);
 801306e:	2300      	movs	r3, #0
 8013070:	e054      	b.n	801311c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	695b      	ldr	r3, [r3, #20]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d003      	beq.n	8013082 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	695b      	ldr	r3, [r3, #20]
 801307e:	089b      	lsrs	r3, r3, #2
 8013080:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	689b      	ldr	r3, [r3, #8]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d00e      	beq.n	80130a8 <osThreadNew+0xa8>
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	68db      	ldr	r3, [r3, #12]
 801308e:	2b5b      	cmp	r3, #91	; 0x5b
 8013090:	d90a      	bls.n	80130a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013096:	2b00      	cmp	r3, #0
 8013098:	d006      	beq.n	80130a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	695b      	ldr	r3, [r3, #20]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d002      	beq.n	80130a8 <osThreadNew+0xa8>
        mem = 1;
 80130a2:	2301      	movs	r3, #1
 80130a4:	61bb      	str	r3, [r7, #24]
 80130a6:	e010      	b.n	80130ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	689b      	ldr	r3, [r3, #8]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d10c      	bne.n	80130ca <osThreadNew+0xca>
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	68db      	ldr	r3, [r3, #12]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d108      	bne.n	80130ca <osThreadNew+0xca>
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	691b      	ldr	r3, [r3, #16]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d104      	bne.n	80130ca <osThreadNew+0xca>
          mem = 0;
 80130c0:	2300      	movs	r3, #0
 80130c2:	61bb      	str	r3, [r7, #24]
 80130c4:	e001      	b.n	80130ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80130c6:	2300      	movs	r3, #0
 80130c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	2b01      	cmp	r3, #1
 80130ce:	d110      	bne.n	80130f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80130d4:	687a      	ldr	r2, [r7, #4]
 80130d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80130d8:	9202      	str	r2, [sp, #8]
 80130da:	9301      	str	r3, [sp, #4]
 80130dc:	69fb      	ldr	r3, [r7, #28]
 80130de:	9300      	str	r3, [sp, #0]
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	6a3a      	ldr	r2, [r7, #32]
 80130e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80130e6:	68f8      	ldr	r0, [r7, #12]
 80130e8:	f001 fb4a 	bl	8014780 <xTaskCreateStatic>
 80130ec:	4603      	mov	r3, r0
 80130ee:	613b      	str	r3, [r7, #16]
 80130f0:	e013      	b.n	801311a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80130f2:	69bb      	ldr	r3, [r7, #24]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d110      	bne.n	801311a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80130f8:	6a3b      	ldr	r3, [r7, #32]
 80130fa:	b29a      	uxth	r2, r3
 80130fc:	f107 0310 	add.w	r3, r7, #16
 8013100:	9301      	str	r3, [sp, #4]
 8013102:	69fb      	ldr	r3, [r7, #28]
 8013104:	9300      	str	r3, [sp, #0]
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801310a:	68f8      	ldr	r0, [r7, #12]
 801310c:	f001 fb95 	bl	801483a <xTaskCreate>
 8013110:	4603      	mov	r3, r0
 8013112:	2b01      	cmp	r3, #1
 8013114:	d001      	beq.n	801311a <osThreadNew+0x11a>
            hTask = NULL;
 8013116:	2300      	movs	r3, #0
 8013118:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801311a:	693b      	ldr	r3, [r7, #16]
}
 801311c:	4618      	mov	r0, r3
 801311e:	3728      	adds	r7, #40	; 0x28
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}

08013124 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8013124:	b480      	push	{r7}
 8013126:	b083      	sub	sp, #12
 8013128:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801312a:	f3ef 8305 	mrs	r3, IPSR
 801312e:	603b      	str	r3, [r7, #0]
  return(result);
 8013130:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013132:	2b00      	cmp	r3, #0
 8013134:	d003      	beq.n	801313e <osThreadYield+0x1a>
    stat = osErrorISR;
 8013136:	f06f 0305 	mvn.w	r3, #5
 801313a:	607b      	str	r3, [r7, #4]
 801313c:	e009      	b.n	8013152 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801313e:	2300      	movs	r3, #0
 8013140:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8013142:	4b07      	ldr	r3, [pc, #28]	; (8013160 <osThreadYield+0x3c>)
 8013144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013148:	601a      	str	r2, [r3, #0]
 801314a:	f3bf 8f4f 	dsb	sy
 801314e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8013152:	687b      	ldr	r3, [r7, #4]
}
 8013154:	4618      	mov	r0, r3
 8013156:	370c      	adds	r7, #12
 8013158:	46bd      	mov	sp, r7
 801315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315e:	4770      	bx	lr
 8013160:	e000ed04 	.word	0xe000ed04

08013164 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013164:	b580      	push	{r7, lr}
 8013166:	b084      	sub	sp, #16
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801316c:	f3ef 8305 	mrs	r3, IPSR
 8013170:	60bb      	str	r3, [r7, #8]
  return(result);
 8013172:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013174:	2b00      	cmp	r3, #0
 8013176:	d003      	beq.n	8013180 <osDelay+0x1c>
    stat = osErrorISR;
 8013178:	f06f 0305 	mvn.w	r3, #5
 801317c:	60fb      	str	r3, [r7, #12]
 801317e:	e007      	b.n	8013190 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013180:	2300      	movs	r3, #0
 8013182:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d002      	beq.n	8013190 <osDelay+0x2c>
      vTaskDelay(ticks);
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f001 fc9a 	bl	8014ac4 <vTaskDelay>
    }
  }

  return (stat);
 8013190:	68fb      	ldr	r3, [r7, #12]
}
 8013192:	4618      	mov	r0, r3
 8013194:	3710      	adds	r7, #16
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}

0801319a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801319a:	b580      	push	{r7, lr}
 801319c:	b086      	sub	sp, #24
 801319e:	af00      	add	r7, sp, #0
 80131a0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80131a2:	2300      	movs	r3, #0
 80131a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131a6:	f3ef 8305 	mrs	r3, IPSR
 80131aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80131ac:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d12d      	bne.n	801320e <osEventFlagsNew+0x74>
    mem = -1;
 80131b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131b6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d015      	beq.n	80131ea <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	689b      	ldr	r3, [r3, #8]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d006      	beq.n	80131d4 <osEventFlagsNew+0x3a>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	68db      	ldr	r3, [r3, #12]
 80131ca:	2b1f      	cmp	r3, #31
 80131cc:	d902      	bls.n	80131d4 <osEventFlagsNew+0x3a>
        mem = 1;
 80131ce:	2301      	movs	r3, #1
 80131d0:	613b      	str	r3, [r7, #16]
 80131d2:	e00c      	b.n	80131ee <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	689b      	ldr	r3, [r3, #8]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d108      	bne.n	80131ee <osEventFlagsNew+0x54>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	68db      	ldr	r3, [r3, #12]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d104      	bne.n	80131ee <osEventFlagsNew+0x54>
          mem = 0;
 80131e4:	2300      	movs	r3, #0
 80131e6:	613b      	str	r3, [r7, #16]
 80131e8:	e001      	b.n	80131ee <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80131ea:	2300      	movs	r3, #0
 80131ec:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	2b01      	cmp	r3, #1
 80131f2:	d106      	bne.n	8013202 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	689b      	ldr	r3, [r3, #8]
 80131f8:	4618      	mov	r0, r3
 80131fa:	f000 fa3d 	bl	8013678 <xEventGroupCreateStatic>
 80131fe:	6178      	str	r0, [r7, #20]
 8013200:	e005      	b.n	801320e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d102      	bne.n	801320e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8013208:	f000 fa6d 	bl	80136e6 <xEventGroupCreate>
 801320c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 801320e:	697b      	ldr	r3, [r7, #20]
}
 8013210:	4618      	mov	r0, r3
 8013212:	3718      	adds	r7, #24
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}

08013218 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013218:	b580      	push	{r7, lr}
 801321a:	b086      	sub	sp, #24
 801321c:	af00      	add	r7, sp, #0
 801321e:	6078      	str	r0, [r7, #4]
 8013220:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d004      	beq.n	8013236 <osEventFlagsSet+0x1e>
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013232:	2b00      	cmp	r3, #0
 8013234:	d003      	beq.n	801323e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013236:	f06f 0303 	mvn.w	r3, #3
 801323a:	617b      	str	r3, [r7, #20]
 801323c:	e028      	b.n	8013290 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801323e:	f3ef 8305 	mrs	r3, IPSR
 8013242:	60fb      	str	r3, [r7, #12]
  return(result);
 8013244:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013246:	2b00      	cmp	r3, #0
 8013248:	d01d      	beq.n	8013286 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801324a:	2300      	movs	r3, #0
 801324c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801324e:	f107 0308 	add.w	r3, r7, #8
 8013252:	461a      	mov	r2, r3
 8013254:	6839      	ldr	r1, [r7, #0]
 8013256:	6938      	ldr	r0, [r7, #16]
 8013258:	f000 fbe8 	bl	8013a2c <xEventGroupSetBitsFromISR>
 801325c:	4603      	mov	r3, r0
 801325e:	2b00      	cmp	r3, #0
 8013260:	d103      	bne.n	801326a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8013262:	f06f 0302 	mvn.w	r3, #2
 8013266:	617b      	str	r3, [r7, #20]
 8013268:	e012      	b.n	8013290 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d00d      	beq.n	8013290 <osEventFlagsSet+0x78>
 8013274:	4b09      	ldr	r3, [pc, #36]	; (801329c <osEventFlagsSet+0x84>)
 8013276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801327a:	601a      	str	r2, [r3, #0]
 801327c:	f3bf 8f4f 	dsb	sy
 8013280:	f3bf 8f6f 	isb	sy
 8013284:	e004      	b.n	8013290 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8013286:	6839      	ldr	r1, [r7, #0]
 8013288:	6938      	ldr	r0, [r7, #16]
 801328a:	f000 fb15 	bl	80138b8 <xEventGroupSetBits>
 801328e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8013290:	697b      	ldr	r3, [r7, #20]
}
 8013292:	4618      	mov	r0, r3
 8013294:	3718      	adds	r7, #24
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}
 801329a:	bf00      	nop
 801329c:	e000ed04 	.word	0xe000ed04

080132a0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b08c      	sub	sp, #48	; 0x30
 80132a4:	af02      	add	r7, sp, #8
 80132a6:	60f8      	str	r0, [r7, #12]
 80132a8:	60b9      	str	r1, [r7, #8]
 80132aa:	607a      	str	r2, [r7, #4]
 80132ac:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80132b2:	69bb      	ldr	r3, [r7, #24]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d004      	beq.n	80132c2 <osEventFlagsWait+0x22>
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d003      	beq.n	80132ca <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80132c2:	f06f 0303 	mvn.w	r3, #3
 80132c6:	61fb      	str	r3, [r7, #28]
 80132c8:	e04b      	b.n	8013362 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132ca:	f3ef 8305 	mrs	r3, IPSR
 80132ce:	617b      	str	r3, [r7, #20]
  return(result);
 80132d0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d003      	beq.n	80132de <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80132d6:	f06f 0305 	mvn.w	r3, #5
 80132da:	61fb      	str	r3, [r7, #28]
 80132dc:	e041      	b.n	8013362 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f003 0301 	and.w	r3, r3, #1
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d002      	beq.n	80132ee <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80132e8:	2301      	movs	r3, #1
 80132ea:	627b      	str	r3, [r7, #36]	; 0x24
 80132ec:	e001      	b.n	80132f2 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80132ee:	2300      	movs	r3, #0
 80132f0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f003 0302 	and.w	r3, r3, #2
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d002      	beq.n	8013302 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80132fc:	2300      	movs	r3, #0
 80132fe:	623b      	str	r3, [r7, #32]
 8013300:	e001      	b.n	8013306 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8013302:	2301      	movs	r3, #1
 8013304:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	9300      	str	r3, [sp, #0]
 801330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801330c:	6a3a      	ldr	r2, [r7, #32]
 801330e:	68b9      	ldr	r1, [r7, #8]
 8013310:	69b8      	ldr	r0, [r7, #24]
 8013312:	f000 fa03 	bl	801371c <xEventGroupWaitBits>
 8013316:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	f003 0301 	and.w	r3, r3, #1
 801331e:	2b00      	cmp	r3, #0
 8013320:	d010      	beq.n	8013344 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8013322:	68ba      	ldr	r2, [r7, #8]
 8013324:	69fb      	ldr	r3, [r7, #28]
 8013326:	4013      	ands	r3, r2
 8013328:	68ba      	ldr	r2, [r7, #8]
 801332a:	429a      	cmp	r2, r3
 801332c:	d019      	beq.n	8013362 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d003      	beq.n	801333c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8013334:	f06f 0301 	mvn.w	r3, #1
 8013338:	61fb      	str	r3, [r7, #28]
 801333a:	e012      	b.n	8013362 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801333c:	f06f 0302 	mvn.w	r3, #2
 8013340:	61fb      	str	r3, [r7, #28]
 8013342:	e00e      	b.n	8013362 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8013344:	68ba      	ldr	r2, [r7, #8]
 8013346:	69fb      	ldr	r3, [r7, #28]
 8013348:	4013      	ands	r3, r2
 801334a:	2b00      	cmp	r3, #0
 801334c:	d109      	bne.n	8013362 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d003      	beq.n	801335c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8013354:	f06f 0301 	mvn.w	r3, #1
 8013358:	61fb      	str	r3, [r7, #28]
 801335a:	e002      	b.n	8013362 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801335c:	f06f 0302 	mvn.w	r3, #2
 8013360:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8013362:	69fb      	ldr	r3, [r7, #28]
}
 8013364:	4618      	mov	r0, r3
 8013366:	3728      	adds	r7, #40	; 0x28
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}

0801336c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801336c:	b580      	push	{r7, lr}
 801336e:	b08a      	sub	sp, #40	; 0x28
 8013370:	af02      	add	r7, sp, #8
 8013372:	60f8      	str	r0, [r7, #12]
 8013374:	60b9      	str	r1, [r7, #8]
 8013376:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013378:	2300      	movs	r3, #0
 801337a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801337c:	f3ef 8305 	mrs	r3, IPSR
 8013380:	613b      	str	r3, [r7, #16]
  return(result);
 8013382:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013384:	2b00      	cmp	r3, #0
 8013386:	d15f      	bne.n	8013448 <osMessageQueueNew+0xdc>
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d05c      	beq.n	8013448 <osMessageQueueNew+0xdc>
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d059      	beq.n	8013448 <osMessageQueueNew+0xdc>
    mem = -1;
 8013394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013398:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d029      	beq.n	80133f4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	689b      	ldr	r3, [r3, #8]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d012      	beq.n	80133ce <osMessageQueueNew+0x62>
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	68db      	ldr	r3, [r3, #12]
 80133ac:	2b4f      	cmp	r3, #79	; 0x4f
 80133ae:	d90e      	bls.n	80133ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d00a      	beq.n	80133ce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	695a      	ldr	r2, [r3, #20]
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	68b9      	ldr	r1, [r7, #8]
 80133c0:	fb01 f303 	mul.w	r3, r1, r3
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d302      	bcc.n	80133ce <osMessageQueueNew+0x62>
        mem = 1;
 80133c8:	2301      	movs	r3, #1
 80133ca:	61bb      	str	r3, [r7, #24]
 80133cc:	e014      	b.n	80133f8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	689b      	ldr	r3, [r3, #8]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d110      	bne.n	80133f8 <osMessageQueueNew+0x8c>
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	68db      	ldr	r3, [r3, #12]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d10c      	bne.n	80133f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d108      	bne.n	80133f8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	695b      	ldr	r3, [r3, #20]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d104      	bne.n	80133f8 <osMessageQueueNew+0x8c>
          mem = 0;
 80133ee:	2300      	movs	r3, #0
 80133f0:	61bb      	str	r3, [r7, #24]
 80133f2:	e001      	b.n	80133f8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80133f4:	2300      	movs	r3, #0
 80133f6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80133f8:	69bb      	ldr	r3, [r7, #24]
 80133fa:	2b01      	cmp	r3, #1
 80133fc:	d10b      	bne.n	8013416 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	691a      	ldr	r2, [r3, #16]
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	689b      	ldr	r3, [r3, #8]
 8013406:	2100      	movs	r1, #0
 8013408:	9100      	str	r1, [sp, #0]
 801340a:	68b9      	ldr	r1, [r7, #8]
 801340c:	68f8      	ldr	r0, [r7, #12]
 801340e:	f000 fc3d 	bl	8013c8c <xQueueGenericCreateStatic>
 8013412:	61f8      	str	r0, [r7, #28]
 8013414:	e008      	b.n	8013428 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8013416:	69bb      	ldr	r3, [r7, #24]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d105      	bne.n	8013428 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801341c:	2200      	movs	r2, #0
 801341e:	68b9      	ldr	r1, [r7, #8]
 8013420:	68f8      	ldr	r0, [r7, #12]
 8013422:	f000 fcab 	bl	8013d7c <xQueueGenericCreate>
 8013426:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013428:	69fb      	ldr	r3, [r7, #28]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d00c      	beq.n	8013448 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d003      	beq.n	801343c <osMessageQueueNew+0xd0>
        name = attr->name;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	617b      	str	r3, [r7, #20]
 801343a:	e001      	b.n	8013440 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801343c:	2300      	movs	r3, #0
 801343e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8013440:	6979      	ldr	r1, [r7, #20]
 8013442:	69f8      	ldr	r0, [r7, #28]
 8013444:	f001 f93e 	bl	80146c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013448:	69fb      	ldr	r3, [r7, #28]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3720      	adds	r7, #32
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
	...

08013454 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013454:	b580      	push	{r7, lr}
 8013456:	b088      	sub	sp, #32
 8013458:	af00      	add	r7, sp, #0
 801345a:	60f8      	str	r0, [r7, #12]
 801345c:	60b9      	str	r1, [r7, #8]
 801345e:	603b      	str	r3, [r7, #0]
 8013460:	4613      	mov	r3, r2
 8013462:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013468:	2300      	movs	r3, #0
 801346a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801346c:	f3ef 8305 	mrs	r3, IPSR
 8013470:	617b      	str	r3, [r7, #20]
  return(result);
 8013472:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013474:	2b00      	cmp	r3, #0
 8013476:	d028      	beq.n	80134ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013478:	69bb      	ldr	r3, [r7, #24]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d005      	beq.n	801348a <osMessageQueuePut+0x36>
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d002      	beq.n	801348a <osMessageQueuePut+0x36>
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d003      	beq.n	8013492 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801348a:	f06f 0303 	mvn.w	r3, #3
 801348e:	61fb      	str	r3, [r7, #28]
 8013490:	e038      	b.n	8013504 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8013492:	2300      	movs	r3, #0
 8013494:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013496:	f107 0210 	add.w	r2, r7, #16
 801349a:	2300      	movs	r3, #0
 801349c:	68b9      	ldr	r1, [r7, #8]
 801349e:	69b8      	ldr	r0, [r7, #24]
 80134a0:	f000 fdc8 	bl	8014034 <xQueueGenericSendFromISR>
 80134a4:	4603      	mov	r3, r0
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d003      	beq.n	80134b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80134aa:	f06f 0302 	mvn.w	r3, #2
 80134ae:	61fb      	str	r3, [r7, #28]
 80134b0:	e028      	b.n	8013504 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d025      	beq.n	8013504 <osMessageQueuePut+0xb0>
 80134b8:	4b15      	ldr	r3, [pc, #84]	; (8013510 <osMessageQueuePut+0xbc>)
 80134ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134be:	601a      	str	r2, [r3, #0]
 80134c0:	f3bf 8f4f 	dsb	sy
 80134c4:	f3bf 8f6f 	isb	sy
 80134c8:	e01c      	b.n	8013504 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80134ca:	69bb      	ldr	r3, [r7, #24]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d002      	beq.n	80134d6 <osMessageQueuePut+0x82>
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d103      	bne.n	80134de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80134d6:	f06f 0303 	mvn.w	r3, #3
 80134da:	61fb      	str	r3, [r7, #28]
 80134dc:	e012      	b.n	8013504 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80134de:	2300      	movs	r3, #0
 80134e0:	683a      	ldr	r2, [r7, #0]
 80134e2:	68b9      	ldr	r1, [r7, #8]
 80134e4:	69b8      	ldr	r0, [r7, #24]
 80134e6:	f000 fca7 	bl	8013e38 <xQueueGenericSend>
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b01      	cmp	r3, #1
 80134ee:	d009      	beq.n	8013504 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80134f0:	683b      	ldr	r3, [r7, #0]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d003      	beq.n	80134fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80134f6:	f06f 0301 	mvn.w	r3, #1
 80134fa:	61fb      	str	r3, [r7, #28]
 80134fc:	e002      	b.n	8013504 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80134fe:	f06f 0302 	mvn.w	r3, #2
 8013502:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013504:	69fb      	ldr	r3, [r7, #28]
}
 8013506:	4618      	mov	r0, r3
 8013508:	3720      	adds	r7, #32
 801350a:	46bd      	mov	sp, r7
 801350c:	bd80      	pop	{r7, pc}
 801350e:	bf00      	nop
 8013510:	e000ed04 	.word	0xe000ed04

08013514 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013514:	b580      	push	{r7, lr}
 8013516:	b088      	sub	sp, #32
 8013518:	af00      	add	r7, sp, #0
 801351a:	60f8      	str	r0, [r7, #12]
 801351c:	60b9      	str	r1, [r7, #8]
 801351e:	607a      	str	r2, [r7, #4]
 8013520:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013526:	2300      	movs	r3, #0
 8013528:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801352a:	f3ef 8305 	mrs	r3, IPSR
 801352e:	617b      	str	r3, [r7, #20]
  return(result);
 8013530:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013532:	2b00      	cmp	r3, #0
 8013534:	d028      	beq.n	8013588 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013536:	69bb      	ldr	r3, [r7, #24]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d005      	beq.n	8013548 <osMessageQueueGet+0x34>
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d002      	beq.n	8013548 <osMessageQueueGet+0x34>
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d003      	beq.n	8013550 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013548:	f06f 0303 	mvn.w	r3, #3
 801354c:	61fb      	str	r3, [r7, #28]
 801354e:	e037      	b.n	80135c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013550:	2300      	movs	r3, #0
 8013552:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013554:	f107 0310 	add.w	r3, r7, #16
 8013558:	461a      	mov	r2, r3
 801355a:	68b9      	ldr	r1, [r7, #8]
 801355c:	69b8      	ldr	r0, [r7, #24]
 801355e:	f000 fee5 	bl	801432c <xQueueReceiveFromISR>
 8013562:	4603      	mov	r3, r0
 8013564:	2b01      	cmp	r3, #1
 8013566:	d003      	beq.n	8013570 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013568:	f06f 0302 	mvn.w	r3, #2
 801356c:	61fb      	str	r3, [r7, #28]
 801356e:	e027      	b.n	80135c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013570:	693b      	ldr	r3, [r7, #16]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d024      	beq.n	80135c0 <osMessageQueueGet+0xac>
 8013576:	4b15      	ldr	r3, [pc, #84]	; (80135cc <osMessageQueueGet+0xb8>)
 8013578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801357c:	601a      	str	r2, [r3, #0]
 801357e:	f3bf 8f4f 	dsb	sy
 8013582:	f3bf 8f6f 	isb	sy
 8013586:	e01b      	b.n	80135c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013588:	69bb      	ldr	r3, [r7, #24]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d002      	beq.n	8013594 <osMessageQueueGet+0x80>
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d103      	bne.n	801359c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8013594:	f06f 0303 	mvn.w	r3, #3
 8013598:	61fb      	str	r3, [r7, #28]
 801359a:	e011      	b.n	80135c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801359c:	683a      	ldr	r2, [r7, #0]
 801359e:	68b9      	ldr	r1, [r7, #8]
 80135a0:	69b8      	ldr	r0, [r7, #24]
 80135a2:	f000 fde3 	bl	801416c <xQueueReceive>
 80135a6:	4603      	mov	r3, r0
 80135a8:	2b01      	cmp	r3, #1
 80135aa:	d009      	beq.n	80135c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d003      	beq.n	80135ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80135b2:	f06f 0301 	mvn.w	r3, #1
 80135b6:	61fb      	str	r3, [r7, #28]
 80135b8:	e002      	b.n	80135c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80135ba:	f06f 0302 	mvn.w	r3, #2
 80135be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80135c0:	69fb      	ldr	r3, [r7, #28]
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3720      	adds	r7, #32
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop
 80135cc:	e000ed04 	.word	0xe000ed04

080135d0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b086      	sub	sp, #24
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80135dc:	693b      	ldr	r3, [r7, #16]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d102      	bne.n	80135e8 <osMessageQueueGetCount+0x18>
    count = 0U;
 80135e2:	2300      	movs	r3, #0
 80135e4:	617b      	str	r3, [r7, #20]
 80135e6:	e00e      	b.n	8013606 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80135e8:	f3ef 8305 	mrs	r3, IPSR
 80135ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80135ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d004      	beq.n	80135fe <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80135f4:	6938      	ldr	r0, [r7, #16]
 80135f6:	f000 ff37 	bl	8014468 <uxQueueMessagesWaitingFromISR>
 80135fa:	6178      	str	r0, [r7, #20]
 80135fc:	e003      	b.n	8013606 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80135fe:	6938      	ldr	r0, [r7, #16]
 8013600:	f000 ff14 	bl	801442c <uxQueueMessagesWaiting>
 8013604:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8013606:	697b      	ldr	r3, [r7, #20]
}
 8013608:	4618      	mov	r0, r3
 801360a:	3718      	adds	r7, #24
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}

08013610 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013610:	b480      	push	{r7}
 8013612:	b085      	sub	sp, #20
 8013614:	af00      	add	r7, sp, #0
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	4a07      	ldr	r2, [pc, #28]	; (801363c <vApplicationGetIdleTaskMemory+0x2c>)
 8013620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	4a06      	ldr	r2, [pc, #24]	; (8013640 <vApplicationGetIdleTaskMemory+0x30>)
 8013626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2280      	movs	r2, #128	; 0x80
 801362c:	601a      	str	r2, [r3, #0]
}
 801362e:	bf00      	nop
 8013630:	3714      	adds	r7, #20
 8013632:	46bd      	mov	sp, r7
 8013634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013638:	4770      	bx	lr
 801363a:	bf00      	nop
 801363c:	24000cb4 	.word	0x24000cb4
 8013640:	24000d10 	.word	0x24000d10

08013644 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013644:	b480      	push	{r7}
 8013646:	b085      	sub	sp, #20
 8013648:	af00      	add	r7, sp, #0
 801364a:	60f8      	str	r0, [r7, #12]
 801364c:	60b9      	str	r1, [r7, #8]
 801364e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	4a07      	ldr	r2, [pc, #28]	; (8013670 <vApplicationGetTimerTaskMemory+0x2c>)
 8013654:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	4a06      	ldr	r2, [pc, #24]	; (8013674 <vApplicationGetTimerTaskMemory+0x30>)
 801365a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013662:	601a      	str	r2, [r3, #0]
}
 8013664:	bf00      	nop
 8013666:	3714      	adds	r7, #20
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr
 8013670:	24000f10 	.word	0x24000f10
 8013674:	24000f6c 	.word	0x24000f6c

08013678 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013678:	b580      	push	{r7, lr}
 801367a:	b086      	sub	sp, #24
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d10a      	bne.n	801369c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013686:	f04f 0350 	mov.w	r3, #80	; 0x50
 801368a:	f383 8811 	msr	BASEPRI, r3
 801368e:	f3bf 8f6f 	isb	sy
 8013692:	f3bf 8f4f 	dsb	sy
 8013696:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013698:	bf00      	nop
 801369a:	e7fe      	b.n	801369a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 801369c:	2320      	movs	r3, #32
 801369e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	2b20      	cmp	r3, #32
 80136a4:	d00a      	beq.n	80136bc <xEventGroupCreateStatic+0x44>
	__asm volatile
 80136a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136aa:	f383 8811 	msr	BASEPRI, r3
 80136ae:	f3bf 8f6f 	isb	sy
 80136b2:	f3bf 8f4f 	dsb	sy
 80136b6:	60fb      	str	r3, [r7, #12]
}
 80136b8:	bf00      	nop
 80136ba:	e7fe      	b.n	80136ba <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d00a      	beq.n	80136dc <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	2200      	movs	r2, #0
 80136ca:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80136cc:	697b      	ldr	r3, [r7, #20]
 80136ce:	3304      	adds	r3, #4
 80136d0:	4618      	mov	r0, r3
 80136d2:	f000 f9bf 	bl	8013a54 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	2201      	movs	r2, #1
 80136da:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80136dc:	697b      	ldr	r3, [r7, #20]
	}
 80136de:	4618      	mov	r0, r3
 80136e0:	3718      	adds	r7, #24
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}

080136e6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80136e6:	b580      	push	{r7, lr}
 80136e8:	b082      	sub	sp, #8
 80136ea:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80136ec:	2020      	movs	r0, #32
 80136ee:	f002 fdc3 	bl	8016278 <pvPortMalloc>
 80136f2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d00a      	beq.n	8013710 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2200      	movs	r2, #0
 80136fe:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	3304      	adds	r3, #4
 8013704:	4618      	mov	r0, r3
 8013706:	f000 f9a5 	bl	8013a54 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	2200      	movs	r2, #0
 801370e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013710:	687b      	ldr	r3, [r7, #4]
	}
 8013712:	4618      	mov	r0, r3
 8013714:	3708      	adds	r7, #8
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
	...

0801371c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b090      	sub	sp, #64	; 0x40
 8013720:	af00      	add	r7, sp, #0
 8013722:	60f8      	str	r0, [r7, #12]
 8013724:	60b9      	str	r1, [r7, #8]
 8013726:	607a      	str	r2, [r7, #4]
 8013728:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801372e:	2300      	movs	r3, #0
 8013730:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8013732:	2300      	movs	r3, #0
 8013734:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d10a      	bne.n	8013752 <xEventGroupWaitBits+0x36>
	__asm volatile
 801373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013740:	f383 8811 	msr	BASEPRI, r3
 8013744:	f3bf 8f6f 	isb	sy
 8013748:	f3bf 8f4f 	dsb	sy
 801374c:	623b      	str	r3, [r7, #32]
}
 801374e:	bf00      	nop
 8013750:	e7fe      	b.n	8013750 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013758:	2b00      	cmp	r3, #0
 801375a:	d00a      	beq.n	8013772 <xEventGroupWaitBits+0x56>
	__asm volatile
 801375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013760:	f383 8811 	msr	BASEPRI, r3
 8013764:	f3bf 8f6f 	isb	sy
 8013768:	f3bf 8f4f 	dsb	sy
 801376c:	61fb      	str	r3, [r7, #28]
}
 801376e:	bf00      	nop
 8013770:	e7fe      	b.n	8013770 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d10a      	bne.n	801378e <xEventGroupWaitBits+0x72>
	__asm volatile
 8013778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801377c:	f383 8811 	msr	BASEPRI, r3
 8013780:	f3bf 8f6f 	isb	sy
 8013784:	f3bf 8f4f 	dsb	sy
 8013788:	61bb      	str	r3, [r7, #24]
}
 801378a:	bf00      	nop
 801378c:	e7fe      	b.n	801378c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801378e:	f001 febb 	bl	8015508 <xTaskGetSchedulerState>
 8013792:	4603      	mov	r3, r0
 8013794:	2b00      	cmp	r3, #0
 8013796:	d102      	bne.n	801379e <xEventGroupWaitBits+0x82>
 8013798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801379a:	2b00      	cmp	r3, #0
 801379c:	d101      	bne.n	80137a2 <xEventGroupWaitBits+0x86>
 801379e:	2301      	movs	r3, #1
 80137a0:	e000      	b.n	80137a4 <xEventGroupWaitBits+0x88>
 80137a2:	2300      	movs	r3, #0
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d10a      	bne.n	80137be <xEventGroupWaitBits+0xa2>
	__asm volatile
 80137a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ac:	f383 8811 	msr	BASEPRI, r3
 80137b0:	f3bf 8f6f 	isb	sy
 80137b4:	f3bf 8f4f 	dsb	sy
 80137b8:	617b      	str	r3, [r7, #20]
}
 80137ba:	bf00      	nop
 80137bc:	e7fe      	b.n	80137bc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80137be:	f001 fa1b 	bl	8014bf8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80137c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80137c8:	683a      	ldr	r2, [r7, #0]
 80137ca:	68b9      	ldr	r1, [r7, #8]
 80137cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80137ce:	f000 f90b 	bl	80139e8 <prvTestWaitCondition>
 80137d2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80137d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d00e      	beq.n	80137f8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80137da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80137de:	2300      	movs	r3, #0
 80137e0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d028      	beq.n	801383a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80137e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137ea:	681a      	ldr	r2, [r3, #0]
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	43db      	mvns	r3, r3
 80137f0:	401a      	ands	r2, r3
 80137f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137f4:	601a      	str	r2, [r3, #0]
 80137f6:	e020      	b.n	801383a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80137f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d104      	bne.n	8013808 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80137fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013800:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013802:	2301      	movs	r3, #1
 8013804:	633b      	str	r3, [r7, #48]	; 0x30
 8013806:	e018      	b.n	801383a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d003      	beq.n	8013816 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801380e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013814:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d003      	beq.n	8013824 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801381c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801381e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013822:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013826:	1d18      	adds	r0, r3, #4
 8013828:	68ba      	ldr	r2, [r7, #8]
 801382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801382c:	4313      	orrs	r3, r2
 801382e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013830:	4619      	mov	r1, r3
 8013832:	f001 fbe1 	bl	8014ff8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013836:	2300      	movs	r3, #0
 8013838:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801383a:	f001 f9eb 	bl	8014c14 <xTaskResumeAll>
 801383e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013842:	2b00      	cmp	r3, #0
 8013844:	d031      	beq.n	80138aa <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013848:	2b00      	cmp	r3, #0
 801384a:	d107      	bne.n	801385c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801384c:	4b19      	ldr	r3, [pc, #100]	; (80138b4 <xEventGroupWaitBits+0x198>)
 801384e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013852:	601a      	str	r2, [r3, #0]
 8013854:	f3bf 8f4f 	dsb	sy
 8013858:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801385c:	f001 fee0 	bl	8015620 <uxTaskResetEventItemValue>
 8013860:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013868:	2b00      	cmp	r3, #0
 801386a:	d11a      	bne.n	80138a2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 801386c:	f002 fbe2 	bl	8016034 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013876:	683a      	ldr	r2, [r7, #0]
 8013878:	68b9      	ldr	r1, [r7, #8]
 801387a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801387c:	f000 f8b4 	bl	80139e8 <prvTestWaitCondition>
 8013880:	4603      	mov	r3, r0
 8013882:	2b00      	cmp	r3, #0
 8013884:	d009      	beq.n	801389a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d006      	beq.n	801389a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801388c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801388e:	681a      	ldr	r2, [r3, #0]
 8013890:	68bb      	ldr	r3, [r7, #8]
 8013892:	43db      	mvns	r3, r3
 8013894:	401a      	ands	r2, r3
 8013896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013898:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801389a:	2301      	movs	r3, #1
 801389c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801389e:	f002 fbf9 	bl	8016094 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80138a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80138a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80138aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80138ac:	4618      	mov	r0, r3
 80138ae:	3740      	adds	r7, #64	; 0x40
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bd80      	pop	{r7, pc}
 80138b4:	e000ed04 	.word	0xe000ed04

080138b8 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b08e      	sub	sp, #56	; 0x38
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
 80138c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80138c2:	2300      	movs	r3, #0
 80138c4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80138ca:	2300      	movs	r3, #0
 80138cc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d10a      	bne.n	80138ea <xEventGroupSetBits+0x32>
	__asm volatile
 80138d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138d8:	f383 8811 	msr	BASEPRI, r3
 80138dc:	f3bf 8f6f 	isb	sy
 80138e0:	f3bf 8f4f 	dsb	sy
 80138e4:	613b      	str	r3, [r7, #16]
}
 80138e6:	bf00      	nop
 80138e8:	e7fe      	b.n	80138e8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d00a      	beq.n	801390a <xEventGroupSetBits+0x52>
	__asm volatile
 80138f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f8:	f383 8811 	msr	BASEPRI, r3
 80138fc:	f3bf 8f6f 	isb	sy
 8013900:	f3bf 8f4f 	dsb	sy
 8013904:	60fb      	str	r3, [r7, #12]
}
 8013906:	bf00      	nop
 8013908:	e7fe      	b.n	8013908 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801390c:	3304      	adds	r3, #4
 801390e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013912:	3308      	adds	r3, #8
 8013914:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013916:	f001 f96f 	bl	8014bf8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801391c:	68db      	ldr	r3, [r3, #12]
 801391e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013922:	681a      	ldr	r2, [r3, #0]
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	431a      	orrs	r2, r3
 8013928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801392a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801392c:	e03c      	b.n	80139a8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801392e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 801393a:	2300      	movs	r3, #0
 801393c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 801393e:	69bb      	ldr	r3, [r7, #24]
 8013940:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013944:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013946:	69bb      	ldr	r3, [r7, #24]
 8013948:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801394c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013954:	2b00      	cmp	r3, #0
 8013956:	d108      	bne.n	801396a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801395a:	681a      	ldr	r2, [r3, #0]
 801395c:	69bb      	ldr	r3, [r7, #24]
 801395e:	4013      	ands	r3, r2
 8013960:	2b00      	cmp	r3, #0
 8013962:	d00b      	beq.n	801397c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013964:	2301      	movs	r3, #1
 8013966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013968:	e008      	b.n	801397c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 801396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	69bb      	ldr	r3, [r7, #24]
 8013970:	4013      	ands	r3, r2
 8013972:	69ba      	ldr	r2, [r7, #24]
 8013974:	429a      	cmp	r2, r3
 8013976:	d101      	bne.n	801397c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013978:	2301      	movs	r3, #1
 801397a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 801397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801397e:	2b00      	cmp	r3, #0
 8013980:	d010      	beq.n	80139a4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013988:	2b00      	cmp	r3, #0
 801398a:	d003      	beq.n	8013994 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 801398c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801398e:	69bb      	ldr	r3, [r7, #24]
 8013990:	4313      	orrs	r3, r2
 8013992:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801399c:	4619      	mov	r1, r3
 801399e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80139a0:	f001 fbf6 	bl	8015190 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80139a4:	69fb      	ldr	r3, [r7, #28]
 80139a6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80139a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80139aa:	6a3b      	ldr	r3, [r7, #32]
 80139ac:	429a      	cmp	r2, r3
 80139ae:	d1be      	bne.n	801392e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80139b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b2:	681a      	ldr	r2, [r3, #0]
 80139b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b6:	43db      	mvns	r3, r3
 80139b8:	401a      	ands	r2, r3
 80139ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139bc:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80139be:	f001 f929 	bl	8014c14 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80139c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c4:	681b      	ldr	r3, [r3, #0]
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3738      	adds	r7, #56	; 0x38
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}

080139ce <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80139ce:	b580      	push	{r7, lr}
 80139d0:	b082      	sub	sp, #8
 80139d2:	af00      	add	r7, sp, #0
 80139d4:	6078      	str	r0, [r7, #4]
 80139d6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80139d8:	6839      	ldr	r1, [r7, #0]
 80139da:	6878      	ldr	r0, [r7, #4]
 80139dc:	f7ff ff6c 	bl	80138b8 <xEventGroupSetBits>
}
 80139e0:	bf00      	nop
 80139e2:	3708      	adds	r7, #8
 80139e4:	46bd      	mov	sp, r7
 80139e6:	bd80      	pop	{r7, pc}

080139e8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80139e8:	b480      	push	{r7}
 80139ea:	b087      	sub	sp, #28
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	60f8      	str	r0, [r7, #12]
 80139f0:	60b9      	str	r1, [r7, #8]
 80139f2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80139f4:	2300      	movs	r3, #0
 80139f6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d107      	bne.n	8013a0e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80139fe:	68fa      	ldr	r2, [r7, #12]
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	4013      	ands	r3, r2
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d00a      	beq.n	8013a1e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013a08:	2301      	movs	r3, #1
 8013a0a:	617b      	str	r3, [r7, #20]
 8013a0c:	e007      	b.n	8013a1e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013a0e:	68fa      	ldr	r2, [r7, #12]
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	4013      	ands	r3, r2
 8013a14:	68ba      	ldr	r2, [r7, #8]
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d101      	bne.n	8013a1e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013a1e:	697b      	ldr	r3, [r7, #20]
}
 8013a20:	4618      	mov	r0, r3
 8013a22:	371c      	adds	r7, #28
 8013a24:	46bd      	mov	sp, r7
 8013a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2a:	4770      	bx	lr

08013a2c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b086      	sub	sp, #24
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	60f8      	str	r0, [r7, #12]
 8013a34:	60b9      	str	r1, [r7, #8]
 8013a36:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	68ba      	ldr	r2, [r7, #8]
 8013a3c:	68f9      	ldr	r1, [r7, #12]
 8013a3e:	4804      	ldr	r0, [pc, #16]	; (8013a50 <xEventGroupSetBitsFromISR+0x24>)
 8013a40:	f002 f9a8 	bl	8015d94 <xTimerPendFunctionCallFromISR>
 8013a44:	6178      	str	r0, [r7, #20]

		return xReturn;
 8013a46:	697b      	ldr	r3, [r7, #20]
	}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	3718      	adds	r7, #24
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}
 8013a50:	080139cf 	.word	0x080139cf

08013a54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013a54:	b480      	push	{r7}
 8013a56:	b083      	sub	sp, #12
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	f103 0208 	add.w	r2, r3, #8
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f103 0208 	add.w	r2, r3, #8
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	f103 0208 	add.w	r2, r3, #8
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	2200      	movs	r2, #0
 8013a86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013a88:	bf00      	nop
 8013a8a:	370c      	adds	r7, #12
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a92:	4770      	bx	lr

08013a94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013a94:	b480      	push	{r7}
 8013a96:	b083      	sub	sp, #12
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013aa2:	bf00      	nop
 8013aa4:	370c      	adds	r7, #12
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aac:	4770      	bx	lr

08013aae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013aae:	b480      	push	{r7}
 8013ab0:	b085      	sub	sp, #20
 8013ab2:	af00      	add	r7, sp, #0
 8013ab4:	6078      	str	r0, [r7, #4]
 8013ab6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	685b      	ldr	r3, [r3, #4]
 8013abc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	68fa      	ldr	r2, [r7, #12]
 8013ac2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	689a      	ldr	r2, [r3, #8]
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	689b      	ldr	r3, [r3, #8]
 8013ad0:	683a      	ldr	r2, [r7, #0]
 8013ad2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	683a      	ldr	r2, [r7, #0]
 8013ad8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013ada:	683b      	ldr	r3, [r7, #0]
 8013adc:	687a      	ldr	r2, [r7, #4]
 8013ade:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	1c5a      	adds	r2, r3, #1
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	601a      	str	r2, [r3, #0]
}
 8013aea:	bf00      	nop
 8013aec:	3714      	adds	r7, #20
 8013aee:	46bd      	mov	sp, r7
 8013af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af4:	4770      	bx	lr

08013af6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013af6:	b480      	push	{r7}
 8013af8:	b085      	sub	sp, #20
 8013afa:	af00      	add	r7, sp, #0
 8013afc:	6078      	str	r0, [r7, #4]
 8013afe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013b06:	68bb      	ldr	r3, [r7, #8]
 8013b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b0c:	d103      	bne.n	8013b16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	691b      	ldr	r3, [r3, #16]
 8013b12:	60fb      	str	r3, [r7, #12]
 8013b14:	e00c      	b.n	8013b30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	3308      	adds	r3, #8
 8013b1a:	60fb      	str	r3, [r7, #12]
 8013b1c:	e002      	b.n	8013b24 <vListInsert+0x2e>
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	685b      	ldr	r3, [r3, #4]
 8013b22:	60fb      	str	r3, [r7, #12]
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	685b      	ldr	r3, [r3, #4]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	68ba      	ldr	r2, [r7, #8]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d2f6      	bcs.n	8013b1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	685a      	ldr	r2, [r3, #4]
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	685b      	ldr	r3, [r3, #4]
 8013b3c:	683a      	ldr	r2, [r7, #0]
 8013b3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	68fa      	ldr	r2, [r7, #12]
 8013b44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	683a      	ldr	r2, [r7, #0]
 8013b4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	687a      	ldr	r2, [r7, #4]
 8013b50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	1c5a      	adds	r2, r3, #1
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	601a      	str	r2, [r3, #0]
}
 8013b5c:	bf00      	nop
 8013b5e:	3714      	adds	r7, #20
 8013b60:	46bd      	mov	sp, r7
 8013b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b66:	4770      	bx	lr

08013b68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b085      	sub	sp, #20
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	691b      	ldr	r3, [r3, #16]
 8013b74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	685b      	ldr	r3, [r3, #4]
 8013b7a:	687a      	ldr	r2, [r7, #4]
 8013b7c:	6892      	ldr	r2, [r2, #8]
 8013b7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	689b      	ldr	r3, [r3, #8]
 8013b84:	687a      	ldr	r2, [r7, #4]
 8013b86:	6852      	ldr	r2, [r2, #4]
 8013b88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	685b      	ldr	r3, [r3, #4]
 8013b8e:	687a      	ldr	r2, [r7, #4]
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d103      	bne.n	8013b9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	689a      	ldr	r2, [r3, #8]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	1e5a      	subs	r2, r3, #1
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	681b      	ldr	r3, [r3, #0]
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	3714      	adds	r7, #20
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr

08013bbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b084      	sub	sp, #16
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
 8013bc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d10a      	bne.n	8013be6 <xQueueGenericReset+0x2a>
	__asm volatile
 8013bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bd4:	f383 8811 	msr	BASEPRI, r3
 8013bd8:	f3bf 8f6f 	isb	sy
 8013bdc:	f3bf 8f4f 	dsb	sy
 8013be0:	60bb      	str	r3, [r7, #8]
}
 8013be2:	bf00      	nop
 8013be4:	e7fe      	b.n	8013be4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013be6:	f002 fa25 	bl	8016034 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	681a      	ldr	r2, [r3, #0]
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bf2:	68f9      	ldr	r1, [r7, #12]
 8013bf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013bf6:	fb01 f303 	mul.w	r3, r1, r3
 8013bfa:	441a      	add	r2, r3
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	2200      	movs	r2, #0
 8013c04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	681a      	ldr	r2, [r3, #0]
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	681a      	ldr	r2, [r3, #0]
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c16:	3b01      	subs	r3, #1
 8013c18:	68f9      	ldr	r1, [r7, #12]
 8013c1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013c1c:	fb01 f303 	mul.w	r3, r1, r3
 8013c20:	441a      	add	r2, r3
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	22ff      	movs	r2, #255	; 0xff
 8013c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	22ff      	movs	r2, #255	; 0xff
 8013c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013c36:	683b      	ldr	r3, [r7, #0]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d114      	bne.n	8013c66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	691b      	ldr	r3, [r3, #16]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d01a      	beq.n	8013c7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	3310      	adds	r3, #16
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f001 fa3d 	bl	80150c8 <xTaskRemoveFromEventList>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d012      	beq.n	8013c7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013c54:	4b0c      	ldr	r3, [pc, #48]	; (8013c88 <xQueueGenericReset+0xcc>)
 8013c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c5a:	601a      	str	r2, [r3, #0]
 8013c5c:	f3bf 8f4f 	dsb	sy
 8013c60:	f3bf 8f6f 	isb	sy
 8013c64:	e009      	b.n	8013c7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	3310      	adds	r3, #16
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7ff fef2 	bl	8013a54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	3324      	adds	r3, #36	; 0x24
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7ff feed 	bl	8013a54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013c7a:	f002 fa0b 	bl	8016094 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013c7e:	2301      	movs	r3, #1
}
 8013c80:	4618      	mov	r0, r3
 8013c82:	3710      	adds	r7, #16
 8013c84:	46bd      	mov	sp, r7
 8013c86:	bd80      	pop	{r7, pc}
 8013c88:	e000ed04 	.word	0xe000ed04

08013c8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b08e      	sub	sp, #56	; 0x38
 8013c90:	af02      	add	r7, sp, #8
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	60b9      	str	r1, [r7, #8]
 8013c96:	607a      	str	r2, [r7, #4]
 8013c98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d10a      	bne.n	8013cb6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ca4:	f383 8811 	msr	BASEPRI, r3
 8013ca8:	f3bf 8f6f 	isb	sy
 8013cac:	f3bf 8f4f 	dsb	sy
 8013cb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013cb2:	bf00      	nop
 8013cb4:	e7fe      	b.n	8013cb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013cb6:	683b      	ldr	r3, [r7, #0]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d10a      	bne.n	8013cd2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cc0:	f383 8811 	msr	BASEPRI, r3
 8013cc4:	f3bf 8f6f 	isb	sy
 8013cc8:	f3bf 8f4f 	dsb	sy
 8013ccc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013cce:	bf00      	nop
 8013cd0:	e7fe      	b.n	8013cd0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d002      	beq.n	8013cde <xQueueGenericCreateStatic+0x52>
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d001      	beq.n	8013ce2 <xQueueGenericCreateStatic+0x56>
 8013cde:	2301      	movs	r3, #1
 8013ce0:	e000      	b.n	8013ce4 <xQueueGenericCreateStatic+0x58>
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d10a      	bne.n	8013cfe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cec:	f383 8811 	msr	BASEPRI, r3
 8013cf0:	f3bf 8f6f 	isb	sy
 8013cf4:	f3bf 8f4f 	dsb	sy
 8013cf8:	623b      	str	r3, [r7, #32]
}
 8013cfa:	bf00      	nop
 8013cfc:	e7fe      	b.n	8013cfc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d102      	bne.n	8013d0a <xQueueGenericCreateStatic+0x7e>
 8013d04:	68bb      	ldr	r3, [r7, #8]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d101      	bne.n	8013d0e <xQueueGenericCreateStatic+0x82>
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	e000      	b.n	8013d10 <xQueueGenericCreateStatic+0x84>
 8013d0e:	2300      	movs	r3, #0
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d10a      	bne.n	8013d2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d18:	f383 8811 	msr	BASEPRI, r3
 8013d1c:	f3bf 8f6f 	isb	sy
 8013d20:	f3bf 8f4f 	dsb	sy
 8013d24:	61fb      	str	r3, [r7, #28]
}
 8013d26:	bf00      	nop
 8013d28:	e7fe      	b.n	8013d28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013d2a:	2350      	movs	r3, #80	; 0x50
 8013d2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013d2e:	697b      	ldr	r3, [r7, #20]
 8013d30:	2b50      	cmp	r3, #80	; 0x50
 8013d32:	d00a      	beq.n	8013d4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d38:	f383 8811 	msr	BASEPRI, r3
 8013d3c:	f3bf 8f6f 	isb	sy
 8013d40:	f3bf 8f4f 	dsb	sy
 8013d44:	61bb      	str	r3, [r7, #24]
}
 8013d46:	bf00      	nop
 8013d48:	e7fe      	b.n	8013d48 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013d4a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d00d      	beq.n	8013d72 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d58:	2201      	movs	r2, #1
 8013d5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013d5e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d64:	9300      	str	r3, [sp, #0]
 8013d66:	4613      	mov	r3, r2
 8013d68:	687a      	ldr	r2, [r7, #4]
 8013d6a:	68b9      	ldr	r1, [r7, #8]
 8013d6c:	68f8      	ldr	r0, [r7, #12]
 8013d6e:	f000 f83f 	bl	8013df0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013d74:	4618      	mov	r0, r3
 8013d76:	3730      	adds	r7, #48	; 0x30
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}

08013d7c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b08a      	sub	sp, #40	; 0x28
 8013d80:	af02      	add	r7, sp, #8
 8013d82:	60f8      	str	r0, [r7, #12]
 8013d84:	60b9      	str	r1, [r7, #8]
 8013d86:	4613      	mov	r3, r2
 8013d88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d10a      	bne.n	8013da6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8013d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d94:	f383 8811 	msr	BASEPRI, r3
 8013d98:	f3bf 8f6f 	isb	sy
 8013d9c:	f3bf 8f4f 	dsb	sy
 8013da0:	613b      	str	r3, [r7, #16]
}
 8013da2:	bf00      	nop
 8013da4:	e7fe      	b.n	8013da4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	68ba      	ldr	r2, [r7, #8]
 8013daa:	fb02 f303 	mul.w	r3, r2, r3
 8013dae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013db0:	69fb      	ldr	r3, [r7, #28]
 8013db2:	3350      	adds	r3, #80	; 0x50
 8013db4:	4618      	mov	r0, r3
 8013db6:	f002 fa5f 	bl	8016278 <pvPortMalloc>
 8013dba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013dbc:	69bb      	ldr	r3, [r7, #24]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d011      	beq.n	8013de6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013dc2:	69bb      	ldr	r3, [r7, #24]
 8013dc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013dc6:	697b      	ldr	r3, [r7, #20]
 8013dc8:	3350      	adds	r3, #80	; 0x50
 8013dca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013dcc:	69bb      	ldr	r3, [r7, #24]
 8013dce:	2200      	movs	r2, #0
 8013dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013dd4:	79fa      	ldrb	r2, [r7, #7]
 8013dd6:	69bb      	ldr	r3, [r7, #24]
 8013dd8:	9300      	str	r3, [sp, #0]
 8013dda:	4613      	mov	r3, r2
 8013ddc:	697a      	ldr	r2, [r7, #20]
 8013dde:	68b9      	ldr	r1, [r7, #8]
 8013de0:	68f8      	ldr	r0, [r7, #12]
 8013de2:	f000 f805 	bl	8013df0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013de6:	69bb      	ldr	r3, [r7, #24]
	}
 8013de8:	4618      	mov	r0, r3
 8013dea:	3720      	adds	r7, #32
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}

08013df0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b084      	sub	sp, #16
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	60f8      	str	r0, [r7, #12]
 8013df8:	60b9      	str	r1, [r7, #8]
 8013dfa:	607a      	str	r2, [r7, #4]
 8013dfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d103      	bne.n	8013e0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013e04:	69bb      	ldr	r3, [r7, #24]
 8013e06:	69ba      	ldr	r2, [r7, #24]
 8013e08:	601a      	str	r2, [r3, #0]
 8013e0a:	e002      	b.n	8013e12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013e0c:	69bb      	ldr	r3, [r7, #24]
 8013e0e:	687a      	ldr	r2, [r7, #4]
 8013e10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013e12:	69bb      	ldr	r3, [r7, #24]
 8013e14:	68fa      	ldr	r2, [r7, #12]
 8013e16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013e18:	69bb      	ldr	r3, [r7, #24]
 8013e1a:	68ba      	ldr	r2, [r7, #8]
 8013e1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013e1e:	2101      	movs	r1, #1
 8013e20:	69b8      	ldr	r0, [r7, #24]
 8013e22:	f7ff fecb 	bl	8013bbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	78fa      	ldrb	r2, [r7, #3]
 8013e2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013e2e:	bf00      	nop
 8013e30:	3710      	adds	r7, #16
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}
	...

08013e38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b08e      	sub	sp, #56	; 0x38
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	60f8      	str	r0, [r7, #12]
 8013e40:	60b9      	str	r1, [r7, #8]
 8013e42:	607a      	str	r2, [r7, #4]
 8013e44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013e46:	2300      	movs	r3, #0
 8013e48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d10a      	bne.n	8013e6a <xQueueGenericSend+0x32>
	__asm volatile
 8013e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e58:	f383 8811 	msr	BASEPRI, r3
 8013e5c:	f3bf 8f6f 	isb	sy
 8013e60:	f3bf 8f4f 	dsb	sy
 8013e64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013e66:	bf00      	nop
 8013e68:	e7fe      	b.n	8013e68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e6a:	68bb      	ldr	r3, [r7, #8]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d103      	bne.n	8013e78 <xQueueGenericSend+0x40>
 8013e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d101      	bne.n	8013e7c <xQueueGenericSend+0x44>
 8013e78:	2301      	movs	r3, #1
 8013e7a:	e000      	b.n	8013e7e <xQueueGenericSend+0x46>
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d10a      	bne.n	8013e98 <xQueueGenericSend+0x60>
	__asm volatile
 8013e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e86:	f383 8811 	msr	BASEPRI, r3
 8013e8a:	f3bf 8f6f 	isb	sy
 8013e8e:	f3bf 8f4f 	dsb	sy
 8013e92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013e94:	bf00      	nop
 8013e96:	e7fe      	b.n	8013e96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	2b02      	cmp	r3, #2
 8013e9c:	d103      	bne.n	8013ea6 <xQueueGenericSend+0x6e>
 8013e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ea2:	2b01      	cmp	r3, #1
 8013ea4:	d101      	bne.n	8013eaa <xQueueGenericSend+0x72>
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	e000      	b.n	8013eac <xQueueGenericSend+0x74>
 8013eaa:	2300      	movs	r3, #0
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d10a      	bne.n	8013ec6 <xQueueGenericSend+0x8e>
	__asm volatile
 8013eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb4:	f383 8811 	msr	BASEPRI, r3
 8013eb8:	f3bf 8f6f 	isb	sy
 8013ebc:	f3bf 8f4f 	dsb	sy
 8013ec0:	623b      	str	r3, [r7, #32]
}
 8013ec2:	bf00      	nop
 8013ec4:	e7fe      	b.n	8013ec4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013ec6:	f001 fb1f 	bl	8015508 <xTaskGetSchedulerState>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d102      	bne.n	8013ed6 <xQueueGenericSend+0x9e>
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d101      	bne.n	8013eda <xQueueGenericSend+0xa2>
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	e000      	b.n	8013edc <xQueueGenericSend+0xa4>
 8013eda:	2300      	movs	r3, #0
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d10a      	bne.n	8013ef6 <xQueueGenericSend+0xbe>
	__asm volatile
 8013ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ee4:	f383 8811 	msr	BASEPRI, r3
 8013ee8:	f3bf 8f6f 	isb	sy
 8013eec:	f3bf 8f4f 	dsb	sy
 8013ef0:	61fb      	str	r3, [r7, #28]
}
 8013ef2:	bf00      	nop
 8013ef4:	e7fe      	b.n	8013ef4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013ef6:	f002 f89d 	bl	8016034 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d302      	bcc.n	8013f0c <xQueueGenericSend+0xd4>
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	2b02      	cmp	r3, #2
 8013f0a:	d129      	bne.n	8013f60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013f0c:	683a      	ldr	r2, [r7, #0]
 8013f0e:	68b9      	ldr	r1, [r7, #8]
 8013f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f12:	f000 fac7 	bl	80144a4 <prvCopyDataToQueue>
 8013f16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d010      	beq.n	8013f42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f22:	3324      	adds	r3, #36	; 0x24
 8013f24:	4618      	mov	r0, r3
 8013f26:	f001 f8cf 	bl	80150c8 <xTaskRemoveFromEventList>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d013      	beq.n	8013f58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013f30:	4b3f      	ldr	r3, [pc, #252]	; (8014030 <xQueueGenericSend+0x1f8>)
 8013f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f36:	601a      	str	r2, [r3, #0]
 8013f38:	f3bf 8f4f 	dsb	sy
 8013f3c:	f3bf 8f6f 	isb	sy
 8013f40:	e00a      	b.n	8013f58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d007      	beq.n	8013f58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013f48:	4b39      	ldr	r3, [pc, #228]	; (8014030 <xQueueGenericSend+0x1f8>)
 8013f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f4e:	601a      	str	r2, [r3, #0]
 8013f50:	f3bf 8f4f 	dsb	sy
 8013f54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013f58:	f002 f89c 	bl	8016094 <vPortExitCritical>
				return pdPASS;
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	e063      	b.n	8014028 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d103      	bne.n	8013f6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013f66:	f002 f895 	bl	8016094 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	e05c      	b.n	8014028 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d106      	bne.n	8013f82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013f74:	f107 0314 	add.w	r3, r7, #20
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f001 f96b 	bl	8015254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013f7e:	2301      	movs	r3, #1
 8013f80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013f82:	f002 f887 	bl	8016094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013f86:	f000 fe37 	bl	8014bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013f8a:	f002 f853 	bl	8016034 <vPortEnterCritical>
 8013f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f94:	b25b      	sxtb	r3, r3
 8013f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f9a:	d103      	bne.n	8013fa4 <xQueueGenericSend+0x16c>
 8013f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013faa:	b25b      	sxtb	r3, r3
 8013fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fb0:	d103      	bne.n	8013fba <xQueueGenericSend+0x182>
 8013fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013fba:	f002 f86b 	bl	8016094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013fbe:	1d3a      	adds	r2, r7, #4
 8013fc0:	f107 0314 	add.w	r3, r7, #20
 8013fc4:	4611      	mov	r1, r2
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f001 f95a 	bl	8015280 <xTaskCheckForTimeOut>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d124      	bne.n	801401c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013fd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fd4:	f000 fb5e 	bl	8014694 <prvIsQueueFull>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d018      	beq.n	8014010 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe0:	3310      	adds	r3, #16
 8013fe2:	687a      	ldr	r2, [r7, #4]
 8013fe4:	4611      	mov	r1, r2
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f000 ffe2 	bl	8014fb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fee:	f000 fae9 	bl	80145c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013ff2:	f000 fe0f 	bl	8014c14 <xTaskResumeAll>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	f47f af7c 	bne.w	8013ef6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013ffe:	4b0c      	ldr	r3, [pc, #48]	; (8014030 <xQueueGenericSend+0x1f8>)
 8014000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014004:	601a      	str	r2, [r3, #0]
 8014006:	f3bf 8f4f 	dsb	sy
 801400a:	f3bf 8f6f 	isb	sy
 801400e:	e772      	b.n	8013ef6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014012:	f000 fad7 	bl	80145c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014016:	f000 fdfd 	bl	8014c14 <xTaskResumeAll>
 801401a:	e76c      	b.n	8013ef6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801401c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801401e:	f000 fad1 	bl	80145c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014022:	f000 fdf7 	bl	8014c14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014026:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014028:	4618      	mov	r0, r3
 801402a:	3738      	adds	r7, #56	; 0x38
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	e000ed04 	.word	0xe000ed04

08014034 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b090      	sub	sp, #64	; 0x40
 8014038:	af00      	add	r7, sp, #0
 801403a:	60f8      	str	r0, [r7, #12]
 801403c:	60b9      	str	r1, [r7, #8]
 801403e:	607a      	str	r2, [r7, #4]
 8014040:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8014046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014048:	2b00      	cmp	r3, #0
 801404a:	d10a      	bne.n	8014062 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801404c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014050:	f383 8811 	msr	BASEPRI, r3
 8014054:	f3bf 8f6f 	isb	sy
 8014058:	f3bf 8f4f 	dsb	sy
 801405c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801405e:	bf00      	nop
 8014060:	e7fe      	b.n	8014060 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d103      	bne.n	8014070 <xQueueGenericSendFromISR+0x3c>
 8014068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801406c:	2b00      	cmp	r3, #0
 801406e:	d101      	bne.n	8014074 <xQueueGenericSendFromISR+0x40>
 8014070:	2301      	movs	r3, #1
 8014072:	e000      	b.n	8014076 <xQueueGenericSendFromISR+0x42>
 8014074:	2300      	movs	r3, #0
 8014076:	2b00      	cmp	r3, #0
 8014078:	d10a      	bne.n	8014090 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801407e:	f383 8811 	msr	BASEPRI, r3
 8014082:	f3bf 8f6f 	isb	sy
 8014086:	f3bf 8f4f 	dsb	sy
 801408a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801408c:	bf00      	nop
 801408e:	e7fe      	b.n	801408e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	2b02      	cmp	r3, #2
 8014094:	d103      	bne.n	801409e <xQueueGenericSendFromISR+0x6a>
 8014096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801409a:	2b01      	cmp	r3, #1
 801409c:	d101      	bne.n	80140a2 <xQueueGenericSendFromISR+0x6e>
 801409e:	2301      	movs	r3, #1
 80140a0:	e000      	b.n	80140a4 <xQueueGenericSendFromISR+0x70>
 80140a2:	2300      	movs	r3, #0
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d10a      	bne.n	80140be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80140a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ac:	f383 8811 	msr	BASEPRI, r3
 80140b0:	f3bf 8f6f 	isb	sy
 80140b4:	f3bf 8f4f 	dsb	sy
 80140b8:	623b      	str	r3, [r7, #32]
}
 80140ba:	bf00      	nop
 80140bc:	e7fe      	b.n	80140bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80140be:	f002 f89b 	bl	80161f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80140c2:	f3ef 8211 	mrs	r2, BASEPRI
 80140c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140ca:	f383 8811 	msr	BASEPRI, r3
 80140ce:	f3bf 8f6f 	isb	sy
 80140d2:	f3bf 8f4f 	dsb	sy
 80140d6:	61fa      	str	r2, [r7, #28]
 80140d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80140da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80140dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80140de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80140e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d302      	bcc.n	80140f0 <xQueueGenericSendFromISR+0xbc>
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	2b02      	cmp	r3, #2
 80140ee:	d12f      	bne.n	8014150 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80140f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80140f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80140fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014100:	683a      	ldr	r2, [r7, #0]
 8014102:	68b9      	ldr	r1, [r7, #8]
 8014104:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014106:	f000 f9cd 	bl	80144a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801410a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801410e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014112:	d112      	bne.n	801413a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014118:	2b00      	cmp	r3, #0
 801411a:	d016      	beq.n	801414a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801411e:	3324      	adds	r3, #36	; 0x24
 8014120:	4618      	mov	r0, r3
 8014122:	f000 ffd1 	bl	80150c8 <xTaskRemoveFromEventList>
 8014126:	4603      	mov	r3, r0
 8014128:	2b00      	cmp	r3, #0
 801412a:	d00e      	beq.n	801414a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d00b      	beq.n	801414a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	2201      	movs	r2, #1
 8014136:	601a      	str	r2, [r3, #0]
 8014138:	e007      	b.n	801414a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801413a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801413e:	3301      	adds	r3, #1
 8014140:	b2db      	uxtb	r3, r3
 8014142:	b25a      	sxtb	r2, r3
 8014144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801414a:	2301      	movs	r3, #1
 801414c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801414e:	e001      	b.n	8014154 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014150:	2300      	movs	r3, #0
 8014152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014156:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801415e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8014162:	4618      	mov	r0, r3
 8014164:	3740      	adds	r7, #64	; 0x40
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
	...

0801416c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b08c      	sub	sp, #48	; 0x30
 8014170:	af00      	add	r7, sp, #0
 8014172:	60f8      	str	r0, [r7, #12]
 8014174:	60b9      	str	r1, [r7, #8]
 8014176:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014178:	2300      	movs	r3, #0
 801417a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014182:	2b00      	cmp	r3, #0
 8014184:	d10a      	bne.n	801419c <xQueueReceive+0x30>
	__asm volatile
 8014186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801418a:	f383 8811 	msr	BASEPRI, r3
 801418e:	f3bf 8f6f 	isb	sy
 8014192:	f3bf 8f4f 	dsb	sy
 8014196:	623b      	str	r3, [r7, #32]
}
 8014198:	bf00      	nop
 801419a:	e7fe      	b.n	801419a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801419c:	68bb      	ldr	r3, [r7, #8]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d103      	bne.n	80141aa <xQueueReceive+0x3e>
 80141a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d101      	bne.n	80141ae <xQueueReceive+0x42>
 80141aa:	2301      	movs	r3, #1
 80141ac:	e000      	b.n	80141b0 <xQueueReceive+0x44>
 80141ae:	2300      	movs	r3, #0
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d10a      	bne.n	80141ca <xQueueReceive+0x5e>
	__asm volatile
 80141b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141b8:	f383 8811 	msr	BASEPRI, r3
 80141bc:	f3bf 8f6f 	isb	sy
 80141c0:	f3bf 8f4f 	dsb	sy
 80141c4:	61fb      	str	r3, [r7, #28]
}
 80141c6:	bf00      	nop
 80141c8:	e7fe      	b.n	80141c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80141ca:	f001 f99d 	bl	8015508 <xTaskGetSchedulerState>
 80141ce:	4603      	mov	r3, r0
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d102      	bne.n	80141da <xQueueReceive+0x6e>
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d101      	bne.n	80141de <xQueueReceive+0x72>
 80141da:	2301      	movs	r3, #1
 80141dc:	e000      	b.n	80141e0 <xQueueReceive+0x74>
 80141de:	2300      	movs	r3, #0
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d10a      	bne.n	80141fa <xQueueReceive+0x8e>
	__asm volatile
 80141e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141e8:	f383 8811 	msr	BASEPRI, r3
 80141ec:	f3bf 8f6f 	isb	sy
 80141f0:	f3bf 8f4f 	dsb	sy
 80141f4:	61bb      	str	r3, [r7, #24]
}
 80141f6:	bf00      	nop
 80141f8:	e7fe      	b.n	80141f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80141fa:	f001 ff1b 	bl	8016034 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80141fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014202:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014206:	2b00      	cmp	r3, #0
 8014208:	d01f      	beq.n	801424a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801420a:	68b9      	ldr	r1, [r7, #8]
 801420c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801420e:	f000 f9b3 	bl	8014578 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014214:	1e5a      	subs	r2, r3, #1
 8014216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014218:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801421a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421c:	691b      	ldr	r3, [r3, #16]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d00f      	beq.n	8014242 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014224:	3310      	adds	r3, #16
 8014226:	4618      	mov	r0, r3
 8014228:	f000 ff4e 	bl	80150c8 <xTaskRemoveFromEventList>
 801422c:	4603      	mov	r3, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	d007      	beq.n	8014242 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014232:	4b3d      	ldr	r3, [pc, #244]	; (8014328 <xQueueReceive+0x1bc>)
 8014234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014238:	601a      	str	r2, [r3, #0]
 801423a:	f3bf 8f4f 	dsb	sy
 801423e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014242:	f001 ff27 	bl	8016094 <vPortExitCritical>
				return pdPASS;
 8014246:	2301      	movs	r3, #1
 8014248:	e069      	b.n	801431e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d103      	bne.n	8014258 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014250:	f001 ff20 	bl	8016094 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014254:	2300      	movs	r3, #0
 8014256:	e062      	b.n	801431e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801425a:	2b00      	cmp	r3, #0
 801425c:	d106      	bne.n	801426c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801425e:	f107 0310 	add.w	r3, r7, #16
 8014262:	4618      	mov	r0, r3
 8014264:	f000 fff6 	bl	8015254 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014268:	2301      	movs	r3, #1
 801426a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801426c:	f001 ff12 	bl	8016094 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014270:	f000 fcc2 	bl	8014bf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014274:	f001 fede 	bl	8016034 <vPortEnterCritical>
 8014278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801427a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801427e:	b25b      	sxtb	r3, r3
 8014280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014284:	d103      	bne.n	801428e <xQueueReceive+0x122>
 8014286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014288:	2200      	movs	r2, #0
 801428a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014294:	b25b      	sxtb	r3, r3
 8014296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801429a:	d103      	bne.n	80142a4 <xQueueReceive+0x138>
 801429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801429e:	2200      	movs	r2, #0
 80142a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80142a4:	f001 fef6 	bl	8016094 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80142a8:	1d3a      	adds	r2, r7, #4
 80142aa:	f107 0310 	add.w	r3, r7, #16
 80142ae:	4611      	mov	r1, r2
 80142b0:	4618      	mov	r0, r3
 80142b2:	f000 ffe5 	bl	8015280 <xTaskCheckForTimeOut>
 80142b6:	4603      	mov	r3, r0
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d123      	bne.n	8014304 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80142bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142be:	f000 f9d3 	bl	8014668 <prvIsQueueEmpty>
 80142c2:	4603      	mov	r3, r0
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d017      	beq.n	80142f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80142c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ca:	3324      	adds	r3, #36	; 0x24
 80142cc:	687a      	ldr	r2, [r7, #4]
 80142ce:	4611      	mov	r1, r2
 80142d0:	4618      	mov	r0, r3
 80142d2:	f000 fe6d 	bl	8014fb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80142d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142d8:	f000 f974 	bl	80145c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80142dc:	f000 fc9a 	bl	8014c14 <xTaskResumeAll>
 80142e0:	4603      	mov	r3, r0
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d189      	bne.n	80141fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80142e6:	4b10      	ldr	r3, [pc, #64]	; (8014328 <xQueueReceive+0x1bc>)
 80142e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142ec:	601a      	str	r2, [r3, #0]
 80142ee:	f3bf 8f4f 	dsb	sy
 80142f2:	f3bf 8f6f 	isb	sy
 80142f6:	e780      	b.n	80141fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80142f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142fa:	f000 f963 	bl	80145c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80142fe:	f000 fc89 	bl	8014c14 <xTaskResumeAll>
 8014302:	e77a      	b.n	80141fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014306:	f000 f95d 	bl	80145c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801430a:	f000 fc83 	bl	8014c14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801430e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014310:	f000 f9aa 	bl	8014668 <prvIsQueueEmpty>
 8014314:	4603      	mov	r3, r0
 8014316:	2b00      	cmp	r3, #0
 8014318:	f43f af6f 	beq.w	80141fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801431c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801431e:	4618      	mov	r0, r3
 8014320:	3730      	adds	r7, #48	; 0x30
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}
 8014326:	bf00      	nop
 8014328:	e000ed04 	.word	0xe000ed04

0801432c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b08e      	sub	sp, #56	; 0x38
 8014330:	af00      	add	r7, sp, #0
 8014332:	60f8      	str	r0, [r7, #12]
 8014334:	60b9      	str	r1, [r7, #8]
 8014336:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801433e:	2b00      	cmp	r3, #0
 8014340:	d10a      	bne.n	8014358 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014346:	f383 8811 	msr	BASEPRI, r3
 801434a:	f3bf 8f6f 	isb	sy
 801434e:	f3bf 8f4f 	dsb	sy
 8014352:	623b      	str	r3, [r7, #32]
}
 8014354:	bf00      	nop
 8014356:	e7fe      	b.n	8014356 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d103      	bne.n	8014366 <xQueueReceiveFromISR+0x3a>
 801435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014362:	2b00      	cmp	r3, #0
 8014364:	d101      	bne.n	801436a <xQueueReceiveFromISR+0x3e>
 8014366:	2301      	movs	r3, #1
 8014368:	e000      	b.n	801436c <xQueueReceiveFromISR+0x40>
 801436a:	2300      	movs	r3, #0
 801436c:	2b00      	cmp	r3, #0
 801436e:	d10a      	bne.n	8014386 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014374:	f383 8811 	msr	BASEPRI, r3
 8014378:	f3bf 8f6f 	isb	sy
 801437c:	f3bf 8f4f 	dsb	sy
 8014380:	61fb      	str	r3, [r7, #28]
}
 8014382:	bf00      	nop
 8014384:	e7fe      	b.n	8014384 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014386:	f001 ff37 	bl	80161f8 <vPortValidateInterruptPriority>
	__asm volatile
 801438a:	f3ef 8211 	mrs	r2, BASEPRI
 801438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014392:	f383 8811 	msr	BASEPRI, r3
 8014396:	f3bf 8f6f 	isb	sy
 801439a:	f3bf 8f4f 	dsb	sy
 801439e:	61ba      	str	r2, [r7, #24]
 80143a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80143a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80143a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80143a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80143ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d02f      	beq.n	8014412 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80143b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80143b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80143bc:	68b9      	ldr	r1, [r7, #8]
 80143be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80143c0:	f000 f8da 	bl	8014578 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80143c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c6:	1e5a      	subs	r2, r3, #1
 80143c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80143cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80143d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143d4:	d112      	bne.n	80143fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80143d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d8:	691b      	ldr	r3, [r3, #16]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d016      	beq.n	801440c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80143de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e0:	3310      	adds	r3, #16
 80143e2:	4618      	mov	r0, r3
 80143e4:	f000 fe70 	bl	80150c8 <xTaskRemoveFromEventList>
 80143e8:	4603      	mov	r3, r0
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d00e      	beq.n	801440c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d00b      	beq.n	801440c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2201      	movs	r2, #1
 80143f8:	601a      	str	r2, [r3, #0]
 80143fa:	e007      	b.n	801440c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80143fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014400:	3301      	adds	r3, #1
 8014402:	b2db      	uxtb	r3, r3
 8014404:	b25a      	sxtb	r2, r3
 8014406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801440c:	2301      	movs	r3, #1
 801440e:	637b      	str	r3, [r7, #52]	; 0x34
 8014410:	e001      	b.n	8014416 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8014412:	2300      	movs	r3, #0
 8014414:	637b      	str	r3, [r7, #52]	; 0x34
 8014416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014418:	613b      	str	r3, [r7, #16]
	__asm volatile
 801441a:	693b      	ldr	r3, [r7, #16]
 801441c:	f383 8811 	msr	BASEPRI, r3
}
 8014420:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014424:	4618      	mov	r0, r3
 8014426:	3738      	adds	r7, #56	; 0x38
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b084      	sub	sp, #16
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d10a      	bne.n	8014450 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 801443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801443e:	f383 8811 	msr	BASEPRI, r3
 8014442:	f3bf 8f6f 	isb	sy
 8014446:	f3bf 8f4f 	dsb	sy
 801444a:	60bb      	str	r3, [r7, #8]
}
 801444c:	bf00      	nop
 801444e:	e7fe      	b.n	801444e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8014450:	f001 fdf0 	bl	8016034 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014458:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801445a:	f001 fe1b 	bl	8016094 <vPortExitCritical>

	return uxReturn;
 801445e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014460:	4618      	mov	r0, r3
 8014462:	3710      	adds	r7, #16
 8014464:	46bd      	mov	sp, r7
 8014466:	bd80      	pop	{r7, pc}

08014468 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8014468:	b480      	push	{r7}
 801446a:	b087      	sub	sp, #28
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8014474:	697b      	ldr	r3, [r7, #20]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d10a      	bne.n	8014490 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801447e:	f383 8811 	msr	BASEPRI, r3
 8014482:	f3bf 8f6f 	isb	sy
 8014486:	f3bf 8f4f 	dsb	sy
 801448a:	60fb      	str	r3, [r7, #12]
}
 801448c:	bf00      	nop
 801448e:	e7fe      	b.n	801448e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8014490:	697b      	ldr	r3, [r7, #20]
 8014492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014494:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8014496:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014498:	4618      	mov	r0, r3
 801449a:	371c      	adds	r7, #28
 801449c:	46bd      	mov	sp, r7
 801449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a2:	4770      	bx	lr

080144a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b086      	sub	sp, #24
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	60f8      	str	r0, [r7, #12]
 80144ac:	60b9      	str	r1, [r7, #8]
 80144ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80144b0:	2300      	movs	r3, #0
 80144b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80144b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d10d      	bne.n	80144de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d14d      	bne.n	8014566 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	689b      	ldr	r3, [r3, #8]
 80144ce:	4618      	mov	r0, r3
 80144d0:	f001 f838 	bl	8015544 <xTaskPriorityDisinherit>
 80144d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	2200      	movs	r2, #0
 80144da:	609a      	str	r2, [r3, #8]
 80144dc:	e043      	b.n	8014566 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d119      	bne.n	8014518 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80144e4:	68fb      	ldr	r3, [r7, #12]
 80144e6:	6858      	ldr	r0, [r3, #4]
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144ec:	461a      	mov	r2, r3
 80144ee:	68b9      	ldr	r1, [r7, #8]
 80144f0:	f002 f8e6 	bl	80166c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	685a      	ldr	r2, [r3, #4]
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144fc:	441a      	add	r2, r3
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	685a      	ldr	r2, [r3, #4]
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	689b      	ldr	r3, [r3, #8]
 801450a:	429a      	cmp	r2, r3
 801450c:	d32b      	bcc.n	8014566 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	681a      	ldr	r2, [r3, #0]
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	605a      	str	r2, [r3, #4]
 8014516:	e026      	b.n	8014566 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	68d8      	ldr	r0, [r3, #12]
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014520:	461a      	mov	r2, r3
 8014522:	68b9      	ldr	r1, [r7, #8]
 8014524:	f002 f8cc 	bl	80166c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	68da      	ldr	r2, [r3, #12]
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014530:	425b      	negs	r3, r3
 8014532:	441a      	add	r2, r3
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	68da      	ldr	r2, [r3, #12]
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	429a      	cmp	r2, r3
 8014542:	d207      	bcs.n	8014554 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	689a      	ldr	r2, [r3, #8]
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801454c:	425b      	negs	r3, r3
 801454e:	441a      	add	r2, r3
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	2b02      	cmp	r3, #2
 8014558:	d105      	bne.n	8014566 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801455a:	693b      	ldr	r3, [r7, #16]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d002      	beq.n	8014566 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014560:	693b      	ldr	r3, [r7, #16]
 8014562:	3b01      	subs	r3, #1
 8014564:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014566:	693b      	ldr	r3, [r7, #16]
 8014568:	1c5a      	adds	r2, r3, #1
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801456e:	697b      	ldr	r3, [r7, #20]
}
 8014570:	4618      	mov	r0, r3
 8014572:	3718      	adds	r7, #24
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014586:	2b00      	cmp	r3, #0
 8014588:	d018      	beq.n	80145bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	68da      	ldr	r2, [r3, #12]
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014592:	441a      	add	r2, r3
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	68da      	ldr	r2, [r3, #12]
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	689b      	ldr	r3, [r3, #8]
 80145a0:	429a      	cmp	r2, r3
 80145a2:	d303      	bcc.n	80145ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	681a      	ldr	r2, [r3, #0]
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	68d9      	ldr	r1, [r3, #12]
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145b4:	461a      	mov	r2, r3
 80145b6:	6838      	ldr	r0, [r7, #0]
 80145b8:	f002 f882 	bl	80166c0 <memcpy>
	}
}
 80145bc:	bf00      	nop
 80145be:	3708      	adds	r7, #8
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}

080145c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b084      	sub	sp, #16
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80145cc:	f001 fd32 	bl	8016034 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80145d8:	e011      	b.n	80145fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d012      	beq.n	8014608 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	3324      	adds	r3, #36	; 0x24
 80145e6:	4618      	mov	r0, r3
 80145e8:	f000 fd6e 	bl	80150c8 <xTaskRemoveFromEventList>
 80145ec:	4603      	mov	r3, r0
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d001      	beq.n	80145f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80145f2:	f000 fea7 	bl	8015344 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80145f6:	7bfb      	ldrb	r3, [r7, #15]
 80145f8:	3b01      	subs	r3, #1
 80145fa:	b2db      	uxtb	r3, r3
 80145fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80145fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014602:	2b00      	cmp	r3, #0
 8014604:	dce9      	bgt.n	80145da <prvUnlockQueue+0x16>
 8014606:	e000      	b.n	801460a <prvUnlockQueue+0x46>
					break;
 8014608:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	22ff      	movs	r2, #255	; 0xff
 801460e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014612:	f001 fd3f 	bl	8016094 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014616:	f001 fd0d 	bl	8016034 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014620:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014622:	e011      	b.n	8014648 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	691b      	ldr	r3, [r3, #16]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d012      	beq.n	8014652 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	3310      	adds	r3, #16
 8014630:	4618      	mov	r0, r3
 8014632:	f000 fd49 	bl	80150c8 <xTaskRemoveFromEventList>
 8014636:	4603      	mov	r3, r0
 8014638:	2b00      	cmp	r3, #0
 801463a:	d001      	beq.n	8014640 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801463c:	f000 fe82 	bl	8015344 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014640:	7bbb      	ldrb	r3, [r7, #14]
 8014642:	3b01      	subs	r3, #1
 8014644:	b2db      	uxtb	r3, r3
 8014646:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801464c:	2b00      	cmp	r3, #0
 801464e:	dce9      	bgt.n	8014624 <prvUnlockQueue+0x60>
 8014650:	e000      	b.n	8014654 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014652:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	22ff      	movs	r2, #255	; 0xff
 8014658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801465c:	f001 fd1a 	bl	8016094 <vPortExitCritical>
}
 8014660:	bf00      	nop
 8014662:	3710      	adds	r7, #16
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}

08014668 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b084      	sub	sp, #16
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014670:	f001 fce0 	bl	8016034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014678:	2b00      	cmp	r3, #0
 801467a:	d102      	bne.n	8014682 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801467c:	2301      	movs	r3, #1
 801467e:	60fb      	str	r3, [r7, #12]
 8014680:	e001      	b.n	8014686 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014682:	2300      	movs	r3, #0
 8014684:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014686:	f001 fd05 	bl	8016094 <vPortExitCritical>

	return xReturn;
 801468a:	68fb      	ldr	r3, [r7, #12]
}
 801468c:	4618      	mov	r0, r3
 801468e:	3710      	adds	r7, #16
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}

08014694 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b084      	sub	sp, #16
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801469c:	f001 fcca 	bl	8016034 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d102      	bne.n	80146b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80146ac:	2301      	movs	r3, #1
 80146ae:	60fb      	str	r3, [r7, #12]
 80146b0:	e001      	b.n	80146b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80146b2:	2300      	movs	r3, #0
 80146b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80146b6:	f001 fced 	bl	8016094 <vPortExitCritical>

	return xReturn;
 80146ba:	68fb      	ldr	r3, [r7, #12]
}
 80146bc:	4618      	mov	r0, r3
 80146be:	3710      	adds	r7, #16
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}

080146c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80146c4:	b480      	push	{r7}
 80146c6:	b085      	sub	sp, #20
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	6078      	str	r0, [r7, #4]
 80146cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80146ce:	2300      	movs	r3, #0
 80146d0:	60fb      	str	r3, [r7, #12]
 80146d2:	e014      	b.n	80146fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80146d4:	4a0f      	ldr	r2, [pc, #60]	; (8014714 <vQueueAddToRegistry+0x50>)
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d10b      	bne.n	80146f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80146e0:	490c      	ldr	r1, [pc, #48]	; (8014714 <vQueueAddToRegistry+0x50>)
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	683a      	ldr	r2, [r7, #0]
 80146e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80146ea:	4a0a      	ldr	r2, [pc, #40]	; (8014714 <vQueueAddToRegistry+0x50>)
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	00db      	lsls	r3, r3, #3
 80146f0:	4413      	add	r3, r2
 80146f2:	687a      	ldr	r2, [r7, #4]
 80146f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80146f6:	e006      	b.n	8014706 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	3301      	adds	r3, #1
 80146fc:	60fb      	str	r3, [r7, #12]
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	2b07      	cmp	r3, #7
 8014702:	d9e7      	bls.n	80146d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014704:	bf00      	nop
 8014706:	bf00      	nop
 8014708:	3714      	adds	r7, #20
 801470a:	46bd      	mov	sp, r7
 801470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014710:	4770      	bx	lr
 8014712:	bf00      	nop
 8014714:	2400136c 	.word	0x2400136c

08014718 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014718:	b580      	push	{r7, lr}
 801471a:	b086      	sub	sp, #24
 801471c:	af00      	add	r7, sp, #0
 801471e:	60f8      	str	r0, [r7, #12]
 8014720:	60b9      	str	r1, [r7, #8]
 8014722:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014728:	f001 fc84 	bl	8016034 <vPortEnterCritical>
 801472c:	697b      	ldr	r3, [r7, #20]
 801472e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014732:	b25b      	sxtb	r3, r3
 8014734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014738:	d103      	bne.n	8014742 <vQueueWaitForMessageRestricted+0x2a>
 801473a:	697b      	ldr	r3, [r7, #20]
 801473c:	2200      	movs	r2, #0
 801473e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014742:	697b      	ldr	r3, [r7, #20]
 8014744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014748:	b25b      	sxtb	r3, r3
 801474a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801474e:	d103      	bne.n	8014758 <vQueueWaitForMessageRestricted+0x40>
 8014750:	697b      	ldr	r3, [r7, #20]
 8014752:	2200      	movs	r2, #0
 8014754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014758:	f001 fc9c 	bl	8016094 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801475c:	697b      	ldr	r3, [r7, #20]
 801475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014760:	2b00      	cmp	r3, #0
 8014762:	d106      	bne.n	8014772 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014764:	697b      	ldr	r3, [r7, #20]
 8014766:	3324      	adds	r3, #36	; 0x24
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	68b9      	ldr	r1, [r7, #8]
 801476c:	4618      	mov	r0, r3
 801476e:	f000 fc7f 	bl	8015070 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014772:	6978      	ldr	r0, [r7, #20]
 8014774:	f7ff ff26 	bl	80145c4 <prvUnlockQueue>
	}
 8014778:	bf00      	nop
 801477a:	3718      	adds	r7, #24
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}

08014780 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014780:	b580      	push	{r7, lr}
 8014782:	b08e      	sub	sp, #56	; 0x38
 8014784:	af04      	add	r7, sp, #16
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
 801478c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801478e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014790:	2b00      	cmp	r3, #0
 8014792:	d10a      	bne.n	80147aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8014794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014798:	f383 8811 	msr	BASEPRI, r3
 801479c:	f3bf 8f6f 	isb	sy
 80147a0:	f3bf 8f4f 	dsb	sy
 80147a4:	623b      	str	r3, [r7, #32]
}
 80147a6:	bf00      	nop
 80147a8:	e7fe      	b.n	80147a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80147aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d10a      	bne.n	80147c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80147b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147b4:	f383 8811 	msr	BASEPRI, r3
 80147b8:	f3bf 8f6f 	isb	sy
 80147bc:	f3bf 8f4f 	dsb	sy
 80147c0:	61fb      	str	r3, [r7, #28]
}
 80147c2:	bf00      	nop
 80147c4:	e7fe      	b.n	80147c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80147c6:	235c      	movs	r3, #92	; 0x5c
 80147c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	2b5c      	cmp	r3, #92	; 0x5c
 80147ce:	d00a      	beq.n	80147e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80147d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147d4:	f383 8811 	msr	BASEPRI, r3
 80147d8:	f3bf 8f6f 	isb	sy
 80147dc:	f3bf 8f4f 	dsb	sy
 80147e0:	61bb      	str	r3, [r7, #24]
}
 80147e2:	bf00      	nop
 80147e4:	e7fe      	b.n	80147e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80147e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80147e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d01e      	beq.n	801482c <xTaskCreateStatic+0xac>
 80147ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d01b      	beq.n	801482c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80147f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80147f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80147fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80147fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014800:	2202      	movs	r2, #2
 8014802:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014806:	2300      	movs	r3, #0
 8014808:	9303      	str	r3, [sp, #12]
 801480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480c:	9302      	str	r3, [sp, #8]
 801480e:	f107 0314 	add.w	r3, r7, #20
 8014812:	9301      	str	r3, [sp, #4]
 8014814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014816:	9300      	str	r3, [sp, #0]
 8014818:	683b      	ldr	r3, [r7, #0]
 801481a:	687a      	ldr	r2, [r7, #4]
 801481c:	68b9      	ldr	r1, [r7, #8]
 801481e:	68f8      	ldr	r0, [r7, #12]
 8014820:	f000 f850 	bl	80148c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014826:	f000 f8dd 	bl	80149e4 <prvAddNewTaskToReadyList>
 801482a:	e001      	b.n	8014830 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801482c:	2300      	movs	r3, #0
 801482e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014830:	697b      	ldr	r3, [r7, #20]
	}
 8014832:	4618      	mov	r0, r3
 8014834:	3728      	adds	r7, #40	; 0x28
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}

0801483a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801483a:	b580      	push	{r7, lr}
 801483c:	b08c      	sub	sp, #48	; 0x30
 801483e:	af04      	add	r7, sp, #16
 8014840:	60f8      	str	r0, [r7, #12]
 8014842:	60b9      	str	r1, [r7, #8]
 8014844:	603b      	str	r3, [r7, #0]
 8014846:	4613      	mov	r3, r2
 8014848:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801484a:	88fb      	ldrh	r3, [r7, #6]
 801484c:	009b      	lsls	r3, r3, #2
 801484e:	4618      	mov	r0, r3
 8014850:	f001 fd12 	bl	8016278 <pvPortMalloc>
 8014854:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014856:	697b      	ldr	r3, [r7, #20]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d00e      	beq.n	801487a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801485c:	205c      	movs	r0, #92	; 0x5c
 801485e:	f001 fd0b 	bl	8016278 <pvPortMalloc>
 8014862:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014864:	69fb      	ldr	r3, [r7, #28]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d003      	beq.n	8014872 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801486a:	69fb      	ldr	r3, [r7, #28]
 801486c:	697a      	ldr	r2, [r7, #20]
 801486e:	631a      	str	r2, [r3, #48]	; 0x30
 8014870:	e005      	b.n	801487e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014872:	6978      	ldr	r0, [r7, #20]
 8014874:	f001 fdcc 	bl	8016410 <vPortFree>
 8014878:	e001      	b.n	801487e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801487a:	2300      	movs	r3, #0
 801487c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801487e:	69fb      	ldr	r3, [r7, #28]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d017      	beq.n	80148b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	2200      	movs	r2, #0
 8014888:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801488c:	88fa      	ldrh	r2, [r7, #6]
 801488e:	2300      	movs	r3, #0
 8014890:	9303      	str	r3, [sp, #12]
 8014892:	69fb      	ldr	r3, [r7, #28]
 8014894:	9302      	str	r3, [sp, #8]
 8014896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014898:	9301      	str	r3, [sp, #4]
 801489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801489c:	9300      	str	r3, [sp, #0]
 801489e:	683b      	ldr	r3, [r7, #0]
 80148a0:	68b9      	ldr	r1, [r7, #8]
 80148a2:	68f8      	ldr	r0, [r7, #12]
 80148a4:	f000 f80e 	bl	80148c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80148a8:	69f8      	ldr	r0, [r7, #28]
 80148aa:	f000 f89b 	bl	80149e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80148ae:	2301      	movs	r3, #1
 80148b0:	61bb      	str	r3, [r7, #24]
 80148b2:	e002      	b.n	80148ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80148b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80148b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80148ba:	69bb      	ldr	r3, [r7, #24]
	}
 80148bc:	4618      	mov	r0, r3
 80148be:	3720      	adds	r7, #32
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd80      	pop	{r7, pc}

080148c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b088      	sub	sp, #32
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	60f8      	str	r0, [r7, #12]
 80148cc:	60b9      	str	r1, [r7, #8]
 80148ce:	607a      	str	r2, [r7, #4]
 80148d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80148d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	009b      	lsls	r3, r3, #2
 80148da:	461a      	mov	r2, r3
 80148dc:	21a5      	movs	r1, #165	; 0xa5
 80148de:	f001 fefd 	bl	80166dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80148e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80148e6:	6879      	ldr	r1, [r7, #4]
 80148e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80148ec:	440b      	add	r3, r1
 80148ee:	009b      	lsls	r3, r3, #2
 80148f0:	4413      	add	r3, r2
 80148f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80148f4:	69bb      	ldr	r3, [r7, #24]
 80148f6:	f023 0307 	bic.w	r3, r3, #7
 80148fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80148fc:	69bb      	ldr	r3, [r7, #24]
 80148fe:	f003 0307 	and.w	r3, r3, #7
 8014902:	2b00      	cmp	r3, #0
 8014904:	d00a      	beq.n	801491c <prvInitialiseNewTask+0x58>
	__asm volatile
 8014906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801490a:	f383 8811 	msr	BASEPRI, r3
 801490e:	f3bf 8f6f 	isb	sy
 8014912:	f3bf 8f4f 	dsb	sy
 8014916:	617b      	str	r3, [r7, #20]
}
 8014918:	bf00      	nop
 801491a:	e7fe      	b.n	801491a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d01f      	beq.n	8014962 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014922:	2300      	movs	r3, #0
 8014924:	61fb      	str	r3, [r7, #28]
 8014926:	e012      	b.n	801494e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014928:	68ba      	ldr	r2, [r7, #8]
 801492a:	69fb      	ldr	r3, [r7, #28]
 801492c:	4413      	add	r3, r2
 801492e:	7819      	ldrb	r1, [r3, #0]
 8014930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014932:	69fb      	ldr	r3, [r7, #28]
 8014934:	4413      	add	r3, r2
 8014936:	3334      	adds	r3, #52	; 0x34
 8014938:	460a      	mov	r2, r1
 801493a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801493c:	68ba      	ldr	r2, [r7, #8]
 801493e:	69fb      	ldr	r3, [r7, #28]
 8014940:	4413      	add	r3, r2
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d006      	beq.n	8014956 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014948:	69fb      	ldr	r3, [r7, #28]
 801494a:	3301      	adds	r3, #1
 801494c:	61fb      	str	r3, [r7, #28]
 801494e:	69fb      	ldr	r3, [r7, #28]
 8014950:	2b0f      	cmp	r3, #15
 8014952:	d9e9      	bls.n	8014928 <prvInitialiseNewTask+0x64>
 8014954:	e000      	b.n	8014958 <prvInitialiseNewTask+0x94>
			{
				break;
 8014956:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801495a:	2200      	movs	r2, #0
 801495c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014960:	e003      	b.n	801496a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014964:	2200      	movs	r2, #0
 8014966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801496c:	2b37      	cmp	r3, #55	; 0x37
 801496e:	d901      	bls.n	8014974 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014970:	2337      	movs	r3, #55	; 0x37
 8014972:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014978:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801497c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801497e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014982:	2200      	movs	r2, #0
 8014984:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014988:	3304      	adds	r3, #4
 801498a:	4618      	mov	r0, r3
 801498c:	f7ff f882 	bl	8013a94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014992:	3318      	adds	r3, #24
 8014994:	4618      	mov	r0, r3
 8014996:	f7ff f87d 	bl	8013a94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801499c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801499e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80149a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80149aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80149b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149b2:	2200      	movs	r2, #0
 80149b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80149b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149b8:	2200      	movs	r2, #0
 80149ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80149be:	683a      	ldr	r2, [r7, #0]
 80149c0:	68f9      	ldr	r1, [r7, #12]
 80149c2:	69b8      	ldr	r0, [r7, #24]
 80149c4:	f001 fa06 	bl	8015dd4 <pxPortInitialiseStack>
 80149c8:	4602      	mov	r2, r0
 80149ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80149ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d002      	beq.n	80149da <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80149d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80149da:	bf00      	nop
 80149dc:	3720      	adds	r7, #32
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
	...

080149e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b082      	sub	sp, #8
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80149ec:	f001 fb22 	bl	8016034 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80149f0:	4b2d      	ldr	r3, [pc, #180]	; (8014aa8 <prvAddNewTaskToReadyList+0xc4>)
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	3301      	adds	r3, #1
 80149f6:	4a2c      	ldr	r2, [pc, #176]	; (8014aa8 <prvAddNewTaskToReadyList+0xc4>)
 80149f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80149fa:	4b2c      	ldr	r3, [pc, #176]	; (8014aac <prvAddNewTaskToReadyList+0xc8>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d109      	bne.n	8014a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014a02:	4a2a      	ldr	r2, [pc, #168]	; (8014aac <prvAddNewTaskToReadyList+0xc8>)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014a08:	4b27      	ldr	r3, [pc, #156]	; (8014aa8 <prvAddNewTaskToReadyList+0xc4>)
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	2b01      	cmp	r3, #1
 8014a0e:	d110      	bne.n	8014a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014a10:	f000 fcbc 	bl	801538c <prvInitialiseTaskLists>
 8014a14:	e00d      	b.n	8014a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014a16:	4b26      	ldr	r3, [pc, #152]	; (8014ab0 <prvAddNewTaskToReadyList+0xcc>)
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d109      	bne.n	8014a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014a1e:	4b23      	ldr	r3, [pc, #140]	; (8014aac <prvAddNewTaskToReadyList+0xc8>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d802      	bhi.n	8014a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014a2c:	4a1f      	ldr	r2, [pc, #124]	; (8014aac <prvAddNewTaskToReadyList+0xc8>)
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014a32:	4b20      	ldr	r3, [pc, #128]	; (8014ab4 <prvAddNewTaskToReadyList+0xd0>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	3301      	adds	r3, #1
 8014a38:	4a1e      	ldr	r2, [pc, #120]	; (8014ab4 <prvAddNewTaskToReadyList+0xd0>)
 8014a3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014a3c:	4b1d      	ldr	r3, [pc, #116]	; (8014ab4 <prvAddNewTaskToReadyList+0xd0>)
 8014a3e:	681a      	ldr	r2, [r3, #0]
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a48:	4b1b      	ldr	r3, [pc, #108]	; (8014ab8 <prvAddNewTaskToReadyList+0xd4>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	429a      	cmp	r2, r3
 8014a4e:	d903      	bls.n	8014a58 <prvAddNewTaskToReadyList+0x74>
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a54:	4a18      	ldr	r2, [pc, #96]	; (8014ab8 <prvAddNewTaskToReadyList+0xd4>)
 8014a56:	6013      	str	r3, [r2, #0]
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a5c:	4613      	mov	r3, r2
 8014a5e:	009b      	lsls	r3, r3, #2
 8014a60:	4413      	add	r3, r2
 8014a62:	009b      	lsls	r3, r3, #2
 8014a64:	4a15      	ldr	r2, [pc, #84]	; (8014abc <prvAddNewTaskToReadyList+0xd8>)
 8014a66:	441a      	add	r2, r3
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	3304      	adds	r3, #4
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	4610      	mov	r0, r2
 8014a70:	f7ff f81d 	bl	8013aae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014a74:	f001 fb0e 	bl	8016094 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014a78:	4b0d      	ldr	r3, [pc, #52]	; (8014ab0 <prvAddNewTaskToReadyList+0xcc>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d00e      	beq.n	8014a9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014a80:	4b0a      	ldr	r3, [pc, #40]	; (8014aac <prvAddNewTaskToReadyList+0xc8>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	d207      	bcs.n	8014a9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014a8e:	4b0c      	ldr	r3, [pc, #48]	; (8014ac0 <prvAddNewTaskToReadyList+0xdc>)
 8014a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a94:	601a      	str	r2, [r3, #0]
 8014a96:	f3bf 8f4f 	dsb	sy
 8014a9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014a9e:	bf00      	nop
 8014aa0:	3708      	adds	r7, #8
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	bd80      	pop	{r7, pc}
 8014aa6:	bf00      	nop
 8014aa8:	24001880 	.word	0x24001880
 8014aac:	240013ac 	.word	0x240013ac
 8014ab0:	2400188c 	.word	0x2400188c
 8014ab4:	2400189c 	.word	0x2400189c
 8014ab8:	24001888 	.word	0x24001888
 8014abc:	240013b0 	.word	0x240013b0
 8014ac0:	e000ed04 	.word	0xe000ed04

08014ac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b084      	sub	sp, #16
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014acc:	2300      	movs	r3, #0
 8014ace:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d017      	beq.n	8014b06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014ad6:	4b13      	ldr	r3, [pc, #76]	; (8014b24 <vTaskDelay+0x60>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d00a      	beq.n	8014af4 <vTaskDelay+0x30>
	__asm volatile
 8014ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ae2:	f383 8811 	msr	BASEPRI, r3
 8014ae6:	f3bf 8f6f 	isb	sy
 8014aea:	f3bf 8f4f 	dsb	sy
 8014aee:	60bb      	str	r3, [r7, #8]
}
 8014af0:	bf00      	nop
 8014af2:	e7fe      	b.n	8014af2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014af4:	f000 f880 	bl	8014bf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014af8:	2100      	movs	r1, #0
 8014afa:	6878      	ldr	r0, [r7, #4]
 8014afc:	f000 fda8 	bl	8015650 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014b00:	f000 f888 	bl	8014c14 <xTaskResumeAll>
 8014b04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d107      	bne.n	8014b1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014b0c:	4b06      	ldr	r3, [pc, #24]	; (8014b28 <vTaskDelay+0x64>)
 8014b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b12:	601a      	str	r2, [r3, #0]
 8014b14:	f3bf 8f4f 	dsb	sy
 8014b18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014b1c:	bf00      	nop
 8014b1e:	3710      	adds	r7, #16
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}
 8014b24:	240018a8 	.word	0x240018a8
 8014b28:	e000ed04 	.word	0xe000ed04

08014b2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b08a      	sub	sp, #40	; 0x28
 8014b30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014b32:	2300      	movs	r3, #0
 8014b34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014b36:	2300      	movs	r3, #0
 8014b38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014b3a:	463a      	mov	r2, r7
 8014b3c:	1d39      	adds	r1, r7, #4
 8014b3e:	f107 0308 	add.w	r3, r7, #8
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7fe fd64 	bl	8013610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014b48:	6839      	ldr	r1, [r7, #0]
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	68ba      	ldr	r2, [r7, #8]
 8014b4e:	9202      	str	r2, [sp, #8]
 8014b50:	9301      	str	r3, [sp, #4]
 8014b52:	2300      	movs	r3, #0
 8014b54:	9300      	str	r3, [sp, #0]
 8014b56:	2300      	movs	r3, #0
 8014b58:	460a      	mov	r2, r1
 8014b5a:	4921      	ldr	r1, [pc, #132]	; (8014be0 <vTaskStartScheduler+0xb4>)
 8014b5c:	4821      	ldr	r0, [pc, #132]	; (8014be4 <vTaskStartScheduler+0xb8>)
 8014b5e:	f7ff fe0f 	bl	8014780 <xTaskCreateStatic>
 8014b62:	4603      	mov	r3, r0
 8014b64:	4a20      	ldr	r2, [pc, #128]	; (8014be8 <vTaskStartScheduler+0xbc>)
 8014b66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014b68:	4b1f      	ldr	r3, [pc, #124]	; (8014be8 <vTaskStartScheduler+0xbc>)
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d002      	beq.n	8014b76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014b70:	2301      	movs	r3, #1
 8014b72:	617b      	str	r3, [r7, #20]
 8014b74:	e001      	b.n	8014b7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014b76:	2300      	movs	r3, #0
 8014b78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014b7a:	697b      	ldr	r3, [r7, #20]
 8014b7c:	2b01      	cmp	r3, #1
 8014b7e:	d102      	bne.n	8014b86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014b80:	f000 fdba 	bl	80156f8 <xTimerCreateTimerTask>
 8014b84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	2b01      	cmp	r3, #1
 8014b8a:	d116      	bne.n	8014bba <vTaskStartScheduler+0x8e>
	__asm volatile
 8014b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b90:	f383 8811 	msr	BASEPRI, r3
 8014b94:	f3bf 8f6f 	isb	sy
 8014b98:	f3bf 8f4f 	dsb	sy
 8014b9c:	613b      	str	r3, [r7, #16]
}
 8014b9e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014ba0:	4b12      	ldr	r3, [pc, #72]	; (8014bec <vTaskStartScheduler+0xc0>)
 8014ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ba6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014ba8:	4b11      	ldr	r3, [pc, #68]	; (8014bf0 <vTaskStartScheduler+0xc4>)
 8014baa:	2201      	movs	r2, #1
 8014bac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014bae:	4b11      	ldr	r3, [pc, #68]	; (8014bf4 <vTaskStartScheduler+0xc8>)
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014bb4:	f001 f99c 	bl	8015ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014bb8:	e00e      	b.n	8014bd8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014bba:	697b      	ldr	r3, [r7, #20]
 8014bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014bc0:	d10a      	bne.n	8014bd8 <vTaskStartScheduler+0xac>
	__asm volatile
 8014bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bc6:	f383 8811 	msr	BASEPRI, r3
 8014bca:	f3bf 8f6f 	isb	sy
 8014bce:	f3bf 8f4f 	dsb	sy
 8014bd2:	60fb      	str	r3, [r7, #12]
}
 8014bd4:	bf00      	nop
 8014bd6:	e7fe      	b.n	8014bd6 <vTaskStartScheduler+0xaa>
}
 8014bd8:	bf00      	nop
 8014bda:	3718      	adds	r7, #24
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}
 8014be0:	08017360 	.word	0x08017360
 8014be4:	0801535d 	.word	0x0801535d
 8014be8:	240018a4 	.word	0x240018a4
 8014bec:	240018a0 	.word	0x240018a0
 8014bf0:	2400188c 	.word	0x2400188c
 8014bf4:	24001884 	.word	0x24001884

08014bf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014bf8:	b480      	push	{r7}
 8014bfa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014bfc:	4b04      	ldr	r3, [pc, #16]	; (8014c10 <vTaskSuspendAll+0x18>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	3301      	adds	r3, #1
 8014c02:	4a03      	ldr	r2, [pc, #12]	; (8014c10 <vTaskSuspendAll+0x18>)
 8014c04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014c06:	bf00      	nop
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0e:	4770      	bx	lr
 8014c10:	240018a8 	.word	0x240018a8

08014c14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b084      	sub	sp, #16
 8014c18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014c22:	4b42      	ldr	r3, [pc, #264]	; (8014d2c <xTaskResumeAll+0x118>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d10a      	bne.n	8014c40 <xTaskResumeAll+0x2c>
	__asm volatile
 8014c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c2e:	f383 8811 	msr	BASEPRI, r3
 8014c32:	f3bf 8f6f 	isb	sy
 8014c36:	f3bf 8f4f 	dsb	sy
 8014c3a:	603b      	str	r3, [r7, #0]
}
 8014c3c:	bf00      	nop
 8014c3e:	e7fe      	b.n	8014c3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014c40:	f001 f9f8 	bl	8016034 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014c44:	4b39      	ldr	r3, [pc, #228]	; (8014d2c <xTaskResumeAll+0x118>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	3b01      	subs	r3, #1
 8014c4a:	4a38      	ldr	r2, [pc, #224]	; (8014d2c <xTaskResumeAll+0x118>)
 8014c4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c4e:	4b37      	ldr	r3, [pc, #220]	; (8014d2c <xTaskResumeAll+0x118>)
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d162      	bne.n	8014d1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014c56:	4b36      	ldr	r3, [pc, #216]	; (8014d30 <xTaskResumeAll+0x11c>)
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d05e      	beq.n	8014d1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014c5e:	e02f      	b.n	8014cc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c60:	4b34      	ldr	r3, [pc, #208]	; (8014d34 <xTaskResumeAll+0x120>)
 8014c62:	68db      	ldr	r3, [r3, #12]
 8014c64:	68db      	ldr	r3, [r3, #12]
 8014c66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	3318      	adds	r3, #24
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	f7fe ff7b 	bl	8013b68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	3304      	adds	r3, #4
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7fe ff76 	bl	8013b68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c80:	4b2d      	ldr	r3, [pc, #180]	; (8014d38 <xTaskResumeAll+0x124>)
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	429a      	cmp	r2, r3
 8014c86:	d903      	bls.n	8014c90 <xTaskResumeAll+0x7c>
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c8c:	4a2a      	ldr	r2, [pc, #168]	; (8014d38 <xTaskResumeAll+0x124>)
 8014c8e:	6013      	str	r3, [r2, #0]
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c94:	4613      	mov	r3, r2
 8014c96:	009b      	lsls	r3, r3, #2
 8014c98:	4413      	add	r3, r2
 8014c9a:	009b      	lsls	r3, r3, #2
 8014c9c:	4a27      	ldr	r2, [pc, #156]	; (8014d3c <xTaskResumeAll+0x128>)
 8014c9e:	441a      	add	r2, r3
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	3304      	adds	r3, #4
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	4610      	mov	r0, r2
 8014ca8:	f7fe ff01 	bl	8013aae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cb0:	4b23      	ldr	r3, [pc, #140]	; (8014d40 <xTaskResumeAll+0x12c>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cb6:	429a      	cmp	r2, r3
 8014cb8:	d302      	bcc.n	8014cc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014cba:	4b22      	ldr	r3, [pc, #136]	; (8014d44 <xTaskResumeAll+0x130>)
 8014cbc:	2201      	movs	r2, #1
 8014cbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014cc0:	4b1c      	ldr	r3, [pc, #112]	; (8014d34 <xTaskResumeAll+0x120>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d1cb      	bne.n	8014c60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d001      	beq.n	8014cd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014cce:	f000 fbfb 	bl	80154c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014cd2:	4b1d      	ldr	r3, [pc, #116]	; (8014d48 <xTaskResumeAll+0x134>)
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d010      	beq.n	8014d00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014cde:	f000 f847 	bl	8014d70 <xTaskIncrementTick>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d002      	beq.n	8014cee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014ce8:	4b16      	ldr	r3, [pc, #88]	; (8014d44 <xTaskResumeAll+0x130>)
 8014cea:	2201      	movs	r2, #1
 8014cec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	3b01      	subs	r3, #1
 8014cf2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d1f1      	bne.n	8014cde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014cfa:	4b13      	ldr	r3, [pc, #76]	; (8014d48 <xTaskResumeAll+0x134>)
 8014cfc:	2200      	movs	r2, #0
 8014cfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014d00:	4b10      	ldr	r3, [pc, #64]	; (8014d44 <xTaskResumeAll+0x130>)
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d009      	beq.n	8014d1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014d08:	2301      	movs	r3, #1
 8014d0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014d0c:	4b0f      	ldr	r3, [pc, #60]	; (8014d4c <xTaskResumeAll+0x138>)
 8014d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d12:	601a      	str	r2, [r3, #0]
 8014d14:	f3bf 8f4f 	dsb	sy
 8014d18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014d1c:	f001 f9ba 	bl	8016094 <vPortExitCritical>

	return xAlreadyYielded;
 8014d20:	68bb      	ldr	r3, [r7, #8]
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3710      	adds	r7, #16
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
 8014d2a:	bf00      	nop
 8014d2c:	240018a8 	.word	0x240018a8
 8014d30:	24001880 	.word	0x24001880
 8014d34:	24001840 	.word	0x24001840
 8014d38:	24001888 	.word	0x24001888
 8014d3c:	240013b0 	.word	0x240013b0
 8014d40:	240013ac 	.word	0x240013ac
 8014d44:	24001894 	.word	0x24001894
 8014d48:	24001890 	.word	0x24001890
 8014d4c:	e000ed04 	.word	0xe000ed04

08014d50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014d50:	b480      	push	{r7}
 8014d52:	b083      	sub	sp, #12
 8014d54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014d56:	4b05      	ldr	r3, [pc, #20]	; (8014d6c <xTaskGetTickCount+0x1c>)
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014d5c:	687b      	ldr	r3, [r7, #4]
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	370c      	adds	r7, #12
 8014d62:	46bd      	mov	sp, r7
 8014d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d68:	4770      	bx	lr
 8014d6a:	bf00      	nop
 8014d6c:	24001884 	.word	0x24001884

08014d70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b086      	sub	sp, #24
 8014d74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014d76:	2300      	movs	r3, #0
 8014d78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d7a:	4b53      	ldr	r3, [pc, #332]	; (8014ec8 <xTaskIncrementTick+0x158>)
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	f040 8095 	bne.w	8014eae <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014d84:	4b51      	ldr	r3, [pc, #324]	; (8014ecc <xTaskIncrementTick+0x15c>)
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	3301      	adds	r3, #1
 8014d8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014d8c:	4a4f      	ldr	r2, [pc, #316]	; (8014ecc <xTaskIncrementTick+0x15c>)
 8014d8e:	693b      	ldr	r3, [r7, #16]
 8014d90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d120      	bne.n	8014dda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014d98:	4b4d      	ldr	r3, [pc, #308]	; (8014ed0 <xTaskIncrementTick+0x160>)
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d00a      	beq.n	8014db8 <xTaskIncrementTick+0x48>
	__asm volatile
 8014da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014da6:	f383 8811 	msr	BASEPRI, r3
 8014daa:	f3bf 8f6f 	isb	sy
 8014dae:	f3bf 8f4f 	dsb	sy
 8014db2:	603b      	str	r3, [r7, #0]
}
 8014db4:	bf00      	nop
 8014db6:	e7fe      	b.n	8014db6 <xTaskIncrementTick+0x46>
 8014db8:	4b45      	ldr	r3, [pc, #276]	; (8014ed0 <xTaskIncrementTick+0x160>)
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	60fb      	str	r3, [r7, #12]
 8014dbe:	4b45      	ldr	r3, [pc, #276]	; (8014ed4 <xTaskIncrementTick+0x164>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	4a43      	ldr	r2, [pc, #268]	; (8014ed0 <xTaskIncrementTick+0x160>)
 8014dc4:	6013      	str	r3, [r2, #0]
 8014dc6:	4a43      	ldr	r2, [pc, #268]	; (8014ed4 <xTaskIncrementTick+0x164>)
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	6013      	str	r3, [r2, #0]
 8014dcc:	4b42      	ldr	r3, [pc, #264]	; (8014ed8 <xTaskIncrementTick+0x168>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	3301      	adds	r3, #1
 8014dd2:	4a41      	ldr	r2, [pc, #260]	; (8014ed8 <xTaskIncrementTick+0x168>)
 8014dd4:	6013      	str	r3, [r2, #0]
 8014dd6:	f000 fb77 	bl	80154c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014dda:	4b40      	ldr	r3, [pc, #256]	; (8014edc <xTaskIncrementTick+0x16c>)
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	693a      	ldr	r2, [r7, #16]
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d349      	bcc.n	8014e78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014de4:	4b3a      	ldr	r3, [pc, #232]	; (8014ed0 <xTaskIncrementTick+0x160>)
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d104      	bne.n	8014df8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014dee:	4b3b      	ldr	r3, [pc, #236]	; (8014edc <xTaskIncrementTick+0x16c>)
 8014df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014df4:	601a      	str	r2, [r3, #0]
					break;
 8014df6:	e03f      	b.n	8014e78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014df8:	4b35      	ldr	r3, [pc, #212]	; (8014ed0 <xTaskIncrementTick+0x160>)
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	68db      	ldr	r3, [r3, #12]
 8014dfe:	68db      	ldr	r3, [r3, #12]
 8014e00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014e08:	693a      	ldr	r2, [r7, #16]
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	d203      	bcs.n	8014e18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014e10:	4a32      	ldr	r2, [pc, #200]	; (8014edc <xTaskIncrementTick+0x16c>)
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014e16:	e02f      	b.n	8014e78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	3304      	adds	r3, #4
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7fe fea3 	bl	8013b68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d004      	beq.n	8014e34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	3318      	adds	r3, #24
 8014e2e:	4618      	mov	r0, r3
 8014e30:	f7fe fe9a 	bl	8013b68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e38:	4b29      	ldr	r3, [pc, #164]	; (8014ee0 <xTaskIncrementTick+0x170>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	d903      	bls.n	8014e48 <xTaskIncrementTick+0xd8>
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e44:	4a26      	ldr	r2, [pc, #152]	; (8014ee0 <xTaskIncrementTick+0x170>)
 8014e46:	6013      	str	r3, [r2, #0]
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e4c:	4613      	mov	r3, r2
 8014e4e:	009b      	lsls	r3, r3, #2
 8014e50:	4413      	add	r3, r2
 8014e52:	009b      	lsls	r3, r3, #2
 8014e54:	4a23      	ldr	r2, [pc, #140]	; (8014ee4 <xTaskIncrementTick+0x174>)
 8014e56:	441a      	add	r2, r3
 8014e58:	68bb      	ldr	r3, [r7, #8]
 8014e5a:	3304      	adds	r3, #4
 8014e5c:	4619      	mov	r1, r3
 8014e5e:	4610      	mov	r0, r2
 8014e60:	f7fe fe25 	bl	8013aae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014e64:	68bb      	ldr	r3, [r7, #8]
 8014e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e68:	4b1f      	ldr	r3, [pc, #124]	; (8014ee8 <xTaskIncrementTick+0x178>)
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e6e:	429a      	cmp	r2, r3
 8014e70:	d3b8      	bcc.n	8014de4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014e72:	2301      	movs	r3, #1
 8014e74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014e76:	e7b5      	b.n	8014de4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014e78:	4b1b      	ldr	r3, [pc, #108]	; (8014ee8 <xTaskIncrementTick+0x178>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e7e:	4919      	ldr	r1, [pc, #100]	; (8014ee4 <xTaskIncrementTick+0x174>)
 8014e80:	4613      	mov	r3, r2
 8014e82:	009b      	lsls	r3, r3, #2
 8014e84:	4413      	add	r3, r2
 8014e86:	009b      	lsls	r3, r3, #2
 8014e88:	440b      	add	r3, r1
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b01      	cmp	r3, #1
 8014e8e:	d901      	bls.n	8014e94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014e90:	2301      	movs	r3, #1
 8014e92:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8014e94:	4b15      	ldr	r3, [pc, #84]	; (8014eec <xTaskIncrementTick+0x17c>)
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d101      	bne.n	8014ea0 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8014e9c:	f7eb ff5c 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014ea0:	4b13      	ldr	r3, [pc, #76]	; (8014ef0 <xTaskIncrementTick+0x180>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d009      	beq.n	8014ebc <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	617b      	str	r3, [r7, #20]
 8014eac:	e006      	b.n	8014ebc <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014eae:	4b0f      	ldr	r3, [pc, #60]	; (8014eec <xTaskIncrementTick+0x17c>)
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	3301      	adds	r3, #1
 8014eb4:	4a0d      	ldr	r2, [pc, #52]	; (8014eec <xTaskIncrementTick+0x17c>)
 8014eb6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8014eb8:	f7eb ff4e 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8014ebc:	697b      	ldr	r3, [r7, #20]
}
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	3718      	adds	r7, #24
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	bd80      	pop	{r7, pc}
 8014ec6:	bf00      	nop
 8014ec8:	240018a8 	.word	0x240018a8
 8014ecc:	24001884 	.word	0x24001884
 8014ed0:	24001838 	.word	0x24001838
 8014ed4:	2400183c 	.word	0x2400183c
 8014ed8:	24001898 	.word	0x24001898
 8014edc:	240018a0 	.word	0x240018a0
 8014ee0:	24001888 	.word	0x24001888
 8014ee4:	240013b0 	.word	0x240013b0
 8014ee8:	240013ac 	.word	0x240013ac
 8014eec:	24001890 	.word	0x24001890
 8014ef0:	24001894 	.word	0x24001894

08014ef4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014ef4:	b480      	push	{r7}
 8014ef6:	b085      	sub	sp, #20
 8014ef8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014efa:	4b28      	ldr	r3, [pc, #160]	; (8014f9c <vTaskSwitchContext+0xa8>)
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d003      	beq.n	8014f0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014f02:	4b27      	ldr	r3, [pc, #156]	; (8014fa0 <vTaskSwitchContext+0xac>)
 8014f04:	2201      	movs	r2, #1
 8014f06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014f08:	e041      	b.n	8014f8e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014f0a:	4b25      	ldr	r3, [pc, #148]	; (8014fa0 <vTaskSwitchContext+0xac>)
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f10:	4b24      	ldr	r3, [pc, #144]	; (8014fa4 <vTaskSwitchContext+0xb0>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	60fb      	str	r3, [r7, #12]
 8014f16:	e010      	b.n	8014f3a <vTaskSwitchContext+0x46>
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d10a      	bne.n	8014f34 <vTaskSwitchContext+0x40>
	__asm volatile
 8014f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f22:	f383 8811 	msr	BASEPRI, r3
 8014f26:	f3bf 8f6f 	isb	sy
 8014f2a:	f3bf 8f4f 	dsb	sy
 8014f2e:	607b      	str	r3, [r7, #4]
}
 8014f30:	bf00      	nop
 8014f32:	e7fe      	b.n	8014f32 <vTaskSwitchContext+0x3e>
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	3b01      	subs	r3, #1
 8014f38:	60fb      	str	r3, [r7, #12]
 8014f3a:	491b      	ldr	r1, [pc, #108]	; (8014fa8 <vTaskSwitchContext+0xb4>)
 8014f3c:	68fa      	ldr	r2, [r7, #12]
 8014f3e:	4613      	mov	r3, r2
 8014f40:	009b      	lsls	r3, r3, #2
 8014f42:	4413      	add	r3, r2
 8014f44:	009b      	lsls	r3, r3, #2
 8014f46:	440b      	add	r3, r1
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d0e4      	beq.n	8014f18 <vTaskSwitchContext+0x24>
 8014f4e:	68fa      	ldr	r2, [r7, #12]
 8014f50:	4613      	mov	r3, r2
 8014f52:	009b      	lsls	r3, r3, #2
 8014f54:	4413      	add	r3, r2
 8014f56:	009b      	lsls	r3, r3, #2
 8014f58:	4a13      	ldr	r2, [pc, #76]	; (8014fa8 <vTaskSwitchContext+0xb4>)
 8014f5a:	4413      	add	r3, r2
 8014f5c:	60bb      	str	r3, [r7, #8]
 8014f5e:	68bb      	ldr	r3, [r7, #8]
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	685a      	ldr	r2, [r3, #4]
 8014f64:	68bb      	ldr	r3, [r7, #8]
 8014f66:	605a      	str	r2, [r3, #4]
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	685a      	ldr	r2, [r3, #4]
 8014f6c:	68bb      	ldr	r3, [r7, #8]
 8014f6e:	3308      	adds	r3, #8
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d104      	bne.n	8014f7e <vTaskSwitchContext+0x8a>
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	685a      	ldr	r2, [r3, #4]
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	605a      	str	r2, [r3, #4]
 8014f7e:	68bb      	ldr	r3, [r7, #8]
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	68db      	ldr	r3, [r3, #12]
 8014f84:	4a09      	ldr	r2, [pc, #36]	; (8014fac <vTaskSwitchContext+0xb8>)
 8014f86:	6013      	str	r3, [r2, #0]
 8014f88:	4a06      	ldr	r2, [pc, #24]	; (8014fa4 <vTaskSwitchContext+0xb0>)
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	6013      	str	r3, [r2, #0]
}
 8014f8e:	bf00      	nop
 8014f90:	3714      	adds	r7, #20
 8014f92:	46bd      	mov	sp, r7
 8014f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f98:	4770      	bx	lr
 8014f9a:	bf00      	nop
 8014f9c:	240018a8 	.word	0x240018a8
 8014fa0:	24001894 	.word	0x24001894
 8014fa4:	24001888 	.word	0x24001888
 8014fa8:	240013b0 	.word	0x240013b0
 8014fac:	240013ac 	.word	0x240013ac

08014fb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b084      	sub	sp, #16
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d10a      	bne.n	8014fd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fc4:	f383 8811 	msr	BASEPRI, r3
 8014fc8:	f3bf 8f6f 	isb	sy
 8014fcc:	f3bf 8f4f 	dsb	sy
 8014fd0:	60fb      	str	r3, [r7, #12]
}
 8014fd2:	bf00      	nop
 8014fd4:	e7fe      	b.n	8014fd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014fd6:	4b07      	ldr	r3, [pc, #28]	; (8014ff4 <vTaskPlaceOnEventList+0x44>)
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	3318      	adds	r3, #24
 8014fdc:	4619      	mov	r1, r3
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f7fe fd89 	bl	8013af6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014fe4:	2101      	movs	r1, #1
 8014fe6:	6838      	ldr	r0, [r7, #0]
 8014fe8:	f000 fb32 	bl	8015650 <prvAddCurrentTaskToDelayedList>
}
 8014fec:	bf00      	nop
 8014fee:	3710      	adds	r7, #16
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}
 8014ff4:	240013ac 	.word	0x240013ac

08014ff8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b086      	sub	sp, #24
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	60f8      	str	r0, [r7, #12]
 8015000:	60b9      	str	r1, [r7, #8]
 8015002:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d10a      	bne.n	8015020 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801500a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801500e:	f383 8811 	msr	BASEPRI, r3
 8015012:	f3bf 8f6f 	isb	sy
 8015016:	f3bf 8f4f 	dsb	sy
 801501a:	617b      	str	r3, [r7, #20]
}
 801501c:	bf00      	nop
 801501e:	e7fe      	b.n	801501e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8015020:	4b11      	ldr	r3, [pc, #68]	; (8015068 <vTaskPlaceOnUnorderedEventList+0x70>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d10a      	bne.n	801503e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8015028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801502c:	f383 8811 	msr	BASEPRI, r3
 8015030:	f3bf 8f6f 	isb	sy
 8015034:	f3bf 8f4f 	dsb	sy
 8015038:	613b      	str	r3, [r7, #16]
}
 801503a:	bf00      	nop
 801503c:	e7fe      	b.n	801503c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801503e:	4b0b      	ldr	r3, [pc, #44]	; (801506c <vTaskPlaceOnUnorderedEventList+0x74>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	68ba      	ldr	r2, [r7, #8]
 8015044:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8015048:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801504a:	4b08      	ldr	r3, [pc, #32]	; (801506c <vTaskPlaceOnUnorderedEventList+0x74>)
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	3318      	adds	r3, #24
 8015050:	4619      	mov	r1, r3
 8015052:	68f8      	ldr	r0, [r7, #12]
 8015054:	f7fe fd2b 	bl	8013aae <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015058:	2101      	movs	r1, #1
 801505a:	6878      	ldr	r0, [r7, #4]
 801505c:	f000 faf8 	bl	8015650 <prvAddCurrentTaskToDelayedList>
}
 8015060:	bf00      	nop
 8015062:	3718      	adds	r7, #24
 8015064:	46bd      	mov	sp, r7
 8015066:	bd80      	pop	{r7, pc}
 8015068:	240018a8 	.word	0x240018a8
 801506c:	240013ac 	.word	0x240013ac

08015070 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015070:	b580      	push	{r7, lr}
 8015072:	b086      	sub	sp, #24
 8015074:	af00      	add	r7, sp, #0
 8015076:	60f8      	str	r0, [r7, #12]
 8015078:	60b9      	str	r1, [r7, #8]
 801507a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d10a      	bne.n	8015098 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8015082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015086:	f383 8811 	msr	BASEPRI, r3
 801508a:	f3bf 8f6f 	isb	sy
 801508e:	f3bf 8f4f 	dsb	sy
 8015092:	617b      	str	r3, [r7, #20]
}
 8015094:	bf00      	nop
 8015096:	e7fe      	b.n	8015096 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015098:	4b0a      	ldr	r3, [pc, #40]	; (80150c4 <vTaskPlaceOnEventListRestricted+0x54>)
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	3318      	adds	r3, #24
 801509e:	4619      	mov	r1, r3
 80150a0:	68f8      	ldr	r0, [r7, #12]
 80150a2:	f7fe fd04 	bl	8013aae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d002      	beq.n	80150b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80150ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80150b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80150b2:	6879      	ldr	r1, [r7, #4]
 80150b4:	68b8      	ldr	r0, [r7, #8]
 80150b6:	f000 facb 	bl	8015650 <prvAddCurrentTaskToDelayedList>
	}
 80150ba:	bf00      	nop
 80150bc:	3718      	adds	r7, #24
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}
 80150c2:	bf00      	nop
 80150c4:	240013ac 	.word	0x240013ac

080150c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b086      	sub	sp, #24
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	68db      	ldr	r3, [r3, #12]
 80150d4:	68db      	ldr	r3, [r3, #12]
 80150d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80150d8:	693b      	ldr	r3, [r7, #16]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d10a      	bne.n	80150f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80150de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150e2:	f383 8811 	msr	BASEPRI, r3
 80150e6:	f3bf 8f6f 	isb	sy
 80150ea:	f3bf 8f4f 	dsb	sy
 80150ee:	60fb      	str	r3, [r7, #12]
}
 80150f0:	bf00      	nop
 80150f2:	e7fe      	b.n	80150f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	3318      	adds	r3, #24
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7fe fd35 	bl	8013b68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80150fe:	4b1e      	ldr	r3, [pc, #120]	; (8015178 <xTaskRemoveFromEventList+0xb0>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d11d      	bne.n	8015142 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015106:	693b      	ldr	r3, [r7, #16]
 8015108:	3304      	adds	r3, #4
 801510a:	4618      	mov	r0, r3
 801510c:	f7fe fd2c 	bl	8013b68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015114:	4b19      	ldr	r3, [pc, #100]	; (801517c <xTaskRemoveFromEventList+0xb4>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	429a      	cmp	r2, r3
 801511a:	d903      	bls.n	8015124 <xTaskRemoveFromEventList+0x5c>
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015120:	4a16      	ldr	r2, [pc, #88]	; (801517c <xTaskRemoveFromEventList+0xb4>)
 8015122:	6013      	str	r3, [r2, #0]
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015128:	4613      	mov	r3, r2
 801512a:	009b      	lsls	r3, r3, #2
 801512c:	4413      	add	r3, r2
 801512e:	009b      	lsls	r3, r3, #2
 8015130:	4a13      	ldr	r2, [pc, #76]	; (8015180 <xTaskRemoveFromEventList+0xb8>)
 8015132:	441a      	add	r2, r3
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	3304      	adds	r3, #4
 8015138:	4619      	mov	r1, r3
 801513a:	4610      	mov	r0, r2
 801513c:	f7fe fcb7 	bl	8013aae <vListInsertEnd>
 8015140:	e005      	b.n	801514e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	3318      	adds	r3, #24
 8015146:	4619      	mov	r1, r3
 8015148:	480e      	ldr	r0, [pc, #56]	; (8015184 <xTaskRemoveFromEventList+0xbc>)
 801514a:	f7fe fcb0 	bl	8013aae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015152:	4b0d      	ldr	r3, [pc, #52]	; (8015188 <xTaskRemoveFromEventList+0xc0>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015158:	429a      	cmp	r2, r3
 801515a:	d905      	bls.n	8015168 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801515c:	2301      	movs	r3, #1
 801515e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015160:	4b0a      	ldr	r3, [pc, #40]	; (801518c <xTaskRemoveFromEventList+0xc4>)
 8015162:	2201      	movs	r2, #1
 8015164:	601a      	str	r2, [r3, #0]
 8015166:	e001      	b.n	801516c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015168:	2300      	movs	r3, #0
 801516a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801516c:	697b      	ldr	r3, [r7, #20]
}
 801516e:	4618      	mov	r0, r3
 8015170:	3718      	adds	r7, #24
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}
 8015176:	bf00      	nop
 8015178:	240018a8 	.word	0x240018a8
 801517c:	24001888 	.word	0x24001888
 8015180:	240013b0 	.word	0x240013b0
 8015184:	24001840 	.word	0x24001840
 8015188:	240013ac 	.word	0x240013ac
 801518c:	24001894 	.word	0x24001894

08015190 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b086      	sub	sp, #24
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
 8015198:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801519a:	4b29      	ldr	r3, [pc, #164]	; (8015240 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d10a      	bne.n	80151b8 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80151a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151a6:	f383 8811 	msr	BASEPRI, r3
 80151aa:	f3bf 8f6f 	isb	sy
 80151ae:	f3bf 8f4f 	dsb	sy
 80151b2:	613b      	str	r3, [r7, #16]
}
 80151b4:	bf00      	nop
 80151b6:	e7fe      	b.n	80151b6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80151b8:	683b      	ldr	r3, [r7, #0]
 80151ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	68db      	ldr	r3, [r3, #12]
 80151c6:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d10a      	bne.n	80151e4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80151ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151d2:	f383 8811 	msr	BASEPRI, r3
 80151d6:	f3bf 8f6f 	isb	sy
 80151da:	f3bf 8f4f 	dsb	sy
 80151de:	60fb      	str	r3, [r7, #12]
}
 80151e0:	bf00      	nop
 80151e2:	e7fe      	b.n	80151e2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f7fe fcbf 	bl	8013b68 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80151ea:	697b      	ldr	r3, [r7, #20]
 80151ec:	3304      	adds	r3, #4
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7fe fcba 	bl	8013b68 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80151f4:	697b      	ldr	r3, [r7, #20]
 80151f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151f8:	4b12      	ldr	r3, [pc, #72]	; (8015244 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	429a      	cmp	r2, r3
 80151fe:	d903      	bls.n	8015208 <vTaskRemoveFromUnorderedEventList+0x78>
 8015200:	697b      	ldr	r3, [r7, #20]
 8015202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015204:	4a0f      	ldr	r2, [pc, #60]	; (8015244 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015206:	6013      	str	r3, [r2, #0]
 8015208:	697b      	ldr	r3, [r7, #20]
 801520a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801520c:	4613      	mov	r3, r2
 801520e:	009b      	lsls	r3, r3, #2
 8015210:	4413      	add	r3, r2
 8015212:	009b      	lsls	r3, r3, #2
 8015214:	4a0c      	ldr	r2, [pc, #48]	; (8015248 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015216:	441a      	add	r2, r3
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	3304      	adds	r3, #4
 801521c:	4619      	mov	r1, r3
 801521e:	4610      	mov	r0, r2
 8015220:	f7fe fc45 	bl	8013aae <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015228:	4b08      	ldr	r3, [pc, #32]	; (801524c <vTaskRemoveFromUnorderedEventList+0xbc>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801522e:	429a      	cmp	r2, r3
 8015230:	d902      	bls.n	8015238 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8015232:	4b07      	ldr	r3, [pc, #28]	; (8015250 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8015234:	2201      	movs	r2, #1
 8015236:	601a      	str	r2, [r3, #0]
	}
}
 8015238:	bf00      	nop
 801523a:	3718      	adds	r7, #24
 801523c:	46bd      	mov	sp, r7
 801523e:	bd80      	pop	{r7, pc}
 8015240:	240018a8 	.word	0x240018a8
 8015244:	24001888 	.word	0x24001888
 8015248:	240013b0 	.word	0x240013b0
 801524c:	240013ac 	.word	0x240013ac
 8015250:	24001894 	.word	0x24001894

08015254 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015254:	b480      	push	{r7}
 8015256:	b083      	sub	sp, #12
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801525c:	4b06      	ldr	r3, [pc, #24]	; (8015278 <vTaskInternalSetTimeOutState+0x24>)
 801525e:	681a      	ldr	r2, [r3, #0]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015264:	4b05      	ldr	r3, [pc, #20]	; (801527c <vTaskInternalSetTimeOutState+0x28>)
 8015266:	681a      	ldr	r2, [r3, #0]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	605a      	str	r2, [r3, #4]
}
 801526c:	bf00      	nop
 801526e:	370c      	adds	r7, #12
 8015270:	46bd      	mov	sp, r7
 8015272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015276:	4770      	bx	lr
 8015278:	24001898 	.word	0x24001898
 801527c:	24001884 	.word	0x24001884

08015280 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b088      	sub	sp, #32
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d10a      	bne.n	80152a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8015290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015294:	f383 8811 	msr	BASEPRI, r3
 8015298:	f3bf 8f6f 	isb	sy
 801529c:	f3bf 8f4f 	dsb	sy
 80152a0:	613b      	str	r3, [r7, #16]
}
 80152a2:	bf00      	nop
 80152a4:	e7fe      	b.n	80152a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80152a6:	683b      	ldr	r3, [r7, #0]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d10a      	bne.n	80152c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80152ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152b0:	f383 8811 	msr	BASEPRI, r3
 80152b4:	f3bf 8f6f 	isb	sy
 80152b8:	f3bf 8f4f 	dsb	sy
 80152bc:	60fb      	str	r3, [r7, #12]
}
 80152be:	bf00      	nop
 80152c0:	e7fe      	b.n	80152c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80152c2:	f000 feb7 	bl	8016034 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80152c6:	4b1d      	ldr	r3, [pc, #116]	; (801533c <xTaskCheckForTimeOut+0xbc>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	685b      	ldr	r3, [r3, #4]
 80152d0:	69ba      	ldr	r2, [r7, #24]
 80152d2:	1ad3      	subs	r3, r2, r3
 80152d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80152d6:	683b      	ldr	r3, [r7, #0]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152de:	d102      	bne.n	80152e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80152e0:	2300      	movs	r3, #0
 80152e2:	61fb      	str	r3, [r7, #28]
 80152e4:	e023      	b.n	801532e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	681a      	ldr	r2, [r3, #0]
 80152ea:	4b15      	ldr	r3, [pc, #84]	; (8015340 <xTaskCheckForTimeOut+0xc0>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d007      	beq.n	8015302 <xTaskCheckForTimeOut+0x82>
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	685b      	ldr	r3, [r3, #4]
 80152f6:	69ba      	ldr	r2, [r7, #24]
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d302      	bcc.n	8015302 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80152fc:	2301      	movs	r3, #1
 80152fe:	61fb      	str	r3, [r7, #28]
 8015300:	e015      	b.n	801532e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	697a      	ldr	r2, [r7, #20]
 8015308:	429a      	cmp	r2, r3
 801530a:	d20b      	bcs.n	8015324 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	681a      	ldr	r2, [r3, #0]
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	1ad2      	subs	r2, r2, r3
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f7ff ff9b 	bl	8015254 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801531e:	2300      	movs	r3, #0
 8015320:	61fb      	str	r3, [r7, #28]
 8015322:	e004      	b.n	801532e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	2200      	movs	r2, #0
 8015328:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801532a:	2301      	movs	r3, #1
 801532c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801532e:	f000 feb1 	bl	8016094 <vPortExitCritical>

	return xReturn;
 8015332:	69fb      	ldr	r3, [r7, #28]
}
 8015334:	4618      	mov	r0, r3
 8015336:	3720      	adds	r7, #32
 8015338:	46bd      	mov	sp, r7
 801533a:	bd80      	pop	{r7, pc}
 801533c:	24001884 	.word	0x24001884
 8015340:	24001898 	.word	0x24001898

08015344 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015344:	b480      	push	{r7}
 8015346:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015348:	4b03      	ldr	r3, [pc, #12]	; (8015358 <vTaskMissedYield+0x14>)
 801534a:	2201      	movs	r2, #1
 801534c:	601a      	str	r2, [r3, #0]
}
 801534e:	bf00      	nop
 8015350:	46bd      	mov	sp, r7
 8015352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015356:	4770      	bx	lr
 8015358:	24001894 	.word	0x24001894

0801535c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015364:	f000 f852 	bl	801540c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015368:	4b06      	ldr	r3, [pc, #24]	; (8015384 <prvIdleTask+0x28>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	2b01      	cmp	r3, #1
 801536e:	d9f9      	bls.n	8015364 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015370:	4b05      	ldr	r3, [pc, #20]	; (8015388 <prvIdleTask+0x2c>)
 8015372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015376:	601a      	str	r2, [r3, #0]
 8015378:	f3bf 8f4f 	dsb	sy
 801537c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015380:	e7f0      	b.n	8015364 <prvIdleTask+0x8>
 8015382:	bf00      	nop
 8015384:	240013b0 	.word	0x240013b0
 8015388:	e000ed04 	.word	0xe000ed04

0801538c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015392:	2300      	movs	r3, #0
 8015394:	607b      	str	r3, [r7, #4]
 8015396:	e00c      	b.n	80153b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015398:	687a      	ldr	r2, [r7, #4]
 801539a:	4613      	mov	r3, r2
 801539c:	009b      	lsls	r3, r3, #2
 801539e:	4413      	add	r3, r2
 80153a0:	009b      	lsls	r3, r3, #2
 80153a2:	4a12      	ldr	r2, [pc, #72]	; (80153ec <prvInitialiseTaskLists+0x60>)
 80153a4:	4413      	add	r3, r2
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7fe fb54 	bl	8013a54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	3301      	adds	r3, #1
 80153b0:	607b      	str	r3, [r7, #4]
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2b37      	cmp	r3, #55	; 0x37
 80153b6:	d9ef      	bls.n	8015398 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80153b8:	480d      	ldr	r0, [pc, #52]	; (80153f0 <prvInitialiseTaskLists+0x64>)
 80153ba:	f7fe fb4b 	bl	8013a54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80153be:	480d      	ldr	r0, [pc, #52]	; (80153f4 <prvInitialiseTaskLists+0x68>)
 80153c0:	f7fe fb48 	bl	8013a54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80153c4:	480c      	ldr	r0, [pc, #48]	; (80153f8 <prvInitialiseTaskLists+0x6c>)
 80153c6:	f7fe fb45 	bl	8013a54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80153ca:	480c      	ldr	r0, [pc, #48]	; (80153fc <prvInitialiseTaskLists+0x70>)
 80153cc:	f7fe fb42 	bl	8013a54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80153d0:	480b      	ldr	r0, [pc, #44]	; (8015400 <prvInitialiseTaskLists+0x74>)
 80153d2:	f7fe fb3f 	bl	8013a54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80153d6:	4b0b      	ldr	r3, [pc, #44]	; (8015404 <prvInitialiseTaskLists+0x78>)
 80153d8:	4a05      	ldr	r2, [pc, #20]	; (80153f0 <prvInitialiseTaskLists+0x64>)
 80153da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80153dc:	4b0a      	ldr	r3, [pc, #40]	; (8015408 <prvInitialiseTaskLists+0x7c>)
 80153de:	4a05      	ldr	r2, [pc, #20]	; (80153f4 <prvInitialiseTaskLists+0x68>)
 80153e0:	601a      	str	r2, [r3, #0]
}
 80153e2:	bf00      	nop
 80153e4:	3708      	adds	r7, #8
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bd80      	pop	{r7, pc}
 80153ea:	bf00      	nop
 80153ec:	240013b0 	.word	0x240013b0
 80153f0:	24001810 	.word	0x24001810
 80153f4:	24001824 	.word	0x24001824
 80153f8:	24001840 	.word	0x24001840
 80153fc:	24001854 	.word	0x24001854
 8015400:	2400186c 	.word	0x2400186c
 8015404:	24001838 	.word	0x24001838
 8015408:	2400183c 	.word	0x2400183c

0801540c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b082      	sub	sp, #8
 8015410:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015412:	e019      	b.n	8015448 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015414:	f000 fe0e 	bl	8016034 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015418:	4b10      	ldr	r3, [pc, #64]	; (801545c <prvCheckTasksWaitingTermination+0x50>)
 801541a:	68db      	ldr	r3, [r3, #12]
 801541c:	68db      	ldr	r3, [r3, #12]
 801541e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	3304      	adds	r3, #4
 8015424:	4618      	mov	r0, r3
 8015426:	f7fe fb9f 	bl	8013b68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801542a:	4b0d      	ldr	r3, [pc, #52]	; (8015460 <prvCheckTasksWaitingTermination+0x54>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	3b01      	subs	r3, #1
 8015430:	4a0b      	ldr	r2, [pc, #44]	; (8015460 <prvCheckTasksWaitingTermination+0x54>)
 8015432:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015434:	4b0b      	ldr	r3, [pc, #44]	; (8015464 <prvCheckTasksWaitingTermination+0x58>)
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	3b01      	subs	r3, #1
 801543a:	4a0a      	ldr	r2, [pc, #40]	; (8015464 <prvCheckTasksWaitingTermination+0x58>)
 801543c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801543e:	f000 fe29 	bl	8016094 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015442:	6878      	ldr	r0, [r7, #4]
 8015444:	f000 f810 	bl	8015468 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015448:	4b06      	ldr	r3, [pc, #24]	; (8015464 <prvCheckTasksWaitingTermination+0x58>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d1e1      	bne.n	8015414 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015450:	bf00      	nop
 8015452:	bf00      	nop
 8015454:	3708      	adds	r7, #8
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}
 801545a:	bf00      	nop
 801545c:	24001854 	.word	0x24001854
 8015460:	24001880 	.word	0x24001880
 8015464:	24001868 	.word	0x24001868

08015468 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015468:	b580      	push	{r7, lr}
 801546a:	b084      	sub	sp, #16
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015476:	2b00      	cmp	r3, #0
 8015478:	d108      	bne.n	801548c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801547e:	4618      	mov	r0, r3
 8015480:	f000 ffc6 	bl	8016410 <vPortFree>
				vPortFree( pxTCB );
 8015484:	6878      	ldr	r0, [r7, #4]
 8015486:	f000 ffc3 	bl	8016410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801548a:	e018      	b.n	80154be <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015492:	2b01      	cmp	r3, #1
 8015494:	d103      	bne.n	801549e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015496:	6878      	ldr	r0, [r7, #4]
 8015498:	f000 ffba 	bl	8016410 <vPortFree>
	}
 801549c:	e00f      	b.n	80154be <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80154a4:	2b02      	cmp	r3, #2
 80154a6:	d00a      	beq.n	80154be <prvDeleteTCB+0x56>
	__asm volatile
 80154a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154ac:	f383 8811 	msr	BASEPRI, r3
 80154b0:	f3bf 8f6f 	isb	sy
 80154b4:	f3bf 8f4f 	dsb	sy
 80154b8:	60fb      	str	r3, [r7, #12]
}
 80154ba:	bf00      	nop
 80154bc:	e7fe      	b.n	80154bc <prvDeleteTCB+0x54>
	}
 80154be:	bf00      	nop
 80154c0:	3710      	adds	r7, #16
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}
	...

080154c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80154c8:	b480      	push	{r7}
 80154ca:	b083      	sub	sp, #12
 80154cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80154ce:	4b0c      	ldr	r3, [pc, #48]	; (8015500 <prvResetNextTaskUnblockTime+0x38>)
 80154d0:	681b      	ldr	r3, [r3, #0]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d104      	bne.n	80154e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80154d8:	4b0a      	ldr	r3, [pc, #40]	; (8015504 <prvResetNextTaskUnblockTime+0x3c>)
 80154da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80154de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80154e0:	e008      	b.n	80154f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80154e2:	4b07      	ldr	r3, [pc, #28]	; (8015500 <prvResetNextTaskUnblockTime+0x38>)
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	68db      	ldr	r3, [r3, #12]
 80154e8:	68db      	ldr	r3, [r3, #12]
 80154ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	685b      	ldr	r3, [r3, #4]
 80154f0:	4a04      	ldr	r2, [pc, #16]	; (8015504 <prvResetNextTaskUnblockTime+0x3c>)
 80154f2:	6013      	str	r3, [r2, #0]
}
 80154f4:	bf00      	nop
 80154f6:	370c      	adds	r7, #12
 80154f8:	46bd      	mov	sp, r7
 80154fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fe:	4770      	bx	lr
 8015500:	24001838 	.word	0x24001838
 8015504:	240018a0 	.word	0x240018a0

08015508 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015508:	b480      	push	{r7}
 801550a:	b083      	sub	sp, #12
 801550c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801550e:	4b0b      	ldr	r3, [pc, #44]	; (801553c <xTaskGetSchedulerState+0x34>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d102      	bne.n	801551c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015516:	2301      	movs	r3, #1
 8015518:	607b      	str	r3, [r7, #4]
 801551a:	e008      	b.n	801552e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801551c:	4b08      	ldr	r3, [pc, #32]	; (8015540 <xTaskGetSchedulerState+0x38>)
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d102      	bne.n	801552a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015524:	2302      	movs	r3, #2
 8015526:	607b      	str	r3, [r7, #4]
 8015528:	e001      	b.n	801552e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801552a:	2300      	movs	r3, #0
 801552c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801552e:	687b      	ldr	r3, [r7, #4]
	}
 8015530:	4618      	mov	r0, r3
 8015532:	370c      	adds	r7, #12
 8015534:	46bd      	mov	sp, r7
 8015536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553a:	4770      	bx	lr
 801553c:	2400188c 	.word	0x2400188c
 8015540:	240018a8 	.word	0x240018a8

08015544 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015544:	b580      	push	{r7, lr}
 8015546:	b086      	sub	sp, #24
 8015548:	af00      	add	r7, sp, #0
 801554a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015550:	2300      	movs	r3, #0
 8015552:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d056      	beq.n	8015608 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801555a:	4b2e      	ldr	r3, [pc, #184]	; (8015614 <xTaskPriorityDisinherit+0xd0>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	693a      	ldr	r2, [r7, #16]
 8015560:	429a      	cmp	r2, r3
 8015562:	d00a      	beq.n	801557a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015568:	f383 8811 	msr	BASEPRI, r3
 801556c:	f3bf 8f6f 	isb	sy
 8015570:	f3bf 8f4f 	dsb	sy
 8015574:	60fb      	str	r3, [r7, #12]
}
 8015576:	bf00      	nop
 8015578:	e7fe      	b.n	8015578 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801557a:	693b      	ldr	r3, [r7, #16]
 801557c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801557e:	2b00      	cmp	r3, #0
 8015580:	d10a      	bne.n	8015598 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015586:	f383 8811 	msr	BASEPRI, r3
 801558a:	f3bf 8f6f 	isb	sy
 801558e:	f3bf 8f4f 	dsb	sy
 8015592:	60bb      	str	r3, [r7, #8]
}
 8015594:	bf00      	nop
 8015596:	e7fe      	b.n	8015596 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015598:	693b      	ldr	r3, [r7, #16]
 801559a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801559c:	1e5a      	subs	r2, r3, #1
 801559e:	693b      	ldr	r3, [r7, #16]
 80155a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80155a2:	693b      	ldr	r3, [r7, #16]
 80155a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155a6:	693b      	ldr	r3, [r7, #16]
 80155a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d02c      	beq.n	8015608 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80155ae:	693b      	ldr	r3, [r7, #16]
 80155b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d128      	bne.n	8015608 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80155b6:	693b      	ldr	r3, [r7, #16]
 80155b8:	3304      	adds	r3, #4
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7fe fad4 	bl	8013b68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80155c0:	693b      	ldr	r3, [r7, #16]
 80155c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80155c4:	693b      	ldr	r3, [r7, #16]
 80155c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80155c8:	693b      	ldr	r3, [r7, #16]
 80155ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80155d0:	693b      	ldr	r3, [r7, #16]
 80155d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80155d4:	693b      	ldr	r3, [r7, #16]
 80155d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155d8:	4b0f      	ldr	r3, [pc, #60]	; (8015618 <xTaskPriorityDisinherit+0xd4>)
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	429a      	cmp	r2, r3
 80155de:	d903      	bls.n	80155e8 <xTaskPriorityDisinherit+0xa4>
 80155e0:	693b      	ldr	r3, [r7, #16]
 80155e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155e4:	4a0c      	ldr	r2, [pc, #48]	; (8015618 <xTaskPriorityDisinherit+0xd4>)
 80155e6:	6013      	str	r3, [r2, #0]
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155ec:	4613      	mov	r3, r2
 80155ee:	009b      	lsls	r3, r3, #2
 80155f0:	4413      	add	r3, r2
 80155f2:	009b      	lsls	r3, r3, #2
 80155f4:	4a09      	ldr	r2, [pc, #36]	; (801561c <xTaskPriorityDisinherit+0xd8>)
 80155f6:	441a      	add	r2, r3
 80155f8:	693b      	ldr	r3, [r7, #16]
 80155fa:	3304      	adds	r3, #4
 80155fc:	4619      	mov	r1, r3
 80155fe:	4610      	mov	r0, r2
 8015600:	f7fe fa55 	bl	8013aae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015604:	2301      	movs	r3, #1
 8015606:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015608:	697b      	ldr	r3, [r7, #20]
	}
 801560a:	4618      	mov	r0, r3
 801560c:	3718      	adds	r7, #24
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}
 8015612:	bf00      	nop
 8015614:	240013ac 	.word	0x240013ac
 8015618:	24001888 	.word	0x24001888
 801561c:	240013b0 	.word	0x240013b0

08015620 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015620:	b480      	push	{r7}
 8015622:	b083      	sub	sp, #12
 8015624:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015626:	4b09      	ldr	r3, [pc, #36]	; (801564c <uxTaskResetEventItemValue+0x2c>)
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	699b      	ldr	r3, [r3, #24]
 801562c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801562e:	4b07      	ldr	r3, [pc, #28]	; (801564c <uxTaskResetEventItemValue+0x2c>)
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015634:	4b05      	ldr	r3, [pc, #20]	; (801564c <uxTaskResetEventItemValue+0x2c>)
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801563c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801563e:	687b      	ldr	r3, [r7, #4]
}
 8015640:	4618      	mov	r0, r3
 8015642:	370c      	adds	r7, #12
 8015644:	46bd      	mov	sp, r7
 8015646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564a:	4770      	bx	lr
 801564c:	240013ac 	.word	0x240013ac

08015650 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b084      	sub	sp, #16
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
 8015658:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801565a:	4b21      	ldr	r3, [pc, #132]	; (80156e0 <prvAddCurrentTaskToDelayedList+0x90>)
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015660:	4b20      	ldr	r3, [pc, #128]	; (80156e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	3304      	adds	r3, #4
 8015666:	4618      	mov	r0, r3
 8015668:	f7fe fa7e 	bl	8013b68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015672:	d10a      	bne.n	801568a <prvAddCurrentTaskToDelayedList+0x3a>
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d007      	beq.n	801568a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801567a:	4b1a      	ldr	r3, [pc, #104]	; (80156e4 <prvAddCurrentTaskToDelayedList+0x94>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	3304      	adds	r3, #4
 8015680:	4619      	mov	r1, r3
 8015682:	4819      	ldr	r0, [pc, #100]	; (80156e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8015684:	f7fe fa13 	bl	8013aae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015688:	e026      	b.n	80156d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801568a:	68fa      	ldr	r2, [r7, #12]
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	4413      	add	r3, r2
 8015690:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015692:	4b14      	ldr	r3, [pc, #80]	; (80156e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	68ba      	ldr	r2, [r7, #8]
 8015698:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801569a:	68ba      	ldr	r2, [r7, #8]
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	429a      	cmp	r2, r3
 80156a0:	d209      	bcs.n	80156b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80156a2:	4b12      	ldr	r3, [pc, #72]	; (80156ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	4b0f      	ldr	r3, [pc, #60]	; (80156e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	3304      	adds	r3, #4
 80156ac:	4619      	mov	r1, r3
 80156ae:	4610      	mov	r0, r2
 80156b0:	f7fe fa21 	bl	8013af6 <vListInsert>
}
 80156b4:	e010      	b.n	80156d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80156b6:	4b0e      	ldr	r3, [pc, #56]	; (80156f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80156b8:	681a      	ldr	r2, [r3, #0]
 80156ba:	4b0a      	ldr	r3, [pc, #40]	; (80156e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	3304      	adds	r3, #4
 80156c0:	4619      	mov	r1, r3
 80156c2:	4610      	mov	r0, r2
 80156c4:	f7fe fa17 	bl	8013af6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80156c8:	4b0a      	ldr	r3, [pc, #40]	; (80156f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	68ba      	ldr	r2, [r7, #8]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	d202      	bcs.n	80156d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80156d2:	4a08      	ldr	r2, [pc, #32]	; (80156f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	6013      	str	r3, [r2, #0]
}
 80156d8:	bf00      	nop
 80156da:	3710      	adds	r7, #16
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd80      	pop	{r7, pc}
 80156e0:	24001884 	.word	0x24001884
 80156e4:	240013ac 	.word	0x240013ac
 80156e8:	2400186c 	.word	0x2400186c
 80156ec:	2400183c 	.word	0x2400183c
 80156f0:	24001838 	.word	0x24001838
 80156f4:	240018a0 	.word	0x240018a0

080156f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b08a      	sub	sp, #40	; 0x28
 80156fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80156fe:	2300      	movs	r3, #0
 8015700:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015702:	f000 fb07 	bl	8015d14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015706:	4b1c      	ldr	r3, [pc, #112]	; (8015778 <xTimerCreateTimerTask+0x80>)
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d021      	beq.n	8015752 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801570e:	2300      	movs	r3, #0
 8015710:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015712:	2300      	movs	r3, #0
 8015714:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015716:	1d3a      	adds	r2, r7, #4
 8015718:	f107 0108 	add.w	r1, r7, #8
 801571c:	f107 030c 	add.w	r3, r7, #12
 8015720:	4618      	mov	r0, r3
 8015722:	f7fd ff8f 	bl	8013644 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015726:	6879      	ldr	r1, [r7, #4]
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	68fa      	ldr	r2, [r7, #12]
 801572c:	9202      	str	r2, [sp, #8]
 801572e:	9301      	str	r3, [sp, #4]
 8015730:	2302      	movs	r3, #2
 8015732:	9300      	str	r3, [sp, #0]
 8015734:	2300      	movs	r3, #0
 8015736:	460a      	mov	r2, r1
 8015738:	4910      	ldr	r1, [pc, #64]	; (801577c <xTimerCreateTimerTask+0x84>)
 801573a:	4811      	ldr	r0, [pc, #68]	; (8015780 <xTimerCreateTimerTask+0x88>)
 801573c:	f7ff f820 	bl	8014780 <xTaskCreateStatic>
 8015740:	4603      	mov	r3, r0
 8015742:	4a10      	ldr	r2, [pc, #64]	; (8015784 <xTimerCreateTimerTask+0x8c>)
 8015744:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015746:	4b0f      	ldr	r3, [pc, #60]	; (8015784 <xTimerCreateTimerTask+0x8c>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d001      	beq.n	8015752 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801574e:	2301      	movs	r3, #1
 8015750:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015752:	697b      	ldr	r3, [r7, #20]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d10a      	bne.n	801576e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801575c:	f383 8811 	msr	BASEPRI, r3
 8015760:	f3bf 8f6f 	isb	sy
 8015764:	f3bf 8f4f 	dsb	sy
 8015768:	613b      	str	r3, [r7, #16]
}
 801576a:	bf00      	nop
 801576c:	e7fe      	b.n	801576c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801576e:	697b      	ldr	r3, [r7, #20]
}
 8015770:	4618      	mov	r0, r3
 8015772:	3718      	adds	r7, #24
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}
 8015778:	240018dc 	.word	0x240018dc
 801577c:	08017368 	.word	0x08017368
 8015780:	080158bd 	.word	0x080158bd
 8015784:	240018e0 	.word	0x240018e0

08015788 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b08a      	sub	sp, #40	; 0x28
 801578c:	af00      	add	r7, sp, #0
 801578e:	60f8      	str	r0, [r7, #12]
 8015790:	60b9      	str	r1, [r7, #8]
 8015792:	607a      	str	r2, [r7, #4]
 8015794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015796:	2300      	movs	r3, #0
 8015798:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d10a      	bne.n	80157b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80157a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157a4:	f383 8811 	msr	BASEPRI, r3
 80157a8:	f3bf 8f6f 	isb	sy
 80157ac:	f3bf 8f4f 	dsb	sy
 80157b0:	623b      	str	r3, [r7, #32]
}
 80157b2:	bf00      	nop
 80157b4:	e7fe      	b.n	80157b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80157b6:	4b1a      	ldr	r3, [pc, #104]	; (8015820 <xTimerGenericCommand+0x98>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d02a      	beq.n	8015814 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	2b05      	cmp	r3, #5
 80157ce:	dc18      	bgt.n	8015802 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80157d0:	f7ff fe9a 	bl	8015508 <xTaskGetSchedulerState>
 80157d4:	4603      	mov	r3, r0
 80157d6:	2b02      	cmp	r3, #2
 80157d8:	d109      	bne.n	80157ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80157da:	4b11      	ldr	r3, [pc, #68]	; (8015820 <xTimerGenericCommand+0x98>)
 80157dc:	6818      	ldr	r0, [r3, #0]
 80157de:	f107 0110 	add.w	r1, r7, #16
 80157e2:	2300      	movs	r3, #0
 80157e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157e6:	f7fe fb27 	bl	8013e38 <xQueueGenericSend>
 80157ea:	6278      	str	r0, [r7, #36]	; 0x24
 80157ec:	e012      	b.n	8015814 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80157ee:	4b0c      	ldr	r3, [pc, #48]	; (8015820 <xTimerGenericCommand+0x98>)
 80157f0:	6818      	ldr	r0, [r3, #0]
 80157f2:	f107 0110 	add.w	r1, r7, #16
 80157f6:	2300      	movs	r3, #0
 80157f8:	2200      	movs	r2, #0
 80157fa:	f7fe fb1d 	bl	8013e38 <xQueueGenericSend>
 80157fe:	6278      	str	r0, [r7, #36]	; 0x24
 8015800:	e008      	b.n	8015814 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015802:	4b07      	ldr	r3, [pc, #28]	; (8015820 <xTimerGenericCommand+0x98>)
 8015804:	6818      	ldr	r0, [r3, #0]
 8015806:	f107 0110 	add.w	r1, r7, #16
 801580a:	2300      	movs	r3, #0
 801580c:	683a      	ldr	r2, [r7, #0]
 801580e:	f7fe fc11 	bl	8014034 <xQueueGenericSendFromISR>
 8015812:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015816:	4618      	mov	r0, r3
 8015818:	3728      	adds	r7, #40	; 0x28
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	240018dc 	.word	0x240018dc

08015824 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b088      	sub	sp, #32
 8015828:	af02      	add	r7, sp, #8
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801582e:	4b22      	ldr	r3, [pc, #136]	; (80158b8 <prvProcessExpiredTimer+0x94>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	68db      	ldr	r3, [r3, #12]
 8015834:	68db      	ldr	r3, [r3, #12]
 8015836:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	3304      	adds	r3, #4
 801583c:	4618      	mov	r0, r3
 801583e:	f7fe f993 	bl	8013b68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015848:	f003 0304 	and.w	r3, r3, #4
 801584c:	2b00      	cmp	r3, #0
 801584e:	d022      	beq.n	8015896 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015850:	697b      	ldr	r3, [r7, #20]
 8015852:	699a      	ldr	r2, [r3, #24]
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	18d1      	adds	r1, r2, r3
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	683a      	ldr	r2, [r7, #0]
 801585c:	6978      	ldr	r0, [r7, #20]
 801585e:	f000 f8d1 	bl	8015a04 <prvInsertTimerInActiveList>
 8015862:	4603      	mov	r3, r0
 8015864:	2b00      	cmp	r3, #0
 8015866:	d01f      	beq.n	80158a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015868:	2300      	movs	r3, #0
 801586a:	9300      	str	r3, [sp, #0]
 801586c:	2300      	movs	r3, #0
 801586e:	687a      	ldr	r2, [r7, #4]
 8015870:	2100      	movs	r1, #0
 8015872:	6978      	ldr	r0, [r7, #20]
 8015874:	f7ff ff88 	bl	8015788 <xTimerGenericCommand>
 8015878:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801587a:	693b      	ldr	r3, [r7, #16]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d113      	bne.n	80158a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015884:	f383 8811 	msr	BASEPRI, r3
 8015888:	f3bf 8f6f 	isb	sy
 801588c:	f3bf 8f4f 	dsb	sy
 8015890:	60fb      	str	r3, [r7, #12]
}
 8015892:	bf00      	nop
 8015894:	e7fe      	b.n	8015894 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015896:	697b      	ldr	r3, [r7, #20]
 8015898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801589c:	f023 0301 	bic.w	r3, r3, #1
 80158a0:	b2da      	uxtb	r2, r3
 80158a2:	697b      	ldr	r3, [r7, #20]
 80158a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	6a1b      	ldr	r3, [r3, #32]
 80158ac:	6978      	ldr	r0, [r7, #20]
 80158ae:	4798      	blx	r3
}
 80158b0:	bf00      	nop
 80158b2:	3718      	adds	r7, #24
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}
 80158b8:	240018d4 	.word	0x240018d4

080158bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b084      	sub	sp, #16
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80158c4:	f107 0308 	add.w	r3, r7, #8
 80158c8:	4618      	mov	r0, r3
 80158ca:	f000 f857 	bl	801597c <prvGetNextExpireTime>
 80158ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	4619      	mov	r1, r3
 80158d4:	68f8      	ldr	r0, [r7, #12]
 80158d6:	f000 f803 	bl	80158e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80158da:	f000 f8d5 	bl	8015a88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80158de:	e7f1      	b.n	80158c4 <prvTimerTask+0x8>

080158e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b084      	sub	sp, #16
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80158ea:	f7ff f985 	bl	8014bf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80158ee:	f107 0308 	add.w	r3, r7, #8
 80158f2:	4618      	mov	r0, r3
 80158f4:	f000 f866 	bl	80159c4 <prvSampleTimeNow>
 80158f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80158fa:	68bb      	ldr	r3, [r7, #8]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d130      	bne.n	8015962 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d10a      	bne.n	801591c <prvProcessTimerOrBlockTask+0x3c>
 8015906:	687a      	ldr	r2, [r7, #4]
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	429a      	cmp	r2, r3
 801590c:	d806      	bhi.n	801591c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801590e:	f7ff f981 	bl	8014c14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015912:	68f9      	ldr	r1, [r7, #12]
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f7ff ff85 	bl	8015824 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801591a:	e024      	b.n	8015966 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d008      	beq.n	8015934 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015922:	4b13      	ldr	r3, [pc, #76]	; (8015970 <prvProcessTimerOrBlockTask+0x90>)
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d101      	bne.n	8015930 <prvProcessTimerOrBlockTask+0x50>
 801592c:	2301      	movs	r3, #1
 801592e:	e000      	b.n	8015932 <prvProcessTimerOrBlockTask+0x52>
 8015930:	2300      	movs	r3, #0
 8015932:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015934:	4b0f      	ldr	r3, [pc, #60]	; (8015974 <prvProcessTimerOrBlockTask+0x94>)
 8015936:	6818      	ldr	r0, [r3, #0]
 8015938:	687a      	ldr	r2, [r7, #4]
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	1ad3      	subs	r3, r2, r3
 801593e:	683a      	ldr	r2, [r7, #0]
 8015940:	4619      	mov	r1, r3
 8015942:	f7fe fee9 	bl	8014718 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015946:	f7ff f965 	bl	8014c14 <xTaskResumeAll>
 801594a:	4603      	mov	r3, r0
 801594c:	2b00      	cmp	r3, #0
 801594e:	d10a      	bne.n	8015966 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015950:	4b09      	ldr	r3, [pc, #36]	; (8015978 <prvProcessTimerOrBlockTask+0x98>)
 8015952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015956:	601a      	str	r2, [r3, #0]
 8015958:	f3bf 8f4f 	dsb	sy
 801595c:	f3bf 8f6f 	isb	sy
}
 8015960:	e001      	b.n	8015966 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015962:	f7ff f957 	bl	8014c14 <xTaskResumeAll>
}
 8015966:	bf00      	nop
 8015968:	3710      	adds	r7, #16
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	240018d8 	.word	0x240018d8
 8015974:	240018dc 	.word	0x240018dc
 8015978:	e000ed04 	.word	0xe000ed04

0801597c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801597c:	b480      	push	{r7}
 801597e:	b085      	sub	sp, #20
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015984:	4b0e      	ldr	r3, [pc, #56]	; (80159c0 <prvGetNextExpireTime+0x44>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d101      	bne.n	8015992 <prvGetNextExpireTime+0x16>
 801598e:	2201      	movs	r2, #1
 8015990:	e000      	b.n	8015994 <prvGetNextExpireTime+0x18>
 8015992:	2200      	movs	r2, #0
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d105      	bne.n	80159ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80159a0:	4b07      	ldr	r3, [pc, #28]	; (80159c0 <prvGetNextExpireTime+0x44>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	60fb      	str	r3, [r7, #12]
 80159aa:	e001      	b.n	80159b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80159ac:	2300      	movs	r3, #0
 80159ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80159b0:	68fb      	ldr	r3, [r7, #12]
}
 80159b2:	4618      	mov	r0, r3
 80159b4:	3714      	adds	r7, #20
 80159b6:	46bd      	mov	sp, r7
 80159b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159bc:	4770      	bx	lr
 80159be:	bf00      	nop
 80159c0:	240018d4 	.word	0x240018d4

080159c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b084      	sub	sp, #16
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80159cc:	f7ff f9c0 	bl	8014d50 <xTaskGetTickCount>
 80159d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80159d2:	4b0b      	ldr	r3, [pc, #44]	; (8015a00 <prvSampleTimeNow+0x3c>)
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	68fa      	ldr	r2, [r7, #12]
 80159d8:	429a      	cmp	r2, r3
 80159da:	d205      	bcs.n	80159e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80159dc:	f000 f936 	bl	8015c4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	2201      	movs	r2, #1
 80159e4:	601a      	str	r2, [r3, #0]
 80159e6:	e002      	b.n	80159ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	2200      	movs	r2, #0
 80159ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80159ee:	4a04      	ldr	r2, [pc, #16]	; (8015a00 <prvSampleTimeNow+0x3c>)
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80159f4:	68fb      	ldr	r3, [r7, #12]
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3710      	adds	r7, #16
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	240018e4 	.word	0x240018e4

08015a04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b086      	sub	sp, #24
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	60f8      	str	r0, [r7, #12]
 8015a0c:	60b9      	str	r1, [r7, #8]
 8015a0e:	607a      	str	r2, [r7, #4]
 8015a10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015a12:	2300      	movs	r3, #0
 8015a14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	68ba      	ldr	r2, [r7, #8]
 8015a1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	68fa      	ldr	r2, [r7, #12]
 8015a20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015a22:	68ba      	ldr	r2, [r7, #8]
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	429a      	cmp	r2, r3
 8015a28:	d812      	bhi.n	8015a50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a2a:	687a      	ldr	r2, [r7, #4]
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	1ad2      	subs	r2, r2, r3
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	699b      	ldr	r3, [r3, #24]
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d302      	bcc.n	8015a3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015a38:	2301      	movs	r3, #1
 8015a3a:	617b      	str	r3, [r7, #20]
 8015a3c:	e01b      	b.n	8015a76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015a3e:	4b10      	ldr	r3, [pc, #64]	; (8015a80 <prvInsertTimerInActiveList+0x7c>)
 8015a40:	681a      	ldr	r2, [r3, #0]
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	3304      	adds	r3, #4
 8015a46:	4619      	mov	r1, r3
 8015a48:	4610      	mov	r0, r2
 8015a4a:	f7fe f854 	bl	8013af6 <vListInsert>
 8015a4e:	e012      	b.n	8015a76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015a50:	687a      	ldr	r2, [r7, #4]
 8015a52:	683b      	ldr	r3, [r7, #0]
 8015a54:	429a      	cmp	r2, r3
 8015a56:	d206      	bcs.n	8015a66 <prvInsertTimerInActiveList+0x62>
 8015a58:	68ba      	ldr	r2, [r7, #8]
 8015a5a:	683b      	ldr	r3, [r7, #0]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d302      	bcc.n	8015a66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015a60:	2301      	movs	r3, #1
 8015a62:	617b      	str	r3, [r7, #20]
 8015a64:	e007      	b.n	8015a76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015a66:	4b07      	ldr	r3, [pc, #28]	; (8015a84 <prvInsertTimerInActiveList+0x80>)
 8015a68:	681a      	ldr	r2, [r3, #0]
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	3304      	adds	r3, #4
 8015a6e:	4619      	mov	r1, r3
 8015a70:	4610      	mov	r0, r2
 8015a72:	f7fe f840 	bl	8013af6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015a76:	697b      	ldr	r3, [r7, #20]
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3718      	adds	r7, #24
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}
 8015a80:	240018d8 	.word	0x240018d8
 8015a84:	240018d4 	.word	0x240018d4

08015a88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b08e      	sub	sp, #56	; 0x38
 8015a8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015a8e:	e0ca      	b.n	8015c26 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	da18      	bge.n	8015ac8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015a96:	1d3b      	adds	r3, r7, #4
 8015a98:	3304      	adds	r3, #4
 8015a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d10a      	bne.n	8015ab8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aa6:	f383 8811 	msr	BASEPRI, r3
 8015aaa:	f3bf 8f6f 	isb	sy
 8015aae:	f3bf 8f4f 	dsb	sy
 8015ab2:	61fb      	str	r3, [r7, #28]
}
 8015ab4:	bf00      	nop
 8015ab6:	e7fe      	b.n	8015ab6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015abe:	6850      	ldr	r0, [r2, #4]
 8015ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ac2:	6892      	ldr	r2, [r2, #8]
 8015ac4:	4611      	mov	r1, r2
 8015ac6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	f2c0 80aa 	blt.w	8015c24 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad6:	695b      	ldr	r3, [r3, #20]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d004      	beq.n	8015ae6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ade:	3304      	adds	r3, #4
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f7fe f841 	bl	8013b68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015ae6:	463b      	mov	r3, r7
 8015ae8:	4618      	mov	r0, r3
 8015aea:	f7ff ff6b 	bl	80159c4 <prvSampleTimeNow>
 8015aee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2b09      	cmp	r3, #9
 8015af4:	f200 8097 	bhi.w	8015c26 <prvProcessReceivedCommands+0x19e>
 8015af8:	a201      	add	r2, pc, #4	; (adr r2, 8015b00 <prvProcessReceivedCommands+0x78>)
 8015afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015afe:	bf00      	nop
 8015b00:	08015b29 	.word	0x08015b29
 8015b04:	08015b29 	.word	0x08015b29
 8015b08:	08015b29 	.word	0x08015b29
 8015b0c:	08015b9d 	.word	0x08015b9d
 8015b10:	08015bb1 	.word	0x08015bb1
 8015b14:	08015bfb 	.word	0x08015bfb
 8015b18:	08015b29 	.word	0x08015b29
 8015b1c:	08015b29 	.word	0x08015b29
 8015b20:	08015b9d 	.word	0x08015b9d
 8015b24:	08015bb1 	.word	0x08015bb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b2e:	f043 0301 	orr.w	r3, r3, #1
 8015b32:	b2da      	uxtb	r2, r3
 8015b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015b3a:	68ba      	ldr	r2, [r7, #8]
 8015b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b3e:	699b      	ldr	r3, [r3, #24]
 8015b40:	18d1      	adds	r1, r2, r3
 8015b42:	68bb      	ldr	r3, [r7, #8]
 8015b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b48:	f7ff ff5c 	bl	8015a04 <prvInsertTimerInActiveList>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d069      	beq.n	8015c26 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b54:	6a1b      	ldr	r3, [r3, #32]
 8015b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015b60:	f003 0304 	and.w	r3, r3, #4
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d05e      	beq.n	8015c26 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015b68:	68ba      	ldr	r2, [r7, #8]
 8015b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b6c:	699b      	ldr	r3, [r3, #24]
 8015b6e:	441a      	add	r2, r3
 8015b70:	2300      	movs	r3, #0
 8015b72:	9300      	str	r3, [sp, #0]
 8015b74:	2300      	movs	r3, #0
 8015b76:	2100      	movs	r1, #0
 8015b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b7a:	f7ff fe05 	bl	8015788 <xTimerGenericCommand>
 8015b7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015b80:	6a3b      	ldr	r3, [r7, #32]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d14f      	bne.n	8015c26 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b8a:	f383 8811 	msr	BASEPRI, r3
 8015b8e:	f3bf 8f6f 	isb	sy
 8015b92:	f3bf 8f4f 	dsb	sy
 8015b96:	61bb      	str	r3, [r7, #24]
}
 8015b98:	bf00      	nop
 8015b9a:	e7fe      	b.n	8015b9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ba2:	f023 0301 	bic.w	r3, r3, #1
 8015ba6:	b2da      	uxtb	r2, r3
 8015ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015baa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8015bae:	e03a      	b.n	8015c26 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015bb6:	f043 0301 	orr.w	r3, r3, #1
 8015bba:	b2da      	uxtb	r2, r3
 8015bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015bc2:	68ba      	ldr	r2, [r7, #8]
 8015bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bca:	699b      	ldr	r3, [r3, #24]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d10a      	bne.n	8015be6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd4:	f383 8811 	msr	BASEPRI, r3
 8015bd8:	f3bf 8f6f 	isb	sy
 8015bdc:	f3bf 8f4f 	dsb	sy
 8015be0:	617b      	str	r3, [r7, #20]
}
 8015be2:	bf00      	nop
 8015be4:	e7fe      	b.n	8015be4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015be8:	699a      	ldr	r2, [r3, #24]
 8015bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bec:	18d1      	adds	r1, r2, r3
 8015bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015bf4:	f7ff ff06 	bl	8015a04 <prvInsertTimerInActiveList>
					break;
 8015bf8:	e015      	b.n	8015c26 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c00:	f003 0302 	and.w	r3, r3, #2
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d103      	bne.n	8015c10 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c0a:	f000 fc01 	bl	8016410 <vPortFree>
 8015c0e:	e00a      	b.n	8015c26 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c16:	f023 0301 	bic.w	r3, r3, #1
 8015c1a:	b2da      	uxtb	r2, r3
 8015c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015c22:	e000      	b.n	8015c26 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015c24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015c26:	4b08      	ldr	r3, [pc, #32]	; (8015c48 <prvProcessReceivedCommands+0x1c0>)
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	1d39      	adds	r1, r7, #4
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f7fe fa9c 	bl	801416c <xQueueReceive>
 8015c34:	4603      	mov	r3, r0
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	f47f af2a 	bne.w	8015a90 <prvProcessReceivedCommands+0x8>
	}
}
 8015c3c:	bf00      	nop
 8015c3e:	bf00      	nop
 8015c40:	3730      	adds	r7, #48	; 0x30
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}
 8015c46:	bf00      	nop
 8015c48:	240018dc 	.word	0x240018dc

08015c4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b088      	sub	sp, #32
 8015c50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015c52:	e048      	b.n	8015ce6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015c54:	4b2d      	ldr	r3, [pc, #180]	; (8015d0c <prvSwitchTimerLists+0xc0>)
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	68db      	ldr	r3, [r3, #12]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c5e:	4b2b      	ldr	r3, [pc, #172]	; (8015d0c <prvSwitchTimerLists+0xc0>)
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	68db      	ldr	r3, [r3, #12]
 8015c64:	68db      	ldr	r3, [r3, #12]
 8015c66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	3304      	adds	r3, #4
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f7fd ff7b 	bl	8013b68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	6a1b      	ldr	r3, [r3, #32]
 8015c76:	68f8      	ldr	r0, [r7, #12]
 8015c78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015c80:	f003 0304 	and.w	r3, r3, #4
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d02e      	beq.n	8015ce6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	699b      	ldr	r3, [r3, #24]
 8015c8c:	693a      	ldr	r2, [r7, #16]
 8015c8e:	4413      	add	r3, r2
 8015c90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015c92:	68ba      	ldr	r2, [r7, #8]
 8015c94:	693b      	ldr	r3, [r7, #16]
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d90e      	bls.n	8015cb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	68ba      	ldr	r2, [r7, #8]
 8015c9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	68fa      	ldr	r2, [r7, #12]
 8015ca4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015ca6:	4b19      	ldr	r3, [pc, #100]	; (8015d0c <prvSwitchTimerLists+0xc0>)
 8015ca8:	681a      	ldr	r2, [r3, #0]
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	3304      	adds	r3, #4
 8015cae:	4619      	mov	r1, r3
 8015cb0:	4610      	mov	r0, r2
 8015cb2:	f7fd ff20 	bl	8013af6 <vListInsert>
 8015cb6:	e016      	b.n	8015ce6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015cb8:	2300      	movs	r3, #0
 8015cba:	9300      	str	r3, [sp, #0]
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	693a      	ldr	r2, [r7, #16]
 8015cc0:	2100      	movs	r1, #0
 8015cc2:	68f8      	ldr	r0, [r7, #12]
 8015cc4:	f7ff fd60 	bl	8015788 <xTimerGenericCommand>
 8015cc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d10a      	bne.n	8015ce6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cd4:	f383 8811 	msr	BASEPRI, r3
 8015cd8:	f3bf 8f6f 	isb	sy
 8015cdc:	f3bf 8f4f 	dsb	sy
 8015ce0:	603b      	str	r3, [r7, #0]
}
 8015ce2:	bf00      	nop
 8015ce4:	e7fe      	b.n	8015ce4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015ce6:	4b09      	ldr	r3, [pc, #36]	; (8015d0c <prvSwitchTimerLists+0xc0>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d1b1      	bne.n	8015c54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015cf0:	4b06      	ldr	r3, [pc, #24]	; (8015d0c <prvSwitchTimerLists+0xc0>)
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015cf6:	4b06      	ldr	r3, [pc, #24]	; (8015d10 <prvSwitchTimerLists+0xc4>)
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	4a04      	ldr	r2, [pc, #16]	; (8015d0c <prvSwitchTimerLists+0xc0>)
 8015cfc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015cfe:	4a04      	ldr	r2, [pc, #16]	; (8015d10 <prvSwitchTimerLists+0xc4>)
 8015d00:	697b      	ldr	r3, [r7, #20]
 8015d02:	6013      	str	r3, [r2, #0]
}
 8015d04:	bf00      	nop
 8015d06:	3718      	adds	r7, #24
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}
 8015d0c:	240018d4 	.word	0x240018d4
 8015d10:	240018d8 	.word	0x240018d8

08015d14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b082      	sub	sp, #8
 8015d18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015d1a:	f000 f98b 	bl	8016034 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015d1e:	4b15      	ldr	r3, [pc, #84]	; (8015d74 <prvCheckForValidListAndQueue+0x60>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d120      	bne.n	8015d68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015d26:	4814      	ldr	r0, [pc, #80]	; (8015d78 <prvCheckForValidListAndQueue+0x64>)
 8015d28:	f7fd fe94 	bl	8013a54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015d2c:	4813      	ldr	r0, [pc, #76]	; (8015d7c <prvCheckForValidListAndQueue+0x68>)
 8015d2e:	f7fd fe91 	bl	8013a54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015d32:	4b13      	ldr	r3, [pc, #76]	; (8015d80 <prvCheckForValidListAndQueue+0x6c>)
 8015d34:	4a10      	ldr	r2, [pc, #64]	; (8015d78 <prvCheckForValidListAndQueue+0x64>)
 8015d36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015d38:	4b12      	ldr	r3, [pc, #72]	; (8015d84 <prvCheckForValidListAndQueue+0x70>)
 8015d3a:	4a10      	ldr	r2, [pc, #64]	; (8015d7c <prvCheckForValidListAndQueue+0x68>)
 8015d3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015d3e:	2300      	movs	r3, #0
 8015d40:	9300      	str	r3, [sp, #0]
 8015d42:	4b11      	ldr	r3, [pc, #68]	; (8015d88 <prvCheckForValidListAndQueue+0x74>)
 8015d44:	4a11      	ldr	r2, [pc, #68]	; (8015d8c <prvCheckForValidListAndQueue+0x78>)
 8015d46:	2110      	movs	r1, #16
 8015d48:	200a      	movs	r0, #10
 8015d4a:	f7fd ff9f 	bl	8013c8c <xQueueGenericCreateStatic>
 8015d4e:	4603      	mov	r3, r0
 8015d50:	4a08      	ldr	r2, [pc, #32]	; (8015d74 <prvCheckForValidListAndQueue+0x60>)
 8015d52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015d54:	4b07      	ldr	r3, [pc, #28]	; (8015d74 <prvCheckForValidListAndQueue+0x60>)
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d005      	beq.n	8015d68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015d5c:	4b05      	ldr	r3, [pc, #20]	; (8015d74 <prvCheckForValidListAndQueue+0x60>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	490b      	ldr	r1, [pc, #44]	; (8015d90 <prvCheckForValidListAndQueue+0x7c>)
 8015d62:	4618      	mov	r0, r3
 8015d64:	f7fe fcae 	bl	80146c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015d68:	f000 f994 	bl	8016094 <vPortExitCritical>
}
 8015d6c:	bf00      	nop
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
 8015d72:	bf00      	nop
 8015d74:	240018dc 	.word	0x240018dc
 8015d78:	240018ac 	.word	0x240018ac
 8015d7c:	240018c0 	.word	0x240018c0
 8015d80:	240018d4 	.word	0x240018d4
 8015d84:	240018d8 	.word	0x240018d8
 8015d88:	24001988 	.word	0x24001988
 8015d8c:	240018e8 	.word	0x240018e8
 8015d90:	08017370 	.word	0x08017370

08015d94 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b08a      	sub	sp, #40	; 0x28
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	60f8      	str	r0, [r7, #12]
 8015d9c:	60b9      	str	r1, [r7, #8]
 8015d9e:	607a      	str	r2, [r7, #4]
 8015da0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015da2:	f06f 0301 	mvn.w	r3, #1
 8015da6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8015dac:	68bb      	ldr	r3, [r7, #8]
 8015dae:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015db4:	4b06      	ldr	r3, [pc, #24]	; (8015dd0 <xTimerPendFunctionCallFromISR+0x3c>)
 8015db6:	6818      	ldr	r0, [r3, #0]
 8015db8:	f107 0114 	add.w	r1, r7, #20
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	683a      	ldr	r2, [r7, #0]
 8015dc0:	f7fe f938 	bl	8014034 <xQueueGenericSendFromISR>
 8015dc4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8015dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015dc8:	4618      	mov	r0, r3
 8015dca:	3728      	adds	r7, #40	; 0x28
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}
 8015dd0:	240018dc 	.word	0x240018dc

08015dd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015dd4:	b480      	push	{r7}
 8015dd6:	b085      	sub	sp, #20
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	60f8      	str	r0, [r7, #12]
 8015ddc:	60b9      	str	r1, [r7, #8]
 8015dde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	3b04      	subs	r3, #4
 8015de4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	3b04      	subs	r3, #4
 8015df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	f023 0201 	bic.w	r2, r3, #1
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	3b04      	subs	r3, #4
 8015e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015e04:	4a0c      	ldr	r2, [pc, #48]	; (8015e38 <pxPortInitialiseStack+0x64>)
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	3b14      	subs	r3, #20
 8015e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015e10:	687a      	ldr	r2, [r7, #4]
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	3b04      	subs	r3, #4
 8015e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	f06f 0202 	mvn.w	r2, #2
 8015e22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	3b20      	subs	r3, #32
 8015e28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015e2a:	68fb      	ldr	r3, [r7, #12]
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	3714      	adds	r7, #20
 8015e30:	46bd      	mov	sp, r7
 8015e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e36:	4770      	bx	lr
 8015e38:	08015e3d 	.word	0x08015e3d

08015e3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015e3c:	b480      	push	{r7}
 8015e3e:	b085      	sub	sp, #20
 8015e40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015e42:	2300      	movs	r3, #0
 8015e44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015e46:	4b12      	ldr	r3, [pc, #72]	; (8015e90 <prvTaskExitError+0x54>)
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e4e:	d00a      	beq.n	8015e66 <prvTaskExitError+0x2a>
	__asm volatile
 8015e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e54:	f383 8811 	msr	BASEPRI, r3
 8015e58:	f3bf 8f6f 	isb	sy
 8015e5c:	f3bf 8f4f 	dsb	sy
 8015e60:	60fb      	str	r3, [r7, #12]
}
 8015e62:	bf00      	nop
 8015e64:	e7fe      	b.n	8015e64 <prvTaskExitError+0x28>
	__asm volatile
 8015e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e6a:	f383 8811 	msr	BASEPRI, r3
 8015e6e:	f3bf 8f6f 	isb	sy
 8015e72:	f3bf 8f4f 	dsb	sy
 8015e76:	60bb      	str	r3, [r7, #8]
}
 8015e78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015e7a:	bf00      	nop
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d0fc      	beq.n	8015e7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015e82:	bf00      	nop
 8015e84:	bf00      	nop
 8015e86:	3714      	adds	r7, #20
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8e:	4770      	bx	lr
 8015e90:	2400009c 	.word	0x2400009c
	...

08015ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015ea0:	4b07      	ldr	r3, [pc, #28]	; (8015ec0 <pxCurrentTCBConst2>)
 8015ea2:	6819      	ldr	r1, [r3, #0]
 8015ea4:	6808      	ldr	r0, [r1, #0]
 8015ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015eaa:	f380 8809 	msr	PSP, r0
 8015eae:	f3bf 8f6f 	isb	sy
 8015eb2:	f04f 0000 	mov.w	r0, #0
 8015eb6:	f380 8811 	msr	BASEPRI, r0
 8015eba:	4770      	bx	lr
 8015ebc:	f3af 8000 	nop.w

08015ec0 <pxCurrentTCBConst2>:
 8015ec0:	240013ac 	.word	0x240013ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015ec4:	bf00      	nop
 8015ec6:	bf00      	nop

08015ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015ec8:	4808      	ldr	r0, [pc, #32]	; (8015eec <prvPortStartFirstTask+0x24>)
 8015eca:	6800      	ldr	r0, [r0, #0]
 8015ecc:	6800      	ldr	r0, [r0, #0]
 8015ece:	f380 8808 	msr	MSP, r0
 8015ed2:	f04f 0000 	mov.w	r0, #0
 8015ed6:	f380 8814 	msr	CONTROL, r0
 8015eda:	b662      	cpsie	i
 8015edc:	b661      	cpsie	f
 8015ede:	f3bf 8f4f 	dsb	sy
 8015ee2:	f3bf 8f6f 	isb	sy
 8015ee6:	df00      	svc	0
 8015ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015eea:	bf00      	nop
 8015eec:	e000ed08 	.word	0xe000ed08

08015ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b086      	sub	sp, #24
 8015ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015ef6:	4b46      	ldr	r3, [pc, #280]	; (8016010 <xPortStartScheduler+0x120>)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	4a46      	ldr	r2, [pc, #280]	; (8016014 <xPortStartScheduler+0x124>)
 8015efc:	4293      	cmp	r3, r2
 8015efe:	d10a      	bne.n	8015f16 <xPortStartScheduler+0x26>
	__asm volatile
 8015f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f04:	f383 8811 	msr	BASEPRI, r3
 8015f08:	f3bf 8f6f 	isb	sy
 8015f0c:	f3bf 8f4f 	dsb	sy
 8015f10:	613b      	str	r3, [r7, #16]
}
 8015f12:	bf00      	nop
 8015f14:	e7fe      	b.n	8015f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015f16:	4b3e      	ldr	r3, [pc, #248]	; (8016010 <xPortStartScheduler+0x120>)
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	4a3f      	ldr	r2, [pc, #252]	; (8016018 <xPortStartScheduler+0x128>)
 8015f1c:	4293      	cmp	r3, r2
 8015f1e:	d10a      	bne.n	8015f36 <xPortStartScheduler+0x46>
	__asm volatile
 8015f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f24:	f383 8811 	msr	BASEPRI, r3
 8015f28:	f3bf 8f6f 	isb	sy
 8015f2c:	f3bf 8f4f 	dsb	sy
 8015f30:	60fb      	str	r3, [r7, #12]
}
 8015f32:	bf00      	nop
 8015f34:	e7fe      	b.n	8015f34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015f36:	4b39      	ldr	r3, [pc, #228]	; (801601c <xPortStartScheduler+0x12c>)
 8015f38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015f3a:	697b      	ldr	r3, [r7, #20]
 8015f3c:	781b      	ldrb	r3, [r3, #0]
 8015f3e:	b2db      	uxtb	r3, r3
 8015f40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015f42:	697b      	ldr	r3, [r7, #20]
 8015f44:	22ff      	movs	r2, #255	; 0xff
 8015f46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015f48:	697b      	ldr	r3, [r7, #20]
 8015f4a:	781b      	ldrb	r3, [r3, #0]
 8015f4c:	b2db      	uxtb	r3, r3
 8015f4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015f50:	78fb      	ldrb	r3, [r7, #3]
 8015f52:	b2db      	uxtb	r3, r3
 8015f54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015f58:	b2da      	uxtb	r2, r3
 8015f5a:	4b31      	ldr	r3, [pc, #196]	; (8016020 <xPortStartScheduler+0x130>)
 8015f5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015f5e:	4b31      	ldr	r3, [pc, #196]	; (8016024 <xPortStartScheduler+0x134>)
 8015f60:	2207      	movs	r2, #7
 8015f62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015f64:	e009      	b.n	8015f7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015f66:	4b2f      	ldr	r3, [pc, #188]	; (8016024 <xPortStartScheduler+0x134>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	3b01      	subs	r3, #1
 8015f6c:	4a2d      	ldr	r2, [pc, #180]	; (8016024 <xPortStartScheduler+0x134>)
 8015f6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015f70:	78fb      	ldrb	r3, [r7, #3]
 8015f72:	b2db      	uxtb	r3, r3
 8015f74:	005b      	lsls	r3, r3, #1
 8015f76:	b2db      	uxtb	r3, r3
 8015f78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015f7a:	78fb      	ldrb	r3, [r7, #3]
 8015f7c:	b2db      	uxtb	r3, r3
 8015f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015f82:	2b80      	cmp	r3, #128	; 0x80
 8015f84:	d0ef      	beq.n	8015f66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015f86:	4b27      	ldr	r3, [pc, #156]	; (8016024 <xPortStartScheduler+0x134>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	f1c3 0307 	rsb	r3, r3, #7
 8015f8e:	2b04      	cmp	r3, #4
 8015f90:	d00a      	beq.n	8015fa8 <xPortStartScheduler+0xb8>
	__asm volatile
 8015f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f96:	f383 8811 	msr	BASEPRI, r3
 8015f9a:	f3bf 8f6f 	isb	sy
 8015f9e:	f3bf 8f4f 	dsb	sy
 8015fa2:	60bb      	str	r3, [r7, #8]
}
 8015fa4:	bf00      	nop
 8015fa6:	e7fe      	b.n	8015fa6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015fa8:	4b1e      	ldr	r3, [pc, #120]	; (8016024 <xPortStartScheduler+0x134>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	021b      	lsls	r3, r3, #8
 8015fae:	4a1d      	ldr	r2, [pc, #116]	; (8016024 <xPortStartScheduler+0x134>)
 8015fb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015fb2:	4b1c      	ldr	r3, [pc, #112]	; (8016024 <xPortStartScheduler+0x134>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015fba:	4a1a      	ldr	r2, [pc, #104]	; (8016024 <xPortStartScheduler+0x134>)
 8015fbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	b2da      	uxtb	r2, r3
 8015fc2:	697b      	ldr	r3, [r7, #20]
 8015fc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015fc6:	4b18      	ldr	r3, [pc, #96]	; (8016028 <xPortStartScheduler+0x138>)
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	4a17      	ldr	r2, [pc, #92]	; (8016028 <xPortStartScheduler+0x138>)
 8015fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015fd2:	4b15      	ldr	r3, [pc, #84]	; (8016028 <xPortStartScheduler+0x138>)
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	4a14      	ldr	r2, [pc, #80]	; (8016028 <xPortStartScheduler+0x138>)
 8015fd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015fdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015fde:	f000 f8dd 	bl	801619c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015fe2:	4b12      	ldr	r3, [pc, #72]	; (801602c <xPortStartScheduler+0x13c>)
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015fe8:	f000 f8fc 	bl	80161e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015fec:	4b10      	ldr	r3, [pc, #64]	; (8016030 <xPortStartScheduler+0x140>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	4a0f      	ldr	r2, [pc, #60]	; (8016030 <xPortStartScheduler+0x140>)
 8015ff2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015ff6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015ff8:	f7ff ff66 	bl	8015ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015ffc:	f7fe ff7a 	bl	8014ef4 <vTaskSwitchContext>
	prvTaskExitError();
 8016000:	f7ff ff1c 	bl	8015e3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016004:	2300      	movs	r3, #0
}
 8016006:	4618      	mov	r0, r3
 8016008:	3718      	adds	r7, #24
 801600a:	46bd      	mov	sp, r7
 801600c:	bd80      	pop	{r7, pc}
 801600e:	bf00      	nop
 8016010:	e000ed00 	.word	0xe000ed00
 8016014:	410fc271 	.word	0x410fc271
 8016018:	410fc270 	.word	0x410fc270
 801601c:	e000e400 	.word	0xe000e400
 8016020:	240019d8 	.word	0x240019d8
 8016024:	240019dc 	.word	0x240019dc
 8016028:	e000ed20 	.word	0xe000ed20
 801602c:	2400009c 	.word	0x2400009c
 8016030:	e000ef34 	.word	0xe000ef34

08016034 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016034:	b480      	push	{r7}
 8016036:	b083      	sub	sp, #12
 8016038:	af00      	add	r7, sp, #0
	__asm volatile
 801603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801603e:	f383 8811 	msr	BASEPRI, r3
 8016042:	f3bf 8f6f 	isb	sy
 8016046:	f3bf 8f4f 	dsb	sy
 801604a:	607b      	str	r3, [r7, #4]
}
 801604c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801604e:	4b0f      	ldr	r3, [pc, #60]	; (801608c <vPortEnterCritical+0x58>)
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	3301      	adds	r3, #1
 8016054:	4a0d      	ldr	r2, [pc, #52]	; (801608c <vPortEnterCritical+0x58>)
 8016056:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016058:	4b0c      	ldr	r3, [pc, #48]	; (801608c <vPortEnterCritical+0x58>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	2b01      	cmp	r3, #1
 801605e:	d10f      	bne.n	8016080 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016060:	4b0b      	ldr	r3, [pc, #44]	; (8016090 <vPortEnterCritical+0x5c>)
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	b2db      	uxtb	r3, r3
 8016066:	2b00      	cmp	r3, #0
 8016068:	d00a      	beq.n	8016080 <vPortEnterCritical+0x4c>
	__asm volatile
 801606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801606e:	f383 8811 	msr	BASEPRI, r3
 8016072:	f3bf 8f6f 	isb	sy
 8016076:	f3bf 8f4f 	dsb	sy
 801607a:	603b      	str	r3, [r7, #0]
}
 801607c:	bf00      	nop
 801607e:	e7fe      	b.n	801607e <vPortEnterCritical+0x4a>
	}
}
 8016080:	bf00      	nop
 8016082:	370c      	adds	r7, #12
 8016084:	46bd      	mov	sp, r7
 8016086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608a:	4770      	bx	lr
 801608c:	2400009c 	.word	0x2400009c
 8016090:	e000ed04 	.word	0xe000ed04

08016094 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016094:	b480      	push	{r7}
 8016096:	b083      	sub	sp, #12
 8016098:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801609a:	4b12      	ldr	r3, [pc, #72]	; (80160e4 <vPortExitCritical+0x50>)
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d10a      	bne.n	80160b8 <vPortExitCritical+0x24>
	__asm volatile
 80160a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160a6:	f383 8811 	msr	BASEPRI, r3
 80160aa:	f3bf 8f6f 	isb	sy
 80160ae:	f3bf 8f4f 	dsb	sy
 80160b2:	607b      	str	r3, [r7, #4]
}
 80160b4:	bf00      	nop
 80160b6:	e7fe      	b.n	80160b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80160b8:	4b0a      	ldr	r3, [pc, #40]	; (80160e4 <vPortExitCritical+0x50>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	3b01      	subs	r3, #1
 80160be:	4a09      	ldr	r2, [pc, #36]	; (80160e4 <vPortExitCritical+0x50>)
 80160c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80160c2:	4b08      	ldr	r3, [pc, #32]	; (80160e4 <vPortExitCritical+0x50>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d105      	bne.n	80160d6 <vPortExitCritical+0x42>
 80160ca:	2300      	movs	r3, #0
 80160cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80160ce:	683b      	ldr	r3, [r7, #0]
 80160d0:	f383 8811 	msr	BASEPRI, r3
}
 80160d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80160d6:	bf00      	nop
 80160d8:	370c      	adds	r7, #12
 80160da:	46bd      	mov	sp, r7
 80160dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e0:	4770      	bx	lr
 80160e2:	bf00      	nop
 80160e4:	2400009c 	.word	0x2400009c
	...

080160f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80160f0:	f3ef 8009 	mrs	r0, PSP
 80160f4:	f3bf 8f6f 	isb	sy
 80160f8:	4b15      	ldr	r3, [pc, #84]	; (8016150 <pxCurrentTCBConst>)
 80160fa:	681a      	ldr	r2, [r3, #0]
 80160fc:	f01e 0f10 	tst.w	lr, #16
 8016100:	bf08      	it	eq
 8016102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801610a:	6010      	str	r0, [r2, #0]
 801610c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016110:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016114:	f380 8811 	msr	BASEPRI, r0
 8016118:	f3bf 8f4f 	dsb	sy
 801611c:	f3bf 8f6f 	isb	sy
 8016120:	f7fe fee8 	bl	8014ef4 <vTaskSwitchContext>
 8016124:	f04f 0000 	mov.w	r0, #0
 8016128:	f380 8811 	msr	BASEPRI, r0
 801612c:	bc09      	pop	{r0, r3}
 801612e:	6819      	ldr	r1, [r3, #0]
 8016130:	6808      	ldr	r0, [r1, #0]
 8016132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016136:	f01e 0f10 	tst.w	lr, #16
 801613a:	bf08      	it	eq
 801613c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016140:	f380 8809 	msr	PSP, r0
 8016144:	f3bf 8f6f 	isb	sy
 8016148:	4770      	bx	lr
 801614a:	bf00      	nop
 801614c:	f3af 8000 	nop.w

08016150 <pxCurrentTCBConst>:
 8016150:	240013ac 	.word	0x240013ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016154:	bf00      	nop
 8016156:	bf00      	nop

08016158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016158:	b580      	push	{r7, lr}
 801615a:	b082      	sub	sp, #8
 801615c:	af00      	add	r7, sp, #0
	__asm volatile
 801615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016162:	f383 8811 	msr	BASEPRI, r3
 8016166:	f3bf 8f6f 	isb	sy
 801616a:	f3bf 8f4f 	dsb	sy
 801616e:	607b      	str	r3, [r7, #4]
}
 8016170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016172:	f7fe fdfd 	bl	8014d70 <xTaskIncrementTick>
 8016176:	4603      	mov	r3, r0
 8016178:	2b00      	cmp	r3, #0
 801617a:	d003      	beq.n	8016184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801617c:	4b06      	ldr	r3, [pc, #24]	; (8016198 <xPortSysTickHandler+0x40>)
 801617e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016182:	601a      	str	r2, [r3, #0]
 8016184:	2300      	movs	r3, #0
 8016186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016188:	683b      	ldr	r3, [r7, #0]
 801618a:	f383 8811 	msr	BASEPRI, r3
}
 801618e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016190:	bf00      	nop
 8016192:	3708      	adds	r7, #8
 8016194:	46bd      	mov	sp, r7
 8016196:	bd80      	pop	{r7, pc}
 8016198:	e000ed04 	.word	0xe000ed04

0801619c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801619c:	b480      	push	{r7}
 801619e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80161a0:	4b0b      	ldr	r3, [pc, #44]	; (80161d0 <vPortSetupTimerInterrupt+0x34>)
 80161a2:	2200      	movs	r2, #0
 80161a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80161a6:	4b0b      	ldr	r3, [pc, #44]	; (80161d4 <vPortSetupTimerInterrupt+0x38>)
 80161a8:	2200      	movs	r2, #0
 80161aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80161ac:	4b0a      	ldr	r3, [pc, #40]	; (80161d8 <vPortSetupTimerInterrupt+0x3c>)
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	4a0a      	ldr	r2, [pc, #40]	; (80161dc <vPortSetupTimerInterrupt+0x40>)
 80161b2:	fba2 2303 	umull	r2, r3, r2, r3
 80161b6:	099b      	lsrs	r3, r3, #6
 80161b8:	4a09      	ldr	r2, [pc, #36]	; (80161e0 <vPortSetupTimerInterrupt+0x44>)
 80161ba:	3b01      	subs	r3, #1
 80161bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80161be:	4b04      	ldr	r3, [pc, #16]	; (80161d0 <vPortSetupTimerInterrupt+0x34>)
 80161c0:	2207      	movs	r2, #7
 80161c2:	601a      	str	r2, [r3, #0]
}
 80161c4:	bf00      	nop
 80161c6:	46bd      	mov	sp, r7
 80161c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161cc:	4770      	bx	lr
 80161ce:	bf00      	nop
 80161d0:	e000e010 	.word	0xe000e010
 80161d4:	e000e018 	.word	0xe000e018
 80161d8:	2400008c 	.word	0x2400008c
 80161dc:	10624dd3 	.word	0x10624dd3
 80161e0:	e000e014 	.word	0xe000e014

080161e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80161e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80161f4 <vPortEnableVFP+0x10>
 80161e8:	6801      	ldr	r1, [r0, #0]
 80161ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80161ee:	6001      	str	r1, [r0, #0]
 80161f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80161f2:	bf00      	nop
 80161f4:	e000ed88 	.word	0xe000ed88

080161f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80161f8:	b480      	push	{r7}
 80161fa:	b085      	sub	sp, #20
 80161fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80161fe:	f3ef 8305 	mrs	r3, IPSR
 8016202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	2b0f      	cmp	r3, #15
 8016208:	d914      	bls.n	8016234 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801620a:	4a17      	ldr	r2, [pc, #92]	; (8016268 <vPortValidateInterruptPriority+0x70>)
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	4413      	add	r3, r2
 8016210:	781b      	ldrb	r3, [r3, #0]
 8016212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016214:	4b15      	ldr	r3, [pc, #84]	; (801626c <vPortValidateInterruptPriority+0x74>)
 8016216:	781b      	ldrb	r3, [r3, #0]
 8016218:	7afa      	ldrb	r2, [r7, #11]
 801621a:	429a      	cmp	r2, r3
 801621c:	d20a      	bcs.n	8016234 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016222:	f383 8811 	msr	BASEPRI, r3
 8016226:	f3bf 8f6f 	isb	sy
 801622a:	f3bf 8f4f 	dsb	sy
 801622e:	607b      	str	r3, [r7, #4]
}
 8016230:	bf00      	nop
 8016232:	e7fe      	b.n	8016232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016234:	4b0e      	ldr	r3, [pc, #56]	; (8016270 <vPortValidateInterruptPriority+0x78>)
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801623c:	4b0d      	ldr	r3, [pc, #52]	; (8016274 <vPortValidateInterruptPriority+0x7c>)
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	429a      	cmp	r2, r3
 8016242:	d90a      	bls.n	801625a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016248:	f383 8811 	msr	BASEPRI, r3
 801624c:	f3bf 8f6f 	isb	sy
 8016250:	f3bf 8f4f 	dsb	sy
 8016254:	603b      	str	r3, [r7, #0]
}
 8016256:	bf00      	nop
 8016258:	e7fe      	b.n	8016258 <vPortValidateInterruptPriority+0x60>
	}
 801625a:	bf00      	nop
 801625c:	3714      	adds	r7, #20
 801625e:	46bd      	mov	sp, r7
 8016260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016264:	4770      	bx	lr
 8016266:	bf00      	nop
 8016268:	e000e3f0 	.word	0xe000e3f0
 801626c:	240019d8 	.word	0x240019d8
 8016270:	e000ed0c 	.word	0xe000ed0c
 8016274:	240019dc 	.word	0x240019dc

08016278 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b08a      	sub	sp, #40	; 0x28
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016280:	2300      	movs	r3, #0
 8016282:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016284:	f7fe fcb8 	bl	8014bf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016288:	4b5b      	ldr	r3, [pc, #364]	; (80163f8 <pvPortMalloc+0x180>)
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d101      	bne.n	8016294 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016290:	f000 f920 	bl	80164d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016294:	4b59      	ldr	r3, [pc, #356]	; (80163fc <pvPortMalloc+0x184>)
 8016296:	681a      	ldr	r2, [r3, #0]
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	4013      	ands	r3, r2
 801629c:	2b00      	cmp	r3, #0
 801629e:	f040 8093 	bne.w	80163c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d01d      	beq.n	80162e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80162a8:	2208      	movs	r2, #8
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	4413      	add	r3, r2
 80162ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	f003 0307 	and.w	r3, r3, #7
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d014      	beq.n	80162e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f023 0307 	bic.w	r3, r3, #7
 80162c0:	3308      	adds	r3, #8
 80162c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	f003 0307 	and.w	r3, r3, #7
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d00a      	beq.n	80162e4 <pvPortMalloc+0x6c>
	__asm volatile
 80162ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162d2:	f383 8811 	msr	BASEPRI, r3
 80162d6:	f3bf 8f6f 	isb	sy
 80162da:	f3bf 8f4f 	dsb	sy
 80162de:	617b      	str	r3, [r7, #20]
}
 80162e0:	bf00      	nop
 80162e2:	e7fe      	b.n	80162e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d06e      	beq.n	80163c8 <pvPortMalloc+0x150>
 80162ea:	4b45      	ldr	r3, [pc, #276]	; (8016400 <pvPortMalloc+0x188>)
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	687a      	ldr	r2, [r7, #4]
 80162f0:	429a      	cmp	r2, r3
 80162f2:	d869      	bhi.n	80163c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80162f4:	4b43      	ldr	r3, [pc, #268]	; (8016404 <pvPortMalloc+0x18c>)
 80162f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80162f8:	4b42      	ldr	r3, [pc, #264]	; (8016404 <pvPortMalloc+0x18c>)
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80162fe:	e004      	b.n	801630a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016302:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	687a      	ldr	r2, [r7, #4]
 8016310:	429a      	cmp	r2, r3
 8016312:	d903      	bls.n	801631c <pvPortMalloc+0xa4>
 8016314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d1f1      	bne.n	8016300 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801631c:	4b36      	ldr	r3, [pc, #216]	; (80163f8 <pvPortMalloc+0x180>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016322:	429a      	cmp	r2, r3
 8016324:	d050      	beq.n	80163c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016326:	6a3b      	ldr	r3, [r7, #32]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	2208      	movs	r2, #8
 801632c:	4413      	add	r3, r2
 801632e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016332:	681a      	ldr	r2, [r3, #0]
 8016334:	6a3b      	ldr	r3, [r7, #32]
 8016336:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801633a:	685a      	ldr	r2, [r3, #4]
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	1ad2      	subs	r2, r2, r3
 8016340:	2308      	movs	r3, #8
 8016342:	005b      	lsls	r3, r3, #1
 8016344:	429a      	cmp	r2, r3
 8016346:	d91f      	bls.n	8016388 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	4413      	add	r3, r2
 801634e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016350:	69bb      	ldr	r3, [r7, #24]
 8016352:	f003 0307 	and.w	r3, r3, #7
 8016356:	2b00      	cmp	r3, #0
 8016358:	d00a      	beq.n	8016370 <pvPortMalloc+0xf8>
	__asm volatile
 801635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801635e:	f383 8811 	msr	BASEPRI, r3
 8016362:	f3bf 8f6f 	isb	sy
 8016366:	f3bf 8f4f 	dsb	sy
 801636a:	613b      	str	r3, [r7, #16]
}
 801636c:	bf00      	nop
 801636e:	e7fe      	b.n	801636e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016372:	685a      	ldr	r2, [r3, #4]
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	1ad2      	subs	r2, r2, r3
 8016378:	69bb      	ldr	r3, [r7, #24]
 801637a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801637e:	687a      	ldr	r2, [r7, #4]
 8016380:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016382:	69b8      	ldr	r0, [r7, #24]
 8016384:	f000 f908 	bl	8016598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016388:	4b1d      	ldr	r3, [pc, #116]	; (8016400 <pvPortMalloc+0x188>)
 801638a:	681a      	ldr	r2, [r3, #0]
 801638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801638e:	685b      	ldr	r3, [r3, #4]
 8016390:	1ad3      	subs	r3, r2, r3
 8016392:	4a1b      	ldr	r2, [pc, #108]	; (8016400 <pvPortMalloc+0x188>)
 8016394:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016396:	4b1a      	ldr	r3, [pc, #104]	; (8016400 <pvPortMalloc+0x188>)
 8016398:	681a      	ldr	r2, [r3, #0]
 801639a:	4b1b      	ldr	r3, [pc, #108]	; (8016408 <pvPortMalloc+0x190>)
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	429a      	cmp	r2, r3
 80163a0:	d203      	bcs.n	80163aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80163a2:	4b17      	ldr	r3, [pc, #92]	; (8016400 <pvPortMalloc+0x188>)
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	4a18      	ldr	r2, [pc, #96]	; (8016408 <pvPortMalloc+0x190>)
 80163a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80163aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ac:	685a      	ldr	r2, [r3, #4]
 80163ae:	4b13      	ldr	r3, [pc, #76]	; (80163fc <pvPortMalloc+0x184>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	431a      	orrs	r2, r3
 80163b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80163b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ba:	2200      	movs	r2, #0
 80163bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80163be:	4b13      	ldr	r3, [pc, #76]	; (801640c <pvPortMalloc+0x194>)
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	3301      	adds	r3, #1
 80163c4:	4a11      	ldr	r2, [pc, #68]	; (801640c <pvPortMalloc+0x194>)
 80163c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80163c8:	f7fe fc24 	bl	8014c14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80163cc:	69fb      	ldr	r3, [r7, #28]
 80163ce:	f003 0307 	and.w	r3, r3, #7
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d00a      	beq.n	80163ec <pvPortMalloc+0x174>
	__asm volatile
 80163d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163da:	f383 8811 	msr	BASEPRI, r3
 80163de:	f3bf 8f6f 	isb	sy
 80163e2:	f3bf 8f4f 	dsb	sy
 80163e6:	60fb      	str	r3, [r7, #12]
}
 80163e8:	bf00      	nop
 80163ea:	e7fe      	b.n	80163ea <pvPortMalloc+0x172>
	return pvReturn;
 80163ec:	69fb      	ldr	r3, [r7, #28]
}
 80163ee:	4618      	mov	r0, r3
 80163f0:	3728      	adds	r7, #40	; 0x28
 80163f2:	46bd      	mov	sp, r7
 80163f4:	bd80      	pop	{r7, pc}
 80163f6:	bf00      	nop
 80163f8:	240055e8 	.word	0x240055e8
 80163fc:	240055fc 	.word	0x240055fc
 8016400:	240055ec 	.word	0x240055ec
 8016404:	240055e0 	.word	0x240055e0
 8016408:	240055f0 	.word	0x240055f0
 801640c:	240055f4 	.word	0x240055f4

08016410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b086      	sub	sp, #24
 8016414:	af00      	add	r7, sp, #0
 8016416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d04d      	beq.n	80164be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016422:	2308      	movs	r3, #8
 8016424:	425b      	negs	r3, r3
 8016426:	697a      	ldr	r2, [r7, #20]
 8016428:	4413      	add	r3, r2
 801642a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801642c:	697b      	ldr	r3, [r7, #20]
 801642e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016430:	693b      	ldr	r3, [r7, #16]
 8016432:	685a      	ldr	r2, [r3, #4]
 8016434:	4b24      	ldr	r3, [pc, #144]	; (80164c8 <vPortFree+0xb8>)
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	4013      	ands	r3, r2
 801643a:	2b00      	cmp	r3, #0
 801643c:	d10a      	bne.n	8016454 <vPortFree+0x44>
	__asm volatile
 801643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016442:	f383 8811 	msr	BASEPRI, r3
 8016446:	f3bf 8f6f 	isb	sy
 801644a:	f3bf 8f4f 	dsb	sy
 801644e:	60fb      	str	r3, [r7, #12]
}
 8016450:	bf00      	nop
 8016452:	e7fe      	b.n	8016452 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016454:	693b      	ldr	r3, [r7, #16]
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d00a      	beq.n	8016472 <vPortFree+0x62>
	__asm volatile
 801645c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016460:	f383 8811 	msr	BASEPRI, r3
 8016464:	f3bf 8f6f 	isb	sy
 8016468:	f3bf 8f4f 	dsb	sy
 801646c:	60bb      	str	r3, [r7, #8]
}
 801646e:	bf00      	nop
 8016470:	e7fe      	b.n	8016470 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016472:	693b      	ldr	r3, [r7, #16]
 8016474:	685a      	ldr	r2, [r3, #4]
 8016476:	4b14      	ldr	r3, [pc, #80]	; (80164c8 <vPortFree+0xb8>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	4013      	ands	r3, r2
 801647c:	2b00      	cmp	r3, #0
 801647e:	d01e      	beq.n	80164be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016480:	693b      	ldr	r3, [r7, #16]
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d11a      	bne.n	80164be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016488:	693b      	ldr	r3, [r7, #16]
 801648a:	685a      	ldr	r2, [r3, #4]
 801648c:	4b0e      	ldr	r3, [pc, #56]	; (80164c8 <vPortFree+0xb8>)
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	43db      	mvns	r3, r3
 8016492:	401a      	ands	r2, r3
 8016494:	693b      	ldr	r3, [r7, #16]
 8016496:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016498:	f7fe fbae 	bl	8014bf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801649c:	693b      	ldr	r3, [r7, #16]
 801649e:	685a      	ldr	r2, [r3, #4]
 80164a0:	4b0a      	ldr	r3, [pc, #40]	; (80164cc <vPortFree+0xbc>)
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	4413      	add	r3, r2
 80164a6:	4a09      	ldr	r2, [pc, #36]	; (80164cc <vPortFree+0xbc>)
 80164a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80164aa:	6938      	ldr	r0, [r7, #16]
 80164ac:	f000 f874 	bl	8016598 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80164b0:	4b07      	ldr	r3, [pc, #28]	; (80164d0 <vPortFree+0xc0>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	3301      	adds	r3, #1
 80164b6:	4a06      	ldr	r2, [pc, #24]	; (80164d0 <vPortFree+0xc0>)
 80164b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80164ba:	f7fe fbab 	bl	8014c14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80164be:	bf00      	nop
 80164c0:	3718      	adds	r7, #24
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}
 80164c6:	bf00      	nop
 80164c8:	240055fc 	.word	0x240055fc
 80164cc:	240055ec 	.word	0x240055ec
 80164d0:	240055f8 	.word	0x240055f8

080164d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80164d4:	b480      	push	{r7}
 80164d6:	b085      	sub	sp, #20
 80164d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80164da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80164de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80164e0:	4b27      	ldr	r3, [pc, #156]	; (8016580 <prvHeapInit+0xac>)
 80164e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	f003 0307 	and.w	r3, r3, #7
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d00c      	beq.n	8016508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	3307      	adds	r3, #7
 80164f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	f023 0307 	bic.w	r3, r3, #7
 80164fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80164fc:	68ba      	ldr	r2, [r7, #8]
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	1ad3      	subs	r3, r2, r3
 8016502:	4a1f      	ldr	r2, [pc, #124]	; (8016580 <prvHeapInit+0xac>)
 8016504:	4413      	add	r3, r2
 8016506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801650c:	4a1d      	ldr	r2, [pc, #116]	; (8016584 <prvHeapInit+0xb0>)
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016512:	4b1c      	ldr	r3, [pc, #112]	; (8016584 <prvHeapInit+0xb0>)
 8016514:	2200      	movs	r2, #0
 8016516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	68ba      	ldr	r2, [r7, #8]
 801651c:	4413      	add	r3, r2
 801651e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016520:	2208      	movs	r2, #8
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	1a9b      	subs	r3, r3, r2
 8016526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	f023 0307 	bic.w	r3, r3, #7
 801652e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	4a15      	ldr	r2, [pc, #84]	; (8016588 <prvHeapInit+0xb4>)
 8016534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016536:	4b14      	ldr	r3, [pc, #80]	; (8016588 <prvHeapInit+0xb4>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	2200      	movs	r2, #0
 801653c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801653e:	4b12      	ldr	r3, [pc, #72]	; (8016588 <prvHeapInit+0xb4>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	2200      	movs	r2, #0
 8016544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801654a:	683b      	ldr	r3, [r7, #0]
 801654c:	68fa      	ldr	r2, [r7, #12]
 801654e:	1ad2      	subs	r2, r2, r3
 8016550:	683b      	ldr	r3, [r7, #0]
 8016552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016554:	4b0c      	ldr	r3, [pc, #48]	; (8016588 <prvHeapInit+0xb4>)
 8016556:	681a      	ldr	r2, [r3, #0]
 8016558:	683b      	ldr	r3, [r7, #0]
 801655a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801655c:	683b      	ldr	r3, [r7, #0]
 801655e:	685b      	ldr	r3, [r3, #4]
 8016560:	4a0a      	ldr	r2, [pc, #40]	; (801658c <prvHeapInit+0xb8>)
 8016562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016564:	683b      	ldr	r3, [r7, #0]
 8016566:	685b      	ldr	r3, [r3, #4]
 8016568:	4a09      	ldr	r2, [pc, #36]	; (8016590 <prvHeapInit+0xbc>)
 801656a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801656c:	4b09      	ldr	r3, [pc, #36]	; (8016594 <prvHeapInit+0xc0>)
 801656e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016572:	601a      	str	r2, [r3, #0]
}
 8016574:	bf00      	nop
 8016576:	3714      	adds	r7, #20
 8016578:	46bd      	mov	sp, r7
 801657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657e:	4770      	bx	lr
 8016580:	240019e0 	.word	0x240019e0
 8016584:	240055e0 	.word	0x240055e0
 8016588:	240055e8 	.word	0x240055e8
 801658c:	240055f0 	.word	0x240055f0
 8016590:	240055ec 	.word	0x240055ec
 8016594:	240055fc 	.word	0x240055fc

08016598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016598:	b480      	push	{r7}
 801659a:	b085      	sub	sp, #20
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80165a0:	4b28      	ldr	r3, [pc, #160]	; (8016644 <prvInsertBlockIntoFreeList+0xac>)
 80165a2:	60fb      	str	r3, [r7, #12]
 80165a4:	e002      	b.n	80165ac <prvInsertBlockIntoFreeList+0x14>
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	60fb      	str	r3, [r7, #12]
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	687a      	ldr	r2, [r7, #4]
 80165b2:	429a      	cmp	r2, r3
 80165b4:	d8f7      	bhi.n	80165a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	68ba      	ldr	r2, [r7, #8]
 80165c0:	4413      	add	r3, r2
 80165c2:	687a      	ldr	r2, [r7, #4]
 80165c4:	429a      	cmp	r2, r3
 80165c6:	d108      	bne.n	80165da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	685a      	ldr	r2, [r3, #4]
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	685b      	ldr	r3, [r3, #4]
 80165d0:	441a      	add	r2, r3
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	685b      	ldr	r3, [r3, #4]
 80165e2:	68ba      	ldr	r2, [r7, #8]
 80165e4:	441a      	add	r2, r3
 80165e6:	68fb      	ldr	r3, [r7, #12]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	429a      	cmp	r2, r3
 80165ec:	d118      	bne.n	8016620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	681a      	ldr	r2, [r3, #0]
 80165f2:	4b15      	ldr	r3, [pc, #84]	; (8016648 <prvInsertBlockIntoFreeList+0xb0>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	429a      	cmp	r2, r3
 80165f8:	d00d      	beq.n	8016616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	685a      	ldr	r2, [r3, #4]
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	685b      	ldr	r3, [r3, #4]
 8016604:	441a      	add	r2, r3
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	681a      	ldr	r2, [r3, #0]
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	601a      	str	r2, [r3, #0]
 8016614:	e008      	b.n	8016628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016616:	4b0c      	ldr	r3, [pc, #48]	; (8016648 <prvInsertBlockIntoFreeList+0xb0>)
 8016618:	681a      	ldr	r2, [r3, #0]
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	601a      	str	r2, [r3, #0]
 801661e:	e003      	b.n	8016628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	681a      	ldr	r2, [r3, #0]
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016628:	68fa      	ldr	r2, [r7, #12]
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	429a      	cmp	r2, r3
 801662e:	d002      	beq.n	8016636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	687a      	ldr	r2, [r7, #4]
 8016634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016636:	bf00      	nop
 8016638:	3714      	adds	r7, #20
 801663a:	46bd      	mov	sp, r7
 801663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016640:	4770      	bx	lr
 8016642:	bf00      	nop
 8016644:	240055e0 	.word	0x240055e0
 8016648:	240055e8 	.word	0x240055e8

0801664c <__errno>:
 801664c:	4b01      	ldr	r3, [pc, #4]	; (8016654 <__errno+0x8>)
 801664e:	6818      	ldr	r0, [r3, #0]
 8016650:	4770      	bx	lr
 8016652:	bf00      	nop
 8016654:	240000a0 	.word	0x240000a0

08016658 <__libc_init_array>:
 8016658:	b570      	push	{r4, r5, r6, lr}
 801665a:	4d0d      	ldr	r5, [pc, #52]	; (8016690 <__libc_init_array+0x38>)
 801665c:	4c0d      	ldr	r4, [pc, #52]	; (8016694 <__libc_init_array+0x3c>)
 801665e:	1b64      	subs	r4, r4, r5
 8016660:	10a4      	asrs	r4, r4, #2
 8016662:	2600      	movs	r6, #0
 8016664:	42a6      	cmp	r6, r4
 8016666:	d109      	bne.n	801667c <__libc_init_array+0x24>
 8016668:	4d0b      	ldr	r5, [pc, #44]	; (8016698 <__libc_init_array+0x40>)
 801666a:	4c0c      	ldr	r4, [pc, #48]	; (801669c <__libc_init_array+0x44>)
 801666c:	f000 fd3c 	bl	80170e8 <_init>
 8016670:	1b64      	subs	r4, r4, r5
 8016672:	10a4      	asrs	r4, r4, #2
 8016674:	2600      	movs	r6, #0
 8016676:	42a6      	cmp	r6, r4
 8016678:	d105      	bne.n	8016686 <__libc_init_array+0x2e>
 801667a:	bd70      	pop	{r4, r5, r6, pc}
 801667c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016680:	4798      	blx	r3
 8016682:	3601      	adds	r6, #1
 8016684:	e7ee      	b.n	8016664 <__libc_init_array+0xc>
 8016686:	f855 3b04 	ldr.w	r3, [r5], #4
 801668a:	4798      	blx	r3
 801668c:	3601      	adds	r6, #1
 801668e:	e7f2      	b.n	8016676 <__libc_init_array+0x1e>
 8016690:	080175d4 	.word	0x080175d4
 8016694:	080175d4 	.word	0x080175d4
 8016698:	080175d4 	.word	0x080175d4
 801669c:	080175d8 	.word	0x080175d8

080166a0 <malloc>:
 80166a0:	4b02      	ldr	r3, [pc, #8]	; (80166ac <malloc+0xc>)
 80166a2:	4601      	mov	r1, r0
 80166a4:	6818      	ldr	r0, [r3, #0]
 80166a6:	f000 b88d 	b.w	80167c4 <_malloc_r>
 80166aa:	bf00      	nop
 80166ac:	240000a0 	.word	0x240000a0

080166b0 <free>:
 80166b0:	4b02      	ldr	r3, [pc, #8]	; (80166bc <free+0xc>)
 80166b2:	4601      	mov	r1, r0
 80166b4:	6818      	ldr	r0, [r3, #0]
 80166b6:	f000 b819 	b.w	80166ec <_free_r>
 80166ba:	bf00      	nop
 80166bc:	240000a0 	.word	0x240000a0

080166c0 <memcpy>:
 80166c0:	440a      	add	r2, r1
 80166c2:	4291      	cmp	r1, r2
 80166c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80166c8:	d100      	bne.n	80166cc <memcpy+0xc>
 80166ca:	4770      	bx	lr
 80166cc:	b510      	push	{r4, lr}
 80166ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80166d6:	4291      	cmp	r1, r2
 80166d8:	d1f9      	bne.n	80166ce <memcpy+0xe>
 80166da:	bd10      	pop	{r4, pc}

080166dc <memset>:
 80166dc:	4402      	add	r2, r0
 80166de:	4603      	mov	r3, r0
 80166e0:	4293      	cmp	r3, r2
 80166e2:	d100      	bne.n	80166e6 <memset+0xa>
 80166e4:	4770      	bx	lr
 80166e6:	f803 1b01 	strb.w	r1, [r3], #1
 80166ea:	e7f9      	b.n	80166e0 <memset+0x4>

080166ec <_free_r>:
 80166ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80166ee:	2900      	cmp	r1, #0
 80166f0:	d044      	beq.n	801677c <_free_r+0x90>
 80166f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166f6:	9001      	str	r0, [sp, #4]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	f1a1 0404 	sub.w	r4, r1, #4
 80166fe:	bfb8      	it	lt
 8016700:	18e4      	addlt	r4, r4, r3
 8016702:	f000 fc39 	bl	8016f78 <__malloc_lock>
 8016706:	4a1e      	ldr	r2, [pc, #120]	; (8016780 <_free_r+0x94>)
 8016708:	9801      	ldr	r0, [sp, #4]
 801670a:	6813      	ldr	r3, [r2, #0]
 801670c:	b933      	cbnz	r3, 801671c <_free_r+0x30>
 801670e:	6063      	str	r3, [r4, #4]
 8016710:	6014      	str	r4, [r2, #0]
 8016712:	b003      	add	sp, #12
 8016714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016718:	f000 bc34 	b.w	8016f84 <__malloc_unlock>
 801671c:	42a3      	cmp	r3, r4
 801671e:	d908      	bls.n	8016732 <_free_r+0x46>
 8016720:	6825      	ldr	r5, [r4, #0]
 8016722:	1961      	adds	r1, r4, r5
 8016724:	428b      	cmp	r3, r1
 8016726:	bf01      	itttt	eq
 8016728:	6819      	ldreq	r1, [r3, #0]
 801672a:	685b      	ldreq	r3, [r3, #4]
 801672c:	1949      	addeq	r1, r1, r5
 801672e:	6021      	streq	r1, [r4, #0]
 8016730:	e7ed      	b.n	801670e <_free_r+0x22>
 8016732:	461a      	mov	r2, r3
 8016734:	685b      	ldr	r3, [r3, #4]
 8016736:	b10b      	cbz	r3, 801673c <_free_r+0x50>
 8016738:	42a3      	cmp	r3, r4
 801673a:	d9fa      	bls.n	8016732 <_free_r+0x46>
 801673c:	6811      	ldr	r1, [r2, #0]
 801673e:	1855      	adds	r5, r2, r1
 8016740:	42a5      	cmp	r5, r4
 8016742:	d10b      	bne.n	801675c <_free_r+0x70>
 8016744:	6824      	ldr	r4, [r4, #0]
 8016746:	4421      	add	r1, r4
 8016748:	1854      	adds	r4, r2, r1
 801674a:	42a3      	cmp	r3, r4
 801674c:	6011      	str	r1, [r2, #0]
 801674e:	d1e0      	bne.n	8016712 <_free_r+0x26>
 8016750:	681c      	ldr	r4, [r3, #0]
 8016752:	685b      	ldr	r3, [r3, #4]
 8016754:	6053      	str	r3, [r2, #4]
 8016756:	4421      	add	r1, r4
 8016758:	6011      	str	r1, [r2, #0]
 801675a:	e7da      	b.n	8016712 <_free_r+0x26>
 801675c:	d902      	bls.n	8016764 <_free_r+0x78>
 801675e:	230c      	movs	r3, #12
 8016760:	6003      	str	r3, [r0, #0]
 8016762:	e7d6      	b.n	8016712 <_free_r+0x26>
 8016764:	6825      	ldr	r5, [r4, #0]
 8016766:	1961      	adds	r1, r4, r5
 8016768:	428b      	cmp	r3, r1
 801676a:	bf04      	itt	eq
 801676c:	6819      	ldreq	r1, [r3, #0]
 801676e:	685b      	ldreq	r3, [r3, #4]
 8016770:	6063      	str	r3, [r4, #4]
 8016772:	bf04      	itt	eq
 8016774:	1949      	addeq	r1, r1, r5
 8016776:	6021      	streq	r1, [r4, #0]
 8016778:	6054      	str	r4, [r2, #4]
 801677a:	e7ca      	b.n	8016712 <_free_r+0x26>
 801677c:	b003      	add	sp, #12
 801677e:	bd30      	pop	{r4, r5, pc}
 8016780:	24005600 	.word	0x24005600

08016784 <sbrk_aligned>:
 8016784:	b570      	push	{r4, r5, r6, lr}
 8016786:	4e0e      	ldr	r6, [pc, #56]	; (80167c0 <sbrk_aligned+0x3c>)
 8016788:	460c      	mov	r4, r1
 801678a:	6831      	ldr	r1, [r6, #0]
 801678c:	4605      	mov	r5, r0
 801678e:	b911      	cbnz	r1, 8016796 <sbrk_aligned+0x12>
 8016790:	f000 f902 	bl	8016998 <_sbrk_r>
 8016794:	6030      	str	r0, [r6, #0]
 8016796:	4621      	mov	r1, r4
 8016798:	4628      	mov	r0, r5
 801679a:	f000 f8fd 	bl	8016998 <_sbrk_r>
 801679e:	1c43      	adds	r3, r0, #1
 80167a0:	d00a      	beq.n	80167b8 <sbrk_aligned+0x34>
 80167a2:	1cc4      	adds	r4, r0, #3
 80167a4:	f024 0403 	bic.w	r4, r4, #3
 80167a8:	42a0      	cmp	r0, r4
 80167aa:	d007      	beq.n	80167bc <sbrk_aligned+0x38>
 80167ac:	1a21      	subs	r1, r4, r0
 80167ae:	4628      	mov	r0, r5
 80167b0:	f000 f8f2 	bl	8016998 <_sbrk_r>
 80167b4:	3001      	adds	r0, #1
 80167b6:	d101      	bne.n	80167bc <sbrk_aligned+0x38>
 80167b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80167bc:	4620      	mov	r0, r4
 80167be:	bd70      	pop	{r4, r5, r6, pc}
 80167c0:	24005604 	.word	0x24005604

080167c4 <_malloc_r>:
 80167c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167c8:	1ccd      	adds	r5, r1, #3
 80167ca:	f025 0503 	bic.w	r5, r5, #3
 80167ce:	3508      	adds	r5, #8
 80167d0:	2d0c      	cmp	r5, #12
 80167d2:	bf38      	it	cc
 80167d4:	250c      	movcc	r5, #12
 80167d6:	2d00      	cmp	r5, #0
 80167d8:	4607      	mov	r7, r0
 80167da:	db01      	blt.n	80167e0 <_malloc_r+0x1c>
 80167dc:	42a9      	cmp	r1, r5
 80167de:	d905      	bls.n	80167ec <_malloc_r+0x28>
 80167e0:	230c      	movs	r3, #12
 80167e2:	603b      	str	r3, [r7, #0]
 80167e4:	2600      	movs	r6, #0
 80167e6:	4630      	mov	r0, r6
 80167e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167ec:	4e2e      	ldr	r6, [pc, #184]	; (80168a8 <_malloc_r+0xe4>)
 80167ee:	f000 fbc3 	bl	8016f78 <__malloc_lock>
 80167f2:	6833      	ldr	r3, [r6, #0]
 80167f4:	461c      	mov	r4, r3
 80167f6:	bb34      	cbnz	r4, 8016846 <_malloc_r+0x82>
 80167f8:	4629      	mov	r1, r5
 80167fa:	4638      	mov	r0, r7
 80167fc:	f7ff ffc2 	bl	8016784 <sbrk_aligned>
 8016800:	1c43      	adds	r3, r0, #1
 8016802:	4604      	mov	r4, r0
 8016804:	d14d      	bne.n	80168a2 <_malloc_r+0xde>
 8016806:	6834      	ldr	r4, [r6, #0]
 8016808:	4626      	mov	r6, r4
 801680a:	2e00      	cmp	r6, #0
 801680c:	d140      	bne.n	8016890 <_malloc_r+0xcc>
 801680e:	6823      	ldr	r3, [r4, #0]
 8016810:	4631      	mov	r1, r6
 8016812:	4638      	mov	r0, r7
 8016814:	eb04 0803 	add.w	r8, r4, r3
 8016818:	f000 f8be 	bl	8016998 <_sbrk_r>
 801681c:	4580      	cmp	r8, r0
 801681e:	d13a      	bne.n	8016896 <_malloc_r+0xd2>
 8016820:	6821      	ldr	r1, [r4, #0]
 8016822:	3503      	adds	r5, #3
 8016824:	1a6d      	subs	r5, r5, r1
 8016826:	f025 0503 	bic.w	r5, r5, #3
 801682a:	3508      	adds	r5, #8
 801682c:	2d0c      	cmp	r5, #12
 801682e:	bf38      	it	cc
 8016830:	250c      	movcc	r5, #12
 8016832:	4629      	mov	r1, r5
 8016834:	4638      	mov	r0, r7
 8016836:	f7ff ffa5 	bl	8016784 <sbrk_aligned>
 801683a:	3001      	adds	r0, #1
 801683c:	d02b      	beq.n	8016896 <_malloc_r+0xd2>
 801683e:	6823      	ldr	r3, [r4, #0]
 8016840:	442b      	add	r3, r5
 8016842:	6023      	str	r3, [r4, #0]
 8016844:	e00e      	b.n	8016864 <_malloc_r+0xa0>
 8016846:	6822      	ldr	r2, [r4, #0]
 8016848:	1b52      	subs	r2, r2, r5
 801684a:	d41e      	bmi.n	801688a <_malloc_r+0xc6>
 801684c:	2a0b      	cmp	r2, #11
 801684e:	d916      	bls.n	801687e <_malloc_r+0xba>
 8016850:	1961      	adds	r1, r4, r5
 8016852:	42a3      	cmp	r3, r4
 8016854:	6025      	str	r5, [r4, #0]
 8016856:	bf18      	it	ne
 8016858:	6059      	strne	r1, [r3, #4]
 801685a:	6863      	ldr	r3, [r4, #4]
 801685c:	bf08      	it	eq
 801685e:	6031      	streq	r1, [r6, #0]
 8016860:	5162      	str	r2, [r4, r5]
 8016862:	604b      	str	r3, [r1, #4]
 8016864:	4638      	mov	r0, r7
 8016866:	f104 060b 	add.w	r6, r4, #11
 801686a:	f000 fb8b 	bl	8016f84 <__malloc_unlock>
 801686e:	f026 0607 	bic.w	r6, r6, #7
 8016872:	1d23      	adds	r3, r4, #4
 8016874:	1af2      	subs	r2, r6, r3
 8016876:	d0b6      	beq.n	80167e6 <_malloc_r+0x22>
 8016878:	1b9b      	subs	r3, r3, r6
 801687a:	50a3      	str	r3, [r4, r2]
 801687c:	e7b3      	b.n	80167e6 <_malloc_r+0x22>
 801687e:	6862      	ldr	r2, [r4, #4]
 8016880:	42a3      	cmp	r3, r4
 8016882:	bf0c      	ite	eq
 8016884:	6032      	streq	r2, [r6, #0]
 8016886:	605a      	strne	r2, [r3, #4]
 8016888:	e7ec      	b.n	8016864 <_malloc_r+0xa0>
 801688a:	4623      	mov	r3, r4
 801688c:	6864      	ldr	r4, [r4, #4]
 801688e:	e7b2      	b.n	80167f6 <_malloc_r+0x32>
 8016890:	4634      	mov	r4, r6
 8016892:	6876      	ldr	r6, [r6, #4]
 8016894:	e7b9      	b.n	801680a <_malloc_r+0x46>
 8016896:	230c      	movs	r3, #12
 8016898:	603b      	str	r3, [r7, #0]
 801689a:	4638      	mov	r0, r7
 801689c:	f000 fb72 	bl	8016f84 <__malloc_unlock>
 80168a0:	e7a1      	b.n	80167e6 <_malloc_r+0x22>
 80168a2:	6025      	str	r5, [r4, #0]
 80168a4:	e7de      	b.n	8016864 <_malloc_r+0xa0>
 80168a6:	bf00      	nop
 80168a8:	24005600 	.word	0x24005600

080168ac <_puts_r>:
 80168ac:	b570      	push	{r4, r5, r6, lr}
 80168ae:	460e      	mov	r6, r1
 80168b0:	4605      	mov	r5, r0
 80168b2:	b118      	cbz	r0, 80168bc <_puts_r+0x10>
 80168b4:	6983      	ldr	r3, [r0, #24]
 80168b6:	b90b      	cbnz	r3, 80168bc <_puts_r+0x10>
 80168b8:	f000 fa58 	bl	8016d6c <__sinit>
 80168bc:	69ab      	ldr	r3, [r5, #24]
 80168be:	68ac      	ldr	r4, [r5, #8]
 80168c0:	b913      	cbnz	r3, 80168c8 <_puts_r+0x1c>
 80168c2:	4628      	mov	r0, r5
 80168c4:	f000 fa52 	bl	8016d6c <__sinit>
 80168c8:	4b2c      	ldr	r3, [pc, #176]	; (801697c <_puts_r+0xd0>)
 80168ca:	429c      	cmp	r4, r3
 80168cc:	d120      	bne.n	8016910 <_puts_r+0x64>
 80168ce:	686c      	ldr	r4, [r5, #4]
 80168d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168d2:	07db      	lsls	r3, r3, #31
 80168d4:	d405      	bmi.n	80168e2 <_puts_r+0x36>
 80168d6:	89a3      	ldrh	r3, [r4, #12]
 80168d8:	0598      	lsls	r0, r3, #22
 80168da:	d402      	bmi.n	80168e2 <_puts_r+0x36>
 80168dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168de:	f000 fae3 	bl	8016ea8 <__retarget_lock_acquire_recursive>
 80168e2:	89a3      	ldrh	r3, [r4, #12]
 80168e4:	0719      	lsls	r1, r3, #28
 80168e6:	d51d      	bpl.n	8016924 <_puts_r+0x78>
 80168e8:	6923      	ldr	r3, [r4, #16]
 80168ea:	b1db      	cbz	r3, 8016924 <_puts_r+0x78>
 80168ec:	3e01      	subs	r6, #1
 80168ee:	68a3      	ldr	r3, [r4, #8]
 80168f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80168f4:	3b01      	subs	r3, #1
 80168f6:	60a3      	str	r3, [r4, #8]
 80168f8:	bb39      	cbnz	r1, 801694a <_puts_r+0x9e>
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	da38      	bge.n	8016970 <_puts_r+0xc4>
 80168fe:	4622      	mov	r2, r4
 8016900:	210a      	movs	r1, #10
 8016902:	4628      	mov	r0, r5
 8016904:	f000 f858 	bl	80169b8 <__swbuf_r>
 8016908:	3001      	adds	r0, #1
 801690a:	d011      	beq.n	8016930 <_puts_r+0x84>
 801690c:	250a      	movs	r5, #10
 801690e:	e011      	b.n	8016934 <_puts_r+0x88>
 8016910:	4b1b      	ldr	r3, [pc, #108]	; (8016980 <_puts_r+0xd4>)
 8016912:	429c      	cmp	r4, r3
 8016914:	d101      	bne.n	801691a <_puts_r+0x6e>
 8016916:	68ac      	ldr	r4, [r5, #8]
 8016918:	e7da      	b.n	80168d0 <_puts_r+0x24>
 801691a:	4b1a      	ldr	r3, [pc, #104]	; (8016984 <_puts_r+0xd8>)
 801691c:	429c      	cmp	r4, r3
 801691e:	bf08      	it	eq
 8016920:	68ec      	ldreq	r4, [r5, #12]
 8016922:	e7d5      	b.n	80168d0 <_puts_r+0x24>
 8016924:	4621      	mov	r1, r4
 8016926:	4628      	mov	r0, r5
 8016928:	f000 f898 	bl	8016a5c <__swsetup_r>
 801692c:	2800      	cmp	r0, #0
 801692e:	d0dd      	beq.n	80168ec <_puts_r+0x40>
 8016930:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016936:	07da      	lsls	r2, r3, #31
 8016938:	d405      	bmi.n	8016946 <_puts_r+0x9a>
 801693a:	89a3      	ldrh	r3, [r4, #12]
 801693c:	059b      	lsls	r3, r3, #22
 801693e:	d402      	bmi.n	8016946 <_puts_r+0x9a>
 8016940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016942:	f000 fab2 	bl	8016eaa <__retarget_lock_release_recursive>
 8016946:	4628      	mov	r0, r5
 8016948:	bd70      	pop	{r4, r5, r6, pc}
 801694a:	2b00      	cmp	r3, #0
 801694c:	da04      	bge.n	8016958 <_puts_r+0xac>
 801694e:	69a2      	ldr	r2, [r4, #24]
 8016950:	429a      	cmp	r2, r3
 8016952:	dc06      	bgt.n	8016962 <_puts_r+0xb6>
 8016954:	290a      	cmp	r1, #10
 8016956:	d004      	beq.n	8016962 <_puts_r+0xb6>
 8016958:	6823      	ldr	r3, [r4, #0]
 801695a:	1c5a      	adds	r2, r3, #1
 801695c:	6022      	str	r2, [r4, #0]
 801695e:	7019      	strb	r1, [r3, #0]
 8016960:	e7c5      	b.n	80168ee <_puts_r+0x42>
 8016962:	4622      	mov	r2, r4
 8016964:	4628      	mov	r0, r5
 8016966:	f000 f827 	bl	80169b8 <__swbuf_r>
 801696a:	3001      	adds	r0, #1
 801696c:	d1bf      	bne.n	80168ee <_puts_r+0x42>
 801696e:	e7df      	b.n	8016930 <_puts_r+0x84>
 8016970:	6823      	ldr	r3, [r4, #0]
 8016972:	250a      	movs	r5, #10
 8016974:	1c5a      	adds	r2, r3, #1
 8016976:	6022      	str	r2, [r4, #0]
 8016978:	701d      	strb	r5, [r3, #0]
 801697a:	e7db      	b.n	8016934 <_puts_r+0x88>
 801697c:	0801758c 	.word	0x0801758c
 8016980:	080175ac 	.word	0x080175ac
 8016984:	0801756c 	.word	0x0801756c

08016988 <puts>:
 8016988:	4b02      	ldr	r3, [pc, #8]	; (8016994 <puts+0xc>)
 801698a:	4601      	mov	r1, r0
 801698c:	6818      	ldr	r0, [r3, #0]
 801698e:	f7ff bf8d 	b.w	80168ac <_puts_r>
 8016992:	bf00      	nop
 8016994:	240000a0 	.word	0x240000a0

08016998 <_sbrk_r>:
 8016998:	b538      	push	{r3, r4, r5, lr}
 801699a:	4d06      	ldr	r5, [pc, #24]	; (80169b4 <_sbrk_r+0x1c>)
 801699c:	2300      	movs	r3, #0
 801699e:	4604      	mov	r4, r0
 80169a0:	4608      	mov	r0, r1
 80169a2:	602b      	str	r3, [r5, #0]
 80169a4:	f7ec fbbe 	bl	8003124 <_sbrk>
 80169a8:	1c43      	adds	r3, r0, #1
 80169aa:	d102      	bne.n	80169b2 <_sbrk_r+0x1a>
 80169ac:	682b      	ldr	r3, [r5, #0]
 80169ae:	b103      	cbz	r3, 80169b2 <_sbrk_r+0x1a>
 80169b0:	6023      	str	r3, [r4, #0]
 80169b2:	bd38      	pop	{r3, r4, r5, pc}
 80169b4:	2400560c 	.word	0x2400560c

080169b8 <__swbuf_r>:
 80169b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169ba:	460e      	mov	r6, r1
 80169bc:	4614      	mov	r4, r2
 80169be:	4605      	mov	r5, r0
 80169c0:	b118      	cbz	r0, 80169ca <__swbuf_r+0x12>
 80169c2:	6983      	ldr	r3, [r0, #24]
 80169c4:	b90b      	cbnz	r3, 80169ca <__swbuf_r+0x12>
 80169c6:	f000 f9d1 	bl	8016d6c <__sinit>
 80169ca:	4b21      	ldr	r3, [pc, #132]	; (8016a50 <__swbuf_r+0x98>)
 80169cc:	429c      	cmp	r4, r3
 80169ce:	d12b      	bne.n	8016a28 <__swbuf_r+0x70>
 80169d0:	686c      	ldr	r4, [r5, #4]
 80169d2:	69a3      	ldr	r3, [r4, #24]
 80169d4:	60a3      	str	r3, [r4, #8]
 80169d6:	89a3      	ldrh	r3, [r4, #12]
 80169d8:	071a      	lsls	r2, r3, #28
 80169da:	d52f      	bpl.n	8016a3c <__swbuf_r+0x84>
 80169dc:	6923      	ldr	r3, [r4, #16]
 80169de:	b36b      	cbz	r3, 8016a3c <__swbuf_r+0x84>
 80169e0:	6923      	ldr	r3, [r4, #16]
 80169e2:	6820      	ldr	r0, [r4, #0]
 80169e4:	1ac0      	subs	r0, r0, r3
 80169e6:	6963      	ldr	r3, [r4, #20]
 80169e8:	b2f6      	uxtb	r6, r6
 80169ea:	4283      	cmp	r3, r0
 80169ec:	4637      	mov	r7, r6
 80169ee:	dc04      	bgt.n	80169fa <__swbuf_r+0x42>
 80169f0:	4621      	mov	r1, r4
 80169f2:	4628      	mov	r0, r5
 80169f4:	f000 f926 	bl	8016c44 <_fflush_r>
 80169f8:	bb30      	cbnz	r0, 8016a48 <__swbuf_r+0x90>
 80169fa:	68a3      	ldr	r3, [r4, #8]
 80169fc:	3b01      	subs	r3, #1
 80169fe:	60a3      	str	r3, [r4, #8]
 8016a00:	6823      	ldr	r3, [r4, #0]
 8016a02:	1c5a      	adds	r2, r3, #1
 8016a04:	6022      	str	r2, [r4, #0]
 8016a06:	701e      	strb	r6, [r3, #0]
 8016a08:	6963      	ldr	r3, [r4, #20]
 8016a0a:	3001      	adds	r0, #1
 8016a0c:	4283      	cmp	r3, r0
 8016a0e:	d004      	beq.n	8016a1a <__swbuf_r+0x62>
 8016a10:	89a3      	ldrh	r3, [r4, #12]
 8016a12:	07db      	lsls	r3, r3, #31
 8016a14:	d506      	bpl.n	8016a24 <__swbuf_r+0x6c>
 8016a16:	2e0a      	cmp	r6, #10
 8016a18:	d104      	bne.n	8016a24 <__swbuf_r+0x6c>
 8016a1a:	4621      	mov	r1, r4
 8016a1c:	4628      	mov	r0, r5
 8016a1e:	f000 f911 	bl	8016c44 <_fflush_r>
 8016a22:	b988      	cbnz	r0, 8016a48 <__swbuf_r+0x90>
 8016a24:	4638      	mov	r0, r7
 8016a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a28:	4b0a      	ldr	r3, [pc, #40]	; (8016a54 <__swbuf_r+0x9c>)
 8016a2a:	429c      	cmp	r4, r3
 8016a2c:	d101      	bne.n	8016a32 <__swbuf_r+0x7a>
 8016a2e:	68ac      	ldr	r4, [r5, #8]
 8016a30:	e7cf      	b.n	80169d2 <__swbuf_r+0x1a>
 8016a32:	4b09      	ldr	r3, [pc, #36]	; (8016a58 <__swbuf_r+0xa0>)
 8016a34:	429c      	cmp	r4, r3
 8016a36:	bf08      	it	eq
 8016a38:	68ec      	ldreq	r4, [r5, #12]
 8016a3a:	e7ca      	b.n	80169d2 <__swbuf_r+0x1a>
 8016a3c:	4621      	mov	r1, r4
 8016a3e:	4628      	mov	r0, r5
 8016a40:	f000 f80c 	bl	8016a5c <__swsetup_r>
 8016a44:	2800      	cmp	r0, #0
 8016a46:	d0cb      	beq.n	80169e0 <__swbuf_r+0x28>
 8016a48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016a4c:	e7ea      	b.n	8016a24 <__swbuf_r+0x6c>
 8016a4e:	bf00      	nop
 8016a50:	0801758c 	.word	0x0801758c
 8016a54:	080175ac 	.word	0x080175ac
 8016a58:	0801756c 	.word	0x0801756c

08016a5c <__swsetup_r>:
 8016a5c:	4b32      	ldr	r3, [pc, #200]	; (8016b28 <__swsetup_r+0xcc>)
 8016a5e:	b570      	push	{r4, r5, r6, lr}
 8016a60:	681d      	ldr	r5, [r3, #0]
 8016a62:	4606      	mov	r6, r0
 8016a64:	460c      	mov	r4, r1
 8016a66:	b125      	cbz	r5, 8016a72 <__swsetup_r+0x16>
 8016a68:	69ab      	ldr	r3, [r5, #24]
 8016a6a:	b913      	cbnz	r3, 8016a72 <__swsetup_r+0x16>
 8016a6c:	4628      	mov	r0, r5
 8016a6e:	f000 f97d 	bl	8016d6c <__sinit>
 8016a72:	4b2e      	ldr	r3, [pc, #184]	; (8016b2c <__swsetup_r+0xd0>)
 8016a74:	429c      	cmp	r4, r3
 8016a76:	d10f      	bne.n	8016a98 <__swsetup_r+0x3c>
 8016a78:	686c      	ldr	r4, [r5, #4]
 8016a7a:	89a3      	ldrh	r3, [r4, #12]
 8016a7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016a80:	0719      	lsls	r1, r3, #28
 8016a82:	d42c      	bmi.n	8016ade <__swsetup_r+0x82>
 8016a84:	06dd      	lsls	r5, r3, #27
 8016a86:	d411      	bmi.n	8016aac <__swsetup_r+0x50>
 8016a88:	2309      	movs	r3, #9
 8016a8a:	6033      	str	r3, [r6, #0]
 8016a8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016a90:	81a3      	strh	r3, [r4, #12]
 8016a92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a96:	e03e      	b.n	8016b16 <__swsetup_r+0xba>
 8016a98:	4b25      	ldr	r3, [pc, #148]	; (8016b30 <__swsetup_r+0xd4>)
 8016a9a:	429c      	cmp	r4, r3
 8016a9c:	d101      	bne.n	8016aa2 <__swsetup_r+0x46>
 8016a9e:	68ac      	ldr	r4, [r5, #8]
 8016aa0:	e7eb      	b.n	8016a7a <__swsetup_r+0x1e>
 8016aa2:	4b24      	ldr	r3, [pc, #144]	; (8016b34 <__swsetup_r+0xd8>)
 8016aa4:	429c      	cmp	r4, r3
 8016aa6:	bf08      	it	eq
 8016aa8:	68ec      	ldreq	r4, [r5, #12]
 8016aaa:	e7e6      	b.n	8016a7a <__swsetup_r+0x1e>
 8016aac:	0758      	lsls	r0, r3, #29
 8016aae:	d512      	bpl.n	8016ad6 <__swsetup_r+0x7a>
 8016ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ab2:	b141      	cbz	r1, 8016ac6 <__swsetup_r+0x6a>
 8016ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ab8:	4299      	cmp	r1, r3
 8016aba:	d002      	beq.n	8016ac2 <__swsetup_r+0x66>
 8016abc:	4630      	mov	r0, r6
 8016abe:	f7ff fe15 	bl	80166ec <_free_r>
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	6363      	str	r3, [r4, #52]	; 0x34
 8016ac6:	89a3      	ldrh	r3, [r4, #12]
 8016ac8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016acc:	81a3      	strh	r3, [r4, #12]
 8016ace:	2300      	movs	r3, #0
 8016ad0:	6063      	str	r3, [r4, #4]
 8016ad2:	6923      	ldr	r3, [r4, #16]
 8016ad4:	6023      	str	r3, [r4, #0]
 8016ad6:	89a3      	ldrh	r3, [r4, #12]
 8016ad8:	f043 0308 	orr.w	r3, r3, #8
 8016adc:	81a3      	strh	r3, [r4, #12]
 8016ade:	6923      	ldr	r3, [r4, #16]
 8016ae0:	b94b      	cbnz	r3, 8016af6 <__swsetup_r+0x9a>
 8016ae2:	89a3      	ldrh	r3, [r4, #12]
 8016ae4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016aec:	d003      	beq.n	8016af6 <__swsetup_r+0x9a>
 8016aee:	4621      	mov	r1, r4
 8016af0:	4630      	mov	r0, r6
 8016af2:	f000 fa01 	bl	8016ef8 <__smakebuf_r>
 8016af6:	89a0      	ldrh	r0, [r4, #12]
 8016af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016afc:	f010 0301 	ands.w	r3, r0, #1
 8016b00:	d00a      	beq.n	8016b18 <__swsetup_r+0xbc>
 8016b02:	2300      	movs	r3, #0
 8016b04:	60a3      	str	r3, [r4, #8]
 8016b06:	6963      	ldr	r3, [r4, #20]
 8016b08:	425b      	negs	r3, r3
 8016b0a:	61a3      	str	r3, [r4, #24]
 8016b0c:	6923      	ldr	r3, [r4, #16]
 8016b0e:	b943      	cbnz	r3, 8016b22 <__swsetup_r+0xc6>
 8016b10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016b14:	d1ba      	bne.n	8016a8c <__swsetup_r+0x30>
 8016b16:	bd70      	pop	{r4, r5, r6, pc}
 8016b18:	0781      	lsls	r1, r0, #30
 8016b1a:	bf58      	it	pl
 8016b1c:	6963      	ldrpl	r3, [r4, #20]
 8016b1e:	60a3      	str	r3, [r4, #8]
 8016b20:	e7f4      	b.n	8016b0c <__swsetup_r+0xb0>
 8016b22:	2000      	movs	r0, #0
 8016b24:	e7f7      	b.n	8016b16 <__swsetup_r+0xba>
 8016b26:	bf00      	nop
 8016b28:	240000a0 	.word	0x240000a0
 8016b2c:	0801758c 	.word	0x0801758c
 8016b30:	080175ac 	.word	0x080175ac
 8016b34:	0801756c 	.word	0x0801756c

08016b38 <__sflush_r>:
 8016b38:	898a      	ldrh	r2, [r1, #12]
 8016b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b3e:	4605      	mov	r5, r0
 8016b40:	0710      	lsls	r0, r2, #28
 8016b42:	460c      	mov	r4, r1
 8016b44:	d458      	bmi.n	8016bf8 <__sflush_r+0xc0>
 8016b46:	684b      	ldr	r3, [r1, #4]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	dc05      	bgt.n	8016b58 <__sflush_r+0x20>
 8016b4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	dc02      	bgt.n	8016b58 <__sflush_r+0x20>
 8016b52:	2000      	movs	r0, #0
 8016b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016b5a:	2e00      	cmp	r6, #0
 8016b5c:	d0f9      	beq.n	8016b52 <__sflush_r+0x1a>
 8016b5e:	2300      	movs	r3, #0
 8016b60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016b64:	682f      	ldr	r7, [r5, #0]
 8016b66:	602b      	str	r3, [r5, #0]
 8016b68:	d032      	beq.n	8016bd0 <__sflush_r+0x98>
 8016b6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016b6c:	89a3      	ldrh	r3, [r4, #12]
 8016b6e:	075a      	lsls	r2, r3, #29
 8016b70:	d505      	bpl.n	8016b7e <__sflush_r+0x46>
 8016b72:	6863      	ldr	r3, [r4, #4]
 8016b74:	1ac0      	subs	r0, r0, r3
 8016b76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016b78:	b10b      	cbz	r3, 8016b7e <__sflush_r+0x46>
 8016b7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016b7c:	1ac0      	subs	r0, r0, r3
 8016b7e:	2300      	movs	r3, #0
 8016b80:	4602      	mov	r2, r0
 8016b82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016b84:	6a21      	ldr	r1, [r4, #32]
 8016b86:	4628      	mov	r0, r5
 8016b88:	47b0      	blx	r6
 8016b8a:	1c43      	adds	r3, r0, #1
 8016b8c:	89a3      	ldrh	r3, [r4, #12]
 8016b8e:	d106      	bne.n	8016b9e <__sflush_r+0x66>
 8016b90:	6829      	ldr	r1, [r5, #0]
 8016b92:	291d      	cmp	r1, #29
 8016b94:	d82c      	bhi.n	8016bf0 <__sflush_r+0xb8>
 8016b96:	4a2a      	ldr	r2, [pc, #168]	; (8016c40 <__sflush_r+0x108>)
 8016b98:	40ca      	lsrs	r2, r1
 8016b9a:	07d6      	lsls	r6, r2, #31
 8016b9c:	d528      	bpl.n	8016bf0 <__sflush_r+0xb8>
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	6062      	str	r2, [r4, #4]
 8016ba2:	04d9      	lsls	r1, r3, #19
 8016ba4:	6922      	ldr	r2, [r4, #16]
 8016ba6:	6022      	str	r2, [r4, #0]
 8016ba8:	d504      	bpl.n	8016bb4 <__sflush_r+0x7c>
 8016baa:	1c42      	adds	r2, r0, #1
 8016bac:	d101      	bne.n	8016bb2 <__sflush_r+0x7a>
 8016bae:	682b      	ldr	r3, [r5, #0]
 8016bb0:	b903      	cbnz	r3, 8016bb4 <__sflush_r+0x7c>
 8016bb2:	6560      	str	r0, [r4, #84]	; 0x54
 8016bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016bb6:	602f      	str	r7, [r5, #0]
 8016bb8:	2900      	cmp	r1, #0
 8016bba:	d0ca      	beq.n	8016b52 <__sflush_r+0x1a>
 8016bbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016bc0:	4299      	cmp	r1, r3
 8016bc2:	d002      	beq.n	8016bca <__sflush_r+0x92>
 8016bc4:	4628      	mov	r0, r5
 8016bc6:	f7ff fd91 	bl	80166ec <_free_r>
 8016bca:	2000      	movs	r0, #0
 8016bcc:	6360      	str	r0, [r4, #52]	; 0x34
 8016bce:	e7c1      	b.n	8016b54 <__sflush_r+0x1c>
 8016bd0:	6a21      	ldr	r1, [r4, #32]
 8016bd2:	2301      	movs	r3, #1
 8016bd4:	4628      	mov	r0, r5
 8016bd6:	47b0      	blx	r6
 8016bd8:	1c41      	adds	r1, r0, #1
 8016bda:	d1c7      	bne.n	8016b6c <__sflush_r+0x34>
 8016bdc:	682b      	ldr	r3, [r5, #0]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d0c4      	beq.n	8016b6c <__sflush_r+0x34>
 8016be2:	2b1d      	cmp	r3, #29
 8016be4:	d001      	beq.n	8016bea <__sflush_r+0xb2>
 8016be6:	2b16      	cmp	r3, #22
 8016be8:	d101      	bne.n	8016bee <__sflush_r+0xb6>
 8016bea:	602f      	str	r7, [r5, #0]
 8016bec:	e7b1      	b.n	8016b52 <__sflush_r+0x1a>
 8016bee:	89a3      	ldrh	r3, [r4, #12]
 8016bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bf4:	81a3      	strh	r3, [r4, #12]
 8016bf6:	e7ad      	b.n	8016b54 <__sflush_r+0x1c>
 8016bf8:	690f      	ldr	r7, [r1, #16]
 8016bfa:	2f00      	cmp	r7, #0
 8016bfc:	d0a9      	beq.n	8016b52 <__sflush_r+0x1a>
 8016bfe:	0793      	lsls	r3, r2, #30
 8016c00:	680e      	ldr	r6, [r1, #0]
 8016c02:	bf08      	it	eq
 8016c04:	694b      	ldreq	r3, [r1, #20]
 8016c06:	600f      	str	r7, [r1, #0]
 8016c08:	bf18      	it	ne
 8016c0a:	2300      	movne	r3, #0
 8016c0c:	eba6 0807 	sub.w	r8, r6, r7
 8016c10:	608b      	str	r3, [r1, #8]
 8016c12:	f1b8 0f00 	cmp.w	r8, #0
 8016c16:	dd9c      	ble.n	8016b52 <__sflush_r+0x1a>
 8016c18:	6a21      	ldr	r1, [r4, #32]
 8016c1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016c1c:	4643      	mov	r3, r8
 8016c1e:	463a      	mov	r2, r7
 8016c20:	4628      	mov	r0, r5
 8016c22:	47b0      	blx	r6
 8016c24:	2800      	cmp	r0, #0
 8016c26:	dc06      	bgt.n	8016c36 <__sflush_r+0xfe>
 8016c28:	89a3      	ldrh	r3, [r4, #12]
 8016c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c2e:	81a3      	strh	r3, [r4, #12]
 8016c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c34:	e78e      	b.n	8016b54 <__sflush_r+0x1c>
 8016c36:	4407      	add	r7, r0
 8016c38:	eba8 0800 	sub.w	r8, r8, r0
 8016c3c:	e7e9      	b.n	8016c12 <__sflush_r+0xda>
 8016c3e:	bf00      	nop
 8016c40:	20400001 	.word	0x20400001

08016c44 <_fflush_r>:
 8016c44:	b538      	push	{r3, r4, r5, lr}
 8016c46:	690b      	ldr	r3, [r1, #16]
 8016c48:	4605      	mov	r5, r0
 8016c4a:	460c      	mov	r4, r1
 8016c4c:	b913      	cbnz	r3, 8016c54 <_fflush_r+0x10>
 8016c4e:	2500      	movs	r5, #0
 8016c50:	4628      	mov	r0, r5
 8016c52:	bd38      	pop	{r3, r4, r5, pc}
 8016c54:	b118      	cbz	r0, 8016c5e <_fflush_r+0x1a>
 8016c56:	6983      	ldr	r3, [r0, #24]
 8016c58:	b90b      	cbnz	r3, 8016c5e <_fflush_r+0x1a>
 8016c5a:	f000 f887 	bl	8016d6c <__sinit>
 8016c5e:	4b14      	ldr	r3, [pc, #80]	; (8016cb0 <_fflush_r+0x6c>)
 8016c60:	429c      	cmp	r4, r3
 8016c62:	d11b      	bne.n	8016c9c <_fflush_r+0x58>
 8016c64:	686c      	ldr	r4, [r5, #4]
 8016c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d0ef      	beq.n	8016c4e <_fflush_r+0xa>
 8016c6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016c70:	07d0      	lsls	r0, r2, #31
 8016c72:	d404      	bmi.n	8016c7e <_fflush_r+0x3a>
 8016c74:	0599      	lsls	r1, r3, #22
 8016c76:	d402      	bmi.n	8016c7e <_fflush_r+0x3a>
 8016c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c7a:	f000 f915 	bl	8016ea8 <__retarget_lock_acquire_recursive>
 8016c7e:	4628      	mov	r0, r5
 8016c80:	4621      	mov	r1, r4
 8016c82:	f7ff ff59 	bl	8016b38 <__sflush_r>
 8016c86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c88:	07da      	lsls	r2, r3, #31
 8016c8a:	4605      	mov	r5, r0
 8016c8c:	d4e0      	bmi.n	8016c50 <_fflush_r+0xc>
 8016c8e:	89a3      	ldrh	r3, [r4, #12]
 8016c90:	059b      	lsls	r3, r3, #22
 8016c92:	d4dd      	bmi.n	8016c50 <_fflush_r+0xc>
 8016c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c96:	f000 f908 	bl	8016eaa <__retarget_lock_release_recursive>
 8016c9a:	e7d9      	b.n	8016c50 <_fflush_r+0xc>
 8016c9c:	4b05      	ldr	r3, [pc, #20]	; (8016cb4 <_fflush_r+0x70>)
 8016c9e:	429c      	cmp	r4, r3
 8016ca0:	d101      	bne.n	8016ca6 <_fflush_r+0x62>
 8016ca2:	68ac      	ldr	r4, [r5, #8]
 8016ca4:	e7df      	b.n	8016c66 <_fflush_r+0x22>
 8016ca6:	4b04      	ldr	r3, [pc, #16]	; (8016cb8 <_fflush_r+0x74>)
 8016ca8:	429c      	cmp	r4, r3
 8016caa:	bf08      	it	eq
 8016cac:	68ec      	ldreq	r4, [r5, #12]
 8016cae:	e7da      	b.n	8016c66 <_fflush_r+0x22>
 8016cb0:	0801758c 	.word	0x0801758c
 8016cb4:	080175ac 	.word	0x080175ac
 8016cb8:	0801756c 	.word	0x0801756c

08016cbc <std>:
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	b510      	push	{r4, lr}
 8016cc0:	4604      	mov	r4, r0
 8016cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8016cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016cca:	6083      	str	r3, [r0, #8]
 8016ccc:	8181      	strh	r1, [r0, #12]
 8016cce:	6643      	str	r3, [r0, #100]	; 0x64
 8016cd0:	81c2      	strh	r2, [r0, #14]
 8016cd2:	6183      	str	r3, [r0, #24]
 8016cd4:	4619      	mov	r1, r3
 8016cd6:	2208      	movs	r2, #8
 8016cd8:	305c      	adds	r0, #92	; 0x5c
 8016cda:	f7ff fcff 	bl	80166dc <memset>
 8016cde:	4b05      	ldr	r3, [pc, #20]	; (8016cf4 <std+0x38>)
 8016ce0:	6263      	str	r3, [r4, #36]	; 0x24
 8016ce2:	4b05      	ldr	r3, [pc, #20]	; (8016cf8 <std+0x3c>)
 8016ce4:	62a3      	str	r3, [r4, #40]	; 0x28
 8016ce6:	4b05      	ldr	r3, [pc, #20]	; (8016cfc <std+0x40>)
 8016ce8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016cea:	4b05      	ldr	r3, [pc, #20]	; (8016d00 <std+0x44>)
 8016cec:	6224      	str	r4, [r4, #32]
 8016cee:	6323      	str	r3, [r4, #48]	; 0x30
 8016cf0:	bd10      	pop	{r4, pc}
 8016cf2:	bf00      	nop
 8016cf4:	08016f91 	.word	0x08016f91
 8016cf8:	08016fb3 	.word	0x08016fb3
 8016cfc:	08016feb 	.word	0x08016feb
 8016d00:	0801700f 	.word	0x0801700f

08016d04 <_cleanup_r>:
 8016d04:	4901      	ldr	r1, [pc, #4]	; (8016d0c <_cleanup_r+0x8>)
 8016d06:	f000 b8af 	b.w	8016e68 <_fwalk_reent>
 8016d0a:	bf00      	nop
 8016d0c:	08016c45 	.word	0x08016c45

08016d10 <__sfmoreglue>:
 8016d10:	b570      	push	{r4, r5, r6, lr}
 8016d12:	2268      	movs	r2, #104	; 0x68
 8016d14:	1e4d      	subs	r5, r1, #1
 8016d16:	4355      	muls	r5, r2
 8016d18:	460e      	mov	r6, r1
 8016d1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016d1e:	f7ff fd51 	bl	80167c4 <_malloc_r>
 8016d22:	4604      	mov	r4, r0
 8016d24:	b140      	cbz	r0, 8016d38 <__sfmoreglue+0x28>
 8016d26:	2100      	movs	r1, #0
 8016d28:	e9c0 1600 	strd	r1, r6, [r0]
 8016d2c:	300c      	adds	r0, #12
 8016d2e:	60a0      	str	r0, [r4, #8]
 8016d30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016d34:	f7ff fcd2 	bl	80166dc <memset>
 8016d38:	4620      	mov	r0, r4
 8016d3a:	bd70      	pop	{r4, r5, r6, pc}

08016d3c <__sfp_lock_acquire>:
 8016d3c:	4801      	ldr	r0, [pc, #4]	; (8016d44 <__sfp_lock_acquire+0x8>)
 8016d3e:	f000 b8b3 	b.w	8016ea8 <__retarget_lock_acquire_recursive>
 8016d42:	bf00      	nop
 8016d44:	24005609 	.word	0x24005609

08016d48 <__sfp_lock_release>:
 8016d48:	4801      	ldr	r0, [pc, #4]	; (8016d50 <__sfp_lock_release+0x8>)
 8016d4a:	f000 b8ae 	b.w	8016eaa <__retarget_lock_release_recursive>
 8016d4e:	bf00      	nop
 8016d50:	24005609 	.word	0x24005609

08016d54 <__sinit_lock_acquire>:
 8016d54:	4801      	ldr	r0, [pc, #4]	; (8016d5c <__sinit_lock_acquire+0x8>)
 8016d56:	f000 b8a7 	b.w	8016ea8 <__retarget_lock_acquire_recursive>
 8016d5a:	bf00      	nop
 8016d5c:	2400560a 	.word	0x2400560a

08016d60 <__sinit_lock_release>:
 8016d60:	4801      	ldr	r0, [pc, #4]	; (8016d68 <__sinit_lock_release+0x8>)
 8016d62:	f000 b8a2 	b.w	8016eaa <__retarget_lock_release_recursive>
 8016d66:	bf00      	nop
 8016d68:	2400560a 	.word	0x2400560a

08016d6c <__sinit>:
 8016d6c:	b510      	push	{r4, lr}
 8016d6e:	4604      	mov	r4, r0
 8016d70:	f7ff fff0 	bl	8016d54 <__sinit_lock_acquire>
 8016d74:	69a3      	ldr	r3, [r4, #24]
 8016d76:	b11b      	cbz	r3, 8016d80 <__sinit+0x14>
 8016d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d7c:	f7ff bff0 	b.w	8016d60 <__sinit_lock_release>
 8016d80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016d84:	6523      	str	r3, [r4, #80]	; 0x50
 8016d86:	4b13      	ldr	r3, [pc, #76]	; (8016dd4 <__sinit+0x68>)
 8016d88:	4a13      	ldr	r2, [pc, #76]	; (8016dd8 <__sinit+0x6c>)
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8016d8e:	42a3      	cmp	r3, r4
 8016d90:	bf04      	itt	eq
 8016d92:	2301      	moveq	r3, #1
 8016d94:	61a3      	streq	r3, [r4, #24]
 8016d96:	4620      	mov	r0, r4
 8016d98:	f000 f820 	bl	8016ddc <__sfp>
 8016d9c:	6060      	str	r0, [r4, #4]
 8016d9e:	4620      	mov	r0, r4
 8016da0:	f000 f81c 	bl	8016ddc <__sfp>
 8016da4:	60a0      	str	r0, [r4, #8]
 8016da6:	4620      	mov	r0, r4
 8016da8:	f000 f818 	bl	8016ddc <__sfp>
 8016dac:	2200      	movs	r2, #0
 8016dae:	60e0      	str	r0, [r4, #12]
 8016db0:	2104      	movs	r1, #4
 8016db2:	6860      	ldr	r0, [r4, #4]
 8016db4:	f7ff ff82 	bl	8016cbc <std>
 8016db8:	68a0      	ldr	r0, [r4, #8]
 8016dba:	2201      	movs	r2, #1
 8016dbc:	2109      	movs	r1, #9
 8016dbe:	f7ff ff7d 	bl	8016cbc <std>
 8016dc2:	68e0      	ldr	r0, [r4, #12]
 8016dc4:	2202      	movs	r2, #2
 8016dc6:	2112      	movs	r1, #18
 8016dc8:	f7ff ff78 	bl	8016cbc <std>
 8016dcc:	2301      	movs	r3, #1
 8016dce:	61a3      	str	r3, [r4, #24]
 8016dd0:	e7d2      	b.n	8016d78 <__sinit+0xc>
 8016dd2:	bf00      	nop
 8016dd4:	08017568 	.word	0x08017568
 8016dd8:	08016d05 	.word	0x08016d05

08016ddc <__sfp>:
 8016ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dde:	4607      	mov	r7, r0
 8016de0:	f7ff ffac 	bl	8016d3c <__sfp_lock_acquire>
 8016de4:	4b1e      	ldr	r3, [pc, #120]	; (8016e60 <__sfp+0x84>)
 8016de6:	681e      	ldr	r6, [r3, #0]
 8016de8:	69b3      	ldr	r3, [r6, #24]
 8016dea:	b913      	cbnz	r3, 8016df2 <__sfp+0x16>
 8016dec:	4630      	mov	r0, r6
 8016dee:	f7ff ffbd 	bl	8016d6c <__sinit>
 8016df2:	3648      	adds	r6, #72	; 0x48
 8016df4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016df8:	3b01      	subs	r3, #1
 8016dfa:	d503      	bpl.n	8016e04 <__sfp+0x28>
 8016dfc:	6833      	ldr	r3, [r6, #0]
 8016dfe:	b30b      	cbz	r3, 8016e44 <__sfp+0x68>
 8016e00:	6836      	ldr	r6, [r6, #0]
 8016e02:	e7f7      	b.n	8016df4 <__sfp+0x18>
 8016e04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016e08:	b9d5      	cbnz	r5, 8016e40 <__sfp+0x64>
 8016e0a:	4b16      	ldr	r3, [pc, #88]	; (8016e64 <__sfp+0x88>)
 8016e0c:	60e3      	str	r3, [r4, #12]
 8016e0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016e12:	6665      	str	r5, [r4, #100]	; 0x64
 8016e14:	f000 f847 	bl	8016ea6 <__retarget_lock_init_recursive>
 8016e18:	f7ff ff96 	bl	8016d48 <__sfp_lock_release>
 8016e1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016e20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016e24:	6025      	str	r5, [r4, #0]
 8016e26:	61a5      	str	r5, [r4, #24]
 8016e28:	2208      	movs	r2, #8
 8016e2a:	4629      	mov	r1, r5
 8016e2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016e30:	f7ff fc54 	bl	80166dc <memset>
 8016e34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016e38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016e3c:	4620      	mov	r0, r4
 8016e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e40:	3468      	adds	r4, #104	; 0x68
 8016e42:	e7d9      	b.n	8016df8 <__sfp+0x1c>
 8016e44:	2104      	movs	r1, #4
 8016e46:	4638      	mov	r0, r7
 8016e48:	f7ff ff62 	bl	8016d10 <__sfmoreglue>
 8016e4c:	4604      	mov	r4, r0
 8016e4e:	6030      	str	r0, [r6, #0]
 8016e50:	2800      	cmp	r0, #0
 8016e52:	d1d5      	bne.n	8016e00 <__sfp+0x24>
 8016e54:	f7ff ff78 	bl	8016d48 <__sfp_lock_release>
 8016e58:	230c      	movs	r3, #12
 8016e5a:	603b      	str	r3, [r7, #0]
 8016e5c:	e7ee      	b.n	8016e3c <__sfp+0x60>
 8016e5e:	bf00      	nop
 8016e60:	08017568 	.word	0x08017568
 8016e64:	ffff0001 	.word	0xffff0001

08016e68 <_fwalk_reent>:
 8016e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e6c:	4606      	mov	r6, r0
 8016e6e:	4688      	mov	r8, r1
 8016e70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016e74:	2700      	movs	r7, #0
 8016e76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016e7a:	f1b9 0901 	subs.w	r9, r9, #1
 8016e7e:	d505      	bpl.n	8016e8c <_fwalk_reent+0x24>
 8016e80:	6824      	ldr	r4, [r4, #0]
 8016e82:	2c00      	cmp	r4, #0
 8016e84:	d1f7      	bne.n	8016e76 <_fwalk_reent+0xe>
 8016e86:	4638      	mov	r0, r7
 8016e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e8c:	89ab      	ldrh	r3, [r5, #12]
 8016e8e:	2b01      	cmp	r3, #1
 8016e90:	d907      	bls.n	8016ea2 <_fwalk_reent+0x3a>
 8016e92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e96:	3301      	adds	r3, #1
 8016e98:	d003      	beq.n	8016ea2 <_fwalk_reent+0x3a>
 8016e9a:	4629      	mov	r1, r5
 8016e9c:	4630      	mov	r0, r6
 8016e9e:	47c0      	blx	r8
 8016ea0:	4307      	orrs	r7, r0
 8016ea2:	3568      	adds	r5, #104	; 0x68
 8016ea4:	e7e9      	b.n	8016e7a <_fwalk_reent+0x12>

08016ea6 <__retarget_lock_init_recursive>:
 8016ea6:	4770      	bx	lr

08016ea8 <__retarget_lock_acquire_recursive>:
 8016ea8:	4770      	bx	lr

08016eaa <__retarget_lock_release_recursive>:
 8016eaa:	4770      	bx	lr

08016eac <__swhatbuf_r>:
 8016eac:	b570      	push	{r4, r5, r6, lr}
 8016eae:	460e      	mov	r6, r1
 8016eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016eb4:	2900      	cmp	r1, #0
 8016eb6:	b096      	sub	sp, #88	; 0x58
 8016eb8:	4614      	mov	r4, r2
 8016eba:	461d      	mov	r5, r3
 8016ebc:	da08      	bge.n	8016ed0 <__swhatbuf_r+0x24>
 8016ebe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	602a      	str	r2, [r5, #0]
 8016ec6:	061a      	lsls	r2, r3, #24
 8016ec8:	d410      	bmi.n	8016eec <__swhatbuf_r+0x40>
 8016eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016ece:	e00e      	b.n	8016eee <__swhatbuf_r+0x42>
 8016ed0:	466a      	mov	r2, sp
 8016ed2:	f000 f8c3 	bl	801705c <_fstat_r>
 8016ed6:	2800      	cmp	r0, #0
 8016ed8:	dbf1      	blt.n	8016ebe <__swhatbuf_r+0x12>
 8016eda:	9a01      	ldr	r2, [sp, #4]
 8016edc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016ee0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016ee4:	425a      	negs	r2, r3
 8016ee6:	415a      	adcs	r2, r3
 8016ee8:	602a      	str	r2, [r5, #0]
 8016eea:	e7ee      	b.n	8016eca <__swhatbuf_r+0x1e>
 8016eec:	2340      	movs	r3, #64	; 0x40
 8016eee:	2000      	movs	r0, #0
 8016ef0:	6023      	str	r3, [r4, #0]
 8016ef2:	b016      	add	sp, #88	; 0x58
 8016ef4:	bd70      	pop	{r4, r5, r6, pc}
	...

08016ef8 <__smakebuf_r>:
 8016ef8:	898b      	ldrh	r3, [r1, #12]
 8016efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016efc:	079d      	lsls	r5, r3, #30
 8016efe:	4606      	mov	r6, r0
 8016f00:	460c      	mov	r4, r1
 8016f02:	d507      	bpl.n	8016f14 <__smakebuf_r+0x1c>
 8016f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016f08:	6023      	str	r3, [r4, #0]
 8016f0a:	6123      	str	r3, [r4, #16]
 8016f0c:	2301      	movs	r3, #1
 8016f0e:	6163      	str	r3, [r4, #20]
 8016f10:	b002      	add	sp, #8
 8016f12:	bd70      	pop	{r4, r5, r6, pc}
 8016f14:	ab01      	add	r3, sp, #4
 8016f16:	466a      	mov	r2, sp
 8016f18:	f7ff ffc8 	bl	8016eac <__swhatbuf_r>
 8016f1c:	9900      	ldr	r1, [sp, #0]
 8016f1e:	4605      	mov	r5, r0
 8016f20:	4630      	mov	r0, r6
 8016f22:	f7ff fc4f 	bl	80167c4 <_malloc_r>
 8016f26:	b948      	cbnz	r0, 8016f3c <__smakebuf_r+0x44>
 8016f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f2c:	059a      	lsls	r2, r3, #22
 8016f2e:	d4ef      	bmi.n	8016f10 <__smakebuf_r+0x18>
 8016f30:	f023 0303 	bic.w	r3, r3, #3
 8016f34:	f043 0302 	orr.w	r3, r3, #2
 8016f38:	81a3      	strh	r3, [r4, #12]
 8016f3a:	e7e3      	b.n	8016f04 <__smakebuf_r+0xc>
 8016f3c:	4b0d      	ldr	r3, [pc, #52]	; (8016f74 <__smakebuf_r+0x7c>)
 8016f3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016f40:	89a3      	ldrh	r3, [r4, #12]
 8016f42:	6020      	str	r0, [r4, #0]
 8016f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f48:	81a3      	strh	r3, [r4, #12]
 8016f4a:	9b00      	ldr	r3, [sp, #0]
 8016f4c:	6163      	str	r3, [r4, #20]
 8016f4e:	9b01      	ldr	r3, [sp, #4]
 8016f50:	6120      	str	r0, [r4, #16]
 8016f52:	b15b      	cbz	r3, 8016f6c <__smakebuf_r+0x74>
 8016f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f58:	4630      	mov	r0, r6
 8016f5a:	f000 f891 	bl	8017080 <_isatty_r>
 8016f5e:	b128      	cbz	r0, 8016f6c <__smakebuf_r+0x74>
 8016f60:	89a3      	ldrh	r3, [r4, #12]
 8016f62:	f023 0303 	bic.w	r3, r3, #3
 8016f66:	f043 0301 	orr.w	r3, r3, #1
 8016f6a:	81a3      	strh	r3, [r4, #12]
 8016f6c:	89a0      	ldrh	r0, [r4, #12]
 8016f6e:	4305      	orrs	r5, r0
 8016f70:	81a5      	strh	r5, [r4, #12]
 8016f72:	e7cd      	b.n	8016f10 <__smakebuf_r+0x18>
 8016f74:	08016d05 	.word	0x08016d05

08016f78 <__malloc_lock>:
 8016f78:	4801      	ldr	r0, [pc, #4]	; (8016f80 <__malloc_lock+0x8>)
 8016f7a:	f7ff bf95 	b.w	8016ea8 <__retarget_lock_acquire_recursive>
 8016f7e:	bf00      	nop
 8016f80:	24005608 	.word	0x24005608

08016f84 <__malloc_unlock>:
 8016f84:	4801      	ldr	r0, [pc, #4]	; (8016f8c <__malloc_unlock+0x8>)
 8016f86:	f7ff bf90 	b.w	8016eaa <__retarget_lock_release_recursive>
 8016f8a:	bf00      	nop
 8016f8c:	24005608 	.word	0x24005608

08016f90 <__sread>:
 8016f90:	b510      	push	{r4, lr}
 8016f92:	460c      	mov	r4, r1
 8016f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f98:	f000 f894 	bl	80170c4 <_read_r>
 8016f9c:	2800      	cmp	r0, #0
 8016f9e:	bfab      	itete	ge
 8016fa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8016fa4:	181b      	addge	r3, r3, r0
 8016fa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016faa:	bfac      	ite	ge
 8016fac:	6563      	strge	r3, [r4, #84]	; 0x54
 8016fae:	81a3      	strhlt	r3, [r4, #12]
 8016fb0:	bd10      	pop	{r4, pc}

08016fb2 <__swrite>:
 8016fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fb6:	461f      	mov	r7, r3
 8016fb8:	898b      	ldrh	r3, [r1, #12]
 8016fba:	05db      	lsls	r3, r3, #23
 8016fbc:	4605      	mov	r5, r0
 8016fbe:	460c      	mov	r4, r1
 8016fc0:	4616      	mov	r6, r2
 8016fc2:	d505      	bpl.n	8016fd0 <__swrite+0x1e>
 8016fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fc8:	2302      	movs	r3, #2
 8016fca:	2200      	movs	r2, #0
 8016fcc:	f000 f868 	bl	80170a0 <_lseek_r>
 8016fd0:	89a3      	ldrh	r3, [r4, #12]
 8016fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016fd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016fda:	81a3      	strh	r3, [r4, #12]
 8016fdc:	4632      	mov	r2, r6
 8016fde:	463b      	mov	r3, r7
 8016fe0:	4628      	mov	r0, r5
 8016fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fe6:	f000 b817 	b.w	8017018 <_write_r>

08016fea <__sseek>:
 8016fea:	b510      	push	{r4, lr}
 8016fec:	460c      	mov	r4, r1
 8016fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ff2:	f000 f855 	bl	80170a0 <_lseek_r>
 8016ff6:	1c43      	adds	r3, r0, #1
 8016ff8:	89a3      	ldrh	r3, [r4, #12]
 8016ffa:	bf15      	itete	ne
 8016ffc:	6560      	strne	r0, [r4, #84]	; 0x54
 8016ffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017006:	81a3      	strheq	r3, [r4, #12]
 8017008:	bf18      	it	ne
 801700a:	81a3      	strhne	r3, [r4, #12]
 801700c:	bd10      	pop	{r4, pc}

0801700e <__sclose>:
 801700e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017012:	f000 b813 	b.w	801703c <_close_r>
	...

08017018 <_write_r>:
 8017018:	b538      	push	{r3, r4, r5, lr}
 801701a:	4d07      	ldr	r5, [pc, #28]	; (8017038 <_write_r+0x20>)
 801701c:	4604      	mov	r4, r0
 801701e:	4608      	mov	r0, r1
 8017020:	4611      	mov	r1, r2
 8017022:	2200      	movs	r2, #0
 8017024:	602a      	str	r2, [r5, #0]
 8017026:	461a      	mov	r2, r3
 8017028:	f7ec f82b 	bl	8003082 <_write>
 801702c:	1c43      	adds	r3, r0, #1
 801702e:	d102      	bne.n	8017036 <_write_r+0x1e>
 8017030:	682b      	ldr	r3, [r5, #0]
 8017032:	b103      	cbz	r3, 8017036 <_write_r+0x1e>
 8017034:	6023      	str	r3, [r4, #0]
 8017036:	bd38      	pop	{r3, r4, r5, pc}
 8017038:	2400560c 	.word	0x2400560c

0801703c <_close_r>:
 801703c:	b538      	push	{r3, r4, r5, lr}
 801703e:	4d06      	ldr	r5, [pc, #24]	; (8017058 <_close_r+0x1c>)
 8017040:	2300      	movs	r3, #0
 8017042:	4604      	mov	r4, r0
 8017044:	4608      	mov	r0, r1
 8017046:	602b      	str	r3, [r5, #0]
 8017048:	f7ec f837 	bl	80030ba <_close>
 801704c:	1c43      	adds	r3, r0, #1
 801704e:	d102      	bne.n	8017056 <_close_r+0x1a>
 8017050:	682b      	ldr	r3, [r5, #0]
 8017052:	b103      	cbz	r3, 8017056 <_close_r+0x1a>
 8017054:	6023      	str	r3, [r4, #0]
 8017056:	bd38      	pop	{r3, r4, r5, pc}
 8017058:	2400560c 	.word	0x2400560c

0801705c <_fstat_r>:
 801705c:	b538      	push	{r3, r4, r5, lr}
 801705e:	4d07      	ldr	r5, [pc, #28]	; (801707c <_fstat_r+0x20>)
 8017060:	2300      	movs	r3, #0
 8017062:	4604      	mov	r4, r0
 8017064:	4608      	mov	r0, r1
 8017066:	4611      	mov	r1, r2
 8017068:	602b      	str	r3, [r5, #0]
 801706a:	f7ec f832 	bl	80030d2 <_fstat>
 801706e:	1c43      	adds	r3, r0, #1
 8017070:	d102      	bne.n	8017078 <_fstat_r+0x1c>
 8017072:	682b      	ldr	r3, [r5, #0]
 8017074:	b103      	cbz	r3, 8017078 <_fstat_r+0x1c>
 8017076:	6023      	str	r3, [r4, #0]
 8017078:	bd38      	pop	{r3, r4, r5, pc}
 801707a:	bf00      	nop
 801707c:	2400560c 	.word	0x2400560c

08017080 <_isatty_r>:
 8017080:	b538      	push	{r3, r4, r5, lr}
 8017082:	4d06      	ldr	r5, [pc, #24]	; (801709c <_isatty_r+0x1c>)
 8017084:	2300      	movs	r3, #0
 8017086:	4604      	mov	r4, r0
 8017088:	4608      	mov	r0, r1
 801708a:	602b      	str	r3, [r5, #0]
 801708c:	f7ec f831 	bl	80030f2 <_isatty>
 8017090:	1c43      	adds	r3, r0, #1
 8017092:	d102      	bne.n	801709a <_isatty_r+0x1a>
 8017094:	682b      	ldr	r3, [r5, #0]
 8017096:	b103      	cbz	r3, 801709a <_isatty_r+0x1a>
 8017098:	6023      	str	r3, [r4, #0]
 801709a:	bd38      	pop	{r3, r4, r5, pc}
 801709c:	2400560c 	.word	0x2400560c

080170a0 <_lseek_r>:
 80170a0:	b538      	push	{r3, r4, r5, lr}
 80170a2:	4d07      	ldr	r5, [pc, #28]	; (80170c0 <_lseek_r+0x20>)
 80170a4:	4604      	mov	r4, r0
 80170a6:	4608      	mov	r0, r1
 80170a8:	4611      	mov	r1, r2
 80170aa:	2200      	movs	r2, #0
 80170ac:	602a      	str	r2, [r5, #0]
 80170ae:	461a      	mov	r2, r3
 80170b0:	f7ec f82a 	bl	8003108 <_lseek>
 80170b4:	1c43      	adds	r3, r0, #1
 80170b6:	d102      	bne.n	80170be <_lseek_r+0x1e>
 80170b8:	682b      	ldr	r3, [r5, #0]
 80170ba:	b103      	cbz	r3, 80170be <_lseek_r+0x1e>
 80170bc:	6023      	str	r3, [r4, #0]
 80170be:	bd38      	pop	{r3, r4, r5, pc}
 80170c0:	2400560c 	.word	0x2400560c

080170c4 <_read_r>:
 80170c4:	b538      	push	{r3, r4, r5, lr}
 80170c6:	4d07      	ldr	r5, [pc, #28]	; (80170e4 <_read_r+0x20>)
 80170c8:	4604      	mov	r4, r0
 80170ca:	4608      	mov	r0, r1
 80170cc:	4611      	mov	r1, r2
 80170ce:	2200      	movs	r2, #0
 80170d0:	602a      	str	r2, [r5, #0]
 80170d2:	461a      	mov	r2, r3
 80170d4:	f7eb ffb8 	bl	8003048 <_read>
 80170d8:	1c43      	adds	r3, r0, #1
 80170da:	d102      	bne.n	80170e2 <_read_r+0x1e>
 80170dc:	682b      	ldr	r3, [r5, #0]
 80170de:	b103      	cbz	r3, 80170e2 <_read_r+0x1e>
 80170e0:	6023      	str	r3, [r4, #0]
 80170e2:	bd38      	pop	{r3, r4, r5, pc}
 80170e4:	2400560c 	.word	0x2400560c

080170e8 <_init>:
 80170e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ea:	bf00      	nop
 80170ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170ee:	bc08      	pop	{r3}
 80170f0:	469e      	mov	lr, r3
 80170f2:	4770      	bx	lr

080170f4 <_fini>:
 80170f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170f6:	bf00      	nop
 80170f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80170fa:	bc08      	pop	{r3}
 80170fc:	469e      	mov	lr, r3
 80170fe:	4770      	bx	lr
